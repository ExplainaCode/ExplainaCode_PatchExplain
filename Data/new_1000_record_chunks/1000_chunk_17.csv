record_number,buggy_code,fixed_code
16001,"public void render(final Row row,final Object data,final int index){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int size=grid.getModel().getSize();
  final String subtype=row instanceof Group ? ""String_Node_Str"" : row instanceof Groupfoot ? ""String_Node_Str"" : null;
  final Template tm=resolveTemplate(grid,row,data,index,size,""String_Node_Str"",subtype);
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=grid.getAttribute(varnm);
    Object oldIter=grid.getAttribute(itervarnm);
    grid.setAttribute(varnm,data);
    grid.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(rows,row,null,null);
    grid.setAttribute(varnm,oldVar);
    grid.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    nr.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    nr.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(grid,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    if (nr instanceof Group && row instanceof Group) {
      ((Group)nr).setOpen(((Group)row).isOpen());
    }
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,row.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(grid,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}","public void render(final Row row,final Object data,final int index){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int size=grid.getModel().getSize();
  final String subtype=row instanceof Group ? ""String_Node_Str"" : row instanceof Groupfoot ? ""String_Node_Str"" : null;
  final Template tm=resolveTemplate(grid,row,data,index,size,""String_Node_Str"",subtype);
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=grid.getAttribute(varnm);
    Object oldIter=grid.getAttribute(itervarnm);
    grid.setAttribute(varnm,data);
    grid.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(rows,row,null,null);
    grid.setAttribute(varnm,oldVar);
    grid.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(grid,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    if (nr instanceof Group && row instanceof Group) {
      ((Group)nr).setOpen(((Group)row).isOpen());
    }
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,row.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(grid,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}"
16002,"public void renderTabpanel(Tabpanel item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabpanels tabpanels=tabbox.getTabpanels();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.appendChild(new Label(Objects.toString(data)));
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabpanels.getAttribute(varnm);
    Object oldIter=tabpanels.getAttribute(itervarnm);
    tabpanels.setAttribute(varnm,data);
    tabpanels.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabpanels,item,null,null);
    tabpanels.setAttribute(varnm,oldVar);
    tabpanels.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tabpanel ntabpanel=(Tabpanel)items[0];
    ntabpanel.setAttribute(BinderImpl.VAR,varnm);
    ntabpanel.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    ntabpanel.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(tabbox,ntabpanel,index,varnm);
    ntabpanel.setAttribute(itervarnm,iterStatus);
    ntabpanel.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabpanels,ntabpanel,data,index,size);
    item.setAttribute(""String_Node_Str"",ntabpanel);
    item.detach();
  }
}","public void renderTabpanel(Tabpanel item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabpanels tabpanels=tabbox.getTabpanels();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.appendChild(new Label(Objects.toString(data)));
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabpanels.getAttribute(varnm);
    Object oldIter=tabpanels.getAttribute(itervarnm);
    tabpanels.setAttribute(varnm,data);
    tabpanels.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabpanels,item,null,null);
    tabpanels.setAttribute(varnm,oldVar);
    tabpanels.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tabpanel ntabpanel=(Tabpanel)items[0];
    ntabpanel.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(tabbox,ntabpanel,index,varnm);
    ntabpanel.setAttribute(itervarnm,iterStatus);
    ntabpanel.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabpanels,ntabpanel,data,index,size);
    item.setAttribute(""String_Node_Str"",ntabpanel);
    item.detach();
  }
}"
16003,"public void renderTab(Tab item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabs tabs=tabbox.getTabs();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabs.getAttribute(varnm);
    Object oldIter=tabs.getAttribute(itervarnm);
    tabs.setAttribute(varnm,data);
    tabs.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabs,item,null,null);
    tabs.setAttribute(varnm,oldVar);
    tabs.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tab ntab=(Tab)items[0];
    ntab.setAttribute(BinderImpl.VAR,varnm);
    ntab.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    ntab.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(tabbox,ntab,index,varnm);
    ntab.setAttribute(itervarnm,iterStatus);
    ntab.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabs,ntab,data,index,size);
    if (ntab.getValue() == null)     ntab.setValue(data);
    item.setAttribute(""String_Node_Str"",ntab);
    item.detach();
  }
}","public void renderTab(Tab item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabs tabs=tabbox.getTabs();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabs.getAttribute(varnm);
    Object oldIter=tabs.getAttribute(itervarnm);
    tabs.setAttribute(varnm,data);
    tabs.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabs,item,null,null);
    tabs.setAttribute(varnm,oldVar);
    tabs.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tab ntab=(Tab)items[0];
    ntab.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(tabbox,ntab,index,varnm);
    ntab.setAttribute(itervarnm,iterStatus);
    ntab.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabs,ntab,data,index,size);
    if (ntab.getValue() == null)     ntab.setValue(data);
    item.setAttribute(""String_Node_Str"",ntab);
    item.detach();
  }
}"
16004,"public Template resolveTemplate(Component eachComp,final Object eachData,final int index,final int size,final String subType){
  final Object value=evaluateTemplate(eachComp,eachData,index,size,subType);
  if (value instanceof Template) {
    return (Template)value;
  }
 else   if (value instanceof String) {
    Template template=lookupTemplate(eachComp,subType == null ? (String)value : (String)value + ""String_Node_Str"" + subType);
    if (template == null && ((String)value).indexOf('.') > 0) {
      try {
        template=(Template)_comp.getPage().resolveClass(((String)value)).newInstance();
      }
 catch (      Exception e) {
      }
    }
    return template;
  }
 else {
    throw new UiException(""String_Node_Str"" + value);
  }
}","public Template resolveTemplate(Component eachComp,final Object eachData,final int index,final int size,final String subType){
  final Object value=evaluateTemplate(eachComp,eachData,index,size,subType);
  if (value instanceof Template) {
    return (Template)value;
  }
 else   if (value instanceof String) {
    Template template;
    if (subType == null) {
      template=lookupTemplate(eachComp,(String)value);
    }
 else {
      template=lookupTemplate(eachComp,(String)value + ""String_Node_Str"" + subType);
      if (template == null) {
        template=lookupTemplate(eachComp,(String)value);
      }
    }
    if (template == null && ((String)value).indexOf('.') > 0) {
      try {
        template=(Template)_comp.getPage().resolveClass(((String)value)).newInstance();
      }
 catch (      Exception e) {
      }
    }
    return template;
  }
 else {
    throw new UiException(""String_Node_Str"" + value);
  }
}"
16005,"public void render(final Component owner,final Object data,final int index,final int size,final boolean isListModel){
  final Template tm=resolveTemplate(owner,owner,data,index,size,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final ForEachStatus iterStatus=new ChildrenBindingForEachStatus(index,data,size);
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
  Object oldVar=owner.getAttribute(varnm);
  Object oldIter=owner.getAttribute(itervarnm);
  owner.setAttribute(varnm,data);
  owner.setAttribute(itervarnm,iterStatus);
  final Component[] items=ShadowElementsCtrl.filterOutShadows(tm.create(owner,null,null,null));
  final ForEachStatus bindChildIterStatus=new AbstractForEachStatus(){
    private static final long serialVersionUID=1L;
    public int getIndex(){
      return index;
    }
    public Object getEach(){
      return data;
    }
    public Integer getEnd(){
      return size;
    }
    public Integer getCurrentIndex(    Component comp){
      return comp.getParent().getChildren().indexOf(comp) / items.length;
    }
  }
;
  owner.setAttribute(varnm,oldVar);
  owner.setAttribute(itervarnm,oldIter);
  boolean templateTracked=false;
  if (isListModel) {
    List<Component[]> cbrCompsList=(List<Component[]>)owner.getAttribute(BinderCtrl.CHILDREN_BINDING_RENDERED_COMPONENTS);
    if (cbrCompsList == null)     cbrCompsList=new LinkedList<Component[]>();
    cbrCompsList.add(items);
    owner.setAttribute(BinderCtrl.CHILDREN_BINDING_RENDERED_COMPONENTS,cbrCompsList);
  }
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    comp.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    comp.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,bindChildIterStatus);
    addItemReference(owner,comp,index,varnm);
    comp.setAttribute(itervarnm,iterStatus);
    if (!templateTracked) {
      comp.setAttribute(TemplateResolver.TEMPLATE_OBJECT,owner.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
      addTemplateTracking(owner,comp,data,index,size);
      templateTracked=true;
    }
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}","public void render(final Component owner,final Object data,final int index,final int size,final boolean isListModel){
  final Template tm=resolveTemplate(owner,owner,data,index,size,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final ForEachStatus iterStatus=new ChildrenBindingForEachStatus(index,data,size);
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
  Object oldVar=owner.getAttribute(varnm);
  Object oldIter=owner.getAttribute(itervarnm);
  owner.setAttribute(varnm,data);
  owner.setAttribute(itervarnm,iterStatus);
  final Component[] items=ShadowElementsCtrl.filterOutShadows(tm.create(owner,null,null,null));
  final ForEachStatus bindChildIterStatus=new AbstractForEachStatus(){
    private static final long serialVersionUID=1L;
    public int getIndex(){
      return index;
    }
    public Object getCurrent(){
      return data;
    }
    public Integer getEnd(){
      return size;
    }
    public Integer getCurrentIndex(    Component comp){
      return comp.getParent().getChildren().indexOf(comp) / items.length;
    }
  }
;
  owner.setAttribute(varnm,oldVar);
  owner.setAttribute(itervarnm,oldIter);
  boolean templateTracked=false;
  if (isListModel) {
    List<Component[]> cbrCompsList=(List<Component[]>)owner.getAttribute(BinderCtrl.CHILDREN_BINDING_RENDERED_COMPONENTS);
    if (cbrCompsList == null)     cbrCompsList=new LinkedList<Component[]>();
    cbrCompsList.add(items);
    owner.setAttribute(BinderCtrl.CHILDREN_BINDING_RENDERED_COMPONENTS,cbrCompsList);
  }
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    comp.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    comp.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,bindChildIterStatus);
    addItemReference(owner,comp,index,varnm);
    comp.setAttribute(itervarnm,iterStatus);
    if (!templateTracked) {
      comp.setAttribute(TemplateResolver.TEMPLATE_OBJECT,owner.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
      addTemplateTracking(owner,comp,data,index,size);
      templateTracked=true;
    }
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}"
16006,"public void render(final Listitem item,final Object data,final int index) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int size=listbox.getModel().getSize();
  final String tmn=item instanceof Listgroup ? ""String_Node_Str"" : item instanceof Listgroupfoot ? ""String_Node_Str"" : ""String_Node_Str"";
  final Template tm=resolveTemplate(listbox,item,data,index,size,tmn);
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=listbox.getAttribute(varnm);
    Object oldIter=listbox.getAttribute(itervarnm);
    listbox.setAttribute(varnm,data);
    listbox.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(listbox,item,null,null);
    listbox.setAttribute(varnm,oldVar);
    listbox.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(listbox,nli,index,varnm);
    nli.setAttribute(itervarnm,iterStatus);
    if (nli instanceof Listgroup && item instanceof Listgroup) {
      ((Listgroup)nli).setOpen(((Listgroup)item).isOpen());
    }
    nli.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(listbox,nli,data,index,size);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}","public void render(final Listitem item,final Object data,final int index) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int size=listbox.getModel().getSize();
  final String subtype=item instanceof Listgroup ? ""String_Node_Str"" : item instanceof Listgroupfoot ? ""String_Node_Str"" : null;
  final Template tm=resolveTemplate(listbox,item,data,index,size,""String_Node_Str"",subtype);
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=listbox.getAttribute(varnm);
    Object oldIter=listbox.getAttribute(itervarnm);
    listbox.setAttribute(varnm,data);
    listbox.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(listbox,item,null,null);
    listbox.setAttribute(varnm,oldVar);
    listbox.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(listbox,nli,index,varnm);
    nli.setAttribute(itervarnm,iterStatus);
    if (nli instanceof Listgroup && item instanceof Listgroup) {
      ((Listgroup)nli).setOpen(((Listgroup)item).isOpen());
    }
    nli.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(listbox,nli,data,index,size);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}"
16007,"public Template resolveTemplate(Component eachComp,final Object eachData,final int index,final int size,final String subType){
  final Object value=evaluateTemplate(eachComp,eachData,index,size,subType);
  if (value instanceof Template) {
    return (Template)value;
  }
 else   if (value instanceof String) {
    Template template=lookupTemplate(eachComp,subType == null ? (String)value : (String)value + ""String_Node_Str"" + subType);
    if (template == null && ((String)value).indexOf('.') > 0) {
      try {
        template=(Template)_comp.getPage().resolveClass(((String)value)).newInstance();
      }
 catch (      Exception e) {
      }
    }
    return template;
  }
 else {
    throw new UiException(""String_Node_Str"" + value);
  }
}","public Template resolveTemplate(Component eachComp,final Object eachData,final int index,final int size,final String subType){
  final Object value=evaluateTemplate(eachComp,eachData,index,size,subType);
  if (value instanceof Template) {
    return (Template)value;
  }
 else   if (value instanceof String) {
    Template template;
    if (subType == null) {
      template=lookupTemplate(eachComp,(String)value);
    }
 else {
      template=lookupTemplate(eachComp,(String)value + ""String_Node_Str"" + subType);
      if (template == null) {
        template=lookupTemplate(eachComp,(String)value);
      }
    }
    if (template == null && ((String)value).indexOf('.') > 0) {
      try {
        template=(Template)_comp.getPage().resolveClass(((String)value)).newInstance();
      }
 catch (      Exception e) {
      }
    }
    return template;
  }
 else {
    throw new UiException(""String_Node_Str"" + value);
  }
}"
16008,"public Object resolveVariable(Component child,String name,boolean recurse){
  if (_firstInsertion == null)   return null;
  if (child == null || child.getParent() == null) {
    return getAttributeOrFellow(name,recurse);
  }
  List<Component> children=child.getParent().getChildren();
  int insertIndex=children.indexOf(child);
  int selfFirstIndex=children.indexOf(_firstInsertion);
  if (insertIndex < selfFirstIndex)   return null;
  Map<Component,Integer> indexMap=fillUpIndexMap(_firstInsertion,_lastInsertion);
  int[] selfIndex=getInsertionIndex(_firstInsertion,_lastInsertion,indexMap);
  if (selfIndex[1] < insertIndex)   return null;
  HtmlShadowElement node=queryIntersectedShadowIfAny(insertIndex,indexMap);
  if (node != null)   return node.getShadowVariable(name,recurse);
  return null;
}","public Object resolveVariable(Component child,String name,boolean recurse){
  if (_firstInsertion == null)   return null;
  if (child == null || child.getParent() == null) {
    return getAttributeOrFellow(name,recurse);
  }
  List<Component> children=child.getParent().getChildren();
  int insertIndex=children.indexOf(child);
  int selfFirstIndex=children.indexOf(_firstInsertion);
  if (insertIndex < selfFirstIndex)   return null;
  Map<Component,Integer> indexMap=fillUpIndexMap(_firstInsertion,_lastInsertion);
  int[] selfIndex=getInsertionIndex(_firstInsertion,_lastInsertion,indexMap);
  if (selfIndex[1] < insertIndex)   return null;
  HtmlShadowElement node=queryIntersectedShadowIfAny(insertIndex,indexMap);
  if (node != null)   return node.resolveVariable(child,name,recurse);
  return null;
}"
16009,"public int compareTo(Object o){
  if (!(o instanceof Path))   throw new WrongValueException(o + ""String_Node_Str"");
  int length=path.length;
  Path toCompared=(Path)o;
  int[] toPath=toCompared.path;
  int toLength=toCompared.path.length;
  if (length < 1 || toLength < 1)   throw new WrongValueException(this + ""String_Node_Str"" + o);
  int smaller=(length < toLength ? length : toLength);
  for (int i=0; i < smaller; i++) {
    if (path[i] != toPath[i])     return path[i] - toPath[i];
  }
  return length - toLength;
}","public int compareTo(Object o){
  if (!(o instanceof Path))   throw new WrongValueException(o + ""String_Node_Str"");
  int length=path.length;
  Path toCompared=(Path)o;
  int[] toPath=toCompared.path;
  int toLength=toCompared.path.length;
  int smaller=(length < toLength ? length : toLength);
  for (int i=0; i < smaller; i++) {
    if (path[i] != toPath[i])     return path[i] - toPath[i];
  }
  return length - toLength;
}"
16010,"@SuppressWarnings(""String_Node_Str"") private void updatePath(TreeDataEvent event){
  final int type=event.getType();
  final int[] affectedPath=event.getAffectedPath();
  if (affectedPath == null || affectedPath.length < 1)   return;
switch (type) {
case TreeDataEvent.INTERVAL_REMOVED:
    List<Path> l=new ArrayList<Path>(_opens);
  Collections.sort(l);
for (int i=0; i < l.size(); i++) {
  Path p=l.get(i);
  _opens.remove(p);
  boolean isPrefix=p.isPrefix(affectedPath,-1);
  if (!isPrefix)   _opens.add(p);
}
l=new ArrayList<Path>(_selection);
Collections.sort(l);
for (int i=0; i < l.size(); i++) {
Path p=l.get(i);
_selection.remove(p);
boolean isPrefix=p.isPrefix(affectedPath,-1);
if (!isPrefix) _selection.add(p);
}
break;
case TreeDataEvent.INTERVAL_ADDED:
l=new ArrayList<Path>(_opens);
Collections.sort(l);
for (int i=l.size() - 1; i > -1; i--) {
Path p=l.get(i);
_opens.remove(p);
p.isPrefix(affectedPath,1);
_opens.add(p);
}
l=new ArrayList<Path>(_selection);
Collections.sort(l);
for (int i=0; i < l.size(); i++) {
Path p=l.get(i);
_opens.remove(p);
p.isPrefix(affectedPath,1);
_opens.add(p);
}
break;
}
}","private void updatePath(TreeDataEvent event){
  final int type=event.getType();
  final int[] affectedPath=event.getAffectedPath();
  if (affectedPath == null || affectedPath.length < 1)   return;
switch (type) {
case TreeDataEvent.INTERVAL_REMOVED:
    internalDataChange(_opens,affectedPath,true);
  internalDataChange(_selection,affectedPath,true);
break;
case TreeDataEvent.INTERVAL_ADDED:
internalDataChange(_opens,affectedPath,false);
internalDataChange(_selection,affectedPath,false);
break;
}
}"
16011,"protected Path(int[] path){
  this.path=path;
}","protected Path(Path p){
  int length=p.path.length;
  this.path=new int[length];
  for (int i=0; i < length; i++) {
    this.path[i]=p.path[i];
  }
}"
16012,"protected void addItemReference(Component modelOwner,final Component comp,int index,String varnm){
  if (comp.getDefinition().isNative()) {
    for (    Component child : comp.getChildren()) {
      addItemReference(modelOwner,child,index,varnm);
    }
  }
 else {
    final Binder binder=BinderUtil.getBinder(comp,true);
    if (binder == null)     return;
    final String expression=BindELContext.getModelName(modelOwner) + ""String_Node_Str"" + index+ ""String_Node_Str"";
    comp.setAttribute(varnm,new ReferenceBindingImpl(binder,comp,varnm,expression));
  }
}","protected void addItemReference(Component modelOwner,final Component comp,int index,String varnm){
  if (comp.getDefinition().isNative()) {
    for (    Component child : comp.getChildren()) {
      addItemReference(modelOwner,child,index,varnm);
    }
  }
 else {
    final Binder binder=BinderUtil.getBinder(comp,true);
    if (binder == null)     return;
    final String expression;
    if (comp.getAttribute(IS_TEMPLATE_MODEL_ENABLED_ATTR) != null) {
      expression=BindELContext.getModelName(modelOwner) + ""String_Node_Str"" + CURRENT_INDEX_RESOLVER_ATTR+ ""String_Node_Str"";
    }
 else {
      expression=BindELContext.getModelName(modelOwner) + ""String_Node_Str"" + index+ ""String_Node_Str"";
    }
    comp.setAttribute(varnm,new ReferenceBindingImpl(binder,comp,varnm,expression));
  }
}"
16013,"public void render(final Component owner,final Object data,final int index,final int size){
  final Template tm=resolveTemplate(owner,owner,data,index,size,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final ForEachStatus iterStatus=new AbstractForEachStatus(){
    private static final long serialVersionUID=1L;
    public int getIndex(){
      return index;
    }
    public Object getEach(){
      return data;
    }
    public Integer getEnd(){
      return size;
    }
  }
;
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
  Object oldVar=owner.getAttribute(varnm);
  Object oldIter=owner.getAttribute(itervarnm);
  owner.setAttribute(varnm,data);
  owner.setAttribute(itervarnm,iterStatus);
  final Component[] items=tm.create(owner,null,null,null);
  owner.setAttribute(varnm,oldVar);
  owner.setAttribute(itervarnm,oldIter);
  boolean templateTracked=false;
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(owner,comp,index,varnm);
    comp.setAttribute(itervarnm,iterStatus);
    if (!templateTracked) {
      comp.setAttribute(TemplateResolver.TEMPLATE_OBJECT,owner.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
      addTemplateTracking(owner,comp,data,index,size);
      templateTracked=true;
    }
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}","public void render(final Component owner,final Object data,final int index,final int size){
  final Template tm=resolveTemplate(owner,owner,data,index,size,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final ForEachStatus iterStatus=new AbstractForEachStatus(){
    private static final long serialVersionUID=1L;
    public int getIndex(){
      return index;
    }
    public Object getEach(){
      return data;
    }
    public Integer getEnd(){
      return size;
    }
  }
;
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
  Object oldVar=owner.getAttribute(varnm);
  Object oldIter=owner.getAttribute(itervarnm);
  owner.setAttribute(varnm,data);
  owner.setAttribute(itervarnm,iterStatus);
  final Component[] items=tm.create(owner,null,null,null);
  final ForEachStatus bindChildIterStatus=new AbstractForEachStatus(){
    private static final long serialVersionUID=1L;
    public int getIndex(){
      return index;
    }
    public Object getEach(){
      return data;
    }
    public Integer getEnd(){
      return size;
    }
    public Integer getCurrentIndex(    Component comp){
      return comp.getParent().getChildren().indexOf(comp) / items.length;
    }
  }
;
  owner.setAttribute(varnm,oldVar);
  owner.setAttribute(itervarnm,oldIter);
  boolean templateTracked=false;
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    comp.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    comp.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,bindChildIterStatus);
    addItemReference(owner,comp,index,varnm);
    comp.setAttribute(itervarnm,iterStatus);
    if (!templateTracked) {
      comp.setAttribute(TemplateResolver.TEMPLATE_OBJECT,owner.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
      addTemplateTracking(owner,comp,data,index,size);
      templateTracked=true;
    }
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}"
16014,"public void render(final Comboitem item,final Object data,final int index) throws Exception {
  final Combobox cb=(Combobox)item.getParent();
  final ListModel<?> model=cb.getModel();
  final int size=model.getSize();
  final Template tm=resolveTemplate(cb,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=cb.getAttribute(varnm);
    Object oldIter=cb.getAttribute(itervarnm);
    cb.setAttribute(varnm,data);
    cb.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(cb,item,null,null);
    cb.setAttribute(varnm,oldVar);
    cb.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Comboitem nci=(Comboitem)items[0];
    nci.setAttribute(BinderImpl.VAR,varnm);
    if (model instanceof ListSubModel) {
      nci.setAttribute(varnm,data);
    }
 else {
      addItemReference(cb,nci,index,varnm);
    }
    nci.setAttribute(itervarnm,iterStatus);
    nci.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(cb,nci,data,index,size);
    if (nci.getValue() == null)     nci.setValue(data);
    item.setAttribute(""String_Node_Str"",nci);
    item.detach();
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,nci));
  }
}","public void render(final Comboitem item,final Object data,final int index) throws Exception {
  final Combobox cb=(Combobox)item.getParent();
  final ListModel<?> model=cb.getModel();
  final int size=model.getSize();
  final Template tm=resolveTemplate(cb,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=cb.getAttribute(varnm);
    Object oldIter=cb.getAttribute(itervarnm);
    cb.setAttribute(varnm,data);
    cb.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(cb,item,null,null);
    cb.setAttribute(varnm,oldVar);
    cb.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Comboitem nci=(Comboitem)items[0];
    nci.setAttribute(BinderImpl.VAR,varnm);
    if (model instanceof ListSubModel) {
      nci.setAttribute(varnm,data);
    }
 else {
      nci.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
      nci.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
      addItemReference(cb,nci,index,varnm);
    }
    nci.setAttribute(itervarnm,iterStatus);
    nci.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(cb,nci,data,index,size);
    if (nci.getValue() == null)     nci.setValue(data);
    item.setAttribute(""String_Node_Str"",nci);
    item.detach();
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,nci));
  }
}"
16015,"public void render(final Listitem item,final Object data,final int index) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int size=listbox.getModel().getSize();
  final String tmn=item instanceof Listgroup ? ""String_Node_Str"" : item instanceof Listgroupfoot ? ""String_Node_Str"" : ""String_Node_Str"";
  final Template tm=resolveTemplate(listbox,item,data,index,size,tmn);
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=listbox.getAttribute(varnm);
    Object oldIter=listbox.getAttribute(itervarnm);
    listbox.setAttribute(varnm,data);
    listbox.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(listbox,item,null,null);
    listbox.setAttribute(varnm,oldVar);
    listbox.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(listbox,nli,index,varnm);
    nli.setAttribute(itervarnm,iterStatus);
    if (nli instanceof Listgroup && item instanceof Listgroup) {
      ((Listgroup)nli).setOpen(((Listgroup)item).isOpen());
    }
    nli.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(listbox,nli,data,index,size);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}","public void render(final Listitem item,final Object data,final int index) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int size=listbox.getModel().getSize();
  final String tmn=item instanceof Listgroup ? ""String_Node_Str"" : item instanceof Listgroupfoot ? ""String_Node_Str"" : ""String_Node_Str"";
  final Template tm=resolveTemplate(listbox,item,data,index,size,tmn);
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=listbox.getAttribute(varnm);
    Object oldIter=listbox.getAttribute(itervarnm);
    listbox.setAttribute(varnm,data);
    listbox.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(listbox,item,null,null);
    listbox.setAttribute(varnm,oldVar);
    listbox.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    nli.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    nli.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(listbox,nli,index,varnm);
    nli.setAttribute(itervarnm,iterStatus);
    if (nli instanceof Listgroup && item instanceof Listgroup) {
      ((Listgroup)nli).setOpen(((Listgroup)item).isOpen());
    }
    nli.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(listbox,nli,data,index,size);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}"
16016,"public void render(final Radio item,final Object data,final int index) throws Exception {
  final Radiogroup radiogroup=item.getRadiogroup();
  final int size=radiogroup.getModel().getSize();
  final Template tm=resolveTemplate(radiogroup,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=radiogroup.getAttribute(varnm);
    Object oldIter=radiogroup.getAttribute(itervarnm);
    radiogroup.setAttribute(varnm,data);
    radiogroup.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(radiogroup,item,null,null);
    radiogroup.setAttribute(varnm,oldVar);
    radiogroup.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Radio nr=(Radio)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(radiogroup,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(radiogroup,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    item.setAttribute(""String_Node_Str"",nr);
    item.detach();
  }
}","public void render(final Radio item,final Object data,final int index) throws Exception {
  final Radiogroup radiogroup=item.getRadiogroup();
  final int size=radiogroup.getModel().getSize();
  final Template tm=resolveTemplate(radiogroup,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=radiogroup.getAttribute(varnm);
    Object oldIter=radiogroup.getAttribute(itervarnm);
    radiogroup.setAttribute(varnm,data);
    radiogroup.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(radiogroup,item,null,null);
    radiogroup.setAttribute(varnm,oldVar);
    radiogroup.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Radio nr=(Radio)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    nr.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    nr.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(radiogroup,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(radiogroup,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    item.setAttribute(""String_Node_Str"",nr);
    item.detach();
  }
}"
16017,"public void render(final Row row,final Object data,final int index){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int size=grid.getModel().getSize();
  final String subtype=row instanceof Group ? ""String_Node_Str"" : row instanceof Groupfoot ? ""String_Node_Str"" : null;
  final Template tm=resolveTemplate(grid,row,data,index,size,""String_Node_Str"",subtype);
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=grid.getAttribute(varnm);
    Object oldIter=grid.getAttribute(itervarnm);
    grid.setAttribute(varnm,data);
    grid.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(rows,row,null,null);
    grid.setAttribute(varnm,oldVar);
    grid.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(grid,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    if (nr instanceof Group && row instanceof Group) {
      ((Group)nr).setOpen(((Group)row).isOpen());
    }
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,row.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(grid,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}","public void render(final Row row,final Object data,final int index){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int size=grid.getModel().getSize();
  final String subtype=row instanceof Group ? ""String_Node_Str"" : row instanceof Groupfoot ? ""String_Node_Str"" : null;
  final Template tm=resolveTemplate(grid,row,data,index,size,""String_Node_Str"",subtype);
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=grid.getAttribute(varnm);
    Object oldIter=grid.getAttribute(itervarnm);
    grid.setAttribute(varnm,data);
    grid.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(rows,row,null,null);
    grid.setAttribute(varnm,oldVar);
    grid.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    nr.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    nr.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(grid,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    if (nr instanceof Group && row instanceof Group) {
      ((Group)nr).setOpen(((Group)row).isOpen());
    }
    nr.setAttribute(TemplateResolver.TEMPLATE_OBJECT,row.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(grid,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}"
16018,"public void renderTabpanel(Tabpanel item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabpanels tabpanels=tabbox.getTabpanels();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.appendChild(new Label(Objects.toString(data)));
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabpanels.getAttribute(varnm);
    Object oldIter=tabpanels.getAttribute(itervarnm);
    tabpanels.setAttribute(varnm,data);
    tabpanels.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabpanels,item,null,null);
    tabpanels.setAttribute(varnm,oldVar);
    tabpanels.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tabpanel ntabpanel=(Tabpanel)items[0];
    ntabpanel.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(tabbox,ntabpanel,index,varnm);
    ntabpanel.setAttribute(itervarnm,iterStatus);
    ntabpanel.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabpanels,ntabpanel,data,index,size);
    item.setAttribute(""String_Node_Str"",ntabpanel);
    item.detach();
  }
}","public void renderTabpanel(Tabpanel item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabpanels tabpanels=tabbox.getTabpanels();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.appendChild(new Label(Objects.toString(data)));
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabpanels.getAttribute(varnm);
    Object oldIter=tabpanels.getAttribute(itervarnm);
    tabpanels.setAttribute(varnm,data);
    tabpanels.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabpanels,item,null,null);
    tabpanels.setAttribute(varnm,oldVar);
    tabpanels.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tabpanel ntabpanel=(Tabpanel)items[0];
    ntabpanel.setAttribute(BinderImpl.VAR,varnm);
    ntabpanel.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    ntabpanel.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(tabbox,ntabpanel,index,varnm);
    ntabpanel.setAttribute(itervarnm,iterStatus);
    ntabpanel.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabpanels,ntabpanel,data,index,size);
    item.setAttribute(""String_Node_Str"",ntabpanel);
    item.detach();
  }
}"
16019,"public void renderTab(Tab item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabs tabs=tabbox.getTabs();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabs.getAttribute(varnm);
    Object oldIter=tabs.getAttribute(itervarnm);
    tabs.setAttribute(varnm,data);
    tabs.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabs,item,null,null);
    tabs.setAttribute(varnm,oldVar);
    tabs.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tab ntab=(Tab)items[0];
    ntab.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(tabbox,ntab,index,varnm);
    ntab.setAttribute(itervarnm,iterStatus);
    ntab.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabs,ntab,data,index,size);
    if (ntab.getValue() == null)     ntab.setValue(data);
    item.setAttribute(""String_Node_Str"",ntab);
    item.detach();
  }
}","public void renderTab(Tab item,final Object data,final int index) throws Exception {
  final Tabbox tabbox=item.getTabbox();
  final Tabs tabs=tabbox.getTabs();
  final int size=tabbox.getModel().getSize();
  final String tmn=""String_Node_Str"";
  final Template tm=resolveTemplate(tabbox,item,data,index,size,tmn,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      public int getIndex(){
        return index;
      }
      public Object getEach(){
        return data;
      }
      public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=tabs.getAttribute(varnm);
    Object oldIter=tabs.getAttribute(itervarnm);
    tabs.setAttribute(varnm,data);
    tabs.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(tabs,item,null,null);
    tabs.setAttribute(varnm,oldVar);
    tabs.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Tab ntab=(Tab)items[0];
    ntab.setAttribute(BinderImpl.VAR,varnm);
    ntab.setAttribute(AbstractRenderer.IS_TEMPLATE_MODEL_ENABLED_ATTR,true);
    ntab.setAttribute(AbstractRenderer.CURRENT_INDEX_RESOLVER_ATTR,iterStatus);
    addItemReference(tabbox,ntab,index,varnm);
    ntab.setAttribute(itervarnm,iterStatus);
    ntab.setAttribute(TemplateResolver.TEMPLATE_OBJECT,item.removeAttribute(TemplateResolver.TEMPLATE_OBJECT));
    addTemplateTracking(tabs,ntab,data,index,size);
    if (ntab.getValue() == null)     ntab.setValue(data);
    item.setAttribute(""String_Node_Str"",ntab);
    item.detach();
  }
}"
16020,"/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map<String,String> attrs=new HashMap<String,String>();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        sid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(XMLs.encodeText(request.getParameter(""String_Node_Str"")));
        Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
        Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          percent.remove(key);
          return;
        }
        final Integer p=percent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      uuid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
      sid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map<String,Object> params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
      Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
      final String key=uuid + '_' + sid;
      if (percent != null) {
        percent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
    Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
    final String key=uuid + '_' + sid;
    if (percent != null) {
      percent.remove(key);
      size.put(key,alert);
    }
  }
  if (log.isTraceEnabled())   log.trace(Objects.toString(attrs));
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}","/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map<String,String> attrs=new HashMap<String,String>();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=escapeParam(request.getParameter(""String_Node_Str""));
        sid=escapeParam(request.getParameter(""String_Node_Str""));
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(XMLs.encodeText(request.getParameter(""String_Node_Str"")));
        Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
        Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          percent.remove(key);
          return;
        }
        final Integer p=percent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      uuid=escapeParam(request.getParameter(""String_Node_Str""));
      sid=escapeParam(request.getParameter(""String_Node_Str""));
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=escapeParam(request.getParameter(""String_Node_Str""));
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map<String,Object> params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
      Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
      final String key=uuid + '_' + sid;
      if (percent != null) {
        percent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
    Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
    final String key=uuid + '_' + sid;
    if (percent != null) {
      percent.remove(key);
      size.put(key,alert);
    }
  }
  if (log.isTraceEnabled())   log.trace(Objects.toString(attrs));
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}"
16021,"public void redraw(Writer out) throws IOException {
  final Execution exec=Executions.getCurrent();
  if (!HtmlPageRenders.isDirectContent(exec)) {
    super.redraw(out);
    return;
  }
  final boolean idRequired=isIdRequired();
  if (idRequired) {
    out.write(""String_Node_Str"");
    out.write(getUuid());
    out.write(""String_Node_Str"");
  }
  out.write(_encode ? XMLs.encodeText(_value) : _value);
  if (idRequired)   out.write(""String_Node_Str"");
  final TagRenderContext rc=PageRenderer.getTagRenderContext(exec);
  if (rc != null) {
    rc.renderBegin(this,getClientEvents(),false);
    rc.renderEnd(this);
  }
}","public void redraw(Writer out) throws IOException {
  final Execution exec=Executions.getCurrent();
  if (!HtmlPageRenders.isDirectContent(exec)) {
    super.redraw(out);
    return;
  }
  final boolean idRequired=isIdRequired();
  if (idRequired) {
    out.write(""String_Node_Str"");
    out.write(getUuid());
    out.write(""String_Node_Str"");
  }
  out.write(_encode ? XMLs.encodeText(_value) : _value);
  if (idRequired)   out.write(""String_Node_Str"");
  final TagRenderContext rc=PageRenderer.getTagRenderContext(exec);
  if (rc != null) {
    rc.renderBegin(this,getClientEvents(),getSpecialRendererOutput(this),false);
    rc.renderEnd(this);
  }
}"
16022,"/** 
 * Renders the children directly to the given output. Notice it is called only if   {@link #redraw} is going to renderthe content (HTML tags) directly. If it is about to generate the JavaScript code {@link #redrawChildren} will be called instead.<p>You have to override this method if the deriving class has additional information to render.
 * @since 5.0.7
 */
protected void redrawChildrenDirectly(TagRenderContext rc,Execution exec,java.io.Writer out) throws java.io.IOException {
  for (Component child=getFirstChild(); child != null; ) {
    Component next=child.getNextSibling();
    if (((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
      ((ComponentCtrl)child).redraw(out);
    }
 else {
      HtmlPageRenders.setDirectContent(exec,false);
      rc.renderBegin(child,null,true);
      HtmlPageRenders.outStandalone(exec,child,out);
      rc.renderEnd(child);
      HtmlPageRenders.setDirectContent(exec,true);
    }
    child=next;
  }
}","/** 
 * Renders the children directly to the given output. Notice it is called only if   {@link #redraw} is going to renderthe content (HTML tags) directly. If it is about to generate the JavaScript code {@link #redrawChildren} will be called instead.<p>You have to override this method if the deriving class has additional information to render.
 * @since 5.0.7
 */
protected void redrawChildrenDirectly(TagRenderContext rc,Execution exec,java.io.Writer out) throws java.io.IOException {
  for (Component child=getFirstChild(); child != null; ) {
    Component next=child.getNextSibling();
    if (((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
      ((ComponentCtrl)child).redraw(out);
    }
 else {
      HtmlPageRenders.setDirectContent(exec,false);
      rc.renderBegin(child,null,getSpecialRendererOutput(child),true);
      HtmlPageRenders.outStandalone(exec,child,out);
      rc.renderEnd(child);
      HtmlPageRenders.setDirectContent(exec,true);
    }
    child=next;
  }
}"
16023,"public void redraw(java.io.Writer out) throws java.io.IOException {
  if (_tagnm == null)   throw new UiException(""String_Node_Str"");
  final Execution exec=Executions.getCurrent();
  if (exec == null || exec.isAsyncUpdate(null) || !HtmlPageRenders.isDirectContent(exec)) {
    super.redraw(out);
    return;
  }
  TagRenderContext rc=PageRenderer.getTagRenderContext(exec);
  final boolean rcRequired=rc == null;
  Object ret=null;
  if (rcRequired) {
    ret=PageRenderer.beforeRenderTag(exec);
    rc=PageRenderer.getTagRenderContext(exec);
  }
  out.write(getPrologHalf(false));
  rc.renderBegin(this,getClientEvents(),false);
  redrawChildrenDirectly(rc,exec,out);
  out.write(getEpilogHalf());
  rc.renderEnd(this);
  if (rcRequired) {
    out.write(rc.complete());
    PageRenderer.afterRenderTag(exec,ret);
  }
}","public void redraw(java.io.Writer out) throws java.io.IOException {
  if (_tagnm == null)   throw new UiException(""String_Node_Str"");
  final Execution exec=Executions.getCurrent();
  if (exec == null || exec.isAsyncUpdate(null) || !HtmlPageRenders.isDirectContent(exec)) {
    super.redraw(out);
    return;
  }
  TagRenderContext rc=PageRenderer.getTagRenderContext(exec);
  final boolean rcRequired=rc == null;
  Object ret=null;
  if (rcRequired) {
    ret=PageRenderer.beforeRenderTag(exec);
    rc=PageRenderer.getTagRenderContext(exec);
  }
  out.write(getPrologHalf(false));
  rc.renderBegin(this,getClientEvents(),getSpecialRendererOutput(this),false);
  redrawChildrenDirectly(rc,exec,out);
  out.write(getEpilogHalf());
  rc.renderEnd(this);
  if (rcRequired) {
    out.write(rc.complete());
    PageRenderer.afterRenderTag(exec,ret);
  }
}"
16024,"/** 
 * Renders the beginning JavaScript code snippet for the component. It must be called before rendering the children.
 * @param clientEvents a collection of client events.It is ignored if lookup is true.
 * @param lookup whether to look up instead of creating a widget.Specifies true if the widget is created somewhere else.
 */
public void renderBegin(Component comp,Map clientEvents,boolean lookup){
  if (_2ndChild.isEmpty())   _jsout.append(""String_Node_Str"");
 else   if (_2ndChild.get(0) == Boolean.TRUE)   _2ndChild.set(0,Boolean.FALSE);
 else   _jsout.append(',');
  _2ndChild.add(0,Boolean.TRUE);
  _jsout.append(""String_Node_Str"");
  final String wgtcls=lookup ? ""String_Node_Str"" : comp.getWidgetClass();
  if (!""String_Node_Str"".equals(wgtcls))   _jsout.append('\'').append(wgtcls).append('\'');
 else   _jsout.append(1);
  _jsout.append(""String_Node_Str"").append(comp.getUuid()).append(""String_Node_Str"");
  if (!lookup) {
    boolean first=true;
    final String id=comp.getId();
    if (id.length() > 0) {
      first=false;
      _jsout.append(""String_Node_Str"").append(Strings.escape(id,Strings.ESCAPE_JAVASCRIPT)).append('\'');
    }
    if (!comp.isVisible()) {
      if (first)       first=false;
 else       _jsout.append(',');
      _jsout.append(""String_Node_Str"");
    }
    if (clientEvents != null) {
      for (Iterator it=clientEvents.entrySet().iterator(); it.hasNext(); ) {
        final Map.Entry me=(Map.Entry)it.next();
        final String evtnm=(String)me.getKey();
        final int flags=((Integer)me.getValue()).intValue();
        if ((flags & ComponentCtrl.CE_IMPORTANT) != 0 || Events.isListened(comp,evtnm,false)) {
          if (first)           first=false;
 else           _jsout.append(',');
          _jsout.append('$').append(evtnm).append(':').append(Events.isListened(comp,evtnm,true));
        }
      }
    }
  }
  _jsout.append(""String_Node_Str"");
}","/** 
 * Renders the beginning JavaScript code snippet for the component. It must be called before rendering the children.
 * @param clientEvents a collection of client events.It is ignored if lookup is true.
 * @param lookup whether to look up instead of creating a widget.Specifies true if the widget is created somewhere else.
 */
public void renderBegin(Component comp,Map clientEvents,String specialRendererOutput,boolean lookup){
  if (_2ndChild.isEmpty())   _jsout.append(""String_Node_Str"");
 else   if (_2ndChild.get(0) == Boolean.TRUE)   _2ndChild.set(0,Boolean.FALSE);
 else   _jsout.append(',');
  _2ndChild.add(0,Boolean.TRUE);
  _jsout.append(""String_Node_Str"");
  final String wgtcls=lookup ? ""String_Node_Str"" : comp.getWidgetClass();
  if (!""String_Node_Str"".equals(wgtcls))   _jsout.append('\'').append(wgtcls).append('\'');
 else   _jsout.append(1);
  _jsout.append(""String_Node_Str"").append(comp.getUuid()).append(""String_Node_Str"");
  if (!lookup) {
    boolean first=true;
    final String id=comp.getId();
    if (id.length() > 0) {
      first=false;
      _jsout.append(""String_Node_Str"").append(Strings.escape(id,Strings.ESCAPE_JAVASCRIPT)).append('\'');
    }
    if (!comp.isVisible()) {
      if (first)       first=false;
 else       _jsout.append(',');
      _jsout.append(""String_Node_Str"");
    }
    if (clientEvents != null) {
      for (Iterator it=clientEvents.entrySet().iterator(); it.hasNext(); ) {
        final Map.Entry me=(Map.Entry)it.next();
        final String evtnm=(String)me.getKey();
        final int flags=((Integer)me.getValue()).intValue();
        if ((flags & ComponentCtrl.CE_IMPORTANT) != 0 || Events.isListened(comp,evtnm,false)) {
          if (first)           first=false;
 else           _jsout.append(',');
          _jsout.append('$').append(evtnm).append(':').append(Events.isListened(comp,evtnm,true));
        }
      }
    }
    if (!Strings.isEmpty(specialRendererOutput)) {
      if (first)       first=false;
 else       _jsout.append(',');
      _jsout.append(specialRendererOutput);
    }
  }
 else   if (!Strings.isEmpty(specialRendererOutput)) {
    _jsout.append(specialRendererOutput);
  }
  _jsout.append(""String_Node_Str"");
}"
16025,"public void setDynamicProperty(String name,Object value) throws WrongValueException {
  if (name == null)   throw new WrongValueException(""String_Node_Str"");
  if (value == null) {
    if (_props != null)     _props.remove(name);
  }
 else {
    if (_props == null)     _props=new LinkedHashMap<String,Object>();
    _props.put(name,value);
  }
}","public void setDynamicProperty(String name,Object value) throws WrongValueException {
  if (name == null)   throw new WrongValueException(""String_Node_Str"");
  if (value == null) {
    if (_props != null)     _props.remove(name);
  }
 else {
    if (_props == null)     _props=new LinkedHashMap<String,Object>();
    if (""String_Node_Str"".equals(name))     _props.put(""String_Node_Str"",value);
 else     _props.put(name,value);
  }
}"
16026,"/** 
 * @param hideUuidIfNoId whether not to generate UUID if possible
 */
String getPrologHalf(boolean hideUuidIfNoId){
  final StringBuilder sb=new StringBuilder(128).append('<').append(_tagnm);
  if ((!hideUuidIfNoId && !shallHideId()) || getId().length() > 0)   sb.append(""String_Node_Str"").append(getUuid()).append('""');
  if (_props != null) {
    for (Iterator it=_props.entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry me=(Map.Entry)it.next();
      sb.append(' ').append(me.getKey()).append(""String_Node_Str"").append(XMLs.encodeAttribute(Objects.toString(me.getValue()))).append('""');
    }
  }
  if (!isOrphanTag())   sb.append('/');
  sb.append('>');
  Object textContent=getDynamicProperty(""String_Node_Str"");
  if (textContent != null)   sb.append((String)textContent);
  return sb.toString();
}","/** 
 * @param hideUuidIfNoId whether not to generate UUID if possible
 */
String getPrologHalf(boolean hideUuidIfNoId){
  final StringBuilder sb=new StringBuilder(128).append('<').append(_tagnm);
  if ((!hideUuidIfNoId && !shallHideId()) || getId().length() > 0)   sb.append(""String_Node_Str"").append(getUuid()).append('""');
  if (_props != null) {
    for (Iterator it=_props.entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry me=(Map.Entry)it.next();
      sb.append(' ').append(me.getKey()).append(""String_Node_Str"").append(XMLs.encodeAttribute(Objects.toString(me.getValue()))).append('""');
    }
  }
  if (!isOrphanTag())   sb.append('/');
  sb.append('>');
  Object textContent=getDynamicProperty(""String_Node_Str"");
  if (textContent != null)   sb.append(XMLs.escapeXML((String)textContent));
  return sb.toString();
}"
16027,"public Object resolveVariable(XelContext ctx,Object base,Object onm){
  if (base != null) {
    Object o=((ExecutionCtrl)_exec).getExtraXelVariable(ctx,base,onm);
    if (o != null)     return o;
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getXelVariable(ctx,base,onm,true) : null;
  }
  if (onm == null)   return null;
  final String name=onm.toString();
  if (name == null || name.length() == 0)   return null;
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name))   return _exec;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return Components.getCurrentPage((Component)_self);
    if (_self instanceof Page)     return _self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return _self;
    return null;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name))   return Evaluators.resolveVariable(_parent,name);
  if (_self instanceof Component) {
    final Component comp=(Component)_self;
    final Page page=Components.getCurrentPage(comp);
    if (page != null) {
      final Object o=page.getZScriptVariable(comp,name);
      if (o != null)       return o;
    }
    Object o=_exec.getAttribute(name);
    if (o != null)     return o;
    o=comp.getAttributeOrFellow(name,true);
    if (o != null)     return o;
    o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
    if (o != null)     return o;
    o=comp.getShadowVariable(name,true);
    if (o != null)     return o;
    if (page != null) {
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
  }
 else {
    Page page;
    if (_self instanceof Page) {
      page=(Page)_self;
    }
 else {
      page=((ExecutionCtrl)_exec).getCurrentPage();
    }
    if (page != null) {
      Object o=page.getZScriptVariable(name);
      if (o != null)       return o;
      o=_exec.getAttribute(name);
      if (o != null)       return o;
      o=page.getAttributeOrFellow(name,true);
      if (o != null)       return o;
      o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
      if (o != null)       return o;
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
 else {
      Object o=_exec.getAttribute(name,true);
      if (o != null)       return o;
    }
  }
  Object o=Evaluators.resolveVariable(_parent,name);
  if (o != null)   return o;
  if (""String_Node_Str"".equals(name))   return Labels.getSegmentedLabels();
  return null;
}","public Object resolveVariable(XelContext ctx,Object base,Object onm){
  if (base != null) {
    Object o=((ExecutionCtrl)_exec).getExtraXelVariable(ctx,base,onm);
    if (o != null)     return o;
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getXelVariable(ctx,base,onm,true) : null;
  }
  if (onm == null)   return null;
  final String name=onm.toString();
  if (name == null || name.length() == 0)   return null;
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name))   return _exec;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return Components.getCurrentPage((Component)_self);
    if (_self instanceof Page)     return _self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return _self;
    return null;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name))   return Evaluators.resolveVariable(_parent,name);
  if (_self instanceof Component) {
    final Component comp=(Component)_self;
    final Page page=Components.getCurrentPage(comp);
    if (page != null) {
      final Object o=page.getZScriptVariable(comp,name);
      if (o != null)       return o;
    }
    Object o=_exec.getAttribute(name);
    if (o != null)     return o;
    o=comp.getShadowVariable(name,true);
    if (o != null)     return o;
    o=comp.getAttributeOrFellow(name,true);
    if (o != null)     return o;
    o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
    if (o != null)     return o;
    if (page != null) {
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
  }
 else {
    Page page;
    if (_self instanceof Page) {
      page=(Page)_self;
    }
 else {
      page=((ExecutionCtrl)_exec).getCurrentPage();
    }
    if (page != null) {
      Object o=page.getZScriptVariable(name);
      if (o != null)       return o;
      o=_exec.getAttribute(name);
      if (o != null)       return o;
      o=page.getAttributeOrFellow(name,true);
      if (o != null)       return o;
      o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
      if (o != null)       return o;
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
 else {
      Object o=_exec.getAttribute(name,true);
      if (o != null)       return o;
    }
  }
  Object o=Evaluators.resolveVariable(_parent,name);
  if (o != null)   return o;
  if (""String_Node_Str"".equals(name))   return Labels.getSegmentedLabels();
  return null;
}"
16028,"/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
protected void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  if (_parent != null) {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=child._previousInsertion;
      Component next=child._nextInsertion;
      _parent.insertBefore(child,this);
      if (previous != null && !(previous instanceof HtmlShadowElement)) {
        Component newPrevious=child._previousInsertion;
        setPrevInsertion(previous,newPrevious);
        setPrevInsertion(child,previous);
      }
      if (next != null && !(next instanceof HtmlShadowElement)) {
        Component newNext=child._nextInsertion;
        setPrevInsertion(newNext,next);
        setPrevInsertion(next,child);
      }
    }
  }
 else {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=_previousInsertion;
      child.mergeToHost(_host);
      if (previous != null) {
        Component newPrevious=child._previousInsertion;
        if (newPrevious == null) {
          setPrevInsertion(child,previous);
        }
 else {
          setPrevInsertion(newPrevious,previous);
        }
      }
      Component newNext=child._nextInsertion;
      if (newNext == null) {
        setPrevInsertion(this,child);
      }
 else {
        setPrevInsertion(this,newNext);
      }
    }
  }
}","/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
protected void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  if (_parent != null) {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=child._previousInsertion;
      Component next=child._nextInsertion;
      _parent.insertBefore(child,this);
      if (previous != null && !(previous instanceof HtmlShadowElement)) {
        Component newPrevious=child._previousInsertion;
        setPrevInsertion(previous,newPrevious);
        setPrevInsertion(child,previous);
      }
      if (next != null && !(next instanceof HtmlShadowElement)) {
        Component newNext=child._nextInsertion;
        setPrevInsertion(newNext,next);
        setPrevInsertion(next,child);
      }
      if (_firstInsertion == child._firstInsertion)       _firstInsertion=null;
      if (_lastInsertion == child._lastInsertion)       _lastInsertion=null;
    }
  }
 else {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=_previousInsertion;
      child.mergeToHost(_host);
      if (previous != null) {
        Component newPrevious=child._previousInsertion;
        if (newPrevious == null) {
          setPrevInsertion(child,previous);
        }
 else {
          setPrevInsertion(newPrevious,previous);
        }
      }
      Component newNext=child._nextInsertion;
      if (newNext == null) {
        setPrevInsertion(this,child);
      }
 else {
        setPrevInsertion(this,newNext);
      }
      if (_firstInsertion == child._firstInsertion)       _firstInsertion=null;
      if (_lastInsertion == child._lastInsertion)       _lastInsertion=null;
    }
  }
}"
16029,"protected void onHostAttached(Component host){
  Iterable<EventListener<? extends Event>> eventListeners=host.getEventListeners(ON_REBUILD_SHADOW_TREE_LATER);
  if (!eventListeners.iterator().hasNext()) {
    host.addEventListener(ON_REBUILD_SHADOW_TREE_LATER,new SerializableEventListener<Event>(){
      public void onEvent(      Event event) throws Exception {
        Component target=event.getTarget();
        if (target instanceof ComponentCtrl) {
          for (          ShadowElement se : new ArrayList<ShadowElement>(((ComponentCtrl)target).getShadowRoots())) {
            if (se instanceof HtmlShadowElement) {
              ((HtmlShadowElement)se).rebuildShadowTree();
            }
          }
        }
      }
    }
);
  }
}","protected void onHostAttached(Component host){
  Iterable<EventListener<? extends Event>> eventListeners=host.getEventListeners(ON_REBUILD_SHADOW_TREE_LATER);
  if (!eventListeners.iterator().hasNext()) {
    host.addEventListener(ON_REBUILD_SHADOW_TREE_LATER,new SerializableEventListener<Event>(){
      public void onEvent(      Event event) throws Exception {
        Component target=event.getTarget();
        if (target instanceof ComponentCtrl && target.getDesktop() != null) {
          for (          ShadowElement se : new ArrayList<ShadowElement>(((ComponentCtrl)target).getShadowRoots())) {
            if (se instanceof HtmlShadowElement) {
              ((HtmlShadowElement)se).rebuildShadowTree();
            }
          }
        }
 else {
          Iterable<EventListener<? extends Event>> eventListeners=target.getEventListeners(ON_REBUILD_SHADOW_TREE_LATER);
          for (          EventListener<? extends Event> listener : eventListeners) {
            target.removeEventListener(ON_REBUILD_SHADOW_TREE_LATER,listener);
          }
        }
      }
    }
);
  }
}"
16030,"public void onEvent(Event event) throws Exception {
  Component target=event.getTarget();
  if (target instanceof ComponentCtrl) {
    for (    ShadowElement se : new ArrayList<ShadowElement>(((ComponentCtrl)target).getShadowRoots())) {
      if (se instanceof HtmlShadowElement) {
        ((HtmlShadowElement)se).rebuildShadowTree();
      }
    }
  }
}","public void onEvent(Event event) throws Exception {
  Component target=event.getTarget();
  if (target instanceof ComponentCtrl && target.getDesktop() != null) {
    for (    ShadowElement se : new ArrayList<ShadowElement>(((ComponentCtrl)target).getShadowRoots())) {
      if (se instanceof HtmlShadowElement) {
        ((HtmlShadowElement)se).rebuildShadowTree();
      }
    }
  }
 else {
    Iterable<EventListener<? extends Event>> eventListeners=target.getEventListeners(ON_REBUILD_SHADOW_TREE_LATER);
    for (    EventListener<? extends Event> listener : eventListeners) {
      target.removeEventListener(ON_REBUILD_SHADOW_TREE_LATER,listener);
    }
  }
}"
16031,"/** 
 * Removes the relation points between shadow host and this shadow element.
 */
public void detach(){
  Component prevhost=getShadowHostIfAny();
  if (_host != null) {
    ComponentCtrl host=(ComponentCtrl)_host;
    _host=null;
    ((ComponentCtrl)host).removeShadowRoot(this);
    onHostDetached((Component)host);
  }
  setParent0(null);
  if (prevhost != null) {
    prevhost.getDesktop().getWebApp().getConfiguration().afterShadowDetached(this,prevhost);
  }
}","/** 
 * Removes the relation points between shadow host and this shadow element.
 */
public void detach(){
  Component prevhost=getShadowHostIfAny();
  if (_host != null) {
    ComponentCtrl host=(ComponentCtrl)_host;
    _host=null;
    ((ComponentCtrl)host).removeShadowRoot(this);
    onHostDetached((Component)host);
  }
  setParent0(null);
  if (prevhost != null && prevhost.getDesktop() != null) {
    prevhost.getDesktop().getWebApp().getConfiguration().afterShadowDetached(this,prevhost);
  }
}"
16032,"protected ELContext newELContext(XelContext xelc){
  return new XelELContext(xelc);
}","protected ELContext newELContext(XelContext xelc){
  return new StandardELContext(new XelELContext(xelc));
}"
16033,"public void remove(){
  _it.remove();
}","public void remove(){
  _it.remove();
  _nextAvail=false;
}"
16034,"private void triggerBeforeHostParentChanged(Component parent){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      for (      ShadowElement se : getShadowRoots()) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostParentChanged(parent);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}","private void triggerBeforeHostParentChanged(Component parent){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      for (      ShadowElement se : new LinkedList<ShadowElement>(shadowRoots)) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostParentChanged(parent);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}"
16035,"private void triggerAfterHostChildRemoved(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      for (      ShadowElement se : getShadowRoots()) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).afterHostChildRemoved(child);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}","private void triggerAfterHostChildRemoved(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      for (      ShadowElement se : new LinkedList<ShadowElement>(shadowRoots)) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).afterHostChildRemoved(child);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}"
16036,"private void triggerAfterHostChildAdded(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOf=getChildren().indexOf(child);
      for (      ShadowElement se : getShadowRoots()) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).afterHostChildAdded(child,indexOf);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}","private void triggerAfterHostChildAdded(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOf=getChildren().indexOf(child);
      for (      ShadowElement se : new LinkedList<ShadowElement>(shadowRoots)) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).afterHostChildAdded(child,indexOf);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}"
16037,"private void triggerBeforeHostChildAdded(Component child,Component insertBefore){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOfInsertBefore=insertBefore == null ? -1 : getChildren().indexOf(insertBefore);
      for (      ShadowElement se : getShadowRoots()) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostChildAdded(child,insertBefore,indexOfInsertBefore);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}","private void triggerBeforeHostChildAdded(Component child,Component insertBefore){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOfInsertBefore=insertBefore == null ? -1 : getChildren().indexOf(insertBefore);
      for (      ShadowElement se : new LinkedList<ShadowElement>(shadowRoots)) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostChildAdded(child,insertBefore,indexOfInsertBefore);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}"
16038,"private void triggerBeforeHostChildRemoved(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOf=getChildren().indexOf(child);
      for (      ShadowElement se : getShadowRoots()) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostChildRemoved(child,indexOf);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}","private void triggerBeforeHostChildRemoved(Component child){
  List<ShadowElement> shadowRoots=getShadowRoots();
  if (!shadowRoots.isEmpty()) {
    try {
      initIndexCacheMap();
      final int indexOf=getChildren().indexOf(child);
      for (      ShadowElement se : new LinkedList<ShadowElement>(shadowRoots)) {
        if (se instanceof ShadowElementCtrl) {
          ((ShadowElementCtrl)se).beforeHostChildRemoved(child,indexOf);
        }
      }
    }
  finally {
      destroyIndexCacheMap();
    }
  }
}"
16039,"public void beforeHostParentChanged(Component parent){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + parent + ""String_Node_Str""+ ShadowElementsCtrl.getCurrentInfo());
  }
}","public void beforeHostParentChanged(Component parent){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + parent + ""String_Node_Str""+ ShadowElementsCtrl.getCurrentInfo());
  }
  if (parent == null) {
    ((ComponentCtrl)_host).removeShadowRoot(this);
  }
 else   if (_host.getParent() == null) {
    onHostAttached(_host);
  }
}"
16040,"/** 
 * Merge the host into the current shadow, unlike  {@link #setShadowHost(Component,Component)}
 * @param child
 */
public boolean mergeToHost(Component host){
  if (host == null)   throw new UiException(""String_Node_Str"");
  if (host == _host)   return false;
  if (_parent == null)   throw new UiException(""String_Node_Str"");
  HtmlShadowElement oldParent=(HtmlShadowElement)_parent;
  if (host != _host) {
    _parent=null;
    ((ComponentCtrl)host).addShadowRoot(this);
    _host=host;
    return true;
  }
  return false;
}","/** 
 * Merge the host into the current shadow, unlike  {@link #setShadowHost(Component,Component)}
 * @param child
 */
public boolean mergeToHost(Component host){
  if (host == null)   throw new UiException(""String_Node_Str"");
  if (host == _host)   return false;
  if (_parent == null)   throw new UiException(""String_Node_Str"");
  HtmlShadowElement oldParent=(HtmlShadowElement)_parent;
  if (host != _host) {
    HtmlShadowElement parent=(HtmlShadowElement)_parent;
    _parent=null;
    ((ComponentCtrl)host).addShadowRootBefore(this,(ShadowElement)parent);
    _host=host;
    ++parent._chdinf.modCntChd;
    --parent._chdinf.nChild;
    if (this._prev == null)     parent._chdinf.first=this._next;
    if (this._next == null)     parent._chdinf.last=this._prev;
    return true;
  }
  return false;
}"
16041,"public void setParent(Component parent){
  if (_host != null && parent != null) {
    throw new UiException(""String_Node_Str"");
  }
  if (parent == null && _host == null) {
    setPrevInsertion(_nextInsertion,_previousInsertion);
    _previousInsertion=null;
    _firstInsertion=null;
    _lastInsertion=null;
    _nextInsertion=null;
  }
  super.setParent(parent);
  if (parent != null) {
    Component host=getShadowHostIfAny();
    if (host != null)     host.getDesktop().getWebApp().getConfiguration().afterShadowAttached(this,host);
  }
}","public void setParent(Component parent){
  Component host=getShadowHostIfAny();
  setParent0(parent);
  if (host == null)   host=getShadowHostIfAny();
  if (host != null) {
    if (parent != null) {
      host.getDesktop().getWebApp().getConfiguration().afterShadowAttached(this,host);
    }
 else {
      host.getDesktop().getWebApp().getConfiguration().afterShadowDetached(this,host);
    }
  }
}"
16042,"/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
public void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  for (  HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
    Component previous=child._previousInsertion;
    Component next=child._nextInsertion;
    _parent.insertBefore(child,this);
    if (previous != null && !(previous instanceof HtmlShadowElement)) {
      Component newPrevious=child._previousInsertion;
      setPrevInsertion(previous,newPrevious);
      setPrevInsertion(child,previous);
    }
    if (next != null && !(next instanceof HtmlShadowElement)) {
      Component newNext=child._nextInsertion;
      setPrevInsertion(newNext,next);
      setPrevInsertion(next,child);
    }
  }
}","/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
public void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  if (_parent != null) {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=child._previousInsertion;
      Component next=child._nextInsertion;
      _parent.insertBefore(child,this);
      if (previous != null && !(previous instanceof HtmlShadowElement)) {
        Component newPrevious=child._previousInsertion;
        setPrevInsertion(previous,newPrevious);
        setPrevInsertion(child,previous);
      }
      if (next != null && !(next instanceof HtmlShadowElement)) {
        Component newNext=child._nextInsertion;
        setPrevInsertion(newNext,next);
        setPrevInsertion(next,child);
      }
    }
  }
 else {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=_previousInsertion;
      child.mergeToHost(_host);
      if (previous != null) {
        Component newPrevious=child._previousInsertion;
        if (newPrevious == null) {
          setPrevInsertion(child,previous);
        }
 else {
          setPrevInsertion(newPrevious,previous);
        }
      }
      Component newNext=child._nextInsertion;
      if (newNext == null) {
        setPrevInsertion(this,child);
      }
 else {
        setPrevInsertion(this,newNext);
      }
    }
  }
}"
16043,"/** 
 * Removes the relation points between shadow host and this shadow element.
 */
public void detach(){
  Component prevhost=getShadowHostIfAny();
  if (_host != null) {
    ComponentCtrl host=(ComponentCtrl)_host;
    _host=null;
    ((ComponentCtrl)host).removeShadowRoot(this);
    onHostDetached((Component)host);
  }
  setParent(null);
  if (prevhost != null) {
    prevhost.getDesktop().getWebApp().getConfiguration().afterShadowDetached(this,prevhost);
  }
}","/** 
 * Removes the relation points between shadow host and this shadow element.
 */
public void detach(){
  Component prevhost=getShadowHostIfAny();
  if (_host != null) {
    ComponentCtrl host=(ComponentCtrl)_host;
    _host=null;
    ((ComponentCtrl)host).removeShadowRoot(this);
    onHostDetached((Component)host);
  }
  setParent0(null);
  if (prevhost != null) {
    prevhost.getDesktop().getWebApp().getConfiguration().afterShadowDetached(this,prevhost);
  }
}"
16044,"/** 
 * Removes the given shadow root from this host.
 * @param shadow a shadow element
 * @return true if child is added successfully
 * @since 8.0.0
 */
public boolean removeShadowRoot(ShadowElement shadow);","/** 
 * Removes the given shadow root from this host. (Shadow developer use only)
 * @param shadow a shadow element
 * @return true if child is added successfully
 * @since 8.0.0
 */
public boolean removeShadowRoot(ShadowElement shadow);"
16045,"/** 
 * Removes the given shadow root from this host.
 * @param shadow a shadow element
 * @return true if child is removed successfully; false if it doesn'thave the specified child
 * @since 8.0.0
 */
public boolean addShadowRoot(ShadowElement shadow);","/** 
 * Adds the given shadow root from this host. (Shadow developer use only)
 * @param shadow a shadow element
 * @return true if child is removed successfully; false if it doesn'thave the specified child
 * @since 8.0.0
 */
public boolean addShadowRoot(ShadowElement shadow);"
16046,"public void setParent(Component parent){
  if (_host != null && parent != null) {
    throw new UiException(""String_Node_Str"");
  }
  if (parent == null && _host == null) {
    Component next=_nextInsertion == null ? _lastInsertion : _nextInsertion;
    setPrevInsertion(next,_previousInsertion);
    _previousInsertion=null;
    _firstInsertion=null;
    _lastInsertion=null;
    _nextInsertion=null;
  }
  super.setParent(parent);
  if (parent != null) {
    Component host=getShadowHostIfAny();
    if (host != null)     host.getDesktop().getWebApp().getConfiguration().afterShadowAttached(this,host);
  }
}","public void setParent(Component parent){
  if (_host != null && parent != null) {
    throw new UiException(""String_Node_Str"");
  }
  if (parent == null && _host == null) {
    setPrevInsertion(_nextInsertion,_previousInsertion);
    _previousInsertion=null;
    _firstInsertion=null;
    _lastInsertion=null;
    _nextInsertion=null;
  }
  super.setParent(parent);
  if (parent != null) {
    Component host=getShadowHostIfAny();
    if (host != null)     host.getDesktop().getWebApp().getConfiguration().afterShadowAttached(this,host);
  }
}"
16047,"/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
public void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  for (  HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
    _parent.insertBefore(child,this);
  }
}","/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
public void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  for (  HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
    Component previous=child._previousInsertion;
    Component next=child._nextInsertion;
    _parent.insertBefore(child,this);
    if (previous != null && !(previous instanceof HtmlShadowElement)) {
      Component newPrevious=child._previousInsertion;
      setPrevInsertion(previous,newPrevious);
      setPrevInsertion(child,previous);
    }
    if (next != null && !(next instanceof HtmlShadowElement)) {
      Component newNext=child._nextInsertion;
      setPrevInsertion(newNext,next);
      setPrevInsertion(next,child);
    }
  }
}"
16048,"protected Object getShadowVariable0(AbstractComponent baseChild,String name,boolean recurse){
  Object val=getAttribute(name);
  if (val != null || hasAttribute(name))   return val;
  if (!(this instanceof ShadowElement)) {
    ComponentCtrl ctrl=this;
    List<HtmlShadowElement> shadowRoots=ctrl.getShadowRoots();
    if (!shadowRoots.isEmpty()) {
      Map<Component,Integer> indexCacheMap=getIndexCacheMap();
      try {
        if (indexCacheMap == null)         initIndexCacheMap();
        for (        HtmlShadowElement shadow : shadowRoots) {
          val=shadow.resolveVariable(baseChild,name,recurse);
          if (val != null)           return val;
        }
      }
  finally {
        ShadowElementsCtrl.setDistributedIndexInfo(indexCacheMap);
      }
    }
  }
  if (recurse) {
    if (_parent != null)     return _parent.getShadowVariable0(this,name,recurse);
    if (this instanceof ShadowElement) {
      AbstractComponent shadowHost=(AbstractComponent)((ShadowElement)this).getShadowHost();
      if (shadowHost != null) {
        if (shadowHost._variableSeeking) {
          if (shadowHost.getParent() != null) {
            return ((AbstractComponent)shadowHost.getParent()).getShadowVariable(name,recurse);
          }
          return null;
        }
        return shadowHost.getShadowVariable(name,recurse);
      }
    }
  }
  return null;
}","protected Object getShadowVariable0(AbstractComponent baseChild,String name,boolean recurse){
  Object val=getAttribute(name);
  if (val != null || hasAttribute(name))   return val;
  if (!(this instanceof ShadowElement)) {
    ComponentCtrl ctrl=this;
    List<HtmlShadowElement> shadowRoots=ctrl.getShadowRoots();
    if (!shadowRoots.isEmpty()) {
      Map<Component,Integer> indexCacheMap=getIndexCacheMap();
      try {
        if (indexCacheMap != null) {
          destroyIndexCacheMap();
        }
        initIndexCacheMap();
        for (        HtmlShadowElement shadow : shadowRoots) {
          val=shadow.resolveVariable(baseChild,name,recurse);
          if (val != null)           return val;
        }
      }
  finally {
        ShadowElementsCtrl.setDistributedIndexInfo(indexCacheMap);
      }
    }
  }
  if (recurse) {
    if (_parent != null)     return _parent.getShadowVariable0(this,name,recurse);
    if (this instanceof ShadowElement) {
      AbstractComponent shadowHost=(AbstractComponent)((ShadowElement)this).getShadowHost();
      if (shadowHost != null) {
        if (shadowHost._variableSeeking) {
          if (shadowHost.getParent() != null) {
            return ((AbstractComponent)shadowHost.getParent()).getShadowVariable(name,recurse);
          }
          return null;
        }
        return shadowHost.getShadowVariable(name,recurse);
      }
    }
  }
  return null;
}"
16049,"/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
public void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  if (_parent != null) {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=child._previousInsertion;
      Component next=child._nextInsertion;
      _parent.insertBefore(child,this);
      if (previous != null && !(previous instanceof HtmlShadowElement)) {
        Component newPrevious=child._previousInsertion;
        setPrevInsertion(previous,newPrevious);
        setPrevInsertion(child,previous);
      }
      if (next != null && !(next instanceof HtmlShadowElement)) {
        Component newNext=child._nextInsertion;
        setPrevInsertion(newNext,next);
        setPrevInsertion(next,child);
      }
    }
  }
 else {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=_previousInsertion;
      child.mergeToHost(_host);
      if (previous != null) {
        Component newPrevious=child._previousInsertion;
        if (newPrevious == null) {
          setPrevInsertion(child,previous);
        }
 else {
          setPrevInsertion(newPrevious,previous);
        }
      }
      Component newNext=child._nextInsertion;
      if (newNext == null) {
        setPrevInsertion(this,child);
      }
 else {
        setPrevInsertion(this,newNext);
      }
    }
  }
}","/** 
 * Merge the all sub-tree into the parent's insertions, unlike  {@link #appendChild(Component)}
 */
protected void mergeSubTree(){
  List<HtmlShadowElement> children=getChildren();
  if (children == null || children.isEmpty())   return;
  if (_parent != null) {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=child._previousInsertion;
      Component next=child._nextInsertion;
      _parent.insertBefore(child,this);
      if (previous != null && !(previous instanceof HtmlShadowElement)) {
        Component newPrevious=child._previousInsertion;
        setPrevInsertion(previous,newPrevious);
        setPrevInsertion(child,previous);
      }
      if (next != null && !(next instanceof HtmlShadowElement)) {
        Component newNext=child._nextInsertion;
        setPrevInsertion(newNext,next);
        setPrevInsertion(next,child);
      }
    }
  }
 else {
    for (    HtmlShadowElement child : new ArrayList<HtmlShadowElement>(children)) {
      Component previous=_previousInsertion;
      child.mergeToHost(_host);
      if (previous != null) {
        Component newPrevious=child._previousInsertion;
        if (newPrevious == null) {
          setPrevInsertion(child,previous);
        }
 else {
          setPrevInsertion(newPrevious,previous);
        }
      }
      Component newNext=child._nextInsertion;
      if (newNext == null) {
        setPrevInsertion(this,child);
      }
 else {
        setPrevInsertion(this,newNext);
      }
    }
  }
}"
16050,"private void setParent0(Component parent){
  if (_host != null && parent != null) {
    throw new UiException(""String_Node_Str"");
  }
  if (parent == null && _host == null) {
    setPrevInsertion(_nextInsertion,_previousInsertion);
    _previousInsertion=null;
    _firstInsertion=null;
    _lastInsertion=null;
    _nextInsertion=null;
  }
  super.setParent(parent);
}","private void setParent0(Component parent){
  if (_host != null && parent != null) {
    throw new UiException(""String_Node_Str"");
  }
  if (parent == null && _host == null) {
    if (_firstInsertion != null) {
      setPrevInsertion(_firstInsertion,_previousInsertion);
      setPrevInsertion(_nextInsertion,_lastInsertion);
    }
 else {
      setPrevInsertion(_nextInsertion,_previousInsertion);
    }
    _previousInsertion=null;
    _firstInsertion=null;
    _lastInsertion=null;
    _nextInsertion=null;
  }
  super.setParent(parent);
}"
16051,"protected Object getShadowVariable0(AbstractComponent baseChild,String name,boolean recurse){
  Object val=getAttribute(name);
  if (val != null || hasAttribute(name))   return val;
  if (!(this instanceof ShadowElement)) {
    ComponentCtrl ctrl=this;
    List<HtmlShadowElement> shadowRoots=ctrl.getShadowRoots();
    if (!shadowRoots.isEmpty()) {
      try {
        initIndexCacheMap();
        for (        HtmlShadowElement shadow : shadowRoots) {
          val=shadow.resolveVariable(baseChild,name,recurse);
          if (val != null)           return val;
        }
      }
  finally {
        destroyIndexCacheMap();
      }
    }
  }
  if (recurse) {
    if (_parent != null)     return _parent.getShadowVariable0(this,name,recurse);
    if (this instanceof ShadowElement) {
      AbstractComponent shadowHost=(AbstractComponent)((ShadowElement)this).getShadowHost();
      if (shadowHost != null) {
        if (shadowHost._variableSeeking) {
          if (shadowHost.getParent() != null) {
            return ((AbstractComponent)shadowHost.getParent()).getShadowVariable(name,recurse);
          }
          return null;
        }
        return shadowHost.getShadowVariable(name,recurse);
      }
    }
  }
  return null;
}","protected Object getShadowVariable0(AbstractComponent baseChild,String name,boolean recurse){
  Object val=getAttribute(name);
  if (val != null || hasAttribute(name))   return val;
  if (!(this instanceof ShadowElement)) {
    ComponentCtrl ctrl=this;
    List<HtmlShadowElement> shadowRoots=ctrl.getShadowRoots();
    if (!shadowRoots.isEmpty()) {
      Map<Component,Integer> indexCacheMap=getIndexCacheMap();
      try {
        if (indexCacheMap == null)         initIndexCacheMap();
        for (        HtmlShadowElement shadow : shadowRoots) {
          val=shadow.resolveVariable(baseChild,name,recurse);
          if (val != null)           return val;
        }
      }
  finally {
        ShadowElementsCtrl.setDistributedIndexInfo(indexCacheMap);
      }
    }
  }
  if (recurse) {
    if (_parent != null)     return _parent.getShadowVariable0(this,name,recurse);
    if (this instanceof ShadowElement) {
      AbstractComponent shadowHost=(AbstractComponent)((ShadowElement)this).getShadowHost();
      if (shadowHost != null) {
        if (shadowHost._variableSeeking) {
          if (shadowHost.getParent() != null) {
            return ((AbstractComponent)shadowHost.getParent()).getShadowVariable(name,recurse);
          }
          return null;
        }
        return shadowHost.getShadowVariable(name,recurse);
      }
    }
  }
  return null;
}"
16052,"private void rebuildShadowTree(){
  Map<Component,Integer> oldCacheMap=getIndexCacheMap();
  final boolean destroyCacheMap=oldCacheMap == null;
  try {
    if (destroyCacheMap)     oldCacheMap=initIndexCacheMap();
    rebuildSubShadowTree();
  }
  finally {
    if (destroyCacheMap)     destroyIndexCacheMap();
  }
}","private void rebuildShadowTree(){
  Map<Component,Integer> oldCacheMap=getIndexCacheMap();
  final boolean destroyCacheMap=oldCacheMap == null;
  try {
    if (destroyCacheMap)     initIndexCacheMap();
    rebuildSubShadowTree();
  }
  finally {
    if (destroyCacheMap)     destroyIndexCacheMap();
  }
}"
16053,"public void beforeHostChildAdded(Component child,Component insertBefore,int indexOfInsertBefore){
  if (log.isDebugEnabled()) {
    log.warn(""String_Node_Str"" + child + ""String_Node_Str""+ insertBefore+ ""String_Node_Str""+ ShadowElementsCtrl.getCurrentInfo());
  }
  Object currentInfo=ShadowElementsCtrl.getCurrentInfo();
  if (indexOfInsertBefore < 0) {
    if (currentInfo instanceof HtmlShadowElement) {
      HtmlShadowElement asShadow=asShadow(currentInfo);
      if (isAncestor(this,asShadow)) {
        Component lastChild=asShadow.getLastChild();
        if (lastChild != null)         asShadow(lastChild)._nextInsertion=child;
      }
 else       if (asShadow.getShadowHostIfAny() != getShadowHostIfAny()) {
        if (_nextInsertion == null)         _nextInsertion=child;
      }
    }
 else {
      if (_nextInsertion == null)       _nextInsertion=child;
    }
  }
 else {
    Map<Component,Integer> indexMap=fillUpIndexMap(_firstInsertion,_lastInsertion);
    HtmlShadowElement node=queryIntersectedShadowIfAny(indexOfInsertBefore,indexMap);
    if (currentInfo instanceof HtmlShadowElement) {
      if (isAncestor(asShadow(currentInfo),node)) {
        adjustInsertionForInsertBefore(node,child,insertBefore);
      }
 else       if (!((HtmlShadowElement)currentInfo).getChildren().isEmpty()) {
        HtmlShadowElement currentShadow=asShadow(currentInfo);
        asShadow(currentShadow.getFirstChild())._nextInsertion=child;
      }
    }
 else     if (node != null) {
      if (this.getParent() != null || insertBefore != _firstInsertion) {
        adjustInsertionForInsertBefore(node,child,insertBefore);
      }
 else {
        _previousInsertion=child;
      }
    }
  }
}","public void beforeHostChildAdded(Component child,Component insertBefore,int indexOfInsertBefore){
  if (log.isDebugEnabled()) {
    log.warn(""String_Node_Str"" + child + ""String_Node_Str""+ insertBefore+ ""String_Node_Str""+ ShadowElementsCtrl.getCurrentInfo());
  }
  Object currentInfo=ShadowElementsCtrl.getCurrentInfo();
  if (indexOfInsertBefore < 0) {
    if (currentInfo instanceof HtmlShadowElement) {
      HtmlShadowElement asShadow=asShadow(currentInfo);
      if (isAncestor(this,asShadow)) {
        Component lastChild=asShadow.getLastChild();
        if (lastChild != null)         asShadow(lastChild)._nextInsertion=child;
      }
 else       if (asShadow.getShadowHostIfAny() != getShadowHostIfAny()) {
        if (_nextInsertion == null)         _nextInsertion=child;
      }
    }
 else {
      if (_nextInsertion == null)       _nextInsertion=child;
    }
  }
 else {
    Map<Component,Integer> indexMap=fillUpIndexMap(_firstInsertion,_lastInsertion);
    HtmlShadowElement node=queryIntersectedShadowIfAny(indexOfInsertBefore,indexMap);
    if (currentInfo instanceof HtmlShadowElement) {
      if (isAncestor(asShadow(currentInfo),node)) {
        adjustInsertionForInsertBefore(node,child,insertBefore);
      }
 else       if (!((HtmlShadowElement)currentInfo).getChildren().isEmpty()) {
        HtmlShadowElement currentShadow=asShadow(currentInfo);
        asShadow(currentShadow.getLastChild())._nextInsertion=child;
      }
    }
 else     if (node != null) {
      if (this.getParent() != null || insertBefore != _firstInsertion) {
        adjustInsertionForInsertBefore(node,child,insertBefore);
      }
 else {
        _previousInsertion=child;
      }
    }
  }
}"
16054,"public Object resolveVariable(XelContext ctx,Object base,Object onm){
  if (base != null) {
    Object o=((ExecutionCtrl)_exec).getExtraXelVariable(ctx,base,onm);
    if (o != null)     return o;
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getXelVariable(ctx,base,onm,true) : null;
  }
  if (onm == null)   return null;
  final String name=onm.toString();
  if (name == null || name.length() == 0)   return null;
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name))   return _exec;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return Components.getCurrentPage((Component)_self);
    if (_self instanceof Page)     return _self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return _self;
    return null;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name))   return Evaluators.resolveVariable(_parent,name);
  if (_self instanceof Component) {
    final Component comp=(Component)_self;
    final Page page=Components.getCurrentPage(comp);
    if (page != null) {
      final Object o=page.getZScriptVariable(comp,name);
      if (o != null)       return o;
    }
    Object o=_exec.getAttribute(name);
    if (o != null)     return o;
    o=comp.getAttributeOrFellow(name,true);
    if (o != null)     return o;
    o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
    if (o != null)     return o;
    if (page != null) {
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
  }
 else {
    Page page;
    if (_self instanceof Page) {
      page=(Page)_self;
    }
 else {
      page=((ExecutionCtrl)_exec).getCurrentPage();
    }
    if (page != null) {
      Object o=page.getZScriptVariable(name);
      if (o != null)       return o;
      o=_exec.getAttribute(name);
      if (o != null)       return o;
      o=page.getAttributeOrFellow(name,true);
      if (o != null)       return o;
      o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
      if (o != null)       return o;
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
 else {
      Object o=_exec.getAttribute(name,true);
      if (o != null)       return o;
    }
  }
  Object o=Evaluators.resolveVariable(_parent,name);
  if (o != null)   return o;
  if (""String_Node_Str"".equals(name))   return Labels.getSegmentedLabels();
  return null;
}","public Object resolveVariable(XelContext ctx,Object base,Object onm){
  if (base != null) {
    Object o=((ExecutionCtrl)_exec).getExtraXelVariable(ctx,base,onm);
    if (o != null)     return o;
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getXelVariable(ctx,base,onm,true) : null;
  }
  if (onm == null)   return null;
  final String name=onm.toString();
  if (name == null || name.length() == 0)   return null;
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name))   return _exec;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return Components.getCurrentPage((Component)_self);
    if (_self instanceof Page)     return _self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getSession();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return _self;
    return null;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name))   return Evaluators.resolveVariable(_parent,name);
  if (_self instanceof Component) {
    final Component comp=(Component)_self;
    final Page page=Components.getCurrentPage(comp);
    if (page != null) {
      final Object o=page.getZScriptVariable(comp,name);
      if (o != null)       return o;
    }
    Object o=_exec.getAttribute(name);
    if (o != null)     return o;
    o=comp.getAttributeOrFellow(name,true);
    if (o != null)     return o;
    o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
    if (o != null)     return o;
    o=comp.getShadowVariable(name,true);
    if (o != null)     return o;
    if (page != null) {
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
  }
 else {
    Page page;
    if (_self instanceof Page) {
      page=(Page)_self;
    }
 else {
      page=((ExecutionCtrl)_exec).getCurrentPage();
    }
    if (page != null) {
      Object o=page.getZScriptVariable(name);
      if (o != null)       return o;
      o=_exec.getAttribute(name);
      if (o != null)       return o;
      o=page.getAttributeOrFellow(name,true);
      if (o != null)       return o;
      o=((ExecutionCtrl)_exec).getExtraXelVariable(name);
      if (o != null)       return o;
      o=page.getXelVariable(ctx,null,name,true);
      if (o != null)       return o;
    }
 else {
      Object o=_exec.getAttribute(name,true);
      if (o != null)       return o;
    }
  }
  Object o=Evaluators.resolveVariable(_parent,name);
  if (o != null)   return o;
  if (""String_Node_Str"".equals(name))   return Labels.getSegmentedLabels();
  return null;
}"
16055,"private void loadComponent0(Component comp,boolean loadinit){
  loadComponentProperties0(comp,loadinit);
  for (Component kid=comp.getFirstChild(); kid != null; kid=kid.getNextSibling()) {
    loadComponent0(kid,loadinit);
  }
}","private void loadComponent0(Component comp,boolean loadinit){
  loadComponentProperties0(comp,loadinit);
  final Map<String,List<Binding>> compBindings=_bindings.get(comp);
  if (compBindings == null || !compBindings.keySet().contains(CHILDREN_ATTR)) {
    for (Component kid=comp.getFirstChild(); kid != null; kid=kid.getNextSibling()) {
      loadComponent0(kid,loadinit);
    }
  }
}"
16056,"@SuppressWarnings(""String_Node_Str"") private void sort0(TreeNode<E> node,Comparator<TreeNode<E>> cmpr){
  if (node.getChildren() == null)   return;
  if (node instanceof DefaultTreeNode)   ((TreeNodeChildrenList)node.getChildren()).sort(cmpr);
 else   Collections.sort(node.getChildren(),cmpr);
  for (  TreeNode<E> child : node.getChildren())   sort0(child,cmpr);
}","@SuppressWarnings(""String_Node_Str"") private void sort0(TreeNode<E> node,Comparator<TreeNode<E>> cmpr){
  if (node.getChildren() == null)   return;
  if (node instanceof DefaultTreeNode)   ((TreeNodeChildrenList)node.getChildren()).treeSort(cmpr);
 else   Collections.sort(node.getChildren(),cmpr);
  for (  TreeNode<E> child : node.getChildren())   sort0(child,cmpr);
}"
16057,"@SuppressWarnings(""String_Node_Str"") private void sort0(TreeNode<E> node,Comparator<TreeNode<E>> cmpr){
  if (node.getChildren() == null)   return;
  if (node instanceof DefaultTreeNode)   ((TreeNodeChildrenList)node.getChildren()).sort(cmpr);
 else   Collections.sort(node.getChildren(),cmpr);
  for (  TreeNode<E> child : node.getChildren())   sort0(child,cmpr);
}","@SuppressWarnings(""String_Node_Str"") private void sort0(TreeNode<E> node,Comparator<TreeNode<E>> cmpr){
  if (node.getChildren() == null)   return;
  if (node instanceof DefaultTreeNode)   ((TreeNodeChildrenList)node.getChildren()).treeSort(cmpr);
 else   Collections.sort(node.getChildren(),cmpr);
  for (  TreeNode<E> child : node.getChildren())   sort0(child,cmpr);
}"
16058,"/** 
 * Returns the processed script.
 * @param script
 * @return
 */
public Object processScript(Object script){
  return script;
}","/** 
 * Returns the processed script.
 * @param script
 */
public Object processScript(Object script){
  return script;
}"
16059,"/** 
 * Process a portlet request.
 * @return false if the page is not found.
 * @since 3.0.0
 */
protected boolean process(Session sess,RenderRequest request,RenderResponse response,String path,boolean bRichlet) throws PortletException, IOException {
  final WebManager webman=getWebManager();
  final WebApp wapp=webman.getWebApp();
  final WebAppCtrl wappc=(WebAppCtrl)wapp;
  final HttpServletRequest httpreq=RenderHttpServletRequest.getInstance(request);
  final HttpServletResponse httpres=RenderHttpServletResponse.getInstance(response);
  final ServletContext svlctx=wapp.getServletContext();
  final DesktopRecycle dtrc=wapp.getConfiguration().getDesktopRecycle();
  Desktop desktop=dtrc != null ? DesktopRecycles.beforeService(dtrc,svlctx,sess,httpreq,httpres,path) : null;
  try {
    if (desktop != null) {
      final Page page=Utils.getMainPage(desktop);
      if (page != null) {
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        wappc.getUiEngine().recycleDesktop(exec,page,response.getWriter());
      }
 else       desktop=null;
    }
    if (desktop == null) {
      desktop=webman.getDesktop(sess,httpreq,httpres,path,true);
      if (desktop == null)       return true;
      final RequestInfo ri=new RequestInfoImpl(wapp,sess,desktop,httpreq,PageDefinitions.getLocator(wapp,path));
      ((SessionCtrl)sess).notifyClientRequest(true);
      final Page page;
      final PageRenderPatch patch=getRenderPatch();
      final Writer out=patch.beforeRender(ri);
      final UiFactory uf=wappc.getUiFactory();
      if (uf.isRichlet(ri,bRichlet)) {
        final Richlet richlet=uf.getRichlet(ri,path);
        if (richlet == null)         return false;
        page=WebManager.newPage(uf,ri,richlet,httpres,path);
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        if (isJSR286) {
          ResourceURL url=response.createResourceURL();
          page.setAttribute(""String_Node_Str"",response.encodeURL(url.toString()),Page.PAGE_SCOPE);
          page.setAttribute(""String_Node_Str"",response.getNamespace(),Page.PAGE_SCOPE);
        }
        wappc.getUiEngine().execNewPage(exec,richlet,page,out != null ? out : response.getWriter());
      }
 else       if (path != null) {
        final PageDefinition pagedef=uf.getPageDefinition(ri,path);
        if (pagedef == null)         return false;
        page=WebManager.newPage(uf,ri,pagedef,httpres,path);
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        if (isJSR286) {
          ResourceURL url=response.createResourceURL();
          page.setAttribute(""String_Node_Str"",response.encodeURL(url.toString()),Page.PAGE_SCOPE);
          page.setAttribute(""String_Node_Str"",response.getNamespace(),Page.PAGE_SCOPE);
        }
        wappc.getUiEngine().execNewPage(exec,pagedef,page,out != null ? out : response.getWriter());
      }
 else       return true;
      if (out != null)       patch.patchRender(ri,page,out,response.getWriter());
    }
  }
  finally {
    if (dtrc != null)     DesktopRecycles.afterService(dtrc,desktop);
  }
  return true;
}","/** 
 * Process a portlet request.
 * @return false if the page is not found.
 * @since 3.0.0
 */
protected boolean process(Session sess,RenderRequest request,RenderResponse response,String path,boolean bRichlet) throws PortletException, IOException {
  final WebManager webman=getWebManager();
  final WebApp wapp=webman.getWebApp();
  final WebAppCtrl wappc=(WebAppCtrl)wapp;
  final HttpServletRequest httpreq=RenderHttpServletRequest.getInstance(request);
  final HttpServletResponse httpres=RenderHttpServletResponse.getInstance(response);
  final ServletContext svlctx=wapp.getServletContext();
  final DesktopRecycle dtrc=wapp.getConfiguration().getDesktopRecycle();
  Desktop desktop=dtrc != null ? DesktopRecycles.beforeService(dtrc,svlctx,sess,httpreq,httpres,path) : null;
  try {
    if (desktop != null) {
      final Page page=Utils.getMainPage(desktop);
      if (page != null) {
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        wappc.getUiEngine().recycleDesktop(exec,page,response.getWriter());
      }
 else       desktop=null;
    }
    if (desktop == null) {
      desktop=webman.getDesktop(sess,httpreq,httpres,path,true);
      if (desktop == null)       return true;
      final RequestInfo ri=new RequestInfoImpl(wapp,sess,desktop,httpreq,PageDefinitions.getLocator(wapp,path));
      ((SessionCtrl)sess).notifyClientRequest(true);
      final Page page;
      final PageRenderPatch patch=getRenderPatch();
      final Writer out=patch.beforeRender(ri);
      final UiFactory uf=wappc.getUiFactory();
      if (uf.isRichlet(ri,bRichlet)) {
        final Richlet richlet=uf.getRichlet(ri,path);
        if (richlet == null)         return false;
        page=WebManager.newPage(uf,ri,richlet,httpres,path);
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        if (isJSR286) {
          ResourceURL url=response.createResourceURL();
          page.setAttribute(""String_Node_Str"",response.encodeURL(url.toString()),Page.PAGE_SCOPE);
          page.setAttribute(""String_Node_Str"",getNamespace(response),Page.PAGE_SCOPE);
        }
        wappc.getUiEngine().execNewPage(exec,richlet,page,out != null ? out : response.getWriter());
      }
 else       if (path != null) {
        final PageDefinition pagedef=uf.getPageDefinition(ri,path);
        if (pagedef == null)         return false;
        page=WebManager.newPage(uf,ri,pagedef,httpres,path);
        final Execution exec=new ExecutionImpl(svlctx,httpreq,httpres,desktop,page);
        fixContentType(response);
        if (isJSR286) {
          ResourceURL url=response.createResourceURL();
          page.setAttribute(""String_Node_Str"",response.encodeURL(url.toString()),Page.PAGE_SCOPE);
          page.setAttribute(""String_Node_Str"",getNamespace(response),Page.PAGE_SCOPE);
        }
        wappc.getUiEngine().execNewPage(exec,pagedef,page,out != null ? out : response.getWriter());
      }
 else       return true;
      if (out != null)       patch.patchRender(ri,page,out,response.getWriter());
    }
  }
  finally {
    if (dtrc != null)     DesktopRecycles.afterService(dtrc,desktop);
  }
  return true;
}"
16060,"public void removeValue(Comparable<?> series,Comparable<?> category){
  List<Comparable<?>> key=new ArrayList<Comparable<?>>(2);
  key.add(series);
  key.add(category);
  if (_valueMap.remove(key) == null)   return;
  final int cIndex=_categoryList.indexOf(category);
  final int sIndex=_seriesList.indexOf(series);
  final Number value=getValue(series,category);
  int ccount=_categoryMap.get(category).intValue();
  if (ccount > 1) {
    _categoryMap.put(category,new Integer(ccount - 1));
  }
 else {
    _categoryMap.remove(category);
    _categoryList.remove(category);
  }
  int scount=_seriesMap.get(series).intValue();
  if (scount > 1) {
    _seriesMap.put(series,new Integer(scount - 1));
  }
 else {
    _seriesMap.remove(series);
    _seriesList.remove(series);
  }
  fireEvent(ChartDataEvent.REMOVED,series,category,sIndex,cIndex,value);
}","public void removeValue(Comparable<?> series,Comparable<?> category){
  List<Comparable<?>> key=new ArrayList<Comparable<?>>(2);
  key.add(series);
  key.add(category);
  if (_valueMap.remove(key) == null)   return;
  final List<Comparable<?>> cateList=_seriesMap.get(series);
  final int cIndex=cateList.indexOf(category);
  final int sIndex=_seriesList.indexOf(series);
  final Number value=getValue(series,category);
  cateList.remove(cIndex);
  if (cateList.isEmpty()) {
    _seriesList.remove(series);
    _seriesMap.remove(series);
  }
  boolean clear=true;
  for (  List<Comparable<?>> cate : _seriesMap.values()) {
    if (cate.contains(category)) {
      clear=false;
      break;
    }
  }
  if (clear)   _categoryList.remove(category);
  fireEvent(ChartDataEvent.REMOVED,series,category,sIndex,cIndex,value);
}"
16061,"public void setValue(Comparable<?> series,Comparable<?> category,Number value){
  List<Comparable<?>> key=new ArrayList<Comparable<?>>(2);
  key.add(series);
  key.add(category);
  if (!_valueMap.containsKey(key)) {
    if (!_categoryMap.containsKey(category)) {
      _categoryMap.put(category,new Integer(1));
      _categoryList.add(category);
    }
 else {
      Integer count=_categoryMap.get(category);
      _categoryMap.put(category,new Integer(count.intValue() + 1));
    }
    if (!_seriesMap.containsKey(series)) {
      _seriesMap.put(series,new Integer(1));
      _seriesList.add(series);
    }
 else {
      Integer count=_seriesMap.get(series);
      _seriesMap.put(series,new Integer(count.intValue() + 1));
    }
    _valueMap.put(key,value);
    final int cIndex=_categoryList.indexOf(category);
    final int sIndex=_seriesList.indexOf(series);
    fireEvent(ChartDataEvent.ADDED,series,category,sIndex,cIndex,value);
  }
 else {
    Number ovalue=_valueMap.get(key);
    if (Objects.equals(ovalue,value)) {
      return;
    }
    _valueMap.put(key,value);
    final int cIndex=_categoryList.indexOf(category);
    final int sIndex=_seriesList.indexOf(series);
    fireEvent(ChartDataEvent.CHANGED,series,category,sIndex,cIndex,value);
  }
}","public void setValue(Comparable<?> series,Comparable<?> category,Number value){
  List<Comparable<?>> key=new ArrayList<Comparable<?>>(2);
  key.add(series);
  key.add(category);
  if (!_valueMap.containsKey(key)) {
    if (!_categoryList.contains(category))     _categoryList.add(category);
    LinkedList<Comparable<?>> list=_seriesMap.get(series);
    if (list == null) {
      list=new LinkedList<Comparable<?>>();
      list.add(category);
      _seriesMap.put(series,list);
      _seriesList.add(series);
    }
 else {
      list.add(category);
    }
    _valueMap.put(key,value);
    final int cIndex=list.indexOf(category);
    final int sIndex=_seriesList.indexOf(series);
    fireEvent(ChartDataEvent.ADDED,series,category,sIndex,cIndex,value);
  }
 else {
    Number ovalue=_valueMap.get(key);
    if (Objects.equals(ovalue,value)) {
      return;
    }
    _valueMap.put(key,value);
    final int cIndex=_seriesMap.get(series).indexOf(category);
    final int sIndex=_seriesList.indexOf(series);
    fireEvent(ChartDataEvent.CHANGED,series,category,sIndex,cIndex,value);
  }
}"
16062,"public void clear(){
  _seriesMap.clear();
  _seriesList.clear();
  _categoryMap.clear();
  _categoryList.clear();
  _valueMap.clear();
  fireEvent(ChartDataEvent.REMOVED,null,null,-1,-1,null);
}","public void clear(){
  _seriesMap.clear();
  _seriesList.clear();
  _categoryList.clear();
  _valueMap.clear();
  fireEvent(ChartDataEvent.REMOVED,null,null,-1,-1,null);
}"
16063,"public Object clone(){
  SimpleCategoryModel clone=(SimpleCategoryModel)super.clone();
  if (_seriesMap != null)   clone._seriesMap=new HashMap<Comparable<?>,Integer>(_seriesMap);
  if (_seriesList != null)   clone._seriesList=new ArrayList<Comparable<?>>(_seriesList);
  if (_categoryMap != null)   clone._categoryMap=new HashMap<Comparable<?>,Integer>(_categoryMap);
  if (_categoryList != null)   clone._categoryList=new ArrayList<Comparable<?>>(_categoryList);
  if (_valueMap != null)   clone._valueMap=new LinkedHashMap<List<Comparable<?>>,Number>(_valueMap);
  return clone;
}","public Object clone(){
  SimpleCategoryModel clone=(SimpleCategoryModel)super.clone();
  if (_seriesMap != null)   clone._seriesMap=new HashMap<Comparable<?>,LinkedList<Comparable<?>>>(_seriesMap);
  if (_seriesList != null)   clone._seriesList=new ArrayList<Comparable<?>>(_seriesList);
  if (_categoryList != null)   clone._categoryList=new ArrayList<Comparable<?>>(_categoryList);
  if (_valueMap != null)   clone._valueMap=new LinkedHashMap<List<Comparable<?>>,Number>(_valueMap);
  return clone;
}"
16064,"public void onPiggyback(){
  final Configuration config=_desktop.getWebApp().getConfiguration();
  long tmexpired=0;
  for (int cnt=0; !_pending.isEmpty(); ) {
    if (tmexpired == 0) {
      tmexpired=System.currentTimeMillis() + (config.getMaxProcessTime() >> 1);
      cnt=_pending.size() + 3;
    }
 else     if (--cnt < 0 || System.currentTimeMillis() > tmexpired) {
      break;
    }
    final ThreadInfo info;
synchronized (_pending) {
      if (_pending.isEmpty())       return;
      info=_pending.remove(0);
    }
synchronized (_mutex) {
      _carryOver=new ExecutionCarryOver(_desktop);
synchronized (info) {
        if (info.nActive == GIVEUP)         continue;
        info.nActive=1;
        info.notify();
      }
      if (_desktop == null)       break;
      try {
        _mutex.wait();
      }
 catch (      InterruptedException ex) {
        throw UiException.Aide.wrap(ex);
      }
    }
  }
}","public void onPiggyback(){
  if (_desktop == null)   return;
  final Configuration config=_desktop.getWebApp().getConfiguration();
  long tmexpired=0;
  for (int cnt=0; !_pending.isEmpty(); ) {
    if (tmexpired == 0) {
      tmexpired=System.currentTimeMillis() + (config.getMaxProcessTime() >> 1);
      cnt=_pending.size() + 3;
    }
 else     if (--cnt < 0 || System.currentTimeMillis() > tmexpired) {
      break;
    }
    final ThreadInfo info;
synchronized (_pending) {
      if (_pending.isEmpty())       return;
      info=_pending.remove(0);
    }
synchronized (_mutex) {
      _carryOver=new ExecutionCarryOver(_desktop);
synchronized (info) {
        if (info.nActive == GIVEUP)         continue;
        info.nActive=1;
        info.notify();
      }
      if (_desktop == null)       break;
      try {
        _mutex.wait();
      }
 catch (      InterruptedException ex) {
        throw UiException.Aide.wrap(ex);
      }
    }
  }
}"
16065,"/** 
 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.
 * @return      the next token
 * @exception java.io.IOException  if any I/O-Error occurs
 */
public Yytoken yylex() throws java.io.IOException, ParseException {
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  char[] zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    yychar+=zzMarkedPosL - zzStartRead;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++];
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL[zzCurrentPosL++];
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 11:
{
        sb.append(yytext());
      }
case 25:
    break;
case 4:
{
    sb.delete(0,sb.length());
    yybegin(STRING_BEGIN);
  }
case 26:
break;
case 16:
{
sb.append('\b');
}
case 27:
break;
case 6:
{
return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);
}
case 28:
break;
case 23:
{
Boolean val=Boolean.valueOf(yytext());
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 29:
break;
case 22:
{
return new Yytoken(Yytoken.TYPE_VALUE,null);
}
case 30:
break;
case 13:
{
yybegin(YYINITIAL);
return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());
}
case 31:
break;
case 12:
{
sb.append('\\');
}
case 32:
break;
case 21:
{
Double val=Double.valueOf(yytext());
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 33:
break;
case 1:
{
throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));
}
case 34:
break;
case 8:
{
return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);
}
case 35:
break;
case 19:
{
sb.append('\r');
}
case 36:
break;
case 15:
{
sb.append('/');
}
case 37:
break;
case 10:
{
return new Yytoken(Yytoken.TYPE_COLON,null);
}
case 38:
break;
case 14:
{
sb.append('""');
}
case 39:
break;
case 5:
{
return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);
}
case 40:
break;
case 17:
{
sb.append('\f');
}
case 41:
break;
case 24:
{
try {
int ch=Integer.parseInt(yytext().substring(2),16);
sb.append((char)ch);
}
 catch (Exception e) {
throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);
}
}
case 42:
break;
case 20:
{
sb.append('\t');
}
case 43:
break;
case 7:
{
return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);
}
case 44:
break;
case 2:
{
Object val;
String yyt=yytext();
try {
val=Integer.valueOf(yyt);
}
 catch (NumberFormatException ex) {
val=Long.valueOf(yyt);
}
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 45:
break;
case 18:
{
sb.append('\n');
}
case 46:
break;
case 9:
{
return new Yytoken(Yytoken.TYPE_COMMA,null);
}
case 47:
break;
case 3:
{
}
case 48:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}","/** 
 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.
 * @return      the next token
 * @exception java.io.IOException  if any I/O-Error occurs
 */
public Yytoken yylex() throws java.io.IOException, ParseException {
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  char[] zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    yychar+=zzMarkedPosL - zzStartRead;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++];
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL[zzCurrentPosL++];
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 11:
{
        sb.append(yytext());
      }
case 25:
    break;
case 4:
{
    sb.delete(0,sb.length());
    yybegin(STRING_BEGIN);
  }
case 26:
break;
case 16:
{
sb.append('\b');
}
case 27:
break;
case 6:
{
return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);
}
case 28:
break;
case 23:
{
Boolean val=Boolean.valueOf(yytext());
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 29:
break;
case 22:
{
return new Yytoken(Yytoken.TYPE_VALUE,null);
}
case 30:
break;
case 13:
{
yybegin(YYINITIAL);
return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());
}
case 31:
break;
case 12:
{
sb.append('\\');
}
case 32:
break;
case 21:
{
Double val=Double.valueOf(yytext());
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 33:
break;
case 1:
{
throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));
}
case 34:
break;
case 8:
{
return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);
}
case 35:
break;
case 19:
{
sb.append('\r');
}
case 36:
break;
case 15:
{
sb.append('/');
}
case 37:
break;
case 10:
{
return new Yytoken(Yytoken.TYPE_COLON,null);
}
case 38:
break;
case 14:
{
sb.append('""');
}
case 39:
break;
case 5:
{
return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);
}
case 40:
break;
case 17:
{
sb.append('\f');
}
case 41:
break;
case 24:
{
try {
int ch=Integer.parseInt(yytext().substring(2),16);
sb.append((char)ch);
}
 catch (Exception e) {
throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);
}
}
case 42:
break;
case 20:
{
sb.append('\t');
}
case 43:
break;
case 7:
{
return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);
}
case 44:
break;
case 2:
{
Object val;
String yyt=yytext();
try {
val=Integer.valueOf(yyt);
}
 catch (NumberFormatException ex1) {
try {
val=Long.valueOf(yyt);
}
 catch (NumberFormatException ex2) {
val=Double.valueOf(yyt);
}
}
return new Yytoken(Yytoken.TYPE_VALUE,val);
}
case 45:
break;
case 18:
{
sb.append('\n');
}
case 46:
break;
case 9:
{
return new Yytoken(Yytoken.TYPE_COMMA,null);
}
case 47:
break;
case 3:
{
}
case 48:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}"
16066,"/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map<String,String> attrs=new HashMap<String,String>();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=request.getParameter(""String_Node_Str"");
        sid=request.getParameter(""String_Node_Str"");
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(request.getParameter(""String_Node_Str""));
        Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
        Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          percent.remove(key);
          return;
        }
        final Integer p=percent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      uuid=request.getParameter(""String_Node_Str"");
      sid=request.getParameter(""String_Node_Str"");
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=request.getParameter(""String_Node_Str"");
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map<String,Object> params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
      Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
      final String key=uuid + '_' + sid;
      if (percent != null) {
        percent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
    Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
    final String key=uuid + '_' + sid;
    if (percent != null) {
      percent.remove(key);
      size.put(key,alert);
    }
  }
  if (log.finerable())   log.finer(attrs);
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}","/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map<String,String> attrs=new HashMap<String,String>();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        sid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(XMLs.encodeText(request.getParameter(""String_Node_Str"")));
        Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
        Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          percent.remove(key);
          return;
        }
        final Integer p=percent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      uuid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
      sid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=XMLs.encodeText(request.getParameter(""String_Node_Str""));
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map<String,Object> params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
      Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
      final String key=uuid + '_' + sid;
      if (percent != null) {
        percent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map<String,Integer> percent=cast((Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT));
    Map<String,Object> size=cast((Map)desktop.getAttribute(Attributes.UPLOAD_SIZE));
    final String key=uuid + '_' + sid;
    if (percent != null) {
      percent.remove(key);
      size.put(key,alert);
    }
  }
  if (log.finerable())   log.finer(attrs);
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}"
16067,"public void doAfterCompose(Page page,Component[] comps) throws Exception {
  final Execution exec=Executions.getCurrent();
  if (exec.getAttribute(RESOLVE_COMPOSITION) != this) {
    return;
  }
  exec.removeAttribute(RESOLVE_COMPOSITION);
  final Map<String,Component> insertMap=new HashMap<String,Component>();
  final Component parent=(Component)exec.getAttribute(PARENT);
  final Collection<Component> roots=(parent == null ? page.getRoots() : parent.getChildren());
  resolveInsertComponents(roots,insertMap);
  if (!roots.isEmpty()) {
    Component comp=roots.iterator().next();
    do {
      final Component nextRoot=comp.getNextSibling();
      final Annotation annt=((ComponentCtrl)comp).getAnnotation(null,""String_Node_Str"");
      if (annt != null) {
        final String joinId=annt.getAttribute(""String_Node_Str"");
        final Component insertComp=insertMap.get(joinId);
        if (insertComp != null) {
          comp.setParent(insertComp);
        }
 else {
          comp.detach();
        }
      }
      comp=nextRoot;
    }
 while (comp != null);
  }
}","public void doAfterCompose(Page page,Component[] comps) throws Exception {
  final Execution exec=Executions.getCurrent();
  if (exec.getAttribute(RESOLVE_COMPOSITION) != this) {
    return;
  }
  exec.removeAttribute(RESOLVE_COMPOSITION);
  final Map<String,Component> insertMap=new HashMap<String,Component>();
  final Component parent=(Component)exec.getAttribute(PARENT);
  final Collection<Component> roots=(parent == null ? page.getRoots() : parent.getChildren());
  resolveInsertComponents(roots,insertMap);
  resolveDefineComponents(roots,insertMap);
}"
16068,"private static void outDivTemplateBegin(Writer out,String uuid) throws IOException {
  out.write(""String_Node_Str"");
  writeAttr(out,""String_Node_Str"",uuid);
  out.write(""String_Node_Str"");
}","private static void outDivTemplateBegin(Writer out,String uuid) throws IOException {
  out.write(""String_Node_Str"");
  writeAttr(out,""String_Node_Str"",uuid);
  out.write(""String_Node_Str"" + ""String_Node_Str"" + getLoadingLabel() + ""String_Node_Str"");
}"
16069,"protected void init(){
  getState(State.MAIN).setReturningAll(true).addMinorTransition('[',State.IN_ATTRIBUTE);
  setState(State.IN_ATTRIBUTE,new StateCtx<State,CharClass,Character>(){
    protected void onReturn(    Character i,    CharClass cls){
      if (cls != CharClass.OTHER)       return;
      if (i == '""')       _inDoubleQuote=!_inDoubleQuote;
 else       if (i == '\'')       _inSingleQuote=!_inSingleQuote;
    }
  }
).setReturningAll(true).addMinorTransition(']',State.MAIN);
}","protected void init(){
  getState(State.MAIN).setReturningAll(true).addTransition(CharClass.OPEN_BRACKET,State.IN_ATTRIBUTE);
  setState(State.IN_ATTRIBUTE,new StateCtx<State,CharClass,Character>(){
    protected void onReturn(    Character i,    CharClass cls){
      if (cls != CharClass.OTHER)       return;
      if (i == '""')       _inDoubleQuote=!_inDoubleQuote;
 else       if (i == '\'')       _inSingleQuote=!_inSingleQuote;
    }
  }
).setReturningAll(true).addTransition(CharClass.CLOSE_BRACKET,State.MAIN);
}"
16070,"protected CharClass getClass(Character c){
  if (_inDoubleQuote && (_escaped || c != '""'))   return CharClass.LITERAL;
  if (_inSingleQuote && (_escaped || c != '\''))   return CharClass.LITERAL;
  if (_inParam && c != ',' && c != ')')   return Character.isWhitespace(c) ? CharClass.OTHER : CharClass.LITERAL;
  if (_escaped)   return Character.isWhitespace(c) ? CharClass.WHITESPACE : CharClass.LITERAL;
  if (Character.isLetter(c) || Character.isDigit(c) || c == '-' || c == '_')   return CharClass.LITERAL;
  if (Character.isWhitespace(c))   return CharClass.WHITESPACE;
  return c == '\\' ? CharClass.ESCAPE : CharClass.OTHER;
}","protected CharClass getClass(Character c){
  if (_inDoubleQuote && (_escaped || c != '""'))   return CharClass.LITERAL;
  if (_inSingleQuote && (_escaped || c != '\''))   return CharClass.LITERAL;
  if (_current == State.MAIN && c == '[') {
    return CharClass.OPEN_BRACKET;
  }
  if (_current == State.IN_ATTRIBUTE && !_inDoubleQuote && !_inSingleQuote && c == ']') {
    return CharClass.CLOSE_BRACKET;
  }
  if (_inParam && c != ',' && c != ')')   return Character.isWhitespace(c) ? CharClass.OTHER : CharClass.LITERAL;
  if (_escaped)   return Character.isWhitespace(c) ? CharClass.WHITESPACE : CharClass.LITERAL;
  if (Character.isLetter(c) || Character.isDigit(c) || c == '-' || c == '_')   return CharClass.LITERAL;
  if (Character.isWhitespace(c))   return CharClass.WHITESPACE;
  if ('.' == c.charValue() && _current == State.IN_ATTRIBUTE) {
    return CharClass.LITERAL;
  }
  return c == '\\' ? CharClass.ESCAPE : CharClass.OTHER;
}"
16071,"private Type getTokenType(char input,CharClass inputClass){
switch (inputClass) {
case LITERAL:
    return Type.IDENTIFIER;
case WHITESPACE:
  return Type.WHITESPACE;
}
switch (input) {
case ',':
return _inParam ? Type.PARAM_SEPARATOR : Type.SELECTOR_SEPARATOR;
case '*':
return Type.UNIVERSAL;
case '>':
return Type.CBN_CHILD;
case '+':
return Type.CBN_ADJACENT_SIBLING;
case '~':
return Type.CBN_GENERAL_SIBLING;
case '#':
return Type.NTN_ID;
case '.':
return Type.NTN_CLASS;
case ':':
return Type.NTN_PSDOCLS;
case '\'':
return Type.SINGLE_QUOTE;
case '""':
return Type.DOUBLE_QUOTE;
case '[':
return Type.OPEN_BRACKET;
case ']':
return Type.CLOSE_BRACKET;
case '(':
return Type.OPEN_PAREN;
case ')':
return Type.CLOSE_PAREN;
case '=':
switch (_prevChar) {
case '^':
return Type.OP_BEGIN_WITH;
case '$':
return Type.OP_END_WITH;
case '*':
return Type.OP_CONTAIN;
default :
return Type.OP_EQUAL;
}
default :
return Character.isWhitespace(input) ? Type.MINOR_WHITESPACE : Type.UNKNOWN_CHAR;
}
}","private Type getTokenType(char input,CharClass inputClass){
switch (inputClass) {
case LITERAL:
    return Type.IDENTIFIER;
case WHITESPACE:
  return Type.WHITESPACE;
}
switch (input) {
case ',':
return _inParam ? Type.PARAM_SEPARATOR : Type.SELECTOR_SEPARATOR;
case '*':
return Type.UNIVERSAL;
case '>':
return Type.CBN_CHILD;
case '+':
return Type.CBN_ADJACENT_SIBLING;
case '~':
return Type.CBN_GENERAL_SIBLING;
case '#':
return Type.NTN_ID;
case '.':
return (inputClass == CharClass.ATTR_GETTER_OP) ? Type.IDENTIFIER : Type.NTN_CLASS;
case ':':
return Type.NTN_PSDOCLS;
case '\'':
return Type.SINGLE_QUOTE;
case '""':
return Type.DOUBLE_QUOTE;
case '[':
return Type.OPEN_BRACKET;
case ']':
return Type.CLOSE_BRACKET;
case '(':
return Type.OPEN_PAREN;
case ')':
return Type.CLOSE_PAREN;
case '=':
switch (_prevChar) {
case '^':
return Type.OP_BEGIN_WITH;
case '$':
return Type.OP_END_WITH;
case '*':
return Type.OP_CONTAIN;
default :
return Type.OP_EQUAL;
}
default :
return Character.isWhitespace(input) ? Type.MINOR_WHITESPACE : Type.UNKNOWN_CHAR;
}
}"
16072,"protected State getLandingState(Character input,CharClass inputClass){
  if (input == '[')   return State.IN_ATTRIBUTE;
  if (inputClass == CharClass.ESCAPE)   _escaped=true;
  return State.MAIN;
}","protected State getLandingState(Character input,CharClass inputClass){
  if (input == '[')   return State.IN_ATTRIBUTE;
  if (super._current == State.IN_ATTRIBUTE) {
    if (_inDoubleQuote || _inSingleQuote)     return State.IN_ATTRIBUTE;
  }
  if (inputClass == CharClass.ESCAPE)   _escaped=true;
  return State.MAIN;
}"
16073,"public Tokenizer(){
  _tokens=null;
  _machine=new StateMachine<State,CharClass,Character>(){
    private int _anchor;
    private char _prevChar;
    private CharClass _prevClass;
    protected boolean _inDoubleQuote;
    protected boolean _inSingleQuote;
    protected boolean _inParam;
    protected boolean _escaped;
    protected boolean _opEscaped;
    protected void init(){
      getState(State.MAIN).setReturningAll(true).addMinorTransition('[',State.IN_ATTRIBUTE);
      setState(State.IN_ATTRIBUTE,new StateCtx<State,CharClass,Character>(){
        protected void onReturn(        Character i,        CharClass cls){
          if (cls != CharClass.OTHER)           return;
          if (i == '""')           _inDoubleQuote=!_inDoubleQuote;
 else           if (i == '\'')           _inSingleQuote=!_inSingleQuote;
        }
      }
).setReturningAll(true).addMinorTransition(']',State.MAIN);
    }
    protected void onReset(){
      _inDoubleQuote=false;
      _inSingleQuote=false;
      _inParam=false;
      _escaped=false;
      _opEscaped=false;
      _anchor=0;
      _prevChar='!';
      _prevClass=null;
      _tokens=new ArrayList<Token>();
    }
    protected void afterStep(    Character input,    CharClass inputClass,    State origin,    State destination){
      doDebug(""String_Node_Str"" + _opEscaped);
      if (inputClass == CharClass.ESCAPE)       return;
      boolean isPrefix=origin == State.IN_ATTRIBUTE && inputClass == CharClass.OTHER && (input == '^' || input == '$' || input == '*');
      if (inputClass != _prevClass && _prevClass != null && _prevClass.isMultiple())       flush(_prevChar,_prevClass,false);
      if (origin == State.IN_ATTRIBUTE && _opEscaped && input != '=')       flush(_prevChar,_prevClass,false);
      if (!inputClass.isMultiple() && !isPrefix)       flush(input,inputClass,true);
      if (input == '(')       _inParam=true;
 else       if (input == ')')       _inParam=false;
      _prevChar=input;
      _prevClass=inputClass;
      _opEscaped=isPrefix;
    }
    protected void onStop(    boolean endOfInput){
      if (!endOfInput)       return;
      if (_anchor < _step)       flush(_prevChar,_prevClass,false);
    }
    protected CharClass getClass(    Character c){
      if (_inDoubleQuote && (_escaped || c != '""'))       return CharClass.LITERAL;
      if (_inSingleQuote && (_escaped || c != '\''))       return CharClass.LITERAL;
      if (_inParam && c != ',' && c != ')')       return Character.isWhitespace(c) ? CharClass.OTHER : CharClass.LITERAL;
      if (_escaped)       return Character.isWhitespace(c) ? CharClass.WHITESPACE : CharClass.LITERAL;
      if (Character.isLetter(c) || Character.isDigit(c) || c == '-' || c == '_')       return CharClass.LITERAL;
      if (Character.isWhitespace(c))       return CharClass.WHITESPACE;
      return c == '\\' ? CharClass.ESCAPE : CharClass.OTHER;
    }
    protected State getLandingState(    Character input,    CharClass inputClass){
      if (input == '[')       return State.IN_ATTRIBUTE;
      if (inputClass == CharClass.ESCAPE)       _escaped=true;
      return State.MAIN;
    }
    protected void onReject(    Character input){
      throw new ParseException(_step,_current,input);
    }
    private void flush(    char input,    CharClass inputClass,    boolean withCurrChar){
      int endIndex=_step + (withCurrChar ? 1 : _escaped ? -1 : 0);
      _tokens.add(new Token(getTokenType(input,inputClass),_anchor,endIndex));
      doDebug(""String_Node_Str"" + _anchor + ""String_Node_Str""+ endIndex+ ""String_Node_Str"");
      _anchor=endIndex;
    }
    private Type getTokenType(    char input,    CharClass inputClass){
switch (inputClass) {
case LITERAL:
        return Type.IDENTIFIER;
case WHITESPACE:
      return Type.WHITESPACE;
  }
switch (input) {
case ',':
    return _inParam ? Type.PARAM_SEPARATOR : Type.SELECTOR_SEPARATOR;
case '*':
  return Type.UNIVERSAL;
case '>':
return Type.CBN_CHILD;
case '+':
return Type.CBN_ADJACENT_SIBLING;
case '~':
return Type.CBN_GENERAL_SIBLING;
case '#':
return Type.NTN_ID;
case '.':
return Type.NTN_CLASS;
case ':':
return Type.NTN_PSDOCLS;
case '\'':
return Type.SINGLE_QUOTE;
case '""':
return Type.DOUBLE_QUOTE;
case '[':
return Type.OPEN_BRACKET;
case ']':
return Type.CLOSE_BRACKET;
case '(':
return Type.OPEN_PAREN;
case ')':
return Type.CLOSE_PAREN;
case '=':
switch (_prevChar) {
case '^':
return Type.OP_BEGIN_WITH;
case '$':
return Type.OP_END_WITH;
case '*':
return Type.OP_CONTAIN;
default :
return Type.OP_EQUAL;
}
default :
return Character.isWhitespace(input) ? Type.MINOR_WHITESPACE : Type.UNKNOWN_CHAR;
}
}
}
;
}","public Tokenizer(){
  _tokens=null;
  _machine=new StateMachine<State,CharClass,Character>(){
    private int _anchor;
    private char _prevChar;
    private CharClass _prevClass;
    protected boolean _inDoubleQuote;
    protected boolean _inSingleQuote;
    protected boolean _inParam;
    protected boolean _escaped;
    protected boolean _opEscaped;
    protected void init(){
      getState(State.MAIN).setReturningAll(true).addTransition(CharClass.OPEN_BRACKET,State.IN_ATTRIBUTE);
      setState(State.IN_ATTRIBUTE,new StateCtx<State,CharClass,Character>(){
        protected void onReturn(        Character i,        CharClass cls){
          if (cls != CharClass.OTHER)           return;
          if (i == '""')           _inDoubleQuote=!_inDoubleQuote;
 else           if (i == '\'')           _inSingleQuote=!_inSingleQuote;
        }
      }
).setReturningAll(true).addTransition(CharClass.CLOSE_BRACKET,State.MAIN);
    }
    protected void onReset(){
      _inDoubleQuote=false;
      _inSingleQuote=false;
      _inParam=false;
      _escaped=false;
      _opEscaped=false;
      _anchor=0;
      _prevChar='!';
      _prevClass=null;
      _tokens=new ArrayList<Token>();
    }
    protected void afterStep(    Character input,    CharClass inputClass,    State origin,    State destination){
      doDebug(""String_Node_Str"" + _opEscaped);
      if (inputClass == CharClass.ESCAPE)       return;
      boolean isPrefix=origin == State.IN_ATTRIBUTE && inputClass == CharClass.OTHER && (input == '^' || input == '$' || input == '*');
      if (inputClass != _prevClass && _prevClass != null && _prevClass.isMultiple())       flush(_prevChar,_prevClass,false);
      if (origin == State.IN_ATTRIBUTE && _opEscaped && input != '=')       flush(_prevChar,_prevClass,false);
      if (!inputClass.isMultiple() && !isPrefix)       flush(input,inputClass,true);
      if (input == '(')       _inParam=true;
 else       if (input == ')')       _inParam=false;
      _prevChar=input;
      _prevClass=inputClass;
      _opEscaped=isPrefix;
    }
    protected void onStop(    boolean endOfInput){
      if (!endOfInput)       return;
      if (_anchor < _step)       flush(_prevChar,_prevClass,false);
    }
    protected CharClass getClass(    Character c){
      if (_inDoubleQuote && (_escaped || c != '""'))       return CharClass.LITERAL;
      if (_inSingleQuote && (_escaped || c != '\''))       return CharClass.LITERAL;
      if (_current == State.MAIN && c == '[') {
        return CharClass.OPEN_BRACKET;
      }
      if (_current == State.IN_ATTRIBUTE && !_inDoubleQuote && !_inSingleQuote && c == ']') {
        return CharClass.CLOSE_BRACKET;
      }
      if (_inParam && c != ',' && c != ')')       return Character.isWhitespace(c) ? CharClass.OTHER : CharClass.LITERAL;
      if (_escaped)       return Character.isWhitespace(c) ? CharClass.WHITESPACE : CharClass.LITERAL;
      if (Character.isLetter(c) || Character.isDigit(c) || c == '-' || c == '_')       return CharClass.LITERAL;
      if (Character.isWhitespace(c))       return CharClass.WHITESPACE;
      if ('.' == c.charValue() && _current == State.IN_ATTRIBUTE) {
        return CharClass.LITERAL;
      }
      return c == '\\' ? CharClass.ESCAPE : CharClass.OTHER;
    }
    protected State getLandingState(    Character input,    CharClass inputClass){
      if (input == '[')       return State.IN_ATTRIBUTE;
      if (super._current == State.IN_ATTRIBUTE) {
        if (_inDoubleQuote || _inSingleQuote)         return State.IN_ATTRIBUTE;
      }
      if (inputClass == CharClass.ESCAPE)       _escaped=true;
      return State.MAIN;
    }
    protected void onReject(    Character input){
      throw new ParseException(_step,_current,input);
    }
    private void flush(    char input,    CharClass inputClass,    boolean withCurrChar){
      int endIndex=_step + (withCurrChar ? 1 : _escaped ? -1 : 0);
      _tokens.add(new Token(getTokenType(input,inputClass),_anchor,endIndex));
      doDebug(""String_Node_Str"" + _anchor + ""String_Node_Str""+ endIndex+ ""String_Node_Str"");
      _anchor=endIndex;
    }
    private Type getTokenType(    char input,    CharClass inputClass){
switch (inputClass) {
case LITERAL:
        return Type.IDENTIFIER;
case WHITESPACE:
      return Type.WHITESPACE;
  }
switch (input) {
case ',':
    return _inParam ? Type.PARAM_SEPARATOR : Type.SELECTOR_SEPARATOR;
case '*':
  return Type.UNIVERSAL;
case '>':
return Type.CBN_CHILD;
case '+':
return Type.CBN_ADJACENT_SIBLING;
case '~':
return Type.CBN_GENERAL_SIBLING;
case '#':
return Type.NTN_ID;
case '.':
return (inputClass == CharClass.ATTR_GETTER_OP) ? Type.IDENTIFIER : Type.NTN_CLASS;
case ':':
return Type.NTN_PSDOCLS;
case '\'':
return Type.SINGLE_QUOTE;
case '""':
return Type.DOUBLE_QUOTE;
case '[':
return Type.OPEN_BRACKET;
case ']':
return Type.CLOSE_BRACKET;
case '(':
return Type.OPEN_PAREN;
case ')':
return Type.CLOSE_PAREN;
case '=':
switch (_prevChar) {
case '^':
return Type.OP_BEGIN_WITH;
case '$':
return Type.OP_END_WITH;
case '*':
return Type.OP_CONTAIN;
default :
return Type.OP_EQUAL;
}
default :
return Character.isWhitespace(input) ? Type.MINOR_WHITESPACE : Type.UNKNOWN_CHAR;
}
}
}
;
}"
16074,"protected void handleComponentAttached(Component comp){
  boolean removeMark=Boolean.TRUE.equals(comp.getAttribute(REMOVE_MARK));
  if (removeMark) {
    comp.addEventListener(10000,ON_ZKBIND_LATER,new EventListener<Event>(){
      public void onEvent(      Event event) throws Exception {
        final Component comp=event.getTarget();
        comp.removeEventListener(ON_ZKBIND_LATER,this);
        handleComponentAttached(comp);
      }
    }
);
    Events.postEvent(new Event(ON_ZKBIND_LATER,comp));
    return;
  }
  if (comp.getDesktop() != null) {
    Binder selfBinder=BinderUtil.getBinder(comp);
    if (selfBinder == null) {
      Binder parentBinder=BinderUtil.getBinder(comp,true);
      if (parentBinder != null && (parentBinder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=BinderUtil.getBinder(comp);
            if (innerBinder != null) {
              return;
            }
            Binder binder=BinderUtil.getBinder(comp,true);
            if (binder == null) {
              return;
            }
            if (getExtension().isLifeCycleHandling(comp)) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            getExtension().markLifeCycleHandling(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             BinderUtil.markHandling(comp,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","protected void handleComponentAttached(Component comp){
  boolean removeMark=Boolean.TRUE.equals(comp.getAttribute(REMOVE_MARK));
  if (removeMark) {
    comp.addEventListener(10000,ON_ZKBIND_LATER,new EventListener<Event>(){
      public void onEvent(      Event event) throws Exception {
        final Component comp=event.getTarget();
        comp.removeAttribute(REMOVE_MARK);
        comp.removeEventListener(ON_ZKBIND_LATER,this);
        handleComponentAttached(comp);
      }
    }
);
    Events.postEvent(new Event(ON_ZKBIND_LATER,comp));
    return;
  }
  if (comp.getDesktop() != null) {
    Binder selfBinder=BinderUtil.getBinder(comp);
    if (selfBinder == null) {
      Binder parentBinder=BinderUtil.getBinder(comp,true);
      if (parentBinder != null && (parentBinder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=BinderUtil.getBinder(comp);
            if (innerBinder != null) {
              return;
            }
            Binder binder=BinderUtil.getBinder(comp,true);
            if (binder == null) {
              return;
            }
            if (getExtension().isLifeCycleHandling(comp)) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            getExtension().markLifeCycleHandling(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             BinderUtil.markHandling(comp,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16075,"private void initRendererIfAny(Component comp,String attr){
  final Object installed=comp.getAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    return;
  }
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=AnnotationUtil.getSystemAnnotation(compCtrl,null);
  final Map<String,String[]> attrs=ann != null ? ann.getAttributes() : null;
  final String installAttr=""String_Node_Str"";
  if (installAttr.equals(attr)) {
    final String rendererName=AnnotationUtil.testString(attrs.get(Binder.RENDERER),ann);
    if (rendererName != null) {
      String[] values=null;
      if (rendererName.indexOf(""String_Node_Str"") != -1) {
        values=rendererName.split(""String_Node_Str"",2);
      }
 else {
        values=rendererName.split(""String_Node_Str"",2);
      }
      if (values != null) {
        final Object renderer=getRenderer(values[1]);
        Object old=null;
        try {
          old=Fields.get(comp,values[0]);
        }
 catch (        NoSuchMethodException e1) {
        }
        if (old == null) {
          try {
            Fields.set(comp,values[0],renderer,false);
          }
 catch (          Exception e) {
            throw new UiException(e.getMessage(),e);
          }
          if (renderer instanceof TemplateRendererCtrl) {
            ((TemplateRendererCtrl)renderer).setAttributeName(attr);
          }
        }
        comp.setAttribute(BinderImpl.RENDERER_INSTALLED,""String_Node_Str"");
      }
    }
  }
}","private void initRendererIfAny(Component comp,String attr){
  final Object installed=comp.getAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    return;
  }
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=AnnotationUtil.getSystemAnnotation(compCtrl,null);
  final Map<String,String[]> attrs=ann != null ? ann.getAttributes() : null;
  final String installAttr=""String_Node_Str"";
  if (attrs != null && installAttr.equals(attr)) {
    final String rendererName=AnnotationUtil.testString(attrs.get(Binder.RENDERER),ann);
    if (rendererName != null) {
      String[] values=null;
      if (rendererName.indexOf(""String_Node_Str"") != -1) {
        values=rendererName.split(""String_Node_Str"",2);
      }
 else {
        values=rendererName.split(""String_Node_Str"",2);
      }
      if (values != null) {
        final Object renderer=getRenderer(values[1]);
        Object old=null;
        try {
          old=Fields.get(comp,values[0]);
        }
 catch (        NoSuchMethodException e1) {
        }
        if (old == null) {
          try {
            Fields.set(comp,values[0],renderer,false);
          }
 catch (          Exception e) {
            throw new UiException(e.getMessage(),e);
          }
          if (renderer instanceof TemplateRendererCtrl) {
            ((TemplateRendererCtrl)renderer).setAttributeName(attr);
          }
        }
        comp.setAttribute(BinderImpl.RENDERER_INSTALLED,""String_Node_Str"");
      }
    }
  }
}"
16076,"public void setVoided(boolean voided){
  Object created=getAttribute(org.zkoss.zk.ui.impl.Attributes.PAGE_CREATED);
  if (created instanceof Boolean && ((Boolean)created).booleanValue())   throw new IllegalStateException(""String_Node_Str"");
  _voided=voided;
}","public void setVoided(boolean voided){
  Object created=getAttribute(org.zkoss.zk.ui.impl.Attributes.PAGE_CREATED);
  if (created instanceof Boolean && ((Boolean)created).booleanValue())   if (!getDesktop().getComponents().isEmpty())   throw new IllegalStateException(""String_Node_Str"");
  _voided=voided;
}"
16077,"/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class cls=null;
  if (!_customThemeProvider) {
    cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeProvider=true;
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      config.setThemeProvider((ThemeProvider)cls.newInstance());
    }
  }
  if (!_customThemeRegistry) {
    cls=parseClass(conf,""String_Node_Str"",ThemeRegistry.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeRegistry=true;
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeRegistry((ThemeRegistry)cls.newInstance());
    }
  }
  if (!_customThemeResolver) {
    cls=parseClass(conf,""String_Node_Str"",ThemeResolver.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeResolver=true;
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeResolver((ThemeResolver)cls.newInstance());
    }
  }
  Integer v=parseInteger(conf,""String_Node_Str"",ANY_VALUE);
  if (v != null)   config.setDesktopMaxInactiveInterval(v.intValue());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  String s=conf.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setRepeatUuid(!""String_Node_Str"".equals(s));
}","/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator<Element> it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator<Element> it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class<?> cls=null;
  if (!config.isCustomThemeProvider()) {
    cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       config.setCustomThemeProvider(true);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      config.setThemeProvider((ThemeProvider)cls.newInstance());
    }
  }
  if (!config.isCustomThemeRegistry()) {
    cls=parseClass(conf,""String_Node_Str"",ThemeRegistry.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       config.setCustomThemeRegistry(true);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeRegistry((ThemeRegistry)cls.newInstance());
    }
  }
  if (!config.isCustomThemeResolver()) {
    cls=parseClass(conf,""String_Node_Str"",ThemeResolver.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       config.setCustomThemeResolver(true);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeResolver((ThemeResolver)cls.newInstance());
    }
  }
  Integer v=parseInteger(conf,""String_Node_Str"",ANY_VALUE);
  if (v != null)   config.setDesktopMaxInactiveInterval(v.intValue());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  String s=conf.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setRepeatUuid(!""String_Node_Str"".equals(s));
}"
16078,"public void onEvent(PagingEvent event){
  if (inPagingMold()) {
    if (WebApps.getFeature(""String_Node_Str"") && getModel() != null) {
      if (_rodPagingIndex == null)       _rodPagingIndex=new LinkedList<Integer>();
      int ap=event.getActivePage();
      int size=Tree.this.getPaginal().getPageSize();
      int mps=maxRodPageSize();
      if (mps >= 0 && !_rodPagingIndex.contains(ap)) {
        _rodPagingIndex.add(ap);
      }
      if (mps >= 1 && mps < _rodPagingIndex.size()) {
        LinkedList<Integer> sortedIndex=new LinkedList<Integer>();
        mps=_rodPagingIndex.size() - mps;
        while (mps-- > 0) {
          sortedIndex.add(_rodPagingIndex.removeFirst());
        }
        Collections.sort(sortedIndex);
        int i=0;
        int start=sortedIndex.removeFirst() * size;
        int end=start + size;
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            if (sortedIndex.isEmpty()) {
              break;
            }
 else {
              start=sortedIndex.removeFirst() * size;
              end=start + size;
            }
          }
          if (!ti.isOpen()) {
            ti.getChildren().clear();
            ti.setRendered(false);
          }
          i++;
        }
      }
      int start=ap * size;
      int end=start + size;
      int i=0;
      final Renderer renderer=new Renderer();
      try {
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            break;
          }
          if (!ti.isRendered()) {
            ti.getChildren().clear();
            Treechildren parent=(Treechildren)ti.getParent();
            Object childNode=Tree.this.getAssociatedNode(ti,Tree.this);
            renderChildren0(renderer,parent,ti,childNode,i);
          }
          i++;
        }
      }
 catch (      Throwable ex) {
        renderer.doCatch(ex);
      }
 finally {
        renderer.doFinally();
      }
    }
    invalidate();
  }
}","public void onEvent(PagingEvent event){
  if (inPagingMold()) {
    if (WebApps.getFeature(""String_Node_Str"") && getModel() != null) {
      if (_rodPagingIndex == null)       _rodPagingIndex=new LinkedList<Integer>();
      int ap=event.getActivePage();
      int size=Tree.this.getPaginal().getPageSize();
      int mps=maxRodPageSize();
      if (mps >= 0 && !_rodPagingIndex.contains(ap)) {
        _rodPagingIndex.add(ap);
      }
      if (mps >= 1 && mps < _rodPagingIndex.size()) {
        LinkedList<Integer> sortedIndex=new LinkedList<Integer>();
        mps=_rodPagingIndex.size() - mps;
        while (mps-- > 0) {
          sortedIndex.add(_rodPagingIndex.removeFirst());
        }
        Collections.sort(sortedIndex);
        int i=0;
        int start=sortedIndex.removeFirst() * size;
        int end=start + size;
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            if (sortedIndex.isEmpty()) {
              break;
            }
 else {
              start=sortedIndex.removeFirst() * size;
              end=start + size;
            }
          }
          if (!ti.isOpen() && ti.getDesktop() != null) {
            ti.getChildren().clear();
            ti.setRendered(false);
            ti.setLoaded(false);
          }
          i++;
        }
      }
      int start=ap * size;
      int end=start + size;
      int i=0;
      final Renderer renderer=new Renderer();
      try {
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            break;
          }
          if (!ti.isRendered()) {
            ti.getChildren().clear();
            Treechildren parent=(Treechildren)ti.getParent();
            Object childNode=Tree.this.getAssociatedNode(ti,Tree.this);
            renderChildren0(renderer,parent,ti,childNode,i);
          }
          i++;
        }
      }
 catch (      Throwable ex) {
        renderer.doCatch(ex);
      }
 finally {
        renderer.doFinally();
      }
    }
    invalidate();
  }
}"
16079,"public void onChildRemoved(Component child){
  if (child instanceof Treerow) {
    _treerow=null;
  }
 else   if (child instanceof Treechildren) {
    addVisibleItemCount(-_treechildren.getVisibleItemCount());
    _treechildren=null;
  }
  super.onChildRemoved(child);
}","public void onChildRemoved(Component child){
  if (child instanceof Treerow) {
    _treerow=null;
  }
 else   if (child instanceof Treechildren) {
    if (isOpen())     addVisibleItemCount(-_treechildren.getVisibleItemCount());
    _treechildren=null;
  }
  super.onChildRemoved(child);
}"
16080,"/** 
 * Returns a live list of children. By live we mean the developer could add or remove a child by manipulating the returned list directly. <p>Default: instantiates and returns an instance of   {@link Children}.
 */
public List<Component> getChildren(){
  return new Children();
}","/** 
 * Returns a live list of children. By live we mean the developer could add or remove a child by manipulating the returned list directly. <p>Default: instantiates and returns an instance of   {@link Children}.
 */
public List<? extends Component> getChildren(){
  return new Children();
}"
16081,"private final void fixFellows(Collection<Component> c){
  for (  Component comp : c) {
    final String compId=comp.getId();
    if (compId.length() > 0)     addFellow(comp);
    if (!(comp instanceof IdSpace))     fixFellows(comp.getChildren());
  }
}","private final void fixFellows(Collection<Component> c){
  for (  Component comp : c) {
    final String compId=comp.getId();
    if (compId.length() > 0)     addFellow(comp);
    if (!(comp instanceof IdSpace))     fixFellows((Collection<Component>)comp.getChildren());
  }
}"
16082,"/** 
 * Returns a live list of children. By live we mean the developer could add or remove a child by manipulating the returned list directly.
 */
public List<Component> getChildren();","/** 
 * Returns a live list of children. By live we mean the developer could add or remove a child by manipulating the returned list directly.
 */
public List<? extends Component> getChildren();"
16083,"/** 
 * Replaces all children of the specified component. It is the same as <pre><code>parent.getChildren().clear(); parent.getChildren().addAll(newChildren); </code></pre>
 * @since 3.5.2
 */
public static void replaceChildren(Component parent,Collection<Component> newChildren){
  final Collection<Component> children=parent.getChildren();
  children.clear();
  children.addAll(newChildren);
}","/** 
 * Replaces all children of the specified component. It is the same as <pre><code>parent.getChildren().clear(); parent.getChildren().addAll(newChildren); </code></pre>
 * @since 3.5.2
 */
public static void replaceChildren(Component parent,Collection<Component> newChildren){
  final Collection<Component> children=(Collection<Component>)parent.getChildren();
  children.clear();
  children.addAll(newChildren);
}"
16084,"/** 
 * Returns a collection of visible children. <p>The performance of the returned collection's size() is NO GOOD.
 */
public static Collection<Component> getVisibleChildren(Component comp){
  final Collection<Component> children=comp.getChildren();
  return new AbstractCollection<Component>(){
    public int size(){
      int size=0;
      for (      Component c : children) {
        if (c.isVisible())         ++size;
      }
      return size;
    }
    public Iterator<Component> iterator(){
      return new Iterator<Component>(){
        final Iterator<Component> _it=children.iterator();
        Component _next;
        public boolean hasNext(){
          if (_next != null)           return true;
          _next=getNextVisible(false);
          return _next != null;
        }
        public Component next(){
          if (_next != null) {
            final Component c=_next;
            _next=null;
            return c;
          }
          return getNextVisible(true);
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
        private Component getNextVisible(        boolean blind){
          while (blind || _it.hasNext()) {
            final Component c=_it.next();
            if (c.isVisible())             return c;
          }
          return null;
        }
      }
;
    }
  }
;
}","/** 
 * Returns a collection of visible children. <p>The performance of the returned collection's size() is NO GOOD.
 */
public static Collection<Component> getVisibleChildren(Component comp){
  final Collection<Component> children=(Collection<Component>)comp.getChildren();
  return new AbstractCollection<Component>(){
    public int size(){
      int size=0;
      for (      Component c : children) {
        if (c.isVisible())         ++size;
      }
      return size;
    }
    public Iterator<Component> iterator(){
      return new Iterator<Component>(){
        final Iterator<Component> _it=children.iterator();
        Component _next;
        public boolean hasNext(){
          if (_next != null)           return true;
          _next=getNextVisible(false);
          return _next != null;
        }
        public Component next(){
          if (_next != null) {
            final Component c=_next;
            _next=null;
            return c;
          }
          return getNextVisible(true);
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
        private Component getNextVisible(        boolean blind){
          while (blind || _it.hasNext()) {
            final Component c=_it.next();
            if (c.isVisible())             return c;
          }
          return null;
        }
      }
;
    }
  }
;
}"
16085,"private void removeComponents(Collection<Component> comps){
  for (  Component comp : comps) {
    removeComponents(comp.getChildren());
    removeComponent(comp,true);
  }
}","private void removeComponents(Collection<Component> comps){
  for (  Component comp : comps) {
    removeComponents((Collection<Component>)comp.getChildren());
    removeComponent(comp,true);
  }
}"
16086,"public void doAfterCompose(Page page,Component[] comps) throws Exception {
  final Execution exec=Executions.getCurrent();
  if (exec.getAttribute(RESOLVE_COMPOSITION) != this) {
    return;
  }
  exec.removeAttribute(RESOLVE_COMPOSITION);
  final Map<String,Component> insertMap=new HashMap<String,Component>();
  final Component parent=(Component)exec.getAttribute(PARENT);
  final Collection<Component> roots=parent == null ? page.getRoots() : parent.getChildren();
  resolveInsertComponents(roots,insertMap);
  if (!roots.isEmpty()) {
    Component comp=roots.iterator().next();
    do {
      final Component nextRoot=comp.getNextSibling();
      final Annotation annt=((ComponentCtrl)comp).getAnnotation(null,""String_Node_Str"");
      if (annt != null) {
        final String joinId=annt.getAttribute(""String_Node_Str"");
        final Component insertComp=insertMap.get(joinId);
        if (insertComp != null) {
          comp.setParent(insertComp);
        }
 else {
          comp.detach();
        }
      }
      comp=nextRoot;
    }
 while (comp != null);
  }
}","public void doAfterCompose(Page page,Component[] comps) throws Exception {
  final Execution exec=Executions.getCurrent();
  if (exec.getAttribute(RESOLVE_COMPOSITION) != this) {
    return;
  }
  exec.removeAttribute(RESOLVE_COMPOSITION);
  final Map<String,Component> insertMap=new HashMap<String,Component>();
  final Component parent=(Component)exec.getAttribute(PARENT);
  final Collection<Component> roots=(Collection<Component>)(parent == null ? page.getRoots() : parent.getChildren());
  resolveInsertComponents(roots,insertMap);
  if (!roots.isEmpty()) {
    Component comp=roots.iterator().next();
    do {
      final Component nextRoot=comp.getNextSibling();
      final Annotation annt=((ComponentCtrl)comp).getAnnotation(null,""String_Node_Str"");
      if (annt != null) {
        final String joinId=annt.getAttribute(""String_Node_Str"");
        final Component insertComp=insertMap.get(joinId);
        if (insertComp != null) {
          comp.setParent(insertComp);
        }
 else {
          comp.detach();
        }
      }
      comp=nextRoot;
    }
 while (comp != null);
  }
}"
16087,"private void resolveInsertComponents(Collection<Component> comps,Map<String,Component> map){
  for (  Component comp : comps) {
    final Annotation annt=((ComponentCtrl)comp).getAnnotation(null,""String_Node_Str"");
    if (annt != null) {
      final String insertName=annt.getAttribute(""String_Node_Str"");
      if (map.containsKey(insertName)) {
        throw new UiException(""String_Node_Str"" + insertName + ""String_Node_Str""+ comp);
      }
      map.put(insertName,comp);
    }
    resolveInsertComponents(comp.getChildren(),map);
  }
}","private void resolveInsertComponents(Collection<Component> comps,Map<String,Component> map){
  for (  Component comp : comps) {
    final Annotation annt=((ComponentCtrl)comp).getAnnotation(null,""String_Node_Str"");
    if (annt != null) {
      final String insertName=annt.getAttribute(""String_Node_Str"");
      if (map.containsKey(insertName)) {
        throw new UiException(""String_Node_Str"" + insertName + ""String_Node_Str""+ comp);
      }
      map.put(insertName,comp);
    }
    resolveInsertComponents((Collection<Component>)comp.getChildren(),map);
  }
}"
16088,"public Object coerceToUi(Object val,Component component,BindContext ctx){
  if (val != null) {
    for (Iterator<Component> it=((Tabbox)component).getTabs().getChildren().iterator(); it.hasNext(); ) {
      final Component child=it.next();
      if (child instanceof Tab) {
        if (val.equals(((Tab)child).getLabel())) {
          return child;
        }
      }
    }
  }
  return null;
}","public Object coerceToUi(Object val,Component component,BindContext ctx){
  if (val != null) {
    for (Iterator<Component> it=(Iterator<Component>)((Tabbox)component).getTabs().getChildren().iterator(); it.hasNext(); ) {
      final Component child=it.next();
      if (child instanceof Tab) {
        if (val.equals(((Tab)child).getLabel())) {
          return child;
        }
      }
    }
  }
  return null;
}"
16089,"private void processAllComponentsBindings(Component comp){
  final Binder selfBinder=BinderUtil.getBinder(comp);
  if (selfBinder != null)   return;
  BindingAnnotationInfoChecker checker=((BinderCtrl)_binder).getBindingAnnotationInfoChecker();
  if (checker != null) {
    checker.checkBinding(_binder,comp);
  }
  processComponentBindings0(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    processAllComponentsBindings(kid);
  }
}","private void processAllComponentsBindings(Component comp){
  final Binder selfBinder=BinderUtil.getBinder(comp);
  if (selfBinder != null)   return;
  BindingAnnotationInfoChecker checker=((BinderCtrl)_binder).getBindingAnnotationInfoChecker();
  if (checker != null) {
    checker.checkBinding(_binder,comp);
  }
  processComponentBindings0(comp);
  for (final Iterator<Component> it=(Iterator<Component>)comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    processAllComponentsBindings(kid);
  }
}"
16090,"private void removeBindings(Component comp){
  removeBindings0(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    if (kid != null) {
      removeBindings(kid);
    }
  }
}","private void removeBindings(Component comp){
  removeBindings0(comp);
  for (final Iterator<Component> it=(Iterator<Component>)comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    if (kid != null) {
      removeBindings(kid);
    }
  }
}"
16091,"public void onEvent(PagingEvent event){
  if (inPagingMold()) {
    if (WebApps.getFeature(""String_Node_Str"") && getModel() != null) {
      if (_rodPagingIndex == null)       _rodPagingIndex=new LinkedList<Integer>();
      int ap=event.getActivePage();
      int size=Tree.this.getPaginal().getPageSize();
      int mps=maxRodPageSize();
      if (mps >= 0 && !_rodPagingIndex.contains(ap)) {
        _rodPagingIndex.add(ap);
      }
      if (mps >= 1 && mps < _rodPagingIndex.size()) {
        LinkedList<Integer> sortedIndex=new LinkedList<Integer>();
        mps=_rodPagingIndex.size() - mps;
        while (mps-- > 0) {
          sortedIndex.add(_rodPagingIndex.removeFirst());
        }
        Collections.sort(sortedIndex);
        int i=0;
        int start=sortedIndex.removeFirst() * size;
        int end=start + size;
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            if (sortedIndex.isEmpty()) {
              break;
            }
 else {
              start=sortedIndex.removeFirst() * size;
              end=start + size;
            }
          }
          if (ti.isRendered()) {
            ti.getChildren().clear();
            ti.setRendered(false);
          }
          i++;
        }
      }
      int start=ap * size;
      int end=start + size;
      int i=0;
      final Renderer renderer=new Renderer();
      try {
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            break;
          }
          if (!ti.isRendered()) {
            ti.getChildren().clear();
            Treechildren parent=(Treechildren)ti.getParent();
            Object childNode=Tree.this.getAssociatedNode(ti,Tree.this);
            renderChildren0(renderer,parent,ti,childNode,i);
          }
          i++;
        }
      }
 catch (      Throwable ex) {
        renderer.doCatch(ex);
      }
 finally {
        renderer.doFinally();
      }
    }
    invalidate();
  }
}","public void onEvent(PagingEvent event){
  if (inPagingMold()) {
    if (WebApps.getFeature(""String_Node_Str"") && getModel() != null) {
      if (_rodPagingIndex == null)       _rodPagingIndex=new LinkedList<Integer>();
      int ap=event.getActivePage();
      int size=Tree.this.getPaginal().getPageSize();
      int mps=maxRodPageSize();
      if (mps >= 0 && !_rodPagingIndex.contains(ap)) {
        _rodPagingIndex.add(ap);
      }
      if (mps >= 1 && mps < _rodPagingIndex.size()) {
        LinkedList<Integer> sortedIndex=new LinkedList<Integer>();
        mps=_rodPagingIndex.size() - mps;
        while (mps-- > 0) {
          sortedIndex.add(_rodPagingIndex.removeFirst());
        }
        Collections.sort(sortedIndex);
        int i=0;
        int start=sortedIndex.removeFirst() * size;
        int end=start + size;
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            if (sortedIndex.isEmpty()) {
              break;
            }
 else {
              start=sortedIndex.removeFirst() * size;
              end=start + size;
            }
          }
          if (!ti.isOpen()) {
            ti.getChildren().clear();
            ti.setRendered(false);
          }
          i++;
        }
      }
      int start=ap * size;
      int end=start + size;
      int i=0;
      final Renderer renderer=new Renderer();
      try {
        for (        Treeitem ti : new ArrayList<Treeitem>(Tree.this.getItems())) {
          if (i < start) {
            i++;
            continue;
          }
          if (i >= end) {
            break;
          }
          if (!ti.isRendered()) {
            ti.getChildren().clear();
            Treechildren parent=(Treechildren)ti.getParent();
            Object childNode=Tree.this.getAssociatedNode(ti,Tree.this);
            renderChildren0(renderer,parent,ti,childNode,i);
          }
          i++;
        }
      }
 catch (      Throwable ex) {
        renderer.doCatch(ex);
      }
 finally {
        renderer.doFinally();
      }
    }
    invalidate();
  }
}"
16092,"public V put(K key,V value){
  tryExpunge();
  final Value<V> v=_map.put(key,new Value<V>(value));
  return v != null ? v.value : null;
}","public V put(K key,V value){
  final Value<V> v=_map.put(key,new Value<V>(value));
  tryExpunge();
  return v != null ? v.value : null;
}"
16093,"/** 
 * Tests whether certain value is OK to expunge. <p>Note: values are tested thru   {@link #canExpunge} only if{@link #shallExpunge} returns true.<p>Deriving classes might override this method to return different value for different criteria. <p>The return value could be a combination of EXPUNGE_xxx. One of EXPUNGE_YES and EXPUNGE_NO is returned to denote whether to expunge the mapping. One of EXPUNGE_CONTINUE and EXPUNGE_STOP is returned to denote whether to continue the searching of the next mapping for expunging. <p>Normally, you return either (EXPUNGE_YES|EXPUNGE_CONTINUE) or (EXPUNG_NO|EXPUNGE_STOP). Notice that the mapping is queried in the last-access order. Thus, you rarely needs to return (EXPUNGE_NO|EXPUNGE_CONTINUE) unless the appropriate one might be out of this order. <p>This implementation compares the access time and size. It returns (EXPUNGE_YES|EXPUNGE_CONTINUE) if OK, and (EXPUNGE_NO|EXPUNGE_STOP) if not.
 * @param size the current size. It is used instead of size(), sincethe entry might not be removed yet (such as  {@link FastReadCache}).
 * @return a combination of EXPUNGE_xxx
 * @see #shallExpunge
 */
protected int canExpunge(int size,Value<V> v){
  return size >= getMaxSize() || (System.currentTimeMillis() - v.access) > getLifetime() ? (EXPUNGE_YES | EXPUNGE_CONTINUE) : (EXPUNGE_NO | EXPUNGE_STOP);
}","/** 
 * Tests whether certain value is OK to expunge. <p>Note: values are tested thru   {@link #canExpunge} only if{@link #shallExpunge} returns true.<p>Deriving classes might override this method to return different value for different criteria. <p>The return value could be a combination of EXPUNGE_xxx. One of EXPUNGE_YES and EXPUNGE_NO is returned to denote whether to expunge the mapping. One of EXPUNGE_CONTINUE and EXPUNGE_STOP is returned to denote whether to continue the searching of the next mapping for expunging. <p>Normally, you return either (EXPUNGE_YES|EXPUNGE_CONTINUE) or (EXPUNG_NO|EXPUNGE_STOP). Notice that the mapping is queried in the last-access order. Thus, you rarely needs to return (EXPUNGE_NO|EXPUNGE_CONTINUE) unless the appropriate one might be out of this order. <p>This implementation compares the access time and size. It returns (EXPUNGE_YES|EXPUNGE_CONTINUE) if OK, and (EXPUNGE_NO|EXPUNGE_STOP) if not.
 * @param size the current size. It is used instead of size(), sincethe entry might not be removed yet (such as  {@link FastReadCache}).
 * @return a combination of EXPUNGE_xxx
 * @see #shallExpunge
 */
protected int canExpunge(int size,Value<V> v){
  return size > getMaxSize() || (System.currentTimeMillis() - v.access) > getLifetime() ? (EXPUNGE_YES | EXPUNGE_CONTINUE) : (EXPUNGE_NO | EXPUNGE_STOP);
}"
16094,"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Object v=s.readObject();
  if (v instanceof String) {
    final LanguageDefinition langdef=LanguageDefinition.lookup((String)v);
    _compdef=langdef.getComponentDefinition((String)s.readObject());
  }
 else {
    _compdef=(ComponentDefinition)v;
  }
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Object v=s.readObject();
  if (v instanceof String) {
    final LanguageDefinition langdef=LanguageDefinition.lookup((String)v);
    final String name=(String)s.readObject();
    try {
      _compdef=langdef.getComponentDefinition(name);
    }
 catch (    DefinitionNotFoundException e) {
      if (""String_Node_Str"".equals(name)) {
        _compdef=langdef.getNativeDefinition();
      }
 else {
        throw e;
      }
    }
  }
 else {
    _compdef=(ComponentDefinition)v;
  }
}"
16095,"private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final String lazyTo=el.getAttributeValue(""String_Node_Str"");
    final boolean lazy=lazyTo != null && !""String_Node_Str"".equals(lazyTo) && pkg != null && pkg.length() > 0;
    final String lazyPkg=pkg;
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    if (lazy)     langdef.addLazyPackage(lazyPkg);
 else     langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    compdef.setBlankPreserved((s != null && !""String_Node_Str"".equals(s)));
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}","private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    compdef.setBlankPreserved((s != null && !""String_Node_Str"".equals(s)));
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}"
16096,"/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by asynchronous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    final Set<String> lazypkgs=new LinkedHashSet<String>(32);
    for (    LanguageDefinition langdef : LanguageDefinition.getByDeviceType(""String_Node_Str"")) {
      lazypkgs.addAll(langdef.getLazyPackages());
    }
    StringBuilder pkgs=new StringBuilder();
    for (    String lazypkg : lazypkgs) {
      pkgs.append(""String_Node_Str"" + lazypkg + ""String_Node_Str"");
    }
    out.write(pkgs.toString());
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,new StringBuffer(sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}","/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by asynchronous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,new StringBuffer(sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}"
16097,"private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    compdef.setBlankPreserved((s != null && !""String_Node_Str"".equals(s)));
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}","private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final String lazyTo=el.getAttributeValue(""String_Node_Str"");
    final boolean lazy=lazyTo != null && !""String_Node_Str"".equals(lazyTo) && pkg != null && pkg.length() > 0;
    final String lazyPkg=pkg;
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    if (lazy)     langdef.addLazyPackage(lazyPkg);
 else     langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    compdef.setBlankPreserved((s != null && !""String_Node_Str"".equals(s)));
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}"
16098,"/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by asynchronous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,new StringBuffer(sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}","/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by asynchronous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    final Set<String> lazypkgs=new LinkedHashSet<String>(32);
    for (    LanguageDefinition langdef : LanguageDefinition.getByDeviceType(""String_Node_Str"")) {
      lazypkgs.addAll(langdef.getLazyPackages());
    }
    StringBuilder pkgs=new StringBuilder();
    for (    String lazypkg : lazypkgs) {
      pkgs.append(""String_Node_Str"" + lazypkg + ""String_Node_Str"");
    }
    out.write(pkgs.toString());
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,new StringBuffer(sw.toString().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}"
16099,"@SuppressWarnings(""String_Node_Str"") public void onInitRender(){
  removeAttribute(ATTR_ON_INIT_RENDER_POSTED);
  if (_model != null) {
    _tmpdatas=new String[_model.getSize()];
    final boolean old=_childable;
    try {
      _childable=true;
      final ItemRenderer renderer=getRealRenderer();
      final Selectable<Object> smodel=getSelectableModel();
      _jsel=-1;
      for (int i=0, sz=_model.getSize(); i < sz; i++) {
        final Object value=_model.getElementAt(i);
        if (_jsel < 0 && smodel.isSelected(value))         _jsel=i;
        _tmpdatas[i]=renderer.render(this,value,i);
      }
    }
 catch (    Exception e) {
      throw UiException.Aide.wrap(e);
    }
 finally {
      _childable=old;
      getChildren().clear();
    }
  }
  invalidate();
}","@SuppressWarnings(""String_Node_Str"") public void onInitRender(){
  removeAttribute(ATTR_ON_INIT_RENDER_POSTED);
  onInitRenderNow();
  invalidate();
}"
16100,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_name);
  render(renderer,""String_Node_Str"",isDisabled());
  renderer.render(""String_Node_Str"",_jsel);
  if (_tabindex != 0)   renderer.render(""String_Node_Str"",_tabindex);
  if (_tmpdatas != null) {
    render(renderer,""String_Node_Str"",_tmpdatas);
    _tmpdatas=null;
  }
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_name);
  render(renderer,""String_Node_Str"",isDisabled());
  renderer.render(""String_Node_Str"",_jsel);
  if (_tabindex != 0)   renderer.render(""String_Node_Str"",_tabindex);
  if (_tmpdatas == null && _model != null && _model.getSize() > 0) {
    onInitRenderNow();
  }
  if (_tmpdatas != null) {
    render(renderer,""String_Node_Str"",_tmpdatas);
    _tmpdatas=null;
  }
}"
16101,"/** 
 * Returns the icon font
 * @param iconSclass a CSS class name for the icon font
 * @since 7.0.0
 */
public String getIconSclass(){
  return _auxinf != null && _auxinf.iconSclass instanceof String ? (String)_auxinf.iconSclass : null;
}","/** 
 * Returns the icon font
 * @since 7.0.0
 */
public String getIconSclass(){
  return _auxinf != null && _auxinf.iconSclass instanceof String ? (String)_auxinf.iconSclass : null;
}"
16102,"/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid,boolean compress) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance();
  out.setCompress(compress);
  out.open(request,response);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    out.write(new AuConfirmClose(null));
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(getServletContext(),request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}","/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid,boolean compress) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance();
  out.setCompress(compress);
  out.open(request,response);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    out.write(new AuConfirmClose(null));
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(getServletContext(),request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      dtid=XMLs.encodeText(dtid);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}"
16103,"public void onParentInvalidated(){
  for (  Component comp : getChildren())   comp.onParentInvalidated();
}","public void onParentInvalidated(){
  List<Component> children=getChildren();
  if (!children.isEmpty() && getFirstChild() != null) {
    for (    Component comp : children) {
      comp.onParentInvalidated();
    }
  }
}"
16104,"/** 
 * Tests whether certain value is OK to expunge. <p>Note: values are tested thru   {@link #canExpunge} only if{@link #shallExpunge} returns true.<p>Deriving classes might override this method to return different value for different criteria. <p>The return value could be a combination of EXPUNGE_xxx. One of EXPUNGE_YES and EXPUNGE_NO is returned to denote whether to expunge the mapping. One of EXPUNGE_CONTINUE and EXPUNGE_STOP is returned to denote whether to continue the searching of the next mapping for expunging. <p>Normally, you return either (EXPUNGE_YES|EXPUNGE_CONTINUE) or (EXPUNG_NO|EXPUNGE_STOP). Notice that the mapping is queried in the last-access order. Thus, you rarely needs to return (EXPUNGE_NO|EXPUNGE_CONTINUE) unless the appropriate one might be out of this order. <p>This implementation compares the access time and size. It returns (EXPUNGE_YES|EXPUNGE_CONTINUE) if OK, and (EXPUNGE_NO|EXPUNGE_STOP) if not.
 * @param size the current size. It is used instead of size(), sincethe entry might not be removed yet (such as  {@link FastReadCache}).
 * @return a combination of EXPUNGE_xxx
 * @see #shallExpunge
 */
protected int canExpunge(int size,Value<V> v){
  return size > getMaxSize() || (System.currentTimeMillis() - v.access) > getLifetime() ? (EXPUNGE_YES | EXPUNGE_CONTINUE) : (EXPUNGE_NO | EXPUNGE_STOP);
}","/** 
 * Tests whether certain value is OK to expunge. <p>Note: values are tested thru   {@link #canExpunge} only if{@link #shallExpunge} returns true.<p>Deriving classes might override this method to return different value for different criteria. <p>The return value could be a combination of EXPUNGE_xxx. One of EXPUNGE_YES and EXPUNGE_NO is returned to denote whether to expunge the mapping. One of EXPUNGE_CONTINUE and EXPUNGE_STOP is returned to denote whether to continue the searching of the next mapping for expunging. <p>Normally, you return either (EXPUNGE_YES|EXPUNGE_CONTINUE) or (EXPUNG_NO|EXPUNGE_STOP). Notice that the mapping is queried in the last-access order. Thus, you rarely needs to return (EXPUNGE_NO|EXPUNGE_CONTINUE) unless the appropriate one might be out of this order. <p>This implementation compares the access time and size. It returns (EXPUNGE_YES|EXPUNGE_CONTINUE) if OK, and (EXPUNGE_NO|EXPUNGE_STOP) if not.
 * @param size the current size. It is used instead of size(), sincethe entry might not be removed yet (such as  {@link FastReadCache}).
 * @return a combination of EXPUNGE_xxx
 * @see #shallExpunge
 */
protected int canExpunge(int size,Value<V> v){
  return size >= getMaxSize() || (System.currentTimeMillis() - v.access) > getLifetime() ? (EXPUNGE_YES | EXPUNGE_CONTINUE) : (EXPUNGE_NO | EXPUNGE_STOP);
}"
16105,"/** 
 * Creates an instance of   {@link Event} based on the specified request.
 */
public static Event getEvent(AuRequest request){
  final String name=request.getCommand();
  final Component comp=request.getComponent();
  final Map<String,Object> data=request.getData();
  if (data != null && data.containsKey(""String_Node_Str"") && data.size() == 1) {
    final Object extractedData=data.get(""String_Node_Str"");
    if (extractedData == null)     return new Event(name,comp);
    if (extractedData instanceof Collection)     return new Event(name,comp,((Collection<?>)extractedData).toArray());
    return new Event(name,comp,extractedData);
  }
  return new Event(name,comp,data);
}","/** 
 * Creates an instance of   {@link Event} based on the specified request.
 */
public static Event getEvent(AuRequest request){
  final String name=request.getCommand();
  final Component comp=request.getComponent();
  final Map<String,Object> data=request.getData();
  if (data.isEmpty()) {
    return new Event(name,comp);
  }
 else   if (data.containsKey(""String_Node_Str"") && data.size() == 1) {
    final Object extractedData=data.get(""String_Node_Str"");
    if (extractedData == null)     return new Event(name,comp);
    if (extractedData instanceof Collection)     return new Event(name,comp,((Collection<?>)extractedData).toArray());
    return new Event(name,comp,extractedData);
  }
  return new Event(name,comp,data);
}"
16106,"/** 
 * Returns whether the specified tag is an 'orphan' tag. By orphan we mean it doesn't support the format of &lt;xx&gt; &lt;/xx&gt;. <p>For example, br and img are orphan tags.
 * @param tagname the tag name, e.g., br and tr.
 */
public static final boolean isOrphanTag(String tagname){
  return _orphans.contains(tagname.toLowerCase());
}","/** 
 * Returns whether the specified tag is an 'orphan' tag. By orphan we mean it doesn't support the format of &lt;xx&gt; &lt;/xx&gt;. <p>For example, br and img are orphan tags.
 * @param tagname the tag name, e.g., br and tr.
 */
public static final boolean isOrphanTag(String tagname){
  return _orphans.contains(tagname.toLowerCase(java.util.Locale.ENGLISH));
}"
16107,"/** 
 * Checks whether the prefix of a namespace is valid.
 */
public static final void checkNamespacePrefix(String prefix,Locator loc){
  if (prefix == null || prefix.length() == 0)   return;
  String reason=null;
  char first=prefix.charAt(0);
  if (isXMLDigit(first)) {
    reason=""String_Node_Str"";
  }
 else   if (first == '$') {
    reason=""String_Node_Str"";
  }
 else   if (first == '-') {
    reason=""String_Node_Str"";
  }
 else   if (first == '.') {
    reason=""String_Node_Str"";
  }
 else {
    final String s=prefix.toLowerCase();
    if (s.startsWith(""String_Node_Str"") && !s.equals(""String_Node_Str""))     reason=""String_Node_Str"";
  }
  if (reason != null)   throw new DOMException(DOMException.INVALID_CHARACTER_ERR,""String_Node_Str"" + prefix + ""String_Node_Str""+ reason,loc);
  for (int j=0, len=prefix.length(); j < len; j++)   if (!isXMLNameCharacter(prefix.charAt(j))) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,appendAsHex(sb,prefix.charAt(j)).toString(),loc);
  }
  if (prefix.indexOf(""String_Node_Str"") >= 0)   throw new DOMException(DOMException.INVALID_CHARACTER_ERR,""String_Node_Str"",loc);
}","/** 
 * Checks whether the prefix of a namespace is valid.
 */
public static final void checkNamespacePrefix(String prefix,Locator loc){
  if (prefix == null || prefix.length() == 0)   return;
  String reason=null;
  char first=prefix.charAt(0);
  if (isXMLDigit(first)) {
    reason=""String_Node_Str"";
  }
 else   if (first == '$') {
    reason=""String_Node_Str"";
  }
 else   if (first == '-') {
    reason=""String_Node_Str"";
  }
 else   if (first == '.') {
    reason=""String_Node_Str"";
  }
 else {
    final String s=prefix.toLowerCase(java.util.Locale.ENGLISH);
    if (s.startsWith(""String_Node_Str"") && !s.equals(""String_Node_Str""))     reason=""String_Node_Str"";
  }
  if (reason != null)   throw new DOMException(DOMException.INVALID_CHARACTER_ERR,""String_Node_Str"" + prefix + ""String_Node_Str""+ reason,loc);
  for (int j=0, len=prefix.length(); j < len; j++)   if (!isXMLNameCharacter(prefix.charAt(j))) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,appendAsHex(sb,prefix.charAt(j)).toString(),loc);
  }
  if (prefix.indexOf(""String_Node_Str"") >= 0)   throw new DOMException(DOMException.INVALID_CHARACTER_ERR,""String_Node_Str"",loc);
}"
16108,"private void init(String name,byte[] data) throws IOException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _name=name;
  _data=data;
  String format=null;
  try {
    final ImageInputStream imis=ImageIO.createImageInputStream(new ByteArrayInputStream(data));
    final Iterator it=ImageIO.getImageReaders(imis);
    if (it.hasNext()) {
      final ImageReader rd=(ImageReader)it.next();
      format=rd.getFormatName().toLowerCase();
    }
  }
 catch (  IOException ex) {
  }
  if (format == null) {
    _format=getFormatByName(name);
    if (_format == null)     throw new IOException(""String_Node_Str"" + name);
    log.warning(""String_Node_Str"" + _format + ""String_Node_Str"");
    _width=_height=0;
  }
 else {
    _format=format;
    final ImageIcon ii=new ImageIcon(_data);
    _width=ii.getIconWidth();
    _height=ii.getIconHeight();
  }
  _ctype=getContentType(_format);
}","private void init(String name,byte[] data) throws IOException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _name=name;
  _data=data;
  String format=null;
  try {
    final ImageInputStream imis=ImageIO.createImageInputStream(new ByteArrayInputStream(data));
    final Iterator it=ImageIO.getImageReaders(imis);
    if (it.hasNext()) {
      final ImageReader rd=(ImageReader)it.next();
      format=rd.getFormatName().toLowerCase(java.util.Locale.ENGLISH);
    }
  }
 catch (  IOException ex) {
  }
  if (format == null) {
    _format=getFormatByName(name);
    if (_format == null)     throw new IOException(""String_Node_Str"" + name);
    log.warning(""String_Node_Str"" + _format + ""String_Node_Str"");
    _width=_height=0;
  }
 else {
    _format=format;
    final ImageIcon ii=new ImageIcon(_data);
    _width=ii.getIconWidth();
    _height=ii.getIconHeight();
  }
  _ctype=getContentType(_format);
}"
16109,"/** 
 * Sets the class of the image encoder for the specified format. <p>An instance of the specified class is instantiated each time   {@link #newInstance} is called.
 * @param format  The image format of the ZK image being encoded to.It can be ""png"" or ""jpeg"".
 * @param klass the class of the image encoder.It must implement  {@link ImageEncoder}.
 * @return the previous encoder, or null if not set yet.
 */
public static Class setEncoderClass(String format,Class klass){
  if (!ImageEncoder.class.isAssignableFrom(klass))   throw new IllegalArgumentException(ImageEncoder.class + ""String_Node_Str"" + klass);
  return _encoders.put(format.toLowerCase(),klass);
}","/** 
 * Sets the class of the image encoder for the specified format. <p>An instance of the specified class is instantiated each time   {@link #newInstance} is called.
 * @param format  The image format of the ZK image being encoded to.It can be ""png"" or ""jpeg"".
 * @param klass the class of the image encoder.It must implement  {@link ImageEncoder}.
 * @return the previous encoder, or null if not set yet.
 */
public static Class setEncoderClass(String format,Class klass){
  if (!ImageEncoder.class.isAssignableFrom(klass))   throw new IllegalArgumentException(ImageEncoder.class + ""String_Node_Str"" + klass);
  return _encoders.put(format.toLowerCase(java.util.Locale.ENGLISH),klass);
}"
16110,"/** 
 * Returns the class of the image encoder for the specified format, or null if not specified yet.
 */
public static Class getEncoderClass(String format){
  return _encoders.get(format.toLowerCase());
}","/** 
 * Returns the class of the image encoder for the specified format, or null if not specified yet.
 */
public static Class getEncoderClass(String format){
  return _encoders.get(format.toLowerCase(java.util.Locale.ENGLISH));
}"
16111,"/** 
 * Instantiates and returns the image encoder for the specified format.
 * @param format  The image format of the ZK image being encoded to.It can be ""png"" or ""jpeg"".
 * @exception IllegalArgumentException if the encoder of the specifiedformat is not found
 * @exception SystemException if failed to instantiate the encoder
 */
public static ImageEncoder newInstance(String format){
  final Class klass=_encoders.get(format.toLowerCase());
  if (klass == null)   throw new IllegalArgumentException(""String_Node_Str"" + format);
  try {
    return (ImageEncoder)klass.newInstance();
  }
 catch (  Throwable ex) {
    throw SystemException.Aide.wrap(ex);
  }
}","/** 
 * Instantiates and returns the image encoder for the specified format.
 * @param format  The image format of the ZK image being encoded to.It can be ""png"" or ""jpeg"".
 * @exception IllegalArgumentException if the encoder of the specifiedformat is not found
 * @exception SystemException if failed to instantiate the encoder
 */
public static ImageEncoder newInstance(String format){
  final Class klass=_encoders.get(format.toLowerCase(java.util.Locale.ENGLISH));
  if (klass == null)   throw new IllegalArgumentException(""String_Node_Str"" + format);
  try {
    return (ImageEncoder)klass.newInstance();
  }
 catch (  Throwable ex) {
    throw SystemException.Aide.wrap(ex);
  }
}"
16112,"private static final int convertSubversion(String subver){
  try {
    return Integer.parseInt(subver);
  }
 catch (  Throwable ex) {
  }
  subver=subver.toLowerCase();
  final int base, j;
  if (subver.startsWith(""String_Node_Str"")) {
    base=-100;
    j=2;
  }
 else   if (subver.startsWith(""String_Node_Str"")) {
    base=-300;
    j=4;
  }
 else   if (subver.startsWith(""String_Node_Str"")) {
    base=-500;
    j=5;
  }
 else {
    return 0;
  }
  if (j < subver.length()) {
    try {
      return base + Integer.parseInt(subver.substring(j));
    }
 catch (    Throwable ex) {
    }
  }
  return base;
}","private static final int convertSubversion(String subver){
  try {
    return Integer.parseInt(subver);
  }
 catch (  Throwable ex) {
  }
  subver=subver.toLowerCase(java.util.Locale.ENGLISH);
  final int base, j;
  if (subver.startsWith(""String_Node_Str"")) {
    base=-100;
    j=2;
  }
 else   if (subver.startsWith(""String_Node_Str"")) {
    base=-300;
    j=4;
  }
 else   if (subver.startsWith(""String_Node_Str"")) {
    base=-500;
    j=5;
  }
 else {
    return 0;
  }
  if (j < subver.length()) {
    try {
      return base + Integer.parseInt(subver.substring(j));
    }
 catch (    Throwable ex) {
    }
  }
  return base;
}"
16113,"/** 
 * Returns the content type of the specified format, such as ""html"" and ""pdf"", or null if not found (or format is null).
 */
public static final String getContentType(String format){
  if (format == null)   return null;
  format=format.trim().toLowerCase();
  for (; ; ) {
synchronized (_fmt2ct) {
      String fmt2ct=_fmt2ct.get(format);
      if (fmt2ct != null)       return fmt2ct;
    }
    int j=format.indexOf('.');
    if (j < 0)     return null;
    format=format.substring(j + 1);
  }
}","/** 
 * Returns the content type of the specified format, such as ""html"" and ""pdf"", or null if not found (or format is null).
 */
public static final String getContentType(String format){
  if (format == null)   return null;
  format=format.trim().toLowerCase(java.util.Locale.ENGLISH);
  for (; ; ) {
synchronized (_fmt2ct) {
      String fmt2ct=_fmt2ct.get(format);
      if (fmt2ct != null)       return fmt2ct;
    }
    int j=format.indexOf('.');
    if (j < 0)     return null;
    format=format.substring(j + 1);
  }
}"
16114,"/** 
 * Returns the format of the specified content type, or null if not found.
 * @exception IllealArgumentException if ctype is null
 */
public static final String getFormat(String ctype){
  if (ctype == null)   throw new IllegalArgumentException();
  ctype=ctype.trim().toLowerCase();
  String format;
synchronized (_ct2fmt) {
    format=_ct2fmt.get(ctype);
  }
  if (format == null) {
    int j=ctype.indexOf(';');
    if (j >= 0) {
      ctype=ctype.substring(0,j);
synchronized (_ct2fmt) {
        format=_ct2fmt.get(ctype);
      }
    }
    if (format == null) {
      j=ctype.indexOf('/');
      format=j >= 0 ? ctype.substring(j + 1) : ctype;
    }
  }
  return format;
}","/** 
 * Returns the format of the specified content type, or null if not found.
 * @exception IllealArgumentException if ctype is null
 */
public static final String getFormat(String ctype){
  if (ctype == null)   throw new IllegalArgumentException();
  ctype=ctype.trim().toLowerCase(java.util.Locale.ENGLISH);
  String format;
synchronized (_ct2fmt) {
    format=_ct2fmt.get(ctype);
  }
  if (format == null) {
    int j=ctype.indexOf(';');
    if (j >= 0) {
      ctype=ctype.substring(0,j);
synchronized (_ct2fmt) {
        format=_ct2fmt.get(ctype);
      }
    }
    if (format == null) {
      j=ctype.indexOf('/');
      format=j >= 0 ? ctype.substring(j + 1) : ctype;
    }
  }
  return format;
}"
16115,"private static final int toStyle(String style){
  if (style != null) {
    style=style.trim().toLowerCase();
    return ""String_Node_Str"".equals(style) ? DateFormat.SHORT : ""String_Node_Str"".equals(style) ? DateFormat.MEDIUM : ""String_Node_Str"".equals(style) ? DateFormat.LONG : ""String_Node_Str"".equals(style) ? DateFormat.FULL : -111;
  }
  return -111;
}","private static final int toStyle(String style){
  if (style != null) {
    style=style.trim().toLowerCase(java.util.Locale.ENGLISH);
    return ""String_Node_Str"".equals(style) ? DateFormat.SHORT : ""String_Node_Str"".equals(style) ? DateFormat.MEDIUM : ""String_Node_Str"".equals(style) ? DateFormat.LONG : ""String_Node_Str"".equals(style) ? DateFormat.FULL : -111;
  }
  return -111;
}"
16116,"/** 
 * Returns the implementation for the specified evaluator name.
 * @param name the name of the evaluator, say, MVEL.
 * @exception SystemException if not found or the class not found.
 */
@SuppressWarnings(""String_Node_Str"") public static final Class<? extends ExpressionFactory> getEvaluatorClass(String name){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!_loaded)   load();
  final String evalnm=name.toLowerCase();
  final Object clsnm;
synchronized (_evals) {
    clsnm=_evals.get(evalnm);
  }
  if (clsnm == null)   throw new SystemException(""String_Node_Str"" + name);
  if (clsnm instanceof Class) {
    final Class<?> cls=(Class)clsnm;
    if (!ExpressionFactory.class.isAssignableFrom(cls))     throw new SystemException(cls + ""String_Node_Str"" + ExpressionFactory.class);
    return cast(cls);
  }
 else {
    try {
      return cast(Classes.forNameByThread((String)clsnm));
    }
 catch (    ClassNotFoundException ex) {
      throw new SystemException(""String_Node_Str"" + clsnm);
    }
  }
}","/** 
 * Returns the implementation for the specified evaluator name.
 * @param name the name of the evaluator, say, MVEL.
 * @exception SystemException if not found or the class not found.
 */
@SuppressWarnings(""String_Node_Str"") public static final Class<? extends ExpressionFactory> getEvaluatorClass(String name){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!_loaded)   load();
  final String evalnm=name.toLowerCase(java.util.Locale.ENGLISH);
  final Object clsnm;
synchronized (_evals) {
    clsnm=_evals.get(evalnm);
  }
  if (clsnm == null)   throw new SystemException(""String_Node_Str"" + name);
  if (clsnm instanceof Class) {
    final Class<?> cls=(Class)clsnm;
    if (!ExpressionFactory.class.isAssignableFrom(cls))     throw new SystemException(cls + ""String_Node_Str"" + ExpressionFactory.class);
    return cast(cls);
  }
 else {
    try {
      return cast(Classes.forNameByThread((String)clsnm));
    }
 catch (    ClassNotFoundException ex) {
      throw new SystemException(""String_Node_Str"" + clsnm);
    }
  }
}"
16117,"/** 
 * Tests whether the evaluator (a.k.a., the expression factory) for the specified evaluator name exists.
 * @param name the name of the evaluator, say, MVEL.
 */
public static final boolean exists(String name){
  if (name == null)   return false;
  if (!_loaded)   load();
  name=name.toLowerCase();
synchronized (_evals) {
    return _evals.containsKey(name);
  }
}","/** 
 * Tests whether the evaluator (a.k.a., the expression factory) for the specified evaluator name exists.
 * @param name the name of the evaluator, say, MVEL.
 */
public static final boolean exists(String name){
  if (name == null)   return false;
  if (!_loaded)   load();
  name=name.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_evals) {
    return _evals.containsKey(name);
  }
}"
16118,"private static String getCharset(String ctype){
  final String ctypelc=ctype.toLowerCase();
  for (int j=0; (j=ctypelc.indexOf(""String_Node_Str"",j)) >= 0; j+=7) {
    int k=Strings.skipWhitespacesBackward(ctype,j - 1);
    if (k < 0 || ctype.charAt(k) == ';') {
      k=Strings.skipWhitespaces(ctype,j + 7);
      if (k <= ctype.length() && ctype.charAt(k) == '=') {
        j=ctype.indexOf(';',++k);
        String charset=(j >= 0 ? ctype.substring(k,j) : ctype.substring(k)).trim();
        if (charset.length() > 0)         return charset;
        break;
      }
    }
  }
  return null;
}","private static String getCharset(String ctype){
  final String ctypelc=ctype.toLowerCase(java.util.Locale.ENGLISH);
  for (int j=0; (j=ctypelc.indexOf(""String_Node_Str"",j)) >= 0; j+=7) {
    int k=Strings.skipWhitespacesBackward(ctype,j - 1);
    if (k < 0 || ctype.charAt(k) == ';') {
      k=Strings.skipWhitespaces(ctype,j + 7);
      if (k <= ctype.length() && ctype.charAt(k) == '=') {
        j=ctype.indexOf(';',++k);
        String charset=(j >= 0 ? ctype.substring(k,j) : ctype.substring(k)).trim();
        if (charset.length() > 0)         return charset;
        break;
      }
    }
  }
  return null;
}"
16119,"/** 
 * Process the specified fileitem.
 */
private static final Media processItem(Desktop desktop,FileItem fi,boolean alwaysNative) throws IOException {
  String name=getBaseName(fi);
  if (name != null) {
    final int j=name.lastIndexOf(';');
    if (j > 0) {
      final int k=name.lastIndexOf('.');
      if (k >= 0 && j > k && k > name.lastIndexOf('/'))       name=name.substring(0,j);
    }
  }
  String ctype=fi.getContentType(), ctypelc=ctype != null ? ctype.toLowerCase() : null;
  if (name != null && ""String_Node_Str"".equals(ctypelc)) {
    final int j=name.lastIndexOf('.');
    if (j >= 0) {
      String s=ContentTypes.getContentType(name.substring(j + 1));
      if (s != null)       ctypelc=ctype=s;
    }
  }
  if (!alwaysNative && ctypelc != null) {
    if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AImage(name,fi.get()) : new AImage(name,fi.getInputStream());
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AAudio(name,fi.get()) : new StreamAudio(name,fi,ctypelc);
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      String charset=getCharset(ctype);
      if (charset == null) {
        final Configuration conf=desktop.getWebApp().getConfiguration();
        final CharsetFinder chfd=conf.getUploadCharsetFinder();
        if (chfd != null)         charset=chfd.getCharset(ctype,fi.isInMemory() ? new ByteArrayInputStream(fi.get()) : fi.getInputStream());
        if (charset == null)         charset=conf.getUploadCharset();
      }
      return fi.isInMemory() ? new AMedia(name,null,ctype,fi.getString(charset)) : new ReaderMedia(name,null,ctype,fi,charset);
    }
  }
  return fi.isInMemory() ? new AMedia(name,null,ctype,fi.get()) : new StreamMedia(name,null,ctype,fi);
}","/** 
 * Process the specified fileitem.
 */
private static final Media processItem(Desktop desktop,FileItem fi,boolean alwaysNative) throws IOException {
  String name=getBaseName(fi);
  if (name != null) {
    final int j=name.lastIndexOf(';');
    if (j > 0) {
      final int k=name.lastIndexOf('.');
      if (k >= 0 && j > k && k > name.lastIndexOf('/'))       name=name.substring(0,j);
    }
  }
  String ctype=fi.getContentType(), ctypelc=ctype != null ? ctype.toLowerCase(java.util.Locale.ENGLISH) : null;
  if (name != null && ""String_Node_Str"".equals(ctypelc)) {
    final int j=name.lastIndexOf('.');
    if (j >= 0) {
      String s=ContentTypes.getContentType(name.substring(j + 1));
      if (s != null)       ctypelc=ctype=s;
    }
  }
  if (!alwaysNative && ctypelc != null) {
    if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AImage(name,fi.get()) : new AImage(name,fi.getInputStream());
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AAudio(name,fi.get()) : new StreamAudio(name,fi,ctypelc);
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      String charset=getCharset(ctype);
      if (charset == null) {
        final Configuration conf=desktop.getWebApp().getConfiguration();
        final CharsetFinder chfd=conf.getUploadCharsetFinder();
        if (chfd != null)         charset=chfd.getCharset(ctype,fi.isInMemory() ? new ByteArrayInputStream(fi.get()) : fi.getInputStream());
        if (charset == null)         charset=conf.getUploadCharset();
      }
      return fi.isInMemory() ? new AMedia(name,null,ctype,fi.getString(charset)) : new ReaderMedia(name,null,ctype,fi,charset);
    }
  }
  return fi.isInMemory() ? new AMedia(name,null,ctype,fi.get()) : new StreamMedia(name,null,ctype,fi);
}"
16120,"/** 
 * Returns whether the request contains multipart content.
 */
public static final boolean isMultipartContent(HttpServletRequest request){
  return ""String_Node_Str"".equals(request.getMethod().toLowerCase()) && FileUploadBase.isMultipartContent(new ServletRequestContext(request));
}","/** 
 * Returns whether the request contains multipart content.
 */
public static final boolean isMultipartContent(HttpServletRequest request){
  return ""String_Node_Str"".equals(request.getMethod().toLowerCase(java.util.Locale.ENGLISH)) && FileUploadBase.isMultipartContent(new ServletRequestContext(request));
}"
16121,"private static String getCharset(String ctype){
  final String ctypelc=ctype.toLowerCase();
  for (int j=0; (j=ctypelc.indexOf(""String_Node_Str"",j)) >= 0; j+=7) {
    int k=Strings.skipWhitespacesBackward(ctype,j - 1);
    if (k < 0 || ctype.charAt(k) == ';') {
      k=Strings.skipWhitespaces(ctype,j + 7);
      if (k <= ctype.length() && ctype.charAt(k) == '=') {
        j=ctype.indexOf(';',++k);
        String charset=(j >= 0 ? ctype.substring(k,j) : ctype.substring(k)).trim();
        if (charset.length() > 0)         return charset;
        break;
      }
    }
  }
  return null;
}","private static String getCharset(String ctype){
  final String ctypelc=ctype.toLowerCase(java.util.Locale.ENGLISH);
  for (int j=0; (j=ctypelc.indexOf(""String_Node_Str"",j)) >= 0; j+=7) {
    int k=Strings.skipWhitespacesBackward(ctype,j - 1);
    if (k < 0 || ctype.charAt(k) == ';') {
      k=Strings.skipWhitespaces(ctype,j + 7);
      if (k <= ctype.length() && ctype.charAt(k) == '=') {
        j=ctype.indexOf(';',++k);
        String charset=(j >= 0 ? ctype.substring(k,j) : ctype.substring(k)).trim();
        if (charset.length() > 0)         return charset;
        break;
      }
    }
  }
  return null;
}"
16122,"/** 
 * Returns whether the request contains multipart content.
 */
public static final boolean isMultipartContent(HttpServletRequest request){
  return ""String_Node_Str"".equals(request.getMethod().toLowerCase()) && FileUploadBase.isMultipartContent(new ServletRequestContext(request));
}","/** 
 * Returns whether the request contains multipart content.
 */
public static final boolean isMultipartContent(HttpServletRequest request){
  return ""String_Node_Str"".equals(request.getMethod().toLowerCase(java.util.Locale.ENGLISH)) && FileUploadBase.isMultipartContent(new ServletRequestContext(request));
}"
16123,"/** 
 * Process the specified fileitem.
 */
private static final Media processItem(Desktop desktop,FileItem fi,boolean alwaysNative) throws IOException {
  String name=getBaseName(fi);
  if (name != null) {
    final int j=name.lastIndexOf(';');
    if (j > 0) {
      final int k=name.lastIndexOf('.');
      if (k >= 0 && j > k && k > name.lastIndexOf('/'))       name=name.substring(0,j);
    }
  }
  String ctype=fi.getContentType(), ctypelc=ctype != null ? ctype.toLowerCase() : null;
  if (name != null && ""String_Node_Str"".equals(ctypelc)) {
    final int j=name.lastIndexOf('.');
    if (j >= 0) {
      String s=ContentTypes.getContentType(name.substring(j + 1));
      if (s != null)       ctypelc=ctype=s;
    }
  }
  if (!alwaysNative && ctypelc != null) {
    if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AImage(name,fi.get()) : new AImage(name,fi.getInputStream());
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AAudio(name,fi.get()) : new StreamAudio(name,fi,ctypelc);
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      String charset=getCharset(ctype);
      if (charset == null) {
        final Configuration conf=desktop.getWebApp().getConfiguration();
        final CharsetFinder chfd=conf.getUploadCharsetFinder();
        if (chfd != null)         charset=chfd.getCharset(ctype,fi.isInMemory() ? new ByteArrayInputStream(fi.get()) : fi.getInputStream());
        if (charset == null)         charset=conf.getUploadCharset();
      }
      return fi.isInMemory() ? new AMedia(name,null,ctype,fi.getString(charset)) : new ReaderMedia(name,null,ctype,fi,charset);
    }
  }
  return fi.isInMemory() ? new AMedia(name,null,ctype,fi.get()) : new StreamMedia(name,null,ctype,fi);
}","/** 
 * Process the specified fileitem.
 */
private static final Media processItem(Desktop desktop,FileItem fi,boolean alwaysNative) throws IOException {
  String name=getBaseName(fi);
  if (name != null) {
    final int j=name.lastIndexOf(';');
    if (j > 0) {
      final int k=name.lastIndexOf('.');
      if (k >= 0 && j > k && k > name.lastIndexOf('/'))       name=name.substring(0,j);
    }
  }
  String ctype=fi.getContentType(), ctypelc=ctype != null ? ctype.toLowerCase(java.util.Locale.ENGLISH) : null;
  if (name != null && ""String_Node_Str"".equals(ctypelc)) {
    final int j=name.lastIndexOf('.');
    if (j >= 0) {
      String s=ContentTypes.getContentType(name.substring(j + 1));
      if (s != null)       ctypelc=ctype=s;
    }
  }
  if (!alwaysNative && ctypelc != null) {
    if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AImage(name,fi.get()) : new AImage(name,fi.getInputStream());
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      try {
        return fi.isInMemory() ? new AAudio(name,fi.get()) : new StreamAudio(name,fi,ctypelc);
      }
 catch (      Throwable ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + ctype);
      }
    }
 else     if (ctypelc.startsWith(""String_Node_Str"")) {
      String charset=getCharset(ctype);
      if (charset == null) {
        final Configuration conf=desktop.getWebApp().getConfiguration();
        final CharsetFinder chfd=conf.getUploadCharsetFinder();
        if (chfd != null)         charset=chfd.getCharset(ctype,fi.isInMemory() ? new ByteArrayInputStream(fi.get()) : fi.getInputStream());
        if (charset == null)         charset=conf.getUploadCharset();
      }
      return fi.isInMemory() ? new AMedia(name,null,ctype,fi.getString(charset)) : new ReaderMedia(name,null,ctype,fi,charset);
    }
  }
  return fi.isInMemory() ? new AMedia(name,null,ctype,fi.get()) : new StreamMedia(name,null,ctype,fi);
}"
16124,"public Boolean isCompatible(String userAgent){
  userAgent=userAgent.toLowerCase();
  return userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 ? Boolean.TRUE : null;
}","public Boolean isCompatible(String userAgent){
  userAgent=userAgent.toLowerCase(java.util.Locale.ENGLISH);
  return userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 || userAgent.indexOf(""String_Node_Str"") >= 0 ? Boolean.TRUE : null;
}"
16125,"/** 
 * Returns the string encoded with ZK.
 * @since 6.0.3
 */
public static String encodeWithZK(String name){
  if (name.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + (WebApps.getEdition().toLowerCase()) + name.substring(2);
  return ""String_Node_Str"" + (WebApps.getEdition().toLowerCase()) + name;
}","/** 
 * Returns the string encoded with ZK.
 * @since 6.0.3
 */
public static String encodeWithZK(String name){
  if (name.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + (WebApps.getEdition().toLowerCase(java.util.Locale.ENGLISH)) + name.substring(2);
  return ""String_Node_Str"" + (WebApps.getEdition().toLowerCase(java.util.Locale.ENGLISH)) + name;
}"
16126,"/** 
 * Returns the interpreter for the specified language name.
 * @param zslang the name of the scripting language, say, Java.
 * @exception InterpreterNotFoundException if not found.
 */
public static final Interpreter newInterpreter(String zslang,Page owner){
  if (zslang == null || zslang.length() == 0 || owner == null)   throw new IllegalArgumentException(""String_Node_Str"");
  final String zsl=zslang.toLowerCase();
  final Object clsnm;
synchronized (_ips) {
    clsnm=_ips.get(zsl);
  }
  if (clsnm == null)   throw new InterpreterNotFoundException(zslang,MZk.NOT_FOUND,zslang);
  final Class<? extends Interpreter> cls;
  if (clsnm instanceof Class) {
    cls=cast((Class)clsnm);
  }
 else {
    Class<?> c;
    try {
      c=Classes.forNameByThread((String)clsnm);
    }
 catch (    ClassNotFoundException ex) {
      throw new UiException(""String_Node_Str"" + clsnm);
    }
    if (!Interpreter.class.isAssignableFrom(c))     throw new IllegalArgumentException(c + ""String_Node_Str"" + Interpreter.class);
    cls=cast(c);
synchronized (_ips) {
      final Object old=_ips.put(zsl,cls);
      if (old != clsnm)       _ips.put(zsl,old);
    }
  }
  try {
    final Interpreter ip=cls.newInstance();
    ip.init(owner,zslang);
    return ip;
  }
 catch (  Exception ex) {
    throw UiException.Aide.wrap(ex,""String_Node_Str"" + cls);
  }
}","/** 
 * Returns the interpreter for the specified language name.
 * @param zslang the name of the scripting language, say, Java.
 * @exception InterpreterNotFoundException if not found.
 */
public static final Interpreter newInterpreter(String zslang,Page owner){
  if (zslang == null || zslang.length() == 0 || owner == null)   throw new IllegalArgumentException(""String_Node_Str"");
  final String zsl=zslang.toLowerCase(java.util.Locale.ENGLISH);
  final Object clsnm;
synchronized (_ips) {
    clsnm=_ips.get(zsl);
  }
  if (clsnm == null)   throw new InterpreterNotFoundException(zslang,MZk.NOT_FOUND,zslang);
  final Class<? extends Interpreter> cls;
  if (clsnm instanceof Class) {
    cls=cast((Class)clsnm);
  }
 else {
    Class<?> c;
    try {
      c=Classes.forNameByThread((String)clsnm);
    }
 catch (    ClassNotFoundException ex) {
      throw new UiException(""String_Node_Str"" + clsnm);
    }
    if (!Interpreter.class.isAssignableFrom(c))     throw new IllegalArgumentException(c + ""String_Node_Str"" + Interpreter.class);
    cls=cast(c);
synchronized (_ips) {
      final Object old=_ips.put(zsl,cls);
      if (old != clsnm)       _ips.put(zsl,old);
    }
  }
  try {
    final Interpreter ip=cls.newInstance();
    ip.init(owner,zslang);
    return ip;
  }
 catch (  Exception ex) {
    throw UiException.Aide.wrap(ex,""String_Node_Str"" + cls);
  }
}"
16127,"/** 
 * Tests whether the interpreter for the specified language name exists.
 * @param zslang the name of the scripting language, say, Java.
 */
public static final boolean exists(String zslang){
  if (zslang == null)   return false;
  zslang=zslang.toLowerCase();
synchronized (_ips) {
    return _ips.containsKey(zslang);
  }
}","/** 
 * Tests whether the interpreter for the specified language name exists.
 * @param zslang the name of the scripting language, say, Java.
 */
public static final boolean exists(String zslang){
  if (zslang == null)   return false;
  zslang=zslang.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_ips) {
    return _ips.containsKey(zslang);
  }
}"
16128,"public void getSecondHalf(StringBuffer sb,String tag){
  if (tag != null) {
    final String tn=tag.toLowerCase();
    if (""String_Node_Str"".equals(tn) || HTMLs.isOrphanTag(tn))     return;
    sb.append(""String_Node_Str"").append(tag).append('>');
  }
}","public void getSecondHalf(StringBuffer sb,String tag){
  if (tag != null) {
    final String tn=tag.toLowerCase(java.util.Locale.ENGLISH);
    if (""String_Node_Str"".equals(tn) || HTMLs.isOrphanTag(tn))     return;
    sb.append(""String_Node_Str"").append(tag).append('>');
  }
}"
16129,"public void getFirstHalf(StringBuffer sb,String tag,Map<String,Object> props,Collection<Namespace> namespaces){
  if (tag != null)   sb.append('<').append(tag);
  NativeHelpers.getAttributes(sb,props,namespaces);
  if (tag != null) {
    final String tn=tag.toLowerCase();
    if (""String_Node_Str"".equals(tn) || HTMLs.isOrphanTag(tn))     sb.append('/');
    sb.append('>');
  }
}","public void getFirstHalf(StringBuffer sb,String tag,Map<String,Object> props,Collection<Namespace> namespaces){
  if (tag != null)   sb.append('<').append(tag);
  NativeHelpers.getAttributes(sb,props,namespaces);
  if (tag != null) {
    final String tn=tag.toLowerCase(java.util.Locale.ENGLISH);
    if (""String_Node_Str"".equals(tn) || HTMLs.isOrphanTag(tn))     sb.append('/');
    sb.append('>');
  }
}"
16130,"public void redraw(Writer out) throws java.io.IOException {
  final Execution exec=Executions.getCurrent();
  final boolean root=getParent() == null && (getPage().isComplete() || (exec != null && ""String_Node_Str"".equals(ExecutionsCtrl.getPageRedrawControl(exec))));
  if (exec == null || exec.isAsyncUpdate(null) || (!root && !HtmlPageRenders.isDirectContent(exec))) {
    super.redraw(out);
    return;
  }
  Writer oldout=null;
  if (exec != null && !HtmlPageRenders.isZkTagsGenerated(exec) && exec.getAttribute(ATTR_TOP_NATIVE) == null) {
    String tn;
    if (root || ""String_Node_Str"".equals(tn=_tag != null ? _tag.toLowerCase() : ""String_Node_Str"") || ""String_Node_Str"".equals(tn)|| ""String_Node_Str"".equals(tn)) {
      exec.setAttribute(ATTR_TOP_NATIVE,Boolean.TRUE);
      oldout=out;
      out=new StringWriter();
    }
  }
  out.write(getPrologHalf());
  Component child=getFirstChild();
  if (child == null) {
    if (root)     HtmlPageRenders.outStandalone(exec,null,out);
  }
 else {
    if (root)     HtmlPageRenders.setDirectContent(exec,true);
    do {
      Component next=child.getNextSibling();
      if (child instanceof Native || ((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
        ((ComponentCtrl)child).redraw(out);
      }
 else {
        HtmlPageRenders.setDirectContent(exec,false);
        HtmlPageRenders.outStandalone(exec,child,out);
        HtmlPageRenders.setDirectContent(exec,true);
      }
      child=next;
    }
 while (child != null);
  }
  out.write(getEpilogHalf());
  if (oldout != null) {
    exec.removeAttribute(ATTR_TOP_NATIVE);
    final StringBuffer sb=((StringWriter)out).getBuffer();
    if (!HtmlPageRenders.isZkTagsGenerated(exec)) {
      int jhead=-1, junav=-1, head=-1, heade=-1, html=-1;
      for (int j=0, len=sb.length(); (j=sb.indexOf(""String_Node_Str"",j)) >= 0; ) {
        ++j;
        if (jhead < 0 && startsWith(sb,""String_Node_Str"",j)) {
          int l=Strings.indexOf(sb,'>',j) + 1;
          sb.delete(jhead=--j,l);
          len=sb.length();
        }
 else         if (head < 0 && startsWith(sb,""String_Node_Str"",j)) {
          head=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (html < 0 && startsWith(sb,""String_Node_Str"",j)) {
          html=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (junav < 0 && startsWith(sb,""String_Node_Str"",j)) {
          junav=Strings.indexOf(sb,'>',j) + 1;
          break;
        }
 else         if (sb.charAt(j) == '/' && startsWith(sb,""String_Node_Str"",++j)) {
          heade=j - 2;
        }
      }
      boolean disableUnavailable=false;
      if (jhead < 0 && ((jhead=heade) < 0) && ((jhead=head) < 0) && ((jhead=junav) < 0) && ((jhead=html) < 0)) {
        if (_tag != null) {
          final String tn=_tag.toLowerCase();
          if (""String_Node_Str"".equals(tn) || ""String_Node_Str"".equals(tn)) {
            l_loop:             for (int j=0, len=sb.length(); j < len; ++j) switch (sb.charAt(j)) {
case '>':
              disableUnavailable=true;
            jhead=j + 1;
case '=':
case '""':
          break l_loop;
      }
    }
  }
  if (jhead < 0)   jhead=0;
}
final String msg=HtmlPageRenders.outUnavailable(exec);
if (msg != null && !disableUnavailable) {
  if (junav < 0) {
    if (html >= 0)     junav=sb.lastIndexOf(""String_Node_Str"");
  }
  if (junav >= 0)   sb.insert(junav < jhead ? jhead : junav,msg);
 else   sb.append(msg);
}
final String zktags=HtmlPageRenders.outHeaderZkTags(exec,getPage());
if (zktags != null) sb.insert(jhead,zktags);
}
oldout.write(sb.toString());
}
}","public void redraw(Writer out) throws java.io.IOException {
  final Execution exec=Executions.getCurrent();
  final boolean root=getParent() == null && (getPage().isComplete() || (exec != null && ""String_Node_Str"".equals(ExecutionsCtrl.getPageRedrawControl(exec))));
  if (exec == null || exec.isAsyncUpdate(null) || (!root && !HtmlPageRenders.isDirectContent(exec))) {
    super.redraw(out);
    return;
  }
  Writer oldout=null;
  if (exec != null && !HtmlPageRenders.isZkTagsGenerated(exec) && exec.getAttribute(ATTR_TOP_NATIVE) == null) {
    String tn;
    if (root || ""String_Node_Str"".equals(tn=_tag != null ? _tag.toLowerCase(java.util.Locale.ENGLISH) : ""String_Node_Str"") || ""String_Node_Str"".equals(tn)|| ""String_Node_Str"".equals(tn)) {
      exec.setAttribute(ATTR_TOP_NATIVE,Boolean.TRUE);
      oldout=out;
      out=new StringWriter();
    }
  }
  out.write(getPrologHalf());
  Component child=getFirstChild();
  if (child == null) {
    if (root)     HtmlPageRenders.outStandalone(exec,null,out);
  }
 else {
    if (root)     HtmlPageRenders.setDirectContent(exec,true);
    do {
      Component next=child.getNextSibling();
      if (child instanceof Native || ((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
        ((ComponentCtrl)child).redraw(out);
      }
 else {
        HtmlPageRenders.setDirectContent(exec,false);
        HtmlPageRenders.outStandalone(exec,child,out);
        HtmlPageRenders.setDirectContent(exec,true);
      }
      child=next;
    }
 while (child != null);
  }
  out.write(getEpilogHalf());
  if (oldout != null) {
    exec.removeAttribute(ATTR_TOP_NATIVE);
    final StringBuffer sb=((StringWriter)out).getBuffer();
    if (!HtmlPageRenders.isZkTagsGenerated(exec)) {
      int jhead=-1, junav=-1, head=-1, heade=-1, html=-1;
      for (int j=0, len=sb.length(); (j=sb.indexOf(""String_Node_Str"",j)) >= 0; ) {
        ++j;
        if (jhead < 0 && startsWith(sb,""String_Node_Str"",j)) {
          int l=Strings.indexOf(sb,'>',j) + 1;
          sb.delete(jhead=--j,l);
          len=sb.length();
        }
 else         if (head < 0 && startsWith(sb,""String_Node_Str"",j)) {
          head=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (html < 0 && startsWith(sb,""String_Node_Str"",j)) {
          html=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (junav < 0 && startsWith(sb,""String_Node_Str"",j)) {
          junav=Strings.indexOf(sb,'>',j) + 1;
          break;
        }
 else         if (sb.charAt(j) == '/' && startsWith(sb,""String_Node_Str"",++j)) {
          heade=j - 2;
        }
      }
      boolean disableUnavailable=false;
      if (jhead < 0 && ((jhead=heade) < 0) && ((jhead=head) < 0) && ((jhead=junav) < 0) && ((jhead=html) < 0)) {
        if (_tag != null) {
          final String tn=_tag.toLowerCase(java.util.Locale.ENGLISH);
          if (""String_Node_Str"".equals(tn) || ""String_Node_Str"".equals(tn)) {
            l_loop:             for (int j=0, len=sb.length(); j < len; ++j) switch (sb.charAt(j)) {
case '>':
              disableUnavailable=true;
            jhead=j + 1;
case '=':
case '""':
          break l_loop;
      }
    }
  }
  if (jhead < 0)   jhead=0;
}
final String msg=HtmlPageRenders.outUnavailable(exec);
if (msg != null && !disableUnavailable) {
  if (junav < 0) {
    if (html >= 0)     junav=sb.lastIndexOf(""String_Node_Str"");
  }
  if (junav >= 0)   sb.insert(junav < jhead ? jhead : junav,msg);
 else   sb.append(msg);
}
final String zktags=HtmlPageRenders.outHeaderZkTags(exec,getPage());
if (zktags != null) sb.insert(jhead,zktags);
}
oldout.write(sb.toString());
}
}"
16131,"/** 
 * Returns whether the specified feature is supported.
 * @param feature which feature to check. Supported features:<dl> <dt><code>professional</code> or <code>pe</code></dt> <dd>Whether it is ZK PE, i.e., whether zkex.jar (and others) are installed.</dd> <dt><code>enterprise</code> or <code>ee</code></dt> <dd>Whether it is ZK EE, i.e., whether zkmax.jar (and others) are installed. Note: ZK EE implies ""pe"". In other words, if getFeature(""ee"") is true, getFeature(""pe"") must be true.</dd> </dl>
 * @since 3.0.7
 */
public static boolean getFeature(String feature){
  final String f=feature.toLowerCase();
  return ""String_Node_Str"".equals(f) || ""String_Node_Str"".equals(f) ? _pe : ""String_Node_Str"".equals(f) || ""String_Node_Str"".equals(f) ? _ee : false;
}","/** 
 * Returns whether the specified feature is supported.
 * @param feature which feature to check. Supported features:<dl> <dt><code>professional</code> or <code>pe</code></dt> <dd>Whether it is ZK PE, i.e., whether zkex.jar (and others) are installed.</dd> <dt><code>enterprise</code> or <code>ee</code></dt> <dd>Whether it is ZK EE, i.e., whether zkmax.jar (and others) are installed. Note: ZK EE implies ""pe"". In other words, if getFeature(""ee"") is true, getFeature(""pe"") must be true.</dd> </dl>
 * @since 3.0.7
 */
public static boolean getFeature(String feature){
  final String f=feature.toLowerCase(java.util.Locale.ENGLISH);
  return ""String_Node_Str"".equals(f) || ""String_Node_Str"".equals(f) ? _pe : ""String_Node_Str"".equals(f) || ""String_Node_Str"".equals(f) ? _ee : false;
}"
16132,"public Interpreter getInterpreter(String zslang){
  zslang=(zslang != null ? zslang : _zslang).toLowerCase();
  Interpreter ip=_ips.get(zslang);
  if (ip == null) {
    if (_desktop != null && !_desktop.getWebApp().getConfiguration().isZScriptEnabled())     throw new UiException(""String_Node_Str"");
    ip=Interpreters.newInterpreter(zslang,this);
    _ips.put(zslang,ip);
    String script=_langdef.getInitScript(zslang);
    if (script != null) {
      if (_impclss != null && !_impclss.isEmpty() && ""String_Node_Str"".equals(zslang)) {
        StringBuilder sb=new StringBuilder();
        for (        String name : _impclss)         sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
        script+=sb.toString();
        sb=null;
      }
      ip.interpret(script,this);
    }
  }
  evalDeferredZScripts(ip,zslang);
  return ip;
}","public Interpreter getInterpreter(String zslang){
  zslang=(zslang != null ? zslang : _zslang).toLowerCase(java.util.Locale.ENGLISH);
  Interpreter ip=_ips.get(zslang);
  if (ip == null) {
    if (_desktop != null && !_desktop.getWebApp().getConfiguration().isZScriptEnabled())     throw new UiException(""String_Node_Str"");
    ip=Interpreters.newInterpreter(zslang,this);
    _ips.put(zslang,ip);
    String script=_langdef.getInitScript(zslang);
    if (script != null) {
      if (_impclss != null && !_impclss.isEmpty() && ""String_Node_Str"".equals(zslang)) {
        StringBuilder sb=new StringBuilder();
        for (        String name : _impclss)         sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
        script+=sb.toString();
        sb=null;
      }
      ip.interpret(script,this);
    }
  }
  evalDeferredZScripts(ip,zslang);
  return ip;
}"
16133,"/** 
 * Adds a component definition to this map. <p>Thread safe.
 */
public void add(ComponentDefinition compdef){
  if (compdef == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String name=compdef.getName();
  if (isCaseInsensitive())   name=name.toLowerCase();
  Object implcls=compdef.getImplementationClass();
  if (implcls instanceof Class)   implcls=((Class)implcls).getName();
synchronized (this) {
    if (_compdefs == null) {
      _compdefsByClass=Collections.synchronizedMap(new HashMap<String,ComponentDefinition>(4));
      _compdefs=Collections.synchronizedMap(new HashMap<String,ComponentDefinition>(4));
    }
    _compdefs.put(name,compdef);
    _compdefsByClass.put((String)implcls,compdef);
  }
}","/** 
 * Adds a component definition to this map. <p>Thread safe.
 */
public void add(ComponentDefinition compdef){
  if (compdef == null)   throw new IllegalArgumentException(""String_Node_Str"");
  String name=compdef.getName();
  if (isCaseInsensitive())   name=name.toLowerCase(java.util.Locale.ENGLISH);
  Object implcls=compdef.getImplementationClass();
  if (implcls instanceof Class)   implcls=((Class)implcls).getName();
synchronized (this) {
    if (_compdefs == null) {
      _compdefsByClass=Collections.synchronizedMap(new HashMap<String,ComponentDefinition>(4));
      _compdefs=Collections.synchronizedMap(new HashMap<String,ComponentDefinition>(4));
    }
    _compdefs.put(name,compdef);
    _compdefsByClass.put((String)implcls,compdef);
  }
}"
16134,"/** 
 * Returns whether the specified component exists.
 */
public boolean contains(String name){
  return _compdefs != null && _compdefs.containsKey(isCaseInsensitive() ? name.toLowerCase() : name);
}","/** 
 * Returns whether the specified component exists.
 */
public boolean contains(String name){
  return _compdefs != null && _compdefs.containsKey(isCaseInsensitive() ? name.toLowerCase(java.util.Locale.ENGLISH) : name);
}"
16135,"/** 
 * Adds the script that shall execute each time before evaluating zscript. <p>Note: it doesn't test the existence of the specified language, such that you can add the scripting language later.
 * @param zslang the scripting language, say, Java.
 */
public void addEachTimeScript(String zslang,String script){
  if (zslang == null || zslang.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (script != null && script.length() > 0) {
    zslang=zslang.toLowerCase();
synchronized (_eachscripts) {
      final String s=_eachscripts.get(zslang);
      _eachscripts.put(zslang,s != null ? s + '\n' + script : script);
    }
  }
}","/** 
 * Adds the script that shall execute each time before evaluating zscript. <p>Note: it doesn't test the existence of the specified language, such that you can add the scripting language later.
 * @param zslang the scripting language, say, Java.
 */
public void addEachTimeScript(String zslang,String script){
  if (zslang == null || zslang.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (script != null && script.length() > 0) {
    zslang=zslang.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_eachscripts) {
      final String s=_eachscripts.get(zslang);
      _eachscripts.put(zslang,s != null ? s + '\n' + script : script);
    }
  }
}"
16136,"/** 
 * Returns the initial scripts of the specified language, or null if no script.
 */
public String getInitScript(String zslang){
  zslang=zslang.toLowerCase();
synchronized (_initscripts) {
    return _initscripts.get(zslang);
  }
}","/** 
 * Returns the initial scripts of the specified language, or null if no script.
 */
public String getInitScript(String zslang){
  zslang=zslang.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_initscripts) {
    return _initscripts.get(zslang);
  }
}"
16137,"/** 
 * Returns the each-time scripts of  the specified language, or null if no scripts. <p>The each-time script is evaluated each time before evaluating zscript.
 */
public String getEachTimeScript(String zslang){
  zslang=zslang.toLowerCase();
synchronized (_eachscripts) {
    return _eachscripts.get(zslang);
  }
}","/** 
 * Returns the each-time scripts of  the specified language, or null if no scripts. <p>The each-time script is evaluated each time before evaluating zscript.
 */
public String getEachTimeScript(String zslang){
  zslang=zslang.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_eachscripts) {
    return _eachscripts.get(zslang);
  }
}"
16138,"/** 
 * Adds the script that shall execute when a page's interpreter is initialized. In other words, they are evaluated only once for each page. <p>Note: it doesn't test the existence of the specified language, such that you can add the scripting language later.
 * @param zslang the scripting language, say, Java.
 */
public void addInitScript(String zslang,String script){
  if (zslang == null || zslang.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (script != null && script.length() > 0) {
    zslang=zslang.toLowerCase();
synchronized (_initscripts) {
      final String s=_initscripts.get(zslang);
      _initscripts.put(zslang,s != null ? s + '\n' + script : script);
    }
  }
}","/** 
 * Adds the script that shall execute when a page's interpreter is initialized. In other words, they are evaluated only once for each page. <p>Note: it doesn't test the existence of the specified language, such that you can add the scripting language later.
 * @param zslang the scripting language, say, Java.
 */
public void addInitScript(String zslang,String script){
  if (zslang == null || zslang.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (script != null && script.length() > 0) {
    zslang=zslang.toLowerCase(java.util.Locale.ENGLISH);
synchronized (_initscripts) {
      final String s=_initscripts.get(zslang);
      _initscripts.put(zslang,s != null ? s + '\n' + script : script);
    }
  }
}"
16139,"static boolean matchType(Component component,String type){
  if (type == null)   return true;
  return component.getDefinition().getName().toLowerCase().equals(type.toLowerCase());
}","static boolean matchType(Component component,String type){
  if (type == null)   return true;
  return component.getDefinition().getName().toLowerCase(java.util.Locale.ENGLISH).equals(type.toLowerCase(java.util.Locale.ENGLISH));
}"
16140,"public void setExecution(Execution exec){
  _execution=exec;
  _paramResolvers.put(QueryParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getParameter(((QueryParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(HeaderParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getHeader(((HeaderParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(CookieParam.class,new ParamResolver<Annotation>(){
    @SuppressWarnings(""String_Node_Str"") public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Map<String,Object> m=(Map<String,Object>)_execution.getAttribute(COOKIE_CACHE);
      if (m == null) {
        final Object req=_execution.getNativeRequest();
        m=new HashMap<String,Object>();
        _execution.setAttribute(COOKIE_CACHE,m);
        if (req instanceof HttpServletRequest) {
          final Cookie[] cks=((HttpServletRequest)req).getCookies();
          if (cks != null) {
            for (            Cookie ck : cks) {
              m.put(ck.getName().toLowerCase(),ck.getValue());
            }
          }
        }
 else {
        }
      }
      Object val=m == null ? null : m.get(((CookieParam)anno).value().toLowerCase());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(ExecutionParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getAttribute(((ExecutionParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(ExecutionArgParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getArg().get(((ExecutionArgParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
}","public void setExecution(Execution exec){
  _execution=exec;
  _paramResolvers.put(QueryParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getParameter(((QueryParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(HeaderParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getHeader(((HeaderParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(CookieParam.class,new ParamResolver<Annotation>(){
    @SuppressWarnings(""String_Node_Str"") public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Map<String,Object> m=(Map<String,Object>)_execution.getAttribute(COOKIE_CACHE);
      if (m == null) {
        final Object req=_execution.getNativeRequest();
        m=new HashMap<String,Object>();
        _execution.setAttribute(COOKIE_CACHE,m);
        if (req instanceof HttpServletRequest) {
          final Cookie[] cks=((HttpServletRequest)req).getCookies();
          if (cks != null) {
            for (            Cookie ck : cks) {
              m.put(ck.getName().toLowerCase(java.util.Locale.ENGLISH),ck.getValue());
            }
          }
        }
 else {
        }
      }
      Object val=m == null ? null : m.get(((CookieParam)anno).value().toLowerCase(java.util.Locale.ENGLISH));
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(ExecutionParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getAttribute(((ExecutionParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
  _paramResolvers.put(ExecutionArgParam.class,new ParamResolver<Annotation>(){
    public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      Object val=_execution.getArg().get(((ExecutionArgParam)anno).value());
      return val == null ? null : Classes.coerce(returnType,val);
    }
  }
);
}"
16141,"/** 
 * Creates an instance of   {@link Event} based on the specified request.
 */
public static Event getEvent(AuRequest request){
  final String name=request.getCommand();
  final Component comp=request.getComponent();
  final Map<String,Object> data=request.getData();
  final Object data2=data != null ? data.get(""String_Node_Str"") : null;
  if (data2 == null)   return new Event(name,comp);
  if (data2 instanceof Collection)   return new Event(name,comp,((Collection)data2).toArray());
  return new Event(name,comp,data2);
}","/** 
 * Creates an instance of   {@link Event} based on the specified request.
 */
public static Event getEvent(AuRequest request){
  final String name=request.getCommand();
  final Component comp=request.getComponent();
  final Map<String,Object> data=request.getData();
  if (data != null && data.containsKey(""String_Node_Str"") && data.size() == 1) {
    final Object extractedData=data.get(""String_Node_Str"");
    if (extractedData == null)     return new Event(name,comp);
    if (extractedData instanceof Collection)     return new Event(name,comp,((Collection<?>)extractedData).toArray());
    return new Event(name,comp,extractedData);
  }
  return new Event(name,comp,data);
}"
16142,"private static String grad(String dir,Browser template,String[] colors){
  if (""String_Node_Str"".indexOf(""String_Node_Str"" + dir + ""String_Node_Str"") == -1)   throw new IllegalArgumentException(""String_Node_Str"");
  if (colors.length < 2)   throw new IllegalArgumentException(""String_Node_Str"");
  String color1=toHex(colors[0]);
  String color2=toHex(colors[1]);
  StringBuilder colorAll=new StringBuilder();
  if (template == Browser.Old_WebKit) {
    for (    String color : colors) {
      color=color.trim();
      boolean hex=color.startsWith(""String_Node_Str"");
      int end=hex ? color.indexOf(""String_Node_Str"") + 1 : color.indexOf(""String_Node_Str"") + 1;
      if (end == 0 && !color.toLowerCase().contains(""String_Node_Str""))       if (hex)       throw new IllegalArgumentException(""String_Node_Str"" + color + ""String_Node_Str"");
 else       throw new IllegalArgumentException(""String_Node_Str"" + color + ""String_Node_Str"");
      String pos=color.substring(end,color.length());
      color=color.substring(0,end);
      colorAll.append(""String_Node_Str"").append(pos).append(',').append(color).append(""String_Node_Str"");
    }
    int len=colorAll.length();
    if (len > 0)     colorAll.delete(len - 1,len);
  }
 else   if (template == Browser.Old_IE) {
    color1=toIEHex(colors[0]);
    color2=toIEHex(colors[1]);
  }
 else {
    for (    String color : colors) {
      colorAll.append(color).append(',');
    }
    int len=colorAll.length();
    if (len > 0)     colorAll.delete(len - 1,len);
  }
  String gradType=""String_Node_Str"".equals(dir) ? ""String_Node_Str"" : ""String_Node_Str"";
  int ieGradType=""String_Node_Str"".equals(dir) ? 1 : 0;
  return String.format(template.getGradient(dir),color1,color2,""String_Node_Str"",gradType,ieGradType,colorAll.toString());
}","private static String grad(String dir,Browser template,String[] colors){
  if (""String_Node_Str"".indexOf(""String_Node_Str"" + dir + ""String_Node_Str"") == -1)   throw new IllegalArgumentException(""String_Node_Str"");
  if (colors.length < 2)   throw new IllegalArgumentException(""String_Node_Str"");
  String color1=toHex(colors[0]);
  String color2=toHex(colors[1]);
  StringBuilder colorAll=new StringBuilder();
  if (template == Browser.Old_WebKit) {
    for (    String color : colors) {
      color=color.trim();
      boolean hex=color.startsWith(""String_Node_Str"");
      int end=hex ? color.indexOf(""String_Node_Str"") + 1 : color.indexOf(""String_Node_Str"") + 1;
      if (end == 0 && !color.toLowerCase().contains(""String_Node_Str""))       if (hex)       throw new IllegalArgumentException(""String_Node_Str"" + color + ""String_Node_Str"");
 else       throw new IllegalArgumentException(""String_Node_Str"" + color + ""String_Node_Str"");
      String pos=color.substring(end,color.length());
      color=color.substring(0,end);
      colorAll.append(""String_Node_Str"").append(pos).append(',').append(color).append(""String_Node_Str"");
    }
    int len=colorAll.length();
    if (len > 0)     colorAll.delete(len - 1,len);
  }
 else   if (template == Browser.Old_IE || template == Browser.IE9) {
    color1=toIEHex(colors[0]);
    color2=toIEHex(colors[1]);
  }
 else {
    for (    String color : colors) {
      colorAll.append(color).append(',');
    }
    int len=colorAll.length();
    if (len > 0)     colorAll.delete(len - 1,len);
  }
  String gradType=""String_Node_Str"".equals(dir) ? ""String_Node_Str"" : ""String_Node_Str"";
  int ieGradType=""String_Node_Str"".equals(dir) ? 1 : 0;
  return String.format(template.getGradient(dir),color1,color2,""String_Node_Str"",gradType,ieGradType,colorAll.toString());
}"
16143,"/** 
 * Adds a response directly with the given priority. The higher priority, the earlier the update is executed. The priority of   {@link #addResponse(String,AuResponse)}and   {@link #addResponse(AuResponse)} is assumed to be 0.
 * @since 6.0.1
 */
public void addResponse(String key,AuResponse response,int priority){
  if (response == null)   throw new IllegalArgumentException();
  if (_ending) {
    Object dps=response.getDepends();
    if (dps == null)     return;
    if (dps instanceof Page && _pgRemoved != null && _pgRemoved.contains((Page)dps)) {
      return;
    }
    if (dps instanceof Component) {
      Component p=(Component)dps;
      if (p.getPage() == null || (_pgRemoved != null && _pgRemoved.contains(p.getPage()))) {
        return;
      }
    }
  }
  final Object depends=response.getDepends();
  if (depends instanceof Component && isCUDisabled((Component)depends))   return;
  if (_responses == null)   _responses=new HashMap<Object,ResponseInfo>();
  ResponseInfo ri=_responses.get(depends);
  if (ri == null)   _responses.put(depends,ri=new ResponseInfo());
  final TimedValue tval=new TimedValue(_timed++,response,priority);
  if (key != null) {
    ri.values.put(key,tval);
  }
 else {
    ri.keyless.add(tval);
  }
}","/** 
 * Adds a response directly with the given priority. The higher priority, the earlier the update is executed. The priority of   {@link #addResponse(String,AuResponse)}and   {@link #addResponse(AuResponse)} is assumed to be 0.
 * @since 6.0.1
 */
public void addResponse(String key,AuResponse response,int priority){
  if (response == null)   throw new IllegalArgumentException();
  if (_ending) {
    Object dps=response.getDepends();
    if (dps == null && _owner == null)     return;
    if (dps instanceof Page && _pgRemoved != null && _pgRemoved.contains((Page)dps)) {
      return;
    }
    if (dps instanceof Component) {
      Component p=(Component)dps;
      if (p.getPage() == null || (_pgRemoved != null && _pgRemoved.contains(p.getPage()))) {
        return;
      }
    }
  }
  final Object depends=response.getDepends();
  if (depends instanceof Component && isCUDisabled((Component)depends))   return;
  if (_responses == null)   _responses=new HashMap<Object,ResponseInfo>();
  ResponseInfo ri=_responses.get(depends);
  if (ri == null)   _responses.put(depends,ri=new ResponseInfo());
  final TimedValue tval=new TimedValue(_timed++,response,priority);
  if (key != null) {
    ri.values.put(key,tval);
  }
 else {
    ri.keyless.add(tval);
  }
}"
16144,"public void load(){
  binder.loadComponent(comp,true);
}","public void load(){
  BindUiLifeCycle.markLifeCycleHandling(comp);
  binder.loadComponent(comp,true);
}"
16145,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    Binder selfBinder=BinderUtil.getBinder(comp);
    if (selfBinder == null) {
      Binder parentBinder=BinderUtil.getBinder(comp,true);
      if (parentBinder != null && (parentBinder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=BinderUtil.getBinder(comp);
            if (innerBinder != null) {
              return;
            }
            Binder binder=BinderUtil.getBinder(comp,true);
            if (binder == null) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             BinderUtil.markHandling(comp,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    Binder selfBinder=BinderUtil.getBinder(comp);
    if (selfBinder == null) {
      Binder parentBinder=BinderUtil.getBinder(comp,true);
      if (parentBinder != null && (parentBinder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=BinderUtil.getBinder(comp);
            if (innerBinder != null) {
              return;
            }
            Binder binder=BinderUtil.getBinder(comp,true);
            if (binder == null) {
              return;
            }
            if (getExtension().isLifeCycleHandling(comp)) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            getExtension().markLifeCycleHandling(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             BinderUtil.markHandling(comp,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16146,"@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=BinderUtil.getBinder(comp);
  if (innerBinder != null) {
    return;
  }
  Binder binder=BinderUtil.getBinder(comp,true);
  if (binder == null) {
    return;
  }
  if (binder instanceof AnnotateBinder) {
    new AnnotateBinderHelper(binder).initComponentBindings(comp);
  }
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   BinderUtil.markHandling(comp,binder);
}","@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=BinderUtil.getBinder(comp);
  if (innerBinder != null) {
    return;
  }
  Binder binder=BinderUtil.getBinder(comp,true);
  if (binder == null) {
    return;
  }
  if (getExtension().isLifeCycleHandling(comp)) {
    return;
  }
  if (binder instanceof AnnotateBinder) {
    new AnnotateBinderHelper(binder).initComponentBindings(comp);
  }
  getExtension().markLifeCycleHandling(comp);
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   BinderUtil.markHandling(comp,binder);
}"
16147,"private void removeBindings0(Component comp){
  final Object installed=comp.removeAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    BindELContext.removeModel(comp);
  }
  final Binder binder=BinderUtil.getBinder(comp);
  if (binder != null) {
    binder.removeBindings(comp);
  }
}","private void removeBindings0(Component comp){
  final Object installed=comp.removeAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    BindELContext.removeModel(comp);
  }
  final Binder binder=BinderUtil.getBinder(comp);
  if (binder != null) {
    binder.removeBindings(comp);
  }
  getExtension().removeLifeCycleHandling(comp);
}"
16148,"public void invalidate(){
  if (_page != null)   getAttachedUiEngine().addInvalidate(this);
}","public void invalidate(){
  if (_page != null) {
    getAttachedUiEngine().addInvalidate(this);
    notifyParentInvalidate();
  }
}"
16149,"private static DecimalFormat getLocalizedDecimalFormat(String pattern){
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(Locales.getCurrent());
  df.applyLocalizedPattern(pattern);
  return df;
}","private static DecimalFormat getLocalizedDecimalFormat(String pattern){
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(Locales.getCurrent());
  df.applyPattern(pattern);
  return df;
}"
16150,"/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class cls=null;
  if (!_customThemeProvider) {
    cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeProvider=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      config.setThemeProvider((ThemeProvider)cls.newInstance());
    }
  }
  if (!_customThemeRegistry) {
    cls=parseClass(conf,""String_Node_Str"",ThemeRegistry.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeRegistry=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeRegistry((ThemeRegistry)cls.newInstance());
    }
  }
  if (!_customThemeResolver) {
    cls=parseClass(conf,""String_Node_Str"",ThemeResolver.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeResolver=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeResolver((ThemeResolver)cls.newInstance());
    }
  }
}","/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class cls=null;
  if (!_customThemeProvider) {
    cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeProvider=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      config.setThemeProvider((ThemeProvider)cls.newInstance());
    }
  }
  if (!_customThemeRegistry) {
    cls=parseClass(conf,""String_Node_Str"",ThemeRegistry.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeRegistry=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeRegistry((ThemeRegistry)cls.newInstance());
    }
  }
  if (!_customThemeResolver) {
    cls=parseClass(conf,""String_Node_Str"",ThemeResolver.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeResolver=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      ThemeFns.setThemeResolver((ThemeResolver)cls.newInstance());
    }
  }
  Integer v=parseInteger(conf,""String_Node_Str"",ANY_VALUE);
  if (v != null)   config.setDesktopMaxInactiveInterval(v.intValue());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  String s=conf.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setRepeatUuid(!""String_Node_Str"".equals(s));
}"
16151,"/** 
 * It assumes exactly one of pagedef and richlet is not null. 
 */
private void execNewPage0(final Execution exec,final PageDefinition pagedef,final Richlet richlet,final Page page,final Writer out) throws IOException {
  final Desktop desktop=exec.getDesktop();
  final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
  final LanguageDefinition langdef=pagedef != null ? pagedef.getLanguageDefinition() : richlet != null ? richlet.getLanguageDefinition() : null;
  if (langdef != null)   desktop.setDeviceType(langdef.getDeviceType());
  final WebApp wapp=desktop.getWebApp();
  final Configuration config=wapp.getConfiguration();
  PerformanceMeter pfmeter=config.getPerformanceMeter();
  final long startTime=pfmeter != null ? System.currentTimeMillis() : 0;
  final Execution oldexec=Executions.getCurrent();
  final ExecutionCtrl oldexecCtrl=(ExecutionCtrl)oldexec;
  final UiVisualizer olduv=oldexecCtrl != null ? (UiVisualizer)oldexecCtrl.getVisualizer() : null;
  final UiVisualizer uv;
  if (olduv != null) {
    uv=doReactivate(exec,olduv);
    pfmeter=null;
  }
 else {
    uv=doActivate(exec,false,false,null,-1);
  }
  final ExecutionCtrl execCtrl=(ExecutionCtrl)exec;
  final Page old=execCtrl.getCurrentPage();
  final PageDefinition olddef=execCtrl.getCurrentPageDefinition();
  execCtrl.setCurrentPage(page);
  execCtrl.setCurrentPageDefinition(pagedef);
  final String pfReqId=pfmeter != null ? meterLoadStart(pfmeter,exec,startTime) : null;
  AbortingReason abrn=null;
  try {
    config.invokeExecutionInits(exec,oldexec);
    desktopCtrl.invokeExecutionInits(exec,oldexec);
    if (olduv != null) {
      final Component owner=olduv.getOwner();
      if (owner != null) {
        ((PageCtrl)page).setOwner(owner);
      }
    }
    if (pagedef != null) {
      ((PageCtrl)page).preInit();
      pagedef.preInit(page);
      final Initiators inits=Initiators.doInit(pagedef,page,config.getInitiators());
      try {
        pagedef.init(page,!uv.isEverAsyncUpdate() && !uv.isAborting());
        final Component[] comps;
        final String uri=pagedef.getForwardURI(page);
        if (uri != null) {
          comps=new Component[0];
          exec.forward(uri);
        }
 else {
          comps=uv.isAborting() || exec.isVoided() ? new Component[0] : execCreate(new CreateInfo(((WebAppCtrl)wapp).getUiFactory(),exec,page,config.getComposer(page)),pagedef,null,null);
        }
        inits.doAfterCompose(page,comps);
        afterCreate(exec,comps);
      }
 catch (      Throwable ex) {
        if (!inits.doCatch(ex))         throw UiException.Aide.wrap(ex);
      }
 finally {
        inits.doFinally();
      }
    }
 else {
      ((PageCtrl)page).preInit();
      final Initiators inits=Initiators.doInit(null,page,config.getInitiators());
      try {
        ((PageCtrl)page).init(new PageConfig(){
          public String getId(){
            return null;
          }
          public String getUuid(){
            return null;
          }
          public String getTitle(){
            return null;
          }
          public String getStyle(){
            return null;
          }
          public String getViewport(){
            return ""String_Node_Str"";
          }
          public String getBeforeHeadTags(){
            return ""String_Node_Str"";
          }
          public String getAfterHeadTags(){
            return ""String_Node_Str"";
          }
          public Collection<Object[]> getResponseHeaders(){
            return Collections.emptyList();
          }
        }
);
        final Composer composer=config.getComposer(page);
        try {
          richlet.service(page);
          for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling()) {
            doAfterCompose(composer,root);
            afterCreate(exec,new Component[]{root});
          }
        }
 catch (        Throwable t) {
          if (composer instanceof ComposerExt)           if (((ComposerExt)composer).doCatch(t))           t=null;
          if (t != null)           throw t;
        }
 finally {
          if (composer instanceof ComposerExt)           ((ComposerExt)composer).doFinally();
        }
      }
 catch (      Throwable ex) {
        if (!inits.doCatch(ex))         throw UiException.Aide.wrap(ex);
      }
 finally {
        inits.doFinally();
      }
    }
    if (exec.isVoided())     return;
    final List<Throwable> errs=new LinkedList<Throwable>();
    Event event=nextEvent(uv);
    do {
      for (; event != null; event=nextEvent(uv)) {
        try {
          process(desktop,event);
        }
 catch (        Throwable ex) {
          handleError(ex,uv,errs);
        }
      }
      resumeAll(desktop,uv,null);
    }
 while ((event=nextEvent(uv)) != null);
    abrn=uv.getAbortingReason();
    if (abrn != null)     abrn.execute();
    List<AuResponse> responses=getResponses(exec,uv,errs,false);
    if (olduv != null && olduv.addToFirstAsyncUpdate(responses))     responses=null;
 else     execCtrl.setResponses(responses);
    ((PageCtrl)page).redraw(out);
    afterRenderNewPage(page);
    desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
    config.invokeExecutionCleanups(exec,oldexec,errs);
  }
 catch (  Throwable ex) {
    final List<Throwable> errs=new LinkedList<Throwable>();
    errs.add(ex);
    desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
    config.invokeExecutionCleanups(exec,oldexec,errs);
    if (!errs.isEmpty()) {
      ex=errs.get(0);
      if (ex instanceof IOException)       throw (IOException)ex;
      throw UiException.Aide.wrap(ex);
    }
  }
 finally {
    if (abrn != null) {
      try {
        abrn.finish();
      }
 catch (      Throwable t) {
        log.warning(t);
      }
    }
    execCtrl.setCurrentPage(old);
    execCtrl.setCurrentPageDefinition(olddef);
    if (olduv != null)     doDereactivate(exec,olduv);
 else     doDeactivate(exec);
    if (pfmeter != null)     meterLoadServerComplete(pfmeter,pfReqId,exec);
  }
}","/** 
 * It assumes exactly one of pagedef and richlet is not null. 
 */
private void execNewPage0(final Execution exec,final PageDefinition pagedef,final Richlet richlet,final Page page,final Writer out) throws IOException {
  final Desktop desktop=exec.getDesktop();
  final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
  final LanguageDefinition langdef=pagedef != null ? pagedef.getLanguageDefinition() : richlet != null ? richlet.getLanguageDefinition() : null;
  if (langdef != null)   desktop.setDeviceType(langdef.getDeviceType());
  final WebApp wapp=desktop.getWebApp();
  final Configuration config=wapp.getConfiguration();
  PerformanceMeter pfmeter=config.getPerformanceMeter();
  final long startTime=pfmeter != null ? System.currentTimeMillis() : 0;
  final Execution oldexec=Executions.getCurrent();
  final ExecutionCtrl oldexecCtrl=(ExecutionCtrl)oldexec;
  final UiVisualizer olduv=oldexecCtrl != null ? (UiVisualizer)oldexecCtrl.getVisualizer() : null;
  final UiVisualizer uv;
  if (olduv != null) {
    uv=doReactivate(exec,olduv);
    pfmeter=null;
  }
 else {
    uv=doActivate(exec,false,false,null,-1);
  }
  final ExecutionCtrl execCtrl=(ExecutionCtrl)exec;
  final Page old=execCtrl.getCurrentPage();
  final PageDefinition olddef=execCtrl.getCurrentPageDefinition();
  execCtrl.setCurrentPage(page);
  execCtrl.setCurrentPageDefinition(pagedef);
  final String pfReqId=pfmeter != null ? meterLoadStart(pfmeter,exec,startTime) : null;
  AbortingReason abrn=null;
  try {
    config.invokeExecutionInits(exec,oldexec);
    desktopCtrl.invokeExecutionInits(exec,oldexec);
    if (olduv != null) {
      final Component owner=olduv.getOwner();
      if (owner != null) {
        ((PageCtrl)page).setOwner(owner);
      }
    }
    if (pagedef != null) {
      ((PageCtrl)page).preInit();
      pagedef.preInit(page);
      final Initiators inits=Initiators.doInit(pagedef,page,config.getInitiators());
      try {
        pagedef.init(page,!uv.isEverAsyncUpdate() && !uv.isAborting());
        final Component[] comps;
        final String uri=pagedef.getForwardURI(page);
        if (uri != null) {
          comps=new Component[0];
          try {
            exec.forward(uri);
          }
  finally {
            final List<Throwable> errs=new LinkedList<Throwable>();
            desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
            config.invokeExecutionCleanups(exec,oldexec,errs);
          }
        }
 else {
          comps=uv.isAborting() || exec.isVoided() ? new Component[0] : execCreate(new CreateInfo(((WebAppCtrl)wapp).getUiFactory(),exec,page,config.getComposer(page)),pagedef,null,null);
        }
        inits.doAfterCompose(page,comps);
        afterCreate(exec,comps);
      }
 catch (      Throwable ex) {
        if (!inits.doCatch(ex))         throw UiException.Aide.wrap(ex);
      }
 finally {
        inits.doFinally();
      }
    }
 else {
      ((PageCtrl)page).preInit();
      final Initiators inits=Initiators.doInit(null,page,config.getInitiators());
      try {
        ((PageCtrl)page).init(new PageConfig(){
          public String getId(){
            return null;
          }
          public String getUuid(){
            return null;
          }
          public String getTitle(){
            return null;
          }
          public String getStyle(){
            return null;
          }
          public String getViewport(){
            return ""String_Node_Str"";
          }
          public String getBeforeHeadTags(){
            return ""String_Node_Str"";
          }
          public String getAfterHeadTags(){
            return ""String_Node_Str"";
          }
          public Collection<Object[]> getResponseHeaders(){
            return Collections.emptyList();
          }
        }
);
        final Composer composer=config.getComposer(page);
        try {
          richlet.service(page);
          for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling()) {
            doAfterCompose(composer,root);
            afterCreate(exec,new Component[]{root});
          }
        }
 catch (        Throwable t) {
          if (composer instanceof ComposerExt)           if (((ComposerExt)composer).doCatch(t))           t=null;
          if (t != null)           throw t;
        }
 finally {
          if (composer instanceof ComposerExt)           ((ComposerExt)composer).doFinally();
        }
      }
 catch (      Throwable ex) {
        if (!inits.doCatch(ex))         throw UiException.Aide.wrap(ex);
      }
 finally {
        inits.doFinally();
      }
    }
    if (exec.isVoided())     return;
    final List<Throwable> errs=new LinkedList<Throwable>();
    Event event=nextEvent(uv);
    do {
      for (; event != null; event=nextEvent(uv)) {
        try {
          process(desktop,event);
        }
 catch (        Throwable ex) {
          handleError(ex,uv,errs);
        }
      }
      resumeAll(desktop,uv,null);
    }
 while ((event=nextEvent(uv)) != null);
    abrn=uv.getAbortingReason();
    if (abrn != null)     abrn.execute();
    List<AuResponse> responses=getResponses(exec,uv,errs,false);
    if (olduv != null && olduv.addToFirstAsyncUpdate(responses))     responses=null;
 else     execCtrl.setResponses(responses);
    ((PageCtrl)page).redraw(out);
    afterRenderNewPage(page);
    desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
    config.invokeExecutionCleanups(exec,oldexec,errs);
  }
 catch (  Throwable ex) {
    final List<Throwable> errs=new LinkedList<Throwable>();
    errs.add(ex);
    desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
    config.invokeExecutionCleanups(exec,oldexec,errs);
    if (!errs.isEmpty()) {
      ex=errs.get(0);
      if (ex instanceof IOException)       throw (IOException)ex;
      throw UiException.Aide.wrap(ex);
    }
  }
 finally {
    if (abrn != null) {
      try {
        abrn.finish();
      }
 catch (      Throwable t) {
        log.warning(t);
      }
    }
    execCtrl.setCurrentPage(old);
    execCtrl.setCurrentPageDefinition(olddef);
    if (olduv != null)     doDereactivate(exec,olduv);
 else     doDeactivate(exec);
    if (pfmeter != null)     meterLoadServerComplete(pfmeter,pfReqId,exec);
  }
}"
16152,"/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
  if (cls != null) {
    if (log.debugable())     log.debug(""String_Node_Str"" + cls.getName());
    config.setThemeProvider((ThemeProvider)cls.newInstance());
  }
  Integer v=parseInteger(conf,""String_Node_Str"",ANY_VALUE);
  if (v != null)   config.setDesktopMaxInactiveInterval(v.intValue());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  String s=conf.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setRepeatUuid(!""String_Node_Str"".equals(s));
}","/** 
 * Parses desktop-config. 
 */
private static void parseDesktopConfig(Configuration config,Element conf) throws Exception {
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addThemeURI(uri);
  }
  for (Iterator it=conf.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String uri=el.getText(true);
    if (uri.length() != 0)     config.addDisabledThemeURI(uri);
  }
  Class cls=null;
  if (!_customThemeProvider) {
    cls=parseClass(conf,""String_Node_Str"",ThemeProvider.class);
    if (cls != null) {
      if (!cls.getName().startsWith(""String_Node_Str""))       _customThemeProvider=true;
      if (log.debugable())       log.debug(""String_Node_Str"" + cls.getName());
      config.setThemeProvider((ThemeProvider)cls.newInstance());
    }
  }
  Integer v=parseInteger(conf,""String_Node_Str"",ANY_VALUE);
  if (v != null)   config.setDesktopMaxInactiveInterval(v.intValue());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  v=parseInteger(conf,""String_Node_Str"",POSITIVE_ONLY);
  if (v != null)   Library.setProperty(""String_Node_Str"",v.toString());
  String s=conf.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setRepeatUuid(!""String_Node_Str"".equals(s));
}"
16153,"private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
  if (!BinderUtil.isHandling(comp)) {
    BinderUtil.markHandling(comp,_binder);
  }
}","private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
}"
16154,"public Interpreter getInterpreter(String zslang){
  zslang=(zslang != null ? zslang : _zslang).toLowerCase();
  Interpreter ip=_ips.get(zslang);
  if (ip == null) {
    if (_desktop != null && !_desktop.getWebApp().getConfiguration().isZScriptEnabled())     throw new UiException(""String_Node_Str"");
    ip=Interpreters.newInterpreter(zslang,this);
    _ips.put(zslang,ip);
    String script=_langdef.getInitScript(zslang);
    if (script != null) {
      if (!_impclss.isEmpty() && ""String_Node_Str"".equals(zslang)) {
        StringBuilder sb=new StringBuilder();
        for (        String name : _impclss)         sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
        script+=sb.toString();
        sb=null;
      }
      ip.interpret(script,this);
    }
  }
  evalDeferredZScripts(ip,zslang);
  return ip;
}","public Interpreter getInterpreter(String zslang){
  zslang=(zslang != null ? zslang : _zslang).toLowerCase();
  Interpreter ip=_ips.get(zslang);
  if (ip == null) {
    if (_desktop != null && !_desktop.getWebApp().getConfiguration().isZScriptEnabled())     throw new UiException(""String_Node_Str"");
    ip=Interpreters.newInterpreter(zslang,this);
    _ips.put(zslang,ip);
    String script=_langdef.getInitScript(zslang);
    if (script != null) {
      if (_impclss != null && !_impclss.isEmpty() && ""String_Node_Str"".equals(zslang)) {
        StringBuilder sb=new StringBuilder();
        for (        String name : _impclss)         sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
        script+=sb.toString();
        sb=null;
      }
      ip.interpret(script,this);
    }
  }
  evalDeferredZScripts(ip,zslang);
  return ip;
}"
16155,"private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
  if (!BinderUtil.isHandling(comp)) {
    BinderUtil.markHandling(comp,_binder);
  }
}","private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
}"
16156,"public void doAfterCompose(T comp) throws Exception {
  _binder.initAnnotatedBindings();
  new AbstractAnnotatedMethodInvoker<AfterCompose>(AfterCompose.class){
    protected boolean shouldLookupSuperclass(    AfterCompose annotation){
      return annotation.superclass();
    }
  }
.invokeMethod(_binder,getViewModelInitArgs(evalx,comp));
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}","public void doAfterCompose(T comp) throws Exception {
  _binder.initAnnotatedBindings();
  new AbstractAnnotatedMethodInvoker<AfterCompose>(AfterCompose.class,_afterComposeMethodCache){
    protected boolean shouldLookupSuperclass(    AfterCompose annotation){
      return annotation.superclass();
    }
  }
.invokeMethod(_binder,getViewModelInitArgs(evalx,comp));
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}"
16157,"public AbstractAnnotatedMethodInvoker(Class<T> annoClass){
  this.annoClass=annoClass;
}","public AbstractAnnotatedMethodInvoker(Class<T> annoClass,Map<Class<?>,List<Method>> annoMethodCache){
  this.annoClass=annoClass;
  this.annoMethodCache=annoMethodCache;
}"
16158,"public void invokeMethod(Binder binder,Map<String,Object> bindingArgs){
  Component rootComp=binder.getView();
  Object viewModel=rootComp.getAttribute(VM);
  final Class<?> vmClz=viewModel.getClass();
  List<Method> methods=getAnnotateMethods(annoClass,vmClz);
  if (methods.size() == 0)   return;
  if (bindingArgs != null) {
    bindingArgs=BindEvaluatorXUtil.evalArgs(binder.getEvaluatorX(),rootComp,bindingArgs);
  }
  for (  Method m : methods) {
    final BindContext ctx=BindContextUtil.newBindContext(binder,null,false,null,rootComp,null);
    try {
      ParamCall parCall=createParamCall(ctx,binder);
      if (bindingArgs != null) {
        parCall.setBindingArgs(bindingArgs);
      }
      parCall.call(viewModel,m);
    }
 catch (    Exception e) {
      throw new UiException(e.getMessage(),e);
    }
  }
}","public void invokeMethod(Binder binder,Map<String,Object> bindingArgs){
  Component rootComp=binder.getView();
  Object viewModel=rootComp.getAttribute(VM);
  final Class<?> vmClz=viewModel.getClass();
  List<Method> methods=getAnnotateMethods(annoClass,vmClz);
  if (methods.size() == 0)   return;
  if (bindingArgs != null) {
    bindingArgs=BindEvaluatorXUtil.evalArgs(binder.getEvaluatorX(),rootComp,bindingArgs);
  }
  for (  Method m : methods) {
    final BindContext ctx=BindContextUtil.newBindContext(binder,null,false,null,rootComp,null);
    try {
      ParamCall parCall=createParamCall(ctx,binder);
      if (bindingArgs != null) {
        parCall.setBindingArgs(bindingArgs);
      }
      parCall.call(viewModel,m);
    }
 catch (    Exception e) {
synchronized (annoMethodCache) {
        annoMethodCache.remove(vmClz);
      }
      throw new UiException(e.getMessage(),e);
    }
  }
}"
16159,"private List<Method> getAnnotateMethods(Class<T> annotationClass,Class<?> vmClass){
  List<Method> methods=new ArrayList<Method>();
  Class<?> curr=vmClass;
  String sign=null;
  Set<String> signs=new HashSet<String>();
  while (curr != null && !curr.equals(Object.class)) {
    Method currm=null;
    T annotation=curr.getAnnotation(annotationClass);
    for (    Method m : curr.getDeclaredMethods()) {
      final T i=m.getAnnotation(annotationClass);
      if (i == null)       continue;
      if (annotation != null) {
        throw new UiException(""String_Node_Str"" + annotationClass.getSimpleName() + ""String_Node_Str""+ curr);
      }
      annotation=i;
      currm=m;
    }
    if (currm != null) {
      sign=MiscUtil.toSimpleMethodSignature(currm);
      if (signs.contains(sign)) {
        _log.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",annotationClass.getSimpleName(),sign,vmClass);
      }
 else {
        signs.add(sign);
      }
      methods.add(0,currm);
    }
    curr=(annotation != null && shouldLookupSuperclass(annotation)) ? curr.getSuperclass() : null;
  }
  return methods;
}","private List<Method> getAnnotateMethods(Class<T> annotationClass,Class<?> vmClass){
  List<Method> methods=null;
synchronized (annoMethodCache) {
    methods=annoMethodCache.get(vmClass);
    if (methods != null)     return methods;
    methods=new ArrayList<Method>();
    Class<?> curr=vmClass;
    String sign=null;
    Set<String> signs=new HashSet<String>();
    while (curr != null && !curr.equals(Object.class)) {
      Method currm=null;
      T annotation=curr.getAnnotation(annotationClass);
      for (      Method m : curr.getDeclaredMethods()) {
        final T i=m.getAnnotation(annotationClass);
        if (i == null)         continue;
        if (annotation != null) {
          throw new UiException(""String_Node_Str"" + annotationClass.getSimpleName() + ""String_Node_Str""+ curr);
        }
        annotation=i;
        currm=m;
      }
      if (currm != null) {
        sign=MiscUtil.toSimpleMethodSignature(currm);
        if (signs.contains(sign)) {
          _log.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",annotationClass.getSimpleName(),sign,vmClass);
        }
 else {
          signs.add(sign);
        }
        methods.add(0,currm);
      }
      curr=(annotation != null && shouldLookupSuperclass(annotation)) ? curr.getSuperclass() : null;
    }
    methods=Collections.unmodifiableList(methods);
    annoMethodCache.put(vmClass,methods);
  }
  return methods;
}"
16160,"private void doGlobalCommandExecute(Component comp,String command,Map<String,Object> commandArgs,BindContext ctx,Set<Property> notifys){
  try {
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",comp,command);
    }
    doPrePhase(Phase.EXECUTE,ctx);
    final Object viewModel=getViewModel();
    Method method=getGlobalCommandMethod(viewModel.getClass(),command,_globalCommandMethodInfoProvider);
    if (method != null) {
      ParamCall parCall=createParamCall(ctx);
      if (commandArgs != null) {
        parCall.setBindingArgs(commandArgs);
      }
      parCall.call(viewModel,method);
      notifys.addAll(BindELContext.getNotifys(method,viewModel,(String)null,(Object)null,ctx));
    }
 else {
      if (_log.debugable()) {
        _log.debug(""String_Node_Str"",viewModel);
      }
    }
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",notifys);
    }
  }
  finally {
    doPostPhase(Phase.EXECUTE,ctx);
  }
}","private void doGlobalCommandExecute(Component comp,String command,Map<String,Object> commandArgs,BindContext ctx,Set<Property> notifys){
  try {
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",comp,command);
    }
    doPrePhase(Phase.EXECUTE,ctx);
    final Object viewModel=getViewModel();
    Method method=getCommandMethod(viewModel.getClass(),command,_globalCommandMethodInfoProvider,_globalCommandMethodCache);
    if (method != null) {
      ParamCall parCall=createParamCall(ctx);
      if (commandArgs != null) {
        parCall.setBindingArgs(commandArgs);
      }
      parCall.call(viewModel,method);
      notifys.addAll(BindELContext.getNotifys(method,viewModel,(String)null,(Object)null,ctx));
    }
 else {
      if (_log.debugable()) {
        _log.debug(""String_Node_Str"",viewModel);
      }
    }
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",notifys);
    }
  }
  finally {
    doPostPhase(Phase.EXECUTE,ctx);
  }
}"
16161,"private void doExecute(Component comp,String command,Map<String,Object> commandArgs,BindContext ctx,Set<Property> notifys){
  try {
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",comp,command,notifys);
    }
    doPrePhase(Phase.EXECUTE,ctx);
    final Object viewModel=getViewModel();
    Method method=getCommandMethod(viewModel.getClass(),command,_commandMethodInfoProvider);
    if (method != null) {
      ParamCall parCall=createParamCall(ctx);
      if (commandArgs != null) {
        parCall.setBindingArgs(commandArgs);
      }
      parCall.call(viewModel,method);
      notifys.addAll(BindELContext.getNotifys(method,viewModel,(String)null,(Object)null,ctx));
    }
 else {
      throw new UiException(""String_Node_Str"" + command + ""String_Node_Str""+ viewModel);
    }
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",notifys);
    }
  }
  finally {
    doPostPhase(Phase.EXECUTE,ctx);
  }
}","private void doExecute(Component comp,String command,Map<String,Object> commandArgs,BindContext ctx,Set<Property> notifys){
  try {
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",comp,command,notifys);
    }
    doPrePhase(Phase.EXECUTE,ctx);
    final Object viewModel=getViewModel();
    Method method=getCommandMethod(viewModel.getClass(),command,_commandMethodInfoProvider,_commandMethodCache);
    if (method != null) {
      ParamCall parCall=createParamCall(ctx);
      if (commandArgs != null) {
        parCall.setBindingArgs(commandArgs);
      }
      parCall.call(viewModel,method);
      notifys.addAll(BindELContext.getNotifys(method,viewModel,(String)null,(Object)null,ctx));
    }
 else {
      throw new UiException(""String_Node_Str"" + command + ""String_Node_Str""+ viewModel);
    }
    if (_log.debugable()) {
      _log.debug(""String_Node_Str"",notifys);
    }
  }
  finally {
    doPostPhase(Phase.EXECUTE,ctx);
  }
}"
16162,"private Method getCommandMethod(Class<?> clz,String command,CommandMethodInfoProvider cmdInfo){
  if (_commandMethods == null) {
    _commandMethods=new HashMap<String,CachedItem<Method>>(20);
    scan0(clz,command,cmdInfo,_commandMethods);
  }
  return getMethod0(command,_commandMethods);
}","private Method getCommandMethod(Class<?> clz,String command,CommandMethodInfoProvider cmdInfo,Map<Class<?>,Map<String,CachedItem<Method>>> cache){
  Map<String,CachedItem<Method>> methods=cache.get(clz);
synchronized (cache) {
    methods=cache.get(clz);
    if (methods == null) {
      methods=new HashMap<String,CachedItem<Method>>();
      cache.put(clz,methods);
    }
  }
  CachedItem<Method> method=null;
synchronized (methods) {
    method=methods.get(command);
    if (method != null) {
      return method.value;
    }
 else     if (methods.get(COMMAND_METHOD_MAP_INIT) != null) {
      method=methods.get(COMMAND_METHOD_DEFAULT);
      if (method != null) {
        return method.value;
      }
      return null;
    }
    methods.clear();
    for (    Method m : clz.getMethods()) {
      if (cmdInfo.isDefaultMethod(m)) {
        if (methods.get(COMMAND_METHOD_DEFAULT) != null) {
          throw new UiException(""String_Node_Str"" + cmdInfo.getDefaultAnnotationName() + ""String_Node_Str""+ clz+ ""String_Node_Str""+ methods.get(COMMAND_METHOD_DEFAULT).value+ ""String_Node_Str""+ m);
        }
        methods.put(COMMAND_METHOD_DEFAULT,new CachedItem<Method>(m));
      }
      String[] vals=cmdInfo.getCommandName(m);
      if (vals == null)       continue;
      if (vals.length == 0) {
        vals=new String[]{m.getName()};
      }
      for (      String val : vals) {
        val=val.trim();
        if (methods.get(val) != null) {
          throw new UiException(""String_Node_Str"" + cmdInfo.getAnnotationName() + ""String_Node_Str""+ val+ ""String_Node_Str""+ clz+ ""String_Node_Str""+ methods.get(val).value+ ""String_Node_Str""+ m);
        }
        methods.put(val,new CachedItem<Method>(m));
      }
    }
    methods.put(COMMAND_METHOD_MAP_INIT,NULL_METHOD);
  }
  method=methods.get(command);
  if (method != null) {
    return method.value;
  }
  method=methods.get(COMMAND_METHOD_DEFAULT);
  return method == null ? null : method.value;
}"
16163,"/** 
 * Adds an imported class Like Java, it is used to import a class or a package of classes, so that it simplifies the use of the apply attribute, the init directive and others.
 * @param clsptn the class's full-qualitified name, e.g., <code>com.foo.FooComposer</code>,a wildcard representing all classes of the give pacakge, e.g., <code>com.foo.*</code>.
 * @since 6.0.0
 */
public void addImportedClass(String clsptn) throws ClassNotFoundException {
  _clsresolver.addImportedClass(clsptn);
}","/** 
 * Adds an imported class Like Java, it is used to import a class or a package of classes, so that it simplifies the use of the apply attribute, the init directive and others.
 * @param clsptn the class's full-qualitified name, e.g., <code>com.foo.FooComposer</code>,a wildcard representing all classes of the give pacakge, e.g., <code>com.foo.*</code>.
 * @since 6.0.0
 */
public void addImportedClass(String clsptn) throws ClassNotFoundException {
  _clsresolver.addImportedClass(clsptn);
  if (""String_Node_Str"".equals(_zslang))   _langdef.addInitScript(_zslang,""String_Node_Str"" + clsptn);
}"
16164,"/** 
 * Loads the content of a javascript file as a String.
 * @since 5.0.11
 */
public static String loadJavaScript(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=exec.getDesktop().getWebApp().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}","/** 
 * Loads the content of a javascript file as a String.
 * @since 5.0.11
 */
public static String loadJavaScript(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=WebApps.getCurrent().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}"
16165,"/** 
 * Generates Locale-dependent strings in JavaScript syntax.
 */
public final static String outLocaleJavaScript(){
  final Locale locale=Locales.getCurrent();
  return outNumberJavaScript(locale) + outDateJavaScript(locale);
}","/** 
 * Generates Locale-dependent strings in JavaScript syntax.
 * @since 6.5.1
 */
public static final String outLocaleJavaScript(ServletRequest request,ServletResponse response) throws IOException {
  final StringBuffer result=new StringBuffer(4096);
  final WebApp webApp=WebApps.getCurrent();
  final Execution exec=new FakeExecution(webApp.getServletContext(),request,response,null,null);
  result.append(Devices.loadJavaScript(exec,""String_Node_Str""));
  result.append(Wpds.outLocaleJavaScript());
  for (  LanguageDefinition langdef : LanguageDefinition.getByDeviceType(""String_Node_Str""))   for (  MessageLoader loader : langdef.getMessageLoaders())   loader.load(result,exec);
  return result.toString();
}"
16166,"/** 
 * Load the message to output StringBuffer
 * @param out StringBuffer to output
 * @param exec current Execution
 */
public void load(StringBuffer out,Execution exec) throws IOException ;","/** 
 * Load the message to output StringBuffer. <p>There are two timing the ZK system will scan the <code>MessageLoader</code> setting and call this mehtod of corresponding instance. <ol> <li>  {@link Wpds#outLocaleJavaScript(javax.servlet.ServletRequest,javax.servlet.ServletResponse)} (define in zul/lang/zk.wpd)</li><li> {@link Clients#reloadMessages(java.util.Locale)}</li> </ol> At first timing, execution will not have Desktop and Page instance,  so programmer must notice that many Execution's method can't use. </p>
 * @param out StringBuffer to output
 * @param exec current Execution
 */
public void load(StringBuffer out,Execution exec) throws IOException ;"
16167,"/** 
 * Ses the page without fixing IdSpace
 */
private void setPage0(Page page){
  if (page == _page)   return;
  final boolean bRoot=_parent == null;
  boolean resetUuid=false;
  if (_page != null) {
    if (bRoot)     ((AbstractPage)_page).removeRoot(this);
    if (page == null && ((DesktopCtrl)_page.getDesktop()).removeComponent(this,true))     resetUuid=true;
  }
  final Page oldpage=_page;
  _page=page;
  if (_page != null) {
    if (bRoot)     ((AbstractPage)_page).addRoot(this);
    final Desktop desktop=_page.getDesktop();
    if (oldpage == null) {
      if (_uuid == null || _uuid.startsWith(ANONYMOUS_ID) || desktop.getComponentByUuidIfAny(_uuid) != null)       _uuid=nextUuid(desktop);
      ((DesktopCtrl)desktop).addComponent(this);
    }
    onPageAttached(_page,oldpage);
  }
 else {
    onPageDetached(oldpage);
  }
  for (AbstractComponent p=(AbstractComponent)getFirstChild(); p != null; p=p._next)   p.setPage0(page);
  if (resetUuid)   _uuid=null;
}","/** 
 * Ses the page without fixing IdSpace
 */
private void setPage0(Page page){
  if (page == _page)   return;
  final boolean bRoot=_parent == null;
  boolean resetUuid=false;
  if (_page != null) {
    if (bRoot)     ((AbstractPage)_page).removeRoot(this);
    if (page == null && ((DesktopCtrl)_page.getDesktop()).removeComponent(this,true) && !(this instanceof StubComponent))     resetUuid=true;
  }
  final Page oldpage=_page;
  _page=page;
  if (_page != null) {
    if (bRoot)     ((AbstractPage)_page).addRoot(this);
    final Desktop desktop=_page.getDesktop();
    if (oldpage == null) {
      if (_uuid == null || _uuid.startsWith(ANONYMOUS_ID) || desktop.getComponentByUuidIfAny(_uuid) != null)       _uuid=nextUuid(desktop);
      ((DesktopCtrl)desktop).addComponent(this);
    }
    onPageAttached(_page,oldpage);
  }
 else {
    onPageDetached(oldpage);
  }
  for (AbstractComponent p=(AbstractComponent)getFirstChild(); p != null; p=p._next)   p.setPage0(page);
  if (resetUuid)   _uuid=null;
}"
16168,"public boolean removeComponent(Component comp,boolean recycleAllowed){
  final String uuid=comp.getUuid();
  if (_comps.remove(uuid) == null || !recycleAllowed || recycleUuidDisabled())   return false;
  if (comp instanceof RawId && (!ComponentsCtrl.isAutoUuid(uuid) || ((WebAppCtrl)_wapp).getIdGenerator() != null))   return false;
  final int execId=getExecId();
  RecycleInfo ri=null;
  if (_uuidRecycle == null) {
    _uuidRecycle=new LinkedList<RecycleInfo>();
  }
 else {
    for (    RecycleInfo r : _uuidRecycle)     if (r.execId == execId) {
      ri=r;
      break;
    }
  }
  if (ri == null)   _uuidRecycle.add(ri=new RecycleInfo(execId));
  ri.uuids.add(uuid);
  return true;
}","public boolean removeComponent(Component comp,boolean recycleAllowed){
  final String uuid=comp.getUuid();
  if (_comps.remove(uuid) == null || !recycleAllowed || recycleUuidDisabled() || (comp instanceof StubComponent))   return false;
  if (comp instanceof RawId && (!ComponentsCtrl.isAutoUuid(uuid) || ((WebAppCtrl)_wapp).getIdGenerator() != null))   return false;
  final int execId=getExecId();
  RecycleInfo ri=null;
  if (_uuidRecycle == null) {
    _uuidRecycle=new LinkedList<RecycleInfo>();
  }
 else {
    for (    RecycleInfo r : _uuidRecycle)     if (r.execId == execId) {
      ri=r;
      break;
    }
  }
  if (ri == null)   _uuidRecycle.add(ri=new RecycleInfo(execId));
  ri.uuids.add(uuid);
  return true;
}"
16169,"/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by aynchrous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,sw);
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}","/** 
 * Returns the HTML content representing a page.
 * @param au whether it is caused by asynchronous update
 * @param exec the execution (never null)
 */
public static final void outPageContent(Execution exec,Page page,Writer out,boolean au) throws IOException {
  final Desktop desktop=page.getDesktop();
  final PageCtrl pageCtrl=(PageCtrl)page;
  final Component owner=pageCtrl.getOwner();
  boolean contained=owner == null && exec.isIncluded();
  String style=page.getStyle();
  if (style == null || style.length() == 0) {
    style=null;
    String wd=null, hgh=null;
    if (owner instanceof HtmlBasedComponent) {
      final HtmlBasedComponent hbc=(HtmlBasedComponent)owner;
      wd=hbc.getWidth();
      hgh=hbc.getHeight();
    }
    if (wd != null || hgh != null || contained) {
      final StringBuffer sb=new StringBuffer(32);
      HTMLs.appendStyle(sb,""String_Node_Str"",wd != null ? wd : ""String_Node_Str"");
      HTMLs.appendStyle(sb,""String_Node_Str"",hgh != null ? hgh : contained ? null : ""String_Node_Str"");
      style=sb.toString();
    }
  }
  RenderContext rc=null, old=null;
  final boolean aupg=exec.isAsyncUpdate(page);
  final boolean includedAndPart=owner != null && !aupg;
  final boolean divRequired=!au || includedAndPart;
  final boolean standalone=!au && owner == null;
  if (standalone) {
    rc=new RenderContext(out,new StringWriter(),desktop.getWebApp().getConfiguration().isCrawlable(),false);
    setRenderContext(exec,rc);
  }
 else   if (owner != null) {
    old=getRenderContext(exec);
    final boolean crawlable=old != null && old.temp != null && desktop.getWebApp().getConfiguration().isCrawlable();
    setRenderContext(exec,crawlable ? new RenderContext(old.temp,null,true,true) : null);
  }
  if (divRequired) {
    outDivTemplateBegin(out,page.getUuid());
  }
  if (standalone) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    outDivTemplateEnd(page,out);
  }
  if (includedAndPart) {
    out=new StringWriter();
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
  exec.setAttribute(ATTR_DESKTOP_JS_GENED,Boolean.TRUE);
  final int order=ComponentRedraws.beforeRedraw(false);
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(outSpecialJS(desktop));
        out.write(divRequired ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    out.write(""String_Node_Str"");
    out.write(page.getUuid());
    out.write(""String_Node_Str"");
    final StringBuffer props=new StringBuffer(128);
    final String pgid=page.getId();
    if (pgid.length() > 0)     appendProp(props,""String_Node_Str"",pgid);
    if (owner != null) {
      appendProp(props,""String_Node_Str"",owner.getUuid());
    }
 else {
      appendProp(props,""String_Node_Str"",desktop.getId());
      appendProp(props,""String_Node_Str"",getContextURI(exec));
      appendProp(props,""String_Node_Str"",desktop.getUpdateURI(null));
      appendProp(props,""String_Node_Str"",desktop.getRequestPath());
    }
    final String pageWgtCls=pageCtrl.getWidgetClass();
    if (pageWgtCls != null)     appendProp(props,""String_Node_Str"",pageWgtCls);
    if (style != null)     appendProp(props,""String_Node_Str"",style);
    if (!isClientROD(page))     appendProp(props,""String_Node_Str"",Boolean.FALSE);
    if (contained)     appendProp(props,""String_Node_Str"",Boolean.TRUE);
    out.write(props.toString());
    out.write(""String_Node_Str"");
    for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())     ((ComponentCtrl)root).redraw(out);
    out.write(""String_Node_Str"");
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    outEndJavaScriptFunc(exec,out,extra,aupg);
  }
  if (standalone) {
    setRenderContext(exec,null);
    StringBuffer sw=((StringWriter)out).getBuffer();
    out=rc.temp;
    if (divRequired)     outDivTemplateEnd(page,out);
    Files.write(out,((StringWriter)rc.perm).getBuffer());
    Files.write(out,sw);
  }
 else   if (owner != null) {
    setRenderContext(exec,old);
  }
  if (includedAndPart) {
    ((Includer)owner).setRenderingResult(((StringWriter)out).toString());
  }
 else   if (divRequired) {
    out.write(""String_Node_Str"");
  }
}"
16170,"private static void append(StringBuffer sb,JavaScript js){
  sb.append(""String_Node_Str"");
  if (js.getSrc() != null) {
    String url;
    try {
      url=ServletFns.encodeURL(js.getSrc());
    }
 catch (    javax.servlet.ServletException ex) {
      throw new UiException(ex);
    }
    sb.append(""String_Node_Str"").append(url).append('""');
    final String charset=js.getCharset();
    if (charset != null)     sb.append(""String_Node_Str"").append(charset).append('""');
    sb.append('>');
  }
 else {
    sb.append(""String_Node_Str"").append(js.getContent());
  }
  sb.append(""String_Node_Str"");
}","private static void append(StringBuffer sb,JavaScript js){
  sb.append(""String_Node_Str"");
  if (js.getSrc() != null) {
    String url;
    try {
      url=ServletFns.encodeURL(js.getSrc());
    }
 catch (    javax.servlet.ServletException ex) {
      throw new UiException(ex);
    }
    sb.append(""String_Node_Str"").append(url).append('""');
    final String charset=js.getCharset();
    if (charset != null)     sb.append(""String_Node_Str"").append(charset).append('""');
    sb.append('>');
  }
 else {
    sb.append(""String_Node_Str"").append(js.getContent()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
}"
16171,"private static final boolean load(String flnm){
  final InputStream strm=ContentTypes.class.getResourceAsStream(flnm);
  if (strm == null)   return false;
  try {
    final BufferedReader in=new BufferedReader(new InputStreamReader(strm));
    String line;
    while ((line=in.readLine()) != null) {
      final int j=line.indexOf('=');
      if (j < 0) {
        final int k=Strings.skipWhitespaces(line,0);
        if (k < line.length() && line.charAt(k) != '#')         log.warning(""String_Node_Str"" + line);
        continue;
      }
      final String format=line.substring(0,j).trim();
      final String ctype=line.substring(j + 1).trim();
      if (format.length() == 0 || ctype.length() == 0) {
        log.warning(""String_Node_Str"" + line);
        continue;
      }
      _fmt2ct.put(format,ctype);
      _ct2fmt.put(ctype,format);
    }
  }
 catch (  IOException ex) {
    log.warning(""String_Node_Str"" + flnm,ex);
  }
 finally {
    try {
      strm.close();
    }
 catch (    Throwable ex) {
    }
  }
  return true;
}","private static final boolean load(String flnm){
  final InputStream strm=ContentTypes.class.getResourceAsStream(flnm);
  if (strm == null)   return false;
  try {
    final BufferedReader in=new BufferedReader(new InputStreamReader(strm));
    String line;
    while ((line=in.readLine()) != null) {
      final int j=line.indexOf('=');
      if (j < 0) {
        final int k=Strings.skipWhitespaces(line,0);
        if (k < line.length() && line.charAt(k) != '#')         log.warning(""String_Node_Str"" + line);
        continue;
      }
      final String format=line.substring(0,j).trim();
      final String ctype=line.substring(j + 1).trim();
      if (format.length() == 0 || ctype.length() == 0) {
        log.warning(""String_Node_Str"" + line);
        continue;
      }
      _fmt2ct.put(format,ctype);
      _ct2fmt.put(ctype,format);
    }
    in.close();
  }
 catch (  IOException ex) {
    log.warning(""String_Node_Str"" + flnm,ex);
  }
 finally {
    try {
      strm.close();
    }
 catch (    Throwable ex) {
    }
  }
  return true;
}"
16172,"@Override public void init(Execution exec,Execution parent) throws Exception {
  Desktop desktop=exec.getDesktop();
  desktop.removeListener(this);
  _deferredActivator=null;
  BinderImpl.this.didActivate();
}","@Override public void init(Execution exec,Execution parent) throws Exception {
  Desktop desktop=exec.getDesktop();
  desktop.removeListener(_deferredActivator);
  BinderImpl.this.didActivate();
}"
16173,"@Override public void willPassivate(Component comp){
  if (_rootComp.equals(comp)) {
    _log.debug(""String_Node_Str"",comp);
    if (_deferredActivator != null) {
      comp.getDesktop().removeListener(_deferredActivator);
      _deferredActivator=null;
    }
    unsubscribeQueue(_quename,_quescope,_queueListener);
  }
}","@Override public void willPassivate(Component comp){
}"
16174,"@Override public void didActivate(Component comp){
  if (_rootComp.equals(comp)) {
    if (_deferredActivator == null) {
      subscribeQueue(_quename,_quescope,_queueListener);
      comp.getDesktop().addListener(_deferredActivator=new DeferredActivator());
    }
  }
}","@Override public void didActivate(Component comp){
  if (_rootComp.equals(comp)) {
    if (!isSubscribed(_quename,_quescope,_queueListener))     subscribeQueue(_quename,_quescope,_queueListener);
    if (_deferredActivator == null) {
      comp.getDesktop().addListener(_deferredActivator=new DeferredActivator());
    }
  }
}"
16175,"public void redraw(Writer out) throws java.io.IOException {
  final Execution exec=Executions.getCurrent();
  final boolean root=getParent() == null && (getPage().isComplete() || (exec != null && ""String_Node_Str"".equals(ExecutionsCtrl.getPageRedrawControl(exec))));
  if (exec == null || exec.isAsyncUpdate(null) || (!root && !HtmlPageRenders.isDirectContent(exec))) {
    super.redraw(out);
    return;
  }
  Writer oldout=null;
  if (exec != null && !HtmlPageRenders.isZkTagsGenerated(exec) && exec.getAttribute(ATTR_TOP_NATIVE) == null) {
    String tn;
    if (root || ""String_Node_Str"".equals(tn=_tag != null ? _tag.toLowerCase() : ""String_Node_Str"") || ""String_Node_Str"".equals(tn)|| ""String_Node_Str"".equals(tn)) {
      exec.setAttribute(ATTR_TOP_NATIVE,Boolean.TRUE);
      oldout=out;
      out=new StringWriter();
    }
  }
  out.write(getPrologHalf());
  Component child=getFirstChild();
  if (child == null) {
    if (root)     HtmlPageRenders.outStandalone(exec,null,out);
  }
 else {
    if (root)     HtmlPageRenders.setDirectContent(exec,true);
    do {
      Component next=child.getNextSibling();
      if (child instanceof Native || ((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
        ((ComponentCtrl)child).redraw(out);
      }
 else {
        HtmlPageRenders.setDirectContent(exec,false);
        HtmlPageRenders.outStandalone(exec,child,out);
        HtmlPageRenders.setDirectContent(exec,true);
      }
      child=next;
    }
 while (child != null);
  }
  out.write(getEpilogHalf());
  if (oldout != null) {
    exec.removeAttribute(ATTR_TOP_NATIVE);
    final StringBuffer sb=((StringWriter)out).getBuffer();
    if (!HtmlPageRenders.isZkTagsGenerated(exec)) {
      int jhead=-1, junav=-1, head=-1, heade=-1, html=-1;
      boolean unavailDone=false;
      for (int j=0, len=sb.length(); (j=sb.indexOf(""String_Node_Str"",j)) >= 0; ) {
        ++j;
        if (jhead < 0 && startsWith(sb,""String_Node_Str"",j)) {
          int l=Strings.indexOf(sb,'>',j) + 1;
          sb.delete(jhead=--j,l);
          len=sb.length();
        }
 else         if (head < 0 && startsWith(sb,""String_Node_Str"",j)) {
          head=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (html < 0 && startsWith(sb,""String_Node_Str"",j)) {
          html=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (junav < 0 && startsWith(sb,""String_Node_Str"",j)) {
          junav=Strings.indexOf(sb,'>',j) + 1;
          break;
        }
 else         if (sb.charAt(j) == '/' && startsWith(sb,""String_Node_Str"",++j)) {
          heade=j - 2;
        }
      }
      boolean disableUnavailable=false;
      if (jhead < 0 && ((jhead=heade) < 0) && ((jhead=head) < 0) && ((jhead=junav) < 0) && ((jhead=html) < 0)) {
        if (_tag != null) {
          final String tn=_tag.toLowerCase();
          if (""String_Node_Str"".equals(tn) || ""String_Node_Str"".equals(tn)) {
            l_loop:             for (int j=0, len=sb.length(); j < len; ++j) switch (sb.charAt(j)) {
case '>':
              disableUnavailable=true;
            jhead=j + 1;
case '=':
case '""':
          break l_loop;
      }
    }
  }
  if (jhead < 0)   jhead=0;
}
final String msg=HtmlPageRenders.outUnavailable(exec);
if (msg != null && !disableUnavailable) {
  if (junav < 0) {
    if (html >= 0)     junav=sb.lastIndexOf(""String_Node_Str"");
  }
  if (junav >= 0)   sb.insert(junav < jhead ? jhead : junav,msg);
 else   sb.append(msg);
}
final String zktags=HtmlPageRenders.outHeaderZkTags(exec,getPage());
if (zktags != null) sb.insert(jhead,zktags);
}
oldout.write(sb.toString());
}
}","public void redraw(Writer out) throws java.io.IOException {
  final Execution exec=Executions.getCurrent();
  final boolean root=getParent() == null && (getPage().isComplete() || (exec != null && ""String_Node_Str"".equals(ExecutionsCtrl.getPageRedrawControl(exec))));
  if (exec == null || exec.isAsyncUpdate(null) || (!root && !HtmlPageRenders.isDirectContent(exec))) {
    super.redraw(out);
    return;
  }
  Writer oldout=null;
  if (exec != null && !HtmlPageRenders.isZkTagsGenerated(exec) && exec.getAttribute(ATTR_TOP_NATIVE) == null) {
    String tn;
    if (root || ""String_Node_Str"".equals(tn=_tag != null ? _tag.toLowerCase() : ""String_Node_Str"") || ""String_Node_Str"".equals(tn)|| ""String_Node_Str"".equals(tn)) {
      exec.setAttribute(ATTR_TOP_NATIVE,Boolean.TRUE);
      oldout=out;
      out=new StringWriter();
    }
  }
  out.write(getPrologHalf());
  Component child=getFirstChild();
  if (child == null) {
    if (root)     HtmlPageRenders.outStandalone(exec,null,out);
  }
 else {
    if (root)     HtmlPageRenders.setDirectContent(exec,true);
    do {
      Component next=child.getNextSibling();
      if (child instanceof Native || ((ComponentCtrl)child).getExtraCtrl() instanceof DirectContent) {
        ((ComponentCtrl)child).redraw(out);
      }
 else {
        HtmlPageRenders.setDirectContent(exec,false);
        HtmlPageRenders.outStandalone(exec,child,out);
        HtmlPageRenders.setDirectContent(exec,true);
      }
      child=next;
    }
 while (child != null);
  }
  out.write(getEpilogHalf());
  if (oldout != null) {
    exec.removeAttribute(ATTR_TOP_NATIVE);
    final StringBuffer sb=((StringWriter)out).getBuffer();
    if (!HtmlPageRenders.isZkTagsGenerated(exec)) {
      int jhead=-1, junav=-1, head=-1, heade=-1, html=-1;
      for (int j=0, len=sb.length(); (j=sb.indexOf(""String_Node_Str"",j)) >= 0; ) {
        ++j;
        if (jhead < 0 && startsWith(sb,""String_Node_Str"",j)) {
          int l=Strings.indexOf(sb,'>',j) + 1;
          sb.delete(jhead=--j,l);
          len=sb.length();
        }
 else         if (head < 0 && startsWith(sb,""String_Node_Str"",j)) {
          head=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (html < 0 && startsWith(sb,""String_Node_Str"",j)) {
          html=Strings.indexOf(sb,'>',j) + 1;
        }
 else         if (junav < 0 && startsWith(sb,""String_Node_Str"",j)) {
          junav=Strings.indexOf(sb,'>',j) + 1;
          break;
        }
 else         if (sb.charAt(j) == '/' && startsWith(sb,""String_Node_Str"",++j)) {
          heade=j - 2;
        }
      }
      boolean disableUnavailable=false;
      if (jhead < 0 && ((jhead=heade) < 0) && ((jhead=head) < 0) && ((jhead=junav) < 0) && ((jhead=html) < 0)) {
        if (_tag != null) {
          final String tn=_tag.toLowerCase();
          if (""String_Node_Str"".equals(tn) || ""String_Node_Str"".equals(tn)) {
            l_loop:             for (int j=0, len=sb.length(); j < len; ++j) switch (sb.charAt(j)) {
case '>':
              disableUnavailable=true;
            jhead=j + 1;
case '=':
case '""':
          break l_loop;
      }
    }
  }
  if (jhead < 0)   jhead=0;
}
final String msg=HtmlPageRenders.outUnavailable(exec);
if (msg != null && !disableUnavailable) {
  if (junav < 0) {
    if (html >= 0)     junav=sb.lastIndexOf(""String_Node_Str"");
  }
  if (junav >= 0)   sb.insert(junav < jhead ? jhead : junav,msg);
 else   sb.append(msg);
}
final String zktags=HtmlPageRenders.outHeaderZkTags(exec,getPage());
if (zktags != null) sb.insert(jhead,zktags);
}
oldout.write(sb.toString());
}
}"
16176,"protected static final Object coerceToTypeForSetValue(final Object obj,final Class<?> type) throws ELException {
  if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass()))) {
    return obj;
  }
  if (String.class.equals(type)) {
    return obj == null && COERCE_NULL_TO_NULL ? null : coerceToString(obj);
  }
  if (ELArithmetic.isNumberType(type)) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToNumber(obj,type);
  }
  if (Character.class.equals(type) || Character.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToCharacter(obj);
  }
  if (Boolean.class.equals(type) || Boolean.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && COERCE_NULL_TO_NULL ? null : coerceToBoolean(obj);
  }
  if (type.isEnum()) {
    return coerceToEnum(obj,type);
  }
  if (isDateTimeType(type)) {
    return coerceToDateTime(obj,type);
  }
  if (obj == null)   return null;
  if (obj instanceof String) {
    if (""String_Node_Str"".equals(obj))     return null;
    PropertyEditor editor=PropertyEditorManager.findEditor(type);
    if (editor != null) {
      editor.setAsText((String)obj);
      return editor.getValue();
    }
  }
  throw new ELException(MessageFactory.get(""String_Node_Str"",obj,obj.getClass(),type));
}","protected static final Object coerceToTypeForSetValue(final Object obj,final Class<?> type) throws ELException {
  if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass()))) {
    return obj;
  }
  if (String.class.equals(type)) {
    return obj == null && COERCE_NULL_TO_NULL ? null : coerceToString(obj);
  }
  if (ELArithmetic.isNumberType(type)) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToNumber(obj,type);
  }
  if (Character.class.equals(type) || Character.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToCharacter(obj);
  }
  if (Boolean.class.equals(type) || Boolean.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToBoolean(obj);
  }
  if (type.isEnum()) {
    return coerceToEnum(obj,type);
  }
  if (isDateTimeType(type)) {
    return coerceToDateTime(obj,type);
  }
  if (obj == null)   return null;
  if (obj instanceof String) {
    if (""String_Node_Str"".equals(obj))     return null;
    PropertyEditor editor=PropertyEditorManager.findEditor(type);
    if (editor != null) {
      editor.setAsText((String)obj);
      return editor.getValue();
    }
  }
  throw new ELException(MessageFactory.get(""String_Node_Str"",obj,obj.getClass(),type));
}"
16177,"/** 
 * This method will parse Zul component's annotation that user declared and call   {@link Binder}'s addBindings series methods  to initiate binder's internal binding syntax trees, which then will cooperate with context(for look up variables) and be used by Binder's EL engine  while   {@link #loadComponent(Component,boolean)} or {@link Command} been triggered.<br>
 * @since 6.0.2
 */
public void initAnnotatedBindings(){
  checkInit();
  if (_initBindings)   throw new UiException(""String_Node_Str"");
  _initBindings=true;
  new AnnotateBinderHelper(this).initComponentBindings(this.getView());
  this.getView().setAttribute(BINDER,this);
}","/** 
 * This method will parse Zul component's annotation that user declared and call   {@link Binder}'s addBindings series methods  to initiate binder's internal binding syntax trees, which then will cooperate with context(for look up variables) and be used by Binder's EL engine  while   {@link #loadComponent(Component,boolean)} or {@link Command} been triggered.<br>
 * @since 6.0.2
 */
public void initAnnotatedBindings(){
  checkInit();
  if (_initBindings)   throw new UiException(""String_Node_Str"");
  _initBindings=true;
  new AnnotateBinderHelper(this).initComponentBindings(this.getView());
  BinderUtil.markHandling(this.getView(),this);
}"
16178,"@Override public void init(Component comp,Object vm,Map<String,Object> initArgs){
  super.init(comp,vm,initArgs);
  comp.setAttribute(BINDER,this);
}","@Override public void init(Component comp,Object vm,Map<String,Object> initArgs){
  super.init(comp,vm,initArgs);
  BinderUtil.markHandling(comp,this);
}"
16179,"protected void addItemReference(Component modelOwner,final Component comp,int[] path,String varnm){
  final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
  if (binder == null)   return;
  comp.setAttribute(TREE_PATH,path);
  final String expression=BindELContext.getModelName(modelOwner) + ""String_Node_Str"" + TREE_PATH+ ""String_Node_Str"";
  comp.setAttribute(varnm,new ReferenceBindingImpl(binder,expression,comp));
}","protected void addItemReference(Component modelOwner,final Component comp,int[] path,String varnm){
  final Binder binder=BinderUtil.getBinder(comp,true);
  if (binder == null)   return;
  comp.setAttribute(TREE_PATH,path);
  final String expression=BindELContext.getModelName(modelOwner) + ""String_Node_Str"" + TREE_PATH+ ""String_Node_Str"";
  comp.setAttribute(varnm,new ReferenceBindingImpl(binder,expression,comp));
}"
16180,"protected void addTemplateTracking(Component templateComp,final Component eachComp,final Object data,final int index,final int size){
  final Binder binder=(Binder)eachComp.getAttribute(BinderImpl.BINDER,true);
  if (binder == null)   return;
  final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
  if (resolver == null)   return;
  Object old=null;
  Object oldStatus=null;
  try {
    old=eachComp.setAttribute(EACH_VAR,data);
    oldStatus=eachComp.setAttribute(EACH_STATUS_VAR,new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return index;
      }
      @Override public Object getEach(){
        return data;
      }
      @Override public Integer getEnd(){
        if (size < 0) {
          throw new UiException(""String_Node_Str"");
        }
        return size;
      }
    }
);
    resolver.addTemplateTracking(eachComp);
  }
  finally {
    eachComp.setAttribute(EACH_STATUS_VAR,oldStatus);
    eachComp.setAttribute(TemplateResolver.EACH_VAR,old);
  }
}","protected void addTemplateTracking(Component templateComp,final Component eachComp,final Object data,final int index,final int size){
  final Binder binder=BinderUtil.getBinder(eachComp,true);
  if (binder == null)   return;
  final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
  if (resolver == null)   return;
  Object old=null;
  Object oldStatus=null;
  try {
    old=eachComp.setAttribute(EACH_VAR,data);
    oldStatus=eachComp.setAttribute(EACH_STATUS_VAR,new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return index;
      }
      @Override public Object getEach(){
        return data;
      }
      @Override public Integer getEnd(){
        if (size < 0) {
          throw new UiException(""String_Node_Str"");
        }
        return size;
      }
    }
);
    resolver.addTemplateTracking(eachComp);
  }
  finally {
    eachComp.setAttribute(EACH_STATUS_VAR,oldStatus);
    eachComp.setAttribute(TemplateResolver.EACH_VAR,old);
  }
}"
16181,"protected Template resoloveTemplate(Component templateComp,Component comp,Object data,int index,int size,String defaultName){
  if (comp.getPage() == null)   return null;
  final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
  final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
  Template template=null;
  if (resolver != null) {
    template=resolver.resolveTemplate(comp,data,index,size);
    if (template == null) {
      throw new UiException(""String_Node_Str"" + comp + ""String_Node_Str""+ resolver);
    }
  }
 else {
    template=lookupTemplate(comp,defaultName);
  }
  return template;
}","protected Template resoloveTemplate(Component templateComp,Component comp,Object data,int index,int size,String defaultName){
  if (comp.getPage() == null)   return null;
  final Binder binder=BinderUtil.getBinder(comp,true);
  final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
  Template template=null;
  if (resolver != null) {
    template=resolver.resolveTemplate(comp,data,index,size);
    if (template == null) {
      throw new UiException(""String_Node_Str"" + comp + ""String_Node_Str""+ resolver);
    }
  }
 else {
    template=lookupTemplate(comp,defaultName);
  }
  return template;
}"
16182,"private void processAllComponentsBindings(Component comp){
  final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (selfBinder != null)   return;
  processComponentBindings0(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    processAllComponentsBindings(kid);
  }
}","private void processAllComponentsBindings(Component comp){
  final Binder selfBinder=BinderUtil.getBinder(comp);
  if (selfBinder != null)   return;
  processComponentBindings0(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    processAllComponentsBindings(kid);
  }
}"
16183,"private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
}","private void processComponentBindings0(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final List<String> props=compCtrl.getAnnotatedProperties();
  for (final Iterator<?> it=props.iterator(); it.hasNext(); ) {
    final String propName=(String)it.next();
    if (isEventProperty(propName)) {
      processCommandBinding(comp,propName);
      processGlobalCommandBinding(comp,propName);
    }
 else     if (FORM_ATTR.equals(propName)) {
      processFormBindings(comp);
    }
 else     if (CHILDREN_ATTR.equals(propName)) {
      processChildrenBindings(comp);
    }
 else     if (VIEW_MODEL_ATTR.equals(propName)) {
    }
 else     if (BINDER_ATTR.equals(propName)) {
    }
 else {
      processPropertyBindings(comp,propName);
    }
  }
  if (!BinderUtil.isHandling(comp)) {
    BinderUtil.markHandling(comp,_binder);
  }
}"
16184,"private void addBinding(Component comp,String attr,Binding binding){
  Map<String,List<Binding>> attrMap=_bindings.get(comp);
  if (attrMap == null) {
    attrMap=new LinkedHashMap<String,List<Binding>>();
    _bindings.put(comp,attrMap);
  }
  List<Binding> bindings=attrMap.get(attr);
  if (bindings == null) {
    bindings=new ArrayList<Binding>();
    attrMap.put(attr,bindings);
  }
  bindings.add(binding);
  comp.setAttribute(BINDER,this);
}","private void addBinding(Component comp,String attr,Binding binding){
  Map<String,List<Binding>> attrMap=_bindings.get(comp);
  if (attrMap == null) {
    attrMap=new LinkedHashMap<String,List<Binding>>();
    _bindings.put(comp,attrMap);
  }
  List<Binding> bindings=attrMap.get(attr);
  if (bindings == null) {
    bindings=new ArrayList<Binding>();
    attrMap.put(attr,bindings);
  }
  bindings.add(binding);
  BinderUtil.markHandling(comp,this);
}"
16185,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null && (binder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=BinderUtil.getBinder(comp);
    if (selfBinder == null) {
      final Binder binder=BinderUtil.getBinder(comp,true);
      if (binder != null && (binder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=BinderUtil.getBinder(comp);
            if (innerBinder != null) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             BinderUtil.markHandling(comp,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16186,"@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (innerBinder != null) {
    return;
  }
  if (binder instanceof AnnotateBinder) {
    new AnnotateBinderHelper(binder).initComponentBindings(comp);
  }
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   comp.setAttribute(BinderImpl.BINDER,binder);
}","@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=BinderUtil.getBinder(comp);
  if (innerBinder != null) {
    return;
  }
  if (binder instanceof AnnotateBinder) {
    new AnnotateBinderHelper(binder).initComponentBindings(comp);
  }
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   BinderUtil.markHandling(comp,binder);
}"
16187,"private void removeBindings0(Component comp){
  final Object installed=comp.removeAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    BindELContext.removeModel(comp);
  }
  final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (binder != null) {
    binder.removeBindings(comp);
  }
}","private void removeBindings0(Component comp){
  final Object installed=comp.removeAttribute(BinderImpl.RENDERER_INSTALLED);
  if (installed != null) {
    BindELContext.removeModel(comp);
  }
  final Binder binder=BinderUtil.getBinder(comp);
  if (binder != null) {
    binder.removeBindings(comp);
  }
}"
16188,"private void addNullMap(TrackerNode node){
  final Object propName=node.getFieldScript();
  Set<TrackerNode> nodes=_nullMap.get(propName);
  if (nodes == null) {
    nodes=new HashSet<TrackerNode>();
    _nullMap.put(propName,nodes);
  }
  nodes.add(node);
  removeBeanMap(node);
}","private void addNullMap(TrackerNode node){
  final Object propName=node.getFieldScript();
  LinkedHashSet<TrackerNode> nodes=_nullMap.get(propName);
  if (nodes == null) {
    nodes=new LinkedHashSet<TrackerNode>();
    _nullMap.put(propName,nodes);
  }
  nodes.add(node);
  removeBeanMap(node);
}"
16189,"private void removeNodes(Collection<Set<TrackerNode>> nodesets,Collection<TrackerNode> removed){
  for (final Iterator<Set<TrackerNode>> it=nodesets.iterator(); it.hasNext(); ) {
    final Set<TrackerNode> nodeset=it.next();
    nodeset.removeAll(removed);
    if (nodeset.isEmpty()) {
      it.remove();
    }
  }
}","private void removeNodes(Collection<LinkedHashSet<TrackerNode>> nodesets,Collection<TrackerNode> removed){
  for (final Iterator<LinkedHashSet<TrackerNode>> it=nodesets.iterator(); it.hasNext(); ) {
    final Set<TrackerNode> nodeset=it.next();
    nodeset.removeAll(removed);
    if (nodeset.isEmpty()) {
      it.remove();
    }
  }
}"
16190,"public Set<LoadBinding> getLoadBindings(Object base,String prop){
  final Set<LoadBinding> bindings=new HashSet<LoadBinding>();
  final Set<TrackerNode> visited=new HashSet<TrackerNode>();
  collectLoadBindings(base,prop,bindings,visited);
  return bindings;
}","public Set<LoadBinding> getLoadBindings(Object base,String prop){
  final LinkedHashSet<LoadBinding> bindings=new LinkedHashSet<LoadBinding>();
  final Set<TrackerNode> visited=new HashSet<TrackerNode>();
  collectLoadBindings(base,prop,bindings,visited);
  return bindings;
}"
16191,"private void getLoadBindingsPerProperty(Collection<TrackerNode> nodes,String prop,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      getLoadBindings0(node,bindings,kidbases,visited);
    }
  }
 else   if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      final Set<TrackerNode> kids=node.getDirectDependents();
      getNodesLoadBindings(kids,bindings,kidbases,visited);
    }
  }
 else {
    for (    TrackerNode node : nodes) {
      final TrackerNode kid=node.getDependent(prop);
      if (kid != null) {
        getLoadBindings0(kid,bindings,kidbases,visited);
      }
    }
  }
}","private void getLoadBindingsPerProperty(Collection<TrackerNode> nodes,String prop,LinkedHashSet<LoadBinding> bindings,LinkedHashSet<Object> kidbases,Set<TrackerNode> visited){
  if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      getLoadBindings0(node,bindings,kidbases,visited);
    }
  }
 else   if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      final Set<TrackerNode> kids=node.getDirectDependents();
      getNodesLoadBindings(kids,bindings,kidbases,visited);
    }
  }
 else {
    for (    TrackerNode node : nodes) {
      final TrackerNode kid=node.getDependent(prop);
      if (kid != null) {
        getLoadBindings0(kid,bindings,kidbases,visited);
      }
    }
  }
}"
16192,"private void addBeanMap(TrackerNode node,Object value){
  if (!value.equals(node.getBean())) {
    removeBeanMap(node);
    if (!BindELContext.isImmutable(value)) {
      Set<TrackerNode> nodes=_beanMap.get(value);
      if (nodes == null) {
        nodes=new HashSet<TrackerNode>();
        _beanMap.put(value,nodes);
        _equalBeansMap.put(value);
      }
      nodes.add(node);
      node.setBean(value);
    }
  }
  removeNullMap(node);
}","private void addBeanMap(TrackerNode node,Object value){
  if (!value.equals(node.getBean())) {
    removeBeanMap(node);
    if (!BindELContext.isImmutable(value)) {
      LinkedHashSet<TrackerNode> nodes=_beanMap.get(value);
      if (nodes == null) {
        nodes=new LinkedHashSet<TrackerNode>();
        _beanMap.put(value,nodes);
        _equalBeansMap.put(value);
      }
      nodes.add(node);
      node.setBean(value);
    }
  }
  removeNullMap(node);
}"
16193,"private void removeAllFromBeanMap(Collection<TrackerNode> removed){
  final Collection<Entry<Object,Set<TrackerNode>>> nodesets=_beanMap.entrySet();
  for (final Iterator<Entry<Object,Set<TrackerNode>>> it=nodesets.iterator(); it.hasNext(); ) {
    final Entry<Object,Set<TrackerNode>> nodeset=it.next();
    final Object bean=nodeset.getKey();
    nodeset.getValue().removeAll(removed);
    if (nodeset.getValue().isEmpty()) {
      it.remove();
      _equalBeansMap.remove(bean);
    }
  }
}","private void removeAllFromBeanMap(Collection<TrackerNode> removed){
  final Collection<Entry<Object,LinkedHashSet<TrackerNode>>> nodesets=_beanMap.entrySet();
  for (final Iterator<Entry<Object,LinkedHashSet<TrackerNode>>> it=nodesets.iterator(); it.hasNext(); ) {
    final Entry<Object,LinkedHashSet<TrackerNode>> nodeset=it.next();
    final Object bean=nodeset.getKey();
    nodeset.getValue().removeAll(removed);
    if (nodeset.getValue().isEmpty()) {
      it.remove();
      _equalBeansMap.remove(bean);
    }
  }
}"
16194,"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _beanMap=new WeakIdentityMap<Object,Set<TrackerNode>>();
  _equalBeansMap=new EqualBeansMap();
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _beanMap=new WeakIdentityMap<Object,LinkedHashSet<TrackerNode>>();
  _equalBeansMap=new EqualBeansMap();
}"
16195,"private void getNodesLoadBindings(Set<TrackerNode> basenodes,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (basenodes != null) {
    for (    TrackerNode node : basenodes) {
      if (node != null) {
        getLoadBindings0(node,bindings,kidbases,visited);
      }
    }
  }
}","private void getNodesLoadBindings(Set<TrackerNode> basenodes,LinkedHashSet<LoadBinding> bindings,LinkedHashSet<Object> kidbases,Set<TrackerNode> visited){
  if (basenodes != null) {
    for (    TrackerNode node : basenodes) {
      if (node != null) {
        getLoadBindings0(node,bindings,kidbases,visited);
      }
    }
  }
}"
16196,"private void getLoadBindings0(TrackerNode node,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (visited.contains(node)) {
    return;
  }
  visited.add(node);
  bindings.addAll(node.getLoadBindings());
  final Set<ReferenceBinding> refBindings=node.getReferenceBindings();
  bindings.addAll(refBindings);
  for (  ReferenceBinding refBinding : refBindings) {
    refBinding.invalidateCache();
    collectLoadBindings(refBinding,""String_Node_Str"",bindings,visited);
  }
  for (  TrackerNode associate : node.getAssociates()) {
    getLoadBindings0(associate,bindings,kidbases,visited);
  }
  final Object kidbase=node.getBean();
  if (kidbases != null && kidbase != null) {
    kidbases.add(kidbase);
  }
 else {
    final Set<TrackerNode> nodes=node.getDirectDependents();
    for (    TrackerNode kid : nodes) {
      getLoadBindings0(kid,bindings,null,visited);
    }
  }
}","private void getLoadBindings0(TrackerNode node,LinkedHashSet<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (visited.contains(node)) {
    return;
  }
  visited.add(node);
  bindings.addAll(node.getLoadBindings());
  final Set<ReferenceBinding> refBindings=node.getReferenceBindings();
  bindings.addAll(refBindings);
  for (  ReferenceBinding refBinding : refBindings) {
    refBinding.invalidateCache();
    collectLoadBindings(refBinding,""String_Node_Str"",bindings,visited);
  }
  for (  TrackerNode associate : node.getAssociates()) {
    getLoadBindings0(associate,bindings,kidbases,visited);
  }
  final Object kidbase=node.getBean();
  if (kidbases != null && kidbase != null) {
    kidbases.add(kidbase);
  }
 else {
    final Set<TrackerNode> nodes=node.getDirectDependents();
    for (    TrackerNode kid : nodes) {
      getLoadBindings0(kid,bindings,null,visited);
    }
  }
}"
16197,"private void collectLoadBindings(Object base,String prop,Set<LoadBinding> bindings,Set<TrackerNode> visited){
  final Set<Object> kidbases=new HashSet<Object>();
  if (base != null) {
    if (""String_Node_Str"".equals(base)) {
      final Collection<Map<Object,TrackerNode>> nodesMaps=_compMap.values();
      if (nodesMaps != null) {
        for (        Map<Object,TrackerNode> nodesMap : nodesMaps) {
          final Collection<TrackerNode> nodes=nodesMap.values();
          if (nodes != null) {
            getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
          }
        }
      }
    }
 else {
      final Set<TrackerNode> nodes=getAllTrackerNodesByBean(base);
      if (nodes != null && !nodes.isEmpty()) {
        getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
      }
    }
  }
 else {
    if (""String_Node_Str"".equals(prop)) {
      for (      Set<TrackerNode> basenodes : _nullMap.values()) {
        getNodesLoadBindings(basenodes,bindings,kidbases,visited);
      }
    }
 else {
      final Set<TrackerNode> basenodes=_nullMap.get(prop);
      getNodesLoadBindings(basenodes,bindings,kidbases,visited);
    }
  }
  for (  Object kidbase : kidbases) {
    collectLoadBindings(kidbase,""String_Node_Str"",bindings,visited);
  }
}","private void collectLoadBindings(Object base,String prop,LinkedHashSet<LoadBinding> bindings,Set<TrackerNode> visited){
  final LinkedHashSet<Object> kidbases=new LinkedHashSet<Object>();
  if (base != null) {
    if (""String_Node_Str"".equals(base)) {
      final Collection<Map<Object,TrackerNode>> nodesMaps=_compMap.values();
      if (nodesMaps != null) {
        for (        Map<Object,TrackerNode> nodesMap : nodesMaps) {
          final Collection<TrackerNode> nodes=nodesMap.values();
          if (nodes != null) {
            getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
          }
        }
      }
    }
 else {
      final Set<TrackerNode> nodes=getAllTrackerNodesByBean(base);
      if (nodes != null && !nodes.isEmpty()) {
        getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
      }
    }
  }
 else {
    if (""String_Node_Str"".equals(prop)) {
      for (      Set<TrackerNode> basenodes : _nullMap.values()) {
        getNodesLoadBindings(basenodes,bindings,kidbases,visited);
      }
    }
 else {
      final Set<TrackerNode> basenodes=_nullMap.get(prop);
      getNodesLoadBindings(basenodes,bindings,kidbases,visited);
    }
  }
  for (  Object kidbase : kidbases) {
    collectLoadBindings(kidbase,""String_Node_Str"",bindings,visited);
  }
}"
16198,"@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Radiogroup radiogroup=(Radiogroup)comp;
  final ListModel<?> model=radiogroup.getModel();
  if (model != null && !(model instanceof Selectable)) {
    throw new UiException(""String_Node_Str"");
  }
  if (val != null) {
    if (model != null) {
      ((Selectable<Object>)model).addToSelection(val);
      return IGNORED_VALUE;
    }
 else {
      for (final Iterator<?> it=radiogroup.getItems().iterator(); it.hasNext(); ) {
        final Radio radio=(Radio)it.next();
        String value=radio.getValue();
        if (val.equals(value)) {
          return radio;
        }
      }
    }
  }
  if (model != null) {
    Set<Object> sels=((Selectable<Object>)model).getSelection();
    if (sels != null && sels.size() > 0)     ((Selectable<Object>)model).clearSelection();
    return IGNORED_VALUE;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Radiogroup radiogroup=(Radiogroup)comp;
  final ListModel<?> model=radiogroup.getModel();
  if (model != null && !(model instanceof Selectable)) {
    throw new UiException(""String_Node_Str"");
  }
  if (val != null) {
    if (model != null) {
      ((Selectable<Object>)model).addToSelection(val);
      return IGNORED_VALUE;
    }
 else {
      for (final Iterator<?> it=radiogroup.getItems().iterator(); it.hasNext(); ) {
        final Radio radio=(Radio)it.next();
        if (val.equals(radio.getValue())) {
          return radio;
        }
      }
    }
  }
  if (model != null) {
    Set<Object> sels=((Selectable<Object>)model).getSelection();
    if (sels != null && sels.size() > 0)     ((Selectable<Object>)model).clearSelection();
    return IGNORED_VALUE;
  }
  return null;
}"
16199,"public void render(final Radio item,final Object data,final int index) throws Exception {
  final Radiogroup radiogroup=item.getRadiogroup();
  final int size=radiogroup.getModel().getSize();
  final Template tm=resoloveTemplate(radiogroup,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    if (data instanceof String) {
      item.setValue((String)data);
    }
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return index;
      }
      @Override public Object getEach(){
        return data;
      }
      @Override public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=radiogroup.getAttribute(varnm);
    Object oldIter=radiogroup.getAttribute(itervarnm);
    radiogroup.setAttribute(varnm,data);
    radiogroup.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(radiogroup,item,null,null);
    radiogroup.setAttribute(varnm,oldVar);
    radiogroup.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Radio nr=(Radio)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(radiogroup,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    addTemplateTracking(radiogroup,nr,data,index,size);
    if (nr.getValue() == null && data instanceof String)     nr.setValue((String)data);
    item.setAttribute(""String_Node_Str"",nr);
    item.detach();
  }
}","public void render(final Radio item,final Object data,final int index) throws Exception {
  final Radiogroup radiogroup=item.getRadiogroup();
  final int size=radiogroup.getModel().getSize();
  final Template tm=resoloveTemplate(radiogroup,item,data,index,size,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final ForEachStatus iterStatus=new AbstractForEachStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return index;
      }
      @Override public Object getEach(){
        return data;
      }
      @Override public Integer getEnd(){
        return size;
      }
    }
;
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? (var == null ? EACH_STATUS_VAR : varnm + STATUS_POST_VAR) : itervar;
    Object oldVar=radiogroup.getAttribute(varnm);
    Object oldIter=radiogroup.getAttribute(itervarnm);
    radiogroup.setAttribute(varnm,data);
    radiogroup.setAttribute(itervarnm,iterStatus);
    final Component[] items=tm.create(radiogroup,item,null,null);
    radiogroup.setAttribute(varnm,oldVar);
    radiogroup.setAttribute(itervarnm,oldIter);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Radio nr=(Radio)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(radiogroup,nr,index,varnm);
    nr.setAttribute(itervarnm,iterStatus);
    addTemplateTracking(radiogroup,nr,data,index,size);
    if (nr.getValue() == null)     nr.setValue(data);
    item.setAttribute(""String_Node_Str"",nr);
    item.detach();
  }
}"
16200,"protected static final Object coerceToTypeForSetValue(final Object obj,final Class<?> type) throws ELException {
  if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass()))) {
    return obj;
  }
  if (String.class.equals(type)) {
    return obj == null && COERCE_NULL_TO_NULL ? null : coerceToString(obj);
  }
  if (ELArithmetic.isNumberType(type)) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToNumber(obj,type);
  }
  if (Character.class.equals(type) || Character.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToCharacter(obj);
  }
  if (Boolean.class.equals(type) || Boolean.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && COERCE_NULL_TO_NULL ? null : coerceToBoolean(obj);
  }
  if (type.isEnum()) {
    return coerceToEnum(obj,type);
  }
  if (isDateTimeType(type)) {
    return coerceToDateTime(obj,type);
  }
  if (obj == null)   return null;
  if (obj instanceof String) {
    if (""String_Node_Str"".equals(obj))     return null;
    PropertyEditor editor=PropertyEditorManager.findEditor(type);
    if (editor != null) {
      editor.setAsText((String)obj);
      return editor.getValue();
    }
  }
  throw new ELException(MessageFactory.get(""String_Node_Str"",obj,obj.getClass(),type));
}","protected static final Object coerceToTypeForSetValue(final Object obj,final Class<?> type) throws ELException {
  if (type == null || Object.class.equals(type) || (obj != null && type.isAssignableFrom(obj.getClass()))) {
    return obj;
  }
  if (String.class.equals(type)) {
    return obj == null && COERCE_NULL_TO_NULL ? null : coerceToString(obj);
  }
  if (ELArithmetic.isNumberType(type)) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToNumber(obj,type);
  }
  if (Character.class.equals(type) || Character.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToCharacter(obj);
  }
  if (Boolean.class.equals(type) || Boolean.TYPE == type) {
    return (obj == null || ""String_Node_Str"".equals(obj)) && !type.isPrimitive() && COERCE_NULL_TO_NULL ? null : coerceToBoolean(obj);
  }
  if (type.isEnum()) {
    return coerceToEnum(obj,type);
  }
  if (isDateTimeType(type)) {
    return coerceToDateTime(obj,type);
  }
  if (obj == null)   return null;
  if (obj instanceof String) {
    if (""String_Node_Str"".equals(obj))     return null;
    PropertyEditor editor=PropertyEditorManager.findEditor(type);
    if (editor != null) {
      editor.setAsText((String)obj);
      return editor.getValue();
    }
  }
  throw new ELException(MessageFactory.get(""String_Node_Str"",obj,obj.getClass(),type));
}"
16201,"/** 
 * Formats a number (Integer, BigDecimal...) into a string. If null, an empty string is returned. <p>A utility to assist the handling of numeric data.
 * @see #toNumberOnly
 * @param defaultFormat used if {@link #getFormat} returns null.If defaultFormat and  {@link #getFormat} are both null,the system's default format is used.
 */
protected String formatNumber(Object value,String defaultFormat){
  if (value == null)   return ""String_Node_Str"";
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(getDefaultLocale());
  if (_rounding != BigDecimal.ROUND_HALF_EVEN)   df.setRoundingMode(RoundingMode.valueOf(_rounding));
  String fmt=getFormat();
  if (fmt == null)   fmt=defaultFormat;
  if (fmt != null)   df.applyLocalizedPattern(fmt);
  return df.format(value);
}","/** 
 * Formats a number (Integer, BigDecimal...) into a string. If null, an empty string is returned. <p>A utility to assist the handling of numeric data.
 * @see #toNumberOnly
 * @param defaultFormat used if {@link #getFormat} returns null.If defaultFormat and  {@link #getFormat} are both null,the system's default format is used.
 */
protected String formatNumber(Object value,String defaultFormat){
  if (value == null)   return ""String_Node_Str"";
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(getDefaultLocale());
  if (_rounding != BigDecimal.ROUND_HALF_EVEN)   df.setRoundingMode(RoundingMode.valueOf(_rounding));
  String fmt=getFormat();
  if (fmt == null)   fmt=defaultFormat;
  if (fmt != null)   if (_locale != null)   df.applyLocalizedPattern(fmt);
 else   df.applyPattern(fmt);
  return df.format(value);
}"
16202,"private void addNullMap(TrackerNode node){
  final Object propName=node.getFieldScript();
  Set<TrackerNode> nodes=_nullMap.get(propName);
  if (nodes == null) {
    nodes=new HashSet<TrackerNode>();
    _nullMap.put(propName,nodes);
  }
  nodes.add(node);
  removeBeanMap(node);
}","private void addNullMap(TrackerNode node){
  final Object propName=node.getFieldScript();
  LinkedHashSet<TrackerNode> nodes=_nullMap.get(propName);
  if (nodes == null) {
    nodes=new LinkedHashSet<TrackerNode>();
    _nullMap.put(propName,nodes);
  }
  nodes.add(node);
  removeBeanMap(node);
}"
16203,"private void removeNodes(Collection<Set<TrackerNode>> nodesets,Collection<TrackerNode> removed){
  for (final Iterator<Set<TrackerNode>> it=nodesets.iterator(); it.hasNext(); ) {
    final Set<TrackerNode> nodeset=it.next();
    nodeset.removeAll(removed);
    if (nodeset.isEmpty()) {
      it.remove();
    }
  }
}","private void removeNodes(Collection<LinkedHashSet<TrackerNode>> nodesets,Collection<TrackerNode> removed){
  for (final Iterator<LinkedHashSet<TrackerNode>> it=nodesets.iterator(); it.hasNext(); ) {
    final Set<TrackerNode> nodeset=it.next();
    nodeset.removeAll(removed);
    if (nodeset.isEmpty()) {
      it.remove();
    }
  }
}"
16204,"public Set<LoadBinding> getLoadBindings(Object base,String prop){
  final Set<LoadBinding> bindings=new HashSet<LoadBinding>();
  final Set<TrackerNode> visited=new HashSet<TrackerNode>();
  collectLoadBindings(base,prop,bindings,visited);
  return bindings;
}","public Set<LoadBinding> getLoadBindings(Object base,String prop){
  final LinkedHashSet<LoadBinding> bindings=new LinkedHashSet<LoadBinding>();
  final Set<TrackerNode> visited=new HashSet<TrackerNode>();
  collectLoadBindings(base,prop,bindings,visited);
  return bindings;
}"
16205,"private void getLoadBindingsPerProperty(Collection<TrackerNode> nodes,String prop,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      getLoadBindings0(node,bindings,kidbases,visited);
    }
  }
 else   if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      final Set<TrackerNode> kids=node.getDirectDependents();
      getNodesLoadBindings(kids,bindings,kidbases,visited);
    }
  }
 else {
    for (    TrackerNode node : nodes) {
      final TrackerNode kid=node.getDependent(prop);
      if (kid != null) {
        getLoadBindings0(kid,bindings,kidbases,visited);
      }
    }
  }
}","private void getLoadBindingsPerProperty(Collection<TrackerNode> nodes,String prop,LinkedHashSet<LoadBinding> bindings,LinkedHashSet<Object> kidbases,Set<TrackerNode> visited){
  if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      getLoadBindings0(node,bindings,kidbases,visited);
    }
  }
 else   if (""String_Node_Str"".equals(prop)) {
    for (    TrackerNode node : nodes) {
      final Set<TrackerNode> kids=node.getDirectDependents();
      getNodesLoadBindings(kids,bindings,kidbases,visited);
    }
  }
 else {
    for (    TrackerNode node : nodes) {
      final TrackerNode kid=node.getDependent(prop);
      if (kid != null) {
        getLoadBindings0(kid,bindings,kidbases,visited);
      }
    }
  }
}"
16206,"private void addBeanMap(TrackerNode node,Object value){
  if (!value.equals(node.getBean())) {
    removeBeanMap(node);
    if (!BindELContext.isImmutable(value)) {
      Set<TrackerNode> nodes=_beanMap.get(value);
      if (nodes == null) {
        nodes=new HashSet<TrackerNode>();
        _beanMap.put(value,nodes);
        _equalBeansMap.put(value);
      }
      nodes.add(node);
      node.setBean(value);
    }
  }
  removeNullMap(node);
}","private void addBeanMap(TrackerNode node,Object value){
  if (!value.equals(node.getBean())) {
    removeBeanMap(node);
    if (!BindELContext.isImmutable(value)) {
      LinkedHashSet<TrackerNode> nodes=_beanMap.get(value);
      if (nodes == null) {
        nodes=new LinkedHashSet<TrackerNode>();
        _beanMap.put(value,nodes);
        _equalBeansMap.put(value);
      }
      nodes.add(node);
      node.setBean(value);
    }
  }
  removeNullMap(node);
}"
16207,"private void removeAllFromBeanMap(Collection<TrackerNode> removed){
  final Collection<Entry<Object,Set<TrackerNode>>> nodesets=_beanMap.entrySet();
  for (final Iterator<Entry<Object,Set<TrackerNode>>> it=nodesets.iterator(); it.hasNext(); ) {
    final Entry<Object,Set<TrackerNode>> nodeset=it.next();
    final Object bean=nodeset.getKey();
    nodeset.getValue().removeAll(removed);
    if (nodeset.getValue().isEmpty()) {
      it.remove();
      _equalBeansMap.remove(bean);
    }
  }
}","private void removeAllFromBeanMap(Collection<TrackerNode> removed){
  final Collection<Entry<Object,LinkedHashSet<TrackerNode>>> nodesets=_beanMap.entrySet();
  for (final Iterator<Entry<Object,LinkedHashSet<TrackerNode>>> it=nodesets.iterator(); it.hasNext(); ) {
    final Entry<Object,LinkedHashSet<TrackerNode>> nodeset=it.next();
    final Object bean=nodeset.getKey();
    nodeset.getValue().removeAll(removed);
    if (nodeset.getValue().isEmpty()) {
      it.remove();
      _equalBeansMap.remove(bean);
    }
  }
}"
16208,"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _beanMap=new WeakIdentityMap<Object,Set<TrackerNode>>();
  _equalBeansMap=new EqualBeansMap();
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _beanMap=new WeakIdentityMap<Object,LinkedHashSet<TrackerNode>>();
  _equalBeansMap=new EqualBeansMap();
}"
16209,"private void getNodesLoadBindings(Set<TrackerNode> basenodes,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (basenodes != null) {
    for (    TrackerNode node : basenodes) {
      if (node != null) {
        getLoadBindings0(node,bindings,kidbases,visited);
      }
    }
  }
}","private void getNodesLoadBindings(Set<TrackerNode> basenodes,LinkedHashSet<LoadBinding> bindings,LinkedHashSet<Object> kidbases,Set<TrackerNode> visited){
  if (basenodes != null) {
    for (    TrackerNode node : basenodes) {
      if (node != null) {
        getLoadBindings0(node,bindings,kidbases,visited);
      }
    }
  }
}"
16210,"private void getLoadBindings0(TrackerNode node,Set<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (visited.contains(node)) {
    return;
  }
  visited.add(node);
  bindings.addAll(node.getLoadBindings());
  final Set<ReferenceBinding> refBindings=node.getReferenceBindings();
  bindings.addAll(refBindings);
  for (  ReferenceBinding refBinding : refBindings) {
    refBinding.invalidateCache();
    collectLoadBindings(refBinding,""String_Node_Str"",bindings,visited);
  }
  for (  TrackerNode associate : node.getAssociates()) {
    getLoadBindings0(associate,bindings,kidbases,visited);
  }
  final Object kidbase=node.getBean();
  if (kidbases != null && kidbase != null) {
    kidbases.add(kidbase);
  }
 else {
    final Set<TrackerNode> nodes=node.getDirectDependents();
    for (    TrackerNode kid : nodes) {
      getLoadBindings0(kid,bindings,null,visited);
    }
  }
}","private void getLoadBindings0(TrackerNode node,LinkedHashSet<LoadBinding> bindings,Set<Object> kidbases,Set<TrackerNode> visited){
  if (visited.contains(node)) {
    return;
  }
  visited.add(node);
  bindings.addAll(node.getLoadBindings());
  final Set<ReferenceBinding> refBindings=node.getReferenceBindings();
  bindings.addAll(refBindings);
  for (  ReferenceBinding refBinding : refBindings) {
    refBinding.invalidateCache();
    collectLoadBindings(refBinding,""String_Node_Str"",bindings,visited);
  }
  for (  TrackerNode associate : node.getAssociates()) {
    getLoadBindings0(associate,bindings,kidbases,visited);
  }
  final Object kidbase=node.getBean();
  if (kidbases != null && kidbase != null) {
    kidbases.add(kidbase);
  }
 else {
    final Set<TrackerNode> nodes=node.getDirectDependents();
    for (    TrackerNode kid : nodes) {
      getLoadBindings0(kid,bindings,null,visited);
    }
  }
}"
16211,"private void collectLoadBindings(Object base,String prop,Set<LoadBinding> bindings,Set<TrackerNode> visited){
  final Set<Object> kidbases=new HashSet<Object>();
  if (base != null) {
    if (""String_Node_Str"".equals(base)) {
      final Collection<Map<Object,TrackerNode>> nodesMaps=_compMap.values();
      if (nodesMaps != null) {
        for (        Map<Object,TrackerNode> nodesMap : nodesMaps) {
          final Collection<TrackerNode> nodes=nodesMap.values();
          if (nodes != null) {
            getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
          }
        }
      }
    }
 else {
      final Set<TrackerNode> nodes=getAllTrackerNodesByBean(base);
      if (nodes != null && !nodes.isEmpty()) {
        getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
      }
    }
  }
 else {
    if (""String_Node_Str"".equals(prop)) {
      for (      Set<TrackerNode> basenodes : _nullMap.values()) {
        getNodesLoadBindings(basenodes,bindings,kidbases,visited);
      }
    }
 else {
      final Set<TrackerNode> basenodes=_nullMap.get(prop);
      getNodesLoadBindings(basenodes,bindings,kidbases,visited);
    }
  }
  for (  Object kidbase : kidbases) {
    collectLoadBindings(kidbase,""String_Node_Str"",bindings,visited);
  }
}","private void collectLoadBindings(Object base,String prop,LinkedHashSet<LoadBinding> bindings,Set<TrackerNode> visited){
  final LinkedHashSet<Object> kidbases=new LinkedHashSet<Object>();
  if (base != null) {
    if (""String_Node_Str"".equals(base)) {
      final Collection<Map<Object,TrackerNode>> nodesMaps=_compMap.values();
      if (nodesMaps != null) {
        for (        Map<Object,TrackerNode> nodesMap : nodesMaps) {
          final Collection<TrackerNode> nodes=nodesMap.values();
          if (nodes != null) {
            getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
          }
        }
      }
    }
 else {
      final Set<TrackerNode> nodes=getAllTrackerNodesByBean(base);
      if (nodes != null && !nodes.isEmpty()) {
        getLoadBindingsPerProperty(nodes,prop,bindings,kidbases,visited);
      }
    }
  }
 else {
    if (""String_Node_Str"".equals(prop)) {
      for (      Set<TrackerNode> basenodes : _nullMap.values()) {
        getNodesLoadBindings(basenodes,bindings,kidbases,visited);
      }
    }
 else {
      final Set<TrackerNode> basenodes=_nullMap.get(prop);
      getNodesLoadBindings(basenodes,bindings,kidbases,visited);
    }
  }
  for (  Object kidbase : kidbases) {
    collectLoadBindings(kidbase,""String_Node_Str"",bindings,visited);
  }
}"
16212,"/** 
 * Formats a number (Integer, BigDecimal...) into a string. If null, an empty string is returned. <p>A utility to assist the handling of numeric data.
 * @see #toNumberOnly
 * @param defaultFormat used if {@link #getFormat} returns null.If defaultFormat and  {@link #getFormat} are both null,the system's default format is used.
 */
protected String formatNumber(Object value,String defaultFormat){
  if (value == null)   return ""String_Node_Str"";
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(getDefaultLocale());
  if (_rounding != BigDecimal.ROUND_HALF_EVEN)   df.setRoundingMode(RoundingMode.valueOf(_rounding));
  String fmt=getFormat();
  if (fmt == null)   fmt=defaultFormat;
  if (fmt != null)   df.applyLocalizedPattern(fmt);
  return df.format(value);
}","/** 
 * Formats a number (Integer, BigDecimal...) into a string. If null, an empty string is returned. <p>A utility to assist the handling of numeric data.
 * @see #toNumberOnly
 * @param defaultFormat used if {@link #getFormat} returns null.If defaultFormat and  {@link #getFormat} are both null,the system's default format is used.
 */
protected String formatNumber(Object value,String defaultFormat){
  if (value == null)   return ""String_Node_Str"";
  final DecimalFormat df=(DecimalFormat)NumberFormat.getInstance(getDefaultLocale());
  if (_rounding != BigDecimal.ROUND_HALF_EVEN)   df.setRoundingMode(RoundingMode.valueOf(_rounding));
  String fmt=getFormat();
  if (fmt == null)   fmt=defaultFormat;
  if (fmt != null)   if (_locale != null)   df.applyLocalizedPattern(fmt);
 else   df.applyPattern(fmt);
  return df.format(value);
}"
16213,"/** 
 * Wire controller as an attribute of the specified component with a custom separator. <p>The separator is used to separate the component ID and the controller. By default, it is '$'. However, for Groovy or other environment that '$' is not applicable, you can invoke this method to use '_' as the separator.
 */
public static final void wireController(Component comp,Object controller,char separator){
  Object onm=comp.getAttribute(""String_Node_Str"");
  if (onm instanceof String && ((String)onm).length() > 0) {
    comp.setAttribute((String)onm,controller);
  }
 else {
    comp.setAttribute(separator + ""String_Node_Str"",controller);
    final String id=comp.getId();
    comp.setAttribute(id + separator + ""String_Node_Str"",controller);
    comp.setAttribute(composerNameByClass(id,controller.getClass(),separator),controller);
  }
}","/** 
 * Wire controller as an attribute of the specified component with a custom separator. <p>The separator is used to separate the component ID and the controller. By default, it is '$'. However, for Groovy or other environment that '$' is not applicable, you can invoke this method to use '_' as the separator.
 */
public static final void wireController(Component comp,Object controller,char separator){
  Object onm=comp.getAttribute(""String_Node_Str"");
  if (onm instanceof String && ((String)onm).length() > 0) {
    comp.setAttribute((String)onm,controller);
  }
 else {
    comp.setAttribute(""String_Node_Str"",controller);
  }
  comp.setAttribute(separator + ""String_Node_Str"",controller);
  final String id=comp.getId();
  comp.setAttribute(id + separator + ""String_Node_Str"",controller);
  comp.setAttribute(composerNameByClass(id,controller.getClass(),separator),controller);
}"
16214,"public void doBeforeComposeChildren(Component comp) throws Exception {
  _viewModel=initViewModel(evalx,comp);
  _binder=initBinder(evalx,comp);
  ValidationMessages _vmsgs=initValidationMessages(evalx,comp,_binder);
  Selectors.wireVariables(comp,_viewModel,Selectors.newVariableResolvers(_viewModel.getClass(),null));
  if (_vmsgs != null) {
    _binder.setValidationMessages(_vmsgs);
  }
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  keeper.book(_binder,comp);
  _binder.init(comp,_viewModel,getViewModelInitArgs(evalx,comp));
}","public void doBeforeComposeChildren(Component comp) throws Exception {
  _viewModel=initViewModel(evalx,comp);
  _binder=initBinder(evalx,comp);
  ValidationMessages _vmsgs=initValidationMessages(evalx,comp,_binder);
  Selectors.wireVariables(comp,_viewModel,Selectors.newVariableResolvers(_viewModel.getClass(),null));
  if (_vmsgs != null) {
    _binder.setValidationMessages(_vmsgs);
  }
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  keeper.book(_binder,comp);
  _binder.init(comp,_viewModel,getViewModelInitArgs(evalx,comp));
  ConventionWires.wireController(comp,this);
}"
16215,"public void doAfterCompose(T comp) throws Exception {
  String cname=(String)comp.getAttribute(COMPOSER_NAME_ATTR);
  comp.setAttribute(cname != null ? cname : comp.getId() + ""String_Node_Str"",this);
  _binder.initAnnotatedBindings();
  new AbstractAnnotatedMethodInvoker<AfterCompose>(AfterCompose.class,_afterComposeMethodCache){
    protected boolean shouldLookupSuperclass(    AfterCompose annotation){
      return annotation.superclass();
    }
  }
.invokeMethod(_binder,getViewModelInitArgs(evalx,comp));
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}","public void doAfterCompose(T comp) throws Exception {
  _binder.initAnnotatedBindings();
  new AbstractAnnotatedMethodInvoker<AfterCompose>(AfterCompose.class,_afterComposeMethodCache){
    protected boolean shouldLookupSuperclass(    AfterCompose annotation){
      return annotation.superclass();
    }
  }
.invokeMethod(_binder,getViewModelInitArgs(evalx,comp));
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}"
16216,"public boolean insertBefore(Component child,Component refChild){
  if (child instanceof Caption) {
    refChild=getFirstChild();
    if (super.insertBefore(child,refChild)) {
      _caption=(Caption)child;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (child instanceof Label) {
    _tmpLabel=(Label)child;
    log.warning(""String_Node_Str"" + this + ""String_Node_Str"");
    return false;
  }
 else   return super.insertBefore(child,refChild);
}","public boolean insertBefore(Component child,Component refChild){
  if (child instanceof Caption) {
    refChild=getFirstChild();
    if (super.insertBefore(child,refChild)) {
      _caption=(Caption)child;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (child instanceof Label) {
    _tmpLabel=(Label)child;
    log.warning(""String_Node_Str"" + this + ""String_Node_Str"");
  }
  return super.insertBefore(child,refChild);
}"
16217,"/** 
 * Internal use only
 * @since 6.5.0
 */
public void onCreate(Event evt){
  if (_tmpLabel != null)   setLabel(_tmpLabel.getValue());
  _tmpLabel=null;
}","/** 
 * Internal use only
 * @since 6.5.0
 */
public void onCreate(Event evt){
  if (_tmpLabel != null) {
    setLabel(_tmpLabel.getValue());
    removeChild(_tmpLabel);
  }
  _tmpLabel=null;
}"
16218,"/** 
 * Returns the CDI BeanManager.  Default implementation use JNDI to lookup ""java:comp/env/BeanManager"". 
 */
public static BeanManager getBeanManager(){
  if (_manager != null)   return _manager;
  try {
    final InitialContext initialContext=new InitialContext();
    _manager=(BeanManager)initialContext.lookup(Library.getProperty(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  NamingException e) {
    e.printStackTrace();
    throw XelException.Aide.wrap(e,""String_Node_Str"");
  }
  return _manager;
}","/** 
 * Returns the CDI BeanManager.  Default implementation use JNDI to lookup ""java:comp/env/BeanManager"". 
 */
public static BeanManager getBeanManager(){
  if (_manager != null)   return _manager;
  try {
    final InitialContext initialContext=new InitialContext();
    _manager=(BeanManager)initialContext.lookup(Library.getProperty(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  NamingException e) {
    throw XelException.Aide.wrap(e,""String_Node_Str"");
  }
  return _manager;
}"
16219,"/** 
 * Process fileitems named file0, file1 and so on.
 */
private static final void processItems(Desktop desktop,Map<String,Object> params,Map<String,String> attrs) throws IOException {
  List<Media> meds=(List<Media>)desktop.getAttribute(""String_Node_Str"");
  if (meds == null) {
    meds=new LinkedList<Media>();
    desktop.setAttribute(""String_Node_Str"",meds);
  }
  final boolean alwaysNative=""String_Node_Str"".equals(params.get(""String_Node_Str""));
  final Object fis=params.get(""String_Node_Str"");
  if (fis instanceof FileItem) {
    meds.add(processItem(desktop,(FileItem)fis,alwaysNative));
  }
 else   if (fis != null) {
    for (Iterator it=((List)fis).iterator(); it.hasNext(); ) {
      meds.add(processItem(desktop,(FileItem)it.next(),alwaysNative));
    }
  }
}","/** 
 * Process fileitems named file0, file1 and so on.
 */
private static final void processItems(Desktop desktop,Map<String,Object> params,Map<String,String> attrs) throws IOException {
  String uuid=attrs.get(""String_Node_Str"");
  List<Media> meds=(List<Media>)desktop.getAttribute(uuid);
  if (meds == null) {
    meds=new LinkedList<Media>();
    desktop.setAttribute(uuid,meds);
  }
  final boolean alwaysNative=""String_Node_Str"".equals(params.get(""String_Node_Str""));
  final Object fis=params.get(""String_Node_Str"");
  if (fis instanceof FileItem) {
    meds.add(processItem(desktop,(FileItem)fis,alwaysNative));
  }
 else   if (fis != null) {
    for (Iterator it=((List)fis).iterator(); it.hasNext(); ) {
      meds.add(processItem(desktop,(FileItem)it.next(),alwaysNative));
    }
  }
}"
16220,"@Override public void service(Event event,Scope scope) throws Exception {
  if (event instanceof StubEvent) {
    postToNonStubAncestor((StubEvent)event);
  }
 else {
    super.service(event,scope);
  }
}","@Override public void service(Event event,Scope scope) throws Exception {
  if (event instanceof StubEvent) {
    EventListenerMap map=((ComponentCtrl)this).getEventListenerMap();
    if (map != null) {
      map.service(event,scope,this,((StubEvent)event).getCommand());
    }
 else     postToNonStubAncestor((StubEvent)event);
  }
 else {
    super.service(event,scope);
  }
}"
16221,"public void doBeforeComposeChildren(Component comp) throws Exception {
  _viewModel=initViewModel(evalx,comp);
  _binder=initBinder(evalx,comp);
  ValidationMessages _vmsgs=initValidationMessages(evalx,comp,_binder);
  Selectors.wireVariables(comp,_viewModel,Selectors.newVariableResolvers(_viewModel.getClass(),null));
  if (_vmsgs != null) {
    _binder.setValidationMessages(_vmsgs);
  }
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  keeper.book(_binder,comp);
}","public void doBeforeComposeChildren(Component comp) throws Exception {
  _viewModel=initViewModel(evalx,comp);
  _binder=initBinder(evalx,comp);
  ValidationMessages _vmsgs=initValidationMessages(evalx,comp,_binder);
  Selectors.wireVariables(comp,_viewModel,Selectors.newVariableResolvers(_viewModel.getClass(),null));
  if (_vmsgs != null) {
    _binder.setValidationMessages(_vmsgs);
  }
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  keeper.book(_binder,comp);
  _binder.initViewModel(comp,_viewModel,getViewModelInitArgs(evalx,comp));
}"
16222,"public void doAfterCompose(T comp) throws Exception {
  String cname=(String)comp.getAttribute(COMPOSER_NAME_ATTR);
  comp.setAttribute(cname != null ? cname : comp.getId() + ""String_Node_Str"",this);
  _binder.initViewModel(comp,_viewModel,getViewModelInitArgs(evalx,comp));
  _binder.initAnnotatedBindings();
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}","public void doAfterCompose(T comp) throws Exception {
  String cname=(String)comp.getAttribute(COMPOSER_NAME_ATTR);
  comp.setAttribute(cname != null ? cname : comp.getId() + ""String_Node_Str"",this);
  _binder.initAnnotatedBindings();
  BinderKeeper keeper=BinderKeeper.getInstance(comp);
  if (keeper.isRootBinder(_binder)) {
    keeper.loadComponentForAllBinders();
  }
}"
16223,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            if ((binder instanceof AnnotateBinder))             new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null && (binder instanceof BinderImpl)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            if (binder instanceof AnnotateBinder) {
              new AnnotateBinderHelper(binder).initComponentBindings(comp);
            }
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16224,"@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getParent() == null || comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (innerBinder != null) {
    return;
  }
  if ((binder instanceof AnnotateBinder))   new AnnotateBinderHelper(binder).initComponentBindings(comp);
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   comp.setAttribute(BinderImpl.BINDER,binder);
}","@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getParent() == null || comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (innerBinder != null) {
    return;
  }
  if (binder instanceof AnnotateBinder) {
    new AnnotateBinderHelper(binder).initComponentBindings(comp);
  }
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   comp.setAttribute(BinderImpl.BINDER,binder);
}"
16225,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null && (binder instanceof AnnotateBinder)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            if ((binder instanceof AnnotateBinder))             new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16226,"@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getParent() == null || comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (innerBinder != null) {
    return;
  }
  new AnnotateBinderHelper(binder).initComponentBindings(comp);
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   comp.setAttribute(BinderImpl.BINDER,binder);
}","@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
  if (comp.getParent() == null || comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (innerBinder != null) {
    return;
  }
  if ((binder instanceof AnnotateBinder))   new AnnotateBinderHelper(binder).initComponentBindings(comp);
  binder.loadComponent(comp,true);
  if (comp.getAttribute(BinderImpl.VAR) != null)   comp.setAttribute(BinderImpl.BINDER,binder);
}"
16227,"static void initBuiltinConverters(){
synchronized (_converters) {
    set0(""String_Node_Str"",new ObjectBooleanConverter());
    set0(""String_Node_Str"",new FormatedDateConverter());
    set0(""String_Node_Str"",new FormatedNumberConverter());
    set0(""String_Node_Str"",new UriConverter());
    _init=true;
  }
}","static void initBuiltinConverters(){
synchronized (_converters) {
    set0(""String_Node_Str"",new ObjectBooleanConverter());
    set0(""String_Node_Str"",new FormatedDateConverter());
    set0(""String_Node_Str"",new FormatedDateConverter());
    set0(""String_Node_Str"",new FormatedNumberConverter());
    set0(""String_Node_Str"",new FormatedNumberConverter());
    set0(""String_Node_Str"",new UriConverter());
    _init=true;
  }
}"
16228,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null && (binder instanceof AnnotateBinder)) {
        comp.addEventListener(10000,BinderImpl.ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(BinderImpl.ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            if (innerBinder != null) {
              return;
            }
            new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp,true);
            if (comp.getAttribute(BinderImpl.VAR) != null)             comp.setAttribute(BinderImpl.BINDER,binder);
          }
        }
);
        Events.postEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
      }
    }
  }
}"
16229,"@Override public boolean isGroupOpened(int groupIndex){
  return _opens == null ? true : _opens[groupIndex];
}","@Override public boolean isGroupOpened(int groupIndex){
  return _opens == null || _opens[groupIndex];
}"
16230,"private boolean setOpenGroup0(int groupIndex,boolean open){
  if (_opens == null) {
    _opens=new boolean[getGroupCount()];
  }
  if (_opens[groupIndex] != open) {
    _opens[groupIndex]=open;
    fireEvent(GroupsDataEvent.GROUPS_CHANGED,groupIndex,groupIndex,groupIndex);
    return true;
  }
  return false;
}","private boolean setOpenGroup0(int groupIndex,boolean open){
  if (_opens == null) {
    if (open)     return true;
    int length=getGroupCount();
    _opens=new boolean[length];
    for (int i=0; i < length; i++)     _opens[i]=true;
  }
  if (_opens[groupIndex] != open) {
    _opens[groupIndex]=open;
    fireEvent(GroupsDataEvent.GROUPS_CHANGED,groupIndex,groupIndex,groupIndex);
    return true;
  }
  return false;
}"
16231,"public boolean setOpenGroup0(int groupIndex,boolean open){
  if (_opens == null) {
    _opens=new boolean[getGroupCount()];
  }
  if (_opens[groupIndex] != open) {
    _opens[groupIndex]=open;
    fireEvent(GroupsDataEvent.GROUPS_CHANGED,groupIndex,-1,-1);
    return true;
  }
  return false;
}","public boolean setOpenGroup0(int groupIndex,boolean open){
  if (_opens == null) {
    if (open)     return true;
    int length=getGroupCount();
    _opens=new boolean[length];
    for (int i=0; i < length; i++)     _opens[i]=true;
  }
  if (_opens[groupIndex] != open) {
    _opens[groupIndex]=open;
    fireEvent(GroupsDataEvent.GROUPS_CHANGED,groupIndex,-1,-1);
    return true;
  }
  return false;
}"
16232,"/** 
 * Constructor When using this constructor ,   {@link #getGroup(int)} will return the corresponding Object depends on heads.  The return value of  {@link #hasGroupfoot(int)} and {@link #getGroupfoot(int)} are depends on foots.  <p>Notice that, for backward compatibility, the last argument is <code>closes</code>.
 * @param data a two dimensional list to represent groups data
 * @param heads a list to represent head data of group
 * @param foots a list to represent foot data of group, if an element in this list is null, then {@link #hasGroupfoot(int)} will return false in corresponding index.
 * @param closes an array of boolean to represent close status of group. If not specified, then{@link #isClose(int)} will return false in corresponding index(i.e. group is default to open)
 * @since 6.0.1  
 */
public SimpleGroupsModel(List<List<D>> data,List<H> heads,List<F> foots,boolean[] closes){
  if (data == null)   throw new NullPointerException();
  _data=data;
  _heads=heads;
  _foots=foots;
  _opens=closes;
  if (_opens != null) {
    for (int i=0; i < _opens.length; i++)     _opens[i]=!_opens[i];
  }
}","/** 
 * Constructor When using this constructor ,   {@link #getGroup(int)} will return the corresponding Object depends on heads.  The return value of  {@link #hasGroupfoot(int)} and {@link #getGroupfoot(int)} are depends on foots.  <p>Notice that, for backward compatibility, the last argument is <code>closes</code>.
 * @param data a two dimensional list to represent groups data
 * @param heads a list to represent head data of group
 * @param foots a list to represent foot data of group, if an element in this list is null, then {@link #hasGroupfoot(int)} will return false in corresponding index.
 * @param closes an array of boolean to represent close status of group. If not specified, then{@link #isClose(int)} will return false in corresponding index(i.e. group is default to open)
 * @since 6.0.1  
 */
public SimpleGroupsModel(List<List<D>> data,List<H> heads,List<F> foots,boolean[] closes){
  if (data == null)   throw new NullPointerException();
  _data=data;
  _heads=heads;
  _foots=foots;
  if (closes != null) {
    int length=_data.size();
    int paramLen=Math.min(closes.length,length);
    _opens=new boolean[length];
    for (int i=0; i < paramLen; i++)     _opens[i]=closes[i];
    for (int i=paramLen; i < length; i++)     _opens[i]=true;
  }
}"
16233,"@Override public boolean isGroupOpened(int groupIndex){
  return _opens == null ? true : _opens[groupIndex];
}","@Override public boolean isGroupOpened(int groupIndex){
  return _opens == null || _opens[groupIndex];
}"
16234,"public boolean hasGroupfoot(int groupIndex){
  return _foots == null ? false : _foots.contains(groupIndex);
}","public boolean hasGroupfoot(int groupIndex){
  return _foots != null && groupIndex > -1 && groupIndex < _foots.size() && _foots.get(groupIndex) != null;
}"
16235,"@Override public Object getValue(ELContext ctx,Object base,Object property) throws NullPointerException, PropertyNotFoundException, ELException {
  if (ctx == null) {
    throw new NullPointerException();
  }
  if (base == null) {
    Integer numOfKids=(Integer)ctx.getContext(AstValue.class);
    if (numOfKids == null) {
      numOfKids=(Integer)ctx.getContext(AstIdentifier.class);
    }
    _numOfKids.push(numOfKids);
    _paths.push(new Path());
  }
  Integer numOfKids=_numOfKids.pop();
  Path path=_paths.pop();
  int nums=numOfKids.intValue() - 1;
  numOfKids=new Integer(nums);
  ctx.putContext(Integer.class,numOfKids);
  path.add(toNodeString(ctx),Objects.toString(property));
  ctx.putContext(Path.class,path);
  if (nums > 0) {
    _numOfKids.push(numOfKids);
    _paths.push(path);
  }
  return null;
}","@Override public Object getValue(ELContext ctx,Object base,Object property) throws NullPointerException, PropertyNotFoundException, ELException {
  if (ctx == null) {
    throw new NullPointerException();
  }
  if (base == null) {
    final Integer numOfKids=(Integer)ctx.getContext(AstIdentifier.class);
    _numOfKids.push(numOfKids);
    _paths.push(new Path());
  }
  Integer numOfKids=_numOfKids.pop();
  Path path=_paths.pop();
  int nums=numOfKids.intValue() - 1;
  numOfKids=new Integer(nums);
  ctx.putContext(Integer.class,numOfKids);
  path.add(toNodeString(ctx),Objects.toString(property));
  ctx.putContext(Path.class,path);
  if (nums > 0) {
    _numOfKids.push(numOfKids);
    _paths.push(path);
  }
  return null;
}"
16236,"private Set<TrackerNode> getAllTrackerNodesByBean(Object bean){
  final Set<Object> beans=_equalBeansMap.getEqualBeans(bean);
  final Set<TrackerNode> nodes=new LinkedHashSet<TrackerNode>();
  for (  Object obj : beans) {
    nodes.addAll(_beanMap.get(obj));
  }
  return nodes;
}","private Set<TrackerNode> getAllTrackerNodesByBean(Object bean){
  final Set<TrackerNode> results=new LinkedHashSet<TrackerNode>();
  getAllTrackerNodesByBean0(bean,results);
  return results;
}"
16237,"public void tieValue(Object comp,Object base,Object script,Object propName,Object value){
  if (base == null) {
    final Map<Object,TrackerNode> bindingNodes=_compMap.get(comp);
    if (bindingNodes != null) {
      final TrackerNode node=bindingNodes.get(script);
      if (node != null) {
        ((TrackerNodeImpl)node).setReferenceBinding((ReferenceBinding)((Component)comp).getAttribute(BinderImpl.REF_BINDING));
        if (value != null) {
          addBeanMap(node,value);
        }
 else {
          removeAllBeanMap(node);
          addNullMap(node);
        }
      }
    }
  }
 else {
    final Set<TrackerNode> baseNodes=getAllTrackerNodesByBean(base);
    if (baseNodes != null) {
      final Set<TrackerNode> propNodes=new LinkedHashSet<TrackerNode>();
      Object bean=null;
      for (      TrackerNode baseNode : baseNodes) {
        final TrackerNode node=baseNode.getDependent(script);
        if (node == null) {
          continue;
        }
        if (bean == null) {
          bean=node.getBean();
        }
        propNodes.add(node);
        if (BindELContext.isBracket((String)script)) {
          ((TrackerNodeImpl)baseNode).tieProperty(propName,script);
        }
      }
      @SuppressWarnings(""String_Node_Str"") final Set<TrackerNode> beanNodes=(Set<TrackerNode>)(bean == null ? Collections.emptySet() : getAllTrackerNodesByBean(bean));
      if (bean != null) {
        beanNodes.removeAll(propNodes);
      }
      final Set<ReferenceBinding> targetRefBindings=collectReferenceBindings(propNodes);
      if (value != null) {
        for (        TrackerNode node : propNodes) {
          addBeanMap(node,value);
        }
        for (        TrackerNode node : beanNodes) {
          final ReferenceBinding rbinding=((TrackerNodeImpl)node).getReferenceBinding();
          if (rbinding == null || targetRefBindings.contains(rbinding)) {
            addBeanMap(node,value);
          }
        }
      }
 else {
        for (        TrackerNode node : propNodes) {
          removeAllBeanMap(node);
        }
        for (        TrackerNode node : beanNodes) {
          final ReferenceBinding rbinding=((TrackerNodeImpl)node).getReferenceBinding();
          if (rbinding == null) {
            removeAllBeanMap(node);
          }
 else           if (targetRefBindings.contains(rbinding)) {
            addBeanMap(node,rbinding);
          }
        }
      }
    }
  }
}","public void tieValue(Object comp,Object base,Object script,Object propName,Object value){
  if (base == null) {
    final Map<Object,TrackerNode> bindingNodes=_compMap.get(comp);
    if (bindingNodes != null) {
      final TrackerNode node=bindingNodes.get(script);
      if (node != null) {
        if (value != null) {
          addBeanMap(node,value);
        }
 else {
          removeAllBeanMap(node);
          addNullMap(node);
        }
      }
    }
  }
 else {
    final Set<TrackerNode> baseNodes=getAllTrackerNodesByBean(base);
    if (baseNodes != null) {
      final Set<TrackerNode> propNodes=new LinkedHashSet<TrackerNode>();
      for (      TrackerNode baseNode : baseNodes) {
        final TrackerNode node=baseNode.getDependent(script);
        if (node == null) {
          continue;
        }
        propNodes.add(node);
        if (BindELContext.isBracket((String)script)) {
          ((TrackerNodeImpl)baseNode).tieProperty(propName,script);
        }
      }
      if (value != null) {
        for (        TrackerNode node : propNodes) {
          addBeanMap(node,value);
        }
      }
 else {
        for (        TrackerNode node : propNodes) {
          removeAllBeanMap(node);
        }
      }
    }
  }
}"
16238,"public Object getValue(ELContext ctx,Object base,Object property) throws PropertyNotFoundException, ELException {
  Object value=super.getValue(ctx,base,property);
  final ReferenceBinding rbinding=value instanceof ReferenceBinding ? (ReferenceBinding)value : null;
  if (rbinding != null) {
    value=rbinding.getValue((BindELContext)((EvaluationContext)ctx).getELContext());
  }
  tieValue(ctx,base,property,value != null ? value : rbinding,false,rbinding);
  return value;
}","public Object getValue(ELContext ctx,Object base,Object property) throws PropertyNotFoundException, ELException {
  Object value=super.getValue(ctx,base,property);
  final ReferenceBinding rbinding=value instanceof ReferenceBinding ? (ReferenceBinding)value : null;
  if (rbinding != null) {
    value=rbinding.getValue((BindELContext)((EvaluationContext)ctx).getELContext());
  }
  tieValue(ctx,base,property,rbinding != null ? rbinding : value,false);
  return value;
}"
16239,"public void setValue(ELContext ctx,Object base,Object property,Object value) throws PropertyNotFoundException, PropertyNotWritableException, ELException {
  if (base instanceof ReferenceBinding) {
    base=((ReferenceBinding)base).getValue((BindELContext)((EvaluationContext)ctx).getELContext());
  }
  super.setValue(ctx,base,property,value);
  tieValue(ctx,base,property,value,true,null);
}","public void setValue(ELContext ctx,Object base,Object property,Object value) throws PropertyNotFoundException, PropertyNotWritableException, ELException {
  if (base instanceof ReferenceBinding) {
    base=((ReferenceBinding)base).getValue((BindELContext)((EvaluationContext)ctx).getELContext());
  }
  super.setValue(ctx,base,property,value);
  tieValue(ctx,base,property,value,true);
}"
16240,"private void tieValue(ELContext elCtx,Object base,Object propName,Object value,boolean allownotify,ReferenceBinding refBinding){
  final BindELContext ctx=(BindELContext)((EvaluationContext)elCtx).getELContext();
  if (ctx.ignoreTracker())   return;
  final Binding binding=ctx.getBinding();
  if (binding != null) {
    final int nums=((Integer)ctx.getContext(Integer.class)).intValue();
    final Path path=getPathList(ctx);
    String script=null;
    if (base instanceof Form) {
      if (nums > 0) {
        return;
      }
 else {
        script=path.getTrackFieldName();
      }
    }
 else {
      script=path.getTrackProperty();
    }
    final Binder binder=binding.getBinder();
    final BindContext bctx=(BindContext)ctx.getAttribute(BinderImpl.BINDCTX);
    final Component ctxcomp=bctx != null ? bctx.getComponent() : binding.getComponent();
    final Object old=ctxcomp.setAttribute(BinderImpl.REF_BINDING,refBinding);
    try {
      ((BinderCtrl)binder).getTracker().tieValue(ctxcomp,base,script,propName,value);
    }
  finally {
      ctxcomp.setAttribute(BinderImpl.REF_BINDING,old);
    }
    if (base != null) {
      if (binding instanceof SaveBinding) {
        if (nums == 0) {
          saveEqualBeans(elCtx,base,(String)propName,value);
          if (allownotify) {
            if (base instanceof Form) {
              BindELContext.addNotifys(base,(String)propName,value,bctx);
              if (base instanceof FormExt)               BindELContext.addNotifys(((FormExt)base).getStatus(),""String_Node_Str"",null,bctx);
            }
 else {
              final Method m=(Method)ctx.getContext(Method.class);
              BindELContext.addNotifys(m,base,(String)propName,value,bctx);
            }
          }
        }
      }
 else       if (!(base instanceof Form) && binding instanceof LoadBinding) {
        final Method m=(Method)ctx.getContext(Method.class);
        if (m != null) {
          final boolean prompt=bctx != null && bctx.getCommandName() == null;
          if (prompt) {
            if (!(binding instanceof LoadFormBindingImpl) || ((LoadFormBindingImpl)binding).getSeriesLength() <= path.size()) {
              BindELContext.addDependsOnTrackings(m,path.getTrackBasePath(),path.getTrackFieldsList(),binding,bctx);
            }
          }
        }
      }
    }
  }
}","private void tieValue(ELContext elCtx,Object base,Object propName,Object value,boolean allownotify){
  final BindELContext ctx=(BindELContext)((EvaluationContext)elCtx).getELContext();
  if (ctx.ignoreTracker())   return;
  final Binding binding=ctx.getBinding();
  if (binding != null) {
    final int nums=((Integer)ctx.getContext(Integer.class)).intValue();
    final Path path=getPathList(ctx);
    String script=null;
    if (base instanceof Form) {
      if (nums > 0) {
        return;
      }
 else {
        script=path.getTrackFieldName();
      }
    }
 else {
      script=path.getTrackProperty();
    }
    final Binder binder=binding.getBinder();
    final BindContext bctx=(BindContext)ctx.getAttribute(BinderImpl.BINDCTX);
    final Component ctxcomp=bctx != null ? bctx.getComponent() : binding.getComponent();
    ((BinderCtrl)binder).getTracker().tieValue(ctxcomp,base,script,propName,value);
    if (base != null) {
      if (binding instanceof SaveBinding) {
        if (nums == 0) {
          saveEqualBeans(elCtx,base,(String)propName,value);
          if (allownotify) {
            if (base instanceof Form) {
              BindELContext.addNotifys(base,(String)propName,value,bctx);
              if (base instanceof FormExt)               BindELContext.addNotifys(((FormExt)base).getStatus(),""String_Node_Str"",null,bctx);
            }
 else {
              final Method m=(Method)ctx.getContext(Method.class);
              BindELContext.addNotifys(m,base,(String)propName,value,bctx);
            }
          }
        }
      }
 else       if (!(base instanceof Form) && binding instanceof LoadBinding) {
        final Method m=(Method)ctx.getContext(Method.class);
        if (m != null) {
          final boolean prompt=bctx != null && bctx.getCommandName() == null;
          if (prompt) {
            if (!(binding instanceof LoadFormBindingImpl) || ((LoadFormBindingImpl)binding).getSeriesLength() <= path.size()) {
              BindELContext.addDependsOnTrackings(m,path.getTrackBasePath(),path.getTrackFieldsList(),binding,bctx);
            }
          }
        }
      }
    }
  }
}"
16241,"/** 
 * Add event listeners to components based on the controller.
 * @param component the reference component for selector 
 * @param controller the controller of event listening methods
 */
public static void wireEventListeners(final Component component,final Object controller){
  Reflections.forMethods(controller.getClass(),Listen.class,new MethodRunner<Listen>(){
    public void onMethod(    Class<?> clazz,    Method method,    Listen anno){
      if ((method.getModifiers() & Modifier.STATIC) != 0)       throw new UiException(""String_Node_Str"" + method.getName());
      if (method.getParameterTypes().length > 1)       throw new UiException(""String_Node_Str"" + ""String_Node_Str"" + method.getName());
      for (      String[] strs : splitListenAnnotationValues(anno.value())) {
        String name=strs[0];
        if (name == null)         name=""String_Node_Str"";
        Iterable<Component> iter=iterable(component,strs[1]);
        for (        Component c : iter) {
          Set<String> set=getEvtLisSet(c,EVT_LIS);
          String mhash=method.toString();
          if (set.contains(mhash))           continue;
          c.addEventListener(name,new ComposerEventListener(method,controller));
          set.add(mhash);
        }
      }
    }
  }
);
}","/** 
 * Add event listeners to components based on the controller.
 * @param component the reference component for selector 
 * @param controller the controller of event listening methods
 */
public static void wireEventListeners(final Component component,final Object controller){
  Reflections.forMethods(controller.getClass(),Listen.class,new MethodRunner<Listen>(){
    public void onMethod(    Class<?> clazz,    Method method,    Listen anno){
      if ((method.getModifiers() & Modifier.STATIC) != 0)       throw new UiException(""String_Node_Str"" + method.getName());
      if (method.getParameterTypes().length > 1)       throw new UiException(""String_Node_Str"" + ""String_Node_Str"" + method.getName());
      for (      String[] strs : splitListenAnnotationValues(anno.value())) {
        String name=strs[0];
        if (name == null)         name=""String_Node_Str"";
        Iterable<Component> iter=iterable(component,strs[1]);
        for (        Component c : iter) {
          Set<String> set=getEvtLisSet(c,EVT_LIS);
          String mhash=name + ""String_Node_Str"" + method.toString();
          if (set.contains(mhash))           continue;
          c.addEventListener(name,new ComposerEventListener(method,controller));
          set.add(mhash);
        }
      }
    }
  }
);
}"
16242,"/** 
 * {@inheritDoc} 
 */
@Override public void setSelection(Collection<? extends E> selection){
  if (isSelectionChanged(selection)) {
    if (!_multiple && _selection.size() > 1)     throw new IllegalArgumentException(""String_Node_Str"" + selection);
    _selection.clear();
    _selection.addAll(selection);
    if (selection.isEmpty()) {
      fireSelectionEvent(null);
    }
 else     fireSelectionEvent(selection.iterator().next());
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void setSelection(Collection<? extends E> selection){
  if (isSelectionChanged(selection)) {
    if (!_multiple && selection.size() > 1)     throw new IllegalArgumentException(""String_Node_Str"" + selection);
    _selection.clear();
    _selection.addAll(selection);
    if (selection.isEmpty()) {
      fireSelectionEvent(null);
    }
 else     fireSelectionEvent(selection.iterator().next());
  }
}"
16243,"protected FormBindingImpl(Binder binder,Component comp,String formId,String accessExpr,ConditionType conditionType,String command,Map<String,Object> bindingArgs){
  super(binder,comp,bindingArgs);
  this._formId=formId;
  this._accessInfo=AccessInfo.create(this,accessExpr,Form.class,conditionType,command,ignoreTracker());
  _fieldExprs=new HashMap<String,ExpressionX>();
}","protected FormBindingImpl(Binder binder,Component comp,String formId,String accessExpr,ConditionType conditionType,String command,Map<String,Object> bindingArgs){
  super(binder,comp,bindingArgs);
  this._formId=formId;
  this._accessInfo=AccessInfo.create(this,accessExpr,Object.class,conditionType,command,ignoreTracker());
  _fieldExprs=new HashMap<String,ExpressionX>();
}"
16244,"public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  if (!(value instanceof Form)) {
    throw new UiException(""String_Node_Str"" + value);
  }
  ((BinderCtrl)getBinder()).storeForm(getComponent(),getFormId(),(Form)value);
}","public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  final Binder binder=getBinder();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  if (!(value instanceof Form)) {
    final Form form=getFormBean();
    if (form instanceof FormExt) {
      for (      String field : ((FormExt)form).getLoadFieldNames()) {
        final ExpressionX expr=getFieldExpression(eval,field);
        if (expr != null) {
          final Object fieldval=eval.getValue(ctx,comp,expr);
          form.setField(field,fieldval);
        }
      }
      ((FormExt)form).resetDirty();
    }
    binder.notifyChange(form,""String_Node_Str"");
    if (form instanceof FormExt) {
      binder.notifyChange(((FormExt)form).getStatus(),""String_Node_Str"");
    }
  }
 else {
    ((BinderCtrl)binder).storeForm(getComponent(),getFormId(),(Form)value);
  }
}"
16245,"/** 
 * Constructs a cachemap by using LinkedHashMap internally.
 */
public CacheMap(int cap,float load){
  _map=new LinkedHashMap<K,Value<V>>(cap,load,true);
  init();
}","/** 
 * Constructs a cachemap by using LinkedHashMap internally.
 */
public CacheMap(int cap,float load){
  _map=new LinkedHashMap<K,Value<V>>(cap,load,isAccessOrder());
  init();
}"
16246,"public boolean containsKey(Object key){
  tryExpunge();
  return _map.containsKey(key);
}","public boolean containsKey(Object key){
  tryExpunge();
  return containsKeyWithoutExpunge(key);
}"
16247,"/** 
 * Returns the value without trying to expunge first. It is useful if you want to preserve all entries.
 */
public V getWithoutExpunge(Object key){
  final Value<V> v=_map.get(key);
  if (v != null) {
    v.updateAccessTime();
    return v.value;
  }
  return null;
}","/** 
 * Returns the value without trying to expunge for more memory. It is useful if you want to preserve all entries.
 */
public V getWithoutExpunge(Object key){
  final Value<V> v=_map.get(key);
  if (v != null) {
    v.updateAccessTime();
    return v.value;
  }
  return null;
}"
16248,"@SuppressWarnings(""String_Node_Str"") public Object clone(){
  final CacheMap<K,V> clone;
  try {
    clone=(CacheMap<K,V>)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone._map=new LinkedHashMap<K,Value<V>>(clone._map);
  for (  Map.Entry<K,Value<V>> me : clone._map.entrySet()) {
    me.setValue((Value<V>)me.getValue().clone());
  }
  clone.init();
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public Object clone(){
  final CacheMap<K,V> clone;
  try {
    clone=(CacheMap<K,V>)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone._inExpunge=false;
  clone._map=new LinkedHashMap<K,Value<V>>(this._map);
  for (  Map.Entry<K,Value<V>> me : clone._map.entrySet()) {
    me.setValue((Value<V>)me.getValue().clone());
  }
  clone.init();
  return clone;
}"
16249,"/** 
 * Expunges if   {@link #shallExpunge} is true. 
 */
private void tryExpunge(){
  if (shallExpunge()) {
    if (_inExpunge)     throw new IllegalStateException(""String_Node_Str"");
    try {
      expunge();
    }
  finally {
      newRef();
    }
  }
}","/** 
 * Expunges if   {@link #shallExpunge} is true. 
 */
private void tryExpunge(){
  if (shallExpunge())   doExpunge();
}"
16250,"@Override public V put(K key,V value){
  V result=value;
synchronized (this) {
    if (!Objects.equals(value,_cache.get(key))) {
      result=syncToWriteCache().put(key,value);
      _moreInWriteCache=true;
      if (_cache.containsKey(key))       syncToReadCache();
    }
  }
  return result;
}","@Override public V put(K key,V value){
  V result=value;
synchronized (this) {
    if (!Objects.equals(value,_cache.getWithoutExpunge(key))) {
      result=syncToWriteCache().put(key,value);
      _moreInWriteCache=true;
      if (_cache.containsKeyWithoutExpunge(key))       syncToReadCache();
    }
  }
  return result;
}"
16251,"@Override public V remove(Object key){
  V result=null;
synchronized (this) {
    if (!_cache.containsKey(key) && !_moreInWriteCache)     return null;
    result=syncToWriteCache().remove(key);
    if (_cache.containsKey(key))     syncToReadCache();
  }
  return result;
}","@Override public V remove(Object key){
  V result=null;
synchronized (this) {
    if (!_cache.containsKeyWithoutExpunge(key) && !_moreInWriteCache)     return null;
    result=syncToWriteCache().remove(key);
    if (_cache.containsKeyWithoutExpunge(key))     syncToReadCache();
  }
  return result;
}"
16252,"@Override public E getChild(int[] path){
  E parent=getRoot();
  E node=null;
  int childCount=getChildCount(parent);
  for (int i=0; i < path.length; i++) {
    if (path[i] < 0 || path[i] > childCount)     return null;
    node=getChild(parent,path[i]);
    if (node != null && (childCount=getChildCount(node)) > 0) {
      parent=node;
    }
 else     if (i != path.length - 1) {
      return null;
    }
  }
  return node;
}","@Override public E getChild(int[] path){
  E parent=getRoot();
  if (path.length == 0)   return parent;
  E node=null;
  int childCount=getChildCount(parent);
  for (int i=0; i < path.length; i++) {
    if (path[i] < 0 || path[i] > childCount)     return null;
    node=getChild(parent,path[i]);
    if (node != null && (childCount=getChildCount(node)) > 0) {
      parent=node;
    }
 else     if (i != path.length - 1) {
      return null;
    }
  }
  return node;
}"
16253,"public void reloadMessages(Locale locale) throws IOException {
  if (locale == null)   locale=Locales.getCurrent();
  final StringBuffer sb=new StringBuffer(4096);
  final Locale oldl=Locales.setThreadLocal(locale);
  try {
    final Execution exec=Executions.getCurrent();
    sb.append(loadJS(exec,""String_Node_Str""));
    sb.append(Wpds.outLocaleJavaScript());
    sb.append(loadJS(exec,""String_Node_Str""));
  }
  finally {
    Locales.setThreadLocal(oldl);
  }
  Clients.response(""String_Node_Str"",new AuScript(null,sb.toString()));
}","public void reloadMessages(Locale locale) throws IOException {
  if (locale == null)   locale=Locales.getCurrent();
  final StringBuffer sb=new StringBuffer(4096);
  final Locale oldl=Locales.setThreadLocal(locale);
  try {
    final Execution exec=Executions.getCurrent();
    sb.append(loadJS(exec,""String_Node_Str""));
    sb.append(Wpds.outLocaleJavaScript());
    for (    LanguageDefinition langdef : LanguageDefinition.getByDeviceType(getType()))     for (    MessageLoader loader : langdef.getMessageLoaders())     loader.load(sb,exec);
  }
  finally {
    Locales.setThreadLocal(oldl);
  }
  Clients.response(""String_Node_Str"",new AuScript(null,sb.toString()));
}"
16254,"private static String loadJS(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=exec.getDesktop().getWebApp().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}","/** 
 * Loads the content of a javascript file as a String.
 */
public static String loadJS(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=exec.getDesktop().getWebApp().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}"
16255,"private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    if (s != null && !""String_Node_Str"".equals(s))     compdef.setBlankPreserved(true);
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}","private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(message(""String_Node_Str"",root));
  }
 else {
    final String ns=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str""),PageRenderer.class).newInstance();
    final List<String> exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(message(""String_Node_Str"" + lang,root));
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (  Element el : root.getElements(""String_Node_Str"")) {
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    String mergeTo=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=mergeTo != null && !""String_Node_Str"".equals(mergeTo);
    if (merge && ""String_Node_Str"".equals(mergeTo))     mergeTo=""String_Node_Str"";
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.unmergeJavaScriptPackage(pkg,mergeTo);
      }
 else {
        langdef.mergeJavaScriptPackage(pkg,mergeTo);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(message(""String_Node_Str"",el));
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(message(""String_Node_Str"",el));
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(message(""String_Node_Str"",attr));
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class<? extends Component> cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm,Component.class);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(message(""String_Node_Str"",el));
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(message(""String_Node_Str"",el));
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    parseTextAs(compdef,el.getElement(""String_Node_Str""));
    String s=el.getElementValue(""String_Node_Str"",true);
    if (s != null && !""String_Node_Str"".equals(s))     compdef.setBlankPreserved(true);
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}"
16256,"public void reloadMessages(Locale locale) throws IOException {
  if (locale == null)   locale=Locales.getCurrent();
  final StringBuffer sb=new StringBuffer(4096);
  final Locale oldl=Locales.setThreadLocal(locale);
  try {
    final Execution exec=Executions.getCurrent();
    sb.append(loadJS(exec,""String_Node_Str""));
    sb.append(Wpds.outLocaleJavaScript());
    sb.append(loadJS(exec,""String_Node_Str""));
  }
  finally {
    Locales.setThreadLocal(oldl);
  }
  Clients.response(""String_Node_Str"",new AuScript(null,sb.toString()));
}","public void reloadMessages(Locale locale) throws IOException {
  if (locale == null)   locale=Locales.getCurrent();
  final StringBuffer sb=new StringBuffer(4096);
  final Locale oldl=Locales.setThreadLocal(locale);
  try {
    final Execution exec=Executions.getCurrent();
    sb.append(loadJS(exec,""String_Node_Str""));
    sb.append(Wpds.outLocaleJavaScript());
    for (Iterator it=LanguageDefinition.getByDeviceType(getType()).iterator(); it.hasNext(); ) {
      final LanguageDefinition langdef=(LanguageDefinition)it.next();
      for (Iterator mit=langdef.getMessageLoaders().iterator(); mit.hasNext(); )       ((MessageLoader)mit.next()).load(sb,exec);
    }
  }
  finally {
    Locales.setThreadLocal(oldl);
  }
  Clients.response(""String_Node_Str"",new AuScript(null,sb.toString()));
}"
16257,"private static String loadJS(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=exec.getDesktop().getWebApp().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}","/** 
 * Loads the content of a javascript file as a String.
 */
public static String loadJS(Execution exec,String path) throws IOException {
  path=exec.locate(path);
  InputStream is=exec.getDesktop().getWebApp().getResourceAsStream(path);
  if (is == null)   throw new UiException(""String_Node_Str"" + path);
  final byte[] bs=Files.readAll(is);
  Files.close(is);
  return new String(bs,""String_Node_Str"");
}"
16258,"private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(""String_Node_Str"");
  }
 else {
    final String ns=(String)IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=(String)IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str"")).newInstance();
    final List exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(""String_Node_Str"" + lang);
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.removeMergeJavaScriptPackage(pkg);
      }
 else {
        langdef.addMergeJavaScriptPackage(pkg);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(""String_Node_Str"" + el.getLocator());
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(""String_Node_Str"" + el.getLocator());
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(""String_Node_Str"" + el.getLocator());
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(""String_Node_Str"" + attr.getLocator());
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(""String_Node_Str"" + el.getLocator());
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(""String_Node_Str"" + el.getLocator());
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    String s=el.getElementValue(""String_Node_Str"",true);
    if (s != null) {
      noEL(""String_Node_Str"",s,el);
      compdef.setTextAs(s);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s != null && !""String_Node_Str"".equals(s))     compdef.setBlankPreserved(true);
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}","private static void parseLang(Document doc,Locator locator,URL url,boolean addon) throws Exception {
  final Element root=doc.getRootElement();
  final String lang=IDOMs.getRequiredElementValue(root,""String_Node_Str"");
  final LanguageDefinition langdef;
  final Device device;
  if (addon) {
    if (log.debugable())     log.debug(""String_Node_Str"" + lang + ""String_Node_Str""+ root.getElementValue(""String_Node_Str"",true));
    langdef=LanguageDefinition.lookup(lang);
    device=Devices.getDevice(langdef.getDeviceType());
    if (root.getElement(""String_Node_Str"") != null)     throw new UiException(""String_Node_Str"");
  }
 else {
    final String ns=(String)IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    final String deviceType=(String)IDOMs.getRequiredElementValue(root,""String_Node_Str"");
    PageRenderer pageRenderer=(PageRenderer)locateClass(IDOMs.getRequiredElementValue(root,""String_Node_Str"")).newInstance();
    final List exts=parseExtensions(root);
    if (exts.isEmpty())     throw new UiException(""String_Node_Str"" + lang);
    String ignoreCase=root.getElementValue(""String_Node_Str"",true);
    String bNative=root.getElementValue(""String_Node_Str"",true);
    langdef=new LanguageDefinition(deviceType,lang,ns,exts,pageRenderer,""String_Node_Str"".equals(ignoreCase),""String_Node_Str"".equals(bNative),locator);
    device=Devices.getDevice(deviceType);
  }
  parsePI(langdef,doc);
  parseLabelTemplate(langdef,root);
  parseDynamicTag(langdef,root);
  parseMacroTemplate(langdef,root);
  parseNativeTemplate(langdef,root);
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String clsname=el.getText().trim();
    if (Strings.isEmpty(clsname))     throw new UiException(""String_Node_Str"" + lang);
    MessageLoader msgLoader=(MessageLoader)locateClass(clsname).newInstance();
    langdef.addMessageLoader(msgLoader);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    Library.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String nm=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final String val=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    System.setProperty(nm,val);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    String src=el.getAttributeValue(""String_Node_Str""), pkg=el.getAttributeValue(""String_Node_Str"");
    final boolean merge=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    final boolean ondemand=""String_Node_Str"".equals(el.getAttributeValue(""String_Node_Str""));
    if (pkg != null) {
      if (src != null)       log.warning(""String_Node_Str"" + el.getLocator());
      if (!ondemand && !merge) {
        src=""String_Node_Str"" + device.packageToPath(pkg);
        pkg=null;
      }
    }
    final String ctn=el.getText(true);
    final JavaScript js;
    if (pkg != null && pkg.length() > 0) {
      if (ondemand) {
        langdef.removeJavaScript(""String_Node_Str"" + device.packageToPath(pkg));
        langdef.removeMergeJavaScriptPackage(pkg);
      }
 else {
        langdef.addMergeJavaScriptPackage(pkg);
      }
      continue;
    }
 else     if (src != null && src.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(""String_Node_Str"" + el.getLocator());
      final String charset=el.getAttributeValue(""String_Node_Str"");
      js=new JavaScript(src,charset);
    }
 else     if (ctn != null && ctn.length() > 0) {
      js=new JavaScript(ctn);
    }
 else {
      log.warning(""String_Node_Str"" + el.getLocator());
      continue;
    }
    langdef.addJavaScript(js);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    langdef.addJavaScriptModule(IDOMs.getRequiredAttributeValue(el,""String_Node_Str""),IDOMs.getRequiredAttributeValue(el,""String_Node_Str""));
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String href=el.getAttributeValue(""String_Node_Str"");
    final String ctn=el.getText(true);
    final StyleSheet ss;
    if (href != null && href.length() > 0) {
      if (ctn != null && ctn.length() > 0)       throw new UiException(""String_Node_Str"" + el.getLocator());
      ss=new StyleSheet(href,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),false);
    }
 else     if (ctn != null && ctn.length() > 0) {
      ss=new StyleSheet(ctn,el.getAttributeValue(""String_Node_Str""),el.getAttributeValue(""String_Node_Str""),true);
    }
 else {
      throw new UiException(""String_Node_Str"" + el.getLocator());
    }
    langdef.addStyleSheet(ss);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String zslang;
    final Attribute attr=el.getAttributeItem(""String_Node_Str"");
    if (attr == null) {
      zslang=""String_Node_Str"";
    }
 else {
      zslang=attr.getValue();
      if (zslang == null || zslang.length() == 0)       throw new UiException(""String_Node_Str"" + attr.getLocator());
    }
    final String s=el.getText(true);
    final String eachTime=el.getAttributeValue(""String_Node_Str"");
    if (""String_Node_Str"".equals(eachTime))     langdef.addEachTimeScript(zslang,s);
 else     langdef.addInitScript(zslang,s);
  }
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String name=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    String clsnm=el.getElementValue(""String_Node_Str"",true);
    Class cls=null;
    if (clsnm != null) {
      if (clsnm.length() > 0) {
        noEL(""String_Node_Str"",clsnm,el);
        try {
          cls=locateClass(clsnm);
        }
 catch (        Throwable ex) {
          log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ clsnm+ ""String_Node_Str""+ ex.getClass().getName()+ ""String_Node_Str""+ ex.getMessage()+ (ex instanceof NoClassDefFoundError ? ""String_Node_Str"" : ""String_Node_Str"" + el.getLocator()));
          log.debug(ex);
        }
      }
 else {
        clsnm=null;
      }
    }
    final String macroURI=el.getElementValue(""String_Node_Str"",true);
    final ComponentDefinitionImpl compdef;
    boolean extend=false;
    if (macroURI != null && macroURI.length() != 0) {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      final String inline=el.getElementValue(""String_Node_Str"",true);
      compdef=(ComponentDefinitionImpl)langdef.getMacroDefinition(name,macroURI,""String_Node_Str"".equals(inline),null);
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
 else     if (el.getElement(""String_Node_Str"") != null) {
      extend=true;
      final String extnm=el.getElementValue(""String_Node_Str"",true);
      if (log.finerable())       log.finer(""String_Node_Str"" + name + ""String_Node_Str""+ extnm);
      final ComponentDefinition ref=langdef.getComponentDefinitionIfAny(extnm);
      if (ref == null) {
        log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ extnm+ ""String_Node_Str""+ el.getLocator());
        continue;
      }
      if (ref.isMacro())       throw new UiException(""String_Node_Str"" + el.getLocator());
      if (extnm.equals(name)) {
        compdef=(ComponentDefinitionImpl)ref;
      }
 else {
        compdef=(ComponentDefinitionImpl)ref.clone(ref.getLanguageDefinition(),name);
        compdef.setDeclarationURL(url);
      }
      if (cls != null)       compdef.setImplementationClass(cls);
 else       if (clsnm != null)       compdef.setImplementationClass(clsnm);
      langdef.addComponentDefinition(compdef);
    }
 else {
      if (log.finerable())       log.finer(""String_Node_Str"" + name);
      if (cls == null && clsnm == null)       throw new UiException(""String_Node_Str"" + el.getLocator());
      compdef=cls != null ? new ComponentDefinitionImpl(langdef,null,name,cls) : new ComponentDefinitionImpl(langdef,null,name,clsnm);
      compdef.setDeclarationURL(url);
      langdef.addComponentDefinition(compdef);
    }
    String s=el.getElementValue(""String_Node_Str"",true);
    if (s != null) {
      noEL(""String_Node_Str"",s,el);
      compdef.setTextAs(s);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s != null && !""String_Node_Str"".equals(s))     compdef.setBlankPreserved(true);
    String wgtnm=el.getElementValue(""String_Node_Str"",true);
    WidgetDefinition wgtdef=null;
    if (wgtnm == null && extend)     wgtnm=compdef.getDefaultWidgetClass(null);
    if (wgtnm != null) {
      if (!withEL(wgtnm))       wgtdef=getWidgetDefinition(langdef,compdef,wgtnm);
      compdef.setDefaultWidgetClass(wgtnm);
    }
    s=el.getElementValue(""String_Node_Str"",true);
    if (s == null)     s=el.getElementValue(""String_Node_Str"",true);
    compdef.setApply(s);
    for (Iterator i=el.getElements(""String_Node_Str"").iterator(); i.hasNext(); ) {
      final Element e=(Element)i.next();
      final String nm=IDOMs.getRequiredElementValue(e,""String_Node_Str"");
      final String moldURI=e.getElementValue(""String_Node_Str"",true);
      String cssURI=e.getElementValue(""String_Node_Str"",true);
      final String wn=e.getElementValue(""String_Node_Str"",true);
      noEL(""String_Node_Str"",moldURI,e);
      noEL(""String_Node_Str"",cssURI,e);
      compdef.addMold(nm,wn != null ? wn : wgtnm);
      WidgetDefinition wd=wn == null ? wgtdef : withEL(wn) ? null : getWidgetDefinition(langdef,compdef,wn);
      if (moldURI != null) {
        if (wd != null)         wd.addMold(nm,moldURI);
 else         log.error(""String_Node_Str"" + nm + ""String_Node_Str""+ name+ ""String_Node_Str""+ ((wn != null && withEL(wn)) || (wgtnm != null && withEL(wgtnm)) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e.getLocator());
      }
      if (cssURI != null && cssURI.length() > 0) {
        final char cc=cssURI.charAt(0);
        if (cc != '/' && cc != '~') {
          String n=wn != null ? wn : wgtnm;
          if (!withEL(n)) {
            int k=n.lastIndexOf('.');
            cssURI=""String_Node_Str"" + device.toAbsolutePath(n.substring(0,k).replace('.','/') + '/' + cssURI);
          }
 else {
            log.error(""String_Node_Str"" + e.getLocator());
          }
        }
        langdef.addCSSURI(cssURI);
      }
    }
    for (Iterator e=parseCustAttrs(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addCustomAttribute((String)me.getKey(),(String)me.getValue());
    }
    for (Iterator e=parseProps(el).entrySet().iterator(); e.hasNext(); ) {
      final Map.Entry me=(Map.Entry)e.next();
      compdef.addProperty((String)me.getKey(),(String)me.getValue());
    }
    parseAnnots(compdef,el);
  }
}"
16259,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  readSelection(s);
  _listeners=new ArrayList<ListDataListener>();
  Serializables.smartRead(s,_listeners);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  readSelection(s);
  _listeners=new ArrayList<ListDataListener>();
  Serializables.smartRead(s,_listeners);
}"
16260,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  @SuppressWarnings(""String_Node_Str"") Set selection=_selection;
  _selection=newEmptySelection();
  for (  final Object key : selection) {
    if (_map.containsKey(key))     for (    Map.Entry<K,V> entry : _map.entrySet())     if (Objects.equals(key,entry.getKey()))     _selection.add(entry);
  }
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  @SuppressWarnings(""String_Node_Str"") Set selection=_selection;
  _selection=newEmptySelection();
  for (  final Object key : selection) {
    if (_map.containsKey(key))     for (    Map.Entry<K,V> entry : _map.entrySet())     if (Objects.equals(key,entry.getKey()))     _selection.add(entry);
  }
}"
16261,"@Override protected void readSelection(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  _selection=newEmptySelection();
  int size=s.readInt();
  while (--size >= 0) {
    final Object key=s.readObject();
    if (_map.containsKey(key))     for (    Map.Entry<K,V> entry : _map.entrySet())     if (Objects.equals(key,entry.getKey()))     _selection.add(entry);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void readSelection(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  _selection=newEmptySelection();
  int size=s.readInt();
  while (--size >= 0) {
    ((Set)_selection).add(s.readObject());
  }
}"
16262,"@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  if (model != null && !(model instanceof Selectable)) {
    throw new UiException(""String_Node_Str"");
  }
  final Set<Listitem> items=new LinkedHashSet<Listitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (vals != null && vals.size() > 0) {
    if (model != null) {
      for (      Object obj : vals) {
        ((Selectable<Object>)model).addToSelection(obj);
      }
    }
 else {
      for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
        final Listitem li=(Listitem)it.next();
        Object bean=li.getValue();
        if (vals.contains(bean)) {
          items.add(li);
        }
      }
    }
  }
  return model == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  if (model != null && !(model instanceof Selectable)) {
    throw new UiException(""String_Node_Str"");
  }
  if (model != null) {
    ((Selectable<?>)model).clearSelection();
  }
  final Set<Listitem> items=new LinkedHashSet<Listitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (vals != null && vals.size() > 0) {
    if (model != null) {
      for (      Object obj : vals) {
        ((Selectable<Object>)model).addToSelection(obj);
      }
    }
 else {
      for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
        final Listitem li=(Listitem)it.next();
        Object bean=li.getValue();
        if (vals.contains(bean)) {
          items.add(li);
        }
      }
    }
  }
  return model == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}"
16263,"@SuppressWarnings(""String_Node_Str"") public Object clone(){
  final AbstractListModel clone;
  try {
    clone=(AbstractListModel)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone._listeners=new LinkedList<ListDataListener>();
  clone._selection.clear();
  clone._selection.addAll(_selection);
  return clone;
}","@SuppressWarnings(""String_Node_Str"") public Object clone(){
  final AbstractListModel clone;
  try {
    clone=(AbstractListModel)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone._listeners=new LinkedList<ListDataListener>();
  clone._selection=clone.newEmptySelection();
  clone._selection.addAll(_selection);
  return clone;
}"
16264,"private static String resolveName(String name){
  return name != null && name.charAt(0) == '/' ? name.substring(1) : name;
}","private static String resolveName(String name){
  return name != null && name.startsWith(""String_Node_Str"") ? name.substring(1) : name;
}"
16265,"/** 
 * Parse config.xml. 
 */
private static void parseConfig(Map<String,URL> urls,Element root,Locator loc){
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String s=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final URL url=loc.getResource(s.charAt(0) == '/' ? s.substring(1) : s);
    if (url != null) {
      urls.put(IDOMs.getRequiredElementValue(el,""String_Node_Str""),url);
    }
 else {
      log.error(s + ""String_Node_Str"" + el.getLocator());
    }
  }
}","/** 
 * Parse config.xml. 
 */
private static void parseConfig(Map<String,URL> urls,Element root,Locator loc){
  for (Iterator it=root.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element el=(Element)it.next();
    final String s=IDOMs.getRequiredElementValue(el,""String_Node_Str"");
    final URL url=loc.getResource(s.startsWith(""String_Node_Str"") ? s.substring(1) : s);
    if (url != null) {
      urls.put(IDOMs.getRequiredElementValue(el,""String_Node_Str""),url);
    }
 else {
      log.error(s + ""String_Node_Str"" + el.getLocator());
    }
  }
}"
16266,"/** 
 * Returns the options, a combination of   {@link #BUSY_IGNORE},  {@link #DUPLICATE_IGNORE} and {@link #REPEAT_IGNORE}.
 * @since 5.0.0
 */
public int getOptions(){
  if (_opts == null) {
    if (_comp != null)     _opts=(Integer)((ComponentCtrl)_comp).getClientEvents().get(_cmd);
    if (_opts == null)     _opts=new Integer(0);
  }
  return _opts.intValue();
}","/** 
 * Returns the options, a combination of   {@link #BUSY_IGNORE},  {@link #DUPLICATE_IGNORE} and {@link #REPEAT_IGNORE}.
 * @since 5.0.0
 */
public int getOptions(){
  if (_opts == null) {
    if (_comp != null)     _opts=((ComponentCtrl)_comp).getClientEvents().get(_cmd);
    if (_opts == null)     _opts=new Integer(0);
  }
  return _opts.intValue();
}"
16267,"/** 
 * Retrieves the media from   {@link DynamicMedia#getMedia}.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pi) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.sendError(response.SC_GONE,Messages.get(MZk.PAGE_NOT_FOUND,pi));
    return;
  }
  int j=pi.indexOf('/',1) + 1;
  int k=pi.indexOf('/',j);
  if (j <= 0 || k <= 0)   throw new ServletException(""String_Node_Str"" + pi);
  final String dtid=pi.substring(j,k);
  final int l=pi.indexOf('/',++k);
  final String uuid=l >= 0 ? pi.substring(k,l) : pi.substring(k);
  Media media;
  boolean download=false;
  try {
    final WebApp wapp=sess.getWebApp();
    final WebAppCtrl wappc=(WebAppCtrl)wapp;
    final UiEngine uieng=wappc.getUiEngine();
    final Desktop desktop=wappc.getDesktopCache(sess).getDesktop(dtid);
    final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
    final Execution oldexec=Executions.getCurrent();
    final Execution exec=new ExecutionImpl(_ctx,request,response,desktop,null);
    uieng.activate(exec);
    final Configuration config=wapp.getConfiguration();
    boolean err=false;
    try {
      config.invokeExecutionInits(exec,oldexec);
      desktopCtrl.invokeExecutionInits(exec,oldexec);
      media=desktopCtrl.getDownloadMedia(uuid,false);
      if (media != null) {
        download=true;
      }
 else {
        final Component comp=desktop.getComponentByUuid(uuid);
        final Object cc=((ComponentCtrl)comp).getExtraCtrl();
        if (!(cc instanceof DynamicMedia))         throw new ServletException(DynamicMedia.class + ""String_Node_Str"" + comp);
        int m=l >= 0 ? pi.indexOf('/',l + 1) : -1;
        if (m < 0)         m=l;
        media=((DynamicMedia)cc).getMedia(m >= 0 ? pi.substring(m) : ""String_Node_Str"");
        if (media == null) {
          response.sendError(response.SC_GONE,Messages.get(MZk.PAGE_NOT_FOUND,pi + ""String_Node_Str"" + comp));
          return;
        }
      }
    }
 catch (    Throwable ex) {
      err=true;
      final List<Throwable> errs=new LinkedList<Throwable>();
      errs.add(ex);
      desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
      config.invokeExecutionCleanups(exec,oldexec,errs);
      final StringBuffer errmsg=new StringBuffer(100);
      if (!errs.isEmpty()) {
        for (Iterator it=errs.iterator(); it.hasNext(); ) {
          final Throwable t=(Throwable)it.next();
          log.realCauseBriefly(""String_Node_Str"" + pi,t);
          errmsg.append('\n').append(Exceptions.getMessage(t));
        }
      }
      response.sendError(response.SC_GONE,Messages.get(MZk.PAGE_FAILED,new Object[]{pi,errmsg,""String_Node_Str""}));
      return;
    }
 finally {
      if (!err) {
        desktopCtrl.invokeExecutionCleanups(exec,oldexec,null);
        config.invokeExecutionCleanups(exec,oldexec,null);
      }
      uieng.deactivate(exec);
    }
  }
 catch (  ComponentNotFoundException ex) {
    response.sendError(response.SC_GONE,Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid));
    return;
  }
  Https.write(request,response,media,download,false);
}","/** 
 * Retrieves the media from   {@link DynamicMedia#getMedia}.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pi) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.sendError(HttpServletResponse.SC_GONE,Messages.get(MZk.PAGE_NOT_FOUND,pi));
    return;
  }
  int j=pi.indexOf('/',1) + 1;
  int k=pi.indexOf('/',j);
  if (j <= 0 || k <= 0)   throw new ServletException(""String_Node_Str"" + pi);
  final String dtid=pi.substring(j,k);
  final int l=pi.indexOf('/',++k);
  final String uuid=l >= 0 ? pi.substring(k,l) : pi.substring(k);
  Media media;
  boolean download=false;
  try {
    final WebApp wapp=sess.getWebApp();
    final WebAppCtrl wappc=(WebAppCtrl)wapp;
    final UiEngine uieng=wappc.getUiEngine();
    final Desktop desktop=wappc.getDesktopCache(sess).getDesktop(dtid);
    final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
    final Execution oldexec=Executions.getCurrent();
    final Execution exec=new ExecutionImpl(_ctx,request,response,desktop,null);
    uieng.activate(exec);
    final Configuration config=wapp.getConfiguration();
    boolean err=false;
    try {
      config.invokeExecutionInits(exec,oldexec);
      desktopCtrl.invokeExecutionInits(exec,oldexec);
      media=desktopCtrl.getDownloadMedia(uuid,false);
      if (media != null) {
        download=true;
      }
 else {
        final Component comp=desktop.getComponentByUuid(uuid);
        final Object cc=((ComponentCtrl)comp).getExtraCtrl();
        if (!(cc instanceof DynamicMedia))         throw new ServletException(DynamicMedia.class + ""String_Node_Str"" + comp);
        int m=l >= 0 ? pi.indexOf('/',l + 1) : -1;
        if (m < 0)         m=l;
        media=((DynamicMedia)cc).getMedia(m >= 0 ? pi.substring(m) : ""String_Node_Str"");
        if (media == null) {
          response.sendError(HttpServletResponse.SC_GONE,Messages.get(MZk.PAGE_NOT_FOUND,pi + ""String_Node_Str"" + comp));
          return;
        }
      }
    }
 catch (    Throwable ex) {
      err=true;
      final List<Throwable> errs=new LinkedList<Throwable>();
      errs.add(ex);
      desktopCtrl.invokeExecutionCleanups(exec,oldexec,errs);
      config.invokeExecutionCleanups(exec,oldexec,errs);
      final StringBuffer errmsg=new StringBuffer(100);
      if (!errs.isEmpty()) {
        for (Iterator it=errs.iterator(); it.hasNext(); ) {
          final Throwable t=(Throwable)it.next();
          log.realCauseBriefly(""String_Node_Str"" + pi,t);
          errmsg.append('\n').append(Exceptions.getMessage(t));
        }
      }
      response.sendError(HttpServletResponse.SC_GONE,Messages.get(MZk.PAGE_FAILED,new Object[]{pi,errmsg,""String_Node_Str""}));
      return;
    }
 finally {
      if (!err) {
        desktopCtrl.invokeExecutionCleanups(exec,oldexec,null);
        config.invokeExecutionCleanups(exec,oldexec,null);
      }
      uieng.deactivate(exec);
    }
  }
 catch (  ComponentNotFoundException ex) {
    response.sendError(HttpServletResponse.SC_GONE,Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid));
    return;
  }
  Https.write(request,response,media,download,false);
}"
16268,"/** 
 * Returns the AU extension associated with the specified prefix, or null if no AU extension associated.
 * @since 5.0.0
 */
public AuExtension getAuExtension(String prefix){
  return (AuExtension)_aues.get(prefix);
}","/** 
 * Returns the AU extension associated with the specified prefix, or null if no AU extension associated.
 * @since 5.0.0
 */
public AuExtension getAuExtension(String prefix){
  return _aues.get(prefix);
}"
16269,"/** 
 * Process asynchronous update requests from the client.
 * @since 3.0.0
 */
protected void process(Session sess,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  final String errClient=request.getHeader(""String_Node_Str"");
  if (errClient != null)   if (log.debugable())   log.debug(""String_Node_Str"" + errClient + ""String_Node_Str""+ Servlets.getDetail(request));
  final WebApp wapp=sess.getWebApp();
  final WebAppCtrl wappc=(WebAppCtrl)wapp;
  final AuDecoder audec=getAuDecoder(wapp);
  final String dtid=audec.getDesktopId(request);
  if (dtid == null) {
    if (log.debugable()) {
      final String msg=""String_Node_Str"" + Servlets.getDetail(request);
      log.debug(msg);
    }
    response.sendError(467,""String_Node_Str"");
    return;
  }
  Desktop desktop=getDesktop(sess,dtid);
  if (desktop == null) {
    final String cmdId=audec.getFirstCommand(request);
    if (!""String_Node_Str"".equals(cmdId))     desktop=recoverDesktop(sess,request,response,wappc,dtid);
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",response.SC_GONE);
      sessionTimeout(request,response,wapp,dtid);
      return;
    }
  }
  WebManager.setDesktop(request,desktop);
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final Configuration config=wapp.getConfiguration();
  final List<AuRequest> aureqs;
  boolean keepAlive=false;
  try {
    final boolean timerKeepAlive=config.isTimerKeepAlive();
    aureqs=audec.decode(request,desktop);
    for (    AuRequest aureq : aureqs) {
      final String cmdId=aureq.getCommand();
      keepAlive=!(!timerKeepAlive && Events.ON_TIMER.equals(cmdId)) && !""String_Node_Str"".equals(cmdId);
      if (keepAlive)       break;
    }
  }
 catch (  Throwable ex) {
    log.warningBriefly(ex);
    responseError(request,response,Exceptions.getMessage(ex));
    return;
  }
  if (aureqs.isEmpty()) {
    final String errmsg=""String_Node_Str"";
    log.debug(errmsg);
    responseError(request,response,errmsg);
    return;
  }
  ((SessionCtrl)sess).notifyClientRequest(keepAlive);
  final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
  final Execution exec=new ExecutionImpl(getServletContext(),request,response,desktop,null);
  if (sid != null)   ((ExecutionCtrl)exec).setRequestId(sid);
  final AuWriter out=AuWriters.newInstance();
  out.setCompress(_compress);
  out.open(request,response);
  try {
    wappc.getUiEngine().execUpdate(exec,aureqs,out);
  }
 catch (  RequestOutOfSequenceException ex) {
    log.warning(ex.getMessage());
    response.setHeader(""String_Node_Str"",sid);
    response.setIntHeader(""String_Node_Str"",AuResponse.SC_OUT_OF_SEQUENCE);
  }
  out.close(request,response);
}","/** 
 * Process asynchronous update requests from the client.
 * @since 3.0.0
 */
protected void process(Session sess,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  final String errClient=request.getHeader(""String_Node_Str"");
  if (errClient != null)   if (log.debugable())   log.debug(""String_Node_Str"" + errClient + ""String_Node_Str""+ Servlets.getDetail(request));
  final WebApp wapp=sess.getWebApp();
  final WebAppCtrl wappc=(WebAppCtrl)wapp;
  final AuDecoder audec=getAuDecoder(wapp);
  final String dtid=audec.getDesktopId(request);
  if (dtid == null) {
    if (log.debugable()) {
      final String msg=""String_Node_Str"" + Servlets.getDetail(request);
      log.debug(msg);
    }
    response.sendError(467,""String_Node_Str"");
    return;
  }
  Desktop desktop=getDesktop(sess,dtid);
  if (desktop == null) {
    final String cmdId=audec.getFirstCommand(request);
    if (!""String_Node_Str"".equals(cmdId))     desktop=recoverDesktop(sess,request,response,wappc,dtid);
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      sessionTimeout(request,response,wapp,dtid);
      return;
    }
  }
  WebManager.setDesktop(request,desktop);
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final Configuration config=wapp.getConfiguration();
  final List<AuRequest> aureqs;
  boolean keepAlive=false;
  try {
    final boolean timerKeepAlive=config.isTimerKeepAlive();
    aureqs=audec.decode(request,desktop);
    for (    AuRequest aureq : aureqs) {
      final String cmdId=aureq.getCommand();
      keepAlive=!(!timerKeepAlive && Events.ON_TIMER.equals(cmdId)) && !""String_Node_Str"".equals(cmdId);
      if (keepAlive)       break;
    }
  }
 catch (  Throwable ex) {
    log.warningBriefly(ex);
    responseError(request,response,Exceptions.getMessage(ex));
    return;
  }
  if (aureqs.isEmpty()) {
    final String errmsg=""String_Node_Str"";
    log.debug(errmsg);
    responseError(request,response,errmsg);
    return;
  }
  ((SessionCtrl)sess).notifyClientRequest(keepAlive);
  final DesktopCtrl desktopCtrl=(DesktopCtrl)desktop;
  final Execution exec=new ExecutionImpl(getServletContext(),request,response,desktop,null);
  if (sid != null)   ((ExecutionCtrl)exec).setRequestId(sid);
  final AuWriter out=AuWriters.newInstance();
  out.setCompress(_compress);
  out.open(request,response);
  try {
    wappc.getUiEngine().execUpdate(exec,aureqs,out);
  }
 catch (  RequestOutOfSequenceException ex) {
    log.warning(ex.getMessage());
    response.setHeader(""String_Node_Str"",sid);
    response.setIntHeader(""String_Node_Str"",AuResponse.SC_OUT_OF_SEQUENCE);
  }
  out.close(request,response);
}"
16270,"/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance().open(request,response);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? (URIInfo)wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    out.write(new AuConfirmClose(null));
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(getServletContext(),request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}","/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance().open(request,response);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    out.write(new AuConfirmClose(null));
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(getServletContext(),request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}"
16271,"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  final String pi=Https.getThisPathInfo(request);
  final ServletContext ctx=getServletContext();
  final boolean withpi=pi != null && pi.length() != 0 && !(pi.startsWith(""String_Node_Str"") || ""String_Node_Str"".equals(pi));
  if (withpi && pi.startsWith(ClassWebResource.PATH_PREFIX)) {
    final ClassWebResource cwr=getClassWebResource();
    final HttpSession hsess=shallSession(cwr,pi) ? request.getSession(false) : null;
    Object oldsess=null;
    if (hsess == null) {
      oldsess=SessionsCtrl.getRawCurrent();
      SessionsCtrl.setCurrent(new SessionResolverImpl(ctx,request));
    }
    WebApp wapp;
    Session sess;
    final Object old=hsess != null ? (wapp=WebManager.getWebAppIfAny(ctx)) != null && (sess=SessionsCtrl.getSession(wapp,hsess)) != null ? I18Ns.setup(sess,request,response,""String_Node_Str"") : I18Ns.setup(hsess,request,response,""String_Node_Str"") : Charsets.setup(null,request,response,""String_Node_Str"");
    try {
      cwr.service(request,response,pi.substring(ClassWebResource.PATH_PREFIX.length()));
    }
  finally {
      if (hsess != null)       I18Ns.cleanup(request,old);
 else {
        Charsets.cleanup(request,old);
        SessionsCtrl.setRawCurrent(oldsess);
      }
    }
    return;
  }
  final Session sess=WebManager.getSession(ctx,request,false);
  if (withpi) {
    final AuExtension aue=getAuExtensionByPath(pi);
    if (aue == null) {
      response.sendError(response.SC_NOT_FOUND);
      log.debug(""String_Node_Str"" + pi);
      return;
    }
    Object oldsess=null;
    if (sess == null) {
      oldsess=SessionsCtrl.getRawCurrent();
      SessionsCtrl.setCurrent(new SessionResolverImpl(ctx,request));
    }
    final Object old=sess != null ? I18Ns.setup(sess,request,response,""String_Node_Str"") : Charsets.setup(null,request,response,""String_Node_Str"");
    try {
      aue.service(request,response,pi);
    }
  finally {
      if (sess != null)       I18Ns.cleanup(request,old);
 else {
        Charsets.cleanup(request,old);
        SessionsCtrl.setRawCurrent(oldsess);
      }
    }
    return;
  }
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",response.SC_GONE);
    final WebApp wapp=WebManager.getWebAppIfAny(ctx);
    final String dtid=getAuDecoder(wapp).getDesktopId(request);
    if (dtid != null)     sessionTimeout(request,response,wapp,dtid);
    return;
  }
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  final Object old=I18Ns.setup(sess,request,response,""String_Node_Str"");
  try {
    process(sess,request,response);
  }
  finally {
    I18Ns.cleanup(request,old);
  }
}","protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  final String pi=Https.getThisPathInfo(request);
  final ServletContext ctx=getServletContext();
  final boolean withpi=pi != null && pi.length() != 0 && !(pi.startsWith(""String_Node_Str"") || ""String_Node_Str"".equals(pi));
  if (withpi && pi.startsWith(ClassWebResource.PATH_PREFIX)) {
    final ClassWebResource cwr=getClassWebResource();
    final HttpSession hsess=shallSession(cwr,pi) ? request.getSession(false) : null;
    Object oldsess=null;
    if (hsess == null) {
      oldsess=SessionsCtrl.getRawCurrent();
      SessionsCtrl.setCurrent(new SessionResolverImpl(ctx,request));
    }
    WebApp wapp;
    Session sess;
    final Object old=hsess != null ? (wapp=WebManager.getWebAppIfAny(ctx)) != null && (sess=SessionsCtrl.getSession(wapp,hsess)) != null ? I18Ns.setup(sess,request,response,""String_Node_Str"") : I18Ns.setup(hsess,request,response,""String_Node_Str"") : Charsets.setup(null,request,response,""String_Node_Str"");
    try {
      cwr.service(request,response,pi.substring(ClassWebResource.PATH_PREFIX.length()));
    }
  finally {
      if (hsess != null)       I18Ns.cleanup(request,old);
 else {
        Charsets.cleanup(request,old);
        SessionsCtrl.setRawCurrent(oldsess);
      }
    }
    return;
  }
  final Session sess=WebManager.getSession(ctx,request,false);
  if (withpi) {
    final AuExtension aue=getAuExtensionByPath(pi);
    if (aue == null) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      log.debug(""String_Node_Str"" + pi);
      return;
    }
    Object oldsess=null;
    if (sess == null) {
      oldsess=SessionsCtrl.getRawCurrent();
      SessionsCtrl.setCurrent(new SessionResolverImpl(ctx,request));
    }
    final Object old=sess != null ? I18Ns.setup(sess,request,response,""String_Node_Str"") : Charsets.setup(null,request,response,""String_Node_Str"");
    try {
      aue.service(request,response,pi);
    }
  finally {
      if (sess != null)       I18Ns.cleanup(request,old);
 else {
        Charsets.cleanup(request,old);
        SessionsCtrl.setRawCurrent(oldsess);
      }
    }
    return;
  }
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    final WebApp wapp=WebManager.getWebAppIfAny(ctx);
    final String dtid=getAuDecoder(wapp).getDesktopId(request);
    if (dtid != null)     sessionTimeout(request,response,wapp,dtid);
    return;
  }
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  final Object old=I18Ns.setup(sess,request,response,""String_Node_Str"");
  try {
    process(sess,request,response);
  }
  finally {
    I18Ns.cleanup(request,old);
  }
}"
16272,"private static final Object[] toData(Component comp,String function,Object[] args){
  final Object[] data=new Object[2 + (args != null ? args.length : 0)];
  data[0]=comp;
  data[1]=function;
  for (int j=2; j < data.length; ++j)   data[j]=args[j - 2];
  return data;
}","private static final Object[] toData(Component comp,String function,Object[] args){
  final Object[] data=new Object[2 + (args != null ? args.length : 0)];
  data[0]=comp;
  data[1]=function;
  if (args != null)   System.arraycopy(args,0,data,2,args.length);
  return data;
}"
16273,"public void idSpaceChanged(Scope scope,IdSpace newIdSpace){
  if (newIdSpace instanceof Scope) {
    final BSHInterpreter ip=getInterpreter(_bshns._scope);
    _bshns.setParent(ip != null ? ip.prepareNS((Scope)newIdSpace) : prepareDetachedNS((Scope)newIdSpace));
    return;
  }
  _bshns.setParent(null);
}","public void idSpaceChanged(Scope scope,IdSpace newIdSpace){
  if (newIdSpace instanceof Scope) {
    final BSHInterpreter ip=getInterpreter(_bshns._scope);
    _bshns.setParent(ip != null ? ip.prepareNS(newIdSpace) : prepareDetachedNS(newIdSpace));
    return;
  }
  _bshns.setParent(null);
}"
16274,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (_children instanceof ChildArray)   ((ChildArray)_children).afterUnmarshal();
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (_children instanceof ChildArray)   ((ChildArray)_children).afterUnmarshal();
}"
16275,"private synchronized void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Class<?> cls=(Class<?>)s.readObject();
  if (cls != null) {
    final String nm=(String)s.readObject();
    final int sz=s.readInt();
    final Class[] argTypes=new Class[sz];
    for (int j=0; j < sz; ++j)     argTypes[j]=(Class)s.readObject();
    try {
      _m=cls.getMethod(nm,argTypes);
    }
 catch (    NoSuchMethodException ex) {
      throw new SystemException(""String_Node_Str"" + nm + ""String_Node_Str""+ Objects.toString(argTypes));
    }
  }
}","private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Class<?> cls=(Class<?>)s.readObject();
  if (cls != null) {
    final String nm=(String)s.readObject();
    final int sz=s.readInt();
    final Class[] argTypes=new Class[sz];
    for (int j=0; j < sz; ++j)     argTypes[j]=(Class)s.readObject();
    try {
      _m=cls.getMethod(nm,argTypes);
    }
 catch (    NoSuchMethodException ex) {
      throw new SystemException(""String_Node_Str"" + nm + ""String_Node_Str""+ Objects.toString(argTypes));
    }
  }
}"
16276,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
}"
16277,"@SuppressWarnings(""String_Node_Str"") private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  int size=s.readInt();
  _map=new IdentityHashMap<T,Object>((size * 4) / 3);
  for (int i=0; i < size; i++) {
    Object e=s.readObject();
    _map.put((T)e,Objects.UNKNOWN);
  }
}","@SuppressWarnings(""String_Node_Str"") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  int size=s.readInt();
  _map=new IdentityHashMap<T,Object>((size * 4) / 3);
  for (int i=0; i < size; i++) {
    Object e=s.readObject();
    _map.put((T)e,Objects.UNKNOWN);
  }
}"
16278,"/** 
 * Joins an array of string. since 5.0.7
 */
public static String join(Object[] ss,String separator){
  if (ss == null)   return null;
  final StringBuffer sb=new StringBuffer();
  for (int j=0; j < ss.length; ++j) {
    if (j != 0)     sb.append(separator);
    sb.append(ss[j]);
  }
  return ss.toString();
}","/** 
 * Joins an array of string. since 5.0.7
 */
public static String join(Object[] ss,String separator){
  if (ss == null)   return null;
  final StringBuffer sb=new StringBuffer();
  for (int j=0; j < ss.length; ++j) {
    if (j != 0)     sb.append(separator);
    sb.append(ss[j]);
  }
  return sb.toString();
}"
16279,"private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (s.readBoolean()) {
    BSHInterpreter.read(new NameSpace(null,null,""String_Node_Str""){
      public void setVariable(      String name,      Object value,      boolean strictJava){
        if (_vars == null)         _vars=new HashMap<String,Object>();
        _vars.put(name,value);
      }
      public void setMethod(      String name,      BshMethod mtd){
        if (_mtds == null)         _mtds=new LinkedList<BshMethod>();
        _mtds.add(mtd);
      }
      public void importClass(      String name){
        if (_clses == null)         _clses=new LinkedList<String>();
        _clses.add(name);
      }
      public void importPackage(      String name){
        if (_pkgs == null)         _pkgs=new LinkedList<String>();
        _pkgs.add(name);
      }
      public void loadDefaultImports(){
      }
    }
,s);
  }
}","private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (s.readBoolean()) {
    BSHInterpreter.read(new NameSpace(null,null,""String_Node_Str""){
      public void setVariable(      String name,      Object value,      boolean strictJava){
        if (_vars == null)         _vars=new HashMap<String,Object>();
        _vars.put(name,value);
      }
      public void setMethod(      String name,      BshMethod mtd){
        if (_mtds == null)         _mtds=new LinkedList<BshMethod>();
        _mtds.add(mtd);
      }
      public void importClass(      String name){
        if (_clses == null)         _clses=new LinkedList<String>();
        _clses.add(name);
      }
      public void importPackage(      String name){
        if (_pkgs == null)         _pkgs=new LinkedList<String>();
        _pkgs.add(name);
      }
      public void loadDefaultImports(){
      }
    }
,s);
  }
}"
16280,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object def=s.readObject();
  if (def instanceof String) {
    LanguageDefinition langdef=null;
    try {
      langdef=LanguageDefinition.lookup((String)def);
    }
 catch (    DefinitionNotFoundException ex) {
    }
    if (langdef != null) {
      _def=langdef.getComponentDefinitionIfAny((String)s.readObject());
    }
 else {
      s.readObject();
      _def=null;
    }
  }
 else {
    _def=(ComponentDefinition)def;
  }
  if (_def == null)   _def=ComponentsCtrl.DUMMY;
  for (AbstractComponent q=null; ; ) {
    final AbstractComponent child=(AbstractComponent)s.readObject();
    if (child == null) {
      if (_chdinf != null)       _chdinf.last=q;
      break;
    }
    ++initChildInfo().nChild;
    if (q != null)     q._next=child;
 else     _chdinf.first=child;
    child._prev=q;
    child._parent=this;
    q=child;
  }
  if (_auxinf == null)   return;
  attrs();
  final Map<String,Object> attrmap=_auxinf.attrs.getAttributes();
  Serializables.smartRead(s,attrmap);
  final List<ScopeListener> attrlns=_auxinf.attrs.getListeners();
  Serializables.smartRead(s,attrlns);
  if (attrmap.isEmpty() && attrlns.isEmpty())   _auxinf.attrs=null;
 else   if (_parent != null)   _auxinf.attrs.notifyParentChanged(_parent);
  _auxinf.listeners=EventListenerInfo.read(s,this);
  if (this instanceof IdSpace) {
    _auxinf.spaceInfo=new SpaceInfo();
    if (!isAutoId(_id))     bindToIdSpace(this);
    for (AbstractComponent ac=(AbstractComponent)getFirstChild(); ac != null; ac=ac._next)     addToIdSpacesDown(ac,(IdSpace)this);
  }
  didDeserialize(attrmap.values());
  didDeserialize(attrlns);
  didDeserialize(_auxinf.ausvc=(AuService)s.readObject());
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object def=s.readObject();
  if (def instanceof String) {
    LanguageDefinition langdef=null;
    try {
      langdef=LanguageDefinition.lookup((String)def);
    }
 catch (    DefinitionNotFoundException ex) {
    }
    if (langdef != null) {
      _def=langdef.getComponentDefinitionIfAny((String)s.readObject());
    }
 else {
      s.readObject();
      _def=null;
    }
  }
 else {
    _def=(ComponentDefinition)def;
  }
  if (_def == null)   _def=ComponentsCtrl.DUMMY;
  for (AbstractComponent q=null; ; ) {
    final AbstractComponent child=(AbstractComponent)s.readObject();
    if (child == null) {
      if (_chdinf != null)       _chdinf.last=q;
      break;
    }
    ++initChildInfo().nChild;
    if (q != null)     q._next=child;
 else     _chdinf.first=child;
    child._prev=q;
    child._parent=this;
    q=child;
  }
  if (_auxinf == null)   return;
  attrs();
  final Map<String,Object> attrmap=_auxinf.attrs.getAttributes();
  Serializables.smartRead(s,attrmap);
  final List<ScopeListener> attrlns=_auxinf.attrs.getListeners();
  Serializables.smartRead(s,attrlns);
  if (attrmap.isEmpty() && attrlns.isEmpty())   _auxinf.attrs=null;
 else   if (_parent != null)   _auxinf.attrs.notifyParentChanged(_parent);
  _auxinf.listeners=EventListenerInfo.read(s,this);
  if (this instanceof IdSpace) {
    _auxinf.spaceInfo=new SpaceInfo();
    if (!isAutoId(_id))     bindToIdSpace(this);
    for (AbstractComponent ac=(AbstractComponent)getFirstChild(); ac != null; ac=ac._next)     addToIdSpacesDown(ac,(IdSpace)this);
  }
  didDeserialize(attrmap.values());
  didDeserialize(attrlns);
  didDeserialize(_auxinf.ausvc=(AuService)s.readObject());
}"
16281,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  for (AbstractComponent q=null; ; ) {
    final AbstractComponent child=(AbstractComponent)s.readObject();
    if (child == null) {
      _lastRoot=q;
      break;
    }
    if (q != null)     q._next=child;
 else     _firstRoot=child;
    child._prev=q;
    child._page=this;
    q=child;
  }
  fixFellows(getRoots());
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  for (AbstractComponent q=null; ; ) {
    final AbstractComponent child=(AbstractComponent)s.readObject();
    if (child == null) {
      _lastRoot=q;
      break;
    }
    if (q != null)     q._next=child;
 else     _firstRoot=child;
    child._prev=q;
    child._page=this;
    q=child;
  }
  fixFellows(getRoots());
}"
16282,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _listeners=EventListenerInfo.read(s,null);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _listeners=EventListenerInfo.read(s,null);
}"
16283,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  Serializables.smartRead(s,_props);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  Serializables.smartRead(s,_props);
}"
16284,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  readThis(s);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  readThis(s);
}"
16285,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  for (  Page page : _pages)   for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())   addAllComponents(root);
  final Map<String,Object> attrs=_attrs.getAttributes();
  Serializables.smartRead(s,attrs);
  final List<ScopeListener> lns=_attrs.getListeners();
  Serializables.smartRead(s,lns);
  _dtCleans=(List<DesktopCleanup>)Serializables.smartRead(s,_dtCleans);
  _execInits=(List<ExecutionInit>)Serializables.smartRead(s,_execInits);
  _execCleans=(List<ExecutionCleanup>)Serializables.smartRead(s,_execCleans);
  _uiCycles=(List<UiLifeCycle>)Serializables.smartRead(s,_uiCycles);
  _ausvcs=(List<AuService>)Serializables.smartRead(s,_ausvcs);
  didDeserialize(attrs.values());
  didDeserialize(lns);
  didDeserialize(_dtCleans);
  didDeserialize(_execInits);
  didDeserialize(_execCleans);
  didDeserialize(_uiCycles);
  didDeserialize(_ausvcs);
  Object o=s.readObject();
  if (o != null) {
    ServerPush sp=null;
    if (o instanceof Class) {
      try {
        sp=(ServerPush)((Class)o).newInstance();
      }
 catch (      Throwable ex) {
      }
    }
 else     sp=(ServerPush)o;
    _spushTemp=sp;
  }
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  for (  Page page : _pages)   for (Component root=page.getFirstRoot(); root != null; root=root.getNextSibling())   addAllComponents(root);
  final Map<String,Object> attrs=_attrs.getAttributes();
  Serializables.smartRead(s,attrs);
  final List<ScopeListener> lns=_attrs.getListeners();
  Serializables.smartRead(s,lns);
  _dtCleans=(List<DesktopCleanup>)Serializables.smartRead(s,_dtCleans);
  _execInits=(List<ExecutionInit>)Serializables.smartRead(s,_execInits);
  _execCleans=(List<ExecutionCleanup>)Serializables.smartRead(s,_execCleans);
  _uiCycles=(List<UiLifeCycle>)Serializables.smartRead(s,_uiCycles);
  _ausvcs=(List<AuService>)Serializables.smartRead(s,_ausvcs);
  didDeserialize(attrs.values());
  didDeserialize(lns);
  didDeserialize(_dtCleans);
  didDeserialize(_execInits);
  didDeserialize(_execCleans);
  didDeserialize(_uiCycles);
  didDeserialize(_ausvcs);
  Object o=s.readObject();
  if (o != null) {
    ServerPush sp=null;
    if (o instanceof Class) {
      try {
        sp=(ServerPush)((Class)o).newInstance();
      }
 catch (      Throwable ex) {
      }
    }
 else     sp=(ServerPush)o;
    _spushTemp=sp;
  }
}"
16286,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Collection<EventInterceptor> eilst=Serializables.smartRead(s,(Collection<EventInterceptor>)null);
  if (eilst != null)   _eis=eilst.toArray(new EventInterceptor[eilst.size()]);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Collection<EventInterceptor> eilst=Serializables.smartRead(s,(Collection<EventInterceptor>)null);
  if (eilst != null)   _eis=eilst.toArray(new EventInterceptor[eilst.size()]);
}"
16287,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
  _ownerUuid=(String)s.readObject();
  final Map<String,Object> attrs=_attrs.getAttributes();
  Serializables.smartRead(s,attrs);
  final List<ScopeListener> lns=_attrs.getListeners();
  Serializables.smartRead(s,lns);
  for (; ; ) {
    final String evtnm=(String)s.readObject();
    if (evtnm == null)     break;
    if (_listeners == null)     _listeners=new HashMap<String,List<EventListener<? extends Event>>>();
    final List<EventListener<? extends Event>> ls=Serializables.smartRead(s,(List<EventListener<? extends Event>>)null);
    _listeners.put(evtnm,ls);
  }
  _resolvers=Serializables.smartRead(s,_resolvers);
  _mappers=Serializables.smartRead(s,_mappers);
  for (; ; ) {
    final String zslang=(String)s.readObject();
    if (zslang == null)     break;
    ((SerializableAware)getInterpreter(zslang)).read(s);
  }
  didDeserialize(attrs.values());
  didDeserialize(lns);
  didDeserialize(_resolvers);
  didDeserialize(_mappers);
  if (_listeners != null)   for (  List<EventListener<? extends Event>> ls : _listeners.values())   didDeserialize(ls);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
  _ownerUuid=(String)s.readObject();
  final Map<String,Object> attrs=_attrs.getAttributes();
  Serializables.smartRead(s,attrs);
  final List<ScopeListener> lns=_attrs.getListeners();
  Serializables.smartRead(s,lns);
  for (; ; ) {
    final String evtnm=(String)s.readObject();
    if (evtnm == null)     break;
    if (_listeners == null)     _listeners=new HashMap<String,List<EventListener<? extends Event>>>();
    final List<EventListener<? extends Event>> ls=Serializables.smartRead(s,(List<EventListener<? extends Event>>)null);
    _listeners.put(evtnm,ls);
  }
  _resolvers=Serializables.smartRead(s,_resolvers);
  _mappers=Serializables.smartRead(s,_mappers);
  for (; ; ) {
    final String zslang=(String)s.readObject();
    if (zslang == null)     break;
    ((SerializableAware)getInterpreter(zslang)).read(s);
  }
  didDeserialize(attrs.values());
  didDeserialize(lns);
  didDeserialize(_resolvers);
  didDeserialize(_mappers);
  if (_listeners != null)   for (  List<EventListener<? extends Event>> ls : _listeners.values())   didDeserialize(ls);
}"
16288,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  final boolean old=disableExpunge(true);
  try {
    s.defaultReadObject();
  }
  finally {
    disableExpunge(old);
  }
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  final boolean old=disableExpunge(true);
  try {
    s.defaultReadObject();
  }
  finally {
    disableExpunge(old);
  }
}"
16289,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  for (Iterator it=_children.iterator(); it.hasNext(); )   ((LeafInfo)it.next()).setParentDirectly(this);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  for (Iterator it=_children.iterator(); it.hasNext(); )   ((LeafInfo)it.next()).setParentDirectly(this);
}"
16290,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  int cnt=s.readInt();
  while (--cnt >= 0)   add((ComponentDefinition)s.readObject());
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  int cnt=s.readInt();
  while (--cnt >= 0)   add((ComponentDefinition)s.readObject());
}"
16291,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Object v=s.readObject();
  if (v instanceof String) {
    final LanguageDefinition langdef=LanguageDefinition.lookup((String)v);
    _compdef=langdef.getComponentDefinition((String)s.readObject());
  }
 else {
    _compdef=(ComponentDefinition)v;
  }
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final Object v=s.readObject();
  if (v instanceof String) {
    final LanguageDefinition langdef=LanguageDefinition.lookup((String)v);
    _compdef=langdef.getComponentDefinition((String)s.readObject());
  }
 else {
    _compdef=(ComponentDefinition)v;
  }
}"
16292,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
}"
16293,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _expfcls=cast((Class)s.readObject());
  _mapper=(FunctionMapper)s.readObject();
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _expfcls=cast((Class)s.readObject());
  _mapper=(FunctionMapper)s.readObject();
}"
16294,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  final String langnm=(String)s.readObject();
  if (langnm != null)   _langdef=LanguageDefinition.lookup(langnm);
}"
16295,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _coercedVal=Objects.UNKNOWN;
}","private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _coercedVal=Objects.UNKNOWN;
}"
16296,"private Component getVarRootComponent(BindingNode node){
  final BindingNode varRootNode=node.getRootNode(_pathTree);
  Object bean=null;
  for (final Iterator it=varRootNode.getSameNodes().iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (!(obj instanceof BindingNode)) {
      bean=obj;
      break;
    }
  }
  Component comp=null;
  for (final Iterator itx=varRootNode.getBindings().iterator(); itx.hasNext(); ) {
    Binding binding=(Binding)itx.next();
    if (""String_Node_Str"".equals(binding.getAttr())) {
      comp=binding.getComponent();
      break;
    }
  }
  return getCollectionItem(comp,bean,true);
}","private Component getVarRootComponent(BindingNode node){
  final BindingNode varRootNode=node.getRootNode(_pathTree);
  Object bean=null;
  for (final Iterator it=varRootNode.getSameNodes().iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (!(obj instanceof BindingNode)) {
      bean=obj;
      break;
    }
  }
  Component comp=null;
  for (final Iterator itx=varRootNode.getBindings().iterator(); itx.hasNext(); ) {
    Binding binding=(Binding)itx.next();
    if (""String_Node_Str"".equals(binding.getAttr())) {
      comp=binding.getComponent();
      break;
    }
  }
  return comp == null ? null : getCollectionItem(comp,bean,true);
}"
16297,"public boolean equals(Object other){
  final Dual o=(Dual)other;
  return o._comp == _comp && o._binding == _binding;
}","public boolean equals(Object other){
  if (this == other)   return true;
  if (other instanceof Dual) {
    final Dual o=(Dual)other;
    return o._comp == _comp && o._binding == _binding;
  }
  return false;
}"
16298,"private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  _variableResolvers=new ArrayList<VariableResolver>();
  int size=s.readInt();
  for (int i=0; i < size; i++) {
    Object o=s.readObject();
    if (o instanceof String) {
      _variableResolvers.add(new DefaultDelegatingVariableResolver());
    }
 else     _variableResolvers.add((VariableResolver)o);
  }
}","private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  _variableResolvers=new ArrayList<VariableResolver>();
  int size=s.readInt();
  for (int i=0; i < size; i++) {
    Object o=s.readObject();
    if (o instanceof String) {
      _variableResolvers.add(new DefaultDelegatingVariableResolver());
    }
 else     _variableResolvers.add((VariableResolver)o);
  }
}"
16299,"public void setCharacterEncoding(String enc) throws java.io.UnsupportedEncodingException {
  byte buffer[]=new byte[1];
  buffer[0]=(byte)'a';
  String dummy=new String(buffer,enc);
  _enc=enc;
}","public void setCharacterEncoding(String enc) throws java.io.UnsupportedEncodingException {
  byte buffer[]=new byte[1];
  buffer[0]=(byte)'a';
  new String(buffer,enc);
  _enc=enc;
}"
16300,"public final String getContentType(){
  return _ctype;
}","public final String getContentType(){
  if (_ctype == null) {
    _ctype=getContentType(getFormat());
  }
  return _ctype;
}"
16301,"public final String getFormat(){
  return _format;
}","public final String getFormat(){
  if (_format == null) {
    try {
      _format=getFormat0();
    }
 catch (    IOException ex) {
      throw new SystemException(""String_Node_Str"",ex);
    }
  }
  return _format;
}"
16302,"public boolean equals(Object o){
  if (!(o instanceof JavaScript))   return false;
  final JavaScript js=(JavaScript)o;
  return Objects.equals(js._src,_src) && Objects.equals(js._charset,_charset) && Objects.equals(js._content,_content);
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof JavaScript))   return false;
  final JavaScript js=(JavaScript)o;
  return Objects.equals(js._src,_src) && Objects.equals(js._charset,_charset) && Objects.equals(js._content,_content);
}"
16303,"public boolean equals(Object o){
  if (!(o instanceof StyleSheet))   return false;
  final StyleSheet ss=(StyleSheet)o;
  return Objects.equals(ss._href,_href) && Objects.equals(ss._type,_type) && Objects.equals(ss._content,_content)&& Objects.equals(ss._media,_media);
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof StyleSheet))   return false;
  final StyleSheet ss=(StyleSheet)o;
  return Objects.equals(ss._href,_href) && Objects.equals(ss._type,_type) && Objects.equals(ss._content,_content)&& Objects.equals(ss._media,_media);
}"
16304,"public final Attr setAttributeNodeNS(Attr newAttr){
  Attribute attr=(Attribute)newAttr;
  int j=getAttributeIndex(0,attr.getNamespace().getURI(),attr.getLocalName(),0);
  if (j >= 0) {
    return (Attr)getAttributeItems().set(j,(Attribute)newAttr);
  }
 else {
    getAttributeItems().add((Attribute)newAttr);
    return null;
  }
}","public final Attr setAttributeNodeNS(Attr newAttr){
  Attribute attr=(Attribute)newAttr;
  int j=getAttributeIndex(0,attr.getNamespace().getURI(),attr.getLocalName(),0);
  if (j >= 0) {
    return getAttributeItems().set(j,(Attribute)newAttr);
  }
 else {
    getAttributeItems().add((Attribute)newAttr);
    return null;
  }
}"
16305,"public final Attribute getAttributeItem(String tname){
  int j=getAttributeIndex(0,tname);
  return j >= 0 ? (Attribute)_attrs.get(j) : null;
}","public final Attribute getAttributeItem(String tname){
  int j=getAttributeIndex(0,tname);
  return j >= 0 ? _attrs.get(j) : null;
}"
16306,"private void checkAdd(Attribute newItem,Attribute other,boolean replace){
  if (newItem.getOwner() != null)   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.toString() + ""String_Node_Str"",getLocator());
  int j=getAttributeIndex(0,newItem.getTagName());
  if (j >= 0 && (!replace || get(j) != other))   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.getTagName() + ""String_Node_Str""+ j+ ')',getLocator());
  try {
    if (replace)     onRemove(other);
    newItem.setOwner(Element.this);
  }
 catch (  RuntimeException ex) {
    if (replace) {
      Attribute attrRep=(Attribute)other;
      if (attrRep.getOwner() == null)       attrRep.setOwner(Element.this);
    }
    throw ex;
  }
}","private void checkAdd(Attribute newItem,Attribute other,boolean replace){
  if (newItem.getOwner() != null)   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.toString() + ""String_Node_Str"",getLocator());
  int j=getAttributeIndex(0,newItem.getTagName());
  if (j >= 0 && (!replace || get(j) != other))   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.getTagName() + ""String_Node_Str""+ j+ ')',getLocator());
  try {
    if (replace)     onRemove(other);
    newItem.setOwner(Element.this);
  }
 catch (  RuntimeException ex) {
    if (replace) {
      Attribute attrRep=other;
      if (attrRep.getOwner() == null)       attrRep.setOwner(Element.this);
    }
    throw ex;
  }
}"
16307,"public final Attr removeAttributeNode(Attr oldAttr){
  Attribute attr=(Attribute)oldAttr;
  int j=getAttributeIndex(0,attr.getTagName());
  if (j >= 0) {
    return (Attr)_attrs.remove(j);
  }
 else {
    throw new DOMException(DOMException.NOT_FOUND_ERR,getLocator());
  }
}","public final Attr removeAttributeNode(Attr oldAttr){
  Attribute attr=(Attribute)oldAttr;
  int j=getAttributeIndex(0,attr.getTagName());
  if (j >= 0) {
    return _attrs.remove(j);
  }
 else {
    throw new DOMException(DOMException.NOT_FOUND_ERR,getLocator());
  }
}"
16308,"/** 
 * Get the element with name. If you have many values associalted with the same key, it returned the head for you.
 */
public final Element get(String name){
  final List<Element> vals=_map.get(name);
  return vals != null && !vals.isEmpty() ? (Element)vals.get(0) : null;
}","/** 
 * Get the element with name. If you have many values associalted with the same key, it returned the head for you.
 */
public final Element get(String name){
  final List<Element> vals=_map.get(name);
  return vals != null && !vals.isEmpty() ? vals.get(0) : null;
}"
16309,"private void checkAdd(Item newVal,Item other,boolean replace){
  if (!(newVal instanceof Element) && !(newVal instanceof Text) && !(newVal instanceof CData)&& !(newVal instanceof Comment)&& !(newVal instanceof EntityReference)&& !(newVal instanceof Binary)&& !(newVal instanceof ProcessingInstruction))   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"",getLocator());
  final Item newItem=(Item)newVal;
  if (newItem.getParent() != null) {
    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.toString() + ""String_Node_Str""+ newItem.getParent()+ ""String_Node_Str""+ newItem.getLocator()+ ""String_Node_Str"",getLocator());
  }
  if (newItem instanceof Group)   for (Item p=AbstractGroup.this; p != null; p=p.getParent())   if (p == newItem)   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"",getLocator());
  if (newItem instanceof Element) {
    Element eOther;
    if ((other != null) && !(other instanceof Element)) {
      eOther=null;
      boolean bFirstElemFind=false;
      for (Iterator it=this.iterator(); it.hasNext(); ) {
        Object node=it.next();
        if (bFirstElemFind) {
          if (node instanceof Element) {
            eOther=(Element)node;
            break;
          }
        }
 else         if (node == other) {
          bFirstElemFind=true;
        }
      }
    }
 else {
      eOther=(Element)other;
    }
    _elemMap.put((Element)newItem,eOther);
  }
  if (replace)   onRemove(other);
  newItem.setParent(AbstractGroup.this);
}","private void checkAdd(Item newVal,Item other,boolean replace){
  if (!(newVal instanceof Element) && !(newVal instanceof Text) && !(newVal instanceof CData)&& !(newVal instanceof Comment)&& !(newVal instanceof EntityReference)&& !(newVal instanceof Binary)&& !(newVal instanceof ProcessingInstruction))   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"",getLocator());
  final Item newItem=newVal;
  if (newItem.getParent() != null) {
    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"" + newItem.toString() + ""String_Node_Str""+ newItem.getParent()+ ""String_Node_Str""+ newItem.getLocator()+ ""String_Node_Str"",getLocator());
  }
  if (newItem instanceof Group)   for (Item p=AbstractGroup.this; p != null; p=p.getParent())   if (p == newItem)   throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,""String_Node_Str"",getLocator());
  if (newItem instanceof Element) {
    Element eOther;
    if ((other != null) && !(other instanceof Element)) {
      eOther=null;
      boolean bFirstElemFind=false;
      for (Iterator it=this.iterator(); it.hasNext(); ) {
        Object node=it.next();
        if (bFirstElemFind) {
          if (node instanceof Element) {
            eOther=(Element)node;
            break;
          }
        }
 else         if (node == other) {
          bFirstElemFind=true;
        }
      }
    }
 else {
      eOther=(Element)other;
    }
    _elemMap.put((Element)newItem,eOther);
  }
  if (replace)   onRemove(other);
  newItem.setParent(AbstractGroup.this);
}"
16310,"protected void onRemove(Item item){
  final Item removeItem=(Item)item;
  removeItem.setParent(null);
  if (removeItem instanceof Element)   _elemMap.remove((Element)removeItem);
}","protected void onRemove(Item item){
  final Item removeItem=item;
  removeItem.setParent(null);
  if (removeItem instanceof Element)   _elemMap.remove((Element)removeItem);
}"
16311,"public byte[] encode(RenderedImage image) throws java.io.IOException {
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  ImageWriter iw=(ImageWriter)ImageIO.getImageWritersByFormatName(""String_Node_Str"").next();
  ImageWriteParam iwp=iw.getDefaultWriteParam();
  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  iwp.setCompressionQuality(_quality);
  ImageOutputStream ios=ImageIO.createImageOutputStream(os);
  iw.setOutput(ios);
  iw.write(null,new IIOImage(image,null,null),iwp);
  ios.flush();
  iw.dispose();
  ios.close();
  return os.toByteArray();
}","public byte[] encode(RenderedImage image) throws java.io.IOException {
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  ImageWriter iw=ImageIO.getImageWritersByFormatName(""String_Node_Str"").next();
  ImageWriteParam iwp=iw.getDefaultWriteParam();
  iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
  iwp.setCompressionQuality(_quality);
  ImageOutputStream ios=ImageIO.createImageOutputStream(os);
  iw.setOutput(ios);
  iw.write(null,new IIOImage(image,null,null),iwp);
  ios.flush();
  iw.dispose();
  ios.close();
  return os.toByteArray();
}"
16312,"public boolean equals(Object o){
  return o instanceof JavaScriptValue && _js.equals(((JavaScriptValue)o)._js);
}","public boolean equals(Object o){
  if (this == o)   return true;
  return o instanceof JavaScriptValue && _js.equals(((JavaScriptValue)o)._js);
}"
16313,"@Override public boolean hasPropertyLoadBinding(Component comp,String attr){
  checkInit();
  final BindingKey bkey=getBindingKey(comp,attr);
  return _propertyBindingHandler.hasLoadBinding(bkey);
}","@Override public boolean hasPropertyLoadBinding(Component comp,String attr){
  checkInit();
  Map<String,List<Binding>> map=_bindings.get(comp);
  if (map == null)   return false;
  List<Binding> list=map.get(attr);
  if (list == null)   return false;
  for (  Binding binding : list) {
    if (binding instanceof LoadPropertyBinding)     return true;
  }
  return false;
}"
16314,"public BinderImpl(String qname,String qscope){
  _bindings=new HashMap<Component,Map<String,List<Binding>>>();
  _formBindingHandler=new FormBindingHandler(this);
  _propertyBindingHandler=new PropertyBindingHandler(this);
  _childrenBindingHandler=new ChildrenBindingHandler(this);
  _assocFormSaveBindings=new HashMap<Component,Set<SaveBinding>>();
  _reversedAssocFormSaveBindings=new HashMap<Component,Map<SaveBinding,Set<SaveBinding>>>();
  _hasValidators=new HashSet<BindingKey>();
  _templateResolvers=new HashMap<Component,Map<String,TemplateResolver>>();
  _listenerMap=new HashMap<BindingKey,CommandEventListener>();
  _quename=qname != null && !Strings.isEmpty(qname) ? qname : BinderImpl.QUE;
  _quescope=qscope != null && !Strings.isBlank(qscope) ? qscope : EventQueues.DESKTOP;
  _queueListener=new EventListener<Event>(){
    public void onEvent(    Event event) throws Exception {
      if (event instanceof PropertyChangeEvent) {
        final PropertyChangeEvent evt=(PropertyChangeEvent)event;
        BinderImpl.this.loadOnPropertyChange(evt.getBase(),evt.getPropertyName());
      }
    }
  }
;
}","public BinderImpl(String qname,String qscope){
  _bindings=new HashMap<Component,Map<String,List<Binding>>>();
  _formBindingHandler=new FormBindingHandler(this);
  _propertyBindingHandler=new PropertyBindingHandler(this);
  _childrenBindingHandler=new ChildrenBindingHandler(this);
  _assocFormSaveBindings=new HashMap<Component,Set<SaveBinding>>();
  _reversedAssocFormSaveBindings=new HashMap<Component,Map<SaveBinding,Set<SaveBinding>>>();
  _hasValidators=new HashSet<BindingKey>();
  _templateResolvers=new HashMap<Component,Map<String,TemplateResolver>>();
  _listenerMap=new HashMap<BindingKey,CommandEventListener>();
  _quename=qname != null && !Strings.isEmpty(qname) ? qname : BinderImpl.QUE;
  _quescope=qscope != null && !Strings.isBlank(qscope) ? qscope : EventQueues.DESKTOP;
  _queueListener=new QueueListener();
}"
16315,"void removeBindings(Collection<Binding> removes){
  _loadAfterBindings.values().removeAll(removes);
  _loadBeforeBindings.values().removeAll(removes);
}","void removeBindings(Collection<Binding> removes){
  for (  List<LoadChildrenBinding> bindings : _loadAfterBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<LoadChildrenBinding> bindings : _loadBeforeBindings.values()) {
    bindings.removeAll(removes);
  }
}"
16316,"void removeBindings(Collection<Binding> bindings){
  _loadFormAfterBindings.values().removeAll(bindings);
  _saveFormAfterBindings.values().removeAll(bindings);
  _loadFormBeforeBindings.values().removeAll(bindings);
  _saveFormBeforeBindings.values().removeAll(bindings);
}","void removeBindings(Collection<Binding> removes){
  for (  List<LoadFormBinding> bindings : _loadFormAfterBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<SaveFormBinding> bindings : _saveFormAfterBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<LoadFormBinding> bindings : _loadFormBeforeBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<SaveFormBinding> bindings : _saveFormBeforeBindings.values()) {
    bindings.removeAll(removes);
  }
}"
16317,"public FormImpl(){
  _fields=new LinkedHashMap<String,Object>(INIT_CAPACITY);
  _initFields=new HashMap<String,Object>(INIT_CAPACITY);
  _saveFieldNames=new LinkedHashSet<String>(INIT_CAPACITY);
  _loadFieldNames=new LinkedHashSet<String>(INIT_CAPACITY);
  _dirtyFieldNames=new HashSet<String>(INIT_CAPACITY);
  _status=new FormStatus(){
    @Override public boolean isDirty(){
      return FormImpl.this.isDirty();
    }
  }
;
}","public FormImpl(){
  _fields=new LinkedHashMap<String,Object>(INIT_CAPACITY);
  _initFields=new HashMap<String,Object>(INIT_CAPACITY);
  _saveFieldNames=new LinkedHashSet<String>(INIT_CAPACITY);
  _loadFieldNames=new LinkedHashSet<String>(INIT_CAPACITY);
  _dirtyFieldNames=new HashSet<String>(INIT_CAPACITY);
  _status=new FormStatusImpl();
}"
16318,"public void setComponent(Component comp){
  _component=comp;
  _paramResolvers.put(ScopeParam.class,new ParamResolver<Annotation>(){
    @Override public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      final String name=((ScopeParam)anno).value();
      final Scope[] ss=((ScopeParam)anno).scopes();
      for (      Scope s : ss) {
switch (s) {
case AUTO:
          if (ss.length == 1) {
            return _component.getAttribute(name,true);
          }
        throw new UiException(""String_Node_Str"" + s + ""String_Node_Str""+ ss);
    }
  }
  Object val=null;
  for (  Scope scope : ss) {
    final String scopeName=scope.getName();
    Object scopeObj=Components.getImplicit(_component,scopeName);
    if (scopeObj instanceof Map) {
      val=((Map<?,?>)scopeObj).get(name);
      if (val != null)       break;
    }
 else     if (scopeObj != null) {
      _log.error(""String_Node_Str"" + scopeName + ""String_Node_Str""+ scopeObj);
    }
  }
  return val == null ? null : Classes.coerce(returnType,val);
}
}
);
_paramResolvers.put(SelectorParam.class,new ParamResolver<Annotation>(){
@Override public Object resolveParameter(Annotation anno,Class<?> returnType){
  final String selector=((SelectorParam)anno).value();
  final List<Component> result=Selectors.find(_root,selector);
  Object val;
  if (!Collection.class.isAssignableFrom(returnType)) {
    val=result.size() > 0 ? Classes.coerce(returnType,result.get(0)) : null;
  }
 else {
    val=Classes.coerce(returnType,result);
  }
  return val;
}
}
);
}","public void setComponent(Component comp){
  _component=comp;
  _paramResolvers.put(ScopeParam.class,new ParamResolver<Annotation>(){
    @Override public Object resolveParameter(    Annotation anno,    Class<?> returnType){
      final String name=((ScopeParam)anno).value();
      final Scope[] ss=((ScopeParam)anno).scopes();
      for (      Scope s : ss) {
switch (s) {
case AUTO:
          if (ss.length == 1) {
            return _component.getAttribute(name,true);
          }
        throw new UiException(""String_Node_Str"" + s + ""String_Node_Str""+ Arrays.toString(ss));
    }
  }
  Object val=null;
  for (  Scope scope : ss) {
    final String scopeName=scope.getName();
    Object scopeObj=Components.getImplicit(_component,scopeName);
    if (scopeObj instanceof Map) {
      val=((Map<?,?>)scopeObj).get(name);
      if (val != null)       break;
    }
 else     if (scopeObj != null) {
      _log.error(""String_Node_Str"" + scopeName + ""String_Node_Str""+ scopeObj);
    }
  }
  return val == null ? null : Classes.coerce(returnType,val);
}
}
);
_paramResolvers.put(SelectorParam.class,new ParamResolver<Annotation>(){
@Override public Object resolveParameter(Annotation anno,Class<?> returnType){
  final String selector=((SelectorParam)anno).value();
  final List<Component> result=Selectors.find(_root,selector);
  Object val;
  if (!Collection.class.isAssignableFrom(returnType)) {
    val=result.size() > 0 ? Classes.coerce(returnType,result.get(0)) : null;
  }
 else {
    val=Classes.coerce(returnType,result);
  }
  return val;
}
}
);
}"
16319,"void removeBindings(Collection<Binding> removes){
  _loadAfterBindings.values().removeAll(removes);
  _saveAfterBindings.values().removeAll(removes);
  _loadBeforeBindings.values().removeAll(removes);
  _saveBeforeBindings.values().removeAll(removes);
}","void removeBindings(Collection<Binding> removes){
  for (  List<LoadPropertyBinding> bindings : _loadAfterBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<SavePropertyBinding> bindings : _saveAfterBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<LoadPropertyBinding> bindings : _loadBeforeBindings.values()) {
    bindings.removeAll(removes);
  }
  for (  List<SavePropertyBinding> bindings : _saveBeforeBindings.values()) {
    bindings.removeAll(removes);
  }
}"
16320,"private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  Set<SaveBinding> savebindings=((BinderCtrl)binding.getBinder()).getFormAssociatedSaveBindings(binding.getComponent());
  boolean svalid=true;
  for (  SaveBinding sbinding : savebindings) {
    if (sbinding instanceof SavePropertyBinding) {
      svalid&=validateSavePropertyBinding(comp,((SavePropertyBinding)sbinding),command,validates,svalid & valid,notifys);
    }
 else {
    }
  }
  if (!binding.hasValidator())   return svalid;
  if (((BinderImpl)binding.getBinder()).hasValidator(binding.getComponent(),binding.getFormId())) {
    clearValidationMessage(binding.getBinder(),binding.getComponent(),binding.getFormId());
  }
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,svalid & valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return svalid & vContext.isValid();
}","private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  Set<SaveBinding> savebindings=((BinderCtrl)binding.getBinder()).getFormAssociatedSaveBindings(binding.getComponent());
  boolean svalid=true;
  for (  SaveBinding sbinding : savebindings) {
    if (sbinding instanceof SavePropertyBinding) {
      svalid&=validateSavePropertyBinding(comp,((SavePropertyBinding)sbinding),command,validates,svalid & valid,notifys);
    }
 else {
    }
  }
  if (!binding.hasValidator())   return svalid;
  if (((BinderImpl)binding.getBinder()).hasValidator(binding.getComponent(),binding.getFormId())) {
    clearValidationMessage(binding.getBinder(),binding.getComponent(),binding.getFormId());
  }
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,svalid & valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return svalid && vContext.isValid();
}"
16321,"private List<Method> getInitMethods(Class<?> clz){
  List<Method> inits=_initMethodCache.get(clz);
  if (inits != null)   return inits;
synchronized (_initMethodCache) {
    inits=_initMethodCache.get(clz);
    if (inits != null)     return inits;
    inits=new ArrayList<Method>();
    Class<?> curr=clz;
    while (curr != null && !curr.equals(Object.class)) {
      Method currm=null;
      Init init=null;
      for (      Method m : curr.getDeclaredMethods()) {
        final Init i=m.getAnnotation(Init.class);
        if (i == null)         continue;
        if (currm != null) {
          throw new UiException(""String_Node_Str"" + curr + ""String_Node_Str""+ currm+ ""String_Node_Str""+ m);
        }
        init=i;
        currm=m;
      }
      if (currm != null) {
        inits.add(0,currm);
      }
      curr=(init != null && init.upward()) ? curr.getSuperclass() : null;
    }
    inits=Collections.unmodifiableList(inits);
    _initMethodCache.put(clz,inits);
  }
  return inits;
}","private List<Method> getInitMethods(Class<?> clz){
  List<Method> inits=null;
synchronized (_initMethodCache) {
    inits=_initMethodCache.get(clz);
    if (inits != null)     return inits;
    inits=new ArrayList<Method>();
    Class<?> curr=clz;
    while (curr != null && !curr.equals(Object.class)) {
      Method currm=null;
      Init init=null;
      for (      Method m : curr.getDeclaredMethods()) {
        final Init i=m.getAnnotation(Init.class);
        if (i == null)         continue;
        if (currm != null) {
          throw new UiException(""String_Node_Str"" + curr + ""String_Node_Str""+ currm+ ""String_Node_Str""+ m);
        }
        init=i;
        currm=m;
      }
      if (currm != null) {
        inits.add(0,currm);
      }
      curr=(init != null && init.upward()) ? curr.getSuperclass() : null;
    }
    inits=Collections.unmodifiableList(inits);
    _initMethodCache.put(clz,inits);
  }
  return inits;
}"
16322,"/** 
 * Convert a Set, Map, List, Object[], Enum, or other kind of ListModel to associated   {@link ListModel}.
 * @param val must be instanceof Set, Map, List, Object[], Enum Class, or other kind of ListModel implementation.
 * @param comp associated component
 * @param ctx bind context
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object coerceToUi(Object val,Component comp,BindContext ctx){
  if (val == null) {
    val=new ArrayList();
  }
  ListModel model=null;
  if (val instanceof ListModel) {
    return val;
  }
 else   if (val instanceof Set) {
    model=new ListModelSet((Set)val,true);
  }
 else   if (val instanceof List) {
    model=new ListModelList((List)val,true);
  }
 else   if (val instanceof Map) {
    model=new ListModelMap((Map)val,true);
  }
 else   if (val instanceof Object[]) {
    model=new ListModelArray((Object[])val,true);
  }
 else   if ((val instanceof Class) && Enum.class.isAssignableFrom((Class)val)) {
    model=new ListModelArray((Object[])((Class)val).getEnumConstants(),true);
  }
 else   if (val instanceof GroupsModel) {
    model=GroupsListModel.toListModel((GroupsModel)val);
  }
 else {
    throw new UiException(""String_Node_Str"" + val.getClass());
  }
  final ListModel compModel=getComponentModel(comp);
  if (compModel instanceof ListSelectionModel) {
    ListSelectionModel smodel=((ListSelectionModel)compModel);
    ListSelectionModel toSModel=(ListSelectionModel)model;
    toSModel.setMultiple(smodel.isMultiple());
    if (!smodel.isSelectionEmpty()) {
      for (int index=smodel.getMinSelectionIndex(); index <= smodel.getMaxSelectionIndex(); index++)       toSModel.addSelectionInterval(index,index);
    }
  }
  model=handleWrappedModel(ctx,comp,model);
  return model;
}","/** 
 * Convert a Set, Map, List, Object[], Enum, or other kind of ListModel to associated   {@link ListModel}.
 * @param val must be instanceof Set, Map, List, Object[], Enum Class, or other kind of ListModel implementation.
 * @param comp associated component
 * @param ctx bind context
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object coerceToUi(Object val,Component comp,BindContext ctx){
  if (val == null) {
    val=new ArrayList();
  }
  ListModel model=null;
  if (val instanceof ListModel) {
    comp.setAttribute(BinderImpl.MODEL,val);
    return val;
  }
 else   if (val instanceof Set) {
    model=new ListModelSet((Set)val,true);
  }
 else   if (val instanceof List) {
    model=new ListModelList((List)val,true);
  }
 else   if (val instanceof Map) {
    model=new ListModelMap((Map)val,true);
  }
 else   if (val instanceof Object[]) {
    model=new ListModelArray((Object[])val,true);
  }
 else   if ((val instanceof Class) && Enum.class.isAssignableFrom((Class)val)) {
    model=new ListModelArray((Object[])((Class)val).getEnumConstants(),true);
  }
 else   if (val instanceof GroupsModel) {
    model=GroupsListModel.toListModel((GroupsModel)val);
  }
 else {
    throw new UiException(""String_Node_Str"" + val.getClass());
  }
  final ListModel compModel=getComponentModel(comp);
  if (compModel instanceof ListSelectionModel) {
    ListSelectionModel smodel=((ListSelectionModel)compModel);
    ListSelectionModel toSModel=(ListSelectionModel)model;
    toSModel.setMultiple(smodel.isMultiple());
    if (!smodel.isSelectionEmpty()) {
      for (int index=smodel.getMinSelectionIndex(); index <= smodel.getMaxSelectionIndex(); index++)       toSModel.addSelectionInterval(index,index);
    }
  }
  model=handleWrappedModel(ctx,comp,model);
  comp.setAttribute(BinderImpl.MODEL,model);
  return model;
}"
16323,"public void render(final Component owner,final Object data,final int index){
  final Template tm=resoloveTemplate(owner,owner,data,index,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final IterationStatus iterStatus=new AbstractIterationStatus(){
    private static final long serialVersionUID=1L;
    @Override public int getIndex(){
      return Integer.valueOf(index);
    }
  }
;
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
  final Component[] items=tm.create(owner,null,new VariableResolverX(){
    public Object resolveVariable(    String name){
      return varnm.equals(name) ? data : null;
    }
    public Object resolveVariable(    XelContext ctx,    Object base,    Object name) throws XelException {
      if (base == null) {
        if (varnm.equals(name)) {
          return data;
        }
 else         if (itervarnm.equals(name)) {
          return iterStatus;
        }
      }
      return null;
    }
  }
,null);
  if (items != null && items.length > 0)   addTemplateDependency(owner,items[0],data,index);
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    comp.setAttribute(varnm,data);
    comp.setAttribute(itervarnm,iterStatus);
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}","public void render(final Component owner,final Object data,final int index){
  final Template tm=resoloveTemplate(owner,owner,data,index,""String_Node_Str"");
  if (tm == null) {
    Label l=new Label(data == null ? ""String_Node_Str"" : data.toString());
    l.setParent(owner);
    return;
  }
  final IterationStatus iterStatus=new AbstractIterationStatus(){
    private static final long serialVersionUID=1L;
    @Override public int getIndex(){
      return Integer.valueOf(index);
    }
  }
;
  final String var=(String)tm.getParameters().get(""String_Node_Str"");
  final String varnm=var == null ? EACH_VAR : var;
  final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
  final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
  final Component[] items=tm.create(owner,null,new VariableResolverX(){
    public Object resolveVariable(    String name){
      return varnm.equals(name) ? data : null;
    }
    public Object resolveVariable(    XelContext ctx,    Object base,    Object name) throws XelException {
      if (base == null) {
        if (varnm.equals(name)) {
          return data;
        }
 else         if (itervarnm.equals(name)) {
          return iterStatus;
        }
      }
      return null;
    }
  }
,null);
  boolean templateTracked=false;
  for (  Component comp : items) {
    comp.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(comp,index,varnm);
    comp.setAttribute(itervarnm,iterStatus);
    if (!templateTracked) {
      addTemplateTracking(owner,comp,data,index);
      templateTracked=true;
    }
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,comp));
  }
}"
16324,"public void render(final Comboitem item,final Object data) throws Exception {
  final Combobox cb=(Combobox)item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(cb,item,data,index,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(cb,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Comboitem nci=(Comboitem)items[0];
    ((LoadStatus)(((AbstractComponent)nci).getExtraCtrl())).setIndex(item.getIndex());
    nci.setAttribute(BinderImpl.VAR,varnm);
    nci.setAttribute(varnm,data);
    nci.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateDependency(cb,nci,data,index);
    if (nci.getValue() == null)     nci.setValue(data);
    item.setAttribute(""String_Node_Str"",nci);
    item.detach();
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,nci));
  }
}","public void render(final Comboitem item,final Object data) throws Exception {
  final Combobox cb=(Combobox)item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(cb,item,data,index,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(cb,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Comboitem nci=(Comboitem)items[0];
    ((LoadStatus)(((AbstractComponent)nci).getExtraCtrl())).setIndex(item.getIndex());
    nci.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(nci,index,varnm);
    nci.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(cb,nci,data,index);
    if (nci.getValue() == null)     nci.setValue(data);
    item.setAttribute(""String_Node_Str"",nci);
    item.detach();
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,nci));
  }
}"
16325,"public ExpressionX parseExpressionX(BindContext ctx,String expression,Class<?> expectedType) throws XelException {
  return (ExpressionX)getExpressionFactory().parseExpression(newXelContext(ctx,null),""String_Node_Str"" + expression + ""String_Node_Str"",expectedType);
}","public ExpressionX parseExpressionX(BindContext ctx,String expression,Class<?> expectedType) throws XelException {
  Component comp=null;
  if (ctx != null) {
    comp=ctx.getComponent();
    if (comp == null) {
      final Binding binding=ctx.getBinding();
      if (binding != null) {
        comp=binding.getComponent();
      }
    }
  }
  return (ExpressionX)getExpressionFactory().parseExpression(newXelContext(ctx,comp),""String_Node_Str"" + expression + ""String_Node_Str"",expectedType);
}"
16326,"public void render(final Listitem item,final Object data) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(listbox,item,data,index,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(listbox,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    nli.setAttribute(varnm,data);
    nli.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateDependency(listbox,nli,data,index);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}","public void render(final Listitem item,final Object data) throws Exception {
  final Listbox listbox=(Listbox)item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(listbox,item,data,index,""String_Node_Str"");
  if (tm == null) {
    item.setLabel(Objects.toString(data));
    item.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(listbox,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Listitem nli=(Listitem)items[0];
    nli.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(nli,index,varnm);
    nli.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(listbox,nli,data,index);
    if (nli.getValue() == null)     nli.setValue(data);
    item.setAttribute(""String_Node_Str"",nli);
    item.detach();
  }
}"
16327,"public void render(final Row row,final Object data){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int index=row.getIndex();
  final Template tm=resoloveTemplate(grid,row,data,index,""String_Node_Str"");
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(rows,row,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    nr.setAttribute(varnm,data);
    nr.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateDependency(grid,nr,data,index);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}","public void render(final Row row,final Object data){
  final Rows rows=(Rows)row.getParent();
  final Grid grid=(Grid)rows.getParent();
  final int index=row.getIndex();
  final Template tm=resoloveTemplate(grid,row,data,index,""String_Node_Str"");
  if (tm == null) {
    final Label label=newRenderLabel(Objects.toString(data));
    label.applyProperties();
    label.setParent(row);
    row.setValue(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(rows,row,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Row nr=(Row)items[0];
    nr.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(nr,index,varnm);
    nr.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(grid,nr,data,index);
    if (nr.getValue() == null)     nr.setValue(data);
    row.setAttribute(""String_Node_Str"",nr);
    row.detach();
  }
}"
16328,"@Override public String render(final Component owner,final Object data,final int index) throws Exception {
  final Template tm=resoloveTemplate(owner,owner,data,index,""String_Node_Str"");
  if (tm == null) {
    return Objects.toString(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final IterationStatus iterStatus=new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
;
    final Component[] items=tm.create(owner,null,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return iterStatus;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    if (!(items[0] instanceof Label))     throw new UiException(""String_Node_Str"" + items[0]);
    final Label lbl=((Label)items[0]);
    lbl.setAttribute(BinderImpl.VAR,varnm);
    lbl.setAttribute(varnm,data);
    lbl.setAttribute(itervarnm,iterStatus);
    addTemplateDependency(owner,lbl,data,index);
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,lbl));
    lbl.detach();
    return lbl.getValue();
  }
}","@Override public String render(final Component owner,final Object data,final int index) throws Exception {
  final Template tm=resoloveTemplate(owner,owner,data,index,""String_Node_Str"");
  if (tm == null) {
    return Objects.toString(data);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final IterationStatus iterStatus=new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
;
    final Component[] items=tm.create(owner,null,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return iterStatus;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    if (!(items[0] instanceof Label))     throw new UiException(""String_Node_Str"" + items[0]);
    final Label lbl=((Label)items[0]);
    lbl.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(lbl,index,varnm);
    lbl.setAttribute(itervarnm,iterStatus);
    addTemplateTracking(owner,lbl,data,index);
    Events.sendEvent(new Event(BinderImpl.ON_BIND_INIT,lbl));
    lbl.detach();
    return lbl.getValue();
  }
}"
16329,"public void render(final Treeitem item,final Object data) throws Exception {
  final Tree tree=item.getTree();
  final Component parent=item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(tree,parent,data,index,""String_Node_Str"");
  if (tm == null) {
    Treecell tc=new Treecell(Objects.toString(data));
    Treerow tr=null;
    item.setValue(data);
    if (item.getTreerow() == null) {
      tr=new Treerow();
      tr.setParent(item);
    }
 else {
      tr=item.getTreerow();
      tr.getChildren().clear();
    }
    tc.setParent(tr);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(parent,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Treeitem ti=(Treeitem)items[0];
    ti.setAttribute(BinderImpl.VAR,varnm);
    ti.setAttribute(varnm,data);
    ti.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateDependency(tree,ti,data,index);
    if (ti.getValue() == null)     ti.setValue(data);
    item.setAttribute(""String_Node_Str"",ti);
    item.detach();
  }
}","public void render(final Treeitem item,final Object data) throws Exception {
  final Tree tree=item.getTree();
  final Component parent=item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(tree,parent,data,index,""String_Node_Str"");
  if (tm == null) {
    Treecell tc=new Treecell(Objects.toString(data));
    Treerow tr=null;
    item.setValue(data);
    if (item.getTreerow() == null) {
      tr=new Treerow();
      tr.setParent(item);
    }
 else {
      tr=item.getTreerow();
      tr.getChildren().clear();
    }
    tc.setParent(tr);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(parent,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Treeitem ti=(Treeitem)items[0];
    ti.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(ti,index,varnm);
    ti.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(tree,ti,data,index);
    if (ti.getValue() == null)     ti.setValue(data);
    item.setAttribute(""String_Node_Str"",ti);
    item.detach();
  }
}"
16330,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Combobox lbx=(Combobox)comp;
    final ListModel<?> model=lbx.getModel();
    final String varnm=(String)((Comboitem)val).getAttribute(BinderImpl.VAR);
    if (varnm != null) {
      return ((Comboitem)val).getAttribute(varnm);
    }
 else     if (model != null) {
      return model.getElementAt(((Comboitem)val).getIndex());
    }
 else {
      return ((Comboitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Combobox lbx=(Combobox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      return model.getElementAt(((Comboitem)val).getIndex());
    }
 else {
      return ((Comboitem)val).getValue();
    }
  }
  return null;
}"
16331,"public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Combobox cbx=(Combobox)comp;
  final ListModel<?> model=cbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  if (val != null) {
    int i=0;
    for (final Iterator<?> it=cbx.getItems().iterator(); it.hasNext(); ) {
      final Comboitem ci=(Comboitem)it.next();
      final String varnm=(String)ci.getAttribute(BinderImpl.VAR);
      Object bean=null;
      if (varnm != null) {
        bean=ci.getAttribute(varnm);
      }
 else       if (model != null) {
        bean=model.getElementAt(i);
      }
 else {
        bean=ci.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          smodel.addSelectionInterval(i,i);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return ci;
      }
      i++;
    }
  }
  if (smodel != null) {
    if (smodel.getMaxSelectionIndex() != -1)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}","public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Combobox cbx=(Combobox)comp;
  final ListModel<?> model=cbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  if (val != null) {
    int i=0;
    for (final Iterator<?> it=cbx.getItems().iterator(); it.hasNext(); ) {
      final Comboitem ci=(Comboitem)it.next();
      Object bean=null;
      if (model != null) {
        bean=model.getElementAt(i);
      }
 else {
        bean=ci.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          smodel.addSelectionInterval(i,i);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return ci;
      }
      i++;
    }
  }
  if (smodel != null) {
    if (smodel.getMaxSelectionIndex() != -1)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}"
16332,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    final String varnm=(String)((Listitem)val).getAttribute(BinderImpl.VAR);
    if (varnm != null) {
      return ((Listitem)val).getAttribute(varnm);
    }
 else     if (model != null) {
      return model.getElementAt(((Listitem)val).getIndex());
    }
 else {
      return ((Listitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      return model.getElementAt(((Listitem)val).getIndex());
    }
 else {
      return ((Listitem)val).getValue();
    }
  }
  return null;
}"
16333,"public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  if (val != null) {
    for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
      final Listitem li=(Listitem)it.next();
      final String varnm=(String)li.getAttribute(BinderImpl.VAR);
      Object bean=null;
      if (varnm != null) {
        bean=li.getAttribute(varnm);
      }
 else       if (model != null) {
        bean=model.getElementAt(li.getIndex());
      }
 else {
        bean=li.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          final int i=li.getIndex();
          smodel.addSelectionInterval(i,i);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return li;
      }
    }
  }
  if (smodel != null) {
    if (smodel.getMaxSelectionIndex() != -1)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}","public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  if (val != null) {
    for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
      final Listitem li=(Listitem)it.next();
      Object bean=null;
      if (model != null) {
        bean=model.getElementAt(li.getIndex());
      }
 else {
        bean=li.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          final int i=li.getIndex();
          smodel.addSelectionInterval(i,i);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return li;
      }
    }
  }
  if (smodel != null) {
    if (smodel.getMaxSelectionIndex() != -1)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}"
16334,"@SuppressWarnings(""String_Node_Str"") public Object coerceToBean(Object val,Component comp,BindContext ctx){
  Set<Object> vals=new LinkedHashSet<Object>();
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    final Set<Listitem> items=(Set<Listitem>)Classes.coerce(LinkedHashSet.class,val);
    for (    Listitem item : items) {
      final String varnm=(String)item.getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        vals.add(item.getAttribute(varnm));
      }
 else       if (model != null) {
        vals.add(model.getElementAt(item.getIndex()));
      }
 else {
        vals.add(item.getValue());
      }
    }
    return vals;
  }
  return vals;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToBean(Object val,Component comp,BindContext ctx){
  Set<Object> vals=new LinkedHashSet<Object>();
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    final Set<Listitem> items=(Set<Listitem>)Classes.coerce(LinkedHashSet.class,val);
    for (    Listitem item : items) {
      if (model != null) {
        vals.add(model.getElementAt(item.getIndex()));
      }
 else {
        vals.add(item.getValue());
      }
    }
    return vals;
  }
  return vals;
}"
16335,"@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  final Set<Listitem> items=new LinkedHashSet<Listitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (smodel != null && smodel.getMaxSelectionIndex() != -1) {
    smodel.clearSelection();
  }
  if (vals != null && vals.size() > 0) {
    for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
      final Listitem li=(Listitem)it.next();
      final String varnm=(String)li.getAttribute(BinderImpl.VAR);
      Object bean=null;
      if (varnm != null) {
        bean=li.getAttribute(varnm);
      }
 else       if (model != null) {
        bean=model.getElementAt(li.getIndex());
      }
 else {
        bean=li.getValue();
      }
      if (vals.contains(bean)) {
        if (smodel != null) {
          final int i=li.getIndex();
          smodel.addSelectionInterval(i,i);
        }
        items.add(li);
      }
    }
  }
  return smodel == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Listbox lbx=(Listbox)comp;
  final ListModel<?> model=lbx.getModel();
  final ListSelectionModel smodel=(model instanceof ListSelectionModel) ? (ListSelectionModel)model : null;
  final Set<Listitem> items=new LinkedHashSet<Listitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (smodel != null && smodel.getMaxSelectionIndex() != -1) {
    smodel.clearSelection();
  }
  if (vals != null && vals.size() > 0) {
    for (final Iterator<?> it=lbx.getItems().iterator(); it.hasNext(); ) {
      final Listitem li=(Listitem)it.next();
      Object bean=null;
      if (model != null) {
        bean=model.getElementAt(li.getIndex());
      }
 else {
        bean=li.getValue();
      }
      if (vals.contains(bean)) {
        if (smodel != null) {
          final int i=li.getIndex();
          smodel.addSelectionInterval(i,i);
        }
        items.add(li);
      }
    }
  }
  return smodel == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}"
16336,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    final String varnm=(String)((Treeitem)val).getAttribute(BinderImpl.VAR);
    if (varnm != null) {
      return ((Treeitem)val).getAttribute(varnm);
    }
 else     if (model != null) {
      return model.getChild(toPath((Treeitem)val));
    }
 else {
      return ((Treeitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    if (model != null) {
      return model.getChild(toPath((Treeitem)val));
    }
 else {
      return ((Treeitem)val).getValue();
    }
  }
  return null;
}"
16337,"public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Tree tree=(Tree)comp;
  final TreeModel<?> model=tree.getModel();
  final TreeSelectionModel smodel=(model instanceof TreeSelectionModel) ? (TreeSelectionModel)model : null;
  if (val != null) {
    for (final Iterator<?> it=tree.getItems().iterator(); it.hasNext(); ) {
      final Treeitem ti=(Treeitem)it.next();
      final String varnm=(String)ti.getAttribute(BinderImpl.VAR);
      Object bean=null;
      int path[]=null;
      if (varnm != null) {
        bean=ti.getAttribute(varnm);
      }
 else       if (model != null) {
        bean=model.getChild(path=toPath(ti));
      }
 else {
        bean=ti.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          if (path == null) {
            path=toPath(ti);
          }
          smodel.addSelectionPath(path);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return ti;
      }
    }
  }
  if (smodel != null) {
    if (smodel.getSelectionCount() > 0)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}","public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Tree tree=(Tree)comp;
  final TreeModel<?> model=tree.getModel();
  final TreeSelectionModel smodel=(model instanceof TreeSelectionModel) ? (TreeSelectionModel)model : null;
  if (val != null) {
    for (final Iterator<?> it=tree.getItems().iterator(); it.hasNext(); ) {
      final Treeitem ti=(Treeitem)it.next();
      Object bean=null;
      int path[]=null;
      if (model != null) {
        bean=model.getChild(path=toPath(ti));
      }
 else {
        bean=ti.getValue();
      }
      if (val.equals(bean)) {
        if (smodel != null) {
          if (path == null) {
            path=toPath(ti);
          }
          smodel.addSelectionPath(path);
          return LoadPropertyBinding.LOAD_IGNORED;
        }
        return ti;
      }
    }
  }
  if (smodel != null) {
    if (smodel.getSelectionCount() > 0)     smodel.clearSelection();
    return LoadPropertyBinding.LOAD_IGNORED;
  }
  return null;
}"
16338,"@SuppressWarnings(""String_Node_Str"") public Object coerceToBean(Object val,Component comp,BindContext ctx){
  Set<Object> vals=new LinkedHashSet<Object>();
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    final Set<Treeitem> items=(Set<Treeitem>)Classes.coerce(LinkedHashSet.class,val);
    for (    Treeitem item : items) {
      final String varnm=(String)item.getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        vals.add(item.getAttribute(varnm));
      }
 else       if (model != null) {
        vals.add(model.getChild(toPath(item)));
      }
 else {
        vals.add(item.getValue());
      }
    }
    return vals;
  }
  return vals;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToBean(Object val,Component comp,BindContext ctx){
  Set<Object> vals=new LinkedHashSet<Object>();
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    final Set<Treeitem> items=(Set<Treeitem>)Classes.coerce(LinkedHashSet.class,val);
    for (    Treeitem item : items) {
      if (model != null) {
        vals.add(model.getChild(toPath(item)));
      }
 else {
        vals.add(item.getValue());
      }
    }
    return vals;
  }
  return vals;
}"
16339,"@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Tree tree=(Tree)comp;
  final TreeModel<?> model=tree.getModel();
  final TreeSelectionModel smodel=(model instanceof TreeSelectionModel) ? (TreeSelectionModel)model : null;
  final Set<Treeitem> items=new LinkedHashSet<Treeitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (smodel != null && !smodel.isSelectionEmpty()) {
    smodel.clearSelection();
  }
  if (vals != null && vals.size() > 0) {
    for (final Iterator<?> it=tree.getItems().iterator(); it.hasNext(); ) {
      final Treeitem ti=(Treeitem)it.next();
      final String varnm=(String)ti.getAttribute(BinderImpl.VAR);
      Object bean=null;
      int path[]=null;
      if (varnm != null) {
        bean=ti.getAttribute(varnm);
      }
 else       if (model != null) {
        bean=model.getChild(path=toPath(ti));
      }
 else {
        bean=ti.getValue();
      }
      if (vals.contains(bean)) {
        if (smodel != null) {
          if (path == null) {
            path=toPath(ti);
          }
          smodel.addSelectionPath(path);
        }
        items.add(ti);
      }
    }
  }
  return smodel == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}","@SuppressWarnings(""String_Node_Str"") public Object coerceToUi(Object val,Component comp,BindContext ctx){
  Tree tree=(Tree)comp;
  final TreeModel<?> model=tree.getModel();
  final TreeSelectionModel smodel=(model instanceof TreeSelectionModel) ? (TreeSelectionModel)model : null;
  final Set<Treeitem> items=new LinkedHashSet<Treeitem>();
  Set<Object> vals=val == null ? null : (Set<Object>)Classes.coerce(LinkedHashSet.class,val);
  if (smodel != null && !smodel.isSelectionEmpty()) {
    smodel.clearSelection();
  }
  if (vals != null && vals.size() > 0) {
    for (final Iterator<?> it=tree.getItems().iterator(); it.hasNext(); ) {
      final Treeitem ti=(Treeitem)it.next();
      Object bean=null;
      int path[]=null;
      if (model != null) {
        bean=model.getChild(path=toPath(ti));
      }
 else {
        bean=ti.getValue();
      }
      if (vals.contains(bean)) {
        if (smodel != null) {
          if (path == null) {
            path=toPath(ti);
          }
          smodel.addSelectionPath(path);
        }
        items.add(ti);
      }
    }
  }
  return smodel == null ? items : LoadPropertyBinding.LOAD_IGNORED;
}"
16340,"public void render(final Treeitem item,final Object data) throws Exception {
  final Tree tree=item.getTree();
  final Component parent=item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(tree,parent,data,index,""String_Node_Str"");
  if (tm == null) {
    Treecell tc=new Treecell(Objects.toString(data));
    Treerow tr=null;
    item.setValue(data);
    if (item.getTreerow() == null) {
      tr=new Treerow();
      tr.setParent(item);
    }
 else {
      tr=item.getTreerow();
      tr.getChildren().clear();
    }
    tc.setParent(tr);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(parent,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Treeitem ti=(Treeitem)items[0];
    ti.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(ti,index,varnm);
    ti.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(tree,ti,data,index);
    if (ti.getValue() == null)     ti.setValue(data);
    item.setAttribute(""String_Node_Str"",ti);
    item.detach();
  }
}","public void render(final Treeitem item,final Object data) throws Exception {
  final Tree tree=item.getTree();
  final Component parent=item.getParent();
  final int index=item.getIndex();
  final Template tm=resoloveTemplate(tree,parent,data,index,""String_Node_Str"");
  if (tm == null) {
    Treecell tc=new Treecell(Objects.toString(data));
    Treerow tr=null;
    item.setValue(data);
    if (item.getTreerow() == null) {
      tr=new Treerow();
      tr.setParent(item);
    }
 else {
      tr=item.getTreerow();
      tr.getChildren().clear();
    }
    tc.setParent(tr);
  }
 else {
    final String var=(String)tm.getParameters().get(EACH_ATTR);
    final String varnm=var == null ? EACH_VAR : var;
    final String itervar=(String)tm.getParameters().get(STATUS_ATTR);
    final String itervarnm=itervar == null ? varnm + STATUS_POST_VAR : itervar;
    final Component[] items=tm.create(parent,item,new VariableResolverX(){
      public Object resolveVariable(      String name){
        return varnm.equals(name) ? data : null;
      }
      public Object resolveVariable(      XelContext ctx,      Object base,      Object name) throws XelException {
        if (base == null) {
          if (varnm.equals(name)) {
            return data;
          }
 else           if (itervarnm.equals(name)) {
            return new AbstractIterationStatus(){
              private static final long serialVersionUID=1L;
              @Override public int getIndex(){
                return Integer.valueOf(index);
              }
            }
;
          }
        }
        return null;
      }
    }
,null);
    if (items.length != 1)     throw new UiException(""String_Node_Str"" + items.length);
    final Treeitem ti=(Treeitem)items[0];
    ti.setAttribute(BinderImpl.VAR,varnm);
    addItemReference(ti,toPath(ti),varnm);
    ti.setAttribute(itervarnm,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    addTemplateTracking(tree,ti,data,index);
    if (ti.getValue() == null)     ti.setValue(data);
    item.setAttribute(""String_Node_Str"",ti);
    item.detach();
  }
}"
16341,"@SuppressWarnings(""String_Node_Str"") public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  comp.getChildren().clear();
  if (value != null) {
    BindChildRenderer renderer=new BindChildRenderer();
    List<Object> data=(List<Object>)Classes.coerce(List.class,value);
    int size=data.size();
    for (int i=0; i < size; i++) {
      renderer.render(comp,data.get(i),i);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  comp.getChildren().clear();
  if (value != null) {
    BindChildRenderer renderer=new BindChildRenderer();
    List<Object> data=(List<Object>)Classes.coerce(List.class,value);
    comp.setAttribute(BinderImpl.MODEL,data);
    int size=data.size();
    for (int i=0; i < size; i++) {
      renderer.render(comp,data.get(i),i);
    }
  }
}"
16342,"@SuppressWarnings(""String_Node_Str"") public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  comp.getChildren().clear();
  if (value != null) {
    BindChildRenderer renderer=new BindChildRenderer();
    List<Object> data=(List<Object>)Classes.coerce(List.class,value);
    int size=data.size();
    for (int i=0; i < size; i++) {
      renderer.render(comp,data.get(i),i);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void load(BindContext ctx){
  final Component comp=getComponent();
  final BindEvaluatorX eval=getBinder().getEvaluatorX();
  Object value=eval.getValue(ctx,comp,_accessInfo.getProperty());
  comp.getChildren().clear();
  if (value != null) {
    BindChildRenderer renderer=new BindChildRenderer();
    List<Object> data=(List<Object>)Classes.coerce(List.class,value);
    comp.setAttribute(BinderImpl.MODEL,data);
    int size=data.size();
    for (int i=0; i < size; i++) {
      renderer.render(comp,data.get(i),i);
    }
  }
}"
16343,"public void onChange(ListDataEvent event){
  if (event.getType() == ListDataEvent.SELECTION_CHANGED) {
    if (_model instanceof ListSelectionModel) {
      ListSelectionModel smodel=(ListSelectionModel)_model;
      setSelectedIndex(smodel.getMinSelectionIndex());
    }
  }
 else {
    postOnInitRender();
  }
}","public void onChange(ListDataEvent event){
  if (_model instanceof ListSelectionModel) {
    ListSelectionModel smodel=(ListSelectionModel)_model;
    setSelectedIndex(smodel.getMinSelectionIndex());
  }
  if (event.getType() != ListDataEvent.SELECTION_CHANGED) {
    postOnInitRender();
  }
}"
16344,"private void initDataListener(){
  if (_dataListener == null)   _dataListener=new ListDataListener(){
    public void onChange(    ListDataEvent event){
      if (event.getType() == ListDataEvent.SELECTION_CHANGED) {
        if (_model instanceof ListSelectionModel) {
          ListSelectionModel smodel=(ListSelectionModel)_model;
          setSelectedIndex(smodel.getMinSelectionIndex());
        }
      }
 else {
        postOnInitRender();
      }
    }
  }
;
  _model.addListDataListener(_dataListener);
}","private void initDataListener(){
  if (_dataListener == null)   _dataListener=new ListDataListener(){
    public void onChange(    ListDataEvent event){
      if (_model instanceof ListSelectionModel) {
        ListSelectionModel smodel=(ListSelectionModel)_model;
        setSelectedIndex(smodel.getMinSelectionIndex());
      }
      if (event.getType() != ListDataEvent.SELECTION_CHANGED) {
        postOnInitRender();
      }
    }
  }
;
  _model.addListDataListener(_dataListener);
}"
16345,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  reIndexRequired();
  if (_model != null)   initDataListener();
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  reIndexRequired();
  if (_model != null) {
    initDataListener();
    if (_model instanceof ListModelMap) {
      for (      Comboitem item : getItems()) {
        item.setValue(_model.getElementAt(item.getIndex()));
      }
    }
  }
}"
16346,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(RowRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  afterUnmarshal(-1);
  int offset=s.readInt();
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(RowRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  afterUnmarshal(-1);
  int offset=s.readInt();
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
    if (_model instanceof ListModelMap && _rows != null) {
      for (      Component o : _rows.getChildren()) {
        Row item=(Row)o;
        item.setValue(_model.getElementAt(item.getIndex()));
      }
    }
  }
}"
16347,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(ListitemRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  int offset=s.readInt();
  afterUnmarshal(offset);
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(ListitemRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  int offset=s.readInt();
  afterUnmarshal(offset);
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
    if (_model instanceof ListModelMap) {
      for (      Listitem item : getItems())       item.setValue(_model.getElementAt(item.getIndex()));
    }
  }
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
}"
16348,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  afterUnmarshal();
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (s.readBoolean())   _value=s.readObject();
  afterUnmarshal();
}"
16349,"/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new SerializableEventListener<PagingEvent>(){
    public void onEvent(    PagingEvent event){
      Events.postEvent(new PagingEvent(event.getName(),Grid.this,event.getPageable(),event.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new SerializableEventListener<Event>(){
    public void onEvent(    Event event){
      if (_rows != null && _model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        if (_rod) {
          getDataLoader().syncModel(ofs,pgsz);
        }
        postOnPagingInitRender();
      }
      if (getModel() != null || getPagingPosition().equals(""String_Node_Str""))       invalidate();
 else       if (_rows != null) {
        _rows.invalidate();
        if (_frozen != null)         _frozen.invalidate();
      }
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}","/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new PGListener();
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new PGImpListener();
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}"
16350,"/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new SerializableEventListener<PagingEvent>(){
    public void onEvent(    PagingEvent event){
      Events.postEvent(new PagingEvent(event.getName(),Listbox.this,event.getPageable(),event.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new SerializableEventListener<Event>(){
    public void onEvent(    Event event){
      if (_model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        if (_rod) {
          getDataLoader().syncModel(ofs,pgsz);
        }
        postOnPagingInitRender();
      }
      invalidate();
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}","/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new PGListener();
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new PGImpListener();
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}"
16351,"/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new SerializableEventListener<PagingEvent>(){
    public void onEvent(    PagingEvent event){
      Events.postEvent(new PagingEvent(event.getName(),Tree.this,event.getPageable(),event.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new SerializableEventListener<Event>(){
    public void onEvent(    Event event){
      if (inPagingMold()) {
        invalidate();
      }
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}","/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new PGListener();
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new PGImpListener();
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}"
16352,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  _indexCache=new LinkedHashMap<Object,Integer>();
}"
16353,"/** 
 * Handles when the list model's content changed.
 */
private void onListDataChange(ListDataEvent event){
  int type=event.getType();
  if ((type == ListDataEvent.INTERVAL_ADDED || type == ListDataEvent.CONTENTS_CHANGED) && !isIgnoreSortWhenChanged()) {
    doSort(this);
  }
 else   if (type == ListDataEvent.SELECTION_CHANGED) {
    if (_model instanceof ListSelectionModel) {
      ListSelectionModel smodel=(ListSelectionModel)_model;
      if (smodel.isSelectionEmpty()) {
        for (        Listitem item : new ArrayList<Listitem>(_selItems))         item.setSelected(false);
      }
 else {
        final int min=Math.max(event.getIndex0(),smodel.getMinSelectionIndex());
        final int max=Math.min(event.getIndex1(),smodel.getMaxSelectionIndex());
        for (int i=min; i <= max; i++) {
          Listitem item=getItemAtIndex(i);
          if (item != null) {
            item.setSelected(smodel.isSelectedIndex(i));
          }
 else           if (smodel.isSelectedIndex(i)) {
            setSelectedIndex(i);
          }
        }
      }
    }
  }
 else {
    getDataLoader().doListDataChange(event);
    postOnInitRender();
  }
}","/** 
 * Handles when the list model's content changed.
 */
private void onListDataChange(ListDataEvent event){
  int type=event.getType();
  if ((type == ListDataEvent.INTERVAL_ADDED || type == ListDataEvent.CONTENTS_CHANGED) && !isIgnoreSortWhenChanged()) {
    doSort(this);
  }
 else   if (type == ListDataEvent.SELECTION_CHANGED) {
    if (_model instanceof ListSelectionModel) {
      ListSelectionModel smodel=(ListSelectionModel)_model;
      if (smodel.isSelectionEmpty()) {
        for (        Listitem item : new ArrayList<Listitem>(_selItems))         item.setSelected(false);
      }
 else {
        final int min=event.getIndex0();
        final int max=event.getIndex1();
        for (int i=min; i <= max; i++) {
          Listitem item=getItemAtIndex(i);
          if (item != null) {
            item.setSelected(smodel.isSelectedIndex(i));
          }
 else           if (smodel.isSelectedIndex(i)) {
            setSelectedIndex(i);
          }
        }
      }
    }
  }
 else {
    getDataLoader().doListDataChange(event);
    postOnInitRender();
  }
}"
16354,"private void afterUnmarshal(){
  final int offset=getDataLoader().getOffset();
  final int limit=getDataLoader().getLimit();
  resetDataLoader();
  getDataLoader().init(this,offset,limit);
  int index=offset;
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    final Object child=it.next();
    if (child instanceof Listitem) {
      final Listitem li=(Listitem)child;
      li.setIndexDirectly(index++);
      if (li.isSelected()) {
        _selItems.add(li);
      }
    }
 else     if (child instanceof Listhead) {
      _listhead=(Listhead)child;
    }
 else     if (child instanceof Listfoot) {
      _listfoot=(Listfoot)child;
    }
 else     if (child instanceof Frozen) {
      _frozen=(Frozen)child;
    }
 else     if (child instanceof Paging) {
      _pgi=_paging=(Paging)child;
      addPagingListener(_pgi);
    }
  }
}","private void afterUnmarshal(){
  final int offset=getDataLoader().getOffset();
  int index=offset;
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    final Object child=it.next();
    if (child instanceof Listitem) {
      final Listitem li=(Listitem)child;
      li.setIndexDirectly(index++);
      if (li.isSelected()) {
        _selItems.add(li);
      }
    }
 else     if (child instanceof Listhead) {
      _listhead=(Listhead)child;
    }
 else     if (child instanceof Listfoot) {
      _listfoot=(Listfoot)child;
    }
 else     if (child instanceof Frozen) {
      _frozen=(Frozen)child;
    }
 else     if (child instanceof Paging) {
      _pgi=_paging=(Paging)child;
      addPagingListener(_pgi);
    }
  }
  final int limit=getDataLoader().getLimit();
  resetDataLoader();
  getDataLoader().init(this,offset,limit);
}"
16355,"/** 
 * Handles when the list model's content changed.
 */
private void onListDataChange(ListDataEvent event){
  int type=event.getType();
  if ((type == ListDataEvent.INTERVAL_ADDED || type == ListDataEvent.CONTENTS_CHANGED) && !isIgnoreSortWhenChanged()) {
    doSort(this);
  }
 else   if (type == ListDataEvent.SELECTION_CHANGED) {
    if (_model instanceof ListSelectionModel) {
      ListSelectionModel smodel=(ListSelectionModel)_model;
      if (smodel.isSelectionEmpty()) {
        for (        Listitem item : new ArrayList<Listitem>(_selItems))         item.setSelected(false);
      }
 else {
        for (int i=smodel.getMinSelectionIndex(); i <= smodel.getMaxSelectionIndex(); i++) {
          Listitem item=getItemAtIndex(i);
          if (item != null) {
            item.setSelected(smodel.isSelectedIndex(i));
          }
 else           if (smodel.isSelectedIndex(i)) {
            setSelectedIndex(i);
          }
        }
      }
    }
  }
 else {
    getDataLoader().doListDataChange(event);
    postOnInitRender();
  }
}","/** 
 * Handles when the list model's content changed.
 */
private void onListDataChange(ListDataEvent event){
  int type=event.getType();
  if ((type == ListDataEvent.INTERVAL_ADDED || type == ListDataEvent.CONTENTS_CHANGED) && !isIgnoreSortWhenChanged()) {
    doSort(this);
  }
 else   if (type == ListDataEvent.SELECTION_CHANGED) {
    if (_model instanceof ListSelectionModel) {
      ListSelectionModel smodel=(ListSelectionModel)_model;
      if (smodel.isSelectionEmpty()) {
        for (        Listitem item : new ArrayList<Listitem>(_selItems))         item.setSelected(false);
      }
 else {
        final int min=Math.max(event.getIndex0(),smodel.getMinSelectionIndex());
        final int max=Math.min(event.getIndex1(),smodel.getMaxSelectionIndex());
        for (int i=min; i <= max; i++) {
          Listitem item=getItemAtIndex(i);
          if (item != null) {
            item.setSelected(smodel.isSelectedIndex(i));
          }
 else           if (smodel.isSelectedIndex(i)) {
            setSelectedIndex(i);
          }
        }
      }
    }
  }
 else {
    getDataLoader().doListDataChange(event);
    postOnInitRender();
  }
}"
16356,"private void fireSelectionChanged(){
  if (lastChangedIndex == MIN) {
    return;
  }
  int oldFirstChangedIndex=firstChangedIndex;
  int oldLastChangedIndex=lastChangedIndex;
  firstChangedIndex=MAX;
  lastChangedIndex=MIN;
  fireEvent(ListDataEvent.SELECTION_CHANGED,oldFirstChangedIndex,oldLastChangedIndex);
}","private void fireSelectionChanged(){
  if (lastChangedIndex == MIN || noFireEvent) {
    return;
  }
  int oldFirstChangedIndex=firstChangedIndex;
  int oldLastChangedIndex=lastChangedIndex;
  firstChangedIndex=MAX;
  lastChangedIndex=MIN;
  fireEvent(ListDataEvent.SELECTION_CHANGED,oldFirstChangedIndex,oldLastChangedIndex);
}"
16357,"@SuppressWarnings(""String_Node_Str"") void render(Listitem item) throws Throwable {
  if (item.isLoaded())   return;
  if (!_rendered && (_renderer instanceof RendererCtrl)) {
    ((RendererCtrl)_renderer).doTry();
    _ctrled=true;
  }
  final Listcell cell=(Listcell)item.getFirstChild();
  if (!(_renderer instanceof ListitemRendererExt) || (((ListitemRendererExt)_renderer).getControls() & ListitemRendererExt.DETACH_ON_RENDER) != 0) {
    cell.detach();
  }
  final Object value=_model.getElementAt(item.getIndex());
  final boolean selected=_model instanceof ListSelectionModel && ((ListSelectionModel)_model).isSelectedIndex(item.getIndex());
  try {
    _renderer.render(item,value);
    Object v=item.getAttribute(""String_Node_Str"");
    if (v != null)     item=(Listitem)v;
  }
 catch (  Throwable ex) {
    try {
      item.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    item.setLoaded(true);
    throw ex;
  }
 finally {
    if (item.getChildren().isEmpty())     cell.setParent(item);
  }
  if (selected) {
    addItemToSelection(item);
  }
  item.setLoaded(true);
  _rendered=true;
}","@SuppressWarnings(""String_Node_Str"") void render(Listitem item) throws Throwable {
  if (item.isLoaded())   return;
  if (!_rendered && (_renderer instanceof RendererCtrl)) {
    ((RendererCtrl)_renderer).doTry();
    _ctrled=true;
  }
  final Listcell cell=(Listcell)item.getFirstChild();
  if (!(_renderer instanceof ListitemRendererExt) || (((ListitemRendererExt)_renderer).getControls() & ListitemRendererExt.DETACH_ON_RENDER) != 0) {
    cell.detach();
  }
  final Object value=_model.getElementAt(item.getIndex());
  final boolean selected=_model instanceof ListSelectionModel && !((ListSelectionModel)_model).isSelectionEmpty() && ((ListSelectionModel)_model).isSelectedIndex(item.getIndex());
  try {
    _renderer.render(item,value);
    Object v=item.getAttribute(""String_Node_Str"");
    if (v != null)     item=(Listitem)v;
  }
 catch (  Throwable ex) {
    try {
      item.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    item.setLoaded(true);
    throw ex;
  }
 finally {
    if (item.getChildren().isEmpty())     cell.setParent(item);
  }
  if (selected) {
    addItemToSelection(item);
  }
  item.setLoaded(true);
  _rendered=true;
}"
16358,"@SuppressWarnings(""String_Node_Str"") @Override public Object willClone(Component comp){
  if (_model instanceof ComponentCloneListener)   return GroupsListModel.toListModel((GroupsModel<D,G,F>)((ComponentCloneListener)_model).willClone(comp));
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Object willClone(Component comp){
  if (_model instanceof ComponentCloneListener) {
    GroupsListModelExt clone=(GroupsListModelExt)clone();
    GroupsModel m=(GroupsModel)((ComponentCloneListener)_model).willClone(comp);
    if (m != null)     clone._model=m;
    clone.init();
    return clone;
  }
  return null;
}"
16359,"/** 
 * Returns the index of the first occurrence of the specified element.
 * @since 6.0.0
 */
protected int indexOf(Object obj){
  for (int i=0, j=this.getSize(); i < j; i++) {
    if (Objects.equals(obj,getElementAt(i)))     return i;
  }
  return -1;
}","/** 
 * Returns the index of the first occurrence of the specified element. <p> The performance of this implementation is bad, it will go through the whole GroupsModel to check the element's index.
 * @since 6.0.0
 */
protected int indexOf(Object obj){
  if (_indexCache.isEmpty()) {
    reindex();
  }
  Integer val=_indexCache.get(obj);
  return val == null ? -1 : val.intValue();
}"
16360,"private void init(){
  final int groupCount=_model.getGroupCount();
  _gpofs=new int[groupCount];
  _gpfts=new boolean[groupCount];
  _gpcloses=new boolean[groupCount];
  _size=0;
  for (int j=0; j < groupCount; ++j) {
    _gpofs[j]=_size;
    _gpcloses[j]=_model.isClose(j);
    _size+=1 + (_gpcloses[j] ? 0 : _model.getChildCount(j));
    _gpfts[j]=_model.hasGroupfoot(j);
    if (_gpfts[j])     ++_size;
  }
  if (_listener == null) {
    _listener=new DataListener();
    _model.addGroupsDataListener(_listener);
  }
}","protected void init(){
  final int groupCount=_model.getGroupCount();
  _gpofs=new int[groupCount];
  _gpfts=new boolean[groupCount];
  _gpcloses=new boolean[groupCount];
  _size=0;
  for (int j=0; j < groupCount; ++j) {
    _gpofs[j]=_size;
    _gpcloses[j]=_model.isClose(j);
    _size+=1 + (_gpcloses[j] ? 0 : _model.getChildCount(j));
    _gpfts[j]=_model.hasGroupfoot(j);
    if (_gpfts[j])     ++_size;
  }
  if (_listener == null) {
    _listener=new DataListener();
    _model.addGroupsDataListener(_listener);
  }
}"
16361,"public void onChange(GroupsDataEvent event){
  int type=event.getType(), j0=event.getIndex0(), j1=event.getIndex1();
switch (type) {
case GroupsDataEvent.CONTENTS_CHANGED:
case GroupsDataEvent.INTERVAL_ADDED:
case GroupsDataEvent.INTERVAL_REMOVED:
    final int gi=event.getGroupIndex();
  if (gi < 0 || gi >= _gpofs.length)   throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ gi);
int ofs=_gpofs[gi] + 1;
j0=j0 >= 0 ? j0 + ofs : ofs;
if (j1 >= 0) {
j1=j1 + ofs;
}
 else {
j1=getNextOffset(gi) - 1;
if (_gpfts[gi]) --j1;
}
break;
case GroupsDataEvent.GROUPS_CHANGED:
case GroupsDataEvent.GROUPS_ADDED:
case GroupsDataEvent.GROUPS_REMOVED:
type-=GroupsDataEvent.GROUPS_CHANGED;
if (j0 >= 0) {
if (j0 >= _gpofs.length) throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ j0);
j0=_gpofs[j0];
}
if (j1 >= 0) {
if (j1 >= _gpofs.length) throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ j1);
j1=getNextOffset(j1) - 1;
}
}
init();
fireEvent(type,j0,j1);
}","public void onChange(GroupsDataEvent event){
  int type=event.getType(), j0=event.getIndex0(), j1=event.getIndex1();
  if (type != GroupsDataEvent.GROUPS_CHANGED) {
    GroupsListModel self=GroupsListModel.this;
    List<Object> selected=null;
    if (!self.isSelectionEmpty()) {
      selected=new ArrayList<Object>();
      int min=self.getMinSelectionIndex();
      int max=self.getMinSelectionIndex();
      for (      Map.Entry<Object,Integer> me : _indexCache.entrySet()) {
        if (min >= me.getValue() && max <= me.getValue()) {
          if (GroupsListModel.super.isSelectedIndex(me.getValue())) {
            selected.add(me.getKey());
          }
        }
        if (max < me.getValue())         break;
      }
    }
    _indexCache.clear();
    if (selected != null) {
      int[] sel=new int[selected.size()];
      int i=0;
      for (      Object o : selected) {
        sel[i++]=indexOf(o);
      }
      self.reorganizeIndex(sel);
    }
  }
switch (type) {
case GroupsDataEvent.CONTENTS_CHANGED:
case GroupsDataEvent.INTERVAL_ADDED:
case GroupsDataEvent.INTERVAL_REMOVED:
    final int gi=event.getGroupIndex();
  if (gi < 0 || gi >= _gpofs.length)   throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ gi);
int ofs=_gpofs[gi] + 1;
j0=j0 >= 0 ? j0 + ofs : ofs;
if (j1 >= 0) {
j1=j1 + ofs;
}
 else {
j1=getNextOffset(gi) - 1;
if (_gpfts[gi]) --j1;
}
break;
case GroupsDataEvent.GROUPS_CHANGED:
case GroupsDataEvent.GROUPS_ADDED:
case GroupsDataEvent.GROUPS_REMOVED:
type-=GroupsDataEvent.GROUPS_CHANGED;
if (j0 >= 0) {
if (j0 >= _gpofs.length) throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ j0);
j0=_gpofs[j0];
}
if (j1 >= 0) {
if (j1 >= _gpofs.length) throw new IndexOutOfBoundsException(""String_Node_Str"" + getGroupCount() + ""String_Node_Str""+ j1);
j1=getNextOffset(j1) - 1;
}
}
init();
fireEvent(type,j0,j1);
}"
16362,"/** 
 * Add the specified object into selection.
 * @param obj the object to be as selection.
 */
public void addSelection(Object obj){
  int index=indexOf(obj);
  if (index >= 0)   addSelectionInterval(index,index);
}","/** 
 * Add the specified object into selection.
 * @param obj the object to be as selection.
 */
public void addSelection(Object obj){
  int index=indexOf(obj);
  if (index >= 0)   super.addSelectionInterval(index,index);
}"
16363,"/** 
 * Remove the specified object from selection.
 * @param obj the object to be remove from selection.
 */
public void removeSelection(Object obj){
  int index=indexOf(obj);
  if (index >= 0)   removeSelectionInterval(index,index);
}","/** 
 * Remove the specified object from selection.
 * @param obj the object to be remove from selection.
 */
public void removeSelection(Object obj){
  int index=indexOf(obj);
  if (index >= 0)   super.removeSelectionInterval(index,index);
}"
16364,"public boolean hasLoadBinding(BindingKey bkey){
  return _initBindings.size() > 0 || _loadPromptBindings.size() > 0 || _loadEventBindings.size() > 0 || _loadAfterBindings.size() > 0 || _loadBeforeBindings.size() > 0;
}","public boolean hasLoadBinding(BindingKey bkey){
  boolean r=false;
  List<?> bindings=_initBindings.get(bkey);
  if (bindings != null && bindings.size() > 0) {
    return true;
  }
  bindings=_loadPromptBindings.get(bkey);
  if (bindings != null && bindings.size() > 0) {
    return true;
  }
  bindings=_loadEventBindings.get(bkey);
  if (bindings != null && bindings.size() > 0) {
    return true;
  }
  bindings=_loadAfterBindings.get(bkey);
  if (bindings != null && bindings.size() > 0) {
    return true;
  }
  bindings=_loadBeforeBindings.get(bkey);
  if (bindings != null && bindings.size() > 0) {
    return true;
  }
  return false;
}"
16365,"private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  willSerialize(_model);
  Serializables.smartWrite(s,_model);
  willSerialize(_renderer);
  Serializables.smartWrite(s,_renderer);
}","private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  willSerialize(_model);
  Serializables.smartWrite(s,_model);
  willSerialize(_renderer);
  Serializables.smartWrite(s,_renderer);
  if (_dataLoader != null) {
    s.writeInt(_dataLoader.getOffset());
    s.writeInt(_dataLoader.getLimit());
  }
 else {
    s.writeInt(0);
    s.writeInt(100);
  }
}"
16366,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(RowRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  afterUnmarshal(-1);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(RowRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  afterUnmarshal(-1);
  int offset=s.readInt();
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
}"
16367,"private void resetDataLoader(){
  if (_dataLoader != null) {
    _dataLoader.reset();
    _dataLoader=null;
    smartUpdate(""String_Node_Str"",0);
  }
  smartUpdate(""String_Node_Str"",true);
  _currentTop=0;
  _currentLeft=0;
  _topPad=0;
}","private void resetDataLoader(boolean shallReset){
  if (_dataLoader != null) {
    if (shallReset) {
      _dataLoader.reset();
      smartUpdate(""String_Node_Str"",0);
    }
    _dataLoader=null;
  }
  if (shallReset) {
    smartUpdate(""String_Node_Str"",true);
    _currentTop=0;
    _currentLeft=0;
    _topPad=0;
  }
}"
16368,"public Object clone(){
  final Grid clone=(Grid)super.clone();
  clone.init();
  clone._pgListener=null;
  clone._pgImpListener=null;
  final int offset=clone.getDataLoader().getOffset();
  final int limit=clone.getDataLoader().getLimit();
  clone.resetDataLoader();
  clone.getDataLoader().init(clone,offset,limit);
  int cnt=0;
  if (clone._rows != null)   ++cnt;
  if (clone._cols != null)   ++cnt;
  if (clone._foot != null)   ++cnt;
  if (clone._frozen != null)   ++cnt;
  if (clone._paging != null)   ++cnt;
  if (cnt > 0)   clone.afterUnmarshal(cnt);
  if (clone._model != null) {
    if (clone._model instanceof ComponentCloneListener) {
      final ListModel model=(ListModel)((ComponentCloneListener)clone._model).willClone(clone);
      if (model != null)       clone._model=model;
    }
    clone._dataListener=null;
    clone.initDataListener();
    clone.getDataLoader().setLoadAll(_renderAll);
  }
  return clone;
}","public Object clone(){
  final Grid clone=(Grid)super.clone();
  clone.init();
  clone._pgListener=null;
  clone._pgImpListener=null;
  final int offset=clone.getDataLoader().getOffset();
  int cnt=0;
  if (clone._rows != null)   ++cnt;
  if (clone._cols != null)   ++cnt;
  if (clone._foot != null)   ++cnt;
  if (clone._frozen != null)   ++cnt;
  if (clone._paging != null)   ++cnt;
  if (cnt > 0)   clone.afterUnmarshal(cnt);
  final int limit=clone.getDataLoader().getLimit();
  clone.resetDataLoader(false);
  clone.getDataLoader().init(clone,offset,limit);
  if (clone._model != null) {
    if (clone._model instanceof ComponentCloneListener) {
      final ListModel model=(ListModel)((ComponentCloneListener)clone._model).willClone(clone);
      if (model != null)       clone._model=model;
    }
    clone._dataListener=null;
    clone.initDataListener();
    clone.getDataLoader().setLoadAll(_renderAll);
  }
  return clone;
}"
16369,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(ListitemRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  afterUnmarshal();
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  _model=(ListModel)s.readObject();
  didDeserialize(_model);
  _renderer=(ListitemRenderer)s.readObject();
  didDeserialize(_renderer);
  init();
  int offset=s.readInt();
  afterUnmarshal(offset);
  int limit=s.readInt();
  resetDataLoader(false);
  getDataLoader().init(this,offset,limit);
  if (_model != null) {
    initDataListener();
    getDataLoader().setLoadAll(_renderAll);
  }
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
}"
16370,"private void afterUnmarshal(){
  final int offset=getDataLoader().getOffset();
  int index=offset;
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    final Object child=it.next();
    if (child instanceof Listitem) {
      final Listitem li=(Listitem)child;
      li.setIndexDirectly(index++);
      if (li.isSelected()) {
        _selItems.add(li);
      }
    }
 else     if (child instanceof Listhead) {
      _listhead=(Listhead)child;
    }
 else     if (child instanceof Listfoot) {
      _listfoot=(Listfoot)child;
    }
 else     if (child instanceof Frozen) {
      _frozen=(Frozen)child;
    }
 else     if (child instanceof Paging) {
      _pgi=_paging=(Paging)child;
      addPagingListener(_pgi);
    }
  }
  final int limit=getDataLoader().getLimit();
  resetDataLoader();
  getDataLoader().init(this,offset,limit);
}","private void afterUnmarshal(int index){
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    final Object child=it.next();
    if (child instanceof Listitem) {
      final Listitem li=(Listitem)child;
      li.setIndexDirectly(index++);
      if (li.isSelected()) {
        _selItems.add(li);
      }
    }
 else     if (child instanceof Listhead) {
      _listhead=(Listhead)child;
    }
 else     if (child instanceof Listfoot) {
      _listfoot=(Listfoot)child;
    }
 else     if (child instanceof Frozen) {
      _frozen=(Frozen)child;
    }
 else     if (child instanceof Paging) {
      _pgi=_paging=(Paging)child;
      addPagingListener(_pgi);
    }
  }
}"
16371,"private void resetDataLoader(){
  if (_dataLoader != null) {
    _dataLoader.reset();
    _dataLoader=null;
    smartUpdate(""String_Node_Str"",0);
  }
  smartUpdate(""String_Node_Str"",true);
  _currentTop=0;
  _currentLeft=0;
  _topPad=0;
}","private void resetDataLoader(boolean shallReset){
  if (_dataLoader != null) {
    if (shallReset) {
      _dataLoader.reset();
      smartUpdate(""String_Node_Str"",0);
    }
    _dataLoader=null;
  }
  if (shallReset) {
    smartUpdate(""String_Node_Str"",true);
    _currentTop=0;
    _currentLeft=0;
    _topPad=0;
  }
}"
16372,"private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  willSerialize(_model);
  Serializables.smartWrite(s,_model);
  willSerialize(_renderer);
  Serializables.smartWrite(s,_renderer);
  int size=_groupsInfo.size();
  s.writeInt(size);
  if (size > 0)   s.writeObject(_groupsInfo);
}","private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  willSerialize(_model);
  Serializables.smartWrite(s,_model);
  willSerialize(_renderer);
  Serializables.smartWrite(s,_renderer);
  if (_dataLoader != null) {
    s.writeInt(_dataLoader.getOffset());
    s.writeInt(_dataLoader.getLimit());
  }
 else {
    s.writeInt(0);
    s.writeInt(100);
  }
  int size=_groupsInfo.size();
  s.writeInt(size);
  if (size > 0)   s.writeObject(_groupsInfo);
}"
16373,"public Object clone(){
  final Listbox clone=(Listbox)super.clone();
  clone.init();
  clone._pgListener=null;
  clone._pgImpListener=null;
  clone.afterUnmarshal();
  if (clone._model != null) {
    if (clone._model instanceof ComponentCloneListener) {
      final ListModel model=(ListModel)((ComponentCloneListener)clone._model).willClone(clone);
      if (model != null)       clone._model=model;
    }
    clone._dataListener=null;
    clone.initDataListener();
    clone.getDataLoader().setLoadAll(_renderAll);
  }
  clone._groupsInfo.addAll(_groupsInfo);
  return clone;
}","public Object clone(){
  final Listbox clone=(Listbox)super.clone();
  clone.init();
  clone._pgListener=null;
  clone._pgImpListener=null;
  final int offset=clone.getDataLoader().getOffset();
  clone.afterUnmarshal(offset);
  final int limit=clone.getDataLoader().getLimit();
  clone.resetDataLoader(false);
  clone.getDataLoader().init(clone,offset,limit);
  if (clone._model != null) {
    if (clone._model instanceof ComponentCloneListener) {
      final ListModel model=(ListModel)((ComponentCloneListener)clone._model).willClone(clone);
      if (model != null)       clone._model=model;
    }
    clone._dataListener=null;
    clone.initDataListener();
    clone.getDataLoader().setLoadAll(_renderAll);
  }
  clone._groupsInfo.addAll(_groupsInfo);
  return clone;
}"
16374,"private void afterUnmarshal(){
  Grid grid=getGrid();
  final int offset=grid != null ? grid.getDataLoader().getOffset() : 0;
  int index=offset;
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    ((Row)it.next()).setIndexDirectly(index++);
  }
}","private void afterUnmarshal(int index){
  for (Iterator it=getChildren().iterator(); it.hasNext(); ) {
    ((Row)it.next()).setIndexDirectly(index++);
  }
}"
16375,"private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  int size=_groupsInfo.size();
  s.writeInt(size);
  if (size > 0)   s.writeObject(_groupsInfo);
}","private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  int size=_groupsInfo.size();
  s.writeInt(size);
  if (size > 0)   s.writeObject(_groupsInfo);
  Grid grid=getGrid();
  DataLoader loader=grid != null ? grid.getDataLoader() : null;
  if (loader != null) {
    s.writeInt(loader.getOffset());
  }
 else   s.writeInt(0);
}"
16376,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
  afterUnmarshal();
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
  int offset=s.readInt();
  afterUnmarshal(offset);
}"
16377,"public Object clone(){
  final Rows clone=(Rows)super.clone();
  clone.init();
  clone._groupsInfo.addAll(_groupsInfo);
  clone.afterUnmarshal();
  return clone;
}","public Object clone(){
  final Rows clone=(Rows)super.clone();
  clone.init();
  clone._groupsInfo.addAll(_groupsInfo);
  Grid grid=getGrid();
  final int offset=grid != null ? grid.getDataLoader().getOffset() : 0;
  clone.afterUnmarshal(offset);
  return clone;
}"
16378,"@Override public int[] getPath(TreeNode<E> child){
  final TreeNode<E> root=getRoot();
  List<Integer> p=new ArrayList<Integer>();
  while (root != child) {
    TreeNode<E> parent=child.getParent();
    for (int i=0, j=parent.getChildCount(); i < j; i++) {
      if (parent.getChildAt(i) == child) {
        p.add(0,i);
        break;
      }
    }
    child=parent;
  }
  final Integer[] objs=p.toArray(new Integer[p.size()]);
  final int[] path=new int[objs.length];
  for (int i=0; i < objs.length; i++)   path[i]=objs[i].intValue();
  return path;
}","@Override public int[] getPath(TreeNode<E> child){
  final TreeNode<E> root=getRoot();
  List<Integer> p=new ArrayList<Integer>();
  while (root != child) {
    TreeNode<E> parent=child.getParent();
    if (parent != null) {
      for (int i=0, j=parent.getChildCount(); i < j; i++) {
        if (parent.getChildAt(i) == child) {
          p.add(0,i);
          break;
        }
      }
      child=parent;
    }
  }
  final Integer[] objs=p.toArray(new Integer[p.size()]);
  final int[] path=new int[objs.length];
  for (int i=0; i < objs.length; i++)   path[i]=objs[i].intValue();
  return path;
}"
16379,"protected void addTemplateDependency(Component templateComp,final Component eachComp,Object data,final int index){
  Object old=null;
  Object oldStatus=null;
  try {
    old=eachComp.setAttribute(EACH_VAR,data);
    oldStatus=eachComp.setAttribute(EACH_STATUS_VAR,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    final Binder binder=(Binder)eachComp.getAttribute(BinderImpl.BINDER,true);
    final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
    resolver.addTemplateDependency(eachComp);
  }
  finally {
    eachComp.setAttribute(EACH_STATUS_VAR,oldStatus);
    eachComp.setAttribute(TemplateResolver.EACH_VAR,old);
  }
}","protected void addTemplateDependency(Component templateComp,final Component eachComp,Object data,final int index){
  final Binder binder=(Binder)eachComp.getAttribute(BinderImpl.BINDER,true);
  final TemplateResolver resolver=((BinderCtrl)binder).getTemplateResolver(templateComp,_attributeName);
  if (resolver == null)   return;
  Object old=null;
  Object oldStatus=null;
  try {
    old=eachComp.setAttribute(EACH_VAR,data);
    oldStatus=eachComp.setAttribute(EACH_STATUS_VAR,new AbstractIterationStatus(){
      private static final long serialVersionUID=1L;
      @Override public int getIndex(){
        return Integer.valueOf(index);
      }
    }
);
    resolver.addTemplateDependency(eachComp);
  }
  finally {
    eachComp.setAttribute(EACH_STATUS_VAR,oldStatus);
    eachComp.setAttribute(TemplateResolver.EACH_VAR,old);
  }
}"
16380,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Combobox lbx=(Combobox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      final String varnm=(String)lbx.getAttribute(""String_Node_Str"");
      if (varnm != null) {
        return ((Comboitem)val).getAttribute(varnm);
      }
 else {
        return model.getElementAt(((Comboitem)val).getIndex());
      }
    }
 else {
      return ((Comboitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Combobox lbx=(Combobox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      final String varnm=(String)((Comboitem)val).getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        return ((Comboitem)val).getAttribute(varnm);
      }
 else {
        return model.getElementAt(((Comboitem)val).getIndex());
      }
    }
 else {
      return ((Comboitem)val).getValue();
    }
  }
  return null;
}"
16381,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      final String varnm=(String)lbx.getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        return ((Listitem)val).getAttribute(varnm);
      }
 else {
        return model.getElementAt(((Listitem)val).getIndex());
      }
    }
 else {
      return ((Listitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Listbox lbx=(Listbox)comp;
    final ListModel<?> model=lbx.getModel();
    if (model != null) {
      final String varnm=(String)((Listitem)val).getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        return ((Listitem)val).getAttribute(varnm);
      }
 else {
        return model.getElementAt(((Listitem)val).getIndex());
      }
    }
 else {
      return ((Listitem)val).getValue();
    }
  }
  return null;
}"
16382,"public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    if (model != null) {
      final String varnm=(String)tree.getAttribute(""String_Node_Str"");
      if (varnm != null) {
        return ((Treeitem)val).getAttribute(varnm);
      }
 else {
        return ((Treeitem)val).getValue();
      }
    }
 else {
      return ((Treeitem)val).getValue();
    }
  }
  return null;
}","public Object coerceToBean(Object val,Component comp,BindContext ctx){
  if (val != null) {
    final Tree tree=(Tree)comp;
    final TreeModel<?> model=tree.getModel();
    if (model != null) {
      final String varnm=(String)((Treeitem)val).getAttribute(BinderImpl.VAR);
      if (varnm != null) {
        return ((Treeitem)val).getAttribute(varnm);
      }
 else {
        return ((Treeitem)val).getValue();
      }
    }
 else {
      return ((Treeitem)val).getValue();
    }
  }
  return null;
}"
16383,"@Override public void removeOpenPaths(int[][] paths){
  int newPathLength=paths != null ? paths.length : 0;
  if (newPathLength > 0 && !_opens.isEmpty()) {
    for (    TreeNode<E> e : getNodesByPath(paths)) {
      if (_opens.remove(e)) {
        fireOpenChanged(e);
      }
    }
  }
}","@Override public void removeOpenPaths(int[][] paths){
  int newPathLength=paths != null ? paths.length : 0;
  if (newPathLength > 0 && !_opens.isEmpty()) {
    for (    TreeNode<E> e : getNodesByPath(paths)) {
      if (_opens.containsKey(e)) {
        _opens.remove(e);
        fireOpenChanged(e);
      }
    }
  }
}"
16384,"@Override public void removeSelectionPaths(int[][] paths){
  int newPathLength=paths != null ? paths.length : 0;
  if (newPathLength > 0 && !_selections.isEmpty()) {
    for (    TreeNode<E> e : getNodesByPath(paths)) {
      if (_selections.remove(e)) {
        fireSelectionChanged(e);
      }
      if (!isMultiple())       break;
    }
  }
}","@Override public void removeSelectionPaths(int[][] paths){
  int newPathLength=paths != null ? paths.length : 0;
  if (newPathLength > 0 && !_selections.isEmpty()) {
    for (    TreeNode<E> e : getNodesByPath(paths)) {
      if (_selections.containsKey(e)) {
        _selections.remove(e);
        fireSelectionChanged(e);
      }
      if (!isMultiple())       break;
    }
  }
}"
16385,"@SuppressWarnings(""String_Node_Str"") private void render(Treeitem item,Object node) throws Throwable {
  if (!_rendered && (_renderer instanceof RendererCtrl)) {
    ((RendererCtrl)_renderer).doTry();
    _ctrled=true;
  }
  if (node instanceof TreeNode) {
    TreeNode treeNode=(TreeNode)node;
    item.setTreeNode(treeNode);
  }
  int[] path=null;
  if (_model instanceof TreeSelectionModel) {
    TreeSelectionModel model=(TreeSelectionModel)_model;
    if (!model.isSelectionEmpty()) {
      if (model.isPathSelected((path=_model.getPath(node)))) {
        addItemToSelection(item);
      }
    }
  }
  if (_model instanceof TreeOpenableModel) {
    TreeOpenableModel model=(TreeOpenableModel)_model;
    if (!model.isOpenEmpty()) {
      if (path == null) {
        path=_model.getPath(node);
      }
      item.setOpen(model.isPathOpened(path));
    }
  }
  try {
    _renderer.render(item,node);
  }
 catch (  Throwable ex) {
    try {
      item.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    throw ex;
  }
  _rendered=true;
}","@SuppressWarnings(""String_Node_Str"") private void render(Treeitem item,Object node) throws Throwable {
  if (!_rendered && (_renderer instanceof RendererCtrl)) {
    ((RendererCtrl)_renderer).doTry();
    _ctrled=true;
  }
  TreeNode treeNode=null;
  if (node instanceof TreeNode) {
    treeNode=(TreeNode)node;
    item.setTreeNode(treeNode);
  }
  int[] path=null;
  if (_model instanceof TreeSelectionModel) {
    TreeSelectionModel model=(TreeSelectionModel)_model;
    if (!model.isSelectionEmpty() && getSelectedCount() != model.getSelectionCount()) {
      if (model.isPathSelected((path=_model.getPath(node)))) {
        addItemToSelection(item);
      }
    }
  }
  if (_model instanceof TreeOpenableModel) {
    TreeOpenableModel model=(TreeOpenableModel)_model;
    if (!model.isOpenEmpty()) {
      boolean isLeaf=treeNode != null ? treeNode.isLeaf() : false;
      if (!isLeaf) {
        if (path == null) {
          path=_model.getPath(node);
        }
        item.setOpen(model.isPathOpened(path));
      }
    }
  }
  try {
    _renderer.render(item,node);
  }
 catch (  Throwable ex) {
    try {
      item.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    throw ex;
  }
  _rendered=true;
}"
16386,"@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  GroupsModelArray clone=(GroupsModelArray)super.clone();
  if (_nativedata != null)   clone._nativedata=ArraysX.clone(_nativedata);
  if (_data != null)   clone._data=ArraysX.clone(_data);
  if (_heads != null)   clone._heads=ArraysX.clone(_heads);
  if (_foots != null)   clone._foots=ArraysX.clone(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.clone(_closes);
  return clone;
}","@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  GroupsModelArray clone=(GroupsModelArray)super.clone();
  if (_nativedata != null)   clone._nativedata=ArraysX.duplicate(_nativedata);
  if (_data != null)   clone._data=ArraysX.duplicate(_data);
  if (_heads != null)   clone._heads=ArraysX.duplicate(_heads);
  if (_foots != null)   clone._foots=ArraysX.duplicate(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.clone(_closes);
  return clone;
}"
16387,"@SuppressWarnings(""String_Node_Str"") @Override public Object clone(){
  ListModelArray clone=(ListModelArray)super.clone();
  if (_array != null)   clone._array=ArraysX.clone(_array);
  return clone;
}","@SuppressWarnings(""String_Node_Str"") @Override public Object clone(){
  ListModelArray clone=(ListModelArray)super.clone();
  if (_array != null)   clone._array=ArraysX.duplicate(_array);
  return clone;
}"
16388,"@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  SimpleGroupsModel clone=(SimpleGroupsModel)super.clone();
  if (_data != null)   clone._data=ArraysX.clone(_data);
  if (_heads != null)   clone._heads=ArraysX.clone(_heads);
  if (_foots != null)   clone._foots=ArraysX.clone(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.clone(_closes);
  return clone;
}","@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  SimpleGroupsModel clone=(SimpleGroupsModel)super.clone();
  if (_data != null)   clone._data=ArraysX.duplicate(_data);
  if (_heads != null)   clone._heads=ArraysX.duplicate(_heads);
  if (_foots != null)   clone._foots=ArraysX.duplicate(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.duplicate(_closes);
  return clone;
}"
16389,"public void onChange(ListDataEvent event){
  postOnInitRender(null);
}","public void onChange(ListDataEvent event){
  if (event.getType() == ListDataEvent.SELECTION_CHANGED) {
    int start=event.getIndex0();
    int end=event.getIndex1();
    if (end < getItemCount()) {
      if (_model instanceof ListSelectionModel) {
        ListSelectionModel smodel=(ListSelectionModel)_model;
        if (!smodel.isSelectionEmpty()) {
          for (; start <= end; start++) {
            if (smodel.isSelectedIndex(start))             setSelectedIndex(start);
          }
        }
 else         setSelectedIndex(-1);
        return;
      }
    }
  }
  postOnInitRender(null);
}"
16390,"private void initDataListener(){
  if (_dataListener == null)   _dataListener=new ListDataListener(){
    public void onChange(    ListDataEvent event){
      postOnInitRender(null);
    }
  }
;
  if (_eventListener == null)   _eventListener=new EventListener<InputEvent>(){
    public void onEvent(    InputEvent event) throws Exception {
      if (getModel() instanceof ListSubModel) {
        if (!event.isChangingBySelectBack())         postOnInitRender(event.getValue());
      }
    }
  }
;
  _model.addListDataListener(_dataListener);
  if (_model instanceof ListSubModel)   addEventListener(Events.ON_CHANGING,_eventListener);
}","private void initDataListener(){
  if (_dataListener == null)   _dataListener=new ListDataListener(){
    public void onChange(    ListDataEvent event){
      if (event.getType() == ListDataEvent.SELECTION_CHANGED) {
        int start=event.getIndex0();
        int end=event.getIndex1();
        if (end < getItemCount()) {
          if (_model instanceof ListSelectionModel) {
            ListSelectionModel smodel=(ListSelectionModel)_model;
            if (!smodel.isSelectionEmpty()) {
              for (; start <= end; start++) {
                if (smodel.isSelectedIndex(start))                 setSelectedIndex(start);
              }
            }
 else             setSelectedIndex(-1);
            return;
          }
        }
      }
      postOnInitRender(null);
    }
  }
;
  if (_eventListener == null)   _eventListener=new EventListener<InputEvent>(){
    public void onEvent(    InputEvent event) throws Exception {
      if (getModel() instanceof ListSubModel) {
        if (!event.isChangingBySelectBack())         postOnInitRender(event.getValue());
      }
    }
  }
;
  _model.addListDataListener(_dataListener);
  if (_model instanceof ListSubModel)   addEventListener(Events.ON_CHANGING,_eventListener);
}"
16391,"/** 
 * Deselects the currently selected items and selects the given item. <p>Note: if the label of comboitem has the same more than one, the first  comboitem will be selected at client side, it is a limitation of   {@link Combobox}and it is different from   {@link Listbox}.</p>
 * @since 3.0.2
 */
public void setSelectedItem(Comboitem item){
  if (item != null && item.getParent() != this)   throw new UiException(""String_Node_Str"" + item);
  if (item != _selItem) {
    _selItem=item;
    if (item != null) {
      setValue(item.getLabel());
    }
 else {
      if (_value != null && !""String_Node_Str"".equals(_value)) {
        _value=""String_Node_Str"";
        smartUpdate(""String_Node_Str"",coerceToString(_value));
      }
    }
    _lastCkVal=getValue();
    syncSelectionToModel();
  }
}","/** 
 * Deselects the currently selected items and selects the given item. <p>Note: if the label of comboitem has the same more than one, the first  comboitem will be selected at client side, it is a limitation of   {@link Combobox}and it is different from   {@link Listbox}.</p>
 * @since 3.0.2
 */
public void setSelectedItem(Comboitem item){
  if (item != null && item.getParent() != this)   throw new UiException(""String_Node_Str"" + item);
  if (item != _selItem) {
    _selItem=item;
    if (item != null) {
      setValue(item.getLabel());
    }
 else {
      if (_value != null && !""String_Node_Str"".equals(_value)) {
        _value=""String_Node_Str"";
        smartUpdate(""String_Node_Str"",coerceToString(_value));
      }
    }
    _lastCkVal=getValue();
  }
}"
16392,"private void syncSelectionToModel(){
  if (_model instanceof ListSelectionModel) {
    ListSelectionModel model=(ListSelectionModel)_model;
    model.clearSelection();
    if (_selItem != null) {
      int index=getChildren().indexOf(_selItem);
      model.addSelectionInterval(index,index);
    }
  }
}","private void syncSelectionToModel(){
  if (_model instanceof ListSelectionModel) {
    ListSelectionModel model=(ListSelectionModel)_model;
    if (_selItem != null) {
      int index=getChildren().indexOf(_selItem);
      model.addSelectionInterval(index,index);
    }
 else     model.clearSelection();
  }
}"
16393,"public void init(Component comp,Object vm){
  if (_init)   throw new UiException(""String_Node_Str"");
  _init=true;
  _rootComp=comp;
  setViewModel(vm);
  _dummyTarget.addEventListener(ON_POST_COMMAND,new PostCommandListener());
  subscribeChangeListener(_quename,_quescope,_queueListener);
  if (vm instanceof Composer<?> && !(vm instanceof BindComposer<?>)) {
    _log.warning(""String_Node_Str"",vm);
  }
  initViewModel(vm);
}","public void init(Component comp,Object vm){
  if (_init)   throw new UiException(""String_Node_Str"");
  _init=true;
  _rootComp=comp;
  setViewModel(vm);
  _dummyTarget.addEventListener(ON_POST_COMMAND,new PostCommandListener());
  _dummyTarget.addEventListener(ON_VMSGS_CHANGED,new VMsgsChangedListener());
  subscribeChangeListener(_quename,_quescope,_queueListener);
  if (vm instanceof Composer<?> && !(vm instanceof BindComposer<?>)) {
    _log.warning(""String_Node_Str"",vm);
  }
  initViewModel(vm);
}"
16394,"/** 
 * Clones the specified object. Use clone() if Cloeable. Otherwise, try to serialize/deserialize it by use of MarshalledObject. <p>If o is null, null is returned.
 * @exception SystemException if failed to clone
 */
public static final Object clone(Object o){
  if (o == null)   return o;
  try {
    final Class<?> kls=o.getClass();
    if (kls.isArray())     return ArraysX.clone(o);
    if (o instanceof Cloneable) {
      try {
        return kls.getMethod(""String_Node_Str"").invoke(o);
      }
 catch (      NoSuchMethodException ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + kls);
      }
    }
    return new MarshalledObject<Object>(o).get();
  }
 catch (  Exception ex) {
    throw SystemException.Aide.wrap(ex);
  }
}","/** 
 * Clones the specified object. Use clone() if Cloeable. Otherwise, try to serialize/deserialize it by use of MarshalledObject. <p>If o is null, null is returned.
 * @exception SystemException if failed to clone
 */
public static final Object clone(Object o){
  if (o == null)   return o;
  try {
    final Class<?> kls=o.getClass();
    if (kls.isArray())     return ArraysX.duplicate(o);
    if (o instanceof Cloneable) {
      try {
        return kls.getMethod(""String_Node_Str"").invoke(o);
      }
 catch (      NoSuchMethodException ex) {
        if (log.debugable())         log.debug(""String_Node_Str"" + kls);
      }
    }
    return new MarshalledObject<Object>(o).get();
  }
 catch (  Exception ex) {
    throw SystemException.Aide.wrap(ex);
  }
}"
16395,"/** 
 * @deprecated As of release 6.0.0, replaced with {@link duplicate(Object)}.
 */
public static final Object clone(Object ary){
  return duplicate(ary);
}","/** 
 * @deprecated As of release 6.0.0, replaced with {@link #duplicate(Object)}.
 */
public static final Object clone(Object ary){
  return duplicate(ary);
}"
16396,"@Override public boolean isPathOpened(int[] path){
  if (path != null && !_opens.isEmpty()) {
    E e=getNodeByPath(path);
    if (e != null)     return _opens.containsKey(e);
  }
  return false;
}","@Override public boolean isPathOpened(int[] path){
  if (path != null && !_opens.isEmpty()) {
    E e=getChild(path);
    if (e != null)     return _opens.containsKey(e);
  }
  return false;
}"
16397,"@SuppressWarnings(""String_Node_Str"") private List<E> getNodesByPath(int[][] paths){
  if (paths == null)   return Collections.EMPTY_LIST;
  List<E> list=new ArrayList<E>();
  for (  int[] path : paths) {
    E node=getNodeByPath(path);
    if (node != null)     list.add(node);
  }
  return list;
}","@SuppressWarnings(""String_Node_Str"") private List<E> getNodesByPath(int[][] paths){
  if (paths == null)   return Collections.EMPTY_LIST;
  List<E> list=new ArrayList<E>();
  for (  int[] path : paths) {
    E node=getChild(path);
    if (node != null)     list.add(node);
  }
  return list;
}"
16398,"/** 
 * @deprecated As of release 5.0.6, it was replaced by{@link #getIndexOfChild}. This method was implemented to provide backward compatibility.
 */
@Deprecated @SuppressWarnings(""String_Node_Str"") public int[] getPath(Object parent,Object lastNode){
  return Tree.getPath((TreeModel)this,parent,lastNode);
}","/** 
 * Returns the path from a node
 * @since 6.0.0
 */
@SuppressWarnings(""String_Node_Str"") public int[] getPath(Object parent,Object lastNode){
  return Tree.getPath((TreeModel)this,parent,lastNode);
}"
16399,"@Override public boolean isPathSelected(int[] path){
  if (path != null && !_selections.isEmpty()) {
    E e=getNodeByPath(path);
    if (e != null)     return _selections.containsKey(e);
  }
  return false;
}","@Override public boolean isPathSelected(int[] path){
  if (path != null && !_selections.isEmpty()) {
    E e=getChild(path);
    if (e != null)     return _selections.containsKey(e);
  }
  return false;
}"
16400,"@Override public Object clone(){
  DialModel clone=(DialModel)super.clone();
  if (_bgRGB != null)   clone._bgRGB=(int[])ArraysX.clone(_bgRGB);
  if (_bgRGB1 != null)   clone._bgRGB1=(int[])ArraysX.clone(_bgRGB1);
  if (_bgRGB2 != null)   clone._bgRGB2=(int[])ArraysX.clone(_bgRGB2);
  if (_fgRGB != null)   clone._fgRGB=(int[])ArraysX.clone(_fgRGB);
  return clone;
}","@Override public Object clone(){
  DialModel clone=(DialModel)super.clone();
  if (_bgRGB != null)   clone._bgRGB=(int[])ArraysX.duplicate(_bgRGB);
  if (_bgRGB1 != null)   clone._bgRGB1=(int[])ArraysX.duplicate(_bgRGB1);
  if (_bgRGB2 != null)   clone._bgRGB2=(int[])ArraysX.duplicate(_bgRGB2);
  if (_fgRGB != null)   clone._fgRGB=(int[])ArraysX.duplicate(_fgRGB);
  return clone;
}"
16401,"/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 * @param col column index
 */
@SuppressWarnings(""String_Node_Str"") protected void organizeGroup(Comparator<D> cmpr,int col){
  List<List<D>> group=new LinkedList<List<D>>();
  List<D> gdata=null;
  D last=null;
  D curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    boolean hitn=false;
    boolean hita=false;
    if (last == null || cmpr.compare(last,curr) != 0) {
      hitn=true;
      gdata=new LinkedList<D>();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List<D>[] gd=new List[group.size()];
  group.toArray(gd);
  Class<?> classD=_nativedata.getClass().getComponentType();
  _data=(D[][])Array.newInstance(classD,gd.length,0);
  _foots=new Object[gd.length];
  _heads=new Object[gd.length];
  _closes=new boolean[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=gd[i];
    _data[i]=(D[])Array.newInstance(classD,gdata.size());
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
    _closes[i]=createGroupClose(_data[i],i,col);
  }
}","/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 * @param col column index
 */
@SuppressWarnings(""String_Node_Str"") protected void organizeGroup(Comparator<D> cmpr,int col){
  List<List<D>> group=new LinkedList<List<D>>();
  List<D> gdata=null;
  D last=null;
  D curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    if (last == null || cmpr.compare(last,curr) != 0) {
      gdata=new LinkedList<D>();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List<D>[] gd=new List[group.size()];
  group.toArray(gd);
  Class<?> classD=_nativedata.getClass().getComponentType();
  _data=(D[][])Array.newInstance(classD,gd.length,0);
  _foots=new Object[gd.length];
  _heads=new Object[gd.length];
  _closes=new boolean[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=gd[i];
    _data[i]=(D[])Array.newInstance(classD,gdata.size());
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
    _closes[i]=createGroupClose(_data[i],i,col);
  }
}"
16402,"@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  GroupsModelArray clone=(GroupsModelArray)super.clone();
  if (_nativedata != null)   clone._nativedata=ArraysX.duplicate(_nativedata);
  if (_data != null)   clone._data=ArraysX.duplicate(_data);
  if (_heads != null)   clone._heads=ArraysX.duplicate(_heads);
  if (_foots != null)   clone._foots=ArraysX.duplicate(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.clone(_closes);
  return clone;
}","@Override @SuppressWarnings(""String_Node_Str"") public Object clone(){
  GroupsModelArray clone=(GroupsModelArray)super.clone();
  if (_nativedata != null)   clone._nativedata=ArraysX.duplicate(_nativedata);
  if (_data != null)   clone._data=ArraysX.duplicate(_data);
  if (_heads != null)   clone._heads=ArraysX.duplicate(_heads);
  if (_foots != null)   clone._foots=ArraysX.duplicate(_foots);
  if (_closes != null)   clone._closes=(boolean[])ArraysX.duplicate(_closes);
  return clone;
}"
16403,"/** 
 * Processes an AU request. <p> Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    if (_rod) {
      Executions.getCurrent().setAttribute(""String_Node_Str"" + this.getUuid(),Boolean.TRUE);
    }
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,preloadSize()));
  }
 else   if (inPagingMold() && cmd.equals(ZulEvents.ON_PAGE_SIZE)) {
    final Map data=request.getData();
    final int oldsize=getPageSize();
    int size=AuRequests.getInt(data,""String_Node_Str"",oldsize);
    if (size != oldsize) {
      int begin=getActivePage() * oldsize;
      int end=begin + oldsize;
      end=Math.min(getPaginal().getTotalSize(),end);
      int sel=getSelectedIndex();
      if (sel < 0 || sel < begin || sel >= end) {
        sel=size > oldsize ? (end - 1) : begin;
      }
      int newpg=sel / size;
      setPageSize(size);
      setActivePage(newpg);
      Events.postEvent(new PageSizeEvent(cmd,this,pgi(),size));
    }
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(Events.ON_SELECT)) {
    if (_rod && Executions.getCurrent().getAttribute(""String_Node_Str"" + this.getUuid()) != null)     return;
    SelectEvent evt=SelectEvent.getSelectEvent(request);
    Set selItems=evt.getSelectedItems();
    if (_rod) {
      Map m=(Map)request.getData().get(""String_Node_Str"");
      if (m != null) {
        int start=AuRequests.getInt(m,""String_Node_Str"",-1);
        int end=AuRequests.getInt(m,""String_Node_Str"",-1);
        int ignoreStart=-1;
        int ignoreEnd=-1;
        for (Iterator it=_items.iterator(); it.hasNext(); ) {
          Listitem item=(Listitem)it.next();
          int index=item.getIndex();
          if (index >= start && index <= end) {
            if (ignoreStart == -1)             ignoreStart=index;
            ignoreEnd=index;
            if (!item.isDisabled())             selItems.add(item);
          }
        }
        if (_model instanceof Selectable) {
          for (int i=start; i < end; i++) {
            if (i < ignoreStart || i > ignoreEnd)             ((Selectable)_model).addSelection(_model.getElementAt(i));
          }
        }
      }
    }
    disableClientUpdate(true);
    try {
      if (AuRequests.getBoolean(request.getData(),""String_Node_Str""))       clearSelection();
      final boolean paging=inPagingMold();
      if (!_multiple || (!_rod && !paging && (selItems == null || selItems.size() <= 1))) {
        final Listitem item=selItems != null && selItems.size() > 0 ? (Listitem)selItems.iterator().next() : null;
        selectItem(item);
      }
 else {
        int from, to;
        if (paging) {
          final Paginal pgi=getPaginal();
          int pgsz=pgi.getPageSize();
          from=pgi.getActivePage() * pgsz;
          to=from + pgsz;
        }
 else {
          from=to=0;
        }
        Set oldSelItems=new LinkedHashSet(_selItems);
        for (Iterator it=selItems.iterator(); it.hasNext(); ) {
          final Listitem item=(Listitem)it.next();
          if (!_selItems.contains(item))           addItemToSelection(item);
        }
        for (Iterator it=oldSelItems.iterator(); it.hasNext(); ) {
          final Listitem item=(Listitem)it.next();
          if (!selItems.contains(item)) {
            final int index=item.getIndex();
            if (!paging || (index >= from && index < to))             removeItemFromSelection(item);
          }
        }
      }
    }
  finally {
      disableClientUpdate(false);
    }
    Events.postEvent(evt);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final Set items=AuRequests.convertToItems(request.getDesktop(),(List)request.getData().get(""String_Node_Str""));
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=_items.iterator();
      while (it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (items.contains(li))         break;
        if (!li.isLoaded())         toload.add(0,li);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (!li.isLoaded() && items.add(li))         --cnt;
      }
    }
    Listbox.this.renderItems(items);
  }
 else   super.service(request,everError);
}","/** 
 * Processes an AU request. <p> Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    if (_rod) {
      Executions.getCurrent().setAttribute(""String_Node_Str"" + this.getUuid(),Boolean.TRUE);
    }
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,preloadSize()));
  }
 else   if (inPagingMold() && cmd.equals(ZulEvents.ON_PAGE_SIZE)) {
    final Map data=request.getData();
    final int oldsize=getPageSize();
    int size=AuRequests.getInt(data,""String_Node_Str"",oldsize);
    if (size != oldsize) {
      int begin=getActivePage() * oldsize;
      int end=begin + oldsize;
      end=Math.min(getPaginal().getTotalSize(),end);
      int sel=getSelectedIndex();
      if (sel < 0 || sel < begin || sel >= end) {
        sel=size > oldsize ? (end - 1) : begin;
      }
      int newpg=sel / size;
      setPageSize(size);
      setActivePage(newpg);
      Events.postEvent(new PageSizeEvent(cmd,this,pgi(),size));
    }
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(Events.ON_SELECT)) {
    if (_rod && Executions.getCurrent().getAttribute(""String_Node_Str"" + this.getUuid()) != null)     return;
    SelectEvent evt=SelectEvent.getSelectEvent(request);
    Set selItems=evt.getSelectedItems();
    if (_rod) {
      Map m=(Map)request.getData().get(""String_Node_Str"");
      if (m != null) {
        selItems.addAll(_selItems);
        int start=AuRequests.getInt(m,""String_Node_Str"",-1);
        int end=AuRequests.getInt(m,""String_Node_Str"",-1);
        int ignoreStart=-1;
        int ignoreEnd=-1;
        for (Iterator it=_items.iterator(); it.hasNext(); ) {
          Listitem item=(Listitem)it.next();
          int index=item.getIndex();
          if (index >= start && index <= end) {
            if (ignoreStart == -1)             ignoreStart=index;
            ignoreEnd=index;
            if (!item.isDisabled())             selItems.add(item);
          }
        }
        if (_model instanceof Selectable) {
          for (int i=start; i < end; i++) {
            if (i < ignoreStart || i > ignoreEnd)             ((Selectable)_model).addSelection(_model.getElementAt(i));
          }
        }
      }
    }
    disableClientUpdate(true);
    try {
      if (AuRequests.getBoolean(request.getData(),""String_Node_Str""))       clearSelection();
      final boolean paging=inPagingMold();
      if (!_multiple || (!_rod && !paging && (selItems == null || selItems.size() <= 1))) {
        final Listitem item=selItems != null && selItems.size() > 0 ? (Listitem)selItems.iterator().next() : null;
        selectItem(item);
      }
 else {
        int from, to;
        if (paging) {
          final Paginal pgi=getPaginal();
          int pgsz=pgi.getPageSize();
          from=pgi.getActivePage() * pgsz;
          to=from + pgsz;
        }
 else {
          from=to=0;
        }
        Set oldSelItems=new LinkedHashSet(_selItems);
        for (Iterator it=selItems.iterator(); it.hasNext(); ) {
          final Listitem item=(Listitem)it.next();
          if (!_selItems.contains(item))           addItemToSelection(item);
        }
        for (Iterator it=oldSelItems.iterator(); it.hasNext(); ) {
          final Listitem item=(Listitem)it.next();
          if (!selItems.contains(item)) {
            final int index=item.getIndex();
            if (!paging || (index >= from && index < to))             removeItemFromSelection(item);
          }
        }
      }
    }
  finally {
      disableClientUpdate(false);
    }
    Events.postEvent(evt);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final Set items=AuRequests.convertToItems(request.getDesktop(),(List)request.getData().get(""String_Node_Str""));
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=_items.iterator();
      while (it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (items.contains(li))         break;
        if (!li.isLoaded())         toload.add(0,li);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (!li.isLoaded() && items.add(li))         --cnt;
      }
    }
    Listbox.this.renderItems(items);
  }
 else   super.service(request,everError);
}"
16404,"/** 
 * Opens the menupopup that belongs to the menu. <p> Note that this function is only applied when it is topmost menu, i.e. the parent of the menu is   {@link Menubar}
 * @since 6.0.0
 */
public void open(){
  if (this.getParent() instanceof Menubar)   response(""String_Node_Str"",new AuInvoke(this,""String_Node_Str"",null));
}","/** 
 * Opens the menupopup that belongs to the menu. <p> Note that this function is only applied when it is topmost menu, i.e. the parent of the menu is   {@link Menubar}
 * @since 6.0.0
 */
public void open(){
  if (this.getParent() instanceof Menubar)   response(""String_Node_Str"",new AuInvoke(this,""String_Node_Str"",(Object)null));
}"
16405,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add(groupsInfo.get(i));
  }
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  int size=s.readInt();
  if (size > 0) {
    List groupsInfo=(List)s.readObject();
    for (int i=0; i < size; i++)     _groupsInfo.add((int[])groupsInfo.get(i));
  }
}"
16406,"public void setComponent(final Component comp){
  _paramResolvers.put(ScopeParam.class,new ParamResolver<Annotation>(){
    @Override public Object resolveParameter(    Annotation anno){
      final String name=((ScopeParam)anno).value();
      Scope[] ss=((ScopeParam)anno).scopes();
      List<Scope> scopes=new ArrayList<Scope>();
      for (      Scope s : ss) {
switch (s) {
case DEFAULT:
          scopes.addAll(Scope.getDefaultScopes());
        break;
case ALL:
      scopes.addAll(Scope.getAllScopes());
    break;
default :
  scopes.add(s);
}
}
Object val=null;
for (Scope scope : scopes) {
final String scopeName=scope.getName();
Object scopeObj=Components.getImplicit(comp,scopeName);
if (scopeObj instanceof Map) {
val=((Map<?,?>)scopeObj).get(name);
if (val != null) break;
}
 else if (scopeObj != null) {
_log.error(""String_Node_Str"" + scopeName + ""String_Node_Str""+ scopeObj);
}
}
return val;
}
}
);
_paramResolvers.put(SelectorParam.class,new ParamResolver<Annotation>(){
@Override public Object resolveParameter(Annotation anno){
String selector=((SelectorParam)anno).value();
boolean local=((SelectorParam)anno).local();
int index=((SelectorParam)anno).index();
if (!local && _root == null) {
return null;
}
if (index < 0) {
return Selectors.find(local ? comp : _root,selector);
}
 else {
return Selectors.find(local ? comp : _root,selector,index);
}
}
}
);
}","public void setComponent(final Component comp){
  _paramResolvers.put(ScopeParam.class,new ParamResolver<Annotation>(){
    @Override public Object resolveParameter(    Annotation anno){
      final String name=((ScopeParam)anno).value();
      final Scope[] ss=((ScopeParam)anno).scopes();
      final List<Scope> scopes=new ArrayList<Scope>();
      for (      Scope s : ss) {
switch (s) {
case DEFAULT:
          scopes.addAll(Scope.getDefaultScopes());
        break;
case ALL:
      scopes.addAll(Scope.getAllScopes());
    break;
default :
  scopes.add(s);
}
}
Object val=null;
for (Scope scope : scopes) {
final String scopeName=scope.getName();
Object scopeObj=Components.getImplicit(comp,scopeName);
if (scopeObj instanceof Map) {
val=((Map<?,?>)scopeObj).get(name);
if (val != null) break;
}
 else if (scopeObj != null) {
_log.error(""String_Node_Str"" + scopeName + ""String_Node_Str""+ scopeObj);
}
}
return val;
}
}
);
_paramResolvers.put(SelectorParam.class,new ParamResolver<Annotation>(){
@Override public Object resolveParameter(Annotation anno){
final String selector=((SelectorParam)anno).value();
final boolean local=((SelectorParam)anno).local();
final int index=((SelectorParam)anno).index();
if (!local && _root == null) {
return null;
}
if (index < 0) {
return Selectors.find(local ? comp : _root,selector);
}
 else {
return Selectors.find(local ? comp : _root,selector,index);
}
}
}
);
}"
16407,"public HtmlMacroComponent(){
  setAttribute(""String_Node_Str"",Boolean.TRUE);
  init();
  _resolvers=Selectors.newVariableResolvers(getClass());
  if (getAutowireFlag() == 0)   Selectors.wireVariables(this,this,_resolvers);
}","public HtmlMacroComponent(){
  setAttribute(""String_Node_Str"",Boolean.TRUE);
  init();
  _resolvers=Selectors.newVariableResolvers(getClass(),HtmlMacroComponent.class);
  if (getAutowireFlag() == 0)   Selectors.wireVariables(this,this,_resolvers);
}"
16408,"public SelectorComposer(){
  _resolvers=Selectors.newVariableResolvers(getClass());
}","public SelectorComposer(){
  _resolvers=Selectors.newVariableResolvers(getClass(),SelectorComposer.class);
}"
16409,"/** 
 * Creates a list of instances of   {@link VariableResolver} basedon the annotation of the given class. If none of annotataion is found, an empty list is returned.
 */
public static List<VariableResolver> newVariableResolvers(Class<?> cls){
  final List<VariableResolver> resolvers=new ArrayList<VariableResolver>();
  while (cls != SelectorComposer.class) {
    final org.zkoss.zk.ui.select.annotation.VariableResolver anno=cls.getAnnotation(org.zkoss.zk.ui.select.annotation.VariableResolver.class);
    if (anno != null)     for (    Class<? extends VariableResolver> rc : anno.value()) {
      try {
        resolvers.add(rc.getConstructor().newInstance());
      }
 catch (      Exception e) {
        throw UiException.Aide.wrap(e);
      }
    }
    cls=cls.getSuperclass();
  }
  return resolvers;
}","/** 
 * Creates a list of instances of   {@link VariableResolver} basedon the annotation of the given class. If none of annotataion is found, an empty list is returned.
 * @param cls the class to look for the annotation.
 * @param untilClass the class to stop the searching.By default, it will look for the annotation of the super class if not found. Ignored if null.
 */
public static List<VariableResolver> newVariableResolvers(Class<?> cls,Class<?> untilClass){
  final List<VariableResolver> resolvers=new ArrayList<VariableResolver>();
  while (cls != null && cls != untilClass) {
    final org.zkoss.zk.ui.select.annotation.VariableResolver anno=cls.getAnnotation(org.zkoss.zk.ui.select.annotation.VariableResolver.class);
    if (anno != null)     for (    Class<? extends VariableResolver> rc : anno.value()) {
      try {
        resolvers.add(rc.getConstructor().newInstance());
      }
 catch (      Exception e) {
        throw UiException.Aide.wrap(e);
      }
    }
    cls=cls.getSuperclass();
  }
  return resolvers;
}"
16410,"private void wireFellows(IdSpace idspace){
  final Collection fellows=idspace.getFellows();
  for (final Iterator it=fellows.iterator(); it.hasNext(); ) {
    final Component xcomp=(Component)it.next();
    injectFellow(xcomp);
  }
  IdSpace xidspace=idspace;
  if (xidspace instanceof Component) {
    wireController((Component)xidspace,((Component)idspace).getId());
    while (true) {
      final Component parent=((Component)xidspace).getParent();
      if (parent == null) {
        final Page page=((Component)xidspace).getPage();
        if (page != null)         injectFellow(page);
        break;
      }
      xidspace=parent.getSpaceOwner();
      injectFellow(xidspace);
    }
  }
 else {
    wireController((Page)xidspace,((Component)idspace).getId());
    injectFellow((Page)idspace);
  }
}","private void wireFellows(final IdSpace idspace){
  final Collection fellows=idspace.getFellows();
  for (final Iterator it=fellows.iterator(); it.hasNext(); ) {
    final Component xcomp=(Component)it.next();
    injectFellow(xcomp);
  }
  if (idspace instanceof Component) {
    wireController((Component)idspace,((Component)idspace).getId());
    for (IdSpace xidspace=idspace; ; ) {
      final Component parent=((Component)xidspace).getParent();
      if (parent == null) {
        final Page page=((Component)xidspace).getPage();
        if (page != null)         injectFellow(page);
        break;
      }
      xidspace=parent.getSpaceOwner();
      injectFellow(xidspace);
    }
  }
 else {
    injectFellow((Page)idspace);
  }
}"
16411,"private void addBinding(Component comp,String attr,Binding binding){
  Map<String,List<Binding>> attrMap=_bindings.get(comp);
  if (attrMap == null) {
    attrMap=new HashMap<String,List<Binding>>();
    _bindings.put(comp,attrMap);
  }
  List<Binding> bindings=attrMap.get(attr);
  if (bindings == null) {
    bindings=new ArrayList<Binding>();
    attrMap.put(attr,bindings);
  }
  bindings.add(binding);
  comp.setAttribute(BINDER,this);
}","private void addBinding(Component comp,String attr,Binding binding){
  Map<String,List<Binding>> attrMap=_bindings.get(comp);
  if (attrMap == null) {
    attrMap=new LinkedHashMap<String,List<Binding>>();
    _bindings.put(comp,attrMap);
  }
  List<Binding> bindings=attrMap.get(attr);
  if (bindings == null) {
    bindings=new ArrayList<Binding>();
    attrMap.put(attr,bindings);
  }
  bindings.add(binding);
  comp.setAttribute(BINDER,this);
}"
16412,"private static String getThemeString(){
  return Library.getProperty(THEME_NAMES_KEY);
}","private static String getThemeString(){
  return Library.getProperty(THEME_NAMES_KEY,""String_Node_Str"");
}"
16413,"public void onAfterRender$themeSelectListbox(Event event){
  String name=Themes.getCurrentTheme();
  List chd=themeSelectListbox.getItems();
  for (int i=0; i < chd.size(); i++) {
    Listitem item=(Listitem)chd.get(i);
    if (name.equals(item.getValue())) {
      themeSelectListbox.setSelectedItem(item);
      break;
    }
  }
}","public void onAfterRender$themeSelectListbox(Event event){
  String name=Themes.getCurrentTheme();
  if (Strings.isEmpty(name))   return;
  List chd=themeSelectListbox.getItems();
  for (int i=0; i < chd.size(); i++) {
    Listitem item=(Listitem)chd.get(i);
    if (name.equals(item.getValue())) {
      themeSelectListbox.setSelectedItem(item);
      break;
    }
  }
}"
16414,"/** 
 * Returns the annotation associated with the specified property, or null if not available.
 * @param annotName the annotation name
 * @param propName the property name, e.g., ""value"".If null, this method returns the annotation(s) associated with the component (rather than a particular property).
 */
public Annotation getAnnotation(String propName,String annotName){
  if (_annots != null) {
    final Map<String,List<Annotation>> anmap=_annots.get(propName);
    if (anmap != null) {
      List<Annotation> ans=anmap.get(annotName);
      if (ans != null) {
        if (ans.size() == 1)         return ans.get(0);
        final AnnotImpl ai=new AnnotImpl(annotName);
        for (        Annotation an : ans)         ai.addAttributes(an);
      }
    }
  }
  return null;
}","/** 
 * Returns the annotation associated with the specified property, or null if not available.
 * @param annotName the annotation name
 * @param propName the property name, e.g., ""value"".If null, this method returns the annotation(s) associated with the component (rather than a particular property).
 */
public Annotation getAnnotation(String propName,String annotName){
  if (_annots != null) {
    final Map<String,List<Annotation>> anmap=_annots.get(propName);
    if (anmap != null) {
      List<Annotation> ans=anmap.get(annotName);
      if (ans != null) {
        if (ans.size() == 1)         return ans.get(0);
        final AnnotImpl ai=new AnnotImpl(annotName);
        for (        Annotation an : ans)         ai.addAttributes(an);
        return ai;
      }
    }
  }
  return null;
}"
16415,"public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null) {
        comp.addEventListener(10000,ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(ON_BIND_INIT,this);
            final BinderImpl binder=(BinderImpl)event.getData();
            new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp);
          }
        }
);
        Events.postEvent(new Event(ON_BIND_INIT,comp,binder));
      }
    }
  }
}","public void afterComponentAttached(Component comp,Page page){
  if (comp.getDesktop() != null) {
    final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
    if (selfBinder == null) {
      final Binder binder=(Binder)comp.getAttribute(BinderImpl.BINDER,true);
      if (binder != null) {
        comp.addEventListener(10000,ON_BIND_INIT,new EventListener<Event>(){
          @Override public void onEvent(          Event event) throws Exception {
            final Component comp=event.getTarget();
            comp.removeEventListener(ON_BIND_INIT,this);
            if (comp.getParent() == null || comp.getPage() == null) {
              return;
            }
            final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
            final BinderImpl binder=(BinderImpl)event.getData();
            if (innerBinder != null && innerBinder != binder) {
              return;
            }
            new AnnotateBinderHelper(binder).initComponentBindings(comp);
            binder.loadComponent(comp);
          }
        }
);
        Events.postEvent(new Event(ON_BIND_INIT,comp,binder));
      }
    }
  }
}"
16416,"@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(ON_BIND_INIT,this);
  final BinderImpl binder=(BinderImpl)event.getData();
  new AnnotateBinderHelper(binder).initComponentBindings(comp);
  binder.loadComponent(comp);
}","@Override public void onEvent(Event event) throws Exception {
  final Component comp=event.getTarget();
  comp.removeEventListener(ON_BIND_INIT,this);
  if (comp.getParent() == null || comp.getPage() == null) {
    return;
  }
  final Binder innerBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  final BinderImpl binder=(BinderImpl)event.getData();
  if (innerBinder != null && innerBinder != binder) {
    return;
  }
  new AnnotateBinderHelper(binder).initComponentBindings(comp);
  binder.loadComponent(comp);
}"
16417,"public Object coerceToBean(Object val,Component component,BindContext ctx){
  Calendar adultDay=Calendar.getInstance();
  adultDay.setTime((Date)val);
  adultDay.add(Calendar.YEAR,18);
  Calendar now=Calendar.getInstance();
  if (now.after(adultDay)) {
    return true;
  }
  return false;
}","public Object coerceToBean(Object val,Component component,BindContext ctx){
  boolean isAdult=false;
  if (val != null) {
    Calendar adultDay=Calendar.getInstance();
    adultDay.setTime((Date)val);
    adultDay.add(Calendar.YEAR,18);
    Calendar now=Calendar.getInstance();
    if (now.after(adultDay)) {
      isAdult=true;
    }
  }
  return isAdult;
}"
16418,"private void cloneListeners(AbstractComponent owner,AuxInfo clone){
  if (listeners != null) {
    clone.listeners=new HashMap<String,List<EventListenerInfo>>(4);
    for (    Map.Entry<String,List<EventListenerInfo>> me : listeners.entrySet()) {
      final List<EventListenerInfo> list=new LinkedList<EventListenerInfo>();
      for (      EventListenerInfo val : list) {
        if (val instanceof ComponentCloneListener) {
          val=(EventListenerInfo)((ComponentCloneListener)val).willClone(owner);
          if (val == null)           continue;
        }
        list.add(val);
      }
      if (!list.isEmpty())       clone.listeners.put(me.getKey(),list);
    }
  }
}","private void cloneListeners(AbstractComponent owner,AuxInfo clone){
  if (listeners != null) {
    clone.listeners=new HashMap<String,List<EventListenerInfo>>(4);
    for (    Map.Entry<String,List<EventListenerInfo>> me : listeners.entrySet()) {
      final List<EventListenerInfo> list=new LinkedList<EventListenerInfo>();
      for (      EventListenerInfo val : me.getValue()) {
        if (val instanceof ComponentCloneListener) {
          val=(EventListenerInfo)((ComponentCloneListener)val).willClone(owner);
          if (val == null)           continue;
        }
        list.add(val);
      }
      if (!list.isEmpty())       clone.listeners.put(me.getKey(),list);
    }
  }
}"
16419,"private void addLoadFormBinding(Component comp,String formid,Form form,String loadExpr,Map<String,Object> args){
  final LoadFormBindingImpl binding=new LoadFormBindingImpl(this,comp,form,loadExpr,args);
  final String attr=formid;
  addBinding(comp,attr,binding);
  final String command=binding.getCommandName();
  if (command == null) {
    final String bindDualId=getBindDualId(comp,attr);
    addLoadFormPromptBinding(bindDualId,binding);
  }
 else {
    final boolean after=binding.isAfter();
    if (after) {
      addLoadFormAfterBinding(command,binding);
    }
 else {
      addLoadFormBeforeBinding(command,binding);
    }
  }
}","private void addLoadFormBinding(Component comp,String formid,Form form,String loadExpr,Map<String,Object> args){
  final LoadFormBindingImpl binding=new LoadFormBindingImpl(this,comp,formid,form,loadExpr,args);
  final String attr=formid;
  addBinding(comp,attr,binding);
  final String command=binding.getCommandName();
  if (command == null) {
    final String bindDualId=getBindDualId(comp,attr);
    addLoadFormPromptBinding(bindDualId,binding);
  }
 else {
    final boolean after=binding.isAfter();
    if (after) {
      addLoadFormAfterBinding(command,binding);
    }
 else {
      addLoadFormBeforeBinding(command,binding);
    }
  }
}"
16420,"private void addSaveFormBinding(Component comp,String formid,Form form,String saveExpr,String validator,Map<String,Object> args,Map<String,Object> validatorArgs){
  final SaveFormBindingImpl binding=new SaveFormBindingImpl(this,comp,form,saveExpr,validator,args,validatorArgs);
  final String command=binding.getCommandName();
  if (command == null) {
    throw new UiException(""String_Node_Str"" + formid + ""String_Node_Str""+ binding.getPropertyString());
  }
  addBinding(comp,formid,binding);
  final boolean after=binding.isAfter();
  if (after) {
    addSaveFormAfterBinding(command,binding);
  }
 else {
    addSaveFormBeforeBinding(command,binding);
  }
}","private void addSaveFormBinding(Component comp,String formid,Form form,String saveExpr,String validator,Map<String,Object> args,Map<String,Object> validatorArgs){
  final SaveFormBindingImpl binding=new SaveFormBindingImpl(this,comp,formid,form,saveExpr,validator,args,validatorArgs);
  final String command=binding.getCommandName();
  if (command == null) {
    throw new UiException(""String_Node_Str"" + formid + ""String_Node_Str""+ binding.getPropertyString());
  }
  addBinding(comp,formid,binding);
  final boolean after=binding.isAfter();
  if (after) {
    addSaveFormAfterBinding(command,binding);
  }
 else {
    addSaveFormBeforeBinding(command,binding);
  }
}"
16421,"protected FormBindingImpl(Binder binder,Component comp,Form form,String accessScript,Map<String,Object> args){
  super(binder,comp,args);
  this._form=form;
  this._accessInfo=AccessInfo.create(this,accessScript,Form.class,ignoreTracker());
  _fieldExprs=new HashMap<String,ExpressionX>();
}","protected FormBindingImpl(Binder binder,Component comp,String formId,Form form,String accessScript,Map<String,Object> args){
  super(binder,comp,args);
  this._formId=formId;
  this._form=form;
  this._accessInfo=AccessInfo.create(this,accessScript,Form.class,ignoreTracker());
  _fieldExprs=new HashMap<String,ExpressionX>();
}"
16422,"public LoadFormBindingImpl(Binder binder,Component comp,Form form,String loadExpr,Map<String,Object> args){
  super(binder,comp,form,loadExpr,args);
}","public LoadFormBindingImpl(Binder binder,Component comp,String formId,Form form,String loadExpr,Map<String,Object> args){
  super(binder,comp,formId,form,loadExpr,args);
}"
16423,"public SaveFormBindingImpl(Binder binder,Component comp,Form form,String access,String validator,Map<String,Object> args,Map<String,Object> validatorArgs){
  super(binder,comp,form,access,args);
  final BindEvaluatorX eval=binder.getEvaluatorX();
  _validator=validator == null ? null : parseValidator(eval,validator);
  _validatorArgs=validatorArgs;
}","public SaveFormBindingImpl(Binder binder,Component comp,String formId,Form form,String access,String validator,Map<String,Object> args,Map<String,Object> validatorArgs){
  super(binder,comp,formId,form,access,args);
  final BindEvaluatorX eval=binder.getEvaluatorX();
  _validator=validator == null ? null : parseValidator(eval,validator);
  _validatorArgs=validatorArgs;
}"
16424,"private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  if (!binding.hasValidator())   return true;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return vContext.isValid();
}","private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  Set<SaveBinding> savebindings=binding.getBinder().getTracker().getFormSaveBinding(binding.getComponent(),binding.getFormId());
  boolean svalid=true;
  for (  SaveBinding sbinding : savebindings) {
    if (sbinding instanceof SavePropertyBinding) {
      svalid&=validateSavePropertyBinding(comp,((SavePropertyBinding)sbinding),command,validates,svalid & valid,notifys);
    }
 else {
    }
  }
  if (!binding.hasValidator())   return svalid;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,svalid & valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return svalid & vContext.isValid();
}"
16425,"private void collectSaveFormBinding(Component comp,SaveFormBinding binding,String command,Event evt,Set<Property> validates){
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),evt);
  Set<Property> cp=new HashSet<Property>();
  Property p=binding.getValidate(ctx);
  _mainPropertyCache.put(binding,p);
  cp.add(p);
  cp.addAll(binding.getValidates(ctx));
  validates.addAll(cp);
}","private void collectSaveFormBinding(Component comp,SaveFormBinding binding,String command,Event evt,Set<Property> validates){
  Set<SaveBinding> savebindings=binding.getBinder().getTracker().getFormSaveBinding(binding.getComponent(),binding.getFormId());
  for (  SaveBinding sbinding : savebindings) {
    if (sbinding instanceof SavePropertyBinding) {
      collectSavePropertyBinding(comp,((SavePropertyBinding)sbinding),command,evt,validates);
    }
 else {
    }
  }
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),evt);
  Set<Property> cp=new HashSet<Property>();
  Property p=binding.getValidate(ctx);
  _mainPropertyCache.put(binding,p);
  cp.add(p);
  cp.addAll(binding.getValidates(ctx));
  validates.addAll(cp);
}"
16426,"public void removeTrackings(Component comp){
  final Map<Object,TrackerNode> nodesMap=_compMap.remove(comp);
  if (nodesMap != null) {
    final Set<TrackerNode> removed=new HashSet<TrackerNode>();
    final Collection<TrackerNode> nodes=nodesMap.values();
    for (    TrackerNode node : nodes) {
      removed.add(node);
      removed.addAll(node.getDependents());
    }
    removeNodes(_beanMap.values(),removed);
    removeNodes(_nullMap.values(),removed);
  }
}","public void removeTrackings(Component comp){
  final Map<Object,TrackerNode> nodesMap=_compMap.remove(comp);
  if (nodesMap != null) {
    final Set<TrackerNode> removed=new HashSet<TrackerNode>();
    final Collection<TrackerNode> nodes=nodesMap.values();
    for (    TrackerNode node : nodes) {
      removed.add(node);
      removed.addAll(node.getDependents());
    }
    removeNodes(_beanMap.values(),removed);
    removeNodes(_nullMap.values(),removed);
  }
  removeFormTrackings(comp);
}"
16427,"private void addTracking(List<String> series){
  final Binding binding=_ctx.getBinding();
  final boolean dotracker=!_ctx.ignoreTracker();
  if (binding != null && series != null && !series.isEmpty()) {
    final Iterator<String> it=series.iterator();
    final String prop=(String)it.next();
    final Binder binder=binding.getBinder();
    final TrackerImpl tracker=(TrackerImpl)binder.getTracker();
    final BindContext bctx=(BindContext)_ctx.getAttribute(BinderImpl.BINDCTX);
    final List<String> srcpath=bctx != null ? getSrcList(bctx) : null;
    final String[] srcprops=srcpath != null ? properties(srcpath) : null;
    final Object base=binding.getComponent().getAttribute(prop,true);
    if (base instanceof Form) {
      final Form formBean=(Form)base;
      final String fieldName=fieldName(it);
      if (fieldName != null) {
        if (binding instanceof SavePropertyBinding) {
          log.debug(""String_Node_Str"",fieldName,formBean);
          formBean.addSaveFieldName(fieldName);
        }
 else         if (binding instanceof LoadPropertyBinding) {
          log.debug(""String_Node_Str"",fieldName,formBean);
          formBean.addLoadFieldName(fieldName);
        }
        if (dotracker) {
          tracker.addTracking(binding.getComponent(),new String[]{prop,fieldName},srcprops,binding);
        }
      }
 else {
        if (dotracker) {
          tracker.addTracking(binding.getComponent(),new String[]{prop},srcprops,binding);
        }
      }
    }
 else {
      String[] props=properties(series);
      if (dotracker) {
        tracker.addTracking(binding.getComponent(),props,srcprops,binding);
      }
      if (binding instanceof LoadFormBindingImpl) {
        ((LoadFormBindingImpl)binding).setSeriesLength(props.length);
      }
    }
  }
}","private void addTracking(List<String> series){
  final Binding binding=_ctx.getBinding();
  final boolean dotracker=!_ctx.ignoreTracker();
  if (binding != null && series != null && !series.isEmpty()) {
    final Iterator<String> it=series.iterator();
    final String prop=(String)it.next();
    final Binder binder=binding.getBinder();
    final TrackerImpl tracker=(TrackerImpl)binder.getTracker();
    final BindContext bctx=(BindContext)_ctx.getAttribute(BinderImpl.BINDCTX);
    final List<String> srcpath=bctx != null ? getSrcList(bctx) : null;
    final String[] srcprops=srcpath != null ? properties(srcpath) : null;
    final Component comp=binding.getComponent();
    final Object base=comp.getAttribute(prop,true);
    if (base instanceof Form) {
      final Form formBean=(Form)base;
      final String fieldName=fieldName(it);
      if (fieldName != null) {
        if (binding instanceof SavePropertyBinding) {
          log.debug(""String_Node_Str"",fieldName,formBean);
          formBean.addSaveFieldName(fieldName);
          tracker.addFormSaveBindingTracking(comp,prop,(SavePropertyBinding)binding);
        }
 else         if (binding instanceof LoadPropertyBinding) {
          log.debug(""String_Node_Str"",fieldName,formBean);
          formBean.addLoadFieldName(fieldName);
        }
        if (dotracker) {
          tracker.addTracking(comp,new String[]{prop,fieldName},srcprops,binding);
        }
      }
 else {
        if (dotracker) {
          tracker.addTracking(comp,new String[]{prop},srcprops,binding);
        }
      }
    }
 else {
      String[] props=properties(series);
      if (dotracker) {
        tracker.addTracking(binding.getComponent(),props,srcprops,binding);
      }
      if (binding instanceof LoadFormBindingImpl) {
        ((LoadFormBindingImpl)binding).setSeriesLength(props.length);
      }
    }
  }
}"
16428,"private void initAllComponentsBindings(Component comp){
  final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (selfBinder != null)   return;
  initFormBindings(comp);
  initComponentPropertiesBindings(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=(Component)it.next();
    initAllComponentsBindings(kid);
  }
}","private void initAllComponentsBindings(Component comp){
  final Binder selfBinder=(Binder)comp.getAttribute(BinderImpl.BINDER);
  if (selfBinder != null)   return;
  initFormBindings(comp);
  initComponentPropertiesBindings(comp);
  for (final Iterator<Component> it=comp.getChildren().iterator(); it.hasNext(); ) {
    final Component kid=it.next();
    initAllComponentsBindings(kid);
  }
}"
16429,"private void initCommandBindings(Component comp,String propName){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=compCtrl.getAnnotation(propName,BIND_ANNO);
  if (ann != null) {
    final Map<?,?> attrs=ann.getAttributes();
    Map<String,Object> args=null;
    final List<String> cmdExprs=new ArrayList<String>();
    for (final Iterator<?> it=attrs.entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry entry=(Map.Entry)it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        if (tagExpr instanceof String[]) {
          throw new UiException(""String_Node_Str"");
        }
        cmdExprs.add((String)tagExpr);
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    args=args == null ? null : parsedArgs(args);
    for (    String cmd : cmdExprs) {
      _binder.addCommandBinding(comp,propName,cmd,args);
    }
  }
}","private void initCommandBindings(Component comp,String propName){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=compCtrl.getAnnotation(propName,BIND_ANNO);
  if (ann != null) {
    final Map<String,Object> attrs=ann.getAttributes();
    Map<String,Object> args=null;
    final List<String> cmdExprs=new ArrayList<String>();
    for (final Iterator<Entry<String,Object>> it=attrs.entrySet().iterator(); it.hasNext(); ) {
      final Entry<String,Object> entry=it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        if (tagExpr instanceof String[]) {
          throw new UiException(""String_Node_Str"");
        }
        cmdExprs.add((String)tagExpr);
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    args=args == null ? null : parsedArgs(args);
    for (    String cmd : cmdExprs) {
      _binder.addCommandBinding(comp,propName,cmd,args);
    }
  }
}"
16430,"private void initFormBindings(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation formAnno=compCtrl.getAnnotation(FORM_ANNO);
  if (formAnno != null) {
    final List<String> saveExprs=new ArrayList<String>();
    final List<String> loadExprs=new ArrayList<String>();
    String id=null;
    Object value=null;
    String initExpr=null;
    Map<String,Object> args=null;
    ValidatorInfo validatorInfo=null;
    for (final Iterator<?> it=formAnno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry entry=(Map.Entry)it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        id=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        initExpr=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(saveExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(loadExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        value=tagExpr;
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    if (Strings.isBlank(id)) {
      throw new UiException(""String_Node_Str"");
    }
    if (value != null) {
      if (loadExprs.isEmpty()) {
        addTagExpr(loadExprs,value);
      }
      if (saveExprs.isEmpty()) {
        addTagExpr(saveExprs,value);
      }
    }
    args=args == null ? null : parsedArgs(args);
    final Annotation validtorAnno=compCtrl.getAnnotation(VALIDATOR_ANNO);
    if (validtorAnno != null) {
      validatorInfo=parseValidator(compCtrl,validtorAnno);
    }
    _binder.addFormBindings(comp,id,initExpr,loadExprs.toArray(new String[loadExprs.size()]),saveExprs.toArray(new String[saveExprs.size()]),validatorInfo == null ? null : validatorInfo.expr,args,validatorInfo == null ? null : validatorInfo.args);
  }
}","private void initFormBindings(Component comp){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation formAnno=compCtrl.getAnnotation(FORM_ANNO);
  if (formAnno != null) {
    final List<String> saveExprs=new ArrayList<String>();
    final List<String> loadExprs=new ArrayList<String>();
    String id=null;
    Object value=null;
    String initExpr=null;
    Map<String,Object> args=null;
    ValidatorInfo validatorInfo=null;
    for (final Iterator<Entry<String,Object>> it=formAnno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
      final Entry<String,Object> entry=it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        id=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        initExpr=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(saveExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(loadExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        value=tagExpr;
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    if (Strings.isBlank(id)) {
      throw new UiException(""String_Node_Str"");
    }
    if (value != null) {
      if (loadExprs.isEmpty()) {
        addTagExpr(loadExprs,value);
      }
      if (saveExprs.isEmpty()) {
        addTagExpr(saveExprs,value);
      }
    }
    args=args == null ? null : parsedArgs(args);
    final Annotation validtorAnno=compCtrl.getAnnotation(VALIDATOR_ANNO);
    if (validtorAnno != null) {
      validatorInfo=parseValidator(compCtrl,validtorAnno);
    }
    _binder.addFormBindings(comp,id,initExpr,loadExprs.toArray(new String[loadExprs.size()]),saveExprs.toArray(new String[saveExprs.size()]),validatorInfo == null ? null : validatorInfo.expr,args,validatorInfo == null ? null : validatorInfo.args);
  }
}"
16431,"private void initPropertyBindings(Component comp,String propName){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=compCtrl.getAnnotation(propName,BIND_ANNO);
  if (ann != null) {
    final List<String> saveExprs=new ArrayList<String>();
    final List<String> loadExprs=new ArrayList<String>();
    Object value=null;
    String initExpr=null;
    Map<String,Object> args=null;
    ValidatorInfo validatorInfo=null;
    ConverterInfo converterInfo=null;
    for (final Iterator<?> it=ann.getAttributes().entrySet().iterator(); it.hasNext(); ) {
      final Map.Entry entry=(Map.Entry)it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        initExpr=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(saveExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(loadExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        value=tagExpr;
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    if (value != null) {
      if (loadExprs.isEmpty()) {
        addTagExpr(loadExprs,value);
      }
      if (saveExprs.isEmpty()) {
        addTagExpr(saveExprs,value);
      }
    }
    args=args == null ? null : parsedArgs(args);
    final Annotation validtorAnno=compCtrl.getAnnotation(propName,VALIDATOR_ANNO);
    if (validtorAnno != null) {
      validatorInfo=parseValidator(compCtrl,validtorAnno);
    }
    final Annotation converterAnno=compCtrl.getAnnotation(propName,CONVERTER_ANNO);
    if (converterAnno != null) {
      converterInfo=parseConverter(compCtrl,converterAnno);
    }
    _binder.addPropertyBinding(comp,propName,initExpr,loadExprs.toArray(new String[loadExprs.size()]),saveExprs.toArray(new String[saveExprs.size()]),converterInfo == null ? null : converterInfo.expr,validatorInfo == null ? null : validatorInfo.expr,args,converterInfo == null ? null : converterInfo.args,validatorInfo == null ? null : validatorInfo.args);
  }
}","private void initPropertyBindings(Component comp,String propName){
  final ComponentCtrl compCtrl=(ComponentCtrl)comp;
  final Annotation ann=compCtrl.getAnnotation(propName,BIND_ANNO);
  if (ann != null) {
    final List<String> saveExprs=new ArrayList<String>();
    final List<String> loadExprs=new ArrayList<String>();
    Object value=null;
    String initExpr=null;
    Map<String,Object> args=null;
    ValidatorInfo validatorInfo=null;
    ConverterInfo converterInfo=null;
    for (final Iterator<Entry<String,Object>> it=ann.getAttributes().entrySet().iterator(); it.hasNext(); ) {
      final Entry<String,Object> entry=it.next();
      final String tag=(String)entry.getKey();
      final Object tagExpr=entry.getValue();
      if (""String_Node_Str"".equals(tag)) {
        initExpr=(String)tagExpr;
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(saveExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        addTagExpr(loadExprs,tagExpr);
      }
 else       if (""String_Node_Str"".equals(tag)) {
        value=tagExpr;
      }
 else {
        if (args == null) {
          args=new HashMap<String,Object>();
        }
        args.put(tag,tagExpr);
      }
    }
    if (value != null) {
      if (loadExprs.isEmpty()) {
        addTagExpr(loadExprs,value);
      }
      if (saveExprs.isEmpty()) {
        addTagExpr(saveExprs,value);
      }
    }
    args=args == null ? null : parsedArgs(args);
    final Annotation validtorAnno=compCtrl.getAnnotation(propName,VALIDATOR_ANNO);
    if (validtorAnno != null) {
      validatorInfo=parseValidator(compCtrl,validtorAnno);
    }
    final Annotation converterAnno=compCtrl.getAnnotation(propName,CONVERTER_ANNO);
    if (converterAnno != null) {
      converterInfo=parseConverter(compCtrl,converterAnno);
    }
    _binder.addPropertyBinding(comp,propName,initExpr,loadExprs.toArray(new String[loadExprs.size()]),saveExprs.toArray(new String[saveExprs.size()]),converterInfo == null ? null : converterInfo.expr,validatorInfo == null ? null : validatorInfo.expr,args,converterInfo == null ? null : converterInfo.args,validatorInfo == null ? null : validatorInfo.args);
  }
}"
16432,"private ValidatorInfo parseValidator(ComponentCtrl compCtrl,Annotation anno){
  ValidatorInfo info=new ValidatorInfo();
  for (final Iterator<?> it=anno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)it.next();
    final String tag=(String)entry.getKey();
    final Object tagExpr=entry.getValue();
    if (""String_Node_Str"".equals(tag)) {
      info.expr=(String)tagExpr;
    }
 else {
      if (info.args == null) {
        info.args=new HashMap<String,Object>();
      }
      info.args.put(tag,tagExpr);
    }
  }
  if (Strings.isBlank(info.expr)) {
    throw new UiException(""String_Node_Str"");
  }
  info.args=info.args == null ? null : parsedArgs(info.args);
  return info;
}","private ValidatorInfo parseValidator(ComponentCtrl compCtrl,Annotation anno){
  ValidatorInfo info=new ValidatorInfo();
  for (final Iterator<Entry<String,Object>> it=anno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
    final Entry<String,Object> entry=it.next();
    final String tag=(String)entry.getKey();
    final Object tagExpr=entry.getValue();
    if (""String_Node_Str"".equals(tag)) {
      info.expr=(String)tagExpr;
    }
 else {
      if (info.args == null) {
        info.args=new HashMap<String,Object>();
      }
      info.args.put(tag,tagExpr);
    }
  }
  if (Strings.isBlank(info.expr)) {
    throw new UiException(""String_Node_Str"");
  }
  info.args=info.args == null ? null : parsedArgs(info.args);
  return info;
}"
16433,"private ConverterInfo parseConverter(ComponentCtrl compCtrl,Annotation anno){
  ConverterInfo info=new ConverterInfo();
  for (final Iterator<?> it=anno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
    final Map.Entry entry=(Map.Entry)it.next();
    final String tag=(String)entry.getKey();
    final Object tagExpr=entry.getValue();
    if (""String_Node_Str"".equals(tag)) {
      info.expr=(String)tagExpr;
    }
 else {
      if (info.args == null) {
        info.args=new HashMap<String,Object>();
      }
      info.args.put(tag,tagExpr);
    }
  }
  if (Strings.isBlank(info.expr)) {
    throw new UiException(""String_Node_Str"");
  }
  info.args=info.args == null ? null : parsedArgs(info.args);
  return info;
}","private ConverterInfo parseConverter(ComponentCtrl compCtrl,Annotation anno){
  ConverterInfo info=new ConverterInfo();
  for (final Iterator<Entry<String,Object>> it=anno.getAttributes().entrySet().iterator(); it.hasNext(); ) {
    final Entry<String,Object> entry=it.next();
    final String tag=(String)entry.getKey();
    final Object tagExpr=entry.getValue();
    if (""String_Node_Str"".equals(tag)) {
      info.expr=(String)tagExpr;
    }
 else {
      if (info.args == null) {
        info.args=new HashMap<String,Object>();
      }
      info.args.put(tag,tagExpr);
    }
  }
  if (Strings.isBlank(info.expr)) {
    throw new UiException(""String_Node_Str"");
  }
  info.args=info.args == null ? null : parsedArgs(info.args);
  return info;
}"
16434,"public ExpressionX parseExpressionX(BindContext ctx,String expression,Class expectedType) throws XelException {
  return (ExpressionX)getExpressionFactory().parseExpression(newXelContext(ctx,null),""String_Node_Str"" + expression + ""String_Node_Str"",expectedType);
}","public ExpressionX parseExpressionX(BindContext ctx,String expression,Class<?> expectedType) throws XelException {
  return (ExpressionX)getExpressionFactory().parseExpression(newXelContext(ctx,null),""String_Node_Str"" + expression + ""String_Node_Str"",expectedType);
}"
16435,"private boolean doValidateSaveEvent(Component comp,SavePropertyBinding binding,Event evt,Set<Property> notifys){
  if (binding.hasValidator()) {
    final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,null,binding.getComponent(),evt);
    BindContextUtil.setConverterArgs(this,binding.getComponent(),ctx,binding);
    BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
    try {
      doBeforePhase(PhaseListener.VALIDATE,ctx);
      final Property p=binding.getValidate(ctx);
      log.debug(""String_Node_Str"",comp,binding,evt,p);
      if (p == null) {
        throw new UiException(""String_Node_Str"" + binding);
      }
      ValidationContext vctx=new ValidationContextImpl(null,p,toCollectedProperties(p),ctx,true);
      binding.validate(vctx);
      boolean valid=vctx.isValid();
      log.debug(""String_Node_Str"",valid);
      final Set<Property> xnotifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
      if (xnotifys != null) {
        notifys.addAll(xnotifys);
      }
      return valid;
    }
 catch (    Exception e) {
      throw UiException.Aide.wrap(e);
    }
 finally {
      doAfterPhase(PhaseListener.VALIDATE,ctx);
    }
  }
  return true;
}","private boolean doValidateSaveEvent(Component comp,SavePropertyBinding binding,Event evt,Set<Property> notifys){
  if (binding.hasValidator()) {
    final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,null,binding.getComponent(),evt);
    BindContextUtil.setConverterArgs(this,binding.getComponent(),ctx,binding);
    BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
    try {
      doBeforePhase(PhaseListener.VALIDATE,ctx);
      final Property p=binding.getValidate(ctx);
      log.debug(""String_Node_Str"",comp,binding,evt,p);
      if (p == null) {
        throw new UiException(""String_Node_Str"" + binding);
      }
      ValidationContext vctx=new ValidationContextImpl(null,p,toCollectedProperties(p),ctx,true);
      binding.validate(vctx);
      boolean valid=vctx.isValid();
      log.debug(""String_Node_Str"",valid);
      final Set<Property> xnotifys=getNotifys(ctx);
      if (xnotifys != null) {
        notifys.addAll(xnotifys);
      }
      return valid;
    }
 catch (    Exception e) {
      throw UiException.Aide.wrap(e);
    }
 finally {
      doAfterPhase(PhaseListener.VALIDATE,ctx);
    }
  }
  return true;
}"
16436,"private void doSaveFormBinding(Component comp,SaveFormBinding binding,String command,Event evt,int phase,Set<Property> notifys){
  final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,command,binding.getComponent(),evt);
  BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
  try {
    log.debug(""String_Node_Str"",comp,binding,command,evt,notifys);
    doBeforePhase(phase,ctx);
    binding.save(ctx);
  }
  finally {
    doAfterPhase(phase,ctx);
  }
  final Set<Property> xnotifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
}","private void doSaveFormBinding(Component comp,SaveFormBinding binding,String command,Event evt,int phase,Set<Property> notifys){
  final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,command,binding.getComponent(),evt);
  BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
  try {
    log.debug(""String_Node_Str"",comp,binding,command,evt,notifys);
    doBeforePhase(phase,ctx);
    binding.save(ctx);
  }
  finally {
    doAfterPhase(phase,ctx);
  }
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
}"
16437,"private void doSavePropertyBinding(Component comp,SavePropertyBinding binding,String command,Event evt,int phase,Set<Property> notifys){
  final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,command,binding.getComponent(),evt);
  BindContextUtil.setConverterArgs(this,binding.getComponent(),ctx,binding);
  BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
  try {
    log.debug(""String_Node_Str"",comp,binding,command,evt,notifys);
    doBeforePhase(phase,ctx);
    binding.save(ctx);
  }
  finally {
    doAfterPhase(phase,ctx);
  }
  final Set<Property> xnotifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
}","private void doSavePropertyBinding(Component comp,SavePropertyBinding binding,String command,Event evt,int phase,Set<Property> notifys){
  final BindContext ctx=BindContextUtil.newBindContext(this,binding,true,command,binding.getComponent(),evt);
  BindContextUtil.setConverterArgs(this,binding.getComponent(),ctx,binding);
  BindContextUtil.setValidatorArgs(this,binding.getComponent(),ctx,binding);
  try {
    log.debug(""String_Node_Str"",comp,binding,command,evt,notifys);
    doBeforePhase(phase,ctx);
    binding.save(ctx);
  }
  finally {
    doAfterPhase(phase,ctx);
  }
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
}"
16438,"public void onEvent(Event event) throws Exception {
  Object[] data=(Object[])event.getData();
  String command=(String)data[0];
  Map<String,Object> args=(Map)data[1];
  sendCommand(command,args);
}","@SuppressWarnings(""String_Node_Str"") public void onEvent(Event event) throws Exception {
  Object[] data=(Object[])event.getData();
  String command=(String)data[0];
  Map<String,Object> args=(Map)data[1];
  sendCommand(command,args);
}"
16439,"protected Object setAttribute(BindContext ctx,Object key,Object value){
  Map<Object,Object> bindingBag=(Map<Object,Object>)ctx.getAttribute(this);
  if (bindingBag == null) {
    bindingBag=new HashMap<Object,Object>();
    ctx.setAttribute(this,bindingBag);
  }
  return bindingBag.put(key,value);
}","protected Object setAttribute(BindContext ctx,Object key,Object value){
  Map<Object,Object> bindingBag=getBindingAttribute(ctx);
  if (bindingBag == null) {
    bindingBag=new HashMap<Object,Object>();
    ctx.setAttribute(this,bindingBag);
  }
  return bindingBag.put(key,value);
}"
16440,"protected Object getAttribute(BindContext ctx,Object key){
  Map<Object,Object> bindingBag=(Map<Object,Object>)ctx.getAttribute(this);
  return bindingBag != null ? bindingBag.get(key) : null;
}","protected Object getAttribute(BindContext ctx,Object key){
  Map<Object,Object> bindingBag=getBindingAttribute(ctx);
  return bindingBag != null ? bindingBag.get(key) : null;
}"
16441,"protected boolean containsAttribute(BindContext ctx,Object key){
  Map<Object,Object> bindingBag=(Map<Object,Object>)ctx.getAttribute(this);
  return bindingBag != null ? bindingBag.containsKey(key) : false;
}","protected boolean containsAttribute(BindContext ctx,Object key){
  Map<Object,Object> bindingBag=getBindingAttribute(ctx);
  return bindingBag != null ? bindingBag.containsKey(key) : false;
}"
16442,"public Component getComponent(){
  Object comp=_comp == null ? null : ((WeakReference<Object>)_comp).get();
  if (comp == null && _comp != null) {
    _comp=null;
  }
  return (Component)comp;
}","public Component getComponent(){
  Object comp=_comp == null ? null : _comp.get();
  if (comp == null && _comp != null) {
    _comp=null;
  }
  return (Component)comp;
}"
16443,"private void addConverterDependsOnTrackings(Converter conv,BindContext ctx){
  final Class convClz=conv.getClass();
  if (_doneConverterDependsOn.contains(convClz)) {
    return;
  }
  _doneConverterDependsOn.add(convClz);
  final Method m=getConverterMethod(convClz);
  final String srcpath=getPropertyString();
  BindELContext.addDependsOnTrackings(m,srcpath,null,this,ctx);
}","private void addConverterDependsOnTrackings(Converter conv,BindContext ctx){
  final Class<? extends Converter> convClz=conv.getClass();
  if (_doneConverterDependsOn.contains(convClz)) {
    return;
  }
  _doneConverterDependsOn.add(convClz);
  final Method m=getConverterMethod(convClz);
  final String srcpath=getPropertyString();
  BindELContext.addDependsOnTrackings(m,srcpath,null,this,ctx);
}"
16444,"private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  if (!binding.hasValidator())   return true;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return vContext.isValid();
}","private boolean validateSaveFormBinding(Component comp,SaveFormBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  if (!binding.hasValidator())   return true;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return vContext.isValid();
}"
16445,"private boolean validateSavePropertyBinding(Component comp,SavePropertyBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  if (!binding.hasValidator())   return true;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return vContext.isValid();
}","private boolean validateSavePropertyBinding(Component comp,SavePropertyBinding binding,String command,Map<String,Property[]> validates,boolean valid,Set<Property> notifys){
  if (!binding.hasValidator())   return true;
  final BindContext ctx=BindContextUtil.newBindContext(_binder,binding,true,command,binding.getComponent(),null);
  BindContextUtil.setValidatorArgs(binding.getBinder(),binding.getComponent(),ctx,binding);
  Property p=_mainPropertyCache.get(binding);
  ValidationContextImpl vContext=new ValidationContextImpl(command,p,validates,ctx,valid);
  binding.validate(vContext);
  final Set<Property> xnotifys=getNotifys(ctx);
  if (xnotifys != null) {
    notifys.addAll(xnotifys);
  }
  return vContext.isValid();
}"
16446,"public Collection<V> values(){
  if (this.values == null) {
    this.values=new AbstractCollection<V>(){
      public Iterator<V> iterator(){
        return createHashIterator(VALUES);
      }
      public int size(){
        return WeakIdentityMap.this.count;
      }
      public boolean contains(      Object o){
        return containsValue(o);
      }
      public void clear(){
        WeakIdentityMap.this.clear();
      }
      public String toString(){
        return WeakIdentityMap.this.toString(this);
      }
    }
;
  }
  return this.values;
}","public Collection<V> values(){
  if (this.values == null) {
    this.values=new AbstractCollection<V>(){
      public Iterator<V> iterator(){
        return createHashIterator(VALUES);
      }
      public int size(){
        return WeakIdentityMap.this.count;
      }
      public boolean contains(      Object o){
        return containsValue(o);
      }
      public void clear(){
        WeakIdentityMap.this.clear();
      }
      public String toString(){
        return WeakIdentityMap.toString(this);
      }
    }
;
  }
  return this.values;
}"
16447,"public Set<K> keySet(){
  if (this.keySet == null) {
    this.keySet=new AbstractSet<K>(){
      public Iterator iterator(){
        return createHashIterator(KEYS);
      }
      public int size(){
        return WeakIdentityMap.this.count;
      }
      public boolean contains(      Object o){
        return containsKey(o);
      }
      public boolean remove(      Object o){
        return o == null ? false : WeakIdentityMap.this.remove(o) == o;
      }
      public void clear(){
        WeakIdentityMap.this.clear();
      }
      public String toString(){
        return WeakIdentityMap.this.toString(this);
      }
    }
;
  }
  return this.keySet;
}","public Set<K> keySet(){
  if (this.keySet == null) {
    this.keySet=new AbstractSet<K>(){
      public Iterator iterator(){
        return createHashIterator(KEYS);
      }
      public int size(){
        return WeakIdentityMap.this.count;
      }
      public boolean contains(      Object o){
        return containsKey(o);
      }
      public boolean remove(      Object o){
        return o == null ? false : WeakIdentityMap.this.remove(o) == o;
      }
      public void clear(){
        WeakIdentityMap.this.clear();
      }
      public String toString(){
        return WeakIdentityMap.toString(this);
      }
    }
;
  }
  return this.keySet;
}"
16448,"private void dumpPropNameMapping(TrackerNode node,int spaces){
  if (((TrackerNodeImpl)node).getPropNameMapping().size() == 0)   return;
  System.out.println(dumpSpace(spaces) + ""String_Node_Str"");
  for (  Entry entry : ((TrackerNodeImpl)node).getPropNameMapping().entrySet()) {
    dumpEntry(entry,spaces + 4);
  }
  System.out.println(dumpSpace(spaces) + ""String_Node_Str"");
}","private void dumpPropNameMapping(TrackerNode node,int spaces){
  if (((TrackerNodeImpl)node).getPropNameMapping().size() == 0)   return;
  System.out.println(dumpSpace(spaces) + ""String_Node_Str"");
  for (  Entry<Object,Object> entry : ((TrackerNodeImpl)node).getPropNameMapping().entrySet()) {
    dumpEntry(entry,spaces + 4);
  }
  System.out.println(dumpSpace(spaces) + ""String_Node_Str"");
}"
16449,"private void dumpEntry(Entry entry,int spaces){
  System.out.println(dumpSpace(spaces) + entry.getKey() + ""String_Node_Str""+ entry.getValue());
}","private void dumpEntry(Entry<Object,Object> entry,int spaces){
  System.out.println(dumpSpace(spaces) + entry.getKey() + ""String_Node_Str""+ entry.getValue());
}"
16450,"private Set<TrackerNode> getNodes(Object base,String postfix){
  Set<TrackerNode> nodes=getTrackerNodesByBean(base);
  String[] props=postfix.split(""String_Node_Str"");
  for (  String prop : props) {
    nodes=getDependents(nodes,prop);
  }
  return nodes;
}","@SuppressWarnings(""String_Node_Str"") private Set<TrackerNode> getNodes(Object base,String postfix){
  Set<TrackerNode> nodes=getTrackerNodesByBean(base);
  String[] props=postfix.split(""String_Node_Str"");
  for (  String prop : props) {
    nodes=getDependents(nodes,prop);
  }
  return nodes;
}"
16451,"public Object getBean(){
  Object bean=_bean == null ? null : ((WeakReference<Object>)_bean).get();
  if (bean == null && _bean != null) {
    setBean(null);
  }
  return bean;
}","public Object getBean(){
  Object bean=_bean == null ? null : _bean.get();
  if (bean == null && _bean != null) {
    setBean(null);
  }
  return bean;
}"
16452,"public Expression parseExpression(XelContext xelc,String expression,Class expectedType) throws XelException {
  return new BindXelExpression(_expf.createValueExpression(newELContext(xelc),expression,expectedType));
}","@SuppressWarnings(""String_Node_Str"") public Expression parseExpression(XelContext xelc,String expression,Class expectedType) throws XelException {
  return new BindXelExpression(_expf.createValueExpression(newELContext(xelc),expression,expectedType));
}"
16453,"private static void addNotifys(Set<Property> props,BindContext ctx){
  if (ctx == null) {
    return;
  }
  Set<Property> notifys=(Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
  if (notifys == null) {
    notifys=new LinkedHashSet<Property>();
    ctx.setAttribute(BinderImpl.NOTIFYS,notifys);
  }
  notifys.addAll(props);
}","private static void addNotifys(Set<Property> props,BindContext ctx){
  if (ctx == null) {
    return;
  }
  Set<Property> notifys=getNotifys(ctx);
  if (notifys == null) {
    notifys=new LinkedHashSet<Property>();
    ctx.setAttribute(BinderImpl.NOTIFYS,notifys);
  }
  notifys.addAll(props);
}"
16454,"public static Set<Property> getNotifys(Method m,Object base,String prop,Object value){
  final Set<Property> notifys=new LinkedHashSet<Property>();
  final NotifyChange annt=m == null ? null : m.getAnnotation(NotifyChange.class);
  if (annt != null) {
    String[] notifies=annt.value();
    if (notifies.length > 0) {
      for (      String notify : notifies) {
        final Property propx=new PropertyImpl(base,notify,value);
        notifys.add(propx);
      }
    }
 else     if (prop != null) {
      notifys.add(new PropertyImpl(base,prop,value));
    }
  }
  return notifys;
}","@SuppressWarnings(""String_Node_Str"") private static Set<Property> getNotifys(BindContext ctx){
  return (Set<Property>)ctx.getAttribute(BinderImpl.NOTIFYS);
}"
16455,"private static void addValidates(Set<Property> props,BindContext ctx){
  if (ctx == null) {
    return;
  }
  Set<Property> validates=(Set<Property>)ctx.getAttribute(BinderImpl.VALIDATES);
  if (validates == null) {
    validates=new LinkedHashSet<Property>();
    ctx.setAttribute(BinderImpl.VALIDATES,validates);
  }
  validates.addAll(props);
}","@SuppressWarnings(""String_Node_Str"") private static void addValidates(Set<Property> props,BindContext ctx){
  if (ctx == null) {
    return;
  }
  Set<Property> validates=getValidates(ctx);
  if (validates == null) {
    validates=new LinkedHashSet<Property>();
    ctx.setAttribute(BinderImpl.VALIDATES,validates);
  }
  validates.addAll(props);
}"
16456,"public boolean insertBefore(Component child,Component refChild){
  final Grid grid=getGrid();
  final boolean isReorder=child.getParent() == this;
  if (isReorder) {
    checkInvalidateForMoved(child,true);
  }
  if (grid != null && grid.isRod() && hasGroupsModel()) {
    if (_groupsInfo.isEmpty())     _groupsInfo=((GroupsListModel)grid.getModel()).getGroupsInfo();
    if (super.insertBefore(child,refChild)) {
      if (!isReorder) {
        afterInsert(child);
      }
      return true;
    }
    return false;
  }
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  if (newItem instanceof Groupfoot) {
    if (refChild == null) {
      if (isReorder) {
        final int idx=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(idx);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - (isReorder ? 2 : 1);
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
      if (isReorder) {
        final int nindex=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(nindex);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
          if (size > 1 && prev[2] > index)           prev[2]=-1;
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1 && (g[2] >= index || newItem instanceof Groupfoot))         g[2]=g[0] + g[1] - 1;
      }
    }
    if (!isReorder) {
      afterInsert(child);
    }
    return true;
  }
  return false;
}","public boolean insertBefore(Component child,Component refChild){
  final Grid grid=getGrid();
  final boolean isReorder=child.getParent() == this;
  if (isReorder) {
    checkInvalidateForMoved(child,true);
  }
  if (grid != null && grid.isRod() && hasGroupsModel()) {
    if (_groupsInfo.isEmpty())     _groupsInfo=((GroupsListModel)grid.getModel()).getGroupsInfo();
    if (super.insertBefore(child,refChild)) {
      if (!isReorder) {
        afterInsert(child);
      }
      return true;
    }
    return false;
  }
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  if (newItem instanceof Groupfoot) {
    if (refChild == null) {
      if (isReorder) {
        final int idx=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(idx);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - (isReorder ? 2 : 1);
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
      if (isReorder) {
        final int nindex=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(nindex);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
          if (size > 1 && prev[2] > index)           prev[2]=-1;
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1 && (g[2] >= index || newItem instanceof Groupfoot))         g[2]=g[0] + g[1] - 1;
      }
    }
 else     if (hasModelButNotROD()) {
      int index=newItem.getIndex();
      fixRowIndices(index,-1);
    }
    if (!isReorder) {
      afterInsert(child);
    }
    return true;
  }
  return false;
}"
16457,"/** 
 * Adds child to this node at the given index.
 * @exception IndexOutOfBoundsException	if <code>index</code> is out of bounds
 * @exception IllegalArgumentException if <code>child</code> is an ancestor of this node 
 * @exception IllegalStateException if this node does not allow children
 * @exception NullPointerException if <code>child</code> is null
 */
public void insert(TreeNode child,int index){
  if (isLeaf())   throw new UnsupportedOperationException(""String_Node_Str"");
  _children.add(index,child);
}","/** 
 * Adds child to this node at the given index.
 * @exception IndexOutOfBoundsException	if <code>index</code> is out of bounds
 * @exception IllegalArgumentException if <code>child</code> is an ancestor of this node 
 * @exception UnsupportedOperationException if this node does not allow children
 * @exception NullPointerException if <code>child</code> is null
 */
public void insert(TreeNode child,int index){
  if (isLeaf())   throw new UnsupportedOperationException(""String_Node_Str"");
  _children.add(index,child);
}"
16458,"/** 
 * Return children of the receiver
 * @return children of the receiver
 */
public List getChildren();","/** 
 * Return children of the receiver
 * @return children of the receiver. If the node is a leaf, null is returned.
 */
public List getChildren();"
16459,"/** 
 * Creates a leaf node, i.e., it won't allow any children.
 * @param nullAsMax whether to consider null as the maximum value.If false, null is considered as the minimum value.
 */
public DefaultTreeNode(Object data,boolean nullAsMax){
  _data=data;
  _leaf=true;
  _children=null;
  _maxnull=nullAsMax;
}","/** 
 * Creates a leaf node, i.e., it won't allow any children.
 * @param nullAsMax whether to consider null as the maximum value.If false, null is considered as the minimum value.
 */
public DefaultTreeNode(Object data,boolean nullAsMax){
  _data=data;
  _children=null;
  _maxnull=nullAsMax;
}"
16460,"public boolean isLeaf(){
  return _leaf;
}","public boolean isLeaf(){
  return _children == null;
}"
16461,"/** 
 * Adds child to this node at the given index.
 * @exception IndexOutOfBoundsException	if <code>index</code> is out of bounds
 * @exception IllegalArgumentException if <code>child</code> is an ancestor of this node 
 * @exception UnsupportedOperationException if this node does not allow children
 * @exception NullPointerException if <code>child</code> is null
 */
public void insert(TreeNode child,int index){
  if (isLeaf())   throw new UnsupportedOperationException(""String_Node_Str"");
  _children.add(index,child);
}","public void insert(TreeNode child,int index){
  if (isLeaf())   throw new UnsupportedOperationException(""String_Node_Str"");
  _children.add(index,child);
}"
16462,"/** 
 * Adds a child to this node at the end.
 * @exception UnsupportedOperationException if the tree structure is not mutable
 */
public void add(TreeNode child);","/** 
 * Adds a child to this node at the end.
 * @exception UnsupportedOperationException if the tree structure is not mutable,or this node does not allow children
 * @exception IllegalArgumentException if <code>child</code> is an ancestor of this node 
 * @exception NullPointerException if <code>child</code> is null
 */
public void add(TreeNode child);"
16463,"/** 
 * Adds child to this node at the given index.
 * @exception UnsupportedOperationException if the tree structure is not mutable
 */
public void insert(TreeNode child,int index);","/** 
 * Adds child to this node at the given index.
 * @exception UnsupportedOperationException if the tree structure is not mutable,or this node does not allow children
 * @exception IndexOutOfBoundsException	if <code>index</code> is out of bounds
 * @exception IllegalArgumentException if <code>child</code> is an ancestor of this node 
 * @exception NullPointerException if <code>child</code> is null
 */
public void insert(TreeNode child,int index);"
16464,"/** 
 * Removes the child from this node.
 * @exception UnsupportedOperationException if the tree structure is not mutable
 */
public void remove(TreeNode child);","/** 
 * Removes the child from this node.
 * @exception UnsupportedOperationException if the tree structure is not mutableor this node does not allow children
 * @exception IllegalArgumentException if <code>child</code> is not a child of this node
 */
public void remove(TreeNode child);"
16465,"/** 
 * Creates a leaf node, i.e., it won't allow any children.
 * @param nullAsMax whether to consider null as the maximum value.If false, null is considered as the minimum value.
 */
public DefaultTreeNode(Object data,boolean nullAsMax){
  _data=data;
  _leaf=true;
  _maxnull=nullAsMax;
}","/** 
 * Creates a leaf node, i.e., it won't allow any children.
 * @param nullAsMax whether to consider null as the maximum value.If false, null is considered as the minimum value.
 */
public DefaultTreeNode(Object data,boolean nullAsMax){
  _data=data;
  _leaf=true;
  _children=null;
  _maxnull=nullAsMax;
}"
16466,"public Object remove(TreeNode child){
  int index=_list.indexOf(child);
  if (index < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  return _list.remove(index);
}","public Object remove(TreeNode child){
  int index=_list.indexOf(child);
  if (index < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  return remove(index);
}"
16467,"public Object remove(TreeNode child){
  int index=_list.indexOf(child);
  if (index < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  return remove(index);
}","public boolean remove(Object child){
  int index=_list.indexOf(child);
  if (index < 0)   return false;
  remove(index);
  return true;
}"
16468,"/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 * @param col column index
 */
@SuppressWarnings(""String_Node_Str"") protected void organizeGroup(Comparator<D> cmpr,int col){
  List<List<D>> group=new LinkedList<List<D>>();
  List<D> gdata=null;
  D last=null;
  D curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    boolean hitn=false;
    boolean hita=false;
    if (last == null || cmpr.compare(last,curr) != 0) {
      hitn=true;
      gdata=new LinkedList<D>();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List<D>[] gd=new List[group.size()];
  group.toArray(gd);
  _data=(D[][])Array.newInstance(_nativedata.getClass().getComponentType(),gd.length);
  _foots=new Object[gd.length];
  _heads=new Object[gd.length];
  _closes=new boolean[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=gd[i];
    _data[i]=(D[])Array.newInstance(_nativedata.getClass().getComponentType().getComponentType(),gdata.size());
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
    _closes[i]=createGroupClose(_data[i],i,col);
  }
}","/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 * @param col column index
 */
@SuppressWarnings(""String_Node_Str"") protected void organizeGroup(Comparator<D> cmpr,int col){
  List<List<D>> group=new LinkedList<List<D>>();
  List<D> gdata=null;
  D last=null;
  D curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    boolean hitn=false;
    boolean hita=false;
    if (last == null || cmpr.compare(last,curr) != 0) {
      hitn=true;
      gdata=new LinkedList<D>();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List<D>[] gd=new List[group.size()];
  group.toArray(gd);
  Class<?> classD=_nativedata.getClass().getComponentType();
  _data=(D[][])Array.newInstance(classD,gd.length,0);
  _foots=new Object[gd.length];
  _heads=new Object[gd.length];
  _closes=new boolean[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=gd[i];
    _data[i]=(D[])Array.newInstance(classD,gdata.size());
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
    _closes[i]=createGroupClose(_data[i],i,col);
  }
}"
16469,"protected Set<? extends Component> getAvailableAtClient(int offset,int limit){
  if (!isCropper())   return null;
  final Set<Component> avail=new LinkedHashSet<Component>(32);
  avail.addAll(_listbox.getHeads());
  final Listfoot listfoot=_listbox.getListfoot();
  if (listfoot != null)   avail.add(listfoot);
  final Paging paging=_listbox.getPagingChild();
  if (paging != null)   avail.add(paging);
  final Frozen frozen=_listbox.getFrozen();
  if (frozen != null)   avail.add(frozen);
  int pgsz=limit;
  int ofs=offset;
  if (_listbox.getItemCount() > 0) {
    Component item=_listbox.getItems().get(0);
    while (item != null) {
      if (pgsz == 0)       break;
      if (item.isVisible() && item instanceof Listitem) {
        if (--ofs < 0) {
          --pgsz;
          avail.add(item);
        }
      }
      if (item instanceof Listgroup) {
        final Listgroup g=(Listgroup)item;
        if (!g.isOpen()) {
          for (int j=0, len=g.getItemCount(); j < len; j++)           item=(Listitem)item.getNextSibling();
        }
      }
      if (item != null) {
        final Component c=item.getNextSibling();
        if (c instanceof Listitem)         item=(Listitem)c;
        break;
      }
    }
  }
  return avail;
}","protected Set<? extends Component> getAvailableAtClient(int offset,int limit){
  if (!isCropper())   return null;
  final Set<Component> avail=new LinkedHashSet<Component>(32);
  avail.addAll(_listbox.getHeads());
  final Listfoot listfoot=_listbox.getListfoot();
  if (listfoot != null)   avail.add(listfoot);
  final Paging paging=_listbox.getPagingChild();
  if (paging != null)   avail.add(paging);
  final Frozen frozen=_listbox.getFrozen();
  if (frozen != null)   avail.add(frozen);
  int pgsz=limit;
  int ofs=offset;
  if (_listbox.getItemCount() > 0) {
    Component item=_listbox.getItems().get(0);
    while (item != null) {
      if (pgsz == 0)       break;
      if (item.isVisible() && item instanceof Listitem) {
        if (--ofs < 0) {
          --pgsz;
          avail.add(item);
        }
      }
      if (item instanceof Listgroup) {
        final Listgroup g=(Listgroup)item;
        if (!g.isOpen()) {
          for (int j=0, len=g.getItemCount(); j < len; j++)           item=(Listitem)item.getNextSibling();
        }
      }
      if (item != null)       item=item.getNextSibling();
    }
  }
  return avail;
}"
16470,"/** 
 * Pops the current namespce (pushed by   {@link #push}).
 */
private static final void pop(){
  ((List)_scopes.get()).remove(0);
}","/** 
 * Pops the current namespace (pushed by   {@link #push}).
 */
private static final void pop(){
  ((List)_scopes.get()).remove(0);
}"
16471,"public Object getValue(){
  return _scope.getAttributes();
}","/** 
 * Returns the real value. 
 */
public Object getValue();"
16472,"/** 
 * Prepares implicit variable before calling   {@link Page#interpret}. <p>Typical use: <pre><code> final Scope scope = Scopes.beforeInterpret(comp); try { Scopes.setImplicit(""some"", value); page.interpret(zslang, zscript, scope); //it will push scope as the current scope } finally { Scopes.afterInterpret(); } </code></pre> <p>Another example: <pre><code> Scopes.beforeInterpret(comp); try { constr.validate(comp); //if constr might be an instance of a class implemented in zscript } finally { Scopess.afterInterpret(); } </code></pre> <p>If you need to set some implicit variables, you can invoke  {@link #setImplicit} between {@link #beforeInterpret}and   {@link #afterInterpret}.
 * @param scope the scope, never null.
 * @return the scope used for interpretation. It is the same as the scopeparameter if it is not null. Otherwise, a temporary scope is created.
 */
public static final Scope beforeInterpret(Scope scope){
  if (scope == null)   scope=new SimpleScope(null);
  final Implicit impl=beforeInterpret0(scope);
  impl.setImplicit(""String_Node_Str"",scope);
  if (scope instanceof Component)   impl.setImplicit(""String_Node_Str"",new DeferredScope(scope));
  return scope;
}","/** 
 * Prepares implicit variable before calling   {@link Page#interpret}. <p>Typical use: <pre><code> final Scope scope = Scopes.beforeInterpret(comp); try { Scopes.setImplicit(""some"", value); page.interpret(zslang, zscript, scope); //it will push scope as the current scope } finally { Scopes.afterInterpret(); } </code></pre> <p>Another example: <pre><code> Scopes.beforeInterpret(comp); try { constr.validate(comp); //if constr might be an instance of a class implemented in zscript } finally { Scopess.afterInterpret(); } </code></pre> <p>If you need to set some implicit variables, you can invoke  {@link #setImplicit} between {@link #beforeInterpret}and   {@link #afterInterpret}.
 * @param scope the scope, never null.
 * @return the scope used for interpretation. It is the same as the scopeparameter if it is not null. Otherwise, a temporary scope is created.
 */
public static final Scope beforeInterpret(Scope scope){
  if (scope == null)   scope=new SimpleScope(null);
  final Implicit impl=beforeInterpret0(scope);
  impl.setImplicit(""String_Node_Str"",scope);
  if (scope instanceof Component)   impl.setImplicit(""String_Node_Str"",new DeferredAttributes(scope));
  return scope;
}"
16473,"public int hashCode(){
  return _scope.hashCode();
}","public int hashCode(){
  return _scope.getAttributes().hashCode();
}"
16474,"public boolean equals(Object o){
  return _scope.equals(o instanceof DeferredScope ? ((DeferredScope)o)._scope : o);
}","public boolean equals(Object o){
  return _scope.getAttributes().equals(o instanceof DeferredAttributes ? ((DeferredAttributes)o)._scope.getAttributes() : o);
}"
16475,"public void setBookmark(String name,boolean replace){
  if (_exec == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  if (name.indexOf('#') >= 0 || name.indexOf('?') >= 0)   throw new IllegalArgumentException(""String_Node_Str"");
  _bookmark=name;
  addResponse(new AuBookmark(name,replace));
}","public void setBookmark(String name,boolean replace){
  if (_exec == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  _bookmark=name;
  addResponse(new AuBookmark(name,replace));
}"
16476,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  if (_rows > 0)   renderer.render(""String_Node_Str"",getRows());
  render(renderer,""String_Node_Str"",_name);
  render(renderer,""String_Node_Str"",_emptyMessage);
  if (inSelectMold()) {
    render(renderer,""String_Node_Str"",isMultiple());
    render(renderer,""String_Node_Str"",isDisabled());
    if (_tabindex != 0)     renderer.render(""String_Node_Str"",_tabindex);
    if (_maxlength > 0)     renderer.render(""String_Node_Str"",_maxlength);
  }
 else {
    render(renderer,""String_Node_Str"",_scOddRow);
    render(renderer,""String_Node_Str"",isCheckmark());
    render(renderer,""String_Node_Str"",isMultiple());
    if (_model != null)     render(renderer,""String_Node_Str"",true);
    if (!""String_Node_Str"".equals(_innerWidth))     render(renderer,""String_Node_Str"",_innerWidth);
    if (_currentTop != 0)     renderer.render(""String_Node_Str"",_currentTop);
    if (_currentLeft != 0)     renderer.render(""String_Node_Str"",_currentLeft);
    renderer.render(""String_Node_Str"",_topPad);
    renderer.render(""String_Node_Str"",getDataLoader().getTotalSize());
    renderer.render(""String_Node_Str"",getDataLoader().getOffset());
    if (_rod) {
      if (((Cropper)getDataLoader()).isCropper())       renderer.render(""String_Node_Str"",true);
      int sz=initRodSize();
      if (sz != INIT_LIMIT)       renderer.render(""String_Node_Str"",initRodSize());
    }
    if (_nonselTags != null)     renderer.render(""String_Node_Str"",_nonselTags);
    if (isCheckmarkDeselectOther())     renderer.render(""String_Node_Str"",true);
    if (!isRightSelect())     renderer.render(""String_Node_Str"",false);
    if (isListgroupSelectable())     renderer.render(""String_Node_Str"",true);
    if (!inPagingMold() && _jsel >= 0)     renderer.render(""String_Node_Str"",_jsel);
  }
  if (_pgi != null && _pgi instanceof Paging)   renderer.render(""String_Node_Str"",((Paging)_pgi).getUuid());
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  if (_rows > 0)   renderer.render(""String_Node_Str"",getRows());
  render(renderer,""String_Node_Str"",_name);
  render(renderer,""String_Node_Str"",_emptyMessage);
  if (inSelectMold()) {
    render(renderer,""String_Node_Str"",isMultiple());
    render(renderer,""String_Node_Str"",isDisabled());
    if (_tabindex != 0)     renderer.render(""String_Node_Str"",_tabindex);
    if (_maxlength > 0)     renderer.render(""String_Node_Str"",_maxlength);
  }
 else {
    render(renderer,""String_Node_Str"",_scOddRow);
    render(renderer,""String_Node_Str"",isCheckmark());
    render(renderer,""String_Node_Str"",isMultiple());
    if (_model != null)     render(renderer,""String_Node_Str"",true);
    if (!""String_Node_Str"".equals(_innerWidth))     render(renderer,""String_Node_Str"",_innerWidth);
    if (_currentTop != 0)     renderer.render(""String_Node_Str"",_currentTop);
    if (_currentLeft != 0)     renderer.render(""String_Node_Str"",_currentLeft);
    renderer.render(""String_Node_Str"",_topPad);
    renderer.render(""String_Node_Str"",getDataLoader().getTotalSize());
    renderer.render(""String_Node_Str"",getDataLoader().getOffset());
    if (_rod) {
      if (((Cropper)getDataLoader()).isCropper())       renderer.render(""String_Node_Str"",true);
      int sz=initRodSize();
      if (sz != INIT_LIMIT)       renderer.render(""String_Node_Str"",initRodSize());
      if (!inPagingMold() && _jsel >= 0)       renderer.render(""String_Node_Str"",_jsel);
    }
    if (_nonselTags != null)     renderer.render(""String_Node_Str"",_nonselTags);
    if (isCheckmarkDeselectOther())     renderer.render(""String_Node_Str"",true);
    if (!isRightSelect())     renderer.render(""String_Node_Str"",false);
    if (isListgroupSelectable())     renderer.render(""String_Node_Str"",true);
  }
  if (_pgi != null && _pgi instanceof Paging)   renderer.render(""String_Node_Str"",((Paging)_pgi).getUuid());
}"
16477,"/** 
 * Redraws this component and all its decendants. <p>Default: It uses   {@link JsContentRenderer} to render all informationin JavaScript codes. For devices that don't support JavaScript, it must override this method. <p>To generate all information, it first invokes {@link #renderProperties} to render component'sproperties, and  then  {@link #redrawChildren} to redraw children (and descendants)(by calling their  {@link #redraw}). <p>If a dervied class wants to render more properties, it can override  {@link #renderProperties}. <p>If a derived class renders only a subset of its children (such as paging/cropping), it could override   {@link #redrawChildren}. <p>If a deriving class wants to do something before  {@link #renderProperties}, it has to override   {@link #redraw}. <p>If a deriving class doesn't want to render in JavaScript codes, it has to override   {@link #redraw} with the proper implementationof  {@link ContentRenderer}.
 */
public void redraw(final Writer out) throws IOException {
  final int order=ComponentRedraws.beforeRedraw(false);
  final boolean aupg=isAsyncUpdate();
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(HtmlPageRenders.outSpecialJS(getDesktop()));
        out.write(""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    final JsContentRenderer renderer=new JsContentRenderer();
    renderProperties(renderer);
    if (_page != null) {
      PropertiesRenderer[] prs=_page.getDesktop().getWebApp().getConfiguration().getPropertiesRenderers();
      for (int j=0; j < prs.length; j++)       prs[j].renderProperties(this,renderer);
    }
    final String wgtcls=getWidgetClass();
    if (wgtcls == null)     throw new UiException(""String_Node_Str"" + this + ""String_Node_Str""+ getMold());
    out.write(""String_Node_Str"");
    out.write(wgtcls);
    out.write(""String_Node_Str"");
    out.write(getUuid());
    out.write(""String_Node_Str"");
    out.write(renderer.getBuffer().toString());
    out.write(""String_Node_Str"");
    redrawChildren(out);
    out.write(']');
    final String mold=getMold();
    if (!DEFAULT.equals(mold)) {
      out.write(""String_Node_Str"");
      out.write(mold);
      out.write('\'');
    }
    out.write(']');
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    if (aupg) {
      if (extra.length() > 0) {
        out.write(""String_Node_Str"");
        out.write(Strings.escape(extra,Strings.ESCAPE_JAVASCRIPT));
        out.write('\'');
      }
      out.write(']');
    }
 else {
      if (extra.length() > 0)       out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(extra);
    }
  }
}","/** 
 * Redraws this component and all its descendants. <p>Default: It uses   {@link JsContentRenderer} to render all informationin JavaScript codes. For devices that don't support JavaScript, it must override this method. <p>To generate all information, it first invokes {@link #renderProperties} to render component'sproperties, and  then  {@link #redrawChildren} to redraw children (and descendants)(by calling their  {@link #redraw}). <p>If a derived class wants to render more properties, it can override  {@link #renderProperties}. <p>If a derived class renders only a subset of its children (such as paging/cropping), it could override   {@link #redrawChildren}. <p>If a deriving class wants to do something before  {@link #renderProperties}, it has to override   {@link #redraw}. <p>If a deriving class doesn't want to render in JavaScript codes, it has to override   {@link #redraw} with the proper implementationof  {@link ContentRenderer}.
 */
public void redraw(final Writer out) throws IOException {
  final int order=ComponentRedraws.beforeRedraw(false);
  final boolean aupg=isAsyncUpdate();
  final String extra;
  try {
    if (order < 0) {
      if (aupg)       out.write('[');
 else {
        out.write(HtmlPageRenders.outSpecialJS(getDesktop()));
        out.write(""String_Node_Str"");
      }
    }
 else     if (order > 0)     out.write(',');
    final JsContentRenderer renderer=new JsContentRenderer();
    renderProperties(renderer);
    if (_page != null) {
      PropertiesRenderer[] prs=_page.getDesktop().getWebApp().getConfiguration().getPropertiesRenderers();
      for (int j=0; j < prs.length; j++)       prs[j].renderProperties(this,renderer);
    }
    final String wgtcls=getWidgetClass();
    if (wgtcls == null)     throw new UiException(""String_Node_Str"" + this + ""String_Node_Str""+ getMold());
    out.write(""String_Node_Str"");
    out.write(wgtcls);
    out.write(""String_Node_Str"");
    out.write(getUuid());
    out.write(""String_Node_Str"");
    out.write(renderer.getBuffer().toString());
    out.write(""String_Node_Str"");
    redrawChildren(out);
    out.write(']');
    final String mold=getMold();
    if (!DEFAULT.equals(mold)) {
      out.write(""String_Node_Str"");
      out.write(mold);
      out.write('\'');
    }
    out.write(']');
  }
  finally {
    extra=ComponentRedraws.afterRedraw();
  }
  if (order < 0) {
    if (aupg) {
      if (extra.length() > 0) {
        out.write(""String_Node_Str"");
        out.write(Strings.escape(extra,Strings.ESCAPE_JAVASCRIPT));
        out.write('\'');
      }
      out.write(']');
    }
 else {
      if (extra.length() > 0)       out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(extra);
    }
  }
}"
16478,"/** 
 * Causes a response to be sent to the client by overriding the key returned by   {@link AuResponse#getOverrideKey}). <p>If   {@link AuResponse#getDepends} is not null, the responsedepends on the existence of the componet returned by {@link AuResponse#getDepends}. In other words, the response is removed if the component is removed. If it is null, the response is component-independent and it is always sent to the client. <p>Unlike   {@link #smartUpdate}, responses are sent even if  {@link Component#invalidate()} was called.Typical examples include setting the focus, selecting the text and so on. <p>It can be called only in the request-processing and event-processing phases; excluding the redrawing phase.
 * @param key could be anything.The second invocation of this method in the same execution with the same key and the same depends ( {@link AuResponse#getDepends}) will override the previous one. However, if key is null, it won't override any other. All responses with key == null will be sent.<br/> Notice that if   {@link AuResponse#getDepends} is null, then be carefulof the key you used since it is shared in the same execution (rather than a particular component).
 * @since 5.0.0 (become protected)
 */
protected void response(String key,AuResponse response){
  if (_page != null) {
    getAttachedUiEngine().addResponse(key,response);
  }
 else   if (response.getDepends() != this) {
    final UiEngine uieng=getCurrentUiEngine();
    if (uieng != null)     uieng.addResponse(key,response);
  }
}","/** 
 * Causes a response to be sent to the client by overriding the key returned by   {@link AuResponse#getOverrideKey}). <p>If   {@link AuResponse#getDepends} is not null, the responsedepends on the existence of the component returned by {@link AuResponse#getDepends}. In other words, the response is removed if the component is removed. If it is null, the response is component-independent and it is always sent to the client. <p>Unlike   {@link #smartUpdate}, responses are sent even if  {@link Component#invalidate()} was called.Typical examples include setting the focus, selecting the text and so on. <p>It can be called only in the request-processing and event-processing phases; excluding the redrawing phase.
 * @param key could be anything.The second invocation of this method in the same execution with the same key and the same depends ( {@link AuResponse#getDepends}) will override the previous one. However, if key is null, it won't override any other. All responses with key == null will be sent.<br/> Notice that if   {@link AuResponse#getDepends} is null, then be carefulof the key you used since it is shared in the same execution (rather than a particular component).
 * @since 5.0.0 (become protected)
 */
protected void response(String key,AuResponse response){
  if (_page != null) {
    getAttachedUiEngine().addResponse(key,response);
  }
 else   if (response.getDepends() != this) {
    final UiEngine uieng=getCurrentUiEngine();
    if (uieng != null)     uieng.addResponse(key,response);
  }
}"
16479,"public boolean shallBlock(AuRequest request){
  String cmd=request.getCommand();
  if (isReadonly() && (Events.ON_CHANGE.equals(cmd) || Events.ON_SELECT.equals(cmd)))   return false;
  return super.shallBlock(request);
}","public boolean shallBlock(AuRequest request){
  final String cmd=request.getCommand();
  if (Events.ON_OPEN.equals(cmd))   return false;
  return !Components.isRealVisible(Combobox.this) || isDisabled() || (isReadonly() && Events.ON_CHANGING.equals(cmd));
}"
16480,"public boolean shallBlock(AuRequest request){
  String cmd=request.getCommand();
  if (isReadonly() && Events.ON_CHANGE.equals(cmd))   return false;
  return super.shallBlock(request);
}","public boolean shallBlock(AuRequest request){
  final String cmd=request.getCommand();
  if (Events.ON_OPEN.equals(cmd))   return false;
  return !Components.isRealVisible(Datebox.this) || isDisabled() || (isReadonly() && Events.ON_CHANGING.equals(cmd));
}"
16481,"public Object getExtraCtrl(){
  return new Blockable(){
    public boolean shallBlock(    AuRequest request){
      final String cmd=request.getCommand();
      if (Events.ON_OPEN.equals(cmd))       return false;
      return !Components.isRealVisible(Combobox.this) || isDisabled() || (isReadonly() && Events.ON_CHANGING.equals(cmd));
    }
  }
;
}","public Object getExtraCtrl(){
  return new ExtraCtrl();
}"
16482,"public Object getExtraCtrl(){
  return new Blockable(){
    public boolean shallBlock(    AuRequest request){
      final String cmd=request.getCommand();
      if (Events.ON_OPEN.equals(cmd))       return false;
      return !Components.isRealVisible(Datebox.this) || isDisabled() || (isReadonly() && Events.ON_CHANGING.equals(cmd));
    }
  }
;
}","public Object getExtraCtrl(){
  return new ExtraCtrl();
}"
16483,"public Collection getThemeURIs(Execution exec,List uris){
  String suffix=getThemeFileSuffix();
  String fsc=Themes.getFontSizeCookie(exec);
  boolean isSilvergray=Themes.isSilvergray() && Themes.hasSilvergrayLib();
  processSilverAndFontURI(isSilvergray,uris,fsc);
  if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
  if (Strings.isEmpty(suffix)) {
    Messagebox.setTemplate(DEFAULT_MSGBOX_TEMPLATE_URI);
    return uris;
  }
  if (isUsingDefaultTemplate(suffix))   Messagebox.setTemplate(getThemeMsgBoxURI(suffix));
  if (isSilvergray) {
    uris.add(""String_Node_Str"");
    uris.add(""String_Node_Str"");
  }
 else {
    uris.add(getNormCSS(suffix));
  }
  bypassURI(uris,suffix);
  return uris;
}","public Collection getThemeURIs(Execution exec,List uris){
  String suffix=getThemeFileSuffix();
  String fsc=Themes.getFontSizeCookie(exec);
  boolean isSilvergray=Themes.isSilvergray() && Themes.hasSilvergrayLib();
  processSilverAndFontURI(isSilvergray,uris,fsc);
  if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
  if (Strings.isEmpty(suffix)) {
    Messagebox.setTemplate(DEFAULT_MSGBOX_TEMPLATE_URI);
    return uris;
  }
  if (isUsingDefaultTemplate(suffix))   Messagebox.setTemplate(getThemeMsgBoxURI(suffix));
  if (isSilvergray) {
    uris.add(""String_Node_Str"");
    uris.add(""String_Node_Str"");
  }
  bypassURI(uris,suffix);
  return uris;
}"
16484,"public Collection getThemeURIs(Execution exec,List uris){
  String suffix=getThemeFileSuffix();
  String fsc=Themes.getFontSizeCookie(exec);
  boolean isSilvergray=Themes.isSilvergray() && Themes.hasSilvergrayLib();
  processSilverAndFontURI(isSilvergray,uris,fsc);
  if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
  if (Strings.isEmpty(suffix)) {
    Messagebox.setTemplate(DEFAULT_MSGBOX_TEMPLATE_URI);
    return uris;
  }
  if (isUsingDefaultTemplate(suffix))   Messagebox.setTemplate(getThemeMsgBoxURI(suffix));
  if (isSilvergray) {
    uris.add(""String_Node_Str"");
    uris.add(""String_Node_Str"");
  }
 else {
    uris.add(getExtCSS(suffix));
    uris.add(getNormCSS(suffix));
  }
  bypassURI(uris,suffix);
  return uris;
}","public Collection getThemeURIs(Execution exec,List uris){
  String suffix=getThemeFileSuffix();
  String fsc=Themes.getFontSizeCookie(exec);
  boolean isSilvergray=Themes.isSilvergray() && Themes.hasSilvergrayLib();
  processSilverAndFontURI(isSilvergray,uris,fsc);
  if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(fsc)) {
    uris.add(""String_Node_Str"");
    if (isSilvergray)     uris.add(""String_Node_Str"");
  }
  if (Strings.isEmpty(suffix)) {
    Messagebox.setTemplate(DEFAULT_MSGBOX_TEMPLATE_URI);
    return uris;
  }
  if (isUsingDefaultTemplate(suffix))   Messagebox.setTemplate(getThemeMsgBoxURI(suffix));
  if (isSilvergray) {
    uris.add(""String_Node_Str"");
    uris.add(""String_Node_Str"");
  }
 else {
    uris.add(getNormCSS(suffix));
  }
  bypassURI(uris,suffix);
  return uris;
}"
16485,"/** 
 * Parses client-config. 
 */
private static void parseSystemConfig(Configuration config,Element el) throws Exception {
  String s=el.getElementValue(""String_Node_Str"",true);
  if (s != null) {
    final boolean enable=""String_Node_Str"".equals(s);
    if (!enable)     log.info(""String_Node_Str"");
    config.enableEventThread(enable);
  }
  Integer v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxSpareThreads(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxSuspendedThreads(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setEventTimeWarning(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxUploadSize(v.intValue());
  v=parseInteger(el,""String_Node_Str"",true);
  if (v != null)   config.setMaxProcessTime(v.intValue());
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setUploadCharset(s);
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setResponseCharset(s);
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setCrawlable(!""String_Node_Str"".equals(s));
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null && s.length() != 0)   config.addLabelLocation(s);
  Class cls=parseClass(el,""String_Node_Str"",CharsetFinder.class);
  if (cls != null)   config.setUploadCharsetFinder((CharsetFinder)cls.newInstance());
  cls=parseClass(el,""String_Node_Str"",DesktopCacheProvider.class);
  if (cls != null)   config.setDesktopCacheProviderClass(cls);
  cls=parseClass(el,""String_Node_Str"",UiFactory.class);
  if (cls != null)   config.setUiFactoryClass(cls);
  cls=parseClass(el,""String_Node_Str"",FailoverManager.class);
  if (cls != null)   config.setFailoverManagerClass(cls);
  cls=parseClass(el,""String_Node_Str"",UiEngine.class);
  if (cls != null)   config.setUiEngineClass(cls);
  cls=parseClass(el,""String_Node_Str"",IdGenerator.class);
  if (cls != null)   config.setIdGeneratorClass(cls);
  cls=parseClass(el,""String_Node_Str"",SessionCache.class);
  if (cls != null)   config.setSessionCacheClass(cls);
  cls=parseClass(el,""String_Node_Str"",AuDecoder.class);
  if (cls != null)   config.setAuDecoderClass(cls);
  cls=parseClass(el,""String_Node_Str"",WebApp.class);
  if (cls != null)   config.setWebAppClass(cls);
  cls=parseClass(el,""String_Node_Str"",Cache.class);
  if (cls != null)   ComponentsCtrl.setEventMethodCache((Cache)cls.newInstance());
  cls=parseClass(el,""String_Node_Str"",AuWriter.class);
  if (cls != null)   AuWriters.setImplementationClass(cls);
}","/** 
 * Parses client-config. 
 */
private static void parseSystemConfig(Configuration config,Element el) throws Exception {
  String s=el.getElementValue(""String_Node_Str"",true);
  if (s != null) {
    final boolean enable=""String_Node_Str"".equals(s);
    if (!enable)     log.info(""String_Node_Str"");
    config.enableEventThread(enable);
  }
  Integer v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxSpareThreads(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxSuspendedThreads(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setEventTimeWarning(v.intValue());
  v=parseInteger(el,""String_Node_Str"",false);
  if (v != null)   config.setMaxUploadSize(v.intValue());
  v=parseInteger(el,""String_Node_Str"",true);
  if (v != null)   config.setMaxProcessTime(v.intValue());
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setUploadCharset(s);
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setResponseCharset(s);
  s=el.getElementValue(""String_Node_Str"",true);
  if (s != null)   config.setCrawlable(!""String_Node_Str"".equals(s));
  for (Iterator it=el.getElements(""String_Node_Str"").iterator(); it.hasNext(); ) {
    final Element elinner=(Element)it.next();
    final String path=elinner.getText(true);
    if (!Strings.isEmpty(path))     config.addLabelLocation(path);
  }
  Class cls=parseClass(el,""String_Node_Str"",CharsetFinder.class);
  if (cls != null)   config.setUploadCharsetFinder((CharsetFinder)cls.newInstance());
  cls=parseClass(el,""String_Node_Str"",DesktopCacheProvider.class);
  if (cls != null)   config.setDesktopCacheProviderClass(cls);
  cls=parseClass(el,""String_Node_Str"",UiFactory.class);
  if (cls != null)   config.setUiFactoryClass(cls);
  cls=parseClass(el,""String_Node_Str"",FailoverManager.class);
  if (cls != null)   config.setFailoverManagerClass(cls);
  cls=parseClass(el,""String_Node_Str"",UiEngine.class);
  if (cls != null)   config.setUiEngineClass(cls);
  cls=parseClass(el,""String_Node_Str"",IdGenerator.class);
  if (cls != null)   config.setIdGeneratorClass(cls);
  cls=parseClass(el,""String_Node_Str"",SessionCache.class);
  if (cls != null)   config.setSessionCacheClass(cls);
  cls=parseClass(el,""String_Node_Str"",AuDecoder.class);
  if (cls != null)   config.setAuDecoderClass(cls);
  cls=parseClass(el,""String_Node_Str"",WebApp.class);
  if (cls != null)   config.setWebAppClass(cls);
  cls=parseClass(el,""String_Node_Str"",Cache.class);
  if (cls != null)   ComponentsCtrl.setEventMethodCache((Cache)cls.newInstance());
  cls=parseClass(el,""String_Node_Str"",AuWriter.class);
  if (cls != null)   AuWriters.setImplementationClass(cls);
}"
16486,"protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  return new Date(((Date)value).getTime() - TimeZones.getCurrent().getRawOffset() + _tzone.getRawOffset() + _tzone.getDSTSavings());
}","protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() - getTimeOffset(TimeZones.getCurrent(),date) + getTimeOffset(_tzone,date));
}"
16487,"protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  return new Date(((Date)value).getTime() + TimeZones.getCurrent().getRawOffset() - _tzone.getRawOffset() - _tzone.getDSTSavings());
}","protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() + getTimeOffset(TimeZones.getCurrent(),date) - getTimeOffset(_tzone,date));
}"
16488,"protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  return new Date(((Date)value).getTime() + TimeZones.getCurrent().getRawOffset() - _tzone.getRawOffset());
}","protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() + Dates.getTimezoneOffset(TimeZones.getCurrent(),date) - Dates.getTimezoneOffset(_tzone,date));
}"
16489,"protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  return new Date(((Date)value).getTime() - TimeZones.getCurrent().getRawOffset() + _tzone.getRawOffset());
}","protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() - Dates.getTimezoneOffset(TimeZones.getCurrent(),date) + Dates.getTimezoneOffset(_tzone,date));
}"
16490,"protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() - getTimeOffset(TimeZones.getCurrent(),date) + getTimeOffset(_tzone,date));
}","protected Object marshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() - Dates.getTimezoneOffset(TimeZones.getCurrent(),date) + Dates.getTimezoneOffset(_tzone,date));
}"
16491,"protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() + getTimeOffset(TimeZones.getCurrent(),date) - getTimeOffset(_tzone,date));
}","protected Object unmarshall(Object value){
  if (value == null || _tzone == null)   return value;
  Date date=(Date)value;
  return new Date((date).getTime() + Dates.getTimezoneOffset(TimeZones.getCurrent(),date) - Dates.getTimezoneOffset(_tzone,date));
}"
16492,"/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map attrs=new HashMap();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=request.getParameter(""String_Node_Str"");
        sid=request.getParameter(""String_Node_Str"");
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(request.getParameter(""String_Node_Str""));
        Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
        Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          precent.remove(key);
          return;
        }
        final Integer p=(Integer)precent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      uuid=request.getParameter(""String_Node_Str"");
      sid=request.getParameter(""String_Node_Str"");
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=request.getParameter(""String_Node_Str"");
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
      Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
      final String key=uuid + '_' + sid;
      if (precent != null) {
        precent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
    Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
    final String key=uuid + '_' + sid;
    if (precent != null) {
      precent.remove(key);
      size.put(key,alert);
    }
  }
  if (D.ON && log.finerable())   log.finer(attrs);
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}","/** 
 * Processes a file uploaded from the client.
 */
public void service(HttpServletRequest request,HttpServletResponse response,String pathInfo) throws ServletException, IOException {
  final Session sess=Sessions.getCurrent(false);
  if (sess == null) {
    response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
    return;
  }
  final Map attrs=new HashMap();
  String alert=null, uuid=null, nextURI=null, sid=null;
  Desktop desktop=null;
  try {
    if (!isMultipartContent(request)) {
      if (""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
        uuid=request.getParameter(""String_Node_Str"");
        sid=request.getParameter(""String_Node_Str"");
        desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(request.getParameter(""String_Node_Str""));
        Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
        Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
        final String key=uuid + '_' + sid;
        Object sinfo=size.get(key);
        if (sinfo instanceof String) {
          System.out.println(""String_Node_Str"");
          response.getWriter().write(""String_Node_Str"" + sinfo);
          size.remove(key);
          precent.remove(key);
          return;
        }
        System.out.println(""String_Node_Str"");
        final Integer p=(Integer)precent.get(key);
        final Long cb=(Long)sinfo;
        response.getWriter().write((p != null ? p.intValue() : -1) + ""String_Node_Str"" + (cb != null ? cb.longValue() : -1));
        return;
      }
 else       alert=""String_Node_Str"";
    }
 else {
      System.out.println(""String_Node_Str"");
      uuid=request.getParameter(""String_Node_Str"");
      sid=request.getParameter(""String_Node_Str"");
      if (uuid == null || uuid.length() == 0) {
        alert=""String_Node_Str"";
      }
 else {
        attrs.put(""String_Node_Str"",uuid);
        attrs.put(""String_Node_Str"",sid);
        final String dtid=request.getParameter(""String_Node_Str"");
        if (dtid == null || dtid.length() == 0) {
          alert=""String_Node_Str"";
        }
 else {
          desktop=((WebAppCtrl)sess.getWebApp()).getDesktopCache(sess).getDesktop(dtid);
          final Map params=parseRequest(request,desktop,uuid + '_' + sid);
          nextURI=(String)params.get(""String_Node_Str"");
          params.put(""String_Node_Str"",request.getParameter(""String_Node_Str""));
          processItems(desktop,params,attrs);
        }
      }
    }
  }
 catch (  Throwable ex) {
    if (uuid == null) {
      uuid=request.getParameter(""String_Node_Str"");
      if (uuid != null)       attrs.put(""String_Node_Str"",uuid);
    }
    if (nextURI == null)     nextURI=request.getParameter(""String_Node_Str"");
    if (ex instanceof ComponentNotFoundException) {
      alert=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,uuid);
    }
 else     if (ex instanceof IOFileUploadException) {
      log.debug(""String_Node_Str"");
    }
 else {
      alert=handleError(ex);
    }
    if (desktop != null) {
      Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
      Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
      final String key=uuid + '_' + sid;
      if (precent != null) {
        precent.remove(key);
        size.remove(key);
      }
    }
  }
  if (attrs.get(""String_Node_Str"") == null && alert == null)   alert=""String_Node_Str"";
  if (alert != null) {
    if (desktop == null) {
      response.setIntHeader(""String_Node_Str"",HttpServletResponse.SC_GONE);
      return;
    }
    Map precent=(Map)desktop.getAttribute(Attributes.UPLOAD_PERCENT);
    Map size=(Map)desktop.getAttribute(Attributes.UPLOAD_SIZE);
    final String key=uuid + '_' + sid;
    if (precent != null) {
      precent.remove(key);
      size.put(key,alert);
    }
  }
  if (D.ON && log.finerable())   log.finer(attrs);
  if (nextURI == null || nextURI.length() == 0)   nextURI=""String_Node_Str"";
  Servlets.forward(_ctx,request,response,nextURI,attrs,Servlets.PASS_THRU_ATTR);
}"
16493,"public void init(final Desktop desktop,Object request) throws Exception {
  desktop.addListener(new AuService(){
    public boolean service(    AuRequest request,    boolean everError){
      final String cmd=request.getCommand();
      if (cmd.equals(""String_Node_Str"")) {
        String zscript=(String)request.getData().get(""String_Node_Str"");
        Component cmp=Executions.createComponentsDirectly(zscript,""String_Node_Str"",null,null);
        if (cmp != null)         cmp.setPage((Page)desktop.getPages().iterator().next());
        return true;
      }
 else       return false;
    }
  }
);
}","public void init(final Desktop desktop,Object request) throws Exception {
  desktop.addListener(new AuService(){
    public boolean service(    AuRequest request,    boolean everError){
      final String cmd=request.getCommand();
      if (cmd.equals(""String_Node_Str"")) {
        Page p=(Page)desktop.getPages().iterator().next();
        try {
          Component o=(Component)p.getDesktop().getComponents().toArray()[0];
          o.detach();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
        String zscript=(String)request.getData().get(""String_Node_Str"");
        Component cmp=Executions.createComponentsDirectly(zscript,""String_Node_Str"",null,null);
        if (cmp != null)         cmp.setPage(p);
        return true;
      }
 else       return false;
    }
  }
);
}"
16494,"public boolean service(AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    String zscript=(String)request.getData().get(""String_Node_Str"");
    Component cmp=Executions.createComponentsDirectly(zscript,""String_Node_Str"",null,null);
    if (cmp != null)     cmp.setPage((Page)desktop.getPages().iterator().next());
    return true;
  }
 else   return false;
}","public boolean service(AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    Page p=(Page)desktop.getPages().iterator().next();
    try {
      Component o=(Component)p.getDesktop().getComponents().toArray()[0];
      o.detach();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    String zscript=(String)request.getData().get(""String_Node_Str"");
    Component cmp=Executions.createComponentsDirectly(zscript,""String_Node_Str"",null,null);
    if (cmp != null)     cmp.setPage(p);
    return true;
  }
 else   return false;
}"
16495,"/** 
 * Processes an AU request.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(Events.ON_CHECK)) {
    CheckEvent evt=CheckEvent.getCheckEvent(request);
    _checked=evt.isChecked();
    fixSiblings(_checked,true);
    Events.postEvent(evt);
    final Radiogroup rg=getRadiogroup();
    if (rg != null)     Events.sendEvent(rg,evt);
  }
 else   super.service(request,everError);
}","/** 
 * Processes an AU request.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(Events.ON_CHECK)) {
    CheckEvent evt=CheckEvent.getCheckEvent(request);
    _checked=evt.isChecked();
    fixSiblings(_checked,true);
    Events.postEvent(evt);
    final Radiogroup rg=getRadiogroup();
    if (rg != null)     Events.postEvent(Events.ON_CHECK,rg,evt.getData());
  }
 else   super.service(request,everError);
}"
16496,"/** 
 * Sets the theme style in cookie
 */
public static void setThemeStyle(Execution exe,String theme){
  Cookie cookie=new Cookie(THEME_COOKIE_KEY,theme);
  cookie.setMaxAge(60 * 60 * 24* 30);
  String cp=exe.getContextPath();
  cookie.setPath(cp);
  ((HttpServletResponse)exe.getNativeResponse()).addCookie(cookie);
}","/** 
 * Sets the theme style in cookie
 */
public static void setThemeStyle(Execution exe,String theme){
  Cookie cookie=new Cookie(THEME_COOKIE_KEY,theme);
  cookie.setMaxAge(60 * 60 * 24* 30);
  String cp=exe.getContextPath();
  if (cp.isEmpty())   cp=""String_Node_Str"";
  cookie.setPath(cp);
  ((HttpServletResponse)exe.getNativeResponse()).addCookie(cookie);
}"
16497,"/** 
 * Returns the theme specified in cookies
 * @param exe Execution
 * @return the name of the theme or """" for default theme.
 */
public static String getThemeStyle(Execution exe){
  Cookie[] cookies=((HttpServletRequest)exe.getNativeRequest()).getCookies();
  if (cookies == null)   return ""String_Node_Str"";
  String candidate=null;
  for (int i=0; i < cookies.length; i++) {
    Cookie c=cookies[i];
    if (!THEME_COOKIE_KEY.equals(c.getName()))     continue;
    String theme=c.getValue();
    if (theme == null)     continue;
    String path=c.getPath();
    if (path != null && path.equals(exe.getContextPath()))     return theme;
    if (candidate == null)     candidate=theme;
  }
  return candidate == null ? ""String_Node_Str"" : candidate;
}","/** 
 * Returns the theme specified in cookies
 * @param exe Execution
 * @return the name of the theme or """" for default theme.
 */
public static String getThemeStyle(Execution exe){
  Cookie[] cookies=((HttpServletRequest)exe.getNativeRequest()).getCookies();
  if (cookies == null)   return ""String_Node_Str"";
  for (int i=0; i < cookies.length; i++) {
    Cookie c=cookies[i];
    if (!THEME_COOKIE_KEY.equals(c.getName()))     continue;
    String theme=c.getValue();
    if (theme != null)     return theme;
  }
  return ""String_Node_Str"";
}"
16498,"/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance().open(request,response,0);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? (URIInfo)wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(_ctx,request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}","/** 
 * @param wapp the Web application (or null if not available yet)
 */
private void sessionTimeout(HttpServletRequest request,HttpServletResponse response,WebApp wapp,String dtid) throws ServletException, IOException {
  final String sid=request.getHeader(""String_Node_Str"");
  if (sid != null)   response.setHeader(""String_Node_Str"",sid);
  final AuWriter out=AuWriters.newInstance().open(request,response,0);
  if (!getAuDecoder(wapp).isIgnorable(request,wapp)) {
    final String deviceType=getDeviceType(request);
    URIInfo ui=wapp != null ? (URIInfo)wapp.getConfiguration().getTimeoutURI(deviceType) : null;
    String uri=ui != null ? ui.uri : null;
    out.write(new AuConfirmClose(null));
    final AuResponse resp;
    if (uri != null) {
      if (uri.length() != 0)       uri=Encodes.encodeURL(_ctx,request,response,uri);
      resp=new AuSendRedirect(uri,null);
    }
 else {
      String msg=wapp.getConfiguration().getTimeoutMessage(deviceType);
      if (msg != null && msg.startsWith(""String_Node_Str"")) {
        final String key;
        msg=Labels.getLabel(key=msg.substring(6),new Object[]{dtid});
        if (msg == null)         log.warning(""String_Node_Str"" + key);
      }
      if (msg == null)       msg=Messages.get(MZk.UPDATE_OBSOLETE_PAGE,dtid);
      resp=new AuObsolete(dtid,msg);
    }
    out.write(resp);
  }
  out.close(request,response);
}"
16499,"private void doSmartDraw(){
  if (Strings.isBlank(getType()))   throw new UiException(""String_Node_Str"");
  if (_model == null)   _model=createDefaultModel();
  if (Strings.isBlank(getWidth()))   throw new UiException(""String_Node_Str"");
  if (Strings.isBlank(getHeight()))   throw new UiException(""String_Node_Str"");
  try {
    _paintIndex=0;
    response(new AuSetAttribute(this,""String_Node_Str"",getChartImpl().createChartXML()));
  }
  finally {
    _smartDrawChart=false;
  }
}","private void doSmartDraw(){
  if (Strings.isBlank(getType()))   throw new UiException(""String_Node_Str"");
  if (_model == null)   _model=createDefaultModel();
  if (Strings.isBlank(getWidth()))   throw new UiException(""String_Node_Str"");
  if (Strings.isBlank(getHeight()))   throw new UiException(""String_Node_Str"");
  try {
    _paintIndex=0;
    response(new AuSetAttribute(this,""String_Node_Str"",getChartImpl().createChartXML()));
    System.out.println(getChartImpl().createChartXML());
  }
  finally {
    _smartDrawChart=false;
  }
}"
16500,"public void afterCompose(){
  _afterComposed=true;
  fixModeOnly();
  if (_instantMode) {
    final Execution exec=getExecution();
    final Map old=setupDynams(exec);
    final String oldSrc=(String)exec.getAttribute(ATTR_RENDERED);
    if (!Objects.equals(oldSrc,_src)) {
      try {
        getChildren().clear();
        final int j=_src.indexOf('?');
        exec.createComponents(j >= 0 ? _src.substring(0,j) : _src,this,_dynams);
        exec.setAttribute(ATTR_RENDERED,_src);
      }
  finally {
        restoreDynams(exec,old);
      }
    }
  }
 else {
    getChildren().clear();
  }
}","public void afterCompose(){
  _afterComposed=true;
  fixModeOnly();
  if (_instantMode) {
    final Execution exec=getExecution();
    final Map old=setupDynams(exec);
    final String attrRenderedKey=ATTR_RENDERED + '$' + getUuid();
    final String oldSrc=(String)exec.getAttribute(attrRenderedKey);
    if (!Objects.equals(oldSrc,_src)) {
      try {
        getChildren().clear();
        final int j=_src.indexOf('?');
        exec.createComponents(j >= 0 ? _src.substring(0,j) : _src,this,_dynams);
        exec.setAttribute(attrRenderedKey,_src);
      }
  finally {
        restoreDynams(exec,old);
      }
    }
  }
 else {
    getChildren().clear();
  }
}"
16501,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_format);
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  render(renderer,""String_Node_Str"",_format);
  super.renderProperties(renderer);
}"
16502,"/** 
 * Returns whether to grow and shrink vertical to fit their given space, so called vertical flexibility. <p>Default: false.
 * @since 3.5.0
 */
public boolean isVflex(){
  final String vflex=getVflex();
  if (""String_Node_Str"".equals(vflex)) {
    return true;
  }
  if (Strings.isBlank(vflex) || ""String_Node_Str"".equals(vflex)) {
    return false;
  }
  return Integer.parseInt(vflex) > 0;
}","/** 
 * Returns whether to grow and shrink vertical to fit their given space, so called vertical flexibility. <p>Default: false.
 * @since 3.5.0
 */
public boolean isVflex(){
  final String vflex=getVflex();
  if (""String_Node_Str"".equals(vflex)) {
    return true;
  }
  if (Strings.isBlank(vflex) || ""String_Node_Str"".equals(vflex) || ""String_Node_Str"".equals(vflex)) {
    return false;
  }
  return Integer.parseInt(vflex) > 0;
}"
16503,"/** 
 * Sets whether to grow and shrink vertical to fit their given space, so called vertical flexibility.
 * @since 3.5.0
 */
public void setVflex(boolean vflex){
  if (isVflex() != vflex) {
    setVflex(""String_Node_Str"" + vflex);
  }
}","/** 
 * Sets whether to grow and shrink vertical to fit their given space, so called vertical flexibility.
 * @since 3.5.0
 */
public void setVflex(boolean vflex){
  if (isVflex() != vflex) {
    setVflex(String.valueOf(vflex));
  }
}"
16504,"/** 
 * Returns whether to grow and shrink vertical to fit their given space, so called vertial flexibility. <p> Note: this attribute is ignored if   {@link #setRows} is specified<p> Default: false.
 */
public boolean isVflex(){
  final String vflex=getVflex();
  if (""String_Node_Str"".equals(vflex)) {
    return true;
  }
  if (Strings.isBlank(vflex) || ""String_Node_Str"".equals(vflex)) {
    return false;
  }
  return Integer.parseInt(vflex) > 0;
}","/** 
 * Returns whether to grow and shrink vertical to fit their given space, so called vertial flexibility. <p> Note: this attribute is ignored if   {@link #setRows} is specified<p> Default: false.
 */
public boolean isVflex(){
  final String vflex=getVflex();
  if (""String_Node_Str"".equals(vflex)) {
    return true;
  }
  if (Strings.isBlank(vflex) || ""String_Node_Str"".equals(vflex) || ""String_Node_Str"".equals(vflex)) {
    return false;
  }
  return Integer.parseInt(vflex) > 0;
}"
16505,"/** 
 * Sets whether to grow and shrink vertical to fit their given space, so called vertial flexibility. <p> Note: this attribute is ignored if   {@link #setRows} is specified
 */
public void setVflex(boolean vflex){
  if (isVflex() != vflex) {
    setVflex(""String_Node_Str"" + vflex);
  }
}","/** 
 * Sets whether to grow and shrink vertical to fit their given space, so called vertial flexibility. <p> Note: this attribute is ignored if   {@link #setRows} is specified
 */
public void setVflex(boolean vflex){
  if (isVflex() != vflex) {
    setVflex(String.valueOf(vflex));
  }
}"
16506,"/** 
 * Sets the direction.
 * @param dir either ""normal"" or ""reverse"".
 */
public void setDir(String dir) throws WrongValueException {
  if (!""String_Node_Str"".equals(dir) && !""String_Node_Str"".equals(dir))   throw new WrongValueException(dir);
  if (!Objects.equals(_auxinf != null ? _auxinf.dir : null,dir)) {
    initAuxInfo().dir=dir;
    smartUpdate(""String_Node_Str"",getDir());
  }
}","/** 
 * Sets the direction.
 * @param dir either ""normal"" or ""reverse"".
 */
public void setDir(String dir) throws WrongValueException {
  if (!""String_Node_Str"".equals(dir) && !""String_Node_Str"".equals(dir))   throw new WrongValueException(dir);
  if (!Objects.equals(_auxinf != null ? _auxinf.dir : NORMAL,dir)) {
    initAuxInfo().dir=dir;
    smartUpdate(""String_Node_Str"",getDir());
  }
}"
16507,"/** 
 * Returns the direction. <p>Default: ""normal"".
 */
public String getDir(){
  return _auxinf != null ? _auxinf.dir : null;
}","/** 
 * Returns the direction. <p>Default: ""normal"".
 */
public String getDir(){
  return _auxinf != null ? _auxinf.dir : NORMAL;
}"
16508,"public void setMold(String mold){
  if (mold != null && (DEFAULT.equals(mold) || mold.length() == 0))   mold=null;
  if (!Objects.equals(_auxinf != null ? _auxinf.mold : mold,mold)) {
    if (!_def.hasMold(mold != null ? mold : DEFAULT))     throw new UiException(""String_Node_Str"" + mold + ""String_Node_Str""+ _def.getMoldNames());
    final String oldtype=getWidgetClass();
    initAuxInfo().mold=mold;
    if (Objects.equals(oldtype,getWidgetClass()))     smartUpdate(""String_Node_Str"",getMold());
 else     invalidate();
  }
}","public void setMold(String mold){
  if (mold != null && (DEFAULT.equals(mold) || mold.length() == 0))   mold=null;
  if (!Objects.equals(_auxinf != null ? _auxinf.mold : DEFAULT,mold)) {
    if (!_def.hasMold(mold != null ? mold : DEFAULT))     throw new UiException(""String_Node_Str"" + mold + ""String_Node_Str""+ _def.getMoldNames());
    final String oldtype=getWidgetClass();
    initAuxInfo().mold=mold;
    if (Objects.equals(oldtype,getWidgetClass()))     smartUpdate(""String_Node_Str"",getMold());
 else     invalidate();
  }
}"
16509,"public void init(PageConfig config){
  final Execution exec=Executions.getCurrent();
  if (((ExecutionCtrl)exec).isRecovering()) {
    final String uuid=config.getUuid(), id=config.getId();
    if (uuid == null || id == null)     throw new IllegalArgumentException(""String_Node_Str"");
    _uuid=uuid;
    _id=id;
  }
 else {
    _uuid=((DesktopCtrl)_desktop).getNextUuid(this);
    if (_id == null || _id.length() == 0)     _id=config.getId();
    if (_id == null || _id.length() == 0)     _id=(String)exec.evaluate(this,_id,String.class);
    if (_id == null) {
      _id=""String_Node_Str"";
    }
 else     if (_id.length() != 0) {
      final String INVALID=""String_Node_Str"";
      if (Strings.anyOf(_id,INVALID,0) < _id.length())       throw new IllegalArgumentException(""String_Node_Str"" + _id + ""String_Node_Str""+ INVALID);
    }
  }
  ((DesktopCtrl)_desktop).addPage(this);
  String s;
  if (_title.length() == 0) {
    s=config.getTitle();
    if (s != null)     setTitle(s);
  }
  if (_style.length() == 0) {
    s=config.getStyle();
    if (s != null)     setStyle(s);
  }
  s=config.getHeaders(true);
  if (s != null)   _hdbfr=s;
  s=config.getHeaders(false);
  if (s != null)   _hdaft=s;
  _hdres=config.getResponseHeaders();
  if (_hdres.isEmpty())   _hdres=null;
}","public void init(PageConfig config){
  final Execution exec=Executions.getCurrent();
  if (((ExecutionCtrl)exec).isRecovering()) {
    final String uuid=config.getUuid(), id=config.getId();
    if (uuid == null || id == null)     throw new IllegalArgumentException(""String_Node_Str"");
    _uuid=uuid;
    _id=id;
  }
 else {
    _uuid=((DesktopCtrl)_desktop).getNextUuid(this);
    if (_id == null || _id.length() == 0)     _id=config.getId();
    if (_id != null)     _id=(String)exec.evaluate(this,_id,String.class);
    if (_id == null) {
      _id=""String_Node_Str"";
    }
 else     if (_id.length() != 0) {
      final String INVALID=""String_Node_Str"";
      if (Strings.anyOf(_id,INVALID,0) < _id.length())       throw new IllegalArgumentException(""String_Node_Str"" + _id + ""String_Node_Str""+ INVALID);
    }
  }
  ((DesktopCtrl)_desktop).addPage(this);
  String s;
  if (_title.length() == 0) {
    s=config.getTitle();
    if (s != null)     setTitle(s);
  }
  if (_style.length() == 0) {
    s=config.getStyle();
    if (s != null)     setStyle(s);
  }
  s=config.getHeaders(true);
  if (s != null)   _hdbfr=s;
  s=config.getHeaders(false);
  if (s != null)   _hdaft=s;
  _hdres=config.getResponseHeaders();
  if (_hdres.isEmpty())   _hdres=null;
}"
16510,"private static final boolean shallEncodeUnicode(char cc,String specials){
  return specials == ESCAPE_JAVASCRIPT && cc > (char)127 && !Character.isLetter(cc);
}","private static final boolean shallEncodeUnicode(char cc,String specials){
  return specials == ESCAPE_JAVASCRIPT && cc > (char)255 && !Character.isLetterOrDigit(cc);
}"
16511,"/** 
 * Escapes (aka. quote) the special characters with backslash and appends it the specified string buffer.
 * @param dst the destination buffer to append to.
 * @param src the source to escape from.
 * @param specials a string of characters that shall be escaped/quotedTo escape a string in JavaScript code snippet, you can use  {@link #ESCAPE_JAVASCRIPT}.
 * @since 5.0.0
 */
public static final StringBuffer escape(StringBuffer dst,CharSequence src,String specials){
  if (src == null)   return dst;
  for (int j=0, j2=0, len=src.length(); ; ) {
    String enc=null;
    char cc;
    int k=j2;
    for (; ; ++k) {
      if (k >= len)       return dst.append((Object)src.subSequence(j,src.length()));
      cc=src.charAt(k);
      if (shallEncodeUnicode(cc,specials)) {
        enc=""String_Node_Str"" + Integer.toHexString(cc);
        break;
      }
      if (specials.indexOf(cc) >= 0)       break;
    }
    if (enc == null) switch (cc) {
case '\n':
      cc='n';
    break;
case '\t':
  cc='t';
break;
case '\r':
cc='r';
break;
case '\f':
cc='f';
break;
case '/':
if (specials == ESCAPE_JAVASCRIPT && (k <= 0 || src.charAt(k - 1) != '<' || k + 8 > len || !""String_Node_Str"".equalsIgnoreCase(src.subSequence(k + 1,k + 8).toString()))) {
j2=k + 1;
continue;
}
}
dst.append((Object)src.subSequence(j,k)).append('\\');
if (enc != null) dst.append(enc);
 else dst.append(cc);
j2=j=k + 1;
}
}","/** 
 * Escapes (aka. quote) the special characters with backslash and appends it the specified string buffer.
 * @param dst the destination buffer to append to.
 * @param src the source to escape from.
 * @param specials a string of characters that shall be escaped/quotedTo escape a string in JavaScript code snippet, you can use  {@link #ESCAPE_JAVASCRIPT}.
 * @since 5.0.0
 */
public static final StringBuffer escape(StringBuffer dst,CharSequence src,String specials){
  if (src == null)   return dst;
  for (int j=0, j2=0, len=src.length(); ; ) {
    String enc=null;
    char cc;
    int k=j2;
    for (; ; ++k) {
      if (k >= len)       return dst.append((Object)src.subSequence(j,src.length()));
      cc=src.charAt(k);
      if (shallEncodeUnicode(cc,specials)) {
        enc=encodeUnicode(cc);
        break;
      }
      if (specials.indexOf(cc) >= 0)       break;
    }
    if (enc == null) switch (cc) {
case '\n':
      cc='n';
    break;
case '\t':
  cc='t';
break;
case '\r':
cc='r';
break;
case '\f':
cc='f';
break;
case '/':
if (specials == ESCAPE_JAVASCRIPT && (k <= 0 || src.charAt(k - 1) != '<' || k + 8 > len || !""String_Node_Str"".equalsIgnoreCase(src.subSequence(k + 1,k + 8).toString()))) {
j2=k + 1;
continue;
}
}
dst.append((Object)src.subSequence(j,k)).append('\\');
if (enc != null) dst.append(enc);
 else dst.append(cc);
j2=j=k + 1;
}
}"
16512,"public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (_rod && hasGroupsModel()) {
      if (_groupsInfo.isEmpty())       _groupsInfo=((GroupsListModel)getModel()).getGroupsInfo();
      refChild=fixRefChildBeforeFoot(refChild);
      if (super.insertBefore(newChild,refChild)) {
        afterInsert(newChild);
        return true;
      }
      return false;
    }
    final boolean isReorder=newChild.getParent() == this;
    if (newChild instanceof Listgroupfoot) {
      if (refChild == null) {
        if (isReorder) {
          final int idx=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(idx);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
 else {
        final Component preRefChild=refChild.getPreviousSibling();
        if (preRefChild instanceof Listitem) {
          final int idx=((Listitem)preRefChild).getIndex();
          final int[] g=getGroupsInfoAt(idx,preRefChild instanceof Listgroup);
          if (g == null)           throw new UiException(""String_Node_Str"");
          if (g[2] != -1)           throw new UiException(""String_Node_Str"");
          if (idx + 1 != (g[0] + g[1]))           throw new UiException(""String_Node_Str"");
          g[2]=idx;
          if (isReorder) {
            final int nindex=((Listgroupfoot)newChild).getIndex();
            final int[] ginfo=getGroupsInfoAt(nindex);
            if (ginfo != null) {
              ginfo[1]--;
              ginfo[2]=-1;
            }
          }
        }
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1 + getDataLoader().getOffset());
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelUuid());
          _selItems.add(newItem);
          if (_model instanceof Selectable) {
            ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
          }
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelUuid());
          }
          _selItems.add(newItem);
          if (_model instanceof Selectable) {
            ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
          }
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (!isLoadingModel() && _jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelUuid());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int index=lg.getIndex(), leng=index - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
            if (size > 1 && prev[2] > index)             prev[2]=-1;
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        int index=newItem.getIndex();
        final int[] g=getGroupsInfoAt(index);
        if (g != null) {
          g[1]++;
          if (g[2] != -1 && (g[2] >= index || newItem instanceof Listgroupfoot))           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
  }
 else   if (newChild instanceof Listhead) {
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      _listhead=(Listhead)newChild;
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Frozen) {
    refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      _frozen=(Frozen)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Listfoot) {
    if (_frozen != null)     refChild=_frozen;
 else     refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      _listfoot=(Listfoot)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Paging) {
    refChild=null;
    if (super.insertBefore(newChild,refChild)) {
      _pgi=_paging=(Paging)newChild;
      return true;
    }
  }
 else {
    return super.insertBefore(newChild,refChild);
  }
  return false;
}","public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (_rod && hasGroupsModel()) {
      if (_groupsInfo.isEmpty())       _groupsInfo=((GroupsListModel)getModel()).getGroupsInfo();
      refChild=fixRefChildBeforeFoot(refChild);
      if (super.insertBefore(newChild,refChild)) {
        afterInsert(newChild);
        return true;
      }
      return false;
    }
    final boolean isReorder=newChild.getParent() == this;
    if (newChild instanceof Listgroupfoot) {
      if (refChild == null) {
        if (isReorder) {
          final int idx=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(idx);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
 else {
        final Component preRefChild=refChild.getPreviousSibling();
        if (preRefChild instanceof Listitem) {
          final int idx=((Listitem)preRefChild).getIndex();
          final int[] g=getGroupsInfoAt(idx,preRefChild instanceof Listgroup);
          if (g == null)           throw new UiException(""String_Node_Str"");
          if (g[2] != -1)           throw new UiException(""String_Node_Str"");
          if (idx + 1 != (g[0] + g[1]))           throw new UiException(""String_Node_Str"");
          g[2]=idx;
          if (isReorder) {
            final int nindex=((Listgroupfoot)newChild).getIndex();
            final int[] ginfo=getGroupsInfoAt(nindex);
            if (ginfo != null) {
              ginfo[1]--;
              ginfo[2]=-1;
            }
          }
        }
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1 + getDataLoader().getOffset());
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelUuid());
          _selItems.add(newItem);
          if (_model instanceof Selectable) {
            ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
          }
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelUuid());
          }
          _selItems.add(newItem);
          if (_model instanceof Selectable) {
            ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
          }
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (!isLoadingModel() && _jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelUuid());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int index=lg.getIndex(), leng=index - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
            if (size > 1 && prev[2] > index)             prev[2]=-1;
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        int index=newItem.getIndex();
        final int[] g=getGroupsInfoAt(index);
        if (g != null) {
          g[1]++;
          if (g[2] != -1 && (g[2] >= index || newItem instanceof Listgroupfoot))           g[2]=g[0] + g[1] - 1;
        }
      }
      afterInsert(newChild);
      return true;
    }
  }
 else   if (newChild instanceof Listhead) {
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      _listhead=(Listhead)newChild;
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Frozen) {
    refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      _frozen=(Frozen)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Listfoot) {
    if (_frozen != null)     refChild=_frozen;
 else     refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      _listfoot=(Listfoot)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Paging) {
    refChild=null;
    if (super.insertBefore(newChild,refChild)) {
      _pgi=_paging=(Paging)newChild;
      return true;
    }
  }
 else {
    return super.insertBefore(newChild,refChild);
  }
  return false;
}"
16513,"public boolean insertBefore(Component child,Component refChild){
  final Grid grid=getGrid();
  if (grid != null && grid.isRod() && hasGroupsModel()) {
    if (_groupsInfo.isEmpty())     _groupsInfo=((GroupsListModel)grid.getModel()).getGroupsInfo();
    if (super.insertBefore(child,refChild)) {
      afterInsert(child);
      return true;
    }
    return false;
  }
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  final boolean isReorder=child.getParent() == this;
  if (newItem instanceof Groupfoot) {
    if (refChild == null) {
      if (isReorder) {
        final int idx=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(idx);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - (isReorder ? 2 : 1);
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
      if (isReorder) {
        final int nindex=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(nindex);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
          if (size > 1 && prev[2] > index)           prev[2]=-1;
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1 && (g[2] >= index || newItem instanceof Groupfoot))         g[2]++;
      }
    }
    afterInsert(child);
    return true;
  }
  return false;
}","public boolean insertBefore(Component child,Component refChild){
  final Grid grid=getGrid();
  if (grid != null && grid.isRod() && hasGroupsModel()) {
    if (_groupsInfo.isEmpty())     _groupsInfo=((GroupsListModel)grid.getModel()).getGroupsInfo();
    if (super.insertBefore(child,refChild)) {
      afterInsert(child);
      return true;
    }
    return false;
  }
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  final boolean isReorder=child.getParent() == this;
  if (newItem instanceof Groupfoot) {
    if (refChild == null) {
      if (isReorder) {
        final int idx=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(idx);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - (isReorder ? 2 : 1);
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
      if (isReorder) {
        final int nindex=newItem.getIndex();
        final int[] ginfo=getGroupsInfoAt(nindex);
        if (ginfo != null) {
          ginfo[1]--;
          ginfo[2]=-1;
        }
      }
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
          if (size > 1 && prev[2] > index)           prev[2]=-1;
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1 && (g[2] >= index || newItem instanceof Groupfoot))         g[2]=g[0] + g[1] - 1;
      }
    }
    afterInsert(child);
    return true;
  }
  return false;
}"
16514,"/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new EventListener(){
    public void onEvent(    Event event){
      final PagingEvent evt=(PagingEvent)event;
      Events.postEvent(new PagingEvent(evt.getName(),Grid.this,evt.getPageable(),evt.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new EventListener(){
    public void onEvent(    Event event){
      if (_rows != null && _model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        getDataLoader().syncModel(ofs,pgsz);
        postOnInitRender();
      }
      if (getModel() != null || getPagingPosition().equals(""String_Node_Str""))       invalidate();
 else       if (_rows != null)       _rows.invalidate();
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}","/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new EventListener(){
    public void onEvent(    Event event){
      final PagingEvent evt=(PagingEvent)event;
      Events.postEvent(new PagingEvent(evt.getName(),Grid.this,evt.getPageable(),evt.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new EventListener(){
    public void onEvent(    Event event){
      if (_rows != null && _model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        if (_rod) {
          getDataLoader().syncModel(ofs,pgsz);
        }
        postOnInitRender();
      }
      if (getModel() != null || getPagingPosition().equals(""String_Node_Str""))       invalidate();
 else       if (_rows != null)       _rows.invalidate();
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}"
16515,"public void onEvent(Event event){
  if (_rows != null && _model != null && inPagingMold()) {
    final Paginal pgi=getPaginal();
    int pgsz=pgi.getPageSize();
    final int ofs=pgi.getActivePage() * pgsz;
    getDataLoader().syncModel(ofs,pgsz);
    postOnInitRender();
  }
  if (getModel() != null || getPagingPosition().equals(""String_Node_Str""))   invalidate();
 else   if (_rows != null)   _rows.invalidate();
}","public void onEvent(Event event){
  if (_rows != null && _model != null && inPagingMold()) {
    final Paginal pgi=getPaginal();
    int pgsz=pgi.getPageSize();
    final int ofs=pgi.getActivePage() * pgsz;
    if (_rod) {
      getDataLoader().syncModel(ofs,pgsz);
    }
    postOnInitRender();
  }
  if (getModel() != null || getPagingPosition().equals(""String_Node_Str""))   invalidate();
 else   if (_rows != null)   _rows.invalidate();
}"
16516,"/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new EventListener(){
    public void onEvent(    Event event){
      final PagingEvent evt=(PagingEvent)event;
      Events.postEvent(new PagingEvent(evt.getName(),Listbox.this,evt.getPageable(),evt.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new EventListener(){
    public void onEvent(    Event event){
      if (_model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        getDataLoader().syncModel(ofs,pgsz);
        postOnInitRender();
      }
      invalidate();
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}","/** 
 * Adds the event listener for the onPaging event. 
 */
private void addPagingListener(Paginal pgi){
  if (_pgListener == null)   _pgListener=new EventListener(){
    public void onEvent(    Event event){
      final PagingEvent evt=(PagingEvent)event;
      Events.postEvent(new PagingEvent(evt.getName(),Listbox.this,evt.getPageable(),evt.getActivePage()));
    }
  }
;
  pgi.addEventListener(ZulEvents.ON_PAGING,_pgListener);
  if (_pgImpListener == null)   _pgImpListener=new EventListener(){
    public void onEvent(    Event event){
      if (_model != null && inPagingMold()) {
        final Paginal pgi=getPaginal();
        int pgsz=pgi.getPageSize();
        final int ofs=pgi.getActivePage() * pgsz;
        if (_rod) {
          getDataLoader().syncModel(ofs,pgsz);
        }
        postOnInitRender();
      }
      invalidate();
    }
  }
;
  pgi.addEventListener(""String_Node_Str"",_pgImpListener);
}"
16517,"public int getTotalSize(){
  final Rows rows=_grid.getRows();
  final ListModel model=_grid.getModel();
  return model != null ? model.getSize() : rows != null ? rows.getVisibleItemCount() : 40;
}","public int getTotalSize(){
  final Rows rows=_grid.getRows();
  final ListModel model=_grid.getModel();
  return model != null ? model.getSize() : rows != null ? rows.getVisibleItemCount() : 0;
}"
16518,"/** 
 * Sets the value (in Date).
 * @exception WrongValueException if value is wrong
 */
public void setValue(Date value) throws WrongValueException {
  if (value == null)   value=Dates.today();
  validate(value);
  setRawValue(value);
}","/** 
 * Sets the value (in Date).
 * @exception WrongValueException if value is wrong
 */
public void setValue(Date value) throws WrongValueException {
  validate(value);
  setRawValue(value);
}"
16519,"/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  final int isz=_items.size();
  final int tsz=_model != null ? _model.getSize() : isz;
  if (jsel >= tsz)   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ tsz);
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1)) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    Listitem item=getItemAtIndex(_jsel);
    if (item == null) {
      if (inPagingMold()) {
        final int offset=_jsel - _jsel % getPageSize();
        final int limit=getPageSize();
        getDataLoader().syncModel(offset,limit);
      }
 else {
        final int offset=_jsel - 10;
        final int limit=getDataLoader().getLimit();
        getDataLoader().syncModel(offset < 0 ? 0 : offset,limit);
        _topPad=-1;
        _currentTop=0;
        _currentLeft=0;
        invalidate();
      }
      item=getItemAtIndex(_jsel);
    }
    item.setSelectedDirectly(true);
    _selItems.add(item);
    if (_model instanceof Selectable) {
      if (!isLoadingModel()) {
        ((Selectable)_model).clearSelection();
      }
      ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
    }
    if (inSelectMold()) {
      smartUpdate(""String_Node_Str"",_jsel);
    }
 else     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=getDataLoader().getOffset();
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}","/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  final int isz=_items.size();
  final int tsz=_model != null ? _model.getSize() : isz;
  if (jsel >= tsz)   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ tsz);
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1) || !_selItems.contains(getItemAtIndex(_jsel))) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    Listitem item=getItemAtIndex(_jsel);
    if (item == null) {
      if (inPagingMold()) {
        final int offset=_jsel - _jsel % getPageSize();
        final int limit=getPageSize();
        getDataLoader().syncModel(offset,limit);
      }
 else {
        smartUpdate(""String_Node_Str"",_jsel);
      }
    }
 else {
      item.setSelectedDirectly(true);
      _selItems.add(item);
    }
    if (_model instanceof Selectable) {
      if (!isLoadingModel()) {
        ((Selectable)_model).clearSelection();
      }
      ((Selectable)_model).addSelection(_model.getElementAt(_jsel));
    }
    if (inSelectMold()) {
      smartUpdate(""String_Node_Str"",_jsel);
    }
 else     if (item != null)     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=getDataLoader().getOffset();
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}"
16520,"/** 
 * Callback if a list item has been inserted. <p> Note: it won't be called if other kind of child is inserted. <p> When this method is called, the index is correct. <p> Default: invalidate if it is the paging mold and it affects the view of the active page.
 * @since 3.0.5
 */
protected void afterInsert(Component comp){
  if (comp instanceof Listitem && _model instanceof Selectable) {
    final Listitem item=(Listitem)comp;
    if (((Selectable)_model).getSelection().contains(_model.getElementAt(item.getIndex()))) {
      addItemToSelection(item);
    }
  }
  updateVisibleCount((Listitem)comp,false);
  checkInvalidateForMoved((Listitem)comp,false);
}","/** 
 * Callback if a list item has been inserted. <p> Note: it won't be called if other kind of child is inserted. <p> When this method is called, the index is correct. <p> Default: invalidate if it is the paging mold and it affects the view of the active page.
 * @since 3.0.5
 */
protected void afterInsert(Component comp){
  if (comp instanceof Listitem && _model instanceof Selectable && (isLoadingModel() || isSyncingModel())) {
    final Listitem item=(Listitem)comp;
    if (((Selectable)_model).getSelection().contains(_model.getElementAt(item.getIndex()))) {
      addItemToSelection(item);
    }
  }
  updateVisibleCount((Listitem)comp,false);
  checkInvalidateForMoved((Listitem)comp,false);
}"
16521,"/** 
 * Processes an AU request. <p> Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,getPreloadSize()));
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(Events.ON_SELECT)) {
    SelectEvent evt=SelectEvent.getSelectEvent(request);
    Set selItems=evt.getSelectedItems();
    _noSmartUpdate=true;
    try {
      if (AuRequests.getBoolean(request.getData(),""String_Node_Str""))       clearSelection();
      final boolean paging=inPagingMold();
      if (!_multiple || (!paging && (selItems == null || selItems.size() <= 1))) {
        final Listitem item=selItems != null && selItems.size() > 0 ? (Listitem)selItems.iterator().next() : null;
        selectItem(item);
      }
 else {
        int from, to;
        if (paging) {
          final Paginal pgi=getPaginal();
          int pgsz=pgi.getPageSize();
          from=pgi.getActivePage() * pgsz;
          to=from + pgsz;
        }
 else {
          from=to=0;
        }
        int j=0;
        for (Iterator it=_items.iterator(); it.hasNext(); ++j) {
          final Listitem item=(Listitem)it.next();
          if (selItems.contains(item)) {
            addItemToSelection(item);
          }
 else           if (!paging) {
            removeItemFromSelection(item);
          }
 else {
            final int index=item.getIndex();
            if (index >= from && index < to)             removeItemFromSelection(item);
          }
        }
      }
    }
  finally {
      _noSmartUpdate=false;
    }
    Events.postEvent(evt);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final Set items=AuRequests.convertToItems(request.getDesktop(),(List)request.getData().get(""String_Node_Str""));
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=_items.iterator();
      while (it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (items.contains(li))         break;
        if (!li.isLoaded())         toload.add(0,li);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (!li.isLoaded() && items.add(li))         --cnt;
      }
    }
    Listbox.this.renderItems(items);
  }
 else   super.service(request,everError);
}","/** 
 * Processes an AU request. <p> Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    if (_rod)     Executions.getCurrent().setAttribute(""String_Node_Str"" + this.getUuid(),Boolean.TRUE);
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,getPreloadSize()));
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(Events.ON_SELECT)) {
    if (_rod && Executions.getCurrent().getAttribute(""String_Node_Str"" + this.getUuid()) != null)     return;
    SelectEvent evt=SelectEvent.getSelectEvent(request);
    Set selItems=evt.getSelectedItems();
    _noSmartUpdate=true;
    try {
      if (AuRequests.getBoolean(request.getData(),""String_Node_Str""))       clearSelection();
      final boolean paging=inPagingMold();
      if (!_multiple || (!paging && (selItems == null || selItems.size() <= 1))) {
        final Listitem item=selItems != null && selItems.size() > 0 ? (Listitem)selItems.iterator().next() : null;
        selectItem(item);
      }
 else {
        int from, to;
        if (paging) {
          final Paginal pgi=getPaginal();
          int pgsz=pgi.getPageSize();
          from=pgi.getActivePage() * pgsz;
          to=from + pgsz;
        }
 else {
          from=to=0;
        }
        int j=0;
        for (Iterator it=_items.iterator(); it.hasNext(); ++j) {
          final Listitem item=(Listitem)it.next();
          if (selItems.contains(item)) {
            addItemToSelection(item);
          }
 else           if (!paging) {
            removeItemFromSelection(item);
          }
 else {
            final int index=item.getIndex();
            if (index >= from && index < to)             removeItemFromSelection(item);
          }
        }
      }
    }
  finally {
      _noSmartUpdate=false;
    }
    Events.postEvent(evt);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final Set items=AuRequests.convertToItems(request.getDesktop(),(List)request.getData().get(""String_Node_Str""));
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=_items.iterator();
      while (it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (items.contains(li))         break;
        if (!li.isLoaded())         toload.add(0,li);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Listitem li=(Listitem)it.next();
        if (!li.isLoaded() && items.add(li))         --cnt;
      }
    }
    Listbox.this.renderItems(items);
  }
 else   super.service(request,everError);
}"
16522,"/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
public void syncModel(int offset,int limit){
  int min=offset;
  int max=offset + limit - 1;
  final ListModel _model=_listbox.getModel();
  final int newsz=_model.getSize();
  final int oldsz=_listbox.getItemCount();
  final Paginal _pgi=_listbox.getPaginal();
  final boolean inPaging=inPagingMold();
  int newcnt=newsz - oldsz;
  int atg=_pgi != null ? _listbox.getActivePage() : 0;
  ListitemRenderer renderer=null;
  Component next=null;
  if (oldsz > 0) {
    if (min < 0)     min=0;
 else     if (min > oldsz - 1)     min=oldsz - 1;
    if (max < 0)     max=oldsz - 1;
 else     if (max > oldsz - 1)     max=oldsz - 1;
    if (min > max) {
      int t=min;
      min=max;
      max=t;
    }
    int cnt=max - min + 1;
    if (_model instanceof GroupsListModel) {
      newcnt+=cnt;
      if (newcnt > 50 && !inPaging)       _listbox.invalidate();
      Component comp=_listbox.getItemAtIndex(max);
      next=comp.getNextSibling();
      while (--cnt >= 0) {
        Component p=comp.getPreviousSibling();
        comp.detach();
        comp=p;
      }
    }
 else {
      int addcnt=0;
      Component item=_listbox.getItemAtIndex(min);
      while (--cnt >= 0) {
        next=item.getNextSibling();
        if (cnt < -newcnt) {
          item.detach();
        }
 else         if (((Listitem)item).isLoaded()) {
          if (renderer == null)           renderer=(ListitemRenderer)getRealRenderer();
          item.detach();
          _listbox.insertBefore(newUnloadedItem(renderer,min++),next);
          ++addcnt;
        }
        item=next;
      }
      if ((addcnt > 50 || addcnt + newcnt > 50) && !inPagingMold())       _listbox.invalidate();
    }
  }
 else {
    min=0;
  }
  for (; --newcnt >= 0; ++min) {
    if (renderer == null)     renderer=(ListitemRenderer)getRealRenderer();
    _listbox.insertBefore(newUnloadedItem(renderer,min),next);
  }
  if (_pgi != null) {
    if (atg >= _pgi.getPageCount())     atg=_pgi.getPageCount() - 1;
    _pgi.setActivePage(atg);
  }
}","/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
public void syncModel(int offset,int limit){
  _listbox.setAttribute(Listbox.SYNCING_MODEL,Boolean.TRUE);
  try {
    syncModel0(offset,limit);
  }
  finally {
    _listbox.setAttribute(Listbox.SYNCING_MODEL,null);
  }
}"
16523,"/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 */
protected void organizeGroup(Comparator cmpr,int col){
  List group=new ArrayList();
  List gdata=null;
  Object last=null;
  Object curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    boolean hitn=false;
    boolean hita=false;
    if (last == null || cmpr.compare(last,curr) != 0) {
      hitn=true;
      gdata=new ArrayList();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List[] gd=new List[group.size()];
  group.toArray(gd);
  _data=new Object[gd.length][];
  _foots=new Object[_data.length];
  _heads=new Object[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=(List)gd[i];
    _data[i]=new Object[gdata.size()];
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
  }
}","/** 
 * Organizes groups based sorted data. <p>There are three steps to re-group data:  {@link #sortDataInGroupOrder},   {@link #organizeGroup} and then{@link #sortGroupData}. <p>It is the second step of grouping. It creates group data based on the data sorted in the group order by  {@link #sortDataInGroupOrder}.
 * @param cmpr the comparator used to compare data in the group order.Notice that the comparator is never an instance of  {@link GroupComparator}. The implementation just uses   {@link Comparator#compare} to sortthe data.
 * @param col column index
 */
protected void organizeGroup(Comparator cmpr,int col){
  List group=new ArrayList();
  List gdata=null;
  Object last=null;
  Object curr=null;
  for (int i=0; i < _nativedata.length; i++) {
    curr=_nativedata[i];
    boolean hitn=false;
    boolean hita=false;
    if (last == null || cmpr.compare(last,curr) != 0) {
      hitn=true;
      gdata=new ArrayList();
      group.add(gdata);
    }
    gdata.add(curr);
    last=_nativedata[i];
  }
  List[] gd=new List[group.size()];
  group.toArray(gd);
  _data=new Object[gd.length][];
  _foots=new Object[_data.length];
  _heads=new Object[_data.length];
  _closes=new boolean[_data.length];
  for (int i=0; i < gd.length; i++) {
    gdata=(List)gd[i];
    _data[i]=new Object[gdata.size()];
    gdata.toArray(_data[i]);
    _heads[i]=createGroupHead(_data[i],i,col);
    _foots[i]=createGroupFoot(_data[i],i,col);
    _closes[i]=createGroupClose(_data[i],i,col);
  }
}"
16524,"public void group(final Comparator cmpr,boolean ascending,int col){
  Comparator cmprx;
  if (cmpr instanceof GroupComparator) {
    cmprx=new Comparator(){
      public int compare(      Object o1,      Object o2){
        return ((GroupComparator)cmpr).compareGroup(o1,o2);
      }
    }
;
  }
 else {
    cmprx=cmpr;
  }
  sortDataInGroupOrder(cmprx,ascending,col);
  organizeGroup(cmprx,col);
  if (cmprx != cmpr)   sortAllGroupData(cmpr,ascending,col);
  fireEvent(GroupsDataEvent.GROUPS_CHANGED,-1,-1,-1);
}","public void group(final Comparator cmpr,boolean ascending,int col){
  Comparator cmprx;
  if (cmpr instanceof GroupComparator) {
    cmprx=new Comparator(){
      public int compare(      Object o1,      Object o2){
        return ((GroupComparator)cmpr).compareGroup(o1,o2);
      }
    }
;
  }
 else {
    cmprx=cmpr;
  }
  sortDataInGroupOrder(cmprx,ascending,col);
  organizeGroup(cmprx,col);
  if (cmprx != cmpr)   sortAllGroupData(cmpr,ascending,col);
  fireEvent(GroupsDataEvent.GROUPS_RESET,-1,-1,-1);
}"
16525,"/** 
 * Handles a private event, onInitRender. It is used only for implementation, and you rarely need to invoke it explicitly.
 */
public void onInitRender(){
  removeAttribute(ATTR_ON_INIT_RENDER_POSTED);
  final Renderer renderer=new Renderer();
  try {
    int pgsz, ofs;
    if (inPagingMold()) {
      pgsz=_pgi.getPageSize();
      ofs=_pgi.getActivePage() * pgsz;
    }
 else {
      pgsz=getDataLoader().getLimit();
      ofs=getDataLoader().getOffset();
    }
    final int cnt=_rows.getChildren().size();
    if (ofs >= cnt) {
      ofs=cnt - pgsz;
      if (ofs < 0)       ofs=0;
    }
    int j=0;
    for (Iterator it=_rows.getChildren().listIterator(ofs); j < pgsz && it.hasNext(); ++j)     renderer.render((Row)it.next());
  }
 catch (  Throwable ex) {
    renderer.doCatch(ex);
  }
 finally {
    renderer.doFinally();
  }
}","/** 
 * Handles a private event, onInitRender. It is used only for implementation, and you rarely need to invoke it explicitly.
 */
public void onInitRender(){
  removeAttribute(ATTR_ON_INIT_RENDER_POSTED);
  final Renderer renderer=new Renderer();
  try {
    int pgsz, ofs;
    if (inPagingMold()) {
      pgsz=_pgi.getPageSize();
      ofs=_pgi.getActivePage() * pgsz;
    }
 else {
      pgsz=getDataLoader().getLimit();
      ofs=getDataLoader().getOffset();
    }
    final int cnt=_rows.getChildren().size();
    if (ofs >= cnt) {
      ofs=cnt - pgsz;
      if (ofs < 0)       ofs=0;
    }
    int j=0;
    int realOfs=ofs - getDataLoader().getOffset();
    if (realOfs < 0)     realOfs=0;
    boolean open=true;
    for (Iterator it=_rows.getChildren().listIterator(realOfs); j < pgsz && it.hasNext(); ) {
      final Row row=(Row)(Row)it.next();
      if (row.isVisible() && (open || row instanceof Groupfoot || row instanceof Group)) {
        renderer.render(row);
        ++j;
      }
      if (row instanceof Group)       open=((Group)row).isOpen();
    }
  }
 catch (  Throwable ex) {
    renderer.doCatch(ex);
  }
 finally {
    renderer.doFinally();
  }
}"
16526,"private void init(){
  _heads=new AbstractCollection(){
    public int size(){
      int sz=getChildren().size();
      if (_rows != null)       --sz;
      if (_foot != null)       --sz;
      if (_paging != null)       --sz;
      if (_frozen != null)       --sz;
      return sz;
    }
    public Iterator iterator(){
      return new Iter();
    }
  }
;
  this.addEventListener(""String_Node_Str"",_gridInitListener=new EventListener(){
    public void onEvent(    Event event) throws Exception {
      if (_gridInitListener != null) {
        Grid.this.removeEventListener(""String_Node_Str"",_gridInitListener);
        _gridInitListener=null;
      }
      final DataLoader loader=getDataLoader();
      Paginal pgi=getPaginal();
      if (pgi != null)       pgi.setTotalSize(loader.getTotalSize());
    }
  }
);
  Events.postEvent(new Event(""String_Node_Str"",this));
}","private void init(){
  _heads=new AbstractCollection(){
    public int size(){
      int sz=getChildren().size();
      if (_rows != null)       --sz;
      if (_foot != null)       --sz;
      if (_paging != null)       --sz;
      if (_frozen != null)       --sz;
      return sz;
    }
    public Iterator iterator(){
      return new Iter();
    }
  }
;
  this.addEventListener(""String_Node_Str"",_gridInitListener=new EventListener(){
    public void onEvent(    Event event) throws Exception {
      if (_gridInitListener != null) {
        Grid.this.removeEventListener(""String_Node_Str"",_gridInitListener);
        _gridInitListener=null;
      }
      if (_dataLoader != null) {
        final boolean rod=evalRod();
        if (_rod != rod) {
          if (_model != null) {
            getRows().getChildren().clear();
            _dataLoader=null;
            setModel(_model);
          }
 else {
            _dataLoader=null;
          }
        }
      }
      final DataLoader loader=getDataLoader();
      Paginal pgi=getPaginal();
      if (pgi != null)       pgi.setTotalSize(loader.getTotalSize());
    }
  }
);
  Events.postEvent(new Event(""String_Node_Str"",this));
}"
16527,"DataLoader getDataLoader(){
  if (_dataLoader == null) {
    final String loadercls=(String)getAttribute(""String_Node_Str"");
    try {
      _dataLoader=loadercls != null ? (DataLoader)Classes.forNameByThread(loadercls).newInstance() : new GridDataLoader();
    }
 catch (    Exception e) {
      throw UiException.Aide.wrap(e);
    }
    _dataLoader.init(this);
  }
  return _dataLoader;
}","DataLoader getDataLoader(){
  if (_dataLoader == null) {
    _rod=evalRod();
    final String loadercls=(String)getAttribute(""String_Node_Str"");
    try {
      _dataLoader=_rod && loadercls != null ? (DataLoader)Classes.forNameByThread(loadercls).newInstance() : new GridDataLoader();
    }
 catch (    Exception e) {
      throw UiException.Aide.wrap(e);
    }
    _dataLoader.init(this);
  }
  return _dataLoader;
}"
16528,"public void setMold(String mold){
  final String old=getMold();
  if (!Objects.equals(old,mold)) {
    super.setMold(mold);
    if (""String_Node_Str"".equals(old)) {
      if (_paging != null) {
        removePagingListener(_paging);
        _paging.detach();
      }
 else       if (_pgi != null) {
        removePagingListener(_pgi);
      }
      invalidate();
    }
 else     if (inPagingMold()) {
      if (_pgi != null)       addPagingListener(_pgi);
 else       newInternalPaging();
      invalidate();
    }
  }
}","public void setMold(String mold){
  final String old=getMold();
  if (!Objects.equals(old,mold)) {
    super.setMold(mold);
    if (""String_Node_Str"".equals(old)) {
      if (_paging != null) {
        removePagingListener(_paging);
        _paging.detach();
      }
 else       if (_pgi != null) {
        removePagingListener(_pgi);
      }
      if (getModel() != null) {
        getDataLoader().syncModel(0,40);
        postOnInitRender();
      }
      invalidate();
    }
 else     if (inPagingMold()) {
      if (_pgi != null)       addPagingListener(_pgi);
 else       newInternalPaging();
      _topPad=0;
      _currentTop=0;
      _currentLeft=0;
      Events.postEvent(new PagingEvent(""String_Node_Str"",(Component)_pgi,_pgi.getActivePage()));
      invalidate();
    }
  }
}"
16529,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_scOddRow);
  if (isSizedByContent())   renderer.render(""String_Node_Str"",true);
  render(renderer,""String_Node_Str"",_vflex);
  if (_model != null)   render(renderer,""String_Node_Str"",true);
  if (!""String_Node_Str"".equals(_pagingPosition))   render(renderer,""String_Node_Str"",_pagingPosition);
  if (!""String_Node_Str"".equals(_innerWidth))   render(renderer,""String_Node_Str"",_innerWidth);
  if (_currentTop != 0)   renderer.render(""String_Node_Str"",_currentTop);
  if (_currentLeft != 0)   renderer.render(""String_Node_Str"",_currentLeft);
  if (_topPad != 0)   renderer.render(""String_Node_Str"",_topPad);
  render(renderer,""String_Node_Str"",new Integer(getDataLoader().getTotalSize()));
  render(renderer,""String_Node_Str"",new Integer(getDataLoader().getOffset()));
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_scOddRow);
  if (isSizedByContent())   renderer.render(""String_Node_Str"",true);
  render(renderer,""String_Node_Str"",_vflex);
  if (_model != null)   render(renderer,""String_Node_Str"",true);
  if (!""String_Node_Str"".equals(_pagingPosition))   render(renderer,""String_Node_Str"",_pagingPosition);
  if (!""String_Node_Str"".equals(_innerWidth))   render(renderer,""String_Node_Str"",_innerWidth);
  if (_currentTop != 0)   renderer.render(""String_Node_Str"",_currentTop);
  if (_currentLeft != 0)   renderer.render(""String_Node_Str"",_currentLeft);
  renderer.render(""String_Node_Str"",_topPad);
  renderer.render(""String_Node_Str"",getDataLoader().getTotalSize());
  renderer.render(""String_Node_Str"",getDataLoader().getOffset());
  if (_rod) {
    renderer.render(""String_Node_Str"",true);
  }
}"
16530,"/** 
 * Processes an AU request. <p>Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,_preloadsz > 0 ? _preloadsz : 0));
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final RenderEvent event=RenderEvent.getRenderEvent(request);
    final Set items=event.getItems();
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=getRows().getChildren().iterator();
      while (it.hasNext()) {
        final Row row=(Row)it.next();
        if (items.contains(row))         break;
        if (!row.isLoaded())         toload.add(0,row);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Row row=(Row)it.next();
        if (!row.isLoaded() && items.add(row))         --cnt;
      }
    }
    renderItems(items);
  }
 else   super.service(request,everError);
}","/** 
 * Processes an AU request. <p>Default: in addition to what are handled by   {@link XulElement#service}, it also handles onSelect.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(""String_Node_Str"")) {
    Events.postEvent(DataLoadingEvent.getDataLoadingEvent(request,getPreloadSize()));
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final Map data=request.getData();
    _currentTop=AuRequests.getInt(data,""String_Node_Str"",0);
    _currentLeft=AuRequests.getInt(data,""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    _topPad=AuRequests.getInt(request.getData(),""String_Node_Str"",0);
  }
 else   if (cmd.equals(""String_Node_Str"")) {
    final String width=AuRequests.getInnerWidth(request);
    _innerWidth=width == null ? ""String_Node_Str"" : width;
  }
 else   if (cmd.equals(Events.ON_RENDER)) {
    final RenderEvent event=RenderEvent.getRenderEvent(request);
    final Set items=event.getItems();
    int cnt=items.size();
    if (cnt == 0)     return;
    cnt=20 - cnt;
    if (cnt > 0 && _preloadsz > 0) {
      if (cnt > _preloadsz)       cnt=_preloadsz;
      final List toload=new LinkedList();
      Iterator it=getRows().getChildren().iterator();
      while (it.hasNext()) {
        final Row row=(Row)it.next();
        if (items.contains(row))         break;
        if (!row.isLoaded())         toload.add(0,row);
      }
      if (!toload.isEmpty()) {
        int bfcnt=cnt / 3;
        for (Iterator e=toload.iterator(); bfcnt > 0 && e.hasNext(); --bfcnt, --cnt) {
          items.add(e.next());
        }
      }
      while (cnt > 0 && it.hasNext()) {
        final Row row=(Row)it.next();
        if (!row.isLoaded() && items.add(row))         --cnt;
      }
    }
    renderItems(items);
  }
 else   super.service(request,everError);
}"
16531,"/** 
 * Returns the number of visible descendant   {@link Row}.
 * @since 3.5.1
 */
public int getVisibleItemCount(){
  int count=getItemCount();
  int visibleCount=0;
  Row row=(Row)getNextSibling();
  while (count-- > 0) {
    if (row.isVisible())     visibleCount++;
    row=(Row)row.getNextSibling();
  }
  return visibleCount;
}","/** 
 * Returns the number of visible descendant   {@link Row}.
 * @since 3.5.1
 */
public int getVisibleItemCount(){
  int count=getItemCount();
  int visibleCount=0;
  Row row=(Row)getNextSibling();
  while (count-- > 0 && row != null) {
    if (row.isVisible())     visibleCount++;
    row=(Row)row.getNextSibling();
  }
  return visibleCount;
}"
16532,"/** 
 * Processes an AU request. <p>Default: in addition to what are handled by   {@link XulElement#service}, it also handles onOpen.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(Events.ON_OPEN)) {
    OpenEvent evt=OpenEvent.getOpenEvent(request);
    _open=evt.isOpen();
    final Rows rows=(Rows)getParent();
    if (rows != null)     rows.addVisibleItemCount(_open ? getVisibleItemCount() : -getVisibleItemCount());
    Events.postEvent(evt);
  }
 else   super.service(request,everError);
}","/** 
 * Processes an AU request. <p>Default: in addition to what are handled by   {@link XulElement#service}, it also handles onOpen.
 * @since 5.0.0
 */
public void service(org.zkoss.zk.au.AuRequest request,boolean everError){
  final String cmd=request.getCommand();
  if (cmd.equals(Events.ON_OPEN)) {
    OpenEvent evt=OpenEvent.getOpenEvent(request);
    _open=evt.isOpen();
    final Rows rows=(Rows)getParent();
    if (rows != null) {
      rows.addVisibleItemCount(_open ? getVisibleItemCount() : -getVisibleItemCount());
      final Grid grid=getGrid();
      if (grid != null) {
        final ListModel model=grid.getModel();
        if (model instanceof GroupsListModel) {
          ((GroupsListModel)model).getGroupsModel().setClose(rows.getGroupIndex(getIndex()),!_open);
        }
      }
    }
    Events.postEvent(evt);
  }
 else   super.service(request,everError);
}"
16533,"/** 
 * Returns the index of the specified row. The current implementation is stupid, so not public it yet.
 */
int getIndex(){
  int j=0;
  for (Iterator it=getParent().getChildren().iterator(); it.hasNext(); ++j) {
    if (it.next() == this)     break;
  }
  return j;
}","/** 
 * Returns the index of the specified row. The current implementation is stupid, so not public it yet.
 */
int getIndex(){
  int j=0;
  if (_index < 0) {
    for (Iterator it=getParent().getChildren().iterator(); it.hasNext(); ++j) {
      if (it.next() == this)       break;
    }
    final Grid grid=getGrid();
    final int offset=grid != null && grid.getModel() != null ? grid.getDataLoader().getOffset() : 0;
    j+=(offset < 0 ? 0 : offset);
  }
 else {
    j=_index;
  }
  return j;
}"
16534,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_align);
  render(renderer,""String_Node_Str"",_valign);
  render(renderer,""String_Node_Str"",_nowrap);
  render(renderer,""String_Node_Str"",_spans);
  render(renderer,""String_Node_Str"",_loaded);
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",_align);
  render(renderer,""String_Node_Str"",_valign);
  render(renderer,""String_Node_Str"",_nowrap);
  render(renderer,""String_Node_Str"",_spans);
  render(renderer,""String_Node_Str"",_loaded);
  if (_index >= 0)   renderer.render(""String_Node_Str"",_index);
}"
16535,"public Object getElementAt(int v){
  String value=""String_Node_Str"" + (_asc ? v : _size - v);
  return value;
}","public Object getElementAt(int v){
  String value=""String_Node_Str"" + (_asc ? v : _size - v - 1);
  return value;
}"
16536,"/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  if (jsel >= _items.size())   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ _items.size());
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1)) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    final Listitem item=getItemAtIndex(_jsel);
    item.setSelectedDirectly(true);
    _selItems.add(item);
    if (inSelectMold())     smartUpdate(""String_Node_Str"",Integer.toString(_jsel));
 else     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=0;
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}","/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  if (jsel >= _items.size())   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ _items.size());
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1)) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    final Listitem item=getItemAtIndex(_jsel);
    item.setSelectedDirectly(true);
    _selItems.add(item);
    if (inSelectMold()) {
      int i=0, j=0;
      for (Iterator it=getItems().iterator(); i < _jsel; i++)       if (!((Component)it.next()).isVisible())       j++;
      smartUpdate(""String_Node_Str"",_jsel - j);
    }
 else     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=0;
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}"
16537,"/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  if (jsel >= _items.size())   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ _items.size());
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1)) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    final Listitem item=getItemAtIndex(_jsel);
    item.setSelectedDirectly(true);
    _selItems.add(item);
    if (inSelectMold())     smartUpdate(""String_Node_Str"",_jsel);
 else     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=0;
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}","/** 
 * Deselects all of the currently selected items and selects the item with the given index.
 */
public void setSelectedIndex(int jsel){
  if (jsel >= _items.size())   throw new UiException(""String_Node_Str"" + jsel + ""String_Node_Str""+ _items.size());
  if (jsel < -1)   jsel=-1;
  if (jsel < 0) {
    clearSelection();
  }
 else   if (jsel != _jsel || (_multiple && _selItems.size() > 1)) {
    for (Iterator it=_selItems.iterator(); it.hasNext(); ) {
      final Listitem item=(Listitem)it.next();
      item.setSelectedDirectly(false);
    }
    _selItems.clear();
    _jsel=jsel;
    final Listitem item=getItemAtIndex(_jsel);
    item.setSelectedDirectly(true);
    _selItems.add(item);
    if (inSelectMold()) {
      int i=0, j=0;
      for (Iterator it=getItems().iterator(); i < _jsel; i++)       if (!((Component)it.next()).isVisible())       j++;
      smartUpdate(""String_Node_Str"",_jsel - j);
    }
 else     smartUpdate(""String_Node_Str"",item.getUuid());
  }
  if (_jsel >= 0 && inPagingMold()) {
    final Listitem item=getItemAtIndex(_jsel);
    int size=0;
    for (Iterator it=new VisibleChildrenIterator(true); it.hasNext(); size++)     if (item.equals(it.next()))     break;
    final int pg=size / getPageSize();
    if (pg != getActivePage())     setActivePage(pg);
  }
}"
16538,"private static final String outLangJavaScripts(Execution exec,WebApp wapp,String deviceType){
  final ServletRequest request=ServletFns.getCurrentRequest();
  if (WebManager.getRequestLocal(request,ATTR_LANG_JS_GENED) != null)   return ""String_Node_Str"";
  WebManager.setRequestLocal(request,ATTR_LANG_JS_GENED,Boolean.TRUE);
  final Desktop desktop=exec.getDesktop();
  if (wapp == null)   wapp=desktop.getWebApp();
  if (deviceType == null)   deviceType=desktop.getDeviceType();
  final Configuration config=wapp.getConfiguration();
  final StringBuffer sb=new StringBuffer(1536);
  final Set jses=new LinkedHashSet(32);
  for (Iterator it=LanguageDefinition.getByDeviceType(deviceType).iterator(); it.hasNext(); )   jses.addAll(((LanguageDefinition)it.next()).getJavaScripts());
  for (Iterator it=jses.iterator(); it.hasNext(); )   append(sb,(JavaScript)it.next());
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(wapp.getVersion()).append(""String_Node_Str"").append(wapp.getBuild()).append(""String_Node_Str"").append(config.getProcessingPromptDelay()).append(""String_Node_Str"").append(config.getTooltipDelay()).append(""String_Node_Str"").append(config.getResendDelay()).append(""String_Node_Str"").append(config.getClickFilterDelay()).append(""String_Node_Str"");
  Boolean autoTimeout=getAutomaticTimeout(desktop);
  final Device device=Devices.getDevice(deviceType);
  if (autoTimeout != null ? autoTimeout.booleanValue() : device.isAutomaticTimeout()) {
    int tmout=desktop.getSession().getMaxInactiveInterval();
    if (tmout > 0) {
      int extra=tmout / 8;
      tmout+=extra > 180 ? 180 : extra;
      sb.append(""String_Node_Str"").append(tmout).append(""String_Node_Str"");
    }
  }
  if (config.isDebugJS())   sb.append(""String_Node_Str"");
  if (config.isDisableBehindModalEnabled())   sb.append(""String_Node_Str"");
  if (config.isKeepDesktopAcrossVisits() || request.getAttribute(Attributes.NO_CACHE) == null)   sb.append(""String_Node_Str"");
  if (config.getPerformanceMeter() != null)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  final int[] cers=config.getClientErrorReloadCodes();
  boolean first=true;
  for (int j=0; j < cers.length; ++j) {
    final String uri=config.getClientErrorReload(cers[j]);
    if (uri != null) {
      if (first)       first=false;
 else       sb.append(',');
      sb.append(""String_Node_Str"").append(cers[j]).append(""String_Node_Str"").append(Strings.escape(uri,""String_Node_Str"")).append('\'');
    }
  }
  sb.append(""String_Node_Str"");
  for (Iterator it=LanguageDefinition.getByDeviceType(deviceType).iterator(); it.hasNext(); ) {
    final LanguageDefinition langdef=(LanguageDefinition)it.next();
    final Set mods=langdef.getJavaScriptModules().entrySet();
    if (!mods.isEmpty()) {
      for (Iterator e=mods.iterator(); e.hasNext(); ) {
        final Map.Entry me=(Map.Entry)e.next();
        sb.append(""String_Node_Str"").append(me.getKey()).append(""String_Node_Str"").append(me.getValue()).append(""String_Node_Str"");
      }
    }
  }
  sb.append(""String_Node_Str"");
  final String s=device.getEmbedded();
  if (s != null)   sb.append(s).append('\n');
  return sb.toString();
}","private static final String outLangJavaScripts(Execution exec,WebApp wapp,String deviceType){
  final ServletRequest request=ServletFns.getCurrentRequest();
  if (WebManager.getRequestLocal(request,ATTR_LANG_JS_GENED) != null)   return ""String_Node_Str"";
  WebManager.setRequestLocal(request,ATTR_LANG_JS_GENED,Boolean.TRUE);
  final Desktop desktop=exec.getDesktop();
  if (wapp == null)   wapp=desktop.getWebApp();
  if (deviceType == null)   deviceType=desktop.getDeviceType();
  final Configuration config=wapp.getConfiguration();
  final StringBuffer sb=new StringBuffer(1536);
  final Set jses=new LinkedHashSet(32);
  for (Iterator it=LanguageDefinition.getByDeviceType(deviceType).iterator(); it.hasNext(); )   jses.addAll(((LanguageDefinition)it.next()).getJavaScripts());
  for (Iterator it=jses.iterator(); it.hasNext(); )   append(sb,(JavaScript)it.next());
  sb.append(""String_Node_Str"").append(""String_Node_Str"").append(wapp.getVersion()).append(""String_Node_Str"").append(wapp.getBuild()).append(""String_Node_Str"").append(config.getProcessingPromptDelay()).append(""String_Node_Str"").append(config.getTooltipDelay()).append(""String_Node_Str"").append(config.getResendDelay()).append(""String_Node_Str"").append(config.getClickFilterDelay()).append(""String_Node_Str"");
  final Device device=Devices.getDevice(deviceType);
  if (desktop != null) {
    Boolean autoTimeout=getAutomaticTimeout(desktop);
    if (autoTimeout != null ? autoTimeout.booleanValue() : device.isAutomaticTimeout()) {
      int tmout=desktop.getSession().getMaxInactiveInterval();
      if (tmout > 0) {
        int extra=tmout / 8;
        tmout+=extra > 180 ? 180 : extra;
        sb.append(""String_Node_Str"").append(tmout).append(""String_Node_Str"");
      }
    }
  }
  if (config.isDebugJS())   sb.append(""String_Node_Str"");
  if (config.isDisableBehindModalEnabled())   sb.append(""String_Node_Str"");
  if (config.isKeepDesktopAcrossVisits() || request.getAttribute(Attributes.NO_CACHE) == null)   sb.append(""String_Node_Str"");
  if (config.getPerformanceMeter() != null)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  final int[] cers=config.getClientErrorReloadCodes();
  boolean first=true;
  for (int j=0; j < cers.length; ++j) {
    final String uri=config.getClientErrorReload(cers[j]);
    if (uri != null) {
      if (first)       first=false;
 else       sb.append(',');
      sb.append(""String_Node_Str"").append(cers[j]).append(""String_Node_Str"").append(Strings.escape(uri,""String_Node_Str"")).append('\'');
    }
  }
  sb.append(""String_Node_Str"");
  for (Iterator it=LanguageDefinition.getByDeviceType(deviceType).iterator(); it.hasNext(); ) {
    final LanguageDefinition langdef=(LanguageDefinition)it.next();
    final Set mods=langdef.getJavaScriptModules().entrySet();
    if (!mods.isEmpty()) {
      for (Iterator e=mods.iterator(); e.hasNext(); ) {
        final Map.Entry me=(Map.Entry)e.next();
        sb.append(""String_Node_Str"").append(me.getKey()).append(""String_Node_Str"").append(me.getValue()).append(""String_Node_Str"");
      }
    }
  }
  sb.append(""String_Node_Str"");
  final String s=device.getEmbedded();
  if (s != null)   sb.append(s).append('\n');
  return sb.toString();
}"
16539,"public Desktop getDesktopIfAny(String desktopId){
synchronized (_desktops) {
    return (Desktop)_desktops.get(desktopId);
  }
}","public Desktop getDesktopIfAny(String desktopId){
synchronized (_desktops) {
    final boolean old=_desktops.disableExpunge(true);
    try {
      return (Desktop)_desktops.get(desktopId);
    }
  finally {
      _desktops.disableExpunge(old);
    }
  }
}"
16540,"/** 
 * Invokes   {@link DesktopCtrl#sessionWillPassivate} for eachdesktops it cached.
 */
public void sessionWillPassivate(Session sess){
synchronized (_desktops) {
    for (Iterator it=_desktops.values().iterator(); it.hasNext(); )     ((DesktopCtrl)it.next()).sessionWillPassivate(sess);
  }
}","/** 
 * Invokes   {@link DesktopCtrl#sessionWillPassivate} for eachdesktops it cached.
 */
public void sessionWillPassivate(Session sess){
synchronized (_desktops) {
    final boolean old=_desktops.disableExpunge(true);
    try {
      for (Iterator it=_desktops.values().iterator(); it.hasNext(); )       ((DesktopCtrl)it.next()).sessionWillPassivate(sess);
    }
  finally {
      _desktops.disableExpunge(old);
    }
  }
}"
16541,"public void stop(){
synchronized (_desktops) {
    if (log.debugable())     log.debug(""String_Node_Str"" + _desktops);
    for (Iterator it=new ArrayList(_desktops.values()).iterator(); it.hasNext(); ) {
      desktopDestroyed((Desktop)it.next());
    }
    _desktops.clear();
  }
}","public void stop(){
synchronized (_desktops) {
    if (log.debugable())     log.debug(""String_Node_Str"" + _desktops);
    final boolean old=_desktops.disableExpunge(true);
    try {
      for (Iterator it=new ArrayList(_desktops.values()).iterator(); it.hasNext(); ) {
        desktopDestroyed((Desktop)it.next());
      }
      _desktops.clear();
    }
  finally {
      _desktops.disableExpunge(old);
    }
  }
}"
16542,"protected boolean shallExpunge(){
  return super.shallExpunge() || sizeWithoutExpunge() > (getMaxSize() << 2);
}","protected boolean shallExpunge(){
  return !_expungeDisabled && (super.shallExpunge() || sizeWithoutExpunge() > (getMaxSize() << 2));
}"
16543,"/** 
 * Invokes   {@link DesktopCtrl#sessionDidActivate} for eachdesktops it cached.
 */
public void sessionDidActivate(Session sess){
synchronized (_desktops) {
    for (Iterator it=_desktops.values().iterator(); it.hasNext(); )     ((DesktopCtrl)it.next()).sessionDidActivate(sess);
  }
}","/** 
 * Invokes   {@link DesktopCtrl#sessionDidActivate} for eachdesktops it cached.
 */
public void sessionDidActivate(Session sess){
synchronized (_desktops) {
    final boolean old=_desktops.disableExpunge(true);
    try {
      for (Iterator it=_desktops.values().iterator(); it.hasNext(); )       ((DesktopCtrl)it.next()).sessionDidActivate(sess);
    }
  finally {
      _desktops.disableExpunge(old);
    }
  }
}"
16544,"void setBeanAndRegisterBeanSameNodes(Component comp,Object val,Binding binding,String path,boolean autoConvert,Object rawval,List loadOnSaveInfos){
  Object orgVal=null;
  Object bean=null;
  BindingNode currentNode=_pathTree;
  boolean refChanged=false;
  String beanid=null;
  final List nodeids=parseExpression(path,""String_Node_Str"");
  final List nodes=new ArrayList(nodeids.size());
  final Iterator it=nodeids.iterator();
  if (it != null && it.hasNext()) {
    beanid=(String)it.next();
    currentNode=(BindingNode)currentNode.getKidNode(beanid);
    if (currentNode == null) {
      throw new UiException(""String_Node_Str"" + path);
    }
    nodes.add(currentNode);
    bean=lookupBean(comp,beanid);
  }
 else {
    throw new UiException(""String_Node_Str"" + path);
  }
  if (!it.hasNext()) {
    orgVal=bean;
    if (Objects.equals(orgVal,val)) {
      return;
    }
    if (existsBean(beanid)) {
      setBean(beanid,val);
    }
 else     if (!setZScriptVariable(comp,beanid,val)) {
      comp.setAttribute(beanid,val,true);
    }
    refChanged=true;
  }
 else {
    if (bean == null) {
      return;
    }
    int sz=nodeids.size() - 2;
    for (; bean != null && it.hasNext() && sz > 0; --sz) {
      beanid=(String)it.next();
      currentNode=(BindingNode)currentNode.getKidNode(beanid);
      if (currentNode == null) {
        throw new UiException(""String_Node_Str"" + path);
      }
      nodes.add(currentNode);
      try {
        bean=Fields.get(bean,beanid);
      }
 catch (      NoSuchMethodException ex) {
        if (bean instanceof Map) {
          bean=((Map)bean).get(beanid);
        }
 else {
          throw UiException.Aide.wrap(ex);
        }
      }
    }
    if (bean == null) {
      return;
    }
    beanid=(String)it.next();
    try {
      orgVal=Fields.get(bean,beanid);
      if (Objects.equals(orgVal,val)) {
        return;
      }
      Fields.set(bean,beanid,val,autoConvert);
    }
 catch (    NoSuchMethodException ex) {
      if (bean instanceof Map) {
        ((Map)bean).put(beanid,val);
      }
 else {
        throw UiException.Aide.wrap(ex);
      }
    }
catch (    ModificationException ex) {
      throw UiException.Aide.wrap(ex);
    }
    if (!isPrimitive(val) && !isPrimitive(orgVal)) {
      currentNode=(BindingNode)currentNode.getKidNode(beanid);
      if (currentNode == null) {
        throw new UiException(""String_Node_Str"" + path);
      }
      nodes.add(currentNode);
      bean=orgVal;
      refChanged=true;
    }
  }
  if (val != null) {
    if (refChanged && !binding.isLoadable() && binding.isSavable()) {
      registerBeanNode(val,currentNode);
    }
    if (rawval instanceof Component) {
      Binding varbinding=getBinding((Component)rawval,""String_Node_Str"");
      if (varbinding != null) {
        registerBeanNode(val,currentNode);
        getBeanAndRegisterBeanSameNodes((Component)rawval,varbinding.getExpression());
      }
    }
  }
  if (!comp.isListenerAvailable(""String_Node_Str"",true)) {
    comp.addEventListener(""String_Node_Str"",_listener);
  }
  Object[] loadOnSaveInfo=new Object[]{this,currentNode,binding,(refChanged ? val : bean),Boolean.valueOf(refChanged),nodes,comp};
  if (loadOnSaveInfos != null) {
    loadOnSaveInfos.add(loadOnSaveInfo);
  }
 else {
    Events.postEvent(new Event(""String_Node_Str"",comp,loadOnSaveInfo));
  }
}","void setBeanAndRegisterBeanSameNodes(Component comp,Object val,Binding binding,String path,boolean autoConvert,Object rawval,List loadOnSaveInfos){
  Object orgVal=null;
  Object bean=null;
  BindingNode currentNode=_pathTree;
  boolean refChanged=false;
  String beanid=null;
  final List nodeids=parseExpression(path,""String_Node_Str"");
  final List nodes=new ArrayList(nodeids.size());
  final Iterator it=nodeids.iterator();
  if (it != null && it.hasNext()) {
    beanid=(String)it.next();
    currentNode=(BindingNode)currentNode.getKidNode(beanid);
    if (currentNode == null) {
      throw new UiException(""String_Node_Str"" + path);
    }
    nodes.add(currentNode);
    bean=lookupBean(comp,beanid);
  }
 else {
    throw new UiException(""String_Node_Str"" + path);
  }
  if (!it.hasNext()) {
    orgVal=bean;
    if (Objects.equals(orgVal,val)) {
      return;
    }
    if (existsBean(beanid)) {
      setBean(beanid,val);
    }
 else     if (!setZScriptVariable(comp,beanid,val)) {
      final Object owner=comp.getSpaceOwner();
      if (owner instanceof Page) {
        ((Page)owner).setAttribute(beanid,val);
      }
 else {
        ((Component)owner).setAttribute(beanid,val,true);
      }
    }
    refChanged=true;
  }
 else {
    if (bean == null) {
      return;
    }
    int sz=nodeids.size() - 2;
    for (; bean != null && it.hasNext() && sz > 0; --sz) {
      beanid=(String)it.next();
      currentNode=(BindingNode)currentNode.getKidNode(beanid);
      if (currentNode == null) {
        throw new UiException(""String_Node_Str"" + path);
      }
      nodes.add(currentNode);
      try {
        bean=Fields.get(bean,beanid);
      }
 catch (      NoSuchMethodException ex) {
        if (bean instanceof Map) {
          bean=((Map)bean).get(beanid);
        }
 else {
          throw UiException.Aide.wrap(ex);
        }
      }
    }
    if (bean == null) {
      return;
    }
    beanid=(String)it.next();
    try {
      orgVal=Fields.get(bean,beanid);
      if (Objects.equals(orgVal,val)) {
        return;
      }
      Fields.set(bean,beanid,val,autoConvert);
    }
 catch (    NoSuchMethodException ex) {
      if (bean instanceof Map) {
        ((Map)bean).put(beanid,val);
      }
 else {
        throw UiException.Aide.wrap(ex);
      }
    }
catch (    ModificationException ex) {
      throw UiException.Aide.wrap(ex);
    }
    if (!isPrimitive(val) && !isPrimitive(orgVal)) {
      currentNode=(BindingNode)currentNode.getKidNode(beanid);
      if (currentNode == null) {
        throw new UiException(""String_Node_Str"" + path);
      }
      nodes.add(currentNode);
      bean=orgVal;
      refChanged=true;
    }
  }
  if (val != null) {
    if (refChanged && !binding.isLoadable() && binding.isSavable()) {
      registerBeanNode(val,currentNode);
    }
    if (rawval instanceof Component) {
      Binding varbinding=getBinding((Component)rawval,""String_Node_Str"");
      if (varbinding != null) {
        registerBeanNode(val,currentNode);
        getBeanAndRegisterBeanSameNodes((Component)rawval,varbinding.getExpression());
      }
    }
  }
  if (!comp.isListenerAvailable(""String_Node_Str"",true)) {
    comp.addEventListener(""String_Node_Str"",_listener);
  }
  Object[] loadOnSaveInfo=new Object[]{this,currentNode,binding,(refChanged ? val : bean),Boolean.valueOf(refChanged),nodes,comp};
  if (loadOnSaveInfos != null) {
    loadOnSaveInfos.add(loadOnSaveInfo);
  }
 else {
    Events.postEvent(new Event(""String_Node_Str"",comp,loadOnSaveInfo));
  }
}"
16545,"private void setupStatus(){
  final Scope scope=_comp != null ? (Scope)_comp : _page;
  _oldEach=scope.getAttribute(""String_Node_Str"",true);
  _status=new Status(scope.getAttribute(""String_Node_Str"",true));
  scope.setAttribute(""String_Node_Str"",_status);
}","private void setupStatus(){
  final Scope scope=getScope();
  _oldEach=scope.getAttribute(""String_Node_Str"",false);
  _status=new Status(scope.getAttribute(""String_Node_Str"",false));
  scope.setAttribute(""String_Node_Str"",_status);
}"
16546,"private void restoreStatus(){
  final Scope scope=_comp != null ? (Scope)_comp : _page;
  if (_status.previous != null)   scope.setAttribute(""String_Node_Str"",_status.previous);
 else   scope.removeAttribute(""String_Node_Str"");
  if (_oldEach != null)   scope.setAttribute(""String_Node_Str"",_oldEach);
 else   scope.removeAttribute(""String_Node_Str"");
  _it=null;
  _status=null;
}","private void restoreStatus(){
  final Scope scope=getScope();
  if (_status.previous != null)   scope.setAttribute(""String_Node_Str"",_status.previous);
 else   scope.removeAttribute(""String_Node_Str"");
  if (_oldEach != null)   scope.setAttribute(""String_Node_Str"",_oldEach);
 else   scope.removeAttribute(""String_Node_Str"");
  _it=null;
  _status=null;
}"
16547,"/** 
 * A forward event is used for component level only.
 * @since 5.0.0
 */
public void onSend(ForwardEvent evt){
  _result.push(((UploadEvent)evt.getOrigin()).getMedia());
}","/** 
 * A forward event is used for component level only.
 * @since 5.0.0
 */
public void onSend(ForwardEvent evt){
  _result.add(((UploadEvent)evt.getOrigin()).getMedia());
}"
16548,"public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    final boolean isReorder=newChild.getParent() == this;
    if (newChild instanceof Listgroupfoot) {
      if (refChild == null) {
        if (isReorder) {
          final int idx=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(idx);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - (isReorder ? 2 : 1))).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
 else       if (refChild.getPreviousSibling() instanceof Listitem) {
        final int idx=((Listitem)refChild.getPreviousSibling()).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx + 1 != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelUuid());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelUuid());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelUuid());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int leng=lg.getIndex() - prev[0], size=prev[1] - leng + 1, index=lg.getIndex();
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
            if (size > 1)             prev[2]=-1;
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        int index=newItem.getIndex();
        final int[] g=getGroupsInfoAt(index);
        if (g != null) {
          g[1]++;
          if (g[2] != -1 && g[2] > index)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
  }
 else   if (newChild instanceof Listhead) {
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      _listhead=(Listhead)newChild;
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Frozen) {
    refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _frozen=(Frozen)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Listfoot) {
    if (_frozen != null)     refChild=_frozen;
 else     refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _listfoot=(Listfoot)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Paging) {
    refChild=null;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _pgi=_paging=(Paging)newChild;
      return true;
    }
  }
 else {
    return super.insertBefore(newChild,refChild);
  }
  return false;
}","public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    final boolean isReorder=newChild.getParent() == this;
    if (newChild instanceof Listgroupfoot) {
      if (refChild == null) {
        if (isReorder) {
          final int idx=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(idx);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - (isReorder ? 2 : 1))).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
 else       if (refChild.getPreviousSibling() instanceof Listitem) {
        final int idx=((Listitem)refChild.getPreviousSibling()).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx + 1 != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx;
        if (isReorder) {
          final int nindex=((Listgroupfoot)newChild).getIndex();
          final int[] ginfo=getGroupsInfoAt(nindex);
          if (ginfo != null) {
            ginfo[1]--;
            ginfo[2]=-1;
          }
        }
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,!isReorder);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelUuid());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelUuid());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelUuid());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int index=lg.getIndex(), leng=index - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{index,size,size > 1 && prev[2] > index ? prev[2] : -1});
            if (size > 1 && prev[2] > index)             prev[2]=-1;
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        int index=newItem.getIndex();
        final int[] g=getGroupsInfoAt(index);
        if (g != null) {
          g[1]++;
          if (g[2] != -1 && g[2] > index)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
  }
 else   if (newChild instanceof Listhead) {
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      _listhead=(Listhead)newChild;
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
  }
 else   if (newChild instanceof Frozen) {
    refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _frozen=(Frozen)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Listfoot) {
    if (_frozen != null)     refChild=_frozen;
 else     refChild=_paging;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _listfoot=(Listfoot)newChild;
      return true;
    }
  }
 else   if (newChild instanceof Paging) {
    refChild=null;
    if (super.insertBefore(newChild,refChild)) {
      invalidate();
      _pgi=_paging=(Paging)newChild;
      return true;
    }
  }
 else {
    return super.insertBefore(newChild,refChild);
  }
  return false;
}"
16549,"/** 
 * Converts an AU request to an error event.
 * @since 5.0.0
 */
public static final ErrorEvent getErrorEvent(AuRequest request){
  final Component comp=request.getComponent();
  if (comp == null)   throw new UiException(MZk.ILLEGAL_REQUEST_COMPONENT_REQUIRED,request);
  final Map data=request.getData();
  if (data == null)   throw new UiException(MZk.ILLEGAL_REQUEST_WRONG_DATA,new Object[]{data,request});
  return new ErrorEvent(request.getCommand(),comp,(String)data.get(""String_Node_Str""),(String)data.get(""String_Node_Str""));
}","/** 
 * Converts an AU request to an error event.
 * @since 5.0.0
 */
public static final ErrorEvent getErrorEvent(AuRequest request){
  final Component comp=request.getComponent();
  if (comp == null)   throw new UiException(MZk.ILLEGAL_REQUEST_COMPONENT_REQUIRED,request);
  final Map data=request.getData();
  if (data == null)   throw new UiException(MZk.ILLEGAL_REQUEST_WRONG_DATA,new Object[]{data,request});
  return new ErrorEvent(request.getCommand(),comp,String.valueOf(data.get(""String_Node_Str"")),String.valueOf(data.get(""String_Node_Str"")));
}"
16550,"/** 
 * Remove the DialModelScale of the specified index.
 * @param index
 */
public void removeScale(DialModelScale entry){
  _series.remove(entry);
  fireEvent(ChartDataEvent.REMOVED,null,null);
}","/** 
 * Remove the specified DialModelScale from this DialModel.
 * @param scale
 */
public void removeScale(DialModelScale scale){
  _series.remove(scale);
  fireEvent(ChartDataEvent.REMOVED,null,null);
}"
16551,"/** 
 * Get value of the specified index.
 * @param series the series
 * @param category the category.
 */
public double getValue(int index){
  return getScale(index).getValue();
}","/** 
 * Get value of the scale per the specified index.
 * @param index the scale index.
 */
public double getValue(int index){
  return getScale(index).getValue();
}"
16552,"/** 
 * Sets the radius percentage(0 ~ 1) of the meter's cap; default to 0.07.
 * @return the radius percentage(0 ~ 1) of the meter's cap.
 */
public void setCapRadius(double radius){
  _capRadius=radius;
}","/** 
 * Sets the radius percentage(0 ~ 1) of the meter's cap; default to 0.07.
 * @param radius the radius percentage(0 ~ 1) of the meter's cap.
 */
public void setCapRadius(double radius){
  _capRadius=radius;
}"
16553,"/** 
 * add or update the value of a specified index.
 * @param index the index of the Scale
 * @param value the value
 */
public void setValue(int index,double value){
  getScale(index).setValue(value);
}","/** 
 * add or update the value of a specified scale index.
 * @param index the index of the Scale
 * @param value the value
 */
public void setValue(int index,double value){
  getScale(index).setValue(value);
}"
16554,"/** 
 * Sets the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 * @param the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 */
public void setOuterRadius(double radius){
  _outerRadius=radius;
}","/** 
 * Sets the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 * @param radius the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 */
public void setOuterRadius(double radius){
  _outerRadius=radius;
}"
16555,"/** 
 * Sets the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 * @param the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 */
public void setInnerRadius(double radius){
  _innerRadius=radius;
}","/** 
 * Sets the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 * @param radius the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 */
public void setInnerRadius(double radius){
  _innerRadius=radius;
}"
16556,"/** 
 * Sets the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 * @return the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 */
public void setNeedleRadius(double radius){
  if (_needleRadius != radius) {
    _needleRadius=radius;
    fireEvent(ChartDataEvent.CHANGED);
  }
}","/** 
 * Sets the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 * @param radius the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 */
public void setNeedleRadius(double radius){
  if (_needleRadius != radius) {
    _needleRadius=radius;
    fireEvent(ChartDataEvent.CHANGED);
  }
}"
16557,"/** 
 * Sets the needle type of this scale (""pointer"" or ""pin"")
 * @param the needle type of this scale (""pointer"" or ""pin"")
 */
public void setNeedleType(String type){
  if (_needleType != type) {
    _needleType=type;
    fireEvent(ChartDataEvent.CHANGED);
  }
}","/** 
 * Sets the needle type of this scale (""pointer"" or ""pin"")
 * @param type the needle type of this scale (""pointer"" or ""pin"")
 */
public void setNeedleType(String type){
  if (_needleType != type) {
    _needleType=type;
    fireEvent(ChartDataEvent.CHANGED);
  }
}"
16558,"/** 
 * returns the number of minor ticks between major tick.
 * @return
 */
public int getMinorTickCount(){
  return _minorTickCount;
}","/** 
 * returns the number of minor ticks between major tick.
 * @return the number of minor ticks between major tick.
 */
public int getMinorTickCount(){
  return _minorTickCount;
}"
16559,"/** 
 * Remove the DialModelScale of the specified index.
 * @param index
 */
public void removeScale(DialModelScale entry){
  _series.remove(entry);
  fireEvent(ChartDataEvent.REMOVED,null,null);
}","/** 
 * Remove the specified DialModelScale from this DialModel.
 * @param scale
 */
public void removeScale(DialModelScale scale){
  _series.remove(scale);
  fireEvent(ChartDataEvent.REMOVED,null,null);
}"
16560,"/** 
 * Get value of the specified index.
 * @param series the series
 * @param category the category.
 */
public double getValue(int index){
  return getScale(index).getValue();
}","/** 
 * Get value of the scale per the specified index.
 * @param index the scale index.
 */
public double getValue(int index){
  return getScale(index).getValue();
}"
16561,"/** 
 * Sets the radius percentage(0 ~ 1) of the meter's cap; default to 0.07.
 * @return the radius percentage(0 ~ 1) of the meter's cap.
 */
public void setCapRadius(double radius){
  _capRadius=radius;
}","/** 
 * Sets the radius percentage(0 ~ 1) of the meter's cap; default to 0.07.
 * @param radius the radius percentage(0 ~ 1) of the meter's cap.
 */
public void setCapRadius(double radius){
  _capRadius=radius;
}"
16562,"/** 
 * add or update the value of a specified index.
 * @param index the index of the Scale
 * @param value the value
 */
public void setValue(int index,double value){
  getScale(index).setValue(value);
}","/** 
 * add or update the value of a specified scale index.
 * @param index the index of the Scale
 * @param value the value
 */
public void setValue(int index,double value){
  getScale(index).setValue(value);
}"
16563,"/** 
 * Sets the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 * @param the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 */
public void setOuterRadius(double radius){
  _outerRadius=radius;
}","/** 
 * Sets the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 * @param radius the outer radius percentage(0 ~ 1) of the dial range; default to 0.8.
 */
public void setOuterRadius(double radius){
  _outerRadius=radius;
}"
16564,"/** 
 * Sets the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 * @param the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 */
public void setInnerRadius(double radius){
  _innerRadius=radius;
}","/** 
 * Sets the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 * @param radius the inner radius percentage(0 ~ 1) of the dial range; default to 0.7.
 */
public void setInnerRadius(double radius){
  _innerRadius=radius;
}"
16565,"/** 
 * Sets the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 * @return the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 */
public void setNeedleRadius(double radius){
  if (_needleRadius != radius) {
    _needleRadius=radius;
    fireEvent(ChartDataEvent.CHANGED);
  }
}","/** 
 * Sets the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 * @param radius the radius percentage(0 ~ 1) of the scale's needle; default to 0.9.
 */
public void setNeedleRadius(double radius){
  if (_needleRadius != radius) {
    _needleRadius=radius;
    fireEvent(ChartDataEvent.CHANGED);
  }
}"
16566,"/** 
 * Sets the needle type of this scale (""pointer"" or ""pin"")
 * @param the needle type of this scale (""pointer"" or ""pin"")
 */
public void setNeedleType(String type){
  if (_needleType != type) {
    _needleType=type;
    fireEvent(ChartDataEvent.CHANGED);
  }
}","/** 
 * Sets the needle type of this scale (""pointer"" or ""pin"")
 * @param type the needle type of this scale (""pointer"" or ""pin"")
 */
public void setNeedleType(String type){
  if (_needleType != type) {
    _needleType=type;
    fireEvent(ChartDataEvent.CHANGED);
  }
}"
16567,"/** 
 * returns the number of minor ticks between major tick.
 * @return
 */
public int getMinorTickCount(){
  return _minorTickCount;
}","/** 
 * returns the number of minor ticks between major tick.
 * @return the number of minor ticks between major tick.
 */
public int getMinorTickCount(){
  return _minorTickCount;
}"
16568,"protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",isSelected());
  render(renderer,""String_Node_Str"",isDisabled());
  if (!isCheckable())   renderer.render(""String_Node_Str"",false);
}","protected void renderProperties(org.zkoss.zk.ui.sys.ContentRenderer renderer) throws java.io.IOException {
  super.renderProperties(renderer);
  render(renderer,""String_Node_Str"",isSelected());
  render(renderer,""String_Node_Str"",isDisabled());
  render(renderer,""String_Node_Str"",_loaded);
  if (!isCheckable())   renderer.render(""String_Node_Str"",false);
}"
16569,"private Listitem getVisibleRow(Listitem item){
  if (item instanceof Listgroup) {
    final Listgroup g=(Listgroup)item;
    if (!g.isOpen()) {
      for (int j=0, len=g.getItemCount(); j < len && _it.hasNext(); j++)       _it.next();
    }
  }
  while (!item.isVisible())   item=(Listitem)_it.next();
  return item;
}","private Listitem getVisibleRow(Listitem item){
  if (item instanceof Listgroup) {
    final Listgroup g=(Listgroup)item;
    if (!g.isOpen()) {
      for (int j=0, len=g.getItemCount(); j < len && _it.hasNext(); j++)       _it.next();
    }
  }
  while (!item.isVisible() && _it.hasNext())   item=(Listitem)_it.next();
  return item;
}"
16570,"private Row getVisibleRow(Row row){
  if (row instanceof Group) {
    final Group g=(Group)row;
    if (!g.isOpen()) {
      for (int j=0, len=g.getItemCount(); j < len && _it.hasNext(); j++)       _it.next();
    }
  }
  while (!row.isVisible())   row=(Row)_it.next();
  return row;
}","private Row getVisibleRow(Row row){
  if (row instanceof Group) {
    final Group g=(Group)row;
    if (!g.isOpen()) {
      for (int j=0, len=g.getItemCount(); j < len && _it.hasNext(); j++)       _it.next();
    }
  }
  while (!row.isVisible() && _it.hasNext())   row=(Row)_it.next();
  return row;
}"
16571,"public boolean setVisible(boolean visible){
  if (isVisible() != visible && _treerow != null)   _treerow.smartUpdate(""String_Node_Str"",visible);
  int count=isOpen() && _treechildren != null ? _treechildren.getVisibleItemCount() + 1 : 1;
  boolean result=super.setVisible(visible);
  if (isVisible()) {
    addVisibleItemCount(count,false);
  }
 else {
    addVisibleItemCount(-count,true);
  }
  return result;
}","public boolean setVisible(boolean visible){
  if (isVisible() != visible) {
    if (isVisible() != visible && _treerow != null)     _treerow.smartUpdate(""String_Node_Str"",visible);
    int count=isOpen() && _treechildren != null ? _treechildren.getVisibleItemCount() + 1 : 1;
    boolean result=super.setVisible(visible);
    if (isVisible()) {
      addVisibleItemCount(count,false);
    }
 else {
      addVisibleItemCount(-count,true);
    }
    return result;
  }
  return visible;
}"
16572,"/** 
 * @deprecated As of release 5.0.0, use {@link #escape(StringBuffer,CharSequence,String)}instead.
 */
public static final StringBuffer appendEscape(StringBuffer sb,String s,String specials){
  return escape(sb,(CharSequence)s,specials);
}","/** 
 * @deprecated As of release 5.0.0, use {@link #escape(StringBuffer,CharSequence,String)}instead.
 */
public static final StringBuffer appendEscape(StringBuffer sb,String src,String specials){
  return escape(sb,(CharSequence)src,specials);
}"
16573,"/** 
 * Escapes (aka. quote) the special characters with backslash and appends it the specified string buffer.
 * @param dst the destination buffer to append to.
 * @param src the source to escape from.
 * @since 5.0.0
 */
public static final StringBuffer escape(StringBuffer dst,CharSequence src,String specials){
  if (src == null)   return dst;
  for (int j=0, len=src.length(); ; ) {
    int k=j;
    for (; k < len && specials.indexOf(src.charAt(k)) < 0; ++k)     ;
    if (k >= len)     return dst.append(src.subSequence(j,src.length()));
    char cc=src.charAt(k);
switch (cc) {
case '\n':
      cc='n';
    break;
case '\t':
  cc='t';
break;
case '\r':
cc='r';
break;
case '\f':
cc='f';
break;
}
dst.append(src.subSequence(j,k)).append('\\').append(cc);
j=k + 1;
}
}","/** 
 * Escapes (aka. quote) the special characters with backslash and appends it the specified string buffer.
 * @param dst the destination buffer to append to.
 * @param src the source to escape from.
 * @param specials a string of characters that shall be escaped/quotedTo escape a string in JavaScript code snippet, you can use  {@link #ESCAPE_JAVASCRIPT}.
 * @since 5.0.0
 */
public static final StringBuffer escape(StringBuffer dst,CharSequence src,String specials){
  if (src == null)   return dst;
  for (int j=0, j2=0, len=src.length(); ; ) {
    int k=j2;
    for (; k < len && specials.indexOf(src.charAt(k)) < 0; ++k)     ;
    if (k >= len)     return dst.append(src.subSequence(j,src.length()));
    char cc=src.charAt(k);
switch (cc) {
case '\n':
      cc='n';
    break;
case '\t':
  cc='t';
break;
case '\r':
cc='r';
break;
case '\f':
cc='f';
break;
case '/':
if (specials == ESCAPE_JAVASCRIPT && (k <= 0 || src.charAt(k - 1) != '<' || k + 8 > len || !""String_Node_Str"".equalsIgnoreCase(src.subSequence(k + 1,k + 8).toString()))) {
j2=k + 1;
continue;
}
}
dst.append(src.subSequence(j,k)).append('\\').append(cc);
j2=j=k + 1;
}
}"
16574,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Flash self=(Flash)comp;
  final String uuid=self.getUuid();
  final String encsrc=self.getEncodedSrc();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getWidth()).write(""String_Node_Str"").write(self.getHeight()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(encsrc).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(self.getWmode()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(encsrc).write(""String_Node_Str"").write(self.getWmode()).write(""String_Node_Str"");
  wh.write(self.getWidth()).write(""String_Node_Str"").write(self.getHeight()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Flash self=(Flash)comp;
  final String uuid=self.getUuid();
  final String encsrc=self.getEncodedSrc(), bgcolor=self.getBgcolor();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getWidth()).write(""String_Node_Str"").write(self.getHeight()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(encsrc).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(self.getWmode()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(self.isAutoplay()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(self.isLoop()).write(""String_Node_Str"");
  if (bgcolor != null && bgcolor.length() > 0)   wh.write(""String_Node_Str"").write(bgcolor).write(""String_Node_Str"");
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(encsrc).write(""String_Node_Str"").write(self.getWmode()).write(""String_Node_Str"").write(self.isAutoplay()).write(""String_Node_Str"").write(self.isLoop()).write('""');
  if (bgcolor != null && bgcolor.length() > 0)   wh.write(""String_Node_Str"").write(bgcolor).write('""');
  wh.write(""String_Node_Str"").write(self.getWidth()).write(""String_Node_Str"").write(self.getHeight()).write(""String_Node_Str"");
  wh.write(""String_Node_Str"");
}"
16575,"private void injectByName(Object arg,String fdname){
  final String mdname=Classes.toMethodName(fdname,""String_Node_Str"");
  final Class parmcls=arg.getClass();
  final Class tgtcls=_controller.getClass();
  try {
    final Method md=Classes.getCloseMethod(tgtcls,mdname,new Class[]{parmcls});
    if (!injectByMethod(md,parmcls,parmcls,arg,fdname)) {
      injectFieldByName(arg,tgtcls,parmcls,fdname);
    }
  }
 catch (  NoSuchMethodException ex) {
    injectFieldByName(arg,tgtcls,parmcls,fdname);
  }
catch (  Exception ex) {
    throw UiException.Aide.wrap(ex);
  }
}","private void injectByName(Object arg,String fdname){
  if (arg != null) {
    final String mdname=Classes.toMethodName(fdname,""String_Node_Str"");
    final Class parmcls=arg.getClass();
    final Class tgtcls=_controller.getClass();
    try {
      final Method md=Classes.getCloseMethod(tgtcls,mdname,new Class[]{parmcls});
      if (!injectByMethod(md,parmcls,parmcls,arg,fdname)) {
        injectFieldByName(arg,tgtcls,parmcls,fdname);
      }
    }
 catch (    NoSuchMethodException ex) {
      injectFieldByName(arg,tgtcls,parmcls,fdname);
    }
catch (    Exception ex) {
      throw UiException.Aide.wrap(ex);
    }
  }
}"
16576,"/** 
 * Returns whether the given id is an implicit ZK object id.
 * @param id Component id
 * @return whether the given name is a implicit object.
 * @since 3.5.2
 */
public static boolean isImplicit(String id){
  return IMPLICIT_NAMES.contains(id);
}","/** 
 * Returns whether the given id is an implicit ZK object id.
 * @param id Component id
 * @return whether the given name is a implicit object.
 * @since 3.5.2
 */
public static boolean isImplicit(String id){
  return ""String_Node_Str"".equals(id) || IMPLICIT_NAMES.contains(id);
}"
16577,"/** 
 * Search _ns instead. 
 */
protected Object getFromNamespace(String name){
  Object v=_ns.getVariable(name,true);
  return v != null || _ns.containsVariable(name,true) ? v : UNDEFINED;
}","/** 
 * Search _ns instead. 
 */
protected Object getFromNamespace(String name){
  Object v=_ns.getVariable(name,true);
  return v != null || _ns.containsVariable(name,true) ? v : getImplicit(name);
}"
16578,"private Object getImplicit(String name){
  if (""String_Node_Str"".equals(name)) {
    final Execution exec=Executions.getCurrent();
    if (exec != null)     return exec;
  }
  return UNDEFINED;
}","/** 
 * Returns the value of the implict variables. It is called by   {@link #getFromNamespace}, so you don't need to invoke this method if you invoke   {@link #getFromNameSpace}. However, you have to invoke this method as the last step, if you implement your own getFromNamespace from scratch.
 * @since 3.6.0
 */
protected static Object getImplicit(String name){
  if (""String_Node_Str"".equals(name)) {
    final Execution exec=Executions.getCurrent();
    if (exec != null)     return exec;
  }
  return UNDEFINED;
}"
16579,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle();
  final boolean isFrame=!self.inEmbedded() && !self.inPopup();
  final String noBorder=!""String_Node_Str"".equals(self.getBorder()) ? ""String_Node_Str"" : ""String_Node_Str"";
  if (caption != null || title.length() > 0) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (caption == null) {
      if (self.isClosable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.isMaximizable()) {
        wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
        if (self.isMaximized())         wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
        wh.write(""String_Node_Str"");
      }
      if (self.isMinimizable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      new Out(title).render(out);
    }
 else {
      wh.write(caption);
    }
    wh.write(""String_Node_Str"");
  }
 else   if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
  }
  if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"");
  }
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getContentSclass()).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder);
  wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getContentStyle());
  wh.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     wh.write(child);
  }
  wh.write(""String_Node_Str"");
  if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"");
  }
  wh.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle();
  final boolean isFrame=!self.inEmbedded() && !self.inPopup();
  final String noBorder=!""String_Node_Str"".equals(self.getBorder()) ? ""String_Node_Str"" : ""String_Node_Str"";
  if (caption != null || title.length() > 0) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (caption == null) {
      if (self.isClosable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.isMaximizable()) {
        wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
        if (self.isMaximized())         wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
        wh.write(""String_Node_Str"");
      }
      if (self.isMinimizable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      new Out(title).render(out);
    }
 else {
      wh.write(caption);
    }
    wh.write(""String_Node_Str"");
  }
 else   if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"");
  }
  if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"");
  }
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getContentSclass()).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder);
  wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getContentStyle());
  wh.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     wh.write(child);
  }
  wh.write(""String_Node_Str"");
  if (isFrame) {
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(noBorder).write(""String_Node_Str"");
  }
  wh.write(""String_Node_Str"");
}"
16580,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menu self=(Menu)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    final String imagesrc=self.getEncodedImageURL();
    if (imagesrc != null)     wh.write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    wh.write('>');
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).write(""String_Node_Str"").write(zcls).writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menu self=(Menu)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    final String imagesrc=self.getEncodedImageURL();
    if (imagesrc != null)     wh.write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    wh.write('>');
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).write(""String_Node_Str"").write(zcls).writeln(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
}"
16581,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menuitem self=(Menuitem)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    final String imagesrc=self.getEncodedImageURL();
    if (imagesrc != null)     wh.write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    wh.write('>');
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    if (!self.isImageAssigned() && self.isCheckmark()) {
      if (self.isChecked())       wh.write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
 else       wh.write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    }
 else     wh.write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menuitem self=(Menuitem)comp;
  final String uuid=self.getUuid();
  final String zcls=self.getZclass();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    final String imagesrc=self.getEncodedImageURL();
    if (imagesrc != null)     wh.write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    wh.write('>');
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"").write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    if (!self.isImageAssigned() && self.isCheckmark()) {
      if (self.isChecked())       wh.write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
 else       wh.write(zcls).write(""String_Node_Str"").write(zcls).write(""String_Node_Str"");
    }
 else     wh.write(zcls).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
}"
16582,"public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (newChild instanceof Listgroup && inSelectMold())     throw new UnsupportedOperationException(""String_Node_Str"");
    if (newChild instanceof Listgroupfoot) {
      if (!hasGroup())       throw new UiException(""String_Node_Str"");
      if (refChild == null) {
        if (getLastChild() instanceof Listgroupfoot)         throw new UiException(""String_Node_Str"");
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
      }
 else       if (refChild.getPreviousSibling() instanceof Listitem) {
        final int idx=((Listitem)refChild.getPreviousSibling()).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx + 1 != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx;
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelectedId());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelectedId());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelectedId());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int leng=lg.getIndex() - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{lg.getIndex(),size,-1});
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        final int[] g=getGroupsInfoAt(newItem.getIndex());
        if (g != null) {
          g[1]++;
          if (g[2] != -1)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listhead) {
    if (_listhead != null && _listhead != newChild)     throw new UiException(""String_Node_Str"" + this);
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    _listhead=(Listhead)newChild;
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listfoot) {
    if (_listfoot != null && _listfoot != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (inSelectMold())     log.warning(""String_Node_Str"");
    invalidate();
    _listfoot=(Listfoot)newChild;
    refChild=_paging;
    return super.insertBefore(newChild,refChild);
  }
 else   if (newChild instanceof Paging) {
    if (_paging != null && _paging != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (_pgi != null)     throw new UiException(""String_Node_Str"");
    if (!inPagingMold())     throw new UiException(""String_Node_Str"");
    invalidate();
    _pgi=_paging=(Paging)newChild;
    refChild=null;
    return super.insertBefore(newChild,refChild);
  }
 else {
    throw new UiException(""String_Node_Str"" + newChild);
  }
}","public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (newChild instanceof Listgroup && inSelectMold())     throw new UnsupportedOperationException(""String_Node_Str"");
    if (newChild instanceof Listgroupfoot) {
      if (!hasGroup())       throw new UiException(""String_Node_Str"");
      if (refChild == null) {
        if (getLastChild() instanceof Listgroupfoot)         throw new UiException(""String_Node_Str"");
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
      }
 else       if (refChild.getPreviousSibling() instanceof Listitem) {
        final int idx=((Listitem)refChild.getPreviousSibling()).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx + 1 != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx;
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelectedId());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelectedId());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelectedId());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int leng=lg.getIndex() - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{lg.getIndex(),size,prev[2]});
            prev[2]=-1;
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        final int[] g=getGroupsInfoAt(newItem.getIndex());
        if (g != null) {
          g[1]++;
          if (g[2] != -1)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listhead) {
    if (_listhead != null && _listhead != newChild)     throw new UiException(""String_Node_Str"" + this);
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    _listhead=(Listhead)newChild;
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listfoot) {
    if (_listfoot != null && _listfoot != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (inSelectMold())     log.warning(""String_Node_Str"");
    invalidate();
    _listfoot=(Listfoot)newChild;
    refChild=_paging;
    return super.insertBefore(newChild,refChild);
  }
 else   if (newChild instanceof Paging) {
    if (_paging != null && _paging != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (_pgi != null)     throw new UiException(""String_Node_Str"");
    if (!inPagingMold())     throw new UiException(""String_Node_Str"");
    invalidate();
    _pgi=_paging=(Paging)newChild;
    refChild=null;
    return super.insertBefore(newChild,refChild);
  }
 else {
    throw new UiException(""String_Node_Str"" + newChild);
  }
}"
16583,"public boolean insertBefore(Component child,Component refChild){
  if (!(child instanceof Row))   throw new UiException(""String_Node_Str"" + child);
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  if (newItem instanceof Groupfoot) {
    if (!hasGroup())     throw new UiException(""String_Node_Str"");
    if (refChild == null) {
      if (getLastChild() instanceof Groupfoot)       throw new UiException(""String_Node_Str"");
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - 1;
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,-1});
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1)         g[2]++;
      }
    }
    afterInsert(child);
    return true;
  }
  return false;
}","public boolean insertBefore(Component child,Component refChild){
  if (!(child instanceof Row))   throw new UiException(""String_Node_Str"" + child);
  Row newItem=(Row)child;
  final int jfrom=hasGroup() && newItem.getParent() == this ? newItem.getIndex() : -1;
  if (newItem instanceof Groupfoot) {
    if (!hasGroup())     throw new UiException(""String_Node_Str"");
    if (refChild == null) {
      if (getLastChild() instanceof Groupfoot)       throw new UiException(""String_Node_Str"");
      final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
      g[2]=getChildren().size() - 1;
    }
 else {
      final int idx=((Row)refChild).getIndex();
      final int[] g=getGroupsInfoAt(idx);
      if (g == null)       throw new UiException(""String_Node_Str"");
      if (g[2] != -1)       throw new UiException(""String_Node_Str"");
      if (idx != (g[0] + g[1]))       throw new UiException(""String_Node_Str"");
      g[2]=idx - 1;
    }
  }
  if (super.insertBefore(child,refChild)) {
    if (hasGroup()) {
      final int jto=refChild instanceof Row ? ((Row)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom >= 0)       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
    }
    if (newItem instanceof Group) {
      Group group=(Group)newItem;
      int index=group.getIndex();
      if (_groupsInfo.isEmpty())       _groupsInfo.add(new int[]{group.getIndex(),getChildren().size() - index,-1});
 else {
        int idx=0;
        int[] prev=null, next=null;
        for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
          int[] g=(int[])it.next();
          if (g[0] <= index) {
            prev=g;
            idx++;
          }
 else {
            next=g;
            break;
          }
        }
        if (prev != null) {
          int leng=index - prev[0], size=prev[1] - leng + 1;
          prev[1]=leng;
          _groupsInfo.add(idx,new int[]{index,size,prev[2]});
          prev[2]=-1;
        }
 else         if (next != null) {
          _groupsInfo.add(idx,new int[]{index,next[0] - index,-1});
        }
      }
    }
 else     if (hasGroup()) {
      int index=newItem.getIndex();
      final int[] g=getGroupsInfoAt(index);
      if (g != null) {
        g[1]++;
        if (g[2] != -1)         g[2]++;
      }
    }
    afterInsert(child);
    return true;
  }
  return false;
}"
16584,"void fixGroupIndex(int j,int to,boolean infront){
  for (Iterator it=_items.listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    ((Listitem)o).setIndexDirectly(j);
    if (o instanceof Listgroup) {
      int[] g=getGroupsInfoAt(j + (infront ? -1 : 1),true);
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}","void fixGroupIndex(int j,int to,boolean infront){
  final int beginning=j;
  for (Iterator it=_items.listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    ((Listitem)o).setIndexDirectly(j);
    if (beginning != j && o instanceof Listgroup) {
      int[] g=getGroupsInfoAt(j + (infront ? -1 : 1),true);
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}"
16585,"public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (newChild instanceof Listgroup && inSelectMold())     throw new UnsupportedOperationException(""String_Node_Str"");
    if (newChild instanceof Listgroupfoot) {
      if (!hasGroup())       throw new UiException(""String_Node_Str"");
      if (refChild == null) {
        if (getLastChild() instanceof Listgroupfoot)         throw new UiException(""String_Node_Str"");
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelectedId());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelectedId());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelectedId());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int leng=lg.getIndex() - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{lg.getIndex(),size,-1});
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        final int[] g=getGroupsInfoAt(newItem.getIndex());
        if (g != null) {
          g[1]++;
          if (g[2] != -1)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listhead) {
    if (_listhead != null && _listhead != newChild)     throw new UiException(""String_Node_Str"" + this);
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    _listhead=(Listhead)newChild;
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listfoot) {
    if (_listfoot != null && _listfoot != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (inSelectMold())     log.warning(""String_Node_Str"");
    invalidate();
    _listfoot=(Listfoot)newChild;
    refChild=_paging;
    return super.insertBefore(newChild,refChild);
  }
 else   if (newChild instanceof Paging) {
    if (_paging != null && _paging != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (_pgi != null)     throw new UiException(""String_Node_Str"");
    if (!inPagingMold())     throw new UiException(""String_Node_Str"");
    invalidate();
    _pgi=_paging=(Paging)newChild;
    refChild=null;
    return super.insertBefore(newChild,refChild);
  }
 else {
    throw new UiException(""String_Node_Str"" + newChild);
  }
}","public boolean insertBefore(Component newChild,Component refChild){
  if (newChild instanceof Listitem) {
    if (newChild instanceof Listgroup && inSelectMold())     throw new UnsupportedOperationException(""String_Node_Str"");
    if (newChild instanceof Listgroupfoot) {
      if (!hasGroup())       throw new UiException(""String_Node_Str"");
      if (refChild == null) {
        if (getLastChild() instanceof Listgroupfoot)         throw new UiException(""String_Node_Str"");
        final int[] g=(int[])_groupsInfo.get(getGroupCount() - 1);
        g[2]=((Listitem)getItems().get(getItems().size() - 1)).getIndex();
      }
 else       if (refChild instanceof Listitem) {
        final int idx=((Listitem)refChild).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx - 1;
      }
 else       if (refChild.getPreviousSibling() instanceof Listitem) {
        final int idx=((Listitem)refChild.getPreviousSibling()).getIndex();
        final int[] g=getGroupsInfoAt(idx);
        if (g == null)         throw new UiException(""String_Node_Str"");
        if (g[2] != -1)         throw new UiException(""String_Node_Str"");
        if (idx + 1 != (g[0] + g[1]))         throw new UiException(""String_Node_Str"");
        g[2]=idx;
      }
    }
    if (refChild != null && refChild.getParent() != this)     refChild=null;
    if (refChild != null && (refChild == _listhead || refChild instanceof Auxhead))     refChild=getChildren().size() > _hdcnt ? (Component)getChildren().get(_hdcnt) : null;
    refChild=fixRefChildBeforeFoot(refChild);
    final Listitem newItem=(Listitem)newChild;
    final int jfrom=newItem.getParent() == this ? newItem.getIndex() : -1;
    if (super.insertBefore(newChild,refChild)) {
      final int jto=refChild instanceof Listitem ? ((Listitem)refChild).getIndex() : -1, fixFrom=jfrom < 0 || (jto >= 0 && jfrom > jto) ? jto : jfrom;
      if (fixFrom < 0)       newItem.setIndexDirectly(_items.size() - 1);
 else       fixGroupIndex(fixFrom,jfrom >= 0 && jto >= 0 ? jfrom > jto ? jfrom : jto : -1,true);
      final int newIndex=newItem.getIndex();
      if (newItem.isSelected()) {
        if (_jsel < 0) {
          _jsel=newIndex;
          if (!inSelectMold())           smartUpdate(""String_Node_Str"",getSelectedId());
          _selItems.add(newItem);
        }
 else         if (_multiple) {
          if (_jsel > newIndex) {
            _jsel=newIndex;
            if (!inSelectMold())             smartUpdate(""String_Node_Str"",getSelectedId());
          }
          _selItems.add(newItem);
        }
 else {
          newItem.setSelectedDirectly(false);
        }
      }
 else {
        final int oldjsel=_jsel;
        if (jfrom < 0) {
          if (_jsel >= newIndex)           ++_jsel;
        }
 else         if (_jsel >= 0) {
          if (jfrom > _jsel) {
            if (jto >= 0 && jto <= _jsel)             ++_jsel;
          }
 else {
            if (jto < 0 || jto > _jsel)             --_jsel;
          }
        }
        if (oldjsel != _jsel && !inSelectMold())         smartUpdate(""String_Node_Str"",getSelectedId());
      }
      if (newChild instanceof Listgroup) {
        Listgroup lg=(Listgroup)newChild;
        if (_groupsInfo.isEmpty())         _groupsInfo.add(new int[]{lg.getIndex(),getItemCount() - lg.getIndex(),-1});
 else {
          int idx=0;
          int[] prev=null, next=null;
          for (Iterator it=_groupsInfo.iterator(); it.hasNext(); ) {
            int[] g=(int[])it.next();
            if (g[0] <= lg.getIndex()) {
              prev=g;
              idx++;
            }
 else {
              next=g;
              break;
            }
          }
          if (prev != null) {
            int leng=lg.getIndex() - prev[0], size=prev[1] - leng + 1;
            prev[1]=leng;
            _groupsInfo.add(idx,new int[]{lg.getIndex(),size,-1});
          }
 else           if (next != null) {
            _groupsInfo.add(idx,new int[]{lg.getIndex(),next[0] - lg.getIndex(),-1});
          }
        }
      }
 else       if (!_groupsInfo.isEmpty()) {
        final int[] g=getGroupsInfoAt(newItem.getIndex());
        if (g != null) {
          g[1]++;
          if (g[2] != -1)           g[2]++;
        }
      }
      afterInsert(newChild);
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listhead) {
    if (_listhead != null && _listhead != newChild)     throw new UiException(""String_Node_Str"" + this);
    final boolean added=_listhead == null;
    refChild=fixRefChildForHeader(refChild);
    _listhead=(Listhead)newChild;
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      invalidate();
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Auxhead) {
    final boolean added=newChild.getParent() != this;
    refChild=fixRefChildForHeader(refChild);
    if (super.insertBefore(newChild,refChild)) {
      if (added)       ++_hdcnt;
      return true;
    }
    return false;
  }
 else   if (newChild instanceof Listfoot) {
    if (_listfoot != null && _listfoot != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (inSelectMold())     log.warning(""String_Node_Str"");
    invalidate();
    _listfoot=(Listfoot)newChild;
    refChild=_paging;
    return super.insertBefore(newChild,refChild);
  }
 else   if (newChild instanceof Paging) {
    if (_paging != null && _paging != newChild)     throw new UiException(""String_Node_Str"" + this);
    if (_pgi != null)     throw new UiException(""String_Node_Str"");
    if (!inPagingMold())     throw new UiException(""String_Node_Str"");
    invalidate();
    _pgi=_paging=(Paging)newChild;
    refChild=null;
    return super.insertBefore(newChild,refChild);
  }
 else {
    throw new UiException(""String_Node_Str"" + newChild);
  }
}"
16586,"/** 
 * Update the number of the visible item before it is removed or after it is added.
 */
private void updateVisibleCount(Listitem item,boolean isRemove){
  if (item instanceof Listgroup || item.isVisible()) {
    final Listgroup g=getListgroupAt(item.getIndex());
    if (item instanceof Listgroupfoot || item instanceof Listgroup || g == null || g.isOpen())     addVisibleItemCount(isRemove ? -1 : 1);
    if (item instanceof Listgroup) {
      final Listgroup group=(Listgroup)item;
      if (item.getPreviousSibling() instanceof Listitem) {
        final Listitem preRow=(Listitem)item.getPreviousSibling();
        if (preRow == null) {
          if (!group.isOpen()) {
            addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
        }
 else {
          final Listgroup preGroup=getListgroupAt(preRow.getIndex());
          if (preGroup != null) {
            if (!preGroup.isOpen() && group.isOpen())             addVisibleItemCount(isRemove ? -group.getVisibleItemCount() : group.getVisibleItemCount());
 else             if (preGroup.isOpen() && !group.isOpen())             addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
 else {
            if (!group.isOpen())             addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
        }
      }
 else       if (!group.isOpen()) {
        addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
      }
    }
  }
  if (inPagingMold())   getPaginal().setTotalSize(getVisibleItemCount());
}","/** 
 * Update the number of the visible item before it is removed or after it is added.
 */
private void updateVisibleCount(Listitem item,boolean isRemove){
  if (item instanceof Listgroup || item.isVisible()) {
    final Listgroup g=getListgroupAt(item.getIndex());
    if (item instanceof Listgroupfoot || item instanceof Listgroup || g == null || g.isOpen())     addVisibleItemCount(isRemove ? -1 : 1);
    if (item instanceof Listgroup) {
      final Listgroup group=(Listgroup)item;
      if (item.getPreviousSibling() instanceof Listitem) {
        final Listitem preRow=(Listitem)item.getPreviousSibling();
        if (preRow == null) {
          if (!group.isOpen()) {
            addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
        }
 else {
          final Listgroup preGroup=preRow instanceof Listgroup ? (Listgroup)preRow : getListgroupAt(preRow.getIndex());
          if (preGroup != null) {
            if (!preGroup.isOpen() && group.isOpen())             addVisibleItemCount(isRemove ? -group.getVisibleItemCount() : group.getVisibleItemCount());
 else             if (preGroup.isOpen() && !group.isOpen())             addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
 else {
            if (!group.isOpen())             addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
          }
        }
      }
 else       if (!group.isOpen()) {
        addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
      }
    }
  }
  if (inPagingMold())   getPaginal().setTotalSize(getVisibleItemCount());
}"
16587,"/** 
 * Update the number of the visible item before it is removed or after it is added.
 */
private void updateVisibleCount(Row row,boolean isRemove){
  if (row instanceof Group || row.isVisible()) {
    final Group g=getGroup(row.getIndex());
    if (row instanceof Groupfoot || row instanceof Group || g == null || g.isOpen())     addVisibleItemCount(isRemove ? -1 : 1);
    if (row instanceof Group) {
      final Group group=(Group)row;
      final Row preRow=(Row)row.getPreviousSibling();
      if (preRow == null) {
        if (!group.isOpen()) {
          addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
      }
 else {
        final Group preGroup=getGroup(preRow.getIndex());
        if (preGroup != null) {
          if (!preGroup.isOpen() && group.isOpen())           addVisibleItemCount(isRemove ? -group.getVisibleItemCount() : group.getVisibleItemCount());
 else           if (preGroup.isOpen() && !group.isOpen())           addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
 else {
          if (!group.isOpen())           addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
      }
    }
  }
  final Grid grid=getGrid();
  if (grid != null && grid.inPagingMold())   grid.getPaginal().setTotalSize(getVisibleItemCount());
}","/** 
 * Update the number of the visible item before it is removed or after it is added.
 */
private void updateVisibleCount(Row row,boolean isRemove){
  if (row instanceof Group || row.isVisible()) {
    final Group g=getGroup(row.getIndex());
    if (row instanceof Groupfoot || row instanceof Group || g == null || g.isOpen())     addVisibleItemCount(isRemove ? -1 : 1);
    if (row instanceof Group) {
      final Group group=(Group)row;
      final Row preRow=(Row)row.getPreviousSibling();
      if (preRow == null) {
        if (!group.isOpen()) {
          addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
      }
 else {
        final Group preGroup=preRow instanceof Group ? (Group)preRow : getGroup(preRow.getIndex());
        if (preGroup != null) {
          if (!preGroup.isOpen() && group.isOpen())           addVisibleItemCount(isRemove ? -group.getVisibleItemCount() : group.getVisibleItemCount());
 else           if (preGroup.isOpen() && !group.isOpen())           addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
 else {
          if (!group.isOpen())           addVisibleItemCount(isRemove ? group.getVisibleItemCount() : -group.getVisibleItemCount());
        }
      }
    }
  }
  final Grid grid=getGrid();
  if (grid != null && grid.inPagingMold())   grid.getPaginal().setTotalSize(getVisibleItemCount());
}"
16588,"void fixGroupIndex(int j,int to,boolean infront){
  final int beginning=j;
  for (Iterator it=_items.listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    ((Listitem)o).setIndexDirectly(j);
    if (beginning != j && o instanceof Listgroup) {
      int[] g=getGroupsInfoAt(j + (infront ? -1 : 1),true);
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}","void fixGroupIndex(int j,int to,boolean infront){
  final int beginning=j;
  for (Iterator it=_items.listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    ((Listitem)o).setIndexDirectly(j);
    if (beginning != j && o instanceof Listgroup) {
      int[] g=getLastGroupsInfoAt(j + (infront ? -1 : 1));
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}"
16589,"void fixGroupIndex(int j,int to,boolean infront){
  for (Iterator it=getChildren().listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    if (o instanceof Group) {
      int[] g=getGroupsInfoAt(j + (infront ? -1 : 1),true);
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}","void fixGroupIndex(int j,int to,boolean infront){
  for (Iterator it=getChildren().listIterator(j); it.hasNext() && (to < 0 || j <= to); ++j) {
    Object o=it.next();
    if (o instanceof Group) {
      int[] g=getLastGroupsInfoAt(j + (infront ? -1 : 1));
      if (g != null) {
        g[0]=j;
        if (g[2] != -1)         g[2]+=(infront ? 1 : -1);
      }
    }
  }
}"
16590,"public void render(Component comp,Writer out) throws IOException {
  final Tabpanel self=(Tabpanel)comp;
  final Tabbox tabbox=self.getTabbox();
  final String mold=tabbox.getMold();
  if (""String_Node_Str"".equals(mold) || ""String_Node_Str"".equals(mold)) {
    _acdpanel.render(comp,out);
    return;
  }
  if (""String_Node_Str"".equals(tabbox.getOrient())) {
    _vpanel.render(comp,out);
    return;
  }
  final SmartWriter wh=new SmartWriter(out);
  wh.write(""String_Node_Str"").write(self.getUuid()).write('""').write(""String_Node_Str"").write(self.getOuterAttrs()).write(""String_Node_Str"" + tabbox.getId() + ""String_Node_Str"").write('>').write(""String_Node_Str"").write(self.getUuid()).write(""String_Node_Str"").write(self.getInnerAttrs()).write('>').writeChildren(self).writeln(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final Tabpanel self=(Tabpanel)comp;
  final Tabbox tabbox=self.getTabbox();
  final String mold=tabbox.getMold();
  if (""String_Node_Str"".equals(mold) || ""String_Node_Str"".equals(mold)) {
    _acdpanel.render(comp,out);
    return;
  }
  if (""String_Node_Str"".equals(tabbox.getOrient())) {
    _vpanel.render(comp,out);
    return;
  }
  final SmartWriter wh=new SmartWriter(out);
  wh.write(""String_Node_Str"").write(self.getUuid()).write('""').write(""String_Node_Str"").write(""String_Node_Str"" + tabbox.getUuid() + ""String_Node_Str"").write(self.getOuterAttrs()).write('>').write(""String_Node_Str"").write(self.getUuid()).write(""String_Node_Str"").write(self.getInnerAttrs()).write('>').writeChildren(self).writeln(""String_Node_Str"");
}"
16591,"/** 
 * @param data an array data to be grouping.
 * @param cmpr a comparator implementation help group the data. you could implements {@link GroupComparator} to do more grouping control.<br/>At 1st phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to sort the data.<br/>At 2nd phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to decide which data belong to which group. In this phase it also invoke  {@link #createGroupHead(Object[],int,int)} and {@link #createGroupFoot(Object[],int,int)} to create head of foot Object of each group.<br/>At 3rd phase, it calls  {@link Comparator#compare(Object,Object)} to sort data in each group.<br/>
 * @param col column index associate with cmpr.
 */
public ArrayGroupsModel(Object[] data,Comparator cmpr,int col){
  if (data == null || cmpr == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _nativedata=Arrays.copyOf(data,data.length);
  _comparator=cmpr;
  group(_comparator,true,col);
}","/** 
 * @param data an array data to be grouping.
 * @param cmpr a comparator implementation help group the data. you could implements {@link GroupComparator} to do more grouping control.<br/>At 1st phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to sort the data.<br/>At 2nd phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to decide which data belong to which group. In this phase it also invoke  {@link #createGroupHead(Object[],int,int)} and {@link #createGroupFoot(Object[],int,int)} to create head of foot Object of each group.<br/>At 3rd phase, it calls  {@link Comparator#compare(Object,Object)} to sort data in each group.<br/>
 * @param col column index associate with cmpr.
 */
public ArrayGroupsModel(Object[] data,Comparator cmpr,int col){
  if (data == null || cmpr == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _nativedata=(Object[])ArraysX.duplicate(data);
  _comparator=cmpr;
  group(_comparator,true,col);
}"
16592,"/** 
 * Synchronizes the grid to be consistent with the specified model.
 * @param min the lower index that a range of invalidated rows
 * @param max the higher index that a range of invalidated rows
 */
private void syncModel(int min,int max){
  final int newsz=_model.getSize();
  final int oldsz=_rows != null ? _rows.getChildren().size() : 0;
  int newcnt=newsz - oldsz;
  RowRenderer renderer=null;
  Component next=null;
  if (oldsz > 0) {
    if (min < 0)     min=0;
 else     if (min > oldsz - 1)     min=oldsz - 1;
    if (max < 0)     max=oldsz - 1;
 else     if (max > oldsz - 1)     max=oldsz - 1;
    if (min > max) {
      int t=min;
      min=max;
      max=t;
    }
    int cnt=max - min + 1;
    if (_model instanceof GroupsListModel) {
      newcnt+=cnt;
      if (newcnt > 50 && !inPagingMold())       invalidate();
      Component comp=(Component)_rows.getChildren().get(max);
      next=comp.getNextSibling();
      while (--cnt >= 0) {
        Component p=comp.getPreviousSibling();
        comp.detach();
        comp=p;
      }
    }
 else {
      int addcnt=0;
      Row row=(Row)_rows.getChildren().get(min);
      while (--cnt >= 0) {
        next=row.getNextSibling();
        if (cnt < -newcnt) {
          row.detach();
        }
 else         if (row.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          row.detach();
          _rows.insertBefore(newUnloadedRow(renderer,min++),next);
          ++addcnt;
        }
        row=(Row)next;
      }
      if ((addcnt > 50 || addcnt + newcnt > 50) && !inPagingMold())       invalidate();
    }
  }
 else {
    min=0;
    if (_rows == null)     new Rows().setParent(this);
  }
  for (; --newcnt >= 0; ++min) {
    if (renderer == null)     renderer=getRealRenderer();
    _rows.insertBefore(newUnloadedRow(renderer,min),next);
  }
}","/** 
 * Synchronizes the grid to be consistent with the specified model.
 * @param min the lower index that a range of invalidated rows
 * @param max the higher index that a range of invalidated rows
 */
private void syncModel(int min,int max){
  final int newsz=_model.getSize();
  final int oldsz=_rows != null ? _rows.getChildren().size() : 0;
  int newcnt=newsz - oldsz;
  RowRenderer renderer=null;
  Component next=null;
  if (oldsz > 0) {
    if (min < 0)     min=0;
 else     if (min > oldsz - 1)     min=oldsz - 1;
    if (max < 0)     max=oldsz - 1;
 else     if (max > oldsz - 1)     max=oldsz - 1;
    if (min > max) {
      int t=min;
      min=max;
      max=t;
    }
    int cnt=max - min + 1;
    if (_model instanceof GroupsListModel) {
      newcnt+=cnt;
      if (newcnt > 50 && !inPagingMold())       invalidate();
      Component comp=(Component)_rows.getChildren().get(max);
      next=comp.getNextSibling();
      while (--cnt >= 0) {
        Component p=comp.getPreviousSibling();
        comp.detach();
        comp=p;
      }
    }
 else {
      int addcnt=0;
      Component row=(Row)_rows.getChildren().get(min);
      while (--cnt >= 0) {
        next=row.getNextSibling();
        if (cnt < -newcnt) {
          row.detach();
        }
 else         if (((Row)row).isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          row.detach();
          _rows.insertBefore(newUnloadedRow(renderer,min++),next);
          ++addcnt;
        }
        row=next;
      }
      if ((addcnt > 50 || addcnt + newcnt > 50) && !inPagingMold())       invalidate();
    }
  }
 else {
    min=0;
    if (_rows == null)     new Rows().setParent(this);
  }
  for (; --newcnt >= 0; ++min) {
    if (renderer == null)     renderer=getRealRenderer();
    _rows.insertBefore(newUnloadedRow(renderer,min),next);
  }
}"
16593,"/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
private void syncModel(int min,int max){
  final int newsz=_model.getSize();
  final int oldsz=getItemCount();
  int newcnt=newsz - oldsz;
  ListitemRenderer renderer=null;
  Component next=null;
  if (oldsz > 0) {
    if (min < 0)     min=0;
 else     if (min > oldsz - 1)     min=oldsz - 1;
    if (max < 0)     max=oldsz - 1;
 else     if (max > oldsz - 1)     max=oldsz - 1;
    if (min > max) {
      int t=min;
      min=max;
      max=t;
    }
    int cnt=max - min + 1;
    if (_model instanceof GroupsListModel) {
      newcnt+=cnt;
      if (newcnt > 50 && !inPagingMold())       invalidate();
      Component comp=getItemAtIndex(max);
      next=comp.getNextSibling();
      while (--cnt >= 0) {
        Component p=comp.getPreviousSibling();
        comp.detach();
        comp=p;
      }
    }
 else {
      int addcnt=0;
      Listitem item=getItemAtIndex(min);
      while (--cnt >= 0) {
        next=item.getNextSibling();
        if (cnt < -newcnt) {
          item.detach();
        }
 else         if (item.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          item.detach();
          insertBefore(newUnloadedItem(renderer,min++),next);
          ++addcnt;
        }
        item=(Listitem)next;
      }
      if ((addcnt > 50 || addcnt + newcnt > 50) && !inPagingMold())       invalidate();
    }
  }
 else {
    min=0;
  }
  for (; --newcnt >= 0; ++min) {
    if (renderer == null)     renderer=getRealRenderer();
    insertBefore(newUnloadedItem(renderer,min),next);
  }
}","/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
private void syncModel(int min,int max){
  final int newsz=_model.getSize();
  final int oldsz=getItemCount();
  int newcnt=newsz - oldsz;
  ListitemRenderer renderer=null;
  Component next=null;
  if (oldsz > 0) {
    if (min < 0)     min=0;
 else     if (min > oldsz - 1)     min=oldsz - 1;
    if (max < 0)     max=oldsz - 1;
 else     if (max > oldsz - 1)     max=oldsz - 1;
    if (min > max) {
      int t=min;
      min=max;
      max=t;
    }
    int cnt=max - min + 1;
    if (_model instanceof GroupsListModel) {
      newcnt+=cnt;
      if (newcnt > 50 && !inPagingMold())       invalidate();
      Component comp=getItemAtIndex(max);
      next=comp.getNextSibling();
      while (--cnt >= 0) {
        Component p=comp.getPreviousSibling();
        comp.detach();
        comp=p;
      }
    }
 else {
      int addcnt=0;
      Component item=getItemAtIndex(min);
      while (--cnt >= 0) {
        next=item.getNextSibling();
        if (cnt < -newcnt) {
          item.detach();
        }
 else         if (((Listitem)item).isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          item.detach();
          insertBefore(newUnloadedItem(renderer,min++),next);
          ++addcnt;
        }
        item=next;
      }
      if ((addcnt > 50 || addcnt + newcnt > 50) && !inPagingMold())       invalidate();
    }
  }
 else {
    min=0;
  }
  for (; --newcnt >= 0; ++min) {
    if (renderer == null)     renderer=getRealRenderer();
    insertBefore(newUnloadedItem(renderer,min),next);
  }
}"
16594,"/** 
 * @param data an array data to be grouping.
 * @param cmpr a comparator implementation help group the data. you could implements {@link GroupComparator} to do more grouping control.<br/>At 1st phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to sort the data.<br/>At 2nd phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to decide which data belong to which group. In this phase it also invoke  {@link #createGroupHead(Object[],int)} and {@link #createGroupFoot(Object[],int)} to create head of foot Object of each group.<br/>At 3rd phase, it calls  {@link Comparator#compare(Object,Object)} to sort data in each group.<br/>
 * @param col column index associate with cmpr.
 */
public ArrayGroupsModel(Object[] data,Comparator cmpr,int col){
  if (data == null || cmpr == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _nativedata=Arrays.copyOf(data,data.length);
  _comparator=cmpr;
  group(_comparator,true,col);
}","/** 
 * @param data an array data to be grouping.
 * @param cmpr a comparator implementation help group the data. you could implements {@link GroupComparator} to do more grouping control.<br/>At 1st phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to sort the data.<br/>At 2nd phase, it calls  {@link Comparator#compare(Object,Object)} or {@link GroupComparator#compareGroup(Object,Object)} to decide which data belong to which group. In this phase it also invoke  {@link #createGroupHead(Object[],int,int)} and {@link #createGroupFoot(Object[],int,int)} to create head of foot Object of each group.<br/>At 3rd phase, it calls  {@link Comparator#compare(Object,Object)} to sort data in each group.<br/>
 * @param col column index associate with cmpr.
 */
public ArrayGroupsModel(Object[] data,Comparator cmpr,int col){
  if (data == null || cmpr == null)   throw new IllegalArgumentException(""String_Node_Str"");
  _nativedata=Arrays.copyOf(data,data.length);
  _comparator=cmpr;
  group(_comparator,true,col);
}"
16595,"public void onDrawNewChild(Component child,StringBuffer out) throws IOException {
  final StringBuffer sb=new StringBuffer(128).append(""String_Node_Str"").append(child.getUuid()).append(""String_Node_Str"");
  final Grid grid=getGrid();
  if (grid != null) {
    int j=0;
    for (Iterator it=getChildren().iterator(); it.hasNext(); ++j)     if (child == it.next())     break;
    sb.append(getChildAttrs(j));
  }
  sb.append(""String_Node_Str"").append(child.getUuid()).append(""String_Node_Str"").append(""String_Node_Str"").append(getMoldSclass()).append(""String_Node_Str"");
  if (grid.isFixedLayout())   sb.append(""String_Node_Str"");
  if (this instanceof Group && this.getChildren().indexOf(child) == 0)   sb.append(((Group)this).getImgTag());
  if (JVMs.isJava5())   out.insert(0,sb);
 else   out.insert(0,sb.toString());
  out.append(""String_Node_Str"");
}","public void onDrawNewChild(Component child,StringBuffer out) throws IOException {
  final StringBuffer sb=new StringBuffer(128).append(""String_Node_Str"").append(child.getUuid()).append(""String_Node_Str"");
  final Grid grid=getGrid();
  if (grid != null) {
    int j=0;
    for (Iterator it=getChildren().iterator(); it.hasNext(); ++j)     if (child == it.next())     break;
    sb.append(getChildAttrs(j));
  }
  sb.append(""String_Node_Str"").append(child.getUuid()).append(""String_Node_Str"").append(""String_Node_Str"").append(getMoldSclass()).append(""String_Node_Str"");
  if (grid.isFixedLayout())   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (JVMs.isJava5())   out.insert(0,sb);
 else   out.insert(0,sb.toString());
  out.append(""String_Node_Str"");
}"
16596,"/** 
 * Synchronizes the grid to be consistent with the specified model.
 * @param min the lower index that a range of invalidated rows
 * @param max the higher index that a range of invalidated rows
 */
private void syncModel(int min,int max){
  RowRenderer renderer=null;
  final int newsz=_model.getSize();
  final int oldsz=_rows != null ? _rows.getChildren().size() : 0;
  if (oldsz > 0) {
    if (newsz > 0 && min < oldsz) {
      if (max < 0 || max >= oldsz)       max=oldsz - 1;
      if (max >= newsz)       max=newsz - 1;
      if (min < 0)       min=0;
      for (Iterator it=new ArrayList(_rows.getChildren()).listIterator(min); min <= max && it.hasNext(); ++min) {
        final Row row=(Row)it.next();
        if (row.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          unloadRow(renderer,row);
        }
      }
    }
    if (oldsz > newsz) {
      for (Iterator it=_rows.getChildren().listIterator(newsz); it.hasNext(); ) {
        it.next();
        it.remove();
      }
    }
  }
  if (_rows == null)   new Rows().setParent(this);
  if (newsz - oldsz > 50 && !inPagingMold())   invalidate();
  for (int j=oldsz; j < newsz; ++j) {
    if (renderer == null)     renderer=getRealRenderer();
    newUnloadedRow(renderer,j).setParent(_rows);
  }
}","/** 
 * Synchronizes the grid to be consistent with the specified model.
 * @param min the lower index that a range of invalidated rows
 * @param max the higher index that a range of invalidated rows
 */
private void syncModel(int min,int max){
  RowRenderer renderer=null;
  final int newsz=_model.getSize();
  final int oldsz=_rows != null ? _rows.getChildren().size() : 0;
  if (oldsz > 0) {
    if (newsz > 0 && min < oldsz) {
      if (max < 0 || max >= oldsz)       max=oldsz - 1;
      if (max >= newsz)       max=newsz - 1;
      if (min < 0)       min=0;
      for (Iterator it=new ArrayList(_rows.getChildren()).listIterator(min); min <= max && it.hasNext(); ++min) {
        final Row row=(Row)it.next();
        if (row.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          unloadRow(renderer,row,min);
        }
      }
    }
    if (oldsz > newsz) {
      for (Iterator it=_rows.getChildren().listIterator(newsz); it.hasNext(); ) {
        it.next();
        it.remove();
      }
    }
  }
  if (_rows == null)   new Rows().setParent(this);
  if (newsz - oldsz > 50 && !inPagingMold())   invalidate();
  for (int j=oldsz; j < newsz; ++j) {
    if (renderer == null)     renderer=getRealRenderer();
    newUnloadedRow(renderer,j).setParent(_rows);
  }
}"
16597,"/** 
 * Clears a row as if it is not loaded. 
 */
private final void unloadRow(RowRenderer renderer,Row row){
  _rows.insertBefore(newUnloadedRow(renderer,-1),row);
  row.detach();
}","/** 
 * Clears a row as if it is not loaded. 
 */
private final void unloadRow(RowRenderer renderer,Row row,int index){
  _rows.insertBefore(newUnloadedRow(renderer,index),row);
  row.detach();
}"
16598,"/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
private void syncModel(int min,int max){
  ListitemRenderer renderer=null;
  final int newsz=_model.getSize();
  final int oldsz=getItemCount();
  if (oldsz > 0) {
    if (newsz > 0 && min < oldsz) {
      if (max < 0 || max >= oldsz)       max=oldsz - 1;
      if (max >= newsz)       max=newsz - 1;
      if (min < 0)       min=0;
      for (Iterator it=new ArrayList(_items).listIterator(min); min <= max && it.hasNext(); ++min) {
        final Listitem item=(Listitem)it.next();
        if (item.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          unloadItem(renderer,item);
        }
      }
    }
    for (int j=newsz; j < oldsz; ++j)     getItemAtIndex(newsz).detach();
  }
  if (newsz - oldsz > 50 && !inPagingMold())   invalidate();
  for (int j=oldsz; j < newsz; ++j) {
    if (renderer == null)     renderer=getRealRenderer();
    newUnloadedItem(renderer,j).setParent(this);
  }
}","/** 
 * Synchronizes the listbox to be consistent with the specified model.
 * @param min the lower index that a range of invalidated items
 * @param max the higher index that a range of invalidated items
 */
private void syncModel(int min,int max){
  ListitemRenderer renderer=null;
  final int newsz=_model.getSize();
  final int oldsz=getItemCount();
  if (oldsz > 0) {
    if (newsz > 0 && min < oldsz) {
      if (max < 0 || max >= oldsz)       max=oldsz - 1;
      if (max >= newsz)       max=newsz - 1;
      if (min < 0)       min=0;
      for (Iterator it=new ArrayList(_items).listIterator(min); min <= max && it.hasNext(); ++min) {
        final Listitem item=(Listitem)it.next();
        if (item.isLoaded()) {
          if (renderer == null)           renderer=getRealRenderer();
          unloadItem(renderer,item,min);
        }
      }
    }
    for (int j=newsz; j < oldsz; ++j)     getItemAtIndex(newsz).detach();
  }
  if (newsz - oldsz > 50 && !inPagingMold())   invalidate();
  for (int j=oldsz; j < newsz; ++j) {
    if (renderer == null)     renderer=getRealRenderer();
    newUnloadedItem(renderer,j).setParent(this);
  }
}"
16599,"/** 
 * Clears a listitem as if it is not loaded. 
 */
private final void unloadItem(ListitemRenderer renderer,Listitem item){
  item.getParent().insertBefore(newUnloadedItem(renderer,-1),item);
  item.detach();
}","/** 
 * Clears a listitem as if it is not loaded. 
 */
private final void unloadItem(ListitemRenderer renderer,Listitem item,int index){
  item.getParent().insertBefore(newUnloadedItem(renderer,index),item);
  item.detach();
}"
16600,"/** 
 * Returns the available children, or null if no cropping.
 */
private static Set getAvailableAtClient(Component comp,Map croppingInfos){
  final Object xc=((ComponentCtrl)comp).getExtraCtrl();
  if (xc instanceof Cropper) {
    Set set=(Set)croppingInfos.get(comp);
    if (set != null)     return set != Collections.EMPTY_SET ? set : null;
    set=((Cropper)xc).getAvailableAtClient();
    croppingInfos.put(comp,set != null ? set : Collections.EMPTY_SET);
    return set;
  }
  return null;
}","/** 
 * Returns the available children, or null if no cropping.
 */
private static Set getAvailableAtClient(Component comp,Map croppingInfos){
  final Object xc=((ComponentCtrl)comp).getExtraCtrl();
  if (xc instanceof Cropper) {
    Object crop=croppingInfos.get(comp);
    if (crop == Objects.UNKNOWN)     return null;
    if (crop != null)     return (Set)crop;
    crop=((Cropper)xc).getAvailableAtClient();
    croppingInfos.put(comp,crop != null ? crop : Objects.UNKNOWN);
    return (Set)crop;
  }
  return null;
}"
16601,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle(), titlesc=self.getTitleSclass();
  final boolean isEmbedded=self.inEmbedded();
  String wcExtStyle=""String_Node_Str"";
  if (caption != null || title.length() > 0) {
    wh.write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"");
    if (caption == null) {
      if (self.isClosable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
      if (self.isMaximizable()) {
        wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
        if (self.isMaximized())         wh.write(""String_Node_Str"");
        wh.write(""String_Node_Str"");
      }
      if (self.isMinimizable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
      new Out(title).render(out);
    }
 else {
      wh.write(caption);
    }
    wh.write(""String_Node_Str"");
    wcExtStyle=""String_Node_Str"";
  }
 else   if (!isEmbedded) {
    wh.write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"");
  }
  final String ccls=self.getContentSclass();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  if (!isEmbedded)   wh.write(""String_Node_Str"").write(ccls).write(""String_Node_Str"").write(ccls).write(""String_Node_Str"").write(ccls).write(""String_Node_Str"");
  wcExtStyle+=self.getContentStyle();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(ccls).write(""String_Node_Str"").writeAttr(""String_Node_Str"",wcExtStyle);
  wh.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     wh.write(child);
  }
  wh.write(""String_Node_Str"");
  final String mode=self.getMode();
  if (!isEmbedded)   wh.write(""String_Node_Str"").write(mode).write(""String_Node_Str"").write(mode).write(""String_Node_Str"").write(mode).write(""String_Node_Str"");
  wh.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle(), titlesc=self.getTitleSclass();
  final boolean isEmbedded=self.inEmbedded();
  String wcExtStyle=""String_Node_Str"";
  if (caption != null || title.length() > 0) {
    wh.write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"");
    if (caption == null) {
      if (self.isClosable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
      if (self.isMaximizable()) {
        wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
        if (self.isMaximized())         wh.write(""String_Node_Str"");
        wh.write(""String_Node_Str"");
      }
      if (self.isMinimizable())       wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
      new Out(title).render(out);
    }
 else {
      wh.write(caption);
    }
    wh.write(""String_Node_Str"");
    wcExtStyle=""String_Node_Str"";
  }
 else   if (!isEmbedded) {
    wh.write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"").write(titlesc).write(""String_Node_Str"");
  }
  final String ccls=self.getContentSclass();
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  if (!isEmbedded)   wh.write(""String_Node_Str"").write(ccls).write(""String_Node_Str"").write(ccls).write(""String_Node_Str"").write(ccls).write(""String_Node_Str"");
  final String cs=self.getContentStyle();
  if (cs != null) {
    wcExtStyle+=cs;
  }
  wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
  wh.write(ccls).write(""String_Node_Str"").writeAttr(""String_Node_Str"",wcExtStyle);
  wh.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     wh.write(child);
  }
  wh.write(""String_Node_Str"");
  final String mode=self.getMode();
  if (!isEmbedded)   wh.write(""String_Node_Str"").write(mode).write(""String_Node_Str"").write(mode).write(""String_Node_Str"").write(mode).write(""String_Node_Str"");
  wh.write(""String_Node_Str"");
}"
16602,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menu self=(Menu)comp;
  final String uuid=self.getUuid();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"");
    String imagesrc;
    if (self.getImageContent() != null)     imagesrc=""String_Node_Str"" + self.getContentSrc() + ""String_Node_Str"";
 else {
      final String src=self.getSrc();
      if (src != null && src.length() > 0)       imagesrc=""String_Node_Str"" + src + ""String_Node_Str"";
 else       imagesrc=""String_Node_Str"";
    }
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menu self=(Menu)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"");
    String imagesrc;
    if (self.getImageContent() != null)     imagesrc=""String_Node_Str"" + self.getContentSrc() + ""String_Node_Str"";
 else {
      final String src=self.getSrc();
      if (src != null && src.length() > 0)       imagesrc=""String_Node_Str"" + exec.encodeURL(src) + ""String_Node_Str"";
 else       imagesrc=""String_Node_Str"";
    }
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").write(self.getMenupopup()).writeln(""String_Node_Str"");
  }
}"
16603,"public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menuitem self=(Menuitem)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"");
    String imagesrc;
    if (self.getImageContent() != null)     imagesrc=""String_Node_Str"" + self.getContentSrc() + ""String_Node_Str"";
 else {
      final String src=self.getSrc();
      if (src != null && src.length() > 0)       imagesrc=""String_Node_Str"" + src + ""String_Node_Str"";
 else       imagesrc=""String_Node_Str"";
    }
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    if (((Menupopup)self.getParent()).isCheckmark()) {
      if (self.isChecked())       wh.write(""String_Node_Str"");
 else       wh.write(""String_Node_Str"");
    }
 else     wh.write(""String_Node_Str"");
    if (self.isDisabled())     wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final SmartWriter wh=new SmartWriter(out);
  final Menuitem self=(Menuitem)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  if (self.isTopmost()) {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (self.isImageAssigned()) {
      wh.write(""String_Node_Str"");
      if (self.getLabel().length() > 0)       wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"");
    String imagesrc;
    if (self.getImageContent() != null)     imagesrc=""String_Node_Str"" + self.getContentSrc() + ""String_Node_Str"";
 else {
      final String src=self.getSrc();
      if (src != null && src.length() > 0)       imagesrc=""String_Node_Str"" + exec.encodeURL(src) + ""String_Node_Str"";
 else       imagesrc=""String_Node_Str"";
    }
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"").write(imagesrc).write(""String_Node_Str"");
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    if (Strings.isBlank(self.getHref()))     wh.write(""String_Node_Str"");
 else     wh.write(exec.encodeURL(self.getHref()));
    wh.write(""String_Node_Str"").writeAttr(""String_Node_Str"",self.getTarget());
    wh.write(""String_Node_Str"");
    if (((Menupopup)self.getParent()).isCheckmark()) {
      if (self.isChecked())       wh.write(""String_Node_Str"");
 else       wh.write(""String_Node_Str"");
    }
 else     wh.write(""String_Node_Str"");
    if (self.isDisabled())     wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getImgTag());
    new Out(self.getLabel()).render(out);
    wh.write(""String_Node_Str"").writeln(""String_Node_Str"");
  }
}"
16604,"public boolean accept(File dir,String name){
  for (int i=0; i < SKIP_LIST.length; i++)   if (name.equals(SKIP_LIST[i]))   return false;
  if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 4);
 else   if (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 6);
 else   return false;
  if (!name.matches(""String_Node_Str""))   return false;
  if (reg) {
    Matcher matcher=pattern.matcher(name);
    return matcher.matches();
  }
 else {
    return name.toUpperCase().indexOf(str.toUpperCase()) >= 0;
  }
}","public boolean accept(File dir,String name){
  for (int i=0; i < SKIP_LIST.length; i++)   if (name.equals(SKIP_LIST[i]))   return false;
  final String n=name;
  if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 4);
 else   if (name.endsWith(""String_Node_Str""))   name=name.substring(0,name.length() - 6);
 else   if (!n.equalsIgnoreCase(str))   return false;
  if (n.equalsIgnoreCase(str))   return true;
 else   if (!name.matches(""String_Node_Str""))   return false;
  if (reg) {
    Matcher matcher=pattern.matcher(n);
    return matcher.matches();
  }
 else {
    return n.toUpperCase().indexOf(str.toUpperCase()) >= 0;
  }
}"
16605,"/** 
 * Whether to generate the value directly without ID. <p>Used only for component generated. Not for applications.
 * @since 3.0.0
 */
public boolean isIdRequired(){
  final Component p=getParent();
  return p == null || !isVisible() || !isRawLabel(p) || !Components.isAutoId(getId()) || getContext() != null || getTooltip() != null || getTooltiptext() != null || getPopup() != null || getAction() != null || getDraggable() != null || getDroppable() != null || getStyle() != null || getSclass() != null || getLeft() != null || getTop() != null || getWidth() != null || getHeight() != null || isAsapRequired(Events.ON_CLICK) || isAsapRequired(Events.ON_RIGHT_CLICK) || isAsapRequired(Events.ON_DOUBLE_CLICK);
}","/** 
 * Whether to generate the value directly without ID. <p>Used only for component generated. Not for applications.
 * @since 3.0.0
 */
public boolean isIdRequired(){
  final Component p=getParent();
  return p == null || !isVisible() || !isRawLabel(p) || !Components.isAutoId(getId()) || isAsapRequired(Events.ON_CLICK) || !isEmpty(getStyle()) || !isEmpty(getSclass()) || !isEmpty(getContext()) || !isEmpty(getTooltip()) || !isEmpty(getTooltiptext()) || !isEmpty(getPopup()) || !""String_Node_Str"".equals(getDraggable()) || !""String_Node_Str"".equals(getDroppable()) || isAsapRequired(Events.ON_RIGHT_CLICK) || !isEmpty(getAction()) || !isEmpty(getLeft()) || !isEmpty(getTop()) || !isEmpty(getWidth()) || !isEmpty(getHeight()) || isAsapRequired(Events.ON_DOUBLE_CLICK);
}"
16606,"private void renderTreeChild(Object node,int index){
  Treeitem ti=new Treeitem();
  Object data=_model.getChild(node,index);
  try {
    _renderer.render(ti,data);
  }
 catch (  Throwable ex) {
    try {
      ti.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    ti.setOpen(true);
  }
  if (!_model.isLeaf(data)) {
    Treechildren ch=new Treechildren();
    ch.setParent(ti);
  }
  ti.setParent(_treechildren);
}","private void renderTreeChild(Object node,int index){
  Treeitem ti=new Treeitem();
  Object data=_model.getChild(node,index);
  try {
    getRealRenderer().render(ti,data);
  }
 catch (  Throwable ex) {
    try {
      ti.setLabel(Exceptions.getMessage(ex));
    }
 catch (    Throwable t) {
      log.error(t);
    }
    ti.setOpen(true);
  }
  if (!_model.isLeaf(data)) {
    Treechildren ch=new Treechildren();
    ch.setParent(ti);
  }
  ti.setParent(_treechildren);
}"
16607,"/** 
 * Render the treetiem with given node and its children
 */
private void dfRenderItem(Object node,Treeitem item) throws Exception {
  if (!item.isLoaded()) {
    Treechildren children=null;
    if (item.getTreechildren() != null) {
      children=item.getTreechildren();
      if (children.getItemCount() > 0)       children.getChildren().clear();
    }
 else {
      children=new Treechildren();
      _renderer.render(item,node);
    }
    if (_model.isLeaf(node)) {
      _renderer.render(item,node);
      if (item.getTreechildren() != null)       item.getTreechildren().detach();
    }
 else {
      for (int i=0; i < _model.getChildCount(node); i++) {
        Treeitem ti=new Treeitem();
        Object data=_model.getChild(node,i);
        _renderer.render(ti,data);
        if (!_model.isLeaf(data)) {
          Treechildren ch=new Treechildren();
          ch.setParent(ti);
        }
        ti.setParent(children);
      }
      children.setParent(item);
    }
    item.setLoaded(true);
  }
}","/** 
 * Render the treetiem with given node and its children
 */
private void dfRenderItem(Object node,Treeitem item) throws Exception {
  if (!item.isLoaded()) {
    Treechildren children=null;
    if (item.getTreechildren() != null) {
      children=item.getTreechildren();
      if (children.getItemCount() > 0)       children.getChildren().clear();
    }
 else {
      children=new Treechildren();
      getRealRenderer().render(item,node);
    }
    if (_model.isLeaf(node)) {
      getRealRenderer().render(item,node);
      if (item.getTreechildren() != null)       item.getTreechildren().detach();
    }
 else {
      for (int i=0; i < _model.getChildCount(node); i++) {
        Treeitem ti=new Treeitem();
        Object data=_model.getChild(node,i);
        getRealRenderer().render(ti,data);
        if (!_model.isLeaf(data)) {
          Treechildren ch=new Treechildren();
          ch.setParent(ti);
        }
        ti.setParent(children);
      }
      children.setParent(item);
    }
    item.setLoaded(true);
  }
}"
16608,"private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  afterUnmarshal(-1,-1);
}","private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  init();
  afterUnmarshal(-1,-1);
  if (_model != null)   initDataListener();
}"
16609,"/** 
 * Synchronizes the tree to be consistent with the specified model. <p>Author: jeffliu
 */
private void syncModel() throws Exception {
  if (_renderer == null)   _renderer=getRealRenderer();
  renderTree();
}","/** 
 * Synchronizes the tree to be consistent with the specified model. <p>Author: jeffliu
 */
private void syncModel() throws Exception {
  renderTree();
}"
16610,"/** 
 * Sets the tree model associated with this tree.  <p>Author: jeffliu
 * @param model the tree model to associate, or null to dis-associateany previous model.
 * @exception UiException if failed to initialize with the model
 * @since 3.0.0
 */
public void setModel(TreeModel model) throws Exception {
  _model=model;
  syncModel();
  initDataListener();
}","/** 
 * Sets the tree model associated with this tree.  <p>Author: jeffliu
 * @param model the tree model to associate, or null to dis-associateany previous model.
 * @exception UiException if failed to initialize with the model
 * @since 3.0.0
 */
public void setModel(TreeModel model) throws Exception {
  if (model != null) {
    if (_model != model) {
      if (_model != null) {
        _model.removeTreeDataListener(_dataListener);
      }
 else {
        getItems().clear();
      }
      _model=model;
      initDataListener();
    }
    syncModel();
  }
 else   if (_model != null) {
    _model.removeTreeDataListener(_dataListener);
    _model=null;
    getItems().clear();
  }
}"
16611,"public Object clone(){
  int cntSel=_selItems.size();
  final Tree clone=(Tree)super.clone();
  clone.init();
  int cnt=0;
  if (_treecols != null)   ++cnt;
  if (_treefoot != null)   ++cnt;
  if (_treechildren != null)   ++cnt;
  if (cnt > 0 || cntSel > 0)   clone.afterUnmarshal(cnt,cntSel);
  return clone;
}","public Object clone(){
  int cntSel=_selItems.size();
  final Tree clone=(Tree)super.clone();
  clone.init();
  int cnt=0;
  if (_treecols != null)   ++cnt;
  if (_treefoot != null)   ++cnt;
  if (_treechildren != null)   ++cnt;
  if (cnt > 0 || cntSel > 0)   clone.afterUnmarshal(cnt,cntSel);
  if (clone._model != null) {
    clone._dataListener=null;
    clone.initDataListener();
  }
  return clone;
}"
16612,"private void onTreeDataChange(TreeDataEvent event){
  Object data=event.getParent();
  Component parent=getChildByNode(data);
  int indexFrom=event.getIndexFrom();
  int indexTo=event.getIndexTo();
switch (event.getType()) {
case TreeDataEvent.INTERVAL_ADDED:
    for (int i=indexFrom; i <= indexTo; i++)     onTreeDataInsert(parent,data,i);
  break;
case TreeDataEvent.INTERVAL_REMOVED:
for (int i=indexTo; i >= indexFrom; i--) onTreeDataRemoved(parent,data,i);
break;
case TreeDataEvent.CONTENTS_CHANGED:
for (int i=indexFrom; i <= indexTo; i++) onTreeDataContentChanged(parent,data,i);
break;
}
}","private void onTreeDataChange(TreeDataEvent event){
  Object data=event.getParent();
  Component parent=getChildByNode(data);
  int indexFrom=event.getIndexFrom();
  int indexTo=event.getIndexTo();
  if (parent != null) {
switch (event.getType()) {
case TreeDataEvent.INTERVAL_ADDED:
      for (int i=indexFrom; i <= indexTo; i++)       onTreeDataInsert(parent,data,i);
    break;
case TreeDataEvent.INTERVAL_REMOVED:
  for (int i=indexTo; i >= indexFrom; i--)   onTreeDataRemoved(parent,data,i);
break;
case TreeDataEvent.CONTENTS_CHANGED:
for (int i=indexFrom; i <= indexTo; i++) onTreeDataContentChanged(parent,data,i);
break;
}
}
}"
16613,"/** 
 * Return the Tree or Treeitem component by a given associated node in model.<br> This implmentation calls   {@link TreeModel#getPath} method to locate assoicatedTreeitem (or Tree) via path. You can override this method to speed up  performance if possible.
 * @since 3.0.0
 */
protected Component getChildByNode(Object node){
  int[] path=_model.getPath(_model.getRoot(),node);
  if (path == null || path.length == 0)   return this;
 else {
    Treeitem ti=(Treeitem)this.getTreechildren().getChildren().get(path[0]);
    for (int i=1; i < path.length; i++) {
      ti=(Treeitem)ti.getTreechildren().getChildren().get(path[i]);
    }
    return ti;
  }
}","/** 
 * Return the Tree or Treeitem component by a given associated node in model.<br> This implmentation calls   {@link TreeModel#getPath} method to locate assoicatedTreeitem (or Tree) via path. You can override this method to speed up  performance if possible.  Return null, if the Tree or Treeitem is not yet rendered.
 * @since 3.0.0
 */
protected Component getChildByNode(Object node){
  int[] path=_model.getPath(_model.getRoot(),node);
  if (path == null || path.length == 0)   return this;
 else {
    Treeitem ti=null;
    for (int i=1; i < path.length; i++) {
      List children=ti.getTreechildren().getChildren();
      if (children.size() > path[i] && 0 <= path[i]) {
        ti=(Treeitem)children.get(path[i]);
      }
 else {
        return null;
      }
    }
    return ti;
  }
}"
16614,"void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Page page=this._roottag.getPage();
    _compDef=page.getComponentDefinition(_tag,true);
    if (_compDef == null)     throw new JspException(""String_Node_Str"" + _tag);
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      if (super.getUse() != null)       _comps=new Component[]{_comp=(Component)Class.forName(getUse()).newInstance()};
 else       if (useClass instanceof String)       _comps=new Component[]{_comp=_compDef.newInstance(page,useClass.toString())};
 else {
        Class clazz=(Class)useClass;
        _comps=new Component[]{_comp=(Component)clazz.newInstance()};
      }
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    if (!_compDef.isInlineMacro())     composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    if (!_compDef.isInlineMacro())     composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}","void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Page page=this._roottag.getPage();
    _compDef=page.getComponentDefinition(_tag,true);
    if (_compDef == null)     throw new JspException(""String_Node_Str"" + _tag);
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      String clazzName=null;
      if (super.getUse() != null)       clazzName=getUse();
 else       if (useClass instanceof String)       clazzName=(String)useClass;
 else       clazzName=((Class)useClass).getName();
      _comps=new Component[]{_comp=_compDef.newInstance(page,clazzName)};
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    if (!_compDef.isInlineMacro())     composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    if (!_compDef.isInlineMacro())     composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}"
16615,"public void onEvent(Event evt) throws Exception {
  final Method mtd=ComponentsCtrl.getEventMethod(this.getClass(),evt.getName());
  if (mtd != null) {
    if (mtd.getParameterTypes().length == 0)     mtd.invoke(this,null);
 else     mtd.invoke(this,new Object[]{evt.getData()});
  }
}","public void onEvent(Event evt) throws Exception {
  final Method mtd=ComponentsCtrl.getEventMethod(this.getClass(),evt.getName());
  if (mtd != null) {
    if (mtd.getParameterTypes().length == 0)     mtd.invoke(this,null);
 else     mtd.invoke(this,evt);
  }
}"
16616,"void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Page page=this._roottag.getPage();
    _compDef=page.getComponentDefinition(_tag,true);
    if (_compDef == null)     throw new JspException(""String_Node_Str"" + _tag);
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      String clazzName=null;
      if (super.getUse() != null)       clazzName=getUse();
 else       if (useClass instanceof String)       clazzName=(String)useClass;
 else       clazzName=((Class)useClass).getName();
      _comps=new Component[]{_comp=_compDef.newInstance(page,clazzName)};
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}","void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  Page page=this._roottag.getPage();
  _compDef=page.getComponentDefinition(_tag,true);
  if (_compDef == null)   throw new JspException(""String_Node_Str"" + _tag);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      String clazzName=null;
      if (super.getUse() != null)       clazzName=getUse();
 else       if (useClass instanceof String)       clazzName=(String)useClass;
 else       clazzName=((Class)useClass).getName();
      _comps=new Component[]{_comp=_compDef.newInstance(page,clazzName)};
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    if (!_compDef.isInlineMacro())     composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    if (!_compDef.isInlineMacro())     composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}"
16617,"void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Page page=this._roottag.getPage();
    _compDef=page.getComponentDefinition(_tag,true);
    if (_compDef == null)     throw new JspException(""String_Node_Str"" + _tag);
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      String clazzName=null;
      if (super.getUse() != null)       clazzName=getUse();
 else       if (useClass instanceof String)       clazzName=(String)useClass;
 else       clazzName=((Class)useClass).getName();
      _comps=new Component[]{_comp=_compDef.newInstance(page,clazzName)};
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    if (!_compDef.isInlineMacro())     composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    if (!_compDef.isInlineMacro())     composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}","void initComponent() throws JspException {
  if (_roottag == null)   throw new IllegalStateException(""String_Node_Str"" + this);
  composeHandle=new ComposerHandler(_attrMap.remove(""String_Node_Str""));
  try {
    Page page=this._roottag.getPage();
    _compDef=page.getComponentDefinition(_tag,true);
    if (_compDef == null)     throw new JspException(""String_Node_Str"" + _tag);
    Object useClass=_compDef.getImplementationClass();
    if (_compDef.isInlineMacro()) {
      final Map props=new HashMap();
      Component parent=this._parenttag.getComponent();
      props.put(""String_Node_Str"",parent);
      _compDef.evalProperties(props,page,parent);
      props.putAll(_attrMap);
      if (this.getUse() != null)       props.put(""String_Node_Str"",this.getUse());
      _comps=parent.getDesktop().getExecution().createComponents(_compDef.getMacroURI(),props);
    }
 else {
      String clazzName=null;
      if (super.getUse() != null)       clazzName=getUse();
 else       if (useClass instanceof String)       clazzName=(String)useClass;
 else       clazzName=((Class)useClass).getName();
      _comps=new Component[]{_comp=_compDef.newInstance(page,clazzName)};
      composeHandle.doBeforeComposeChildren(_comp);
      _comp.getDefinition().applyProperties(_comp);
    }
  }
 catch (  Exception e) {
    composeHandle.doCatch(e);
    throw new JspException(e);
  }
 finally {
    composeHandle.doFinally();
  }
  if (_parenttag != null)   _parenttag.addChildTag(this);
 else   _roottag.addChildTag(this);
}"
16618,"/** 
 * Creates and returns the page.
 */
protected void init(Execution exec,Page page){
  super.init(exec,page);
  Map compDefs=(Map)getJspContext().getAttribute(Const.CONTEXT_KEY);
  for (Iterator it=compDefs.values().iterator(); it.hasNext(); )   ((ComponentDefinitionTag)it.next()).registComponentDefinition(page);
  page.setId(_id);
  page.setStyle(_style);
}","/** 
 * Creates and returns the page.
 */
protected void init(Execution exec,Page page){
  super.init(exec,page);
  Map compDefs=(Map)getJspContext().getAttribute(Const.CONTEXT_KEY);
  if (compDefs != null) {
    for (Iterator it=compDefs.values().iterator(); it.hasNext(); )     ((ComponentDefinitionTag)it.next()).registComponentDefinition(page);
  }
  page.setId(_id);
  page.setStyle(_style);
}"
16619,"/** 
 * after children creation do dynamic attributes setter work and registers event handler. Called by   {@link #doTag}.
 * @throws JspException 
 */
void afterComposeComponent() throws JspException {
  if (_comp == null)   throw new JspTagException(""String_Node_Str"");
  try {
    evaluateDynaAttributes(_comp,_attrMap);
  }
 catch (  ModificationException e) {
    throw new JspException(e);
  }
catch (  NoSuchMethodException e) {
    throw new JspException(e);
  }
  if (_comp instanceof AfterCompose)   ((AfterCompose)_comp).afterCompose();
  composeHandle.doAfterCompose(_comp);
  ComponentsCtrl.applyForward(_comp,_forward);
  if (Events.isListened(_comp,Events.ON_CREATE,false))   Events.postEvent(new CreateEvent(Events.ON_CREATE,_comp,Executions.getCurrent().getArg()));
  for (Iterator itor=_eventListenerMap.entrySet().iterator(); itor.hasNext(); ) {
    Map.Entry entry=(Map.Entry)itor.next();
    final ZScript zscript=ZScript.parseContent((String)entry.getValue());
    ((ComponentCtrl)_comp).addEventHandler((String)entry.getKey(),new EventHandler(zscript,null));
  }
}","/** 
 * after children creation do dynamic attributes setter work and registers event handler. Called by   {@link #doTag}.
 * @throws JspException 
 */
void afterComposeComponent() throws JspException {
  if (_comp == null)   throw new JspTagException(""String_Node_Str"");
  try {
    evaluateDynaAttributes(_comp,_attrMap);
  }
 catch (  ModificationException e) {
    throw new JspException(e);
  }
catch (  NoSuchMethodException e) {
    throw new JspException(e);
  }
  if (_comp instanceof AfterCompose)   ((AfterCompose)_comp).afterCompose();
  composeHandle.doAfterCompose(_comp);
  ComponentsCtrl.applyForward(_comp,_forward);
  for (Iterator itor=_eventListenerMap.entrySet().iterator(); itor.hasNext(); ) {
    Map.Entry entry=(Map.Entry)itor.next();
    final ZScript zscript=ZScript.parseContent((String)entry.getValue());
    ((ComponentCtrl)_comp).addEventHandler((String)entry.getKey(),new EventHandler(zscript,null));
  }
  if (Events.isListened(_comp,Events.ON_CREATE,false))   Events.postEvent(new CreateEvent(Events.ON_CREATE,_comp,Executions.getCurrent().getArg()));
}"
16620,"/** 
 * Returns the implementaion class of the epxrerssion factory, or null to use the default.
 */
public Class getExpressionFactoryClass(){
  return _expfcls;
}","/** 
 * Returns the implementation class of the expression factory, or null to use the default.
 */
public Class getExpressionFactoryClass(){
  return _expfcls;
}"
16621,"/** 
 * Returns the XEL context.
 */
private XelContext getXelContext(Object ref){
  final FunctionMapper mapper=getFunctionMapper(ref);
  final VariableResolver resolver=getVariableResolver(ref);
  if (_xelc == null) {
    _xelc=new SimpleXelContext(resolver,mapper);
  }
 else {
    _xelc.setVariableResolver(resolver);
    _xelc.setFunctionMapper(mapper);
  }
  return _xelc;
}","/** 
 * Returns the XEL context.
 */
private XelContext getXelContext(Object ref){
  final FunctionMapper mapper=getFunctionMapper(ref);
  final VariableResolver resolver=getVariableResolver(ref);
  SimpleXelContext xelc=new SimpleXelContext(resolver,mapper);
  return xelc;
}"
16622,"public void render(Component comp,Writer out) throws IOException {
  final WriterHelper wh=new WriterHelper(out);
  final Caption self=(Caption)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  final String imgTag=self.getImgTag();
  if (self.isLegend()) {
    final String label=self.getLabel();
    wh.write(""String_Node_Str"").write(imgTag).write(XMLs.escapeXML(label));
    for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
      final Component child=(Component)it.next();
      child.redraw(out);
    }
    wh.write(""String_Node_Str"");
  }
 else {
    final String clabel=self.getCompoundLabel();
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getOuterAttrs()).write(self.getInnerAttrs());
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(imgTag);
    if (clabel == null || clabel.trim().length() == 0) {
      wh.write(""String_Node_Str"");
    }
 else {
      wh.write(XMLs.escapeXML(clabel));
    }
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
      final Component child=(Component)it.next();
      child.redraw(out);
    }
    if (self.isClosableVisible()) {
      wh.write(""String_Node_Str"").write(self.getParent().getUuid()).write(""String_Node_Str"");
      wh.write(exec.encodeURL(""String_Node_Str"")).write(""String_Node_Str"");
    }
    wh.writeln(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final WriterHelper wh=new WriterHelper(out);
  final Caption self=(Caption)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  final String imgTag=self.getImgTag();
  if (self.isLegend()) {
    final String label=self.getLabel();
    wh.write(""String_Node_Str"").write(imgTag).write(XMLs.escapeXML(label));
    for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
      final Component child=(Component)it.next();
      child.redraw(out);
    }
    wh.write(""String_Node_Str"");
  }
 else {
    final String clabel=self.getCompoundLabel();
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(self.getOuterAttrs()).write(self.getInnerAttrs());
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(imgTag);
    if (clabel == null || clabel.trim().length() == 0) {
      wh.write(""String_Node_Str"");
    }
 else {
      wh.write(XMLs.escapeXML(clabel));
    }
    wh.write(""String_Node_Str"");
    wh.write(""String_Node_Str"").write(uuid).write(""String_Node_Str"");
    for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
      final Component child=(Component)it.next();
      child.redraw(out);
    }
    wh.write(""String_Node_Str"");
    if (self.isClosableVisible()) {
      wh.write(""String_Node_Str"").write(self.getParent().getUuid()).write(""String_Node_Str"");
      wh.write(exec.encodeURL(""String_Node_Str"")).write(""String_Node_Str"");
    }
    wh.writeln(""String_Node_Str"");
  }
}"
16623,"public void render(Component comp,Writer out) throws IOException {
  final Groupbox self=(Groupbox)comp;
  final Caption caption=self.getCaption();
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(self.getOuterAttrs());
  out.write(self.getInnerAttrs());
  out.write(""String_Node_Str"");
  if (caption != null) {
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    caption.redraw(out);
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
  }
  String gcExtStyle=""String_Node_Str"";
  if (caption != null) {
    gcExtStyle+=""String_Node_Str"";
  }
  gcExtStyle+=self.getContentStyle();
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  if (self.isOpen()) {
  }
 else {
    out.write(""String_Node_Str"");
  }
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(self.getContentSclass());
  out.write(""String_Node_Str"");
  if (gcExtStyle.length() > 0) {
    out.write(""String_Node_Str"");
    out.write(gcExtStyle);
    out.write('""');
  }
  out.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     child.redraw(out);
  }
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(self.getUuid());
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(exec.encodeURL(""String_Node_Str""));
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final Groupbox self=(Groupbox)comp;
  final Caption caption=self.getCaption();
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(self.getOuterAttrs());
  out.write(self.getInnerAttrs());
  out.write(""String_Node_Str"");
  if (caption != null) {
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    caption.redraw(out);
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
  }
  String gcExtStyle=""String_Node_Str"";
  if (caption != null) {
    gcExtStyle+=""String_Node_Str"";
  }
  final String cs=self.getContentStyle();
  if (cs != null) {
    gcExtStyle+=cs;
  }
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  if (self.isOpen()) {
  }
 else {
    out.write(""String_Node_Str"");
  }
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(self.getContentSclass());
  out.write(""String_Node_Str"");
  if (gcExtStyle.length() > 0) {
    out.write(""String_Node_Str"");
    out.write(gcExtStyle);
    out.write('""');
  }
  out.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     child.redraw(out);
  }
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(self.getUuid());
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(exec.encodeURL(""String_Node_Str""));
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
  out.write(""String_Node_Str"");
}"
16624,"public void render(Component comp,Writer out) throws IOException {
  final Label self=(Label)comp;
  final boolean idRequired=self.isIdRequired();
  if (idRequired) {
    out.write(""String_Node_Str"");
    out.write(self.getUuid());
    out.write(""String_Node_Str"");
    out.write(self.getOuterAttrs());
    out.write(self.getInnerAttrs());
    out.write('>');
  }
  out.write(self.getEncodedText());
  if (idRequired)   out.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final WriterHelper wh=new WriterHelper(out);
  final Label self=(Label)comp;
  final boolean idRequired=self.isIdRequired();
  if (idRequired) {
    wh.write(""String_Node_Str"").write(self.getUuid()).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs());
    wh.write(""String_Node_Str"");
  }
  wh.writeln(self.getEncodedText());
  if (idRequired)   wh.writeln(""String_Node_Str"");
}"
16625,"public void render(Component comp,Writer out) throws IOException {
  final Textbox self=(Textbox)comp;
  final boolean isMultiline=self.isMultiline();
  if (isMultiline) {
    out.write(""String_Node_Str"");
    out.write(self.getUuid());
    out.write(""String_Node_Str"");
    out.write(self.getOuterAttrs());
    out.write(self.getOuterAttrs());
    out.write(self.getInnerAttrs());
    out.write(""String_Node_Str"");
    out.write(self.getAreaText());
    out.write(""String_Node_Str"");
  }
 else {
    out.write(""String_Node_Str"");
    out.write(self.getUuid());
    out.write(""String_Node_Str"");
    out.write(self.getOuterAttrs());
    out.write(self.getInnerAttrs());
    out.write(""String_Node_Str"");
  }
}","public void render(Component comp,Writer out) throws IOException {
  final WriterHelper wh=new WriterHelper(out);
  final Textbox self=(Textbox)comp;
  final boolean isMultiline=self.isMultiline();
  if (isMultiline) {
    wh.write(""String_Node_Str"").write(self.getUuid()).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write(""String_Node_Str"");
    wh.write(self.getAreaText());
    wh.writeln(""String_Node_Str"");
  }
 else {
    wh.write(""String_Node_Str"").write(self.getUuid()).write(""String_Node_Str"");
    wh.write(self.getOuterAttrs()).write(self.getInnerAttrs());
    wh.writeln(""String_Node_Str"");
  }
}"
16626,"public void render(Component comp,Writer out) throws IOException {
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(self.getOuterAttrs());
  out.write(self.getInnerAttrs());
  out.write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle(), titlesc=self.getTitleSclass();
  String wcExtStyle=""String_Node_Str"";
  if (caption == null && title.length() == 0) {
    if (exec.isExplorer() && !exec.isExplorer7()) {
      out.write(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    out.write(""String_Node_Str"");
    if (caption == null) {
      out.write(""String_Node_Str"");
      out.write(uuid);
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
      out.write(XMLs.escapeXML(title));
      out.write(""String_Node_Str"");
      if (self.isClosable()) {
        out.write(""String_Node_Str"");
        out.write(titlesc);
        out.write(""String_Node_Str"");
        out.write(uuid);
        out.write(""String_Node_Str"");
        out.write(exec.encodeURL(""String_Node_Str""));
        out.write(""String_Node_Str"");
      }
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
    }
 else {
      out.write(""String_Node_Str"");
      out.write(uuid);
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
      caption.redraw(out);
      out.write(""String_Node_Str"");
      out.write(titlesc);
      out.write(""String_Node_Str"");
    }
    out.write(""String_Node_Str"");
    wcExtStyle=""String_Node_Str"";
  }
  wcExtStyle+=self.getContentStyle();
  out.write(""String_Node_Str"");
  out.write(uuid);
  out.write(""String_Node_Str"");
  out.write(self.getContentSclass());
  out.write(""String_Node_Str"");
  if (wcExtStyle.length() > 0) {
    out.write(""String_Node_Str"");
    out.write(wcExtStyle);
    out.write('""');
  }
  out.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     child.redraw(out);
  }
  out.write(""String_Node_Str"");
}","public void render(Component comp,Writer out) throws IOException {
  final WriterHelper wh=new WriterHelper(out);
  final Window self=(Window)comp;
  final String uuid=self.getUuid();
  final Execution exec=Executions.getCurrent();
  wh.write(""String_Node_Str"");
  wh.write(uuid);
  wh.write(""String_Node_Str"");
  wh.write(self.getOuterAttrs());
  wh.write(self.getInnerAttrs());
  wh.write(""String_Node_Str"");
  final Caption caption=self.getCaption();
  final String title=self.getTitle(), titlesc=self.getTitleSclass();
  String wcExtStyle=""String_Node_Str"";
  if (caption == null && title.length() == 0) {
    if (exec.isExplorer() && !exec.isExplorer7()) {
      wh.write(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    wh.write(""String_Node_Str"");
    if (caption == null) {
      wh.write(""String_Node_Str"");
      wh.write(uuid);
      wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
      wh.write(XMLs.escapeXML(title));
      wh.write(""String_Node_Str"");
      if (self.isClosable()) {
        wh.write(""String_Node_Str"");
        wh.write(titlesc);
        wh.write(""String_Node_Str"");
        wh.write(uuid);
        wh.write(""String_Node_Str"");
        wh.write(exec.encodeURL(""String_Node_Str""));
        wh.write(""String_Node_Str"");
      }
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
    }
 else {
      wh.write(""String_Node_Str"");
      wh.write(uuid);
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
      caption.redraw(out);
      wh.write(""String_Node_Str"");
      wh.write(titlesc);
      wh.write(""String_Node_Str"");
    }
    wh.write(""String_Node_Str"");
    wcExtStyle=""String_Node_Str"";
  }
  final String cs=self.getContentStyle();
  if (cs != null) {
    wcExtStyle+=cs;
  }
  wh.write(""String_Node_Str"");
  wh.write(uuid);
  wh.write(""String_Node_Str"");
  wh.write(self.getContentSclass());
  wh.write(""String_Node_Str"");
  if (wcExtStyle.length() > 0) {
    wh.write(""String_Node_Str"");
    wh.write(wcExtStyle);
    wh.write(""String_Node_Str"");
  }
  wh.write(""String_Node_Str"");
  for (Iterator it=self.getChildren().iterator(); it.hasNext(); ) {
    final Component child=(Component)it.next();
    if (child != caption)     child.redraw(out);
  }
  wh.write(""String_Node_Str"");
}"
16627,"public boolean insertBefore(Component child,Component insertBefore){
  if (!(child instanceof Treeitem))   throw new UiException(""String_Node_Str"" + child);
  if (super.insertBefore(child,insertBefore)) {
    final int pgsz=getPageSize();
    if (pgsz > 0) {
      final int sz=getChildren().size();
      if (sz > 1 && (sz % pgsz) == 1)       smartUpdatePaging();
    }
    return true;
  }
  return false;
}","public boolean insertBefore(Component child,Component insertBefore){
  if (!(child instanceof Treeitem))   throw new UiException(""String_Node_Str"" + child);
  if (super.insertBefore(child,insertBefore)) {
    final int sz=getChildren().size();
    if (sz == 1) {
      Executions.getCurrent().setAttribute(ATTR_NO_CHILD,Boolean.TRUE);
    }
 else {
      final int pgsz=getPageSize();
      if (pgsz > 0 && ((sz % pgsz) == 1 || pgsz == 1))       smartUpdatePaging();
    }
    return true;
  }
  return false;
}"
16628,"public void invalidate(){
  final Component parent=getParent();
  if (parent instanceof Tree) {
    parent.invalidate();
  }
 else {
    super.invalidate();
  }
}","public void invalidate(){
  final Component parent=getParent();
  if (parent instanceof Tree) {
    parent.invalidate();
  }
 else   if (!getChildren().isEmpty() && Executions.getCurrent().getAttribute(ATTR_NO_CHILD) == null) {
    super.invalidate();
  }
}"
16629,"public void onChildRemoved(Component child){
  super.onChildRemoved(child);
  final int pgsz=getPageSize();
  if (pgsz > 0) {
    final int sz=getChildren().size();
    if (sz > 0 && (sz % pgsz) == 0) {
      final int pgcnt=smartUpdatePaging();
      if (_actpg >= pgcnt) {
        _actpg=pgcnt - 1;
        getParent().invalidate();
      }
    }
  }
}","public void onChildRemoved(Component child){
  super.onChildRemoved(child);
  final int pgsz=getPageSize();
  if (pgsz > 0) {
    final int sz=getChildren().size();
    if (sz > 0 && ((sz % pgsz) == 0 || pgsz == 1)) {
      final int pgcnt=smartUpdatePaging();
      if (_actpg >= pgcnt) {
        _actpg=pgcnt - 1;
        getParent().invalidate();
      }
    }
  }
}"
16630,"/** 
 * Returns the value of a variable defined in the namespace, or null if not defined or the value is null. <p>This method is the same as getNamespace().getVariable(name, local). <h3>Differences between   {@link #getVariable} and {@link #getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (and {@link Namespace#setVariable}. On the other hand,   {@link #getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @param local whether not to search its ancestor.If false and the current namespace doen't define the variable, it searches up its ancestor (via  {@link #getParent}) to see any of them has defined the specified variable.
 * @see #getSpaceOwner
 * @see #getNamespace
 */
public Object getVariable(String name,boolean local);","/** 
 * Returns the value of a variable defined in the namespace, or null if not defined or the value is null. <p>This method is the same as getNamespace().getVariable(name, local). <h3>Differences between   {@link #getVariable} and {@link Page#getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (i.e., a shortcut of {@link Namespace#setVariable}). On the other hand,   {@link Page#getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @param local whether not to search its ancestor.If false and the current namespace doen't define the variable, it searches up its ancestor (via  {@link #getParent}) to see any of them has defined the specified variable.
 * @see #getSpaceOwner
 * @see #getNamespace
 */
public Object getVariable(String name,boolean local);"
16631,"/** 
 * Returns the namespace to store variables and functions belonging to the ID space of this component. <p>Exactly one namespace is allocated for each ID space. For example, if the space owner of this component is the page, then the returned namespace is the same as   {@link Page#getNamespace}. Otherwise, it is the same as the namspace returned by the component owning this ID space. <p>Namspace is another part of an ID space. It holds only variables defined thru   {@link #setVariable} (and {@link Namespace#setVariable}. <p>Note: The namespace doesn't include any variable defined by executing zscripts. To retrieve them, use   {@link #getZScriptVariable}.
 * @see #getSpaceOwner
 */
public Namespace getNamespace();","/** 
 * Returns the namespace to store variables and functions belonging to the ID space of this component. <p>Exactly one namespace is allocated for each ID space. For example, if the space owner of this component is the page, then the returned namespace is the same as   {@link Page#getNamespace}. Otherwise, it is the same as the namspace returned by the component owning this ID space. <p>Namspace is another part of an ID space. It holds only variables defined thru   {@link #setVariable} (and {@link Namespace#setVariable}. <p>Note: The namespace doesn't include any variable defined by executing zscripts. To retrieve them, use   {@link Page#getZScriptVariable}.
 * @see #getSpaceOwner
 */
public Namespace getNamespace();"
16632,"/** 
 * Returns the class of the specified name by searching the thread class loader and the classes defined in the loaded interpreters.
 * @return the class, or null if not found
 * @see #getLoadedInterpreters
 */
public Class getZScriptClass(String clsnm);","/** 
 * Returns the class of the specified name by searching the thread class loader and the classes defined in the loaded interpreters. <p>Note: it also looks for the class by use of the current thread's class loader.
 * @return the class, or null if not found
 * @see #getLoadedInterpreters
 */
public Class getZScriptClass(String clsnm);"
16633,"/** 
 * Returns the value of a variable defined in the namespace (  {@link #getNamespace}). <p>It is the same as getNamespace().getVariable(name, true). <h3>Differences between   {@link #getVariable} and {@link #getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (and {@link Namespace#setVariable}. On the other hand,   {@link #getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @see Component#getVariable
 * @see Component#getNamespace
 */
public Object getVariable(String name);","/** 
 * Returns the value of a variable defined in the namespace (  {@link #getNamespace}). <p>It is the same as getNamespace().getVariable(name, true). <h3>Differences between   {@link #getVariable} and {@link #getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (i.e., a shortcut to {@link Namespace#setVariable}). On the other hand,   {@link #getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @see Component#getVariable
 * @see Component#getNamespace
 */
public Object getVariable(String name);"
16634,"/** 
 * Gets a variable that is visible to EL expressions. <p>This method is mainly used to access special variable, such as request parameters (if this page is requested by HTTP). <p>Note: components that are specified with an ID are already accessible by   {@link #getVariable}.
 */
public Object getELVariable(String name);","/** 
 * Returns a variable that is visible to EL expressions. <p>This method is mainly used to access special variable, such as request parameters (if this page is requested by HTTP). <p>Note: components that are specified with an ID are already accessible by   {@link #getVariable}.
 */
public Object getELVariable(String name);"
16635,"/** 
 * Returns the value of the variable of the specified name by searching the namespaces and the loaded interpreters. <h3>Differences between   {@link #getVariable} and {@link #getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (and {@link Namespace#setVariable}. On the other hand,   {@link #getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @return the value of the variable, or null if not found
 * @see #getLoadedInterpreters
 */
public Object getZScriptVariable(String name);","/** 
 * Returns the value of the variable of the specified name by searching the namespaces and the loaded interpreters. <h3>Differences between   {@link #getVariable} and {@link #getZScriptVariable}</h3> <p>  {@link #getVariable} returns only variables defined by{@link #setVariable} (i.e., a shortcut to {@link Namespace#setVariable}). On the other hand,   {@link #getZScriptVariable} returns these variablesand those defined when executing zscripts.
 * @return the value of the variable, or null if not found
 * @see #getLoadedInterpreters
 */
public Object getZScriptVariable(String name);"
16636,"public Object resolveVariable(String name) throws ELException {
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getPage();
    if (_self instanceof Page)     return (Page)_self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return (Page)_self;
    return null;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (!Names.isReserved(name)) {
    Page page=null;
    if (_self instanceof Component) {
      final Component comp=(Component)_self;
      final Object o=comp.getZScriptVariable(name);
      if (o != null)       return o;
    }
 else     if (_self instanceof Page) {
      page=(Page)_self;
    }
 else {
      page=((ExecutionCtrl)_exec).getCurrentPage();
    }
    if (page != null) {
      final Object o=page.getZScriptVariable(name);
      if (o != null)       return o;
    }
  }
  return _parent != null ? _parent.resolveVariable(name) : null;
}","public Object resolveVariable(String name) throws ELException {
  if (""String_Node_Str"".equals(name))   return _self;
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.PAGE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    final Page page=((ExecutionCtrl)_exec).getCurrentPage();
    return page != null ? page.getAttributes() : Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getPage();
    if (_self instanceof Page)     return (Page)_self;
    return ((ExecutionCtrl)_exec).getCurrentPage();
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getSpaceOwner();
    if (_self instanceof Page)     return (Page)_self;
    return null;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop().getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getDesktop();
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.SPACE_SCOPE);
    if (_self instanceof Page)     return ((Page)_self).getAttributes();
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name)) {
    if (_self instanceof Component)     return ((Component)_self).getAttributes(Component.COMPONENT_SCOPE);
    return Collections.EMPTY_MAP;
  }
  if (""String_Node_Str"".equals(name))   return _exec.getAttributes();
  if (""String_Node_Str"".equals(name))   return _exec.getArg();
  if (!Names.isReserved(name)) {
    if (_self instanceof Component) {
      final Component comp=(Component)_self;
      final Page page=comp.getPage();
      if (page != null) {
        final Object o=page.getZScriptVariable(name);
        if (o != null)         return o;
      }
      final Object o=comp.getVariable(name,false);
      if (o != null)       return o;
    }
 else {
      Page page;
      if (_self instanceof Page) {
        page=(Page)_self;
      }
 else {
        page=((ExecutionCtrl)_exec).getCurrentPage();
      }
      if (page != null) {
        Object o=page.getZScriptVariable(name);
        if (o != null)         return o;
        o=page.getVariable(name);
        if (o != null)         return o;
      }
    }
  }
  return _parent != null ? _parent.resolveVariable(name) : null;
}"
16637,"public Class getZScriptClass(String clsnm){
  try {
    return Classes.forNameByThread(clsnm);
  }
 catch (  ClassNotFoundException ex) {
    for (Iterator it=getLoadedInterpreters().iterator(); it.hasNext(); ) {
      Class cls=((Interpreter)it.next()).getClass(clsnm);
      if (cls != null)       return cls;
    }
    return null;
  }
}","public Class getZScriptClass(String clsnm){
  for (Iterator it=getLoadedInterpreters().iterator(); it.hasNext(); ) {
    Class cls=((Interpreter)it.next()).getClass(clsnm);
    if (cls != null)     return cls;
  }
  try {
    return Classes.forNameByThread(clsnm);
  }
 catch (  ClassNotFoundException ex) {
    return null;
  }
}"
16638,"public Object getZScriptVariable(String name){
  Object val=getVariable(name);
  if (val != null)   return val;
  for (Iterator it=getLoadedInterpreters().iterator(); it.hasNext(); ) {
    val=((Interpreter)it.next()).getVariable(name,true);
    if (val != null)     return val;
  }
  return null;
}","public Object getZScriptVariable(String name){
  for (Iterator it=getLoadedInterpreters().iterator(); it.hasNext(); ) {
    final Object val=((Interpreter)it.next()).getVariable(name,true);
    if (val != null)     return val;
  }
  return null;
}"
16639,"public PagedList<Album> getAlbums(String userId,PagingParameters pagedListParameters){
  return graphApi.fetchConnections(userId,""String_Node_Str"",Album.class,getPagingParameters(pagedListParameters));
}","public PagedList<Album> getAlbums(String userId,PagingParameters pagedListParameters){
  return graphApi.fetchConnections(userId,""String_Node_Str"",Album.class,getPagingParameters(pagedListParameters),ALL_ALBUM_FIELDS);
}"
16640,"public MultiValueMap<String,Object> toRequestParameters(){
  MultiValueMap<String,Object> parameters=new LinkedMultiValueMap<String,Object>();
  if (about != null) {
    parameters.add(""String_Node_Str"",about);
  }
  if (bio != null) {
    parameters.add(""String_Node_Str"",bio);
  }
  if (cover != null) {
    parameters.add(""String_Node_Str"",cover);
  }
  if (name != null) {
    parameters.add(""String_Node_Str"",name);
  }
  if (offsetX != null) {
    parameters.add(""String_Node_Str"",offsetX.toString());
  }
  if (offsetY != null) {
    parameters.add(""String_Node_Str"",offsetY.toString());
  }
  if (zoomScaleX != null) {
    parameters.add(""String_Node_Str"",zoomScaleX.toString());
  }
  if (zoomScaleY != null) {
    parameters.add(""String_Node_Str"",zoomScaleY.toString());
  }
  if (focusX != null) {
    parameters.add(""String_Node_Str"",focusX.toString());
  }
  if (focusY != null) {
    parameters.add(""String_Node_Str"",focusY.toString());
  }
  return parameters;
}","public MultiValueMap<String,Object> toRequestParameters(){
  MultiValueMap<String,Object> parameters=new LinkedMultiValueMap<String,Object>();
  if (about != null) {
    parameters.add(""String_Node_Str"",about);
  }
  if (cover != null) {
    parameters.add(""String_Node_Str"",cover);
  }
  if (name != null) {
    parameters.add(""String_Node_Str"",name);
  }
  if (offsetX != null) {
    parameters.add(""String_Node_Str"",offsetX.toString());
  }
  if (offsetY != null) {
    parameters.add(""String_Node_Str"",offsetY.toString());
  }
  if (zoomScaleX != null) {
    parameters.add(""String_Node_Str"",zoomScaleX.toString());
  }
  if (zoomScaleY != null) {
    parameters.add(""String_Node_Str"",zoomScaleY.toString());
  }
  if (focusX != null) {
    parameters.add(""String_Node_Str"",focusX.toString());
  }
  if (focusY != null) {
    parameters.add(""String_Node_Str"",focusY.toString());
  }
  return parameters;
}"
16641,"@Test public void getUserProfile_currentUser(){
  mockServer.expect(requestTo(fbUrl(""String_Node_Str"" + PROFILE_FIELDS))).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),MediaType.APPLICATION_JSON));
  User profile=facebook.userOperations().getUserProfile();
  assertBasicProfileData(profile,true);
  assertEquals(""String_Node_Str"",profile.getEmail());
  assertEquals(""String_Node_Str"",profile.getLink());
  assertEquals(""String_Node_Str"",profile.getThirdPartyId());
  assertEquals(Float.valueOf(-6),profile.getTimezone());
  assertEquals(toDate(""String_Node_Str""),profile.getUpdatedTime());
  assertTrue(profile.isVerified());
  assertEquals(""String_Node_Str"",profile.getAbout());
  assertEquals(""String_Node_Str"",profile.getBio());
  assertEquals(""String_Node_Str"",profile.getBirthday());
  assertEquals(""String_Node_Str"",profile.getLocation().getId());
  assertEquals(""String_Node_Str"",profile.getLocation().getName());
  assertEquals(""String_Node_Str"",profile.getHometown().getId());
  assertEquals(""String_Node_Str"",profile.getHometown().getName());
  assertEquals(""String_Node_Str"",profile.getReligion());
  assertEquals(""String_Node_Str"",profile.getPolitical());
  assertEquals(""String_Node_Str"",profile.getQuotes());
  assertEquals(""String_Node_Str"",profile.getRelationshipStatus());
  assertEquals(""String_Node_Str"",profile.getSignificantOther().getId());
  assertEquals(""String_Node_Str"",profile.getSignificantOther().getName());
  assertEquals(""String_Node_Str"",profile.getWebsite());
  assertEquals(3,profile.getInspirationalPeople().size());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(2).getName());
  assertEquals(2,profile.getLanguages().size());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(1).getName());
  assertEquals(3,profile.getFavoriteTeams().size());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(2).getName());
  assertEquals(3,profile.getFavoriteAtheletes().size());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(2).getName());
  assertWorkHistory(profile.getWork());
  assertEducationHistory(profile.getEducation());
}","@Test public void getUserProfile_currentUser(){
  mockServer.expect(requestTo(fbUrl(""String_Node_Str"" + PROFILE_FIELDS))).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),MediaType.APPLICATION_JSON));
  User profile=facebook.userOperations().getUserProfile();
  assertBasicProfileData(profile,true);
  assertEquals(""String_Node_Str"",profile.getEmail());
  assertEquals(""String_Node_Str"",profile.getLink());
  assertEquals(""String_Node_Str"",profile.getThirdPartyId());
  assertEquals(Float.valueOf(-6),profile.getTimezone());
  assertEquals(toDate(""String_Node_Str""),profile.getUpdatedTime());
  assertTrue(profile.isVerified());
  assertEquals(""String_Node_Str"",profile.getAbout());
  assertEquals(""String_Node_Str"",profile.getBirthday());
  assertEquals(""String_Node_Str"",profile.getLocation().getId());
  assertEquals(""String_Node_Str"",profile.getLocation().getName());
  assertEquals(""String_Node_Str"",profile.getHometown().getId());
  assertEquals(""String_Node_Str"",profile.getHometown().getName());
  assertEquals(""String_Node_Str"",profile.getReligion());
  assertEquals(""String_Node_Str"",profile.getPolitical());
  assertEquals(""String_Node_Str"",profile.getQuotes());
  assertEquals(""String_Node_Str"",profile.getRelationshipStatus());
  assertEquals(""String_Node_Str"",profile.getSignificantOther().getId());
  assertEquals(""String_Node_Str"",profile.getSignificantOther().getName());
  assertEquals(""String_Node_Str"",profile.getWebsite());
  assertEquals(3,profile.getInspirationalPeople().size());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getInspirationalPeople().get(2).getName());
  assertEquals(2,profile.getLanguages().size());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getLanguages().get(1).getName());
  assertEquals(3,profile.getFavoriteTeams().size());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteTeams().get(2).getName());
  assertEquals(3,profile.getFavoriteAtheletes().size());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(0).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(0).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(1).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(1).getName());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(2).getId());
  assertEquals(""String_Node_Str"",profile.getFavoriteAtheletes().get(2).getName());
  assertWorkHistory(profile.getWork());
  assertEducationHistory(profile.getEducation());
}"
16642,"/** 
 * @param linkUrl A link to include in the post.
 * @param picture A preview image associated with the link. May be null.
 * @param name Overwrites the title of the link preview. May be null.
 * @param caption Overwrites the caption of the link preview. May be null.
 * @param description Overwrites the caption of hte link preview. May be null.
 * @return the PagePostData object for additional configuration
 */
public PostData link(String linkUrl,String picture,String name,String caption,String description){
  this.linkUrl=linkUrl;
  this.name=name;
  this.caption=caption;
  this.description=description;
  return this;
}","/** 
 * @param linkUrl A link to include in the post.
 * @param picture A preview image associated with the link. May be null.
 * @param name Overwrites the title of the link preview. May be null.
 * @param caption Overwrites the caption of the link preview. May be null.
 * @param description Overwrites the caption of hte link preview. May be null.
 * @return the PagePostData object for additional configuration
 */
public PostData link(String linkUrl,String picture,String name,String caption,String description){
  this.linkUrl=linkUrl;
  this.picture=picture;
  this.name=name;
  this.caption=caption;
  this.description=description;
  return this;
}"
16643,"public String postLink(String ownerId,String message,FacebookLink link){
  MultiValueMap<String,Object> map=new LinkedMultiValueMap<String,Object>();
  map.set(""String_Node_Str"",link.getLink());
  map.set(""String_Node_Str"",link.getName());
  map.set(""String_Node_Str"",link.getCaption());
  map.set(""String_Node_Str"",link.getDescription());
  map.set(""String_Node_Str"",message);
  return graphApi.publish(ownerId,""String_Node_Str"",map);
}","public String postLink(String ownerId,String message,FacebookLink link){
  MultiValueMap<String,Object> map=new LinkedMultiValueMap<String,Object>();
  map.set(""String_Node_Str"",link.getLink());
  map.set(""String_Node_Str"",link.getName());
  map.set(""String_Node_Str"",link.getCaption());
  map.set(""String_Node_Str"",link.getDescription());
  map.set(""String_Node_Str"",message);
  if (link.getPicture() != null)   map.set(""String_Node_Str"",link.getPicture());
  return graphApi.publish(ownerId,""String_Node_Str"",map);
}"
16644,"/** 
 * Examines the error data returned from Facebook and throws the most applicable exception.
 * @param errorDetails a Map containing a ""type"" and a ""message"" corresponding to the Graph API's error response structure.
 */
void handleFacebookError(HttpStatus statusCode,FacebookError error){
  if (error.getCode() != null) {
    int code=error.getCode();
    if (code == UNKNOWN) {
      throw new UncategorizedApiException(FACEBOOK_PROVIDER_ID,error.getMessage(),null);
    }
 else     if (code == SERVICE) {
      throw new ServerException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == TOO_MANY_CALLS || code == USER_TOO_MANY_CALLS || code == EDIT_FEED_TOO_MANY_USER_CALLS || code == EDIT_FEED_TOO_MANY_USER_ACTION_CALLS) {
      throw new RateLimitExceededException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PERMISSION_DENIED || isUserPermissionError(code)) {
      throw new InsufficientPermissionException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PARAM_SESSION_KEY || code == PARAM_SIGNATURE) {
      throw new InvalidAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == PARAM_ACCESS_TOKEN && error.getSubcode() == null) {
      throw new InvalidAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == PARAM_ACCESS_TOKEN && error.getSubcode() == 463) {
      throw new ExpiredAuthorizationException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PARAM_ACCESS_TOKEN) {
      throw new RevokedAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == MESG_DUPLICATE) {
      throw new DuplicateStatusException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == DATA_OBJECT_NOT_FOUND || code == PATH_UNKNOWN) {
      throw new ResourceNotFoundException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else {
      throw new UncategorizedApiException(FACEBOOK_PROVIDER_ID,error.getMessage(),null);
    }
  }
}","/** 
 * Examines the error data returned from Facebook and throws the most applicable exception.
 * @param errorDetails a Map containing a ""type"" and a ""message"" corresponding to the Graph API's error response structure.
 */
void handleFacebookError(HttpStatus statusCode,FacebookError error){
  if (error != null && error.getCode() != null) {
    int code=error.getCode();
    if (code == UNKNOWN) {
      throw new UncategorizedApiException(FACEBOOK_PROVIDER_ID,error.getMessage(),null);
    }
 else     if (code == SERVICE) {
      throw new ServerException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == TOO_MANY_CALLS || code == USER_TOO_MANY_CALLS || code == EDIT_FEED_TOO_MANY_USER_CALLS || code == EDIT_FEED_TOO_MANY_USER_ACTION_CALLS) {
      throw new RateLimitExceededException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PERMISSION_DENIED || isUserPermissionError(code)) {
      throw new InsufficientPermissionException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PARAM_SESSION_KEY || code == PARAM_SIGNATURE) {
      throw new InvalidAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == PARAM_ACCESS_TOKEN && error.getSubcode() == null) {
      throw new InvalidAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == PARAM_ACCESS_TOKEN && error.getSubcode() == 463) {
      throw new ExpiredAuthorizationException(FACEBOOK_PROVIDER_ID);
    }
 else     if (code == PARAM_ACCESS_TOKEN) {
      throw new RevokedAuthorizationException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == MESG_DUPLICATE) {
      throw new DuplicateStatusException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else     if (code == DATA_OBJECT_NOT_FOUND || code == PATH_UNKNOWN) {
      throw new ResourceNotFoundException(FACEBOOK_PROVIDER_ID,error.getMessage());
    }
 else {
      throw new UncategorizedApiException(FACEBOOK_PROVIDER_ID,error.getMessage(),null);
    }
  }
}"
16645,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object resolveArgument(MethodParameter parameter,NativeWebRequest request) throws Exception {
  SignedRequest annotation=parameter.getParameterAnnotation(SignedRequest.class);
  if (annotation == null) {
    return WebArgumentResolver.UNRESOLVED;
  }
  String signedRequest=request.getParameter(""String_Node_Str"");
  if (signedRequest == null && annotation.required()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (signedRequest == null) {
    return null;
  }
  Class<?> parameterType=parameter.getParameterType();
  if (MultiValueMap.class.isAssignableFrom(parameterType)) {
    Map map=signedRequestDecoder.decodeSignedRequest(signedRequest,Map.class);
    LinkedMultiValueMap<String,Object> mvm=new LinkedMultiValueMap<String,Object>(map.size());
    mvm.setAll((Map<String,Object>)map);
    return mvm;
  }
  return signedRequestDecoder.decodeSignedRequest(signedRequest,parameterType);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object resolveArgument(MethodParameter parameter,ModelAndViewContainer mavContainer,NativeWebRequest request,WebDataBinderFactory binderFactory) throws Exception {
  SignedRequest annotation=parameter.getParameterAnnotation(SignedRequest.class);
  if (annotation == null) {
    return WebArgumentResolver.UNRESOLVED;
  }
  String signedRequest=request.getParameter(""String_Node_Str"");
  if (signedRequest == null && annotation.required()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (signedRequest == null) {
    return null;
  }
  Class<?> parameterType=parameter.getParameterType();
  if (MultiValueMap.class.isAssignableFrom(parameterType)) {
    Map map=signedRequestDecoder.decodeSignedRequest(signedRequest,Map.class);
    LinkedMultiValueMap<String,Object> mvm=new LinkedMultiValueMap<String,Object>(map.size());
    mvm.setAll((Map<String,Object>)map);
    return mvm;
  }
  return signedRequestDecoder.decodeSignedRequest(signedRequest,parameterType);
}"
16646,"/** 
 * Decodes a signed request, returning the payload of the signed request as a specified type.
 * @param signedRequest the value of the signed_request parameter sent by Facebook.
 * @param type the type to bind the signed_request to.
 * @return the payload of the signed request as an object
 */
public <T>T decodeSignedRequest(String signedRequest,Class<T> type) throws SignedRequestException {
  String[] split=signedRequest.split(""String_Node_Str"");
  String encodedSignature=split[0];
  String payload=split[1];
  byte[] signature=base64DecodeToBytes(encodedSignature);
  try {
    T data=objectMapper.readValue(base64DecodeToString(payload),type);
    String algorithm=getAlgorithm(data);
    if (algorithm == null || !algorithm.equals(""String_Node_Str"")) {
      throw new SignedRequestException(""String_Node_Str"" + algorithm);
    }
    byte[] expectedSignature=encrypt(payload,secret);
    if (!Arrays.equals(expectedSignature,signature)) {
      throw new SignedRequestException(""String_Node_Str"");
    }
    return data;
  }
 catch (  IOException e) {
    throw new SignedRequestException(""String_Node_Str"",e);
  }
}","/** 
 * Decodes a signed request, returning the payload of the signed request as a specified type.
 * @param signedRequest the value of the signed_request parameter sent by Facebook.
 * @param type the type to bind the signed_request to.
 * @return the payload of the signed request as an object
 */
public <T>T decodeSignedRequest(String signedRequest,Class<T> type) throws SignedRequestException {
  String[] split=signedRequest.split(""String_Node_Str"");
  String encodedSignature=split[0];
  String payload=split[1];
  String decoded=base64DecodeToString(payload);
  byte[] signature=base64DecodeToBytes(encodedSignature);
  try {
    T data=objectMapper.readValue(decoded,type);
    String algorithm=objectMapper.readTree(decoded).get(""String_Node_Str"").getTextValue();
    if (algorithm == null || !algorithm.equals(""String_Node_Str"")) {
      throw new SignedRequestException(""String_Node_Str"" + algorithm);
    }
    byte[] expectedSignature=encrypt(payload,secret);
    if (!Arrays.equals(expectedSignature,signature)) {
      throw new SignedRequestException(""String_Node_Str"");
    }
    return data;
  }
 catch (  IOException e) {
    throw new SignedRequestException(""String_Node_Str"",e);
  }
}"
16647,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void resolveArgument_dauthorizationRequest_map() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,1);
  Class<?> parameterType=deauthParameter.getParameterType();
  Map<String,Object> resolved=(Map<String,Object>)resolver.resolveArgument(deauthParameter,request);
  assertEquals(""String_Node_Str"",resolved.get(""String_Node_Str""));
  assertEquals(1335894796,resolved.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",resolved.get(""String_Node_Str""));
  Map<String,?> userData=(Map<String,?>)resolved.get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void resolveArgument_dauthorizationRequest_map() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,1);
  Class<?> parameterType=deauthParameter.getParameterType();
  Map<String,Object> resolved=(Map<String,Object>)resolver.resolveArgument(deauthParameter,null,request,null);
  assertEquals(""String_Node_Str"",resolved.get(""String_Node_Str""));
  assertEquals(1335894796,resolved.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",resolved.get(""String_Node_Str""));
  Map<String,?> userData=(Map<String,?>)resolved.get(""String_Node_Str"");
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
}"
16648,"@Test public void resolveArgument_dauthorizationRequest_object() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,0);
  DeauthorizationRequest resolved=(DeauthorizationRequest)resolver.resolveArgument(deauthParameter,request);
  assertEquals(""String_Node_Str"",resolved.getAlgorithm());
  assertEquals(1335894796,resolved.getIssuedAt());
  assertEquals(""String_Node_Str"",resolved.getUserId());
  assertEquals(""String_Node_Str"",resolved.getUser().getCountry());
  assertEquals(""String_Node_Str"",resolved.getUser().getLocale());
}","@Test public void resolveArgument_dauthorizationRequest_object() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,0);
  DeauthorizationRequest resolved=(DeauthorizationRequest)resolver.resolveArgument(deauthParameter,null,request,null);
  assertEquals(""String_Node_Str"",resolved.getAlgorithm());
  assertEquals(1335894796,resolved.getIssuedAt());
  assertEquals(""String_Node_Str"",resolved.getUserId());
  assertEquals(""String_Node_Str"",resolved.getUser().getCountry());
  assertEquals(""String_Node_Str"",resolved.getUser().getLocale());
}"
16649,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void resolveArgument_dauthorizationRequest_multiValueMap() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,2);
  Class<?> parameterType=deauthParameter.getParameterType();
  MultiValueMap<String,Object> resolved=(MultiValueMap<String,Object>)resolver.resolveArgument(deauthParameter,request);
  assertEquals(""String_Node_Str"",resolved.getFirst(""String_Node_Str""));
  assertEquals(1335894796,resolved.getFirst(""String_Node_Str""));
  assertEquals(""String_Node_Str"",resolved.getFirst(""String_Node_Str""));
  Map<String,?> userData=(Map<String,?>)resolved.getFirst(""String_Node_Str"");
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void resolveArgument_dauthorizationRequest_multiValueMap() throws Exception {
  MockHttpServletRequest httpServletRequest=new MockHttpServletRequest();
  httpServletRequest.setParameter(""String_Node_Str"",DEAUTH_CALLBACK);
  NativeWebRequest request=new ServletWebRequest(httpServletRequest);
  Method method=SignedRequestArgumentResolverTest.class.getDeclaredMethod(""String_Node_Str"",DeauthorizationRequest.class,Map.class,MultiValueMap.class,String.class);
  MethodParameter deauthParameter=new MethodParameter(method,2);
  Class<?> parameterType=deauthParameter.getParameterType();
  MultiValueMap<String,Object> resolved=(MultiValueMap<String,Object>)resolver.resolveArgument(deauthParameter,null,request,null);
  assertEquals(""String_Node_Str"",resolved.getFirst(""String_Node_Str""));
  assertEquals(1335894796,resolved.getFirst(""String_Node_Str""));
  assertEquals(""String_Node_Str"",resolved.getFirst(""String_Node_Str""));
  Map<String,?> userData=(Map<String,?>)resolved.getFirst(""String_Node_Str"");
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",userData.get(""String_Node_Str""));
}"
16650,"private Photo(String id,Reference from,String link,String icon,Date createdTime,List<Image> images){
  this.id=id;
  this.from=from;
  this.link=link;
  this.icon=icon;
  this.createdTime=createdTime;
  Map<Character,Image> imageMap=extractImages(images);
  this.tinyImage=imageMap.get('t');
  this.sourceImage=imageMap.get('n');
  this.smallImage=imageMap.get('s');
  this.albumImage=imageMap.get('a');
}","private Photo(String id,Reference from,String link,String icon,Date createdTime,List<Image> images){
  this.id=id;
  this.from=from;
  this.link=link;
  this.icon=icon;
  this.createdTime=createdTime;
  int i=0;
  if (images.size() == 5) {
    this.oversizedImage=images.get(i++);
  }
  this.sourceImage=images.get(i++);
  this.albumImage=images.get(i++);
  this.smallImage=images.get(i++);
  this.tinyImage=images.get(i++);
}"
16651,"@SuppressWarnings(""String_Node_Str"") public Comment extractObject(Map<String,Object> commentMap){
  String id=(String)commentMap.get(""String_Node_Str"");
  String message=(String)commentMap.get(""String_Node_Str"");
  Map<String,String> fromMap=(Map<String,String>)commentMap.get(""String_Node_Str"");
  String fromId=fromMap.get(""String_Node_Str"");
  String fromName=fromMap.get(""String_Node_Str"");
  String createdTimeAsString=(String)commentMap.get(""String_Node_Str"");
  Map<String,Object> likesMap=(Map<String,Object>)commentMap.get(""String_Node_Str"");
  List<Reference> likes=extractReferences(likesMap);
  return new Comment(id,new Reference(fromId,fromName),message,toDate(createdTimeAsString),likes);
}","@SuppressWarnings(""String_Node_Str"") public Comment extractObject(Map<String,Object> commentMap){
  String id=(String)commentMap.get(""String_Node_Str"");
  String message=(String)commentMap.get(""String_Node_Str"");
  Map<String,String> fromMap=(Map<String,String>)commentMap.get(""String_Node_Str"");
  String fromId=fromMap.get(""String_Node_Str"");
  String fromName=fromMap.get(""String_Node_Str"");
  String createdTimeAsString=(String)commentMap.get(""String_Node_Str"");
  Object likesObject=commentMap.get(""String_Node_Str"");
  if (likesObject instanceof Integer) {
    Integer likesCount=(Integer)likesObject;
    return new Comment(id,new Reference(fromId,fromName),message,toDate(createdTimeAsString),likesCount);
  }
 else {
    Map<String,Object> likesMap=(Map<String,Object>)likesObject;
    List<Reference> likes=extractReferences(likesMap);
    return new Comment(id,new Reference(fromId,fromName),message,toDate(createdTimeAsString),likes);
  }
}"
16652,"public Comment(String id,Reference from,String message,Date createdTime,List<Reference> likes){
  this.id=id;
  this.from=from;
  this.message=message;
  this.createdTime=createdTime;
  this.likes=likes;
}","/** 
 * Constructs a Comment object.
 * @param id the comment's Graph API ID
 * @param from the author of the comment
 * @param message the comment text
 * @param createdTime the creation time of the comment
 * @param likesCount the number of users who have liked this comment.
 */
public Comment(String id,Reference from,String message,Date createdTime,int likesCount){
  this.id=id;
  this.from=from;
  this.message=message;
  this.createdTime=createdTime;
  this.likesCount=likesCount;
}"
16653,"public List<Reference> getLikes(){
  return likes;
}","/** 
 * A list of references to users who liked this comment. May be null, as Facebook often sends only a count of likes. In some cases (such as a comment on a checkin) the likes will be a list of references.
 */
public List<Reference> getLikes(){
  return likes;
}"
16654,"public String getMessage(){
  return message;
}","/** 
 * The text of the comment
 */
public String getMessage(){
  return message;
}"
16655,"public String getId(){
  return id;
}","/** 
 * The comment's Graph API object ID
 */
public String getId(){
  return id;
}"
16656,"public Date getCreatedTime(){
  return createdTime;
}","/** 
 * The time the comment was created.
 */
public Date getCreatedTime(){
  return createdTime;
}"
16657,"public Reference getFrom(){
  return from;
}","/** 
 * A reference to the user who posted the comment.
 */
public Reference getFrom(){
  return from;
}"
16658,"@Test public void getComment(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  Comment comment=facebook.commentOperations().getComment(""String_Node_Str"");
  assertEquals(""String_Node_Str"",comment.getFrom().getId());
  assertEquals(""String_Node_Str"",comment.getFrom().getName());
  assertEquals(""String_Node_Str"",comment.getMessage());
}","@Test public void getComment(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  Comment comment=facebook.commentOperations().getComment(""String_Node_Str"");
  assertEquals(""String_Node_Str"",comment.getFrom().getId());
  assertEquals(""String_Node_Str"",comment.getFrom().getName());
  assertEquals(""String_Node_Str"",comment.getMessage());
  assertNull(comment.getLikes());
  assertEquals(4,comment.getLikesCount());
}"
16659,"@Test public void getFeedEntry(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  FeedEntry feedEntry=facebook.feedOperations().getFeedEntry(""String_Node_Str"");
  assertEquals(""String_Node_Str"",feedEntry.getId());
  assertEquals(""String_Node_Str"",feedEntry.getMessage());
  assertEquals(""String_Node_Str"",feedEntry.getFrom().getId());
  assertEquals(""String_Node_Str"",feedEntry.getFrom().getName());
  assertEquals(1,feedEntry.getLikes().size());
  assertEquals(2,feedEntry.getComments().size());
}","@Test public void getFeedEntry(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  FeedEntry feedEntry=facebook.feedOperations().getFeedEntry(""String_Node_Str"");
  assertEquals(""String_Node_Str"",feedEntry.getId());
  assertEquals(""String_Node_Str"",feedEntry.getMessage());
  assertEquals(""String_Node_Str"",feedEntry.getFrom().getId());
  assertEquals(""String_Node_Str"",feedEntry.getFrom().getName());
  assertEquals(1,feedEntry.getLikes().size());
  assertEquals(2,feedEntry.getComments().size());
  assertNull(feedEntry.getComments().get(1).getLikes());
  assertEquals(3,feedEntry.getComments().get(1).getLikesCount());
}"
16660,"public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String jdbcTemplate=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(jdbcTemplate);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}","public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String dataSource=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(dataSource);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}"
16661,"public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,Collections.emptyMap(),Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}","public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,""String_Node_Str"",Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}"
16662,"/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(TwitterApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}","/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(LinkedInApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}"
16663,"/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.restOperations=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
}","/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  RestTemplate restTemplate=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
  restTemplate.setErrorHandler(new TwitterErrorHandler());
  this.restOperations=restTemplate;
  this.statusCodeTranslator=new TwitterResponseStatusCodeTranslator();
}"
16664,"SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Long maxId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  Long sinceId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  return new SearchResults(tweets,maxId,sinceId,response.get(""String_Node_Str"") == null);
}","SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Number maxId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  Number sinceId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  return new SearchResults(tweets,maxId.longValue(),sinceId.longValue(),response.get(""String_Node_Str"") == null);
}"
16665,"@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}","@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",42);
  response.put(""String_Node_Str"",24);
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}"
16666,"public synchronized void sendTransaction(Transaction tx){
  boolean success=false;
  for (  Peer peer : connectedPeers) {
    try {
      peer.broadcastTransaction(tx);
      success=true;
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException e) {
      peer.disconnect();
      connectedPeers.remove(peer);
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (success) {
    wallet.confirmSend(tx);
    saveWallet();
  }
}","public void sendTransaction(Transaction tx){
  boolean success=false;
synchronized (connectedPeersLock) {
    for (    Peer peer : connectedPeers) {
      try {
        peer.broadcastTransaction(tx);
        success=true;
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      IOException e) {
        peer.disconnect();
        connectedPeers.remove(peer);
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  if (success) {
    wallet.confirmSend(tx);
    saveWallet();
  }
}"
16667,"private void connectToLocalPeers(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  for (  Peer peer : appState.connectedPeers) {
    if (!peer.isRunning())     appState.connectedPeers.remove(peer);
  }
  if (appState.connectedPeers.size() < 3) {
    for (    InetSocketAddress isa : appState.discoverPeers()) {
      NetworkConnection conn=createNetworkConnection(isa);
      if (conn == null) {
        appState.removeBadPeer(isa);
      }
 else {
        Peer peer=new Peer(appState.params,conn,appState.blockChain,appState.wallet);
        peer.start();
        appState.connectedPeers.add(peer);
        if (appState.connectedPeers.size() >= 8)         break;
      }
    }
  }
}","private void connectToLocalPeers(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
synchronized (appState.connectedPeersLock) {
    for (    Peer peer : appState.connectedPeers) {
      if (!peer.isRunning())       appState.connectedPeers.remove(peer);
    }
    if (appState.connectedPeers.size() < 3) {
      for (      InetSocketAddress isa : appState.discoverPeers()) {
        NetworkConnection conn=createNetworkConnection(isa);
        if (conn == null) {
          appState.removeBadPeer(isa);
        }
 else {
          Peer peer=new Peer(appState.params,conn,appState.blockChain,appState.wallet);
          peer.start();
          appState.connectedPeers.add(peer);
          if (appState.connectedPeers.size() >= 8)           break;
        }
      }
    }
  }
}"
16668,"public Device resolveDevice(HttpServletRequest request){
  String userAgent=request.getHeader(""String_Node_Str"");
  if (userAgent != null) {
    userAgent=userAgent.toLowerCase();
    for (    String keyword : normalUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return resolveFallback(request);
      }
    }
  }
  if (request.getHeader(""String_Node_Str"") != null || request.getHeader(""String_Node_Str"") != null) {
    return LiteDevice.MOBILE_INSTANCE;
  }
  if (userAgent != null && userAgent.length() >= 4) {
    String prefix=userAgent.substring(0,4).toLowerCase();
    if (mobileUserAgentPrefixes.contains(prefix)) {
      return LiteDevice.MOBILE_INSTANCE;
    }
  }
  String accept=request.getHeader(""String_Node_Str"");
  if (accept != null && accept.contains(""String_Node_Str"")) {
    return LiteDevice.MOBILE_INSTANCE;
  }
  if (userAgent != null) {
    userAgent=userAgent.toLowerCase();
    if (userAgent.contains(""String_Node_Str"") && !userAgent.contains(""String_Node_Str"")) {
      return LiteDevice.TABLET_INSTANCE;
    }
    if (userAgent.contains(""String_Node_Str"") && !userAgent.contains(""String_Node_Str"")) {
      return LiteDevice.TABLET_INSTANCE;
    }
    for (    String keyword : tabletUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return LiteDevice.TABLET_INSTANCE;
      }
    }
    for (    String keyword : mobileUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return LiteDevice.MOBILE_INSTANCE;
      }
    }
  }
  @SuppressWarnings(""String_Node_Str"") Enumeration headers=request.getHeaderNames();
  while (headers.hasMoreElements()) {
    String header=(String)headers.nextElement();
    if (header.contains(""String_Node_Str"")) {
      return LiteDevice.MOBILE_INSTANCE;
    }
  }
  return resolveFallback(request);
}","public Device resolveDevice(HttpServletRequest request){
  String userAgent=request.getHeader(""String_Node_Str"");
  if (userAgent != null) {
    userAgent=userAgent.toLowerCase();
    for (    String keyword : normalUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return resolveFallback(request);
      }
    }
  }
  if (userAgent != null) {
    userAgent=userAgent.toLowerCase();
    if (userAgent.contains(""String_Node_Str"") && !userAgent.contains(""String_Node_Str"")) {
      return LiteDevice.TABLET_INSTANCE;
    }
    if (userAgent.contains(""String_Node_Str"") && !userAgent.contains(""String_Node_Str"")) {
      return LiteDevice.TABLET_INSTANCE;
    }
    for (    String keyword : tabletUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return LiteDevice.TABLET_INSTANCE;
      }
    }
  }
  if (request.getHeader(""String_Node_Str"") != null || request.getHeader(""String_Node_Str"") != null) {
    return LiteDevice.MOBILE_INSTANCE;
  }
  if (userAgent != null && userAgent.length() >= 4) {
    String prefix=userAgent.substring(0,4).toLowerCase();
    if (mobileUserAgentPrefixes.contains(prefix)) {
      return LiteDevice.MOBILE_INSTANCE;
    }
  }
  String accept=request.getHeader(""String_Node_Str"");
  if (accept != null && accept.contains(""String_Node_Str"")) {
    return LiteDevice.MOBILE_INSTANCE;
  }
  if (userAgent != null) {
    for (    String keyword : mobileUserAgentKeywords) {
      if (userAgent.contains(keyword)) {
        return LiteDevice.MOBILE_INSTANCE;
      }
    }
  }
  @SuppressWarnings(""String_Node_Str"") Enumeration headers=request.getHeaderNames();
  while (headers.hasMoreElements()) {
    String header=(String)headers.nextElement();
    if (header.contains(""String_Node_Str"")) {
      return LiteDevice.MOBILE_INSTANCE;
    }
  }
  return resolveFallback(request);
}"
16669,"private String formatPath(String path){
  String formattedPath=null;
  if (path != null) {
    formattedPath=(path.startsWith(""String_Node_Str"") ? path : ""String_Node_Str"" + path);
    formattedPath=(path.endsWith(""String_Node_Str"") ? path : path + ""String_Node_Str"");
  }
  return formattedPath;
}","private String formatPath(String path){
  String formattedPath=null;
  if (path != null) {
    formattedPath=(path.startsWith(""String_Node_Str"") ? path : ""String_Node_Str"" + path);
    formattedPath=(path.endsWith(""String_Node_Str"") ? formattedPath : formattedPath + ""String_Node_Str"");
  }
  return formattedPath;
}"
16670,"/** 
 * Build classpath list using either gwtHome (if present) or using *project* dependencies. Note that this is ONLY used for the script/cmd writers (so the scopes are not for the compiler, or war plugins, etc). This is required so that the script writers can get the dependencies they need regardless of the Maven scopes (still want to use the Maven scopes for everything else Maven, but for GWT-Maven we need to access deps differently - directly at times).
 * @param project The maven project the Mojo is running for
 * @param artifacts the project artifacts (all scopes)
 * @param scope artifact scope to use
 * @param isGenerator whether to use processed resources and compiled classes (false), or raw resources (true).
 * @return file collection for classpath
 * @throws MojoExecutionException 
 */
public Collection<File> buildClasspathList(final MavenProject project,final String scope,Set<Artifact> artifacts,boolean isGenerator) throws ClasspathBuilderException {
  getLogger().debug(""String_Node_Str"" + scope + ""String_Node_Str"");
  Set<File> items=new LinkedHashSet<File>();
  if (!isGenerator) {
    items.add(new File(project.getBuild().getOutputDirectory()));
  }
  addSources(items,project.getCompileSourceRoots());
  if (isGenerator) {
    addResources(items,project.getResources());
  }
  if (scope.equals(SCOPE_TEST)) {
    addSources(items,project.getTestCompileSourceRoots());
    addResources(items,project.getTestResources());
    items.add(new File(project.getBuild().getTestOutputDirectory()));
    for (    Artifact artifact : artifacts) {
      items.add(artifact.getFile());
    }
  }
 else   if (scope.equals(SCOPE_COMPILE)) {
    getLogger().debug(""String_Node_Str"" + artifacts.size());
    for (    Artifact artifact : artifacts) {
      String artifactScope=artifact.getScope();
      if (SCOPE_COMPILE.equals(artifactScope) || SCOPE_PROVIDED.equals(artifactScope) || SCOPE_SYSTEM.equals(artifactScope)) {
        items.add(artifact.getFile());
      }
    }
  }
 else   if (scope.equals(SCOPE_RUNTIME)) {
    for (    Artifact artifact : artifacts) {
      getLogger().debug(""String_Node_Str"" + artifact);
      if (!artifact.getScope().equals(SCOPE_TEST) && artifact.getArtifactHandler().isAddedToClasspath()) {
        items.add(artifact.getFile());
      }
    }
  }
 else {
    throw new ClasspathBuilderException(""String_Node_Str"" + scope);
  }
  return items;
}","/** 
 * Build classpath list using either gwtHome (if present) or using *project* dependencies. Note that this is ONLY used for the script/cmd writers (so the scopes are not for the compiler, or war plugins, etc). This is required so that the script writers can get the dependencies they need regardless of the Maven scopes (still want to use the Maven scopes for everything else Maven, but for GWT-Maven we need to access deps differently - directly at times).
 * @param project The maven project the Mojo is running for
 * @param artifacts the project artifacts (all scopes)
 * @param scope artifact scope to use
 * @param isGenerator whether to use processed resources and compiled classes (false), or raw resources (true).
 * @return file collection for classpath
 */
public Collection<File> buildClasspathList(final MavenProject project,final String scope,Set<Artifact> artifacts,boolean isGenerator) throws ClasspathBuilderException {
  getLogger().debug(""String_Node_Str"" + scope + ""String_Node_Str"");
  Set<File> items=new LinkedHashSet<File>();
  if (!isGenerator) {
    items.add(new File(project.getBuild().getOutputDirectory()));
  }
  addSources(items,project.getCompileSourceRoots());
  if (isGenerator) {
    addResources(items,project.getResources());
  }
  if (scope.equals(SCOPE_TEST)) {
    addSources(items,project.getTestCompileSourceRoots());
    addResources(items,project.getTestResources());
    items.add(new File(project.getBuild().getTestOutputDirectory()));
    for (    Artifact artifact : artifacts) {
      items.add(artifact.getFile());
    }
  }
 else   if (scope.equals(SCOPE_COMPILE)) {
    getLogger().debug(""String_Node_Str"" + artifacts.size());
    for (    Artifact artifact : artifacts) {
      String artifactScope=artifact.getScope();
      if (SCOPE_COMPILE.equals(artifactScope) || SCOPE_PROVIDED.equals(artifactScope) || SCOPE_SYSTEM.equals(artifactScope)) {
        items.add(artifact.getFile());
      }
    }
  }
 else   if (scope.equals(SCOPE_RUNTIME)) {
    for (    Artifact artifact : artifacts) {
      getLogger().debug(""String_Node_Str"" + artifact);
      if (!artifact.getScope().equals(SCOPE_TEST) && artifact.getArtifactHandler().isAddedToClasspath()) {
        items.add(artifact.getFile());
      }
    }
  }
 else {
    throw new ClasspathBuilderException(""String_Node_Str"" + scope);
  }
  return items;
}"
16671,"/** 
 * @param packageName
 * @return cannot return <code>null</null>
 * @throws IOException
 */
public Set<ServletDescriptor> findServlets(String packageName,String startPath,ClassLoader classLoader) throws IOException {
  Set<ServletDescriptor> servlets=new LinkedHashSet<ServletDescriptor>();
  PathMatchingResourcePatternResolver pathMatchingResourcePatternResolver=new PathMatchingResourcePatternResolver(classLoader);
  String patternFinder=ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageName) + ""String_Node_Str"";
  Resource[] resources=pathMatchingResourcePatternResolver.getResources(patternFinder);
  SimpleMetadataReaderFactory simpleMetadataReaderFactory=new SimpleMetadataReaderFactory();
  getLogger().debug(""String_Node_Str"" + resources.length + ""String_Node_Str""+ patternFinder);
  for (  Resource resource : resources) {
    getLogger().debug(""String_Node_Str"" + resource.getFilename());
    MetadataReader metadataReader=simpleMetadataReaderFactory.getMetadataReader(resource);
    AnnotationMetadata annotationMetadata=getAnnotationMetadataIfServlet(metadataReader,simpleMetadataReaderFactory,pathMatchingResourcePatternResolver);
    if (annotationMetadata != null) {
      Map<String,Object> annotationAttributes=annotationMetadata.getAnnotationAttributes(RemoteServiceRelativePath.class.getName());
      getLogger().debug(""String_Node_Str"" + metadataReader.getClassMetadata().getClassName());
      if (StringUtils.isNotBlank(startPath)) {
        StringBuilder path=new StringBuilder();
        if (!startPath.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(startPath);
        String annotationPathValue=(String)annotationAttributes.get(""String_Node_Str"");
        if (!annotationPathValue.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(annotationPathValue);
        ServletDescriptor servletDescriptor=new ServletDescriptor(path.toString(),metadataReader.getClassMetadata().getClassName());
        servlets.add(servletDescriptor);
      }
 else {
        StringBuilder path=new StringBuilder();
        String annotationPathValue=(String)annotationAttributes.get(""String_Node_Str"");
        if (!annotationPathValue.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(annotationPathValue);
        ServletDescriptor servletDescriptor=new ServletDescriptor(path.toString(),metadataReader.getClassMetadata().getClassName());
        servlets.add(servletDescriptor);
      }
    }
  }
  return servlets;
}","/** 
 * @param packageName
 * @return cannot return <code>null</code>
 * @throws IOException
 */
public Set<ServletDescriptor> findServlets(String packageName,String startPath,ClassLoader classLoader) throws IOException {
  Set<ServletDescriptor> servlets=new LinkedHashSet<ServletDescriptor>();
  PathMatchingResourcePatternResolver pathMatchingResourcePatternResolver=new PathMatchingResourcePatternResolver(classLoader);
  String patternFinder=ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageName) + ""String_Node_Str"";
  Resource[] resources=pathMatchingResourcePatternResolver.getResources(patternFinder);
  SimpleMetadataReaderFactory simpleMetadataReaderFactory=new SimpleMetadataReaderFactory();
  getLogger().debug(""String_Node_Str"" + resources.length + ""String_Node_Str""+ patternFinder);
  for (  Resource resource : resources) {
    getLogger().debug(""String_Node_Str"" + resource.getFilename());
    MetadataReader metadataReader=simpleMetadataReaderFactory.getMetadataReader(resource);
    AnnotationMetadata annotationMetadata=getAnnotationMetadataIfServlet(metadataReader,simpleMetadataReaderFactory,pathMatchingResourcePatternResolver);
    if (annotationMetadata != null) {
      Map<String,Object> annotationAttributes=annotationMetadata.getAnnotationAttributes(RemoteServiceRelativePath.class.getName());
      getLogger().debug(""String_Node_Str"" + metadataReader.getClassMetadata().getClassName());
      if (StringUtils.isNotBlank(startPath)) {
        StringBuilder path=new StringBuilder();
        if (!startPath.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(startPath);
        String annotationPathValue=(String)annotationAttributes.get(""String_Node_Str"");
        if (!annotationPathValue.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(annotationPathValue);
        ServletDescriptor servletDescriptor=new ServletDescriptor(path.toString(),metadataReader.getClassMetadata().getClassName());
        servlets.add(servletDescriptor);
      }
 else {
        StringBuilder path=new StringBuilder();
        String annotationPathValue=(String)annotationAttributes.get(""String_Node_Str"");
        if (!annotationPathValue.startsWith(""String_Node_Str"")) {
          path.append('/');
        }
        path.append(annotationPathValue);
        ServletDescriptor servletDescriptor=new ServletDescriptor(path.toString(),metadataReader.getClassMetadata().getClassName());
        servlets.add(servletDescriptor);
      }
    }
  }
  return servlets;
}"
16672,"private void setupExplodedWar() throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + hostedWebapp);
  if (copyWebapp && !warSourceDirectory.getAbsolutePath().equals(hostedWebapp.getAbsolutePath())) {
    try {
      String excludes=StringUtils.join(DEFAULTEXCLUDES,""String_Node_Str"");
      FileUtils.copyDirectory(warSourceDirectory,hostedWebapp,""String_Node_Str"",excludes);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + hostedWebapp,e);
    }
  }
  File classes=new File(hostedWebapp,""String_Node_Str"");
  classes.mkdirs();
  if (!buildOutputDirectory.getAbsolutePath().equals(classes.getAbsolutePath())) {
    getLog().warn(""String_Node_Str"" + ""String_Node_Str"");
    try {
      FileUtils.copyDirectoryStructure(buildOutputDirectory,classes);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + classes,e);
    }
  }
  File lib=new File(hostedWebapp,""String_Node_Str"");
  lib.mkdirs();
  Collection<Artifact> artifacts=getProjectRuntimeArtifacts();
  for (  Artifact artifact : artifacts) {
    try {
      if (!artifact.getFile().isDirectory()) {
        FileUtils.copyFileToDirectory(artifact.getFile(),lib);
      }
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
    }
  }
}","private void setupExplodedWar() throws MojoExecutionException {
  getLog().info(""String_Node_Str"" + hostedWebapp);
  if (copyWebapp && !warSourceDirectory.getAbsolutePath().equals(hostedWebapp.getAbsolutePath())) {
    try {
      copyDirectoryStructureIfModified(warSourceDirectory,hostedWebapp);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + hostedWebapp,e);
    }
  }
  File classes=new File(hostedWebapp,""String_Node_Str"");
  classes.mkdirs();
  if (!buildOutputDirectory.getAbsolutePath().equals(classes.getAbsolutePath())) {
    getLog().warn(""String_Node_Str"" + ""String_Node_Str"");
    try {
      FileUtils.copyDirectoryStructure(buildOutputDirectory,classes);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + classes,e);
    }
  }
  File lib=new File(hostedWebapp,""String_Node_Str"");
  lib.mkdirs();
  Collection<Artifact> artifacts=getProjectRuntimeArtifacts();
  for (  Artifact artifact : artifacts) {
    try {
      if (!artifact.getFile().isDirectory()) {
        FileUtils.copyFileToDirectory(artifact.getFile(),lib);
      }
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + artifact,e);
    }
  }
}"
16673,"public boolean containsKey(final Object key){
  if (key == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (key.equals(e.getKey())) {
      return true;
    }
  }
  return false;
}","public boolean containsKey(final Object key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (key.equals(e.getKey())) {
      return true;
    }
  }
  return false;
}"
16674,"public boolean containsValue(final Object value){
  if (value == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (value.equals(e.getValue())) {
      return true;
    }
  }
  return false;
}","public boolean containsValue(final Object value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (value.equals(e.getValue())) {
      return true;
    }
  }
  return false;
}"
16675,"public UrlParameterMultimap remove(final String key,final String value){
  if (key == null || value == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (key.equals(e.getKey()) && value.equals(e.getValue())) {
      data.remove(e);
    }
  }
  return this;
}","public UrlParameterMultimap remove(final String key,final String value){
  if (key == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  final Entry<String,String> e : data) {
    if (key.equals(e.getKey()) && value.equals(e.getValue())) {
      data.remove(e);
    }
  }
  return this;
}"
16676,"public static UrlBuilder fromString(final String url,final Charset inputEncoding){
  if (url.isEmpty()) {
    return new UrlBuilder();
  }
  final Matcher m=URI_PATTERN.matcher(url);
  String protocol=null, hostName=null, path=null, anchor=null;
  Integer port=null;
  Map<String,List<String>> queryParameters=null;
  if (m.find()) {
    protocol=m.group(2);
    if (m.group(4) != null) {
      final Matcher n=AUTHORITY_PATTERN.matcher(m.group(4));
      if (n.find()) {
        hostName=IDN.toUnicode(n.group(1));
        if (n.group(3) != null) {
          port=Integer.parseInt(n.group(3));
        }
      }
    }
    path=decodePath(m.group(5),inputEncoding);
    queryParameters=decodeQueryParameters(m.group(7),inputEncoding);
    anchor=m.group(9);
  }
  return of(inputEncoding,DEFAULT_ENCODING,protocol,hostName,port,path,queryParameters,anchor);
}","public static UrlBuilder fromString(final String url,final Charset inputEncoding){
  if (url.isEmpty()) {
    return new UrlBuilder();
  }
  final Matcher m=URI_PATTERN.matcher(url);
  String protocol=null, hostName=null, path=null, anchor=null;
  Integer port=null;
  final Map<String,List<String>> queryParameters;
  if (m.find()) {
    protocol=m.group(2);
    if (m.group(4) != null) {
      final Matcher n=AUTHORITY_PATTERN.matcher(m.group(4));
      if (n.find()) {
        hostName=IDN.toUnicode(n.group(1));
        if (n.group(3) != null) {
          port=Integer.parseInt(n.group(3));
        }
      }
    }
    path=decodePath(m.group(5),inputEncoding);
    queryParameters=decodeQueryParameters(m.group(7),inputEncoding);
    anchor=m.group(9);
  }
 else {
    queryParameters=emptyMap();
  }
  return of(inputEncoding,DEFAULT_ENCODING,protocol,hostName,port,path,queryParameters,anchor);
}"
16677,"/** 
 * Construct a UrlBuilder from a   {@link java.net.URI}.
 */
public static UrlBuilder fromUri(final URI uri){
  return of(DEFAULT_ENCODING,DEFAULT_ENCODING,uri.getScheme(),uri.getUserInfo(),uri.getHost(),uri.getPort() == -1 ? null : uri.getPort(),uri.getRawPath(),decodeQueryParameters(uri.getRawQuery(),DEFAULT_ENCODING),uri.getFragment());
}","/** 
 * Construct a UrlBuilder from a   {@link java.net.URI}.
 */
public static UrlBuilder fromUri(final URI uri){
  return of(DEFAULT_ENCODING,DEFAULT_ENCODING,uri.getScheme(),uri.getUserInfo(),uri.getHost(),uri.getPort() == -1 ? null : uri.getPort(),urlDecode(uri.getRawPath(),DEFAULT_ENCODING),decodeQueryParameters(uri.getRawQuery(),DEFAULT_ENCODING),uri.getFragment());
}"
16678,"/** 
 * Construct a UrlBuilder from a full or partial URL string. When percent-decoding the query parameters, assume that they were encoded with <b>inputEncoding</b>.
 * @throws NumberFormatException if the input contains a invalid percent-encoding sequence (%ax) or a non-numeric port
 */
public static UrlBuilder fromString(final String url,final Charset inputEncoding){
  if (url == null || url.isEmpty()) {
    return new UrlBuilder();
  }
  final Matcher m=URI_PATTERN.matcher(url);
  String scheme=null, userInfo=null, hostName=null, path=null, fragment=null;
  Integer port=null;
  final Map<String,List<String>> queryParameters;
  if (m.find()) {
    scheme=m.group(2);
    if (m.group(4) != null) {
      final Matcher n=AUTHORITY_PATTERN.matcher(m.group(4));
      if (n.find()) {
        if (n.group(2) != null) {
          userInfo=n.group(2);
        }
        if (n.group(3) != null) {
          hostName=IDN.toUnicode(n.group(3));
        }
        if (n.group(4) != null) {
          port=Integer.parseInt(n.group(4));
        }
      }
    }
    path=decodePath(m.group(5),inputEncoding);
    queryParameters=decodeQueryParameters(m.group(7),inputEncoding);
    fragment=m.group(9);
  }
 else {
    queryParameters=emptyMap();
  }
  return of(inputEncoding,DEFAULT_ENCODING,scheme,userInfo,hostName,port,path,queryParameters,fragment);
}","/** 
 * Construct a UrlBuilder from a full or partial URL string. When percent-decoding the query parameters, assume that they were encoded with <b>inputEncoding</b>.
 * @throws NumberFormatException if the input contains a invalid percent-encoding sequence (%ax) or a non-numeric port
 */
public static UrlBuilder fromString(final String url,final Charset inputEncoding){
  if (url == null || url.isEmpty()) {
    return new UrlBuilder();
  }
  final Matcher m=URI_PATTERN.matcher(url);
  String scheme=null, userInfo=null, hostName=null, path=null, fragment=null;
  Integer port=null;
  final Map<String,List<String>> queryParameters;
  if (m.find()) {
    scheme=m.group(2);
    if (m.group(4) != null) {
      final Matcher n=AUTHORITY_PATTERN.matcher(m.group(4));
      if (n.find()) {
        if (n.group(2) != null) {
          userInfo=n.group(2);
        }
        if (n.group(3) != null) {
          hostName=IDN.toUnicode(n.group(3));
        }
        if (n.group(5) != null) {
          port=Integer.parseInt(n.group(5));
        }
      }
    }
    path=decodePath(m.group(5),inputEncoding);
    queryParameters=decodeQueryParameters(m.group(7),inputEncoding);
    fragment=m.group(9);
  }
 else {
    queryParameters=emptyMap();
  }
  return of(inputEncoding,DEFAULT_ENCODING,scheme,userInfo,hostName,port,path,queryParameters,fragment);
}"
16679,"/** 
 * Find all resources, and return the full collection (plain list not paginated)<br/> REST webservice published : GET /?page=no
 * @return OK http status code if the request has been correctly processed, with the list of all resource enclosed in the body. Be carefull, this list should be big since it will return ALL resources. In this case, consider using paginated findAll method instead.
 */
@RequestMapping(method=RequestMethod.GET,params=""String_Node_Str"",produces=""String_Node_Str"") @ResponseBody Iterable<T> findAll();","/** 
 * Find all resources, and return the full collection (plain list not paginated)<br/> REST webservice published : GET /?page=no
 * @return OK http status code if the request has been correctly processed, with the list of all resource enclosed in the body.Be careful, this list should be big since it will return ALL resources. In this case, consider using paginated findAll method instead.
 */
@RequestMapping(method=RequestMethod.GET,params=""String_Node_Str"") @ResponseBody Iterable<T> findAll();"
16680,"@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}","@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16681,"@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}","@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16682,"@Override public void onApplicationEvent(ApplicationEvent event){
  if (event instanceof ContextRefreshedEvent) {
    LOGGER.debug(""String_Node_Str"");
    long startTime=System.currentTimeMillis();
    ContextRefreshedEvent contextRefreshedEvent=(ContextRefreshedEvent)event;
    ApplicationContext applicationContext=contextRefreshedEvent.getApplicationContext();
    Map beans=applicationContext.getBeansOfType(Object.class,false,false);
    List<PostInitializingMethod> postInitializingMethods=new LinkedList<PostInitializingMethod>();
    for (    Object beanNameObject : beans.keySet()) {
      String beanName=(String)beanNameObject;
      Object bean=beans.get(beanNameObject);
      Class<?> beanClass=bean.getClass();
      Method[] methods=beanClass.getMethods();
      for (      Method method : methods) {
        if (getAnnotation(method,PostInitialize.class) != null) {
          if (method.getParameterTypes().length == 0) {
            int order=getAnnotation(method,PostInitialize.class).order();
            postInitializingMethods.add(new PostInitializingMethod(method,bean,order,beanName));
          }
 else {
            LOGGER.warn(""String_Node_Str"",method.toGenericString(),beanName);
          }
        }
      }
    }
    Collections.sort(postInitializingMethods);
    long endTime=System.currentTimeMillis();
    LOGGER.debug(""String_Node_Str"",endTime - startTime,postInitializingMethods.size());
    for (    PostInitializingMethod postInitializingMethod : postInitializingMethods) {
      Method method=postInitializingMethod.getMethod();
      try {
        method.invoke(postInitializingMethod.getBeanInstance());
      }
 catch (      IllegalAccessException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
catch (      IllegalArgumentException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
catch (      InvocationTargetException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
    }
  }
}","@Override public void onApplicationEvent(ApplicationEvent event){
  if (event instanceof ContextRefreshedEvent) {
    LOGGER.debug(""String_Node_Str"");
    long startTime=System.currentTimeMillis();
    ContextRefreshedEvent contextRefreshedEvent=(ContextRefreshedEvent)event;
    ApplicationContext applicationContext=contextRefreshedEvent.getApplicationContext();
    Map beans=applicationContext.getBeansOfType(Object.class,false,false);
    List<PostInitializingMethod> postInitializingMethods=new LinkedList<PostInitializingMethod>();
    for (    Object beanNameObject : beans.keySet()) {
      String beanName=(String)beanNameObject;
      Object bean=beans.get(beanNameObject);
      if (bean == null) {
        LOGGER.warn(""String_Node_Str"",beanName);
        continue;
      }
      Class<?> beanClass=bean.getClass();
      Method[] methods=beanClass.getMethods();
      for (      Method method : methods) {
        if (getAnnotation(method,PostInitialize.class) != null) {
          if (method.getParameterTypes().length == 0) {
            int order=getAnnotation(method,PostInitialize.class).order();
            postInitializingMethods.add(new PostInitializingMethod(method,bean,order,beanName));
          }
 else {
            LOGGER.warn(""String_Node_Str"",method.toGenericString(),beanName);
          }
        }
      }
    }
    Collections.sort(postInitializingMethods);
    long endTime=System.currentTimeMillis();
    LOGGER.debug(""String_Node_Str"",endTime - startTime,postInitializingMethods.size());
    for (    PostInitializingMethod postInitializingMethod : postInitializingMethods) {
      Method method=postInitializingMethod.getMethod();
      try {
        method.invoke(postInitializingMethod.getBeanInstance());
      }
 catch (      IllegalAccessException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
catch (      IllegalArgumentException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
catch (      InvocationTargetException e) {
        throw new BeanCreationException(""String_Node_Str"" + postInitializingMethod.getBeanName() + ""String_Node_Str"",e);
      }
    }
  }
}"
16683,"/** 
 * {@inheritDoc}
 */
@Override public Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size){
  Assert.isTrue(page > 0,""String_Node_Str"");
  return this.repository.findAll(new PageRequest(page - 1,size));
}","/** 
 * {@inheritDoc}
 */
@Override public Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String direction,@RequestParam(value=""String_Node_Str"",required=false) String properties){
  Assert.isTrue(page > 0,""String_Node_Str"");
  Assert.isTrue(direction.isEmpty() || direction.equalsIgnoreCase(Sort.Direction.ASC.toString()) || direction.equalsIgnoreCase(Sort.Direction.DESC.toString()),""String_Node_Str"");
  if (direction.isEmpty()) {
    return this.repository.findAll(new PageRequest(page - 1,size));
  }
 else {
    Assert.notNull(properties);
    return this.repository.findAll(new PageRequest(page - 1,size,new Sort(Sort.Direction.fromString(direction.toUpperCase()),properties.split(""String_Node_Str""))));
  }
}"
16684,"/** 
 * Find all resources, and return a paginated collection<br/> REST webservice published : GET /search?page=0&size=20
 * @param page   Page number starting from 0. default to 0
 * @param size   Number of resources by pages. default to 10
 * @return OK http status code if the request has been correctly processed, with the a paginated collection of all resource enclosed in the body.
 */
@RequestMapping(method=RequestMethod.GET) @ResponseBody Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size);","/** 
 * Find all resources, and return a paginated and optionaly sorted collection<br/> REST webservice published : GET /search?page=0&size=20 or GET /search?page=0&size=20&direction=desc&properties=name
 * @param page   Page number starting from 0. default to 0
 * @param size   Number of resources by pages. default to 10
 * @param direction Optional sort direction, could be ""asc"" or ""desc""
 * @param properties Ordered list of comma separeted properies used for sorting resulats. At least one property should be provided if direction is specified
 * @return OK http status code if the request has been correctly processed, with the a paginated collection of all resource enclosed in the body.
 */
@RequestMapping(method=RequestMethod.GET) @ResponseBody Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String direction,@RequestParam(value=""String_Node_Str"",required=false) String properties);"
16685,"/** 
 * {@inheritDoc}
 */
@Override public Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size){
  Assert.isTrue(page > 0,""String_Node_Str"");
  return this.service.findAll(new PageRequest(page - 1,size));
}","/** 
 * {@inheritDoc}
 */
@Override public Page<T> findPaginated(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") Integer size,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String direction,@RequestParam(value=""String_Node_Str"",required=false) String properties){
  Assert.isTrue(page > 0,""String_Node_Str"");
  Assert.isTrue(direction.isEmpty() || direction.equalsIgnoreCase(Sort.Direction.ASC.toString()) || direction.equalsIgnoreCase(Sort.Direction.DESC.toString()),""String_Node_Str"");
  if (direction.isEmpty()) {
    return this.service.findAll(new PageRequest(page - 1,size));
  }
 else {
    Assert.notNull(properties);
    return this.service.findAll(new PageRequest(page - 1,size,new Sort(Sort.Direction.fromString(direction.toUpperCase()),properties.split(""String_Node_Str""))));
  }
}"
16686,"@Test public void testSample(){
  Sample sample=this.request(""String_Node_Str"").getJson().resource(Sample.class);
  Assertions.assertThat(sample).isNotNull();
  Assertions.assertThat(sample.getName()).isEqualTo(""String_Node_Str"");
}","@Test public void testSample(){
  Sample sample=this.request(""String_Node_Str"").jsonGet().resource(Sample.class);
  Assertions.assertThat(sample).isNotNull();
  Assertions.assertThat(sample.getName()).isEqualTo(""String_Node_Str"");
}"
16687,"@Test(expectedExceptions=ConflictClientException.class) public void testEntityExistsException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=ConflictClientException.class) public void testEntityExistsException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16688,"@Test(expectedExceptions=BadRequestClientException.class) public void testIllegalArgumentException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=BadRequestClientException.class) public void testIllegalArgumentException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16689,"@Test(expectedExceptions=InternalServerErrorClientException.class) public void testException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=InternalServerErrorClientException.class) public void testException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16690,"@Test(expectedExceptions=NotAcceptableClientException.class) public void testHttpMediaTypeNotAcceptableException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=NotAcceptableClientException.class) public void testHttpMediaTypeNotAcceptableException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16691,"@Test(expectedExceptions=InternalServerErrorClientException.class) public void testRuntimeException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=InternalServerErrorClientException.class) public void testRuntimeException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16692,"@Test(expectedExceptions=InternalServerErrorClientException.class) public void testClientException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=InternalServerErrorClientException.class) public void testClientException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16693,"@Test(expectedExceptions=NotFoundClientException.class) public void testEntityNotFoundException(){
  this.request(""String_Node_Str"").getJson();
}","@Test(expectedExceptions=NotFoundClientException.class) public void testEntityNotFoundException(){
  this.request(""String_Node_Str"").jsonGet();
}"
16694,"@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16695,"@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").getJson();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").jsonGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16696,"@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16697,"@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
}","@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
}"
16698,"@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
  List<Sample> samples=response.resource(new TypeReference<List<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.size()).isEqualTo(2);
  Assertions.assertThat(samples.get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16699,"@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").getJson();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").jsonGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16700,"@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16701,"@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getJson();
}","@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").jsonGet();
}"
16702,"@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}","@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}"
16703,"@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").getXml();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").xmlGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16704,"@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16705,"@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
}","@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
}"
16706,"@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}","@Test(expectedExceptions={NotImplementedClientException.class}) public void testFindAllResourcesUnpaginated(){
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").jsonPost(new Sample(""String_Node_Str""));
  Response r=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Assertions.assertThat(r).isNotNull();
  Assertions.assertThat(r.getStatus()).isEqualTo(Http.NOT_IMPLEMENTED);
}"
16707,"@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").getXml();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindAllResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").xmlGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16708,"@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}","@Test public void testFindPaginatedResources(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  Response response=this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
  Page<Sample> samples=response.resource(new TypeReference<Page<Sample>>(){
  }
);
  Assertions.assertThat(samples).isNotNull();
  Assertions.assertThat(samples.getContent()).isNotNull();
  Assertions.assertThat(samples.getContent().size()).isEqualTo(2);
  Assertions.assertThat(samples.getTotalPages()).isEqualTo(1);
  Assertions.assertThat(samples.getTotalElements()).isEqualTo(2);
  Assertions.assertThat(samples.getContent().get(0).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
  Assertions.assertThat(samples.getContent().get(1).getName()).isIn(""String_Node_Str"",""String_Node_Str"");
}"
16709,"@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").getXml();
}","@Test(expectedExceptions={BadRequestClientException.class}) public void testFindPaginatedResourcesReturnsBadRequestForAnInvalidPageNumber(){
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").xmlPost(new Sample(""String_Node_Str""));
  this.request(""String_Node_Str"").setQueryParameter(""String_Node_Str"",""String_Node_Str"").xmlGet();
}"
16710,"/** 
 * {@inheritDoc}
 */
@Override public T findById(@PathVariable ID id){
  T entity=this.repository.findOne(id);
  if (entity == null) {
    throw new NotFoundException();
  }
  return entity;
}","/** 
 * {@inheritDoc}
 */
@Override public T findById(@PathVariable ID id){
  T entity=(T)this.repository.findOne(id);
  if (entity == null) {
    throw new NotFoundException();
  }
  return entity;
}"
16711,"/** 
 * {@inheritDoc}
 */
@Override public T create(@RequestBody T resource){
  return this.repository.save(resource);
}","/** 
 * {@inheritDoc}
 */
@Override public T create(@RequestBody T resource){
  return (T)this.repository.save(resource);
}"
16712,"/** 
 * {@inheritDoc}
 */
@Override public T update(@PathVariable ID id,@RequestBody T resource){
  Assert.notNull(id,""String_Node_Str"");
  Serializable entityId=this.getIdFromResource(resource);
  if ((entityId == null) || (!id.equals(entityId))) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  T retreivedEntity=this.repository.findOne(id);
  if (retreivedEntity == null) {
    throw new NotFoundException();
  }
  return this.repository.save(resource);
}","/** 
 * {@inheritDoc}
 */
@Override public T update(@PathVariable ID id,@RequestBody T resource){
  Assert.notNull(id,""String_Node_Str"");
  T retreivedResource=(T)this.findById(id);
  if (retreivedResource == null) {
    throw new NotFoundException();
  }
  return (T)this.repository.save(resource);
}"
16713,"/** 
 * {@inheritDoc}
 */
@Override public void delete(@PathVariable ID id){
  this.repository.delete(id);
}","/** 
 * {@inheritDoc}
 */
@Override public void delete(@PathVariable ID id){
  T resource=(T)this.findById(id);
  this.repository.delete(resource);
}"
16714,"/** 
 * {@inheritDoc}
 */
public T findById(@PathVariable ID id){
  T entity=this.service.findById(id);
  if (entity == null) {
    throw new NotFoundException();
  }
  return entity;
}","/** 
 * {@inheritDoc}
 */
@Override public T findById(@PathVariable ID id){
  T resource=(T)this.service.findById(id);
  if (resource == null) {
    throw new NotFoundException();
  }
  return resource;
}"
16715,"/** 
 * {@inheritDoc}
 */
@Override public T create(@RequestBody T entity){
  return this.service.create(entity);
}","/** 
 * {@inheritDoc}
 */
@Override public T create(@RequestBody T resource){
  return (T)this.service.create(resource);
}"
16716,"/** 
 * {@inheritDoc}
 */
@Override public T update(@PathVariable ID id,@RequestBody T resource){
  Assert.notNull(id,""String_Node_Str"");
  Serializable entityId=this.getIdFromResource(resource);
  if ((entityId == null) || (!id.equals(entityId))) {
    throw new IllegalArgumentException();
  }
  T retreivedEntity=this.service.findById(id);
  if (retreivedEntity == null) {
    throw new NotFoundException();
  }
  return this.service.update(resource);
}","/** 
 * {@inheritDoc}
 */
@Override public T update(@PathVariable ID id,@RequestBody T resource){
  Assert.notNull(id,""String_Node_Str"");
  T retreivedResource=this.findById(id);
  if (retreivedResource == null) {
    throw new NotFoundException();
  }
  return (T)this.service.update(resource);
}"
16717,"/** 
 * {@inheritDoc}
 */
@Override public void delete(@PathVariable ID id){
  this.service.delete(id);
}","/** 
 * {@inheritDoc}
 */
@Override public void delete(@PathVariable ID id){
  T resource=this.findById(id);
  this.service.delete(resource);
}"
16718,"@Override @Inject public void setRepository(WebSampleResourceRepository repository){
  this.repository=repository;
}","@Override @Inject public void setRepository(SampleResourceRepository repository){
  this.repository=repository;
}"
16719,"@Override @Inject public void setService(WebSampleResourceService service){
  this.service=service;
}","@Override @Inject public void setService(SampleResourceService service){
  this.service=service;
}"
16720,"@Test @SuppressWarnings(""String_Node_Str"") public void testFindResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_XML).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
  wr=resource().path(getResourcePath() + ""String_Node_Str"" + getResourceId(res));
  ClientResponse cr=wr.get(ClientResponse.class);
  Assert.assertEquals(""String_Node_Str"",Status.OK.getStatusCode(),cr.getStatus());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testFindResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_JSON).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
  wr=resource().path(getResourcePath() + ""String_Node_Str"" + getResourceId(res));
  ClientResponse cr=wr.get(ClientResponse.class);
  Assert.assertEquals(""String_Node_Str"",Status.OK.getStatusCode(),cr.getStatus());
}"
16721,"@Test @SuppressWarnings(""String_Node_Str"") public void testCreateResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_XML).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
}","@Test @SuppressWarnings(""String_Node_Str"") public void testCreateResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_JSON).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
}"
16722,"@Test @SuppressWarnings(""String_Node_Str"") public void testDeleteResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
  wr=resource().path(getResourcePath() + ""String_Node_Str"" + getResourceId(res));
  ClientResponse response=wr.delete(ClientResponse.class);
  Assert.assertEquals(Status.NO_CONTENT.getStatusCode(),response.getStatus());
  response=wr.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
  Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),response.getStatus());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testDeleteResource(){
  WebResource wr=resource().path(getResourcePath());
  T r=createTestResource();
  T res=(T)wr.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(r.getClass(),r);
  Assert.assertNotNull(""String_Node_Str"",res);
  wr=resource().path(getResourcePath() + ""String_Node_Str"" + getResourceId(res));
  ClientResponse response=wr.delete(ClientResponse.class);
  Assert.assertEquals(Status.NO_CONTENT.getStatusCode(),response.getStatus());
  response=wr.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),response.getStatus());
}"
16723,"@SuppressWarnings(""String_Node_Str"") @Test public void testUpdate(){
  T r1=createTestResource();
  r1=(T)resource().path(getResourcePath()).type(MediaType.APPLICATION_XML).post(r1.getClass(),r1);
  WebResource wr=resource().path(getResourcePath() + ""String_Node_Str"" + this.getResourceId(r1));
  String response1=wr.accept(MediaType.APPLICATION_JSON).get(String.class);
  T r2=udpateTestResource(r1);
  r2=(T)wr.type(MediaType.APPLICATION_XML).put(r2.getClass(),r2);
  String response2=wr.accept(MediaType.APPLICATION_JSON).get(String.class);
  Assert.assertFalse(response1.equals(response2));
}","@SuppressWarnings(""String_Node_Str"") @Test public void testUpdate(){
  T r1=createTestResource();
  r1=(T)resource().path(getResourcePath()).type(MediaType.APPLICATION_JSON).post(r1.getClass(),r1);
  WebResource wr=resource().path(getResourcePath() + ""String_Node_Str"" + this.getResourceId(r1));
  String response1=wr.accept(MediaType.APPLICATION_JSON).get(String.class);
  T r2=udpateTestResource(r1);
  r2=(T)wr.type(MediaType.APPLICATION_JSON).put(r2.getClass(),r2);
  String response2=wr.accept(MediaType.APPLICATION_JSON).get(String.class);
  Assert.assertFalse(response1.equals(response2));
}"
16724,"@Test public void testFindAllBeans(){
  WebResource r=resource().path(""String_Node_Str"");
  String response=r.type(MediaType.APPLICATION_XML).get(String.class);
  Assert.assertTrue(response.contains(""String_Node_Str""));
}","@Test public void testFindAllBeans(){
  WebResource r=resource().path(""String_Node_Str"");
  String response=r.type(MediaType.APPLICATION_JSON).get(String.class);
  Assert.assertTrue(response.contains(""String_Node_Str""));
}"
16725,"/** 
 * Override this methods in order to secure it 
 */
@Override @POST @RolesAllowed({""String_Node_Str""}) public User create(User user){
  return super.create(user);
}","@POST @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public User create(UserWithPassword userWithPassword){
  return super.create(userWithPassword.toUser());
}"
16726,"@Override protected void doParse(Element element,ParserContext parserContext,BeanDefinitionBuilder builder){
  BeanDefinitionBuilder databaseConnectionBuilder=BeanDefinitionBuilder.genericBeanDefinition(DatabaseConnectionFactory.class);
  databaseConnectionBuilder.addPropertyReference(""String_Node_Str"",element.getAttribute(DATASOURCE_ATTRIBUTE));
  AbstractBeanDefinition databaseConnectionBean=databaseConnectionBuilder.getBeanDefinition();
  String databaseConnectionBeanName=resolveId(element,databaseConnectionBean,parserContext) + ""String_Node_Str"";
  parserContext.getRegistry().registerBeanDefinition(databaseConnectionBeanName,databaseConnectionBean);
  builder.addPropertyReference(""String_Node_Str"",databaseConnectionBeanName);
  BeanDefinitionBuilder dbTesterBeanDefinitionBuilder=BeanDefinitionBuilder.genericBeanDefinition(DefaultDatabaseTester.class);
  dbTesterBeanDefinitionBuilder.addConstructorArgReference(databaseConnectionBeanName);
  AbstractBeanDefinition dbTesterBean=dbTesterBeanDefinitionBuilder.getBeanDefinition();
  String dbTesterBeanName=resolveId(element,dbTesterBean,parserContext) + ""String_Node_Str"";
  parserContext.getRegistry().registerBeanDefinition(dbTesterBeanName,dbTesterBean);
  builder.addPropertyReference(""String_Node_Str"",dbTesterBeanName);
  List<Element> includeElements=DomUtils.getChildElementsByTagName(element,INCLUDE_TABLE_ELEMENT);
  if (includeElements.size() > 0) {
    List<String> includes=new ArrayList<String>();
    for (    Element includeElement : includeElements) {
      includes.add(includeElement.getNodeValue());
    }
    builder.addPropertyValue(""String_Node_Str"",includes);
  }
  List<Element> excludeElements=DomUtils.getChildElementsByTagName(element,EXCLUDE_TABLE_ELEMENT);
  if (excludeElements.size() > 0) {
    List<String> excludes=new ArrayList<String>();
    for (    Element excludeElement : excludeElements) {
      excludes.add(excludeElement.getNodeValue());
    }
    builder.addPropertyValue(""String_Node_Str"",excludes);
  }
}","@Override protected void doParse(Element element,ParserContext parserContext,BeanDefinitionBuilder builder){
  BeanDefinitionBuilder databaseConnectionBuilder=BeanDefinitionBuilder.genericBeanDefinition(DatabaseConnectionFactory.class);
  databaseConnectionBuilder.addPropertyReference(""String_Node_Str"",element.getAttribute(DATASOURCE_ATTRIBUTE));
  AbstractBeanDefinition databaseConnectionBean=databaseConnectionBuilder.getBeanDefinition();
  String databaseConnectionBeanName=resolveId(element,databaseConnectionBean,parserContext) + ""String_Node_Str"";
  parserContext.getRegistry().registerBeanDefinition(databaseConnectionBeanName,databaseConnectionBean);
  builder.addPropertyReference(""String_Node_Str"",databaseConnectionBeanName);
  BeanDefinitionBuilder dbTesterBeanDefinitionBuilder=BeanDefinitionBuilder.genericBeanDefinition(DefaultDatabaseTester.class);
  dbTesterBeanDefinitionBuilder.addConstructorArgReference(databaseConnectionBeanName);
  AbstractBeanDefinition dbTesterBean=dbTesterBeanDefinitionBuilder.getBeanDefinition();
  String dbTesterBeanName=resolveId(element,dbTesterBean,parserContext) + ""String_Node_Str"";
  parserContext.getRegistry().registerBeanDefinition(dbTesterBeanName,dbTesterBean);
  builder.addPropertyReference(""String_Node_Str"",dbTesterBeanName);
  List<Element> includeElements=DomUtils.getChildElementsByTagName(element,INCLUDE_TABLE_ELEMENT);
  if (includeElements.size() > 0) {
    List<String> includes=new ArrayList<String>();
    for (    Element includeElement : includeElements) {
      includes.add(DomUtils.getTextValue(includeElement));
    }
    builder.addPropertyValue(""String_Node_Str"",includes);
  }
  List<Element> excludeElements=DomUtils.getChildElementsByTagName(element,EXCLUDE_TABLE_ELEMENT);
  if (excludeElements.size() > 0) {
    List<String> excludes=new ArrayList<String>();
    for (    Element excludeElement : excludeElements) {
      excludes.add(DomUtils.getTextValue(excludeElement));
    }
    builder.addPropertyValue(""String_Node_Str"",excludes);
  }
}"
16727,"@Test public void shouldHaveIncludes(){
  Assert.assertNotNull(dbUnitConfiguration.getIncludeTables());
  Assert.assertEquals(2,dbUnitConfiguration.getIncludeTables().size());
}","@Test public void shouldHaveIncludes(){
  Assert.assertNotNull(dbUnitConfiguration.getIncludeTables());
  Assert.assertEquals(2,dbUnitConfiguration.getIncludeTables().size());
  Assert.assertNotNull(""String_Node_Str"",dbUnitConfiguration.getIncludeTables().get(0));
  Assert.assertNotNull(""String_Node_Str"",dbUnitConfiguration.getIncludeTables().get(1));
}"
16728,"@Test public void shouldHaveExcludes(){
  Assert.assertNotNull(dbUnitConfiguration.getExcludeTables());
  Assert.assertEquals(1,dbUnitConfiguration.getExcludeTables().size());
}","@Test public void shouldHaveExcludes(){
  Assert.assertNotNull(dbUnitConfiguration.getExcludeTables());
  Assert.assertEquals(1,dbUnitConfiguration.getExcludeTables().size());
  Assert.assertEquals(""String_Node_Str"",dbUnitConfiguration.getExcludeTables().get(0));
}"
16729,"/** 
 * Return the currently authentified Used<br/> <p> This is the first method to call once authenticated with Oauth2 Currently, the Oauth2 authentication method is the one remaining We can't be log without using OAuth2 The user_id will be override by the filter layer, so we can't get the User object corresponding to another user than the one logged </p>
 * @param login , given by the filter layer, once the token has been checked
 * @return the Logged User Object, in XMl or JSON type if everything OK,otherwise (It shouldn't append) an HTTP error 404
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public User currentUser(){
  SecurityContext securityContext=SecurityContextHolder.getContext();
  IdentityUserDetailsAdapter userDetails=(IdentityUserDetailsAdapter)securityContext.getAuthentication().getPrincipal();
  User user=this.service.findByLogin(userDetails.getUsername());
  if (user == null) {
    throw new NotFoundException();
  }
  if (user != null) {
    List<String> permissions=PermissionsOwnerTools.getInheritedPermission(user);
    user.getPermissions().clear();
    user.getPermissions().addAll(permissions);
  }
  return user;
}","/** 
 * Return the currently authentified Used<br/> <p> This is the first method to call once authenticated with Oauth2 Currently, the Oauth2 authentication method is the one remaining We can't be log without using OAuth2 The user_id will be override by the filter layer, so we can't get the User object corresponding to another user than the one logged </p>
 * @param login , given by the filter layer, once the token has been checked
 * @return the Logged User Object, in XMl or JSON type if everything OK,otherwise (It shouldn't append) an HTTP error 404
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public User currentUser(){
  SecurityContext securityContext=SecurityContextHolder.getContext();
  UserDetails userDetails=(UserDetails)securityContext.getAuthentication().getPrincipal();
  Assert.notNull(userDetails);
  User user=this.service.findByLogin(userDetails.getUsername());
  if (user == null) {
    throw new NotFoundException();
  }
  if (user != null) {
    List<String> permissions=PermissionsOwnerTools.getInheritedPermission(user);
    user.getPermissions().clear();
    user.getPermissions().addAll(permissions);
  }
  return user;
}"
16730,"public User(User u){
  super(u);
  String s;
  s=u.getFirstName();
  firstName=(s == null) ? new String() : new String(s);
  s=u.getLastName();
  lastName=(s == null) ? new String() : new String(s);
  s=u.getLogin();
  login=(s == null) ? new String() : new String(s);
  s=u.getEmail();
  email=(s == null) ? new String() : new String(s);
  List<Group> l=u.getGroups();
  groups=(l == null) ? new ArrayList<Group>() : new ArrayList<Group>(u.getGroups());
}","public User(User u){
  super(u);
  String s;
  s=u.getFirstName();
  firstName=(s == null) ? new String() : new String(s);
  s=u.getLastName();
  lastName=(s == null) ? new String() : new String(s);
  s=u.getLogin();
  login=(s == null) ? new String() : new String(s);
  s=u.getEmail();
  email=(s == null) ? new String() : new String(s);
  s=u.getPassword();
  password=(s == null) ? new String() : new String(s);
  List<Group> l=u.getGroups();
  groups=(l == null) ? new ArrayList<Group>() : new ArrayList<Group>(u.getGroups());
}"
16731,"/** 
 * {@inheritDoc}
 */
@Override @Transactional(readOnly=false) public User update(User user) throws AlreadyExistingEntityException {
  User existingUser=this.findById(user.getId());
  if (existingUser != null) {
    user.setPassword(existingUser.getPassword());
  }
  return super.update(user);
}","/** 
 * {@inheritDoc}
 */
@Override @Transactional(readOnly=false) public User update(User user) throws AlreadyExistingEntityException {
  User existingUser=this.findById(user.getId());
  if (user.getPassword() == null) {
    user.setPassword(existingUser.getPassword());
  }
 else   if (!user.getPassword().equals(existingUser.getPassword())) {
    user.setPassword(passwordEncoder.encodePassword(user.getPassword(),null));
  }
  return super.update(user);
}"
16732,"@Test public void shouldManageToCheckUserIdentity(){
  User u=this.createTestResource();
  String password=u.getPassword();
  u=resource().path(""String_Node_Str"").type(MediaType.APPLICATION_XML).post(User.class,u);
  resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",password).type(MediaType.APPLICATION_XML).post(u);
  ClientResponse postAnswerCorrectPass=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",u.getLogin()).queryParam(""String_Node_Str"",password).post(ClientResponse.class);
  ClientResponse postAnswerWrongPass=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",u.getLogin()).queryParam(""String_Node_Str"",""String_Node_Str"").post(ClientResponse.class);
  assertEquals(""String_Node_Str"",Status.NO_CONTENT,postAnswerCorrectPass.getClientResponseStatus());
  assertEquals(""String_Node_Str"",Status.NOT_FOUND,postAnswerWrongPass.getClientResponseStatus());
}","@Test public void shouldManageToCheckUserIdentity(){
  UserWithPassword u=new UserWithPassword(this.createTestResource());
  String password=u.getPassword();
  User user=resource().path(""String_Node_Str"").type(MediaType.APPLICATION_JSON).post(User.class,u);
  ClientResponse postAnswerCorrectPass=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",user.getLogin()).queryParam(""String_Node_Str"",password).post(ClientResponse.class);
  ClientResponse postAnswerWrongPass=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",user.getLogin()).queryParam(""String_Node_Str"",""String_Node_Str"").post(ClientResponse.class);
  assertEquals(""String_Node_Str"",Status.NO_CONTENT,postAnswerCorrectPass.getClientResponseStatus());
  assertEquals(""String_Node_Str"",Status.NOT_FOUND,postAnswerWrongPass.getClientResponseStatus());
}"
16733,"/** 
 * Gets the permissions of one group
 * @param name the name of the group to search insides groups
 * @return a list of permissions, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getPermisionsFromGroup(@PathParam(""String_Node_Str"") String name){
  Response r=null;
  List<String> permissions=this.service.getGroupDirectPermissions(name);
  r=(permissions == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(permissions).build();
  return r;
}","/** 
 * Gets the permissions of one group
 * @param name the name of the group to search insides groups
 * @return a list of permissions, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") public List<String> getPermisionsFromGroup(@PathParam(""String_Node_Str"") String name){
  List<String> permissions=this.service.getGroupDirectPermissions(name);
  if (permissions == null) {
    throw new NotFoundException();
  }
  return permissions;
}"
16734,"/** 
 * Deletes a group from the groups lists of one other group
 * @param name the name of the group in which we should remove a group
 * @param group the name of the gorup the be removed
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void removeGroupsForUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String groupName){
  this.service.removeGroupFromGroup(name,groupName);
}","/** 
 * Deletes a group from the groups lists of one other group
 * @param name the name of the group in which we should remove a group
 * @param group the name of the gorup the be removed
 */
@DELETE @Path(""String_Node_Str"") public void removeGroupsForUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String groupName){
  this.service.removeGroupFromGroup(name,groupName);
}"
16735,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getUsersFromGroup(@PathParam(""String_Node_Str"") String name){
  Response r=null;
  List<User> usersFromGroup=this.userService.getUsersFromGroup(name);
  r=(usersFromGroup == null) ? Response.status(Status.NOT_FOUND).build() : Response.ok(usersFromGroup).build();
  return r;
}","@GET @Path(""String_Node_Str"") public List<User> getUsersFromGroup(@PathParam(""String_Node_Str"") String name){
  List<User> usersFromGroup=this.userService.getUsersFromGroup(name);
  if (usersFromGroup == null) {
    throw new NotFoundException();
  }
  return usersFromGroup;
}"
16736,"/** 
 * Puts a group inside the groups lists of one other group
 * @param name the name of the group in which we should add a group
 * @param group the name of the group the be added
 */
@PUT @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void addGroupToUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String group){
  this.service.addGroupToGroup(name,group);
}","/** 
 * Puts a group inside the groups lists of one other group
 * @param name the name of the group in which we should add a group
 * @param group the name of the group the be added
 */
@PUT @Path(""String_Node_Str"") public void addGroupToUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String group){
  this.service.addGroupToGroup(name,group);
}"
16737,"/** 
 * Gets the groups depending of the group
 * @param name the name of the group to search insides groups
 * @return a list of group, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response getGroupsFromGroups(@PathParam(""String_Node_Str"") String name){
  Group g=this.service.findByName(name);
  Response r=null;
  List<Group> groups=null;
  if (g != null) {
    groups=g.getGroups();
  }
  r=(groups == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(groups).build();
  return r;
}","/** 
 * Gets the groups depending of the group
 * @param name the name of the group to search insides groups
 * @return a list of group, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") public List<Group> getGroupsFromGroups(@PathParam(""String_Node_Str"") String name){
  Group g=this.service.findByName(name);
  if (g == null) {
    throw new NotFoundException();
  }
  return g.getGroups();
}"
16738,"/** 
 * Remove a permission form one Group
 * @param name the name of the group in which we should remove a permission
 * @param permisssion the permission to be removed
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void deletePermissionsFromUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String permission){
  this.service.removePermissionFromGroup(name,permission);
}","/** 
 * Remove a permission form one Group
 * @param name the name of the group in which we should remove a permission
 * @param permisssion the permission to be removed
 */
@DELETE @Path(""String_Node_Str"") public void deletePermissionsFromUser(@PathParam(""String_Node_Str"") String name,@PathParam(""String_Node_Str"") String permission){
  this.service.removePermissionFromGroup(name,permission);
}"
16739,"/** 
 * Add a permission to a group
 * @param name the name of the group in which we should add a group
 * @param permission the permission to be added
 */
@PUT @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void addPermissionsToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.addPermissionToGroup(login,permission);
}","/** 
 * Add a permission to a group
 * @param name the name of the group in which we should add a group
 * @param permission the permission to be added
 */
@PUT @Path(""String_Node_Str"") public void addPermissionsToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.addPermissionToGroup(login,permission);
}"
16740,"/** 
 * Gets all the users that have a role, direct or inherited.
 * @param filters A list of roles to look for.
 * @return A list of users having at least one of the roles defined as parameter.
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public Response findAllUsersWithRole(@PathParam(""String_Node_Str"") String name){
  List<User> usersWithRoles=this.userService.findAllUsersWithRoles(Arrays.asList(name));
  Response r=(usersWithRoles == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(usersWithRoles).build();
  return r;
}","/** 
 * Gets all the users that have a role, direct or inherited.
 * @param filters A list of roles to look for.
 * @return A list of users having at least one of the roles defined as parameter.
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public List<User> findAllUsersWithRole(@PathParam(""String_Node_Str"") String name){
  List<User> usersWithRoles=this.userService.findAllUsersWithRoles(Arrays.asList(name));
  if (usersWithRoles == null) {
    throw new NotFoundException();
  }
  return usersWithRoles;
}"
16741,"/** 
 * Performs a search.
 * @param query @QueryParam(""query"") Search query
 * @param withUsers @QueryParam(""users"")@DefaultValue(""true"") True to search on users
 * @param withGroups @QueryParam(""groups"")@DefaultValue(""true"") True to search on groups
 * @param withRoles @QueryParam(""roles"")@DefaultValue(""true"") True to search on roles
 * @return An array of matching users, groups and roles.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response search(@QueryParam(""String_Node_Str"") String query,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") Boolean withUsers,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") Boolean withGroups,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") Boolean withRoles){
  logger.debug(""String_Node_Str"" + query);
  ResponseBuilder response=Response.serverError();
  try {
    List<Object> results=searchService.search(query,withUsers,withGroups,withRoles);
    GenericEntity<List<Object>> entity=new GenericEntity<List<Object>>(results){
    }
;
    response=Response.ok(entity);
  }
 catch (  Exception exc) {
    response.entity(exc.getMessage());
  }
  return response.build();
}","/** 
 * Performs a search.
 * @param query @QueryParam(""query"") Search query
 * @param withUsers @QueryParam(""users"")@DefaultValue(""true"") True to search on users
 * @param withGroups @QueryParam(""groups"")@DefaultValue(""true"") True to search on groups
 * @return An array of matching users, groups and roles.
 */
@GET public Response search(@QueryParam(""String_Node_Str"") String query,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") Boolean withUsers,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") Boolean withGroups){
  logger.debug(""String_Node_Str"" + query);
  ResponseBuilder response=Response.serverError();
  try {
    List<AbstractPermissionsOwner> results=searchService.search(query,withUsers,withGroups);
    GenericEntity<List<AbstractPermissionsOwner>> entity=new GenericEntity<List<AbstractPermissionsOwner>>(results){
    }
;
    response=Response.ok(entity);
  }
 catch (  Exception exc) {
    response.entity(exc.getMessage());
  }
  return response.build();
}"
16742,"/** 
 * Gets the permissions of a user
 * @Param login the login of the user to search insides groups
 * @return a list of permissions, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public Response getPermissionsFromUser(@PathParam(""String_Node_Str"") String login){
  Response r=null;
  List<String> permissions=this.service.getUserPermissions(login);
  r=(permissions == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(permissions).build();
  return r;
}","/** 
 * Gets the permissions of a user
 * @Param login the login of the user to search insides groups
 * @return a list of permissions, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public List<String> getPermissionsFromUser(@PathParam(""String_Node_Str"") String login){
  List<String> permissions=this.service.getUserPermissions(login);
  if (permissions == null) {
    throw new NotFoundException();
  }
  return permissions;
}"
16743,"/** 
 * Return the user identified by the specified login.
 * @param login
 * @return the user, in XML or JSON if the user can be found otherwise HTTPError 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public Response getUserByLogin(@PathParam(""String_Node_Str"") String login){
  User user=this.service.findByLogin(login);
  Response r;
  r=(user == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(user).build();
  return r;
}","/** 
 * Return the user identified by the specified login.
 * @param login
 * @return the user, in XML or JSON if the user can be found otherwise HTTPError 404
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public User getUserByLogin(@PathParam(""String_Node_Str"") String login){
  User user=this.service.findByLogin(login);
  if (user == null) {
    throw new NotFoundException();
  }
  return user;
}"
16744,"/** 
 * Deletes a group from the groups lists of a user
 * @Param login the login of the user for which we should remove a group
 * @Param group the name of the group the be removed
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public void removeGroupsForUser(@PathParam(""String_Node_Str"") String userLogin,@PathParam(""String_Node_Str"") String groupName){
  this.service.removeGroupFromUser(userLogin,groupName);
}","/** 
 * Deletes a group from the groups lists of a user
 * @Param login the login of the user for which we should remove a group
 * @Param group the name of the group the be removed
 */
@DELETE @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public void removeGroupsForUser(@PathParam(""String_Node_Str"") String userLogin,@PathParam(""String_Node_Str"") String groupName){
  this.service.removeGroupFromUser(userLogin,groupName);
}"
16745,"/** 
 * Puts a group inside the groups lists of a user
 * @Param login the login of the user for which we should add a group
 * @Param group the name of the group the be added
 */
@PUT @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public void addGroupToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String group){
  this.service.addGroupToUser(login,group);
}","/** 
 * Puts a group inside the groups lists of a user
 * @Param login the login of the user for which we should add a group
 * @Param group the name of the group the be added
 */
@PUT @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public void addGroupToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String group){
  this.service.addGroupToUser(login,group);
}"
16746,"/** 
 * Change the password of the user
 * @param user the user with the new password inside
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str"",""String_Node_Str""}) public Response changePassword(User u){
  u=this.service.updatePassword(u);
  Response r;
  r=(u == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(u).build();
  return r;
}","/** 
 * Change the password of the user
 * @param user the user with the new password inside
 */
@POST @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str"",""String_Node_Str""}) public User changePassword(User u){
  User updatedUser=this.service.updatePassword(u);
  if (updatedUser == null) {
    throw new NotFoundException();
  }
  return updatedUser;
}"
16747,"/** 
 * Return the currently authentified Used<br/> <p> This is the first method to call once authenticated with Oauth2 Currently, the Oauth2 authentication method is the one remaining We can't be log without using OAuth2 The user_id will be override by the filter layer, so we can't get the User object corresponding to another user than the one logged </p>
 * @param login , given by the filter layer, once the token has been checked
 * @return the Logged User Object, in XMl or JSON type if everything OK,otherwise (It shouldn't append) an HTTP error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str"",""String_Node_Str""}) public Response currentUser(){
  SecurityContext securityContext=SecurityContextHolder.getContext();
  IdentityUserDetailsAdapter userDetails=(IdentityUserDetailsAdapter)securityContext.getAuthentication().getPrincipal();
  User user=this.service.findByLogin(userDetails.getUsername());
  Response response=Response.status(Status.NOT_FOUND).build();
  if (user != null) {
    List<String> permissions=PermissionsOwnerTools.getInheritedPermission(user);
    user.getPermissions().clear();
    user.getPermissions().addAll(permissions);
    response=Response.ok(user).build();
  }
  return response;
}","/** 
 * Return the currently authentified Used<br/> <p> This is the first method to call once authenticated with Oauth2 Currently, the Oauth2 authentication method is the one remaining We can't be log without using OAuth2 The user_id will be override by the filter layer, so we can't get the User object corresponding to another user than the one logged </p>
 * @param login , given by the filter layer, once the token has been checked
 * @return the Logged User Object, in XMl or JSON type if everything OK,otherwise (It shouldn't append) an HTTP error 404
 */
@GET @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str"",""String_Node_Str""}) public User currentUser(){
  SecurityContext securityContext=SecurityContextHolder.getContext();
  IdentityUserDetailsAdapter userDetails=(IdentityUserDetailsAdapter)securityContext.getAuthentication().getPrincipal();
  User user=this.service.findByLogin(userDetails.getUsername());
  if (user == null) {
    throw new NotFoundException();
  }
  if (user != null) {
    List<String> permissions=PermissionsOwnerTools.getInheritedPermission(user);
    user.getPermissions().clear();
    user.getPermissions().addAll(permissions);
  }
  return user;
}"
16748,"/** 
 * Remove a permisssion for one User
 * @Param login the login of the user in which we should remove a permission
 * @Param permisssion the permisssion to be removed
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public void deletePermissionsFromUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.removePermissionFromUser(login,permission);
}","/** 
 * Remove a permisssion for one User
 * @Param login the login of the user in which we should remove a permission
 * @Param permisssion the permisssion to be removed
 */
@DELETE @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public void deletePermissionsFromUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.removePermissionFromUser(login,permission);
}"
16749,"/** 
 * Add a permission to a user
 * @Param login the login of the user in which we should add a group
 * @Param permission the permission to be added
 */
@PUT @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public void addPermissionsToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.addPermissionToUser(login,permission);
}","/** 
 * Add a permission to a user
 * @Param login the login of the user in which we should add a group
 * @Param permission the permission to be added
 */
@PUT @Path(""String_Node_Str"") @RolesAllowed({""String_Node_Str""}) public void addPermissionsToUser(@PathParam(""String_Node_Str"") String login,@PathParam(""String_Node_Str"") String permission){
  this.service.addPermissionToUser(login,permission);
}"
16750,"/** 
 * Gets the groups depending of the user
 * @Param login the login of the user to search insides groups
 * @return a list of group, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public Response getGroupsFromUser(@PathParam(""String_Node_Str"") String login){
  User user=this.service.findByLogin(login);
  Response r=null;
  List<Group> groups=null;
  if (user != null) {
    groups=user.getGroups();
  }
  r=(groups == null) ? Response.status(Status.NOT_FOUND).entity(""String_Node_Str"").build() : Response.ok(groups).build();
  return r;
}","/** 
 * Gets the groups depending of the user
 * @Param login the login of the user to search insides groups
 * @return a list of group, in XML or JSON if the group can be foundotherwise HTTP Error 404
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @RolesAllowed({""String_Node_Str""}) public List<Group> getGroupsFromUser(@PathParam(""String_Node_Str"") String login){
  User user=this.service.findByLogin(login);
  if (user == null) {
    throw new NotFoundException();
  }
  List<Group> groups=null;
  if (user != null) {
    groups=user.getGroups();
  }
  if (groups == null) {
    throw new NotFoundException();
  }
  return groups;
}"
16751,"private BeanDefinition createSelectiveDatabasePopulator(Element element){
  List<Element> scripts=DomUtils.getChildElementsByTagName(element,""String_Node_Str"");
  List<Element> exceptionElements=DomUtils.getChildElementsByTagName(element,""String_Node_Str"");
  boolean ignoreFailedDrops=element.getAttribute(""String_Node_Str"").equals(""String_Node_Str"");
  boolean continueOnError=element.getAttribute(""String_Node_Str"").equals(""String_Node_Str"");
  BeanDefinitionBuilder selectivebuilder=BeanDefinitionBuilder.genericBeanDefinition(SelectiveDatabasePopulator.class);
  BeanDefinitionBuilder defaultDbPopulatorbuilder=createResourceDatabasePopulatorBuilder(scripts,ignoreFailedDrops,continueOnError);
  selectivebuilder.addPropertyValue(""String_Node_Str"",defaultDbPopulatorbuilder);
  for (  Element exception : exceptionElements) {
    String product=exception.getAttribute(""String_Node_Str"");
    List<Element> exceptionScripts=DomUtils.getChildElementsByTagName(exception,""String_Node_Str"");
    selectivebuilder.addPropertyValue(""String_Node_Str"" + product + ""String_Node_Str"",createResourceDatabasePopulatorBuilder(exceptionScripts,ignoreFailedDrops,continueOnError));
  }
  return selectivebuilder.getBeanDefinition();
}","private BeanDefinition createSelectiveDatabasePopulator(Element element){
  List<Element> scripts=DomUtils.getChildElementsByTagName(element,""String_Node_Str"");
  List<Element> exceptionElements=DomUtils.getChildElementsByTagName(element,""String_Node_Str"");
  boolean ignoreFailedDrops=element.getAttribute(""String_Node_Str"").equals(""String_Node_Str"");
  boolean continueOnError=element.getAttribute(""String_Node_Str"").equals(""String_Node_Str"");
  BeanDefinitionBuilder selectivebuilder=BeanDefinitionBuilder.genericBeanDefinition(SelectiveDatabasePopulator.class);
  BeanDefinition defaultDbPopulator=createResourceDatabasePopulator(scripts,ignoreFailedDrops,continueOnError);
  selectivebuilder.addPropertyValue(""String_Node_Str"",defaultDbPopulator);
  for (  Element exception : exceptionElements) {
    String product=exception.getAttribute(""String_Node_Str"");
    List<Element> exceptionScripts=DomUtils.getChildElementsByTagName(exception,""String_Node_Str"");
    selectivebuilder.addPropertyValue(""String_Node_Str"" + product + ""String_Node_Str"",createResourceDatabasePopulator(exceptionScripts,ignoreFailedDrops,continueOnError));
  }
  return selectivebuilder.getBeanDefinition();
}"
16752,"/** 
 * Create a user with password encryption
 * @param user the user to create
 */
public User create(User user){
  user.setPassword(passwordEncryptor.encryptPassword(user.getPassword()));
  System.out.println(""String_Node_Str"" + user.getPassword());
  dao.save(user);
  return user;
}","/** 
 * Create a user with password encryption
 * @param user the user to create
 */
public User create(User user){
  user.setPassword(passwordEncryptor.encryptPassword(user.getPassword()));
  dao.save(user);
  return user;
}"
16753,"/** 
 * Remove a group from one user's groups
 * @param userLogin the login of the user to whom to group should be remove
 * @param groupeName the name of the group to remove from the user's group list
 */
public void removeGroupForUser(String userLogin,String groupName){
  if (userLogin != null && groupName != null) {
    User u=this.findByLogin(userLogin);
    Group g=groupService.findByName(groupName);
    if (u != null && g != null) {
      u.removeFromGroup(g);
    }
  }
}","/** 
 * Remove a group from one user's groups
 * @param userLogin the login of the user to whom to group should be remove
 * @param groupeName the name of the group to remove from the user's group list
 */
@Transactional public void removeGroupForUser(String userLogin,String groupName){
  if (userLogin != null && groupName != null) {
    User u=this.findByLogin(userLogin);
    Group g=groupService.findByName(groupName);
    if (u != null && g != null) {
      u.removeFromGroup(g);
    }
  }
}"
16754,"/** 
 * Perform audit after method invocation. This method is called even an exception occured.
 */
protected void postAudit(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ((hasErrorOccured()) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",context.toArray());
  }
}","/** 
 * Perform audit after method invocation. This method is called even an exception occured.
 */
protected void postAudit(MethodInvocation invocation,Throwable error){
  if (this.getTargetLogger(invocation).isDebugEnabled()) {
    this.getTargetLogger(invocation).debug(""String_Node_Str"" + ((error == null) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",this.getClassName(invocation),this.getMethodCompleteSignature(invocation));
  }
}"
16755,"/** 
 * Specific method that allow to precisely perform audit from a  {@link ConstraintViolationException}
 */
@SuppressWarnings(""String_Node_Str"") protected void logPreciseContraintViolation(ConstraintViolationException e){
  for (  ConstraintViolation constraintViolation : e.getConstraintViolations()) {
    String[] violationDescriptor={constraintViolation.getRootBeanClass().toString(),constraintViolation.getPropertyPath().toString(),constraintViolation.getMessage()};
    logger.error(""String_Node_Str"",violationDescriptor);
  }
}","/** 
 * Specific method that allow to precisely perform audit from a  {@link ConstraintViolationException}
 */
@SuppressWarnings(""String_Node_Str"") protected void logPreciseContraintViolation(ConstraintViolationException e,MethodInvocation invocation){
  for (  ConstraintViolation constraintViolation : e.getConstraintViolations()) {
    String[] violationDescriptor={constraintViolation.getRootBeanClass().toString(),constraintViolation.getPropertyPath().toString(),constraintViolation.getMessage()};
    this.getTargetLogger(invocation).error(""String_Node_Str"",violationDescriptor);
  }
}"
16756,"/** 
 * @return the target class of this invocation context
 */
private Class<? extends Object> getTargetClassFromInvocation(){
  return invocation.getThis().getClass();
}","/** 
 * @param invocation : method invocation context
 * @return the target class of this invocation context
 */
private Class<? extends Object> getTargetClassFromInvocation(MethodInvocation invocation){
  return invocation.getThis().getClass();
}"
16757,"/** 
 * {@inheritDoc}
 */
@Override public final Object invoke(MethodInvocation invocation) throws Throwable {
  this.invocation=invocation;
  return audit();
}","/** 
 * {@inheritDoc}
 */
@Override public final Object invoke(MethodInvocation invocation) throws Throwable {
  return audit(invocation);
}"
16758,"/** 
 * Perform audit around the invoked method
 * @return the return object from the invoked method
 * @throws Throwable exception if one thrown
 * @see {@link MethodInterceptor#invoke(MethodInvocation)}
 */
private final Object audit() throws Throwable {
  this.buildTargetLogger();
  this.buildContext();
  Object result=null;
  this.preAudit();
  try {
    result=invocation.proceed();
  }
 catch (  Throwable e) {
    this.occuredError=e;
    this.auditError();
    throw e;
  }
 finally {
    postAudit();
  }
  return result;
}","/** 
 * Perform audit around the invoked method
 * @param invocation the method invocation joinpoint
 * @return the return object from the invoked method
 * @throws Throwable exception if one thrown
 * @see {@link MethodInterceptor#invoke(MethodInvocation)}
 */
private final Object audit(MethodInvocation invocation) throws Throwable {
  Object result=null;
  Throwable error=null;
  this.preAudit(invocation);
  try {
    result=invocation.proceed();
  }
 catch (  Throwable e) {
    error=e;
    this.auditError(invocation,error);
    throw e;
  }
 finally {
    postAudit(invocation,error);
  }
  return result;
}"
16759,"/** 
 * Perform audit before method invocation.
 */
protected void preAudit(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",context.toArray());
  }
}","/** 
 * Perform audit before method invocation.
 */
protected void preAudit(MethodInvocation invocation){
  if (this.getTargetLogger(invocation).isDebugEnabled()) {
    this.getTargetLogger(invocation).debug(""String_Node_Str"",this.getClassName(invocation),this.getMethodCompleteSignature(invocation));
  }
}"
16760,"/** 
 * Perform audit when an error occured
 */
protected void auditError(){
  Assert.notNull(this.occuredError,""String_Node_Str"");
  logger.error(""String_Node_Str"" + occuredError.getMessage() + ""String_Node_Str"",context.toArray());
  if (occuredError instanceof ConstraintViolationException) {
    logPreciseContraintViolation((ConstraintViolationException)occuredError);
  }
  logger.error(""String_Node_Str"",occuredError);
}","/** 
 * Perform audit when an error occured
 */
protected void auditError(MethodInvocation invocation,Throwable error){
  Assert.notNull(error,""String_Node_Str"");
  this.getTargetLogger(invocation).error(""String_Node_Str"" + error.getMessage() + ""String_Node_Str"",this.getClassName(invocation),this.getMethodCompleteSignature(invocation));
  if (error instanceof ConstraintViolationException) {
    logPreciseContraintViolation((ConstraintViolationException)error,invocation);
  }
  this.getTargetLogger(invocation).error(""String_Node_Str"",error);
}"
16761,"/** 
 * {@InheritDoc}
 */
@Override public Long generateIdentifierFromEntity(User entity){
  throw new NoSuchMethodError(""String_Node_Str"");
}","/** 
 * {@InheritDoc}
 */
@Override public Long generateIdentifierFromEntity(User entity){
  return entity.getId();
}"
16762,"/** 
 * {@inheritDoc}
 */
@Auditable public void rebuildIndex(){
  this.dao.rebuildIndex();
}","/** 
 * {@inheritDoc}
 */
public void rebuildIndex(){
  this.dao.rebuildIndex();
}"
16763,"/** 
 * {@inheritDoc}
 */
@Auditable public List<Hotel> find(final String query){
  if (query == null || query.isEmpty()) {
    return this.findAll();
  }
 else {
    Page<Hotel> resultList=this.dao.find(query,null);
    if (resultList != null) {
      return this.dao.find(query,null).asList();
    }
 else {
      return new ArrayList<Hotel>();
    }
  }
}","/** 
 * {@inheritDoc}
 */
public List<Hotel> find(final String query){
  if (query == null || query.isEmpty()) {
    return this.findAll();
  }
 else {
    Page<Hotel> resultList=this.dao.find(query,null);
    if (resultList != null) {
      return this.dao.find(query,null).asList();
    }
 else {
      return new ArrayList<Hotel>();
    }
  }
}"
16764,"@Override @Auditable public void rebuildIndex(){
  this.dao.rebuildIndex();
}","@Override public void rebuildIndex(){
  this.dao.rebuildIndex();
}"
16765,"@Override @Auditable public Page<Poll> find(final String query,final Pageable pageable) throws ServiceException {
  if (query == null || ""String_Node_Str"".equals(query.trim())) {
    return this.findAll(pageable);
  }
  try {
    return this.dao.find(query,pageable);
  }
 catch (  ParseException ex) {
    throw new ServiceException(ex.getMessage(),ex);
  }
}","@Override public Page<Poll> find(final String query,final Pageable pageable) throws ServiceException {
  if (query == null || ""String_Node_Str"".equals(query.trim())) {
    return this.findAll(pageable);
  }
  try {
    return this.dao.find(query,pageable);
  }
 catch (  ParseException ex) {
    throw new ServiceException(ex.getMessage(),ex);
  }
}"
16766,"@Override @Auditable @Transactional(readOnly=false) public Poll create(final Poll resource){
  Calendar date=Calendar.getInstance();
  Poll poll=new Poll();
  poll.setAuthor(resource.getAuthor());
  poll.setBody(resource.getBody());
  poll.setTopic(resource.getTopic());
  poll.setCreationDate(date.getTime());
  poll.setAnswers(new ArrayList<Answer>());
  for (int i=0; i < resource.getAnswers().size(); i++) {
    Answer a=resource.getAnswers().get(i);
    Answer answer=new Answer();
    answer.setBody(a.getBody());
    answer.setOrder(i + 1);
    answer.setPoll(poll);
    poll.getAnswers().add(answer);
  }
  if (resource.getIllustration() != null && !""String_Node_Str"".equals(resource.getIllustration())) {
    poll.setIllustration(resource.getIllustration());
    String tmpdir=System.getProperty(""String_Node_Str"");
    String illustrationDir=new StringBuilder(dataDirPath).append(File.separator).append(""String_Node_Str"").toString();
    String illustrationLocation=new StringBuilder(illustrationDir).append(File.separator).append(resource.getIllustration()).toString();
    String tmpFileLocation=new StringBuilder(tmpdir).append(File.separator).append(""String_Node_Str"").append(resource.getIllustration()).append(""String_Node_Str"").toString();
    try {
      FileTools.copy(tmpFileLocation,illustrationLocation);
      LOG.debug(""String_Node_Str"",illustrationLocation);
    }
 catch (    IOException ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  if (resource.getExpirationDate() == null) {
    date.add(Calendar.MONTH,1);
    poll.setExpirationDate(date.getTime());
  }
 else {
    poll.setExpirationDate(resource.getExpirationDate());
  }
  return super.create(poll);
}","@Override @Transactional(readOnly=false) public Poll create(final Poll resource){
  Calendar date=Calendar.getInstance();
  Poll poll=new Poll();
  poll.setAuthor(resource.getAuthor());
  poll.setBody(resource.getBody());
  poll.setTopic(resource.getTopic());
  poll.setCreationDate(date.getTime());
  poll.setAnswers(new ArrayList<Answer>());
  for (int i=0; i < resource.getAnswers().size(); i++) {
    Answer a=resource.getAnswers().get(i);
    Answer answer=new Answer();
    answer.setBody(a.getBody());
    answer.setOrder(i + 1);
    answer.setPoll(poll);
    poll.getAnswers().add(answer);
  }
  if (resource.getIllustration() != null && !""String_Node_Str"".equals(resource.getIllustration())) {
    poll.setIllustration(resource.getIllustration());
    String tmpdir=System.getProperty(""String_Node_Str"");
    String illustrationDir=new StringBuilder(dataDirPath).append(File.separator).append(""String_Node_Str"").toString();
    String illustrationLocation=new StringBuilder(illustrationDir).append(File.separator).append(resource.getIllustration()).toString();
    String tmpFileLocation=new StringBuilder(tmpdir).append(File.separator).append(""String_Node_Str"").append(resource.getIllustration()).append(""String_Node_Str"").toString();
    try {
      FileTools.copy(tmpFileLocation,illustrationLocation);
      LOG.debug(""String_Node_Str"",illustrationLocation);
    }
 catch (    IOException ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  if (resource.getExpirationDate() == null) {
    date.add(Calendar.MONTH,1);
    poll.setExpirationDate(date.getTime());
  }
 else {
    poll.setExpirationDate(resource.getExpirationDate());
  }
  return super.create(poll);
}"
16767,"@Override @Auditable @Transactional(readOnly=false) public void vote(String voterName,Long pid,List<String> values){
  Poll poll=this.pollService.findById(pid);
  Assert.notNull(poll,""String_Node_Str"");
  Assert.isTrue(values.size() == poll.getAnswers().size(),""String_Node_Str"");
  Voter voter=this.voterDao.findByNameAndPoll(voterName,poll);
  if (voter == null) {
    voter=new Voter();
    voter.setName(voterName);
    voter.setPoll(poll);
    poll.getVoters().add(voter);
    voter=this.voterDao.saveAndFlush(voter);
  }
  for (  Answer answer : voter.getPoll().getAnswers()) {
    Vote vote=new Vote();
    vote.setAnswer(answer);
    vote.setVoter(voter);
    vote.setValue(values.get(answer.getOrder() - 1));
    this.voteDao.saveAndFlush(vote);
  }
}","@Override @Transactional(readOnly=false) public void vote(String voterName,Long pid,List<String> values){
  Poll poll=this.pollService.findById(pid);
  Assert.notNull(poll,""String_Node_Str"");
  Assert.isTrue(values.size() == poll.getAnswers().size(),""String_Node_Str"");
  Voter voter=this.voterDao.findByNameAndPoll(voterName,poll);
  if (voter == null) {
    voter=new Voter();
    voter.setName(voterName);
    voter.setPoll(poll);
    poll.getVoters().add(voter);
    voter=this.voterDao.saveAndFlush(voter);
  }
  for (  Answer answer : voter.getPoll().getAnswers()) {
    Vote vote=new Vote();
    vote.setAnswer(answer);
    vote.setVoter(voter);
    vote.setValue(values.get(answer.getOrder() - 1));
    this.voteDao.saveAndFlush(vote);
  }
}"
16768,"@Test public void testFindAll() throws Exception {
  List<T> resourceList=dao.readAll();
  assertTrue(""String_Node_Str"",resourceList.size() == 1);
}","@Test public void testFindAll() throws Exception {
  List<T> resourceList=dao.readAll();
  assertTrue(""String_Node_Str"",resourceList.size() >= 1);
}"
16769,"/** 
 * {@inheritDoc}
 */
@Override public void doFilter(ServletRequest rawRequest,ServletResponse rawResponse,FilterChain chain) throws IOException, ServletException {
  if (rawRequest instanceof HttpServletRequest && rawResponse instanceof HttpServletResponse) {
    HttpServletRequest request=(HttpServletRequest)rawRequest;
    HttpServletResponse response=(HttpServletResponse)rawResponse;
    Token token=null;
    logger.trace(""String_Node_Str"",request.getRequestURL());
    String tokenValue=request.getHeader(HttpHeaders.AUTHORIZATION);
    String otherValue=null;
    String method=request.getMethod();
    if (request.getHeader(HttpHeaders.CONTENT_TYPE) == MediaType.APPLICATION_FORM_URLENCODED && (method == HttpMethod.POST || method == HttpMethod.DELETE || method == HttpMethod.PUT)) {
      otherValue=request.getParameter(ACCESSTOKEN_PARAMETER);
    }
 else {
      otherValue=request.getParameter(ACCESSTOKEN_PARAMETER);
    }
    if (tokenValue == null && otherValue == null) {
      logger.trace(""String_Node_Str"");
      setError(response,Error.UNAUTHORIZED_REQUEST.value(),null,Error.UNAUTHORIZED_REQUEST.status());
    }
 else     if (tokenValue != null && otherValue != null) {
      String error=""String_Node_Str"";
      logger.trace(""String_Node_Str"",error);
      setError(response,Error.INVALID_REQUEST.value(),error,Error.INVALID_REQUEST.status());
    }
 else {
      tokenValue=tokenValue == null ? otherValue : tokenValue;
      if (tokenValue.matches(""String_Node_Str"")) {
        String accessToken=tokenValue.replace(""String_Node_Str"",""String_Node_Str"");
        accessToken=accessToken.substring(0,accessToken.length() - 1);
        logger.trace(""String_Node_Str"",accessToken);
        try {
          token=service.validateToken(accessToken);
        }
 catch (        Exception exc) {
          logger.warn(""String_Node_Str"",request.getRequestURL(),exc.getMessage());
          logger.warn(""String_Node_Str"",exc);
          setError(response,null,null,Status.INTERNAL_SERVER_ERROR);
        }
        if (token == null) {
          logger.trace(""String_Node_Str"",accessToken);
          setError(response,Error.INVALID_TOKEN.value(),""String_Node_Str"",Error.INVALID_TOKEN.status());
        }
 else {
          Date now=new Date();
          Long expired=(now.getTime() - token.createdOn.getTime()) / 1000;
          if (expired > token.lifeTime) {
            logger.trace(""String_Node_Str"",accessToken);
            StringBuilder sb=new StringBuilder(""String_Node_Str"").append(expired - token.lifeTime).append(""String_Node_Str"");
            setError(response,Error.EXPIRED_TOKEN.value(),sb.toString(),Error.EXPIRED_TOKEN.status());
            token=null;
          }
        }
      }
 else {
        StringBuilder sb=new StringBuilder(""String_Node_Str"").append(HttpHeaders.WWW_AUTHENTICATE).append(""String_Node_Str"");
        logger.trace(""String_Node_Str"",sb.toString());
        setError(response,Error.INVALID_REQUEST.value(),sb.toString(),Error.INVALID_REQUEST.status());
      }
    }
    if (token != null) {
      chain.doFilter(new SecuredHttpRequest(token.userId,token.permissions,request),rawResponse);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void doFilter(ServletRequest rawRequest,ServletResponse rawResponse,FilterChain chain) throws IOException, ServletException {
  if (rawRequest instanceof HttpServletRequest && rawResponse instanceof HttpServletResponse) {
    HttpServletRequest request=(HttpServletRequest)rawRequest;
    HttpServletResponse response=(HttpServletResponse)rawResponse;
    Token token=null;
    logger.trace(""String_Node_Str"",request.getRequestURL());
    String tokenValue=request.getHeader(HttpHeaders.AUTHORIZATION);
    String otherValue=null;
    String method=request.getMethod();
    if (request.getHeader(HttpHeaders.CONTENT_TYPE) == MediaType.APPLICATION_FORM_URLENCODED && (method == HttpMethod.POST || method == HttpMethod.DELETE || method == HttpMethod.PUT)) {
      otherValue=request.getParameter(ACCESSTOKEN_PARAMETER);
    }
 else {
      otherValue=request.getParameter(ACCESSTOKEN_PARAMETER);
    }
    if (tokenValue == null && otherValue == null) {
      logger.trace(""String_Node_Str"");
      setError(response,Error.UNAUTHORIZED_REQUEST.value(),null,Error.UNAUTHORIZED_REQUEST.status());
    }
 else     if (tokenValue != null && otherValue != null) {
      String error=""String_Node_Str"";
      logger.trace(""String_Node_Str"",error);
      setError(response,Error.INVALID_REQUEST.value(),error,Error.INVALID_REQUEST.status());
    }
 else {
      tokenValue=tokenValue == null ? otherValue : tokenValue;
      if (tokenValue.matches(""String_Node_Str"")) {
        String accessToken=tokenValue.replace(""String_Node_Str"",""String_Node_Str"");
        accessToken=accessToken.substring(0,accessToken.length() - 1);
        logger.trace(""String_Node_Str"",accessToken);
        try {
          token=service.validateToken(accessToken);
        }
 catch (        Exception exc) {
          logger.warn(""String_Node_Str"",request.getRequestURL(),exc.getMessage());
          logger.warn(""String_Node_Str"",exc);
          setError(response,null,null,Status.INTERNAL_SERVER_ERROR);
        }
        if (token == null) {
          logger.trace(""String_Node_Str"",accessToken);
          setError(response,Error.INVALID_TOKEN.value(),""String_Node_Str"",Error.INVALID_TOKEN.status());
        }
 else {
          Date now=new Date();
          Long expired=(now.getTime() - token.createdOn.getTime()) / 1000;
          if (expired > token.lifeTime) {
            logger.trace(""String_Node_Str"",accessToken);
            StringBuilder sb=new StringBuilder(""String_Node_Str"").append(expired - token.lifeTime).append(""String_Node_Str"");
            setError(response,Error.EXPIRED_TOKEN.value(),sb.toString(),Error.EXPIRED_TOKEN.status());
            token=null;
          }
        }
      }
 else {
        StringBuilder sb=new StringBuilder(""String_Node_Str"");
        logger.trace(""String_Node_Str"",sb.toString());
        setError(response,Error.INVALID_REQUEST.value(),sb.toString(),Error.INVALID_REQUEST.status());
      }
    }
    if (token != null) {
      chain.doFilter(new SecuredHttpRequest(token.userId,token.permissions,request),rawResponse);
    }
  }
}"
16770,"/** 
 * Post initialization method. Initialize the HTTP client with the central service. 
 */
public void postInit(){
  logger.debug(""String_Node_Str"",tokenInformationEndpoint);
  ClientConfig config=new DefaultClientConfig();
  Client client=Client.create(config);
  authorizationService=client.resource(tokenInformationEndpoint);
}","/** 
 * Post initialization method. Initialize the HTTP client with the central service. 
 */
public void postInit(){
  logger.debug(""String_Node_Str"",tokenInformationEndpoint);
  ClientConfig config=new DefaultClientConfig();
  config.getSingletons().add(new JacksonProvider());
  Client client=Client.create(config);
  authorizationService=client.resource(tokenInformationEndpoint);
}"
16771,"/** 
 * {@inheritDoc}
 */
@Override public Token obtainTokenInformation(String accessToken,String password){
  if (password == null || password.compareTo(auhorizationPassword) != 0) {
    throw new WebApplicationException(Status.FORBIDDEN);
  }
  logger.trace(""String_Node_Str"",accessToken);
  if (accessToken == null) {
    logger.debug(""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Token token=service.getTokenInformation(accessToken);
  logger.trace(""String_Node_Str"",token);
  return token;
}","/** 
 * {@inheritDoc}
 */
@Override public Token obtainTokenInformation(String accessToken,String password){
  if (password == null || password.compareTo(authorizationPassword) != 0) {
    throw new WebApplicationException(Status.FORBIDDEN);
  }
  logger.trace(""String_Node_Str"",accessToken);
  if (accessToken == null) {
    logger.debug(""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Token token=service.getTokenInformation(accessToken);
  logger.trace(""String_Node_Str"",token);
  return token;
}"
16772,"@BeforeClass public static void setup() throws IOException {
  System.out.println(""String_Node_Str"");
  HipiImageBundle hib=createHibAndOpen(HipiImageBundle.FILE_MODE_WRITE,null);
  JpegCodec jpegCodec=JpegCodec.getInstance();
  File[] files=new File(""String_Node_Str"").listFiles();
  for (  File file : files) {
    String ext=FilenameUtils.getExtension(file.getName());
    if (file.isFile() && (ext.equalsIgnoreCase(""String_Node_Str"") || ext.equalsIgnoreCase(""String_Node_Str""))) {
      String path=file.getPath();
      System.out.println(""String_Node_Str"" + path);
      HipiImageHeader imageHeader=jpegCodec.decodeHeader(new FileInputStream(path));
      imageHeader.addMetaData(""String_Node_Str"",path);
      System.out.println(imageHeader);
      hib.addImage(imageHeader,new FileInputStream(path));
    }
  }
  System.out.println(""String_Node_Str"");
  hib.close();
}","@BeforeClass public static void setup() throws IOException {
  System.out.println(""String_Node_Str"");
  HipiImageBundle hib=createHibAndOpen(HipiImageBundle.FILE_MODE_WRITE,null);
  JpegCodec jpegCodec=JpegCodec.getInstance();
  File[] files=new File(""String_Node_Str"").listFiles();
  Arrays.sort(files);
  for (  File file : files) {
    String ext=FilenameUtils.getExtension(file.getName());
    if (file.isFile() && (ext.equalsIgnoreCase(""String_Node_Str"") || ext.equalsIgnoreCase(""String_Node_Str""))) {
      String path=file.getPath();
      System.out.println(""String_Node_Str"" + path);
      HipiImageHeader imageHeader=jpegCodec.decodeHeader(new FileInputStream(path));
      imageHeader.addMetaData(""String_Node_Str"",path);
      System.out.println(imageHeader);
      hib.addImage(imageHeader,new FileInputStream(path));
    }
  }
  System.out.println(""String_Node_Str"");
  hib.close();
}"
16773,"public int runCovariance(String[] args) throws Exception {
  Job job=HipiJob.getHipiJobInstance(getConf(),""String_Node_Str"");
  job.setJarByClass(Covariance.class);
  job.addCacheFile(new URI(""String_Node_Str"" + args[1] + ""String_Node_Str""));
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(CovarianceMap.class);
  job.setCombinerClass(CovarianceReduce.class);
  job.setReducerClass(CovarianceReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.setSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}","public int runCovariance(String[] args) throws Exception {
  Job job=HipiJob.getHipiJobInstance(getConf(),""String_Node_Str"");
  job.setJarByClass(Covariance.class);
  job.addCacheFile(new URI(""String_Node_Str"" + args[1] + ""String_Node_Str""));
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(CovarianceMap.class);
  job.setCombinerClass(CovarianceReduce.class);
  job.setReducerClass(CovarianceReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.getConfiguration().setBoolean(""String_Node_Str"",true);
  job.setSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}"
16774,"public int runMeanCompute(String[] args) throws Exception {
  Job job=HipiJob.getHipiJobInstance(getConf(),""String_Node_Str"");
  job.setJarByClass(Covariance.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(MeanMap.class);
  job.setCombinerClass(MeanReduce.class);
  job.setReducerClass(MeanReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.setMapSpeculativeExecution(true);
  job.setReduceSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}","public int runMeanCompute(String[] args) throws Exception {
  Job job=HipiJob.getHipiJobInstance(getConf(),""String_Node_Str"");
  job.setJarByClass(Covariance.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(MeanMap.class);
  job.setCombinerClass(MeanReduce.class);
  job.setReducerClass(MeanReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.getConfiguration().setBoolean(""String_Node_Str"",true);
  job.setSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}"
16775,"public int runCovariance(String[] args) throws Exception {
  Job job=HipiJob.getHipiJobInstance(getConf(),""String_Node_Str"");
  job.setJarByClass(Covariance.class);
  job.addCacheFile(new URI(""String_Node_Str"" + args[1] + ""String_Node_Str""));
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(CovarianceMap.class);
  job.setCombinerClass(CovarianceReduce.class);
  job.setReducerClass(CovarianceReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.getConfiguration().setBoolean(""String_Node_Str"",true);
  job.setSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}","public int runCovariance(String[] args) throws Exception {
  Job job=Job.getInstance();
  job.setJarByClass(Covariance.class);
  job.addCacheFile(new URI(""String_Node_Str"" + args[1] + ""String_Node_Str""));
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapperClass(CovarianceMap.class);
  job.setCombinerClass(CovarianceReduce.class);
  job.setReducerClass(CovarianceReduce.class);
  String inputFileType=args[2];
  if (inputFileType.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.getConfiguration().setBoolean(""String_Node_Str"",true);
  job.setSpeculativeExecution(true);
  FileInputFormat.setInputPaths(job,new Path(args[0]));
  mkdir(args[1],job.getConfiguration());
  rmdir(args[1] + ""String_Node_Str"",job.getConfiguration());
  FileOutputFormat.setOutputPath(job,new Path(args[1] + ""String_Node_Str""));
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}"
16776,"@Test public void testGetCurrentImage() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  int count=0;
  while (aib.hasNext()) {
    aib.next();
    FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str"" + count + ""String_Node_Str""));
    FloatImage image=aib.getCurrentImage();
    assertArrayEquals(count + ""String_Node_Str"",source.getData(),image.getData(),1);
    image=aib.getCurrentImage();
    assertArrayEquals(count + ""String_Node_Str"",source.getData(),image.getData(),1);
    image=aib.getCurrentImage();
    assertArrayEquals(count + ""String_Node_Str"",source.getData(),image.getData(),1);
    count++;
  }
  aib.close();
}","@Test public void testGetCurrentImage() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  int count=0;
  while (aib.hasNext()) {
    aib.next();
    FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str"" + count + ""String_Node_Str""));
    FloatImage image=aib.getCurrentImage();
    assertEquals(count + ""String_Node_Str"",source,image);
    image=aib.getCurrentImage();
    assertEquals(count + ""String_Node_Str"",source,image);
    image=aib.getCurrentImage();
    assertEquals(count + ""String_Node_Str"",source,image);
    count++;
  }
  aib.close();
}"
16777,"@Test public void testNext() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  aib.next();
  aib.next();
  FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  FloatImage image=aib.getCurrentImage();
  assertArrayEquals(""String_Node_Str"",source.getData(),image.getData(),1);
  aib.close();
}","@Test public void testNext() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  aib.next();
  aib.next();
  FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  FloatImage image=aib.getCurrentImage();
  assertEquals(""String_Node_Str"",source,image);
  aib.close();
}"
16778,"@Test public void testHasNext() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  FloatImage source, image;
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  aib.next();
  source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  image=aib.getCurrentImage();
  assertArrayEquals(""String_Node_Str"",source.getData(),image.getData(),1);
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  aib.next();
  source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  image=aib.getCurrentImage();
  assertArrayEquals(""String_Node_Str"",source.getData(),image.getData(),1);
  assertFalse(""String_Node_Str"",aib.hasNext());
  assertFalse(""String_Node_Str"",aib.hasNext());
  assertFalse(""String_Node_Str"",aib.hasNext());
  aib.close();
}","@Test public void testHasNext() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  FloatImage source, image;
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  aib.next();
  source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  image=aib.getCurrentImage();
  assertEquals(""String_Node_Str"",source,image);
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  assertTrue(""String_Node_Str"",aib.hasNext());
  aib.next();
  source=decoder.decodeImage(new FileInputStream(""String_Node_Str""));
  image=aib.getCurrentImage();
  assertEquals(""String_Node_Str"",source,image);
  assertFalse(""String_Node_Str"",aib.hasNext());
  assertFalse(""String_Node_Str"",aib.hasNext());
  assertFalse(""String_Node_Str"",aib.hasNext());
  aib.close();
}"
16779,"@Test public void testIterator() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  int count=0;
  while (aib.hasNext()) {
    aib.next();
    FloatImage image=aib.getCurrentImage();
    FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str"" + count + ""String_Node_Str""));
    assertArrayEquals(count + ""String_Node_Str"",source.getData(),image.getData(),1);
    count++;
  }
  aib.close();
}","@Test public void testIterator() throws IOException {
  AbstractImageBundle aib=createImageBundleAndOpen(AbstractImageBundle.FILE_MODE_READ);
  ImageDecoder decoder=JPEGImageUtil.getInstance();
  int count=0;
  while (aib.hasNext()) {
    aib.next();
    FloatImage image=aib.getCurrentImage();
    FloatImage source=decoder.decodeImage(new FileInputStream(""String_Node_Str"" + count + ""String_Node_Str""));
    assertEquals(count + ""String_Node_Str"",source,image);
    count++;
  }
  aib.close();
}"
16780,"@Test public void testFloatImageWritable() throws IOException {
  ImageDecoder decoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    FloatImage image=decoder.decodeImage(fis);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    image.write(new DataOutputStream(bos));
    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
    FloatImage newImage=new FloatImage();
    newImage.readFields(new DataInputStream(bis));
    assertArrayEquals(fileName[i] + ""String_Node_Str"",image.getData(),newImage.getData(),1);
  }
}","@Test public void testFloatImageWritable() throws IOException {
  ImageDecoder decoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    FloatImage image=decoder.decodeImage(fis);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    image.write(new DataOutputStream(bos));
    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
    FloatImage newImage=new FloatImage();
    newImage.readFields(new DataInputStream(bis));
    assertEquals(fileName[i] + ""String_Node_Str"",image,newImage);
  }
}"
16781,"/** 
 * Test method for   {@link hipi.image.io.JPEGImageUtil#decodeImage(java.io.InputStream)}.
 * @throws IOException 
 */
@Test public void testDecodeImage() throws IOException {
  ImageDecoder jpgDecoder, ppmDecoder;
  jpgDecoder=JPEGImageUtil.getInstance();
  ppmDecoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  FloatImage ppmImage, jpgImage;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    ppmImage=ppmDecoder.decodeImage(fis);
    assumeNotNull(ppmImage);
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    jpgImage=jpgDecoder.decodeImage(fis);
    assumeNotNull(jpgImage);
    assertArrayEquals(fileName[i] + ""String_Node_Str"",ppmImage.getData(),jpgImage.getData(),1);
  }
}","/** 
 * Test method for   {@link hipi.image.io.JPEGImageUtil#decodeImage(java.io.InputStream)}.
 * @throws IOException 
 */
@Test public void testDecodeImage() throws IOException {
  ImageDecoder jpgDecoder, ppmDecoder;
  jpgDecoder=JPEGImageUtil.getInstance();
  ppmDecoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  FloatImage ppmImage, jpgImage;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    ppmImage=ppmDecoder.decodeImage(fis);
    assumeNotNull(ppmImage);
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    jpgImage=jpgDecoder.decodeImage(fis);
    assumeNotNull(jpgImage);
    assertEquals(fileName[i] + ""String_Node_Str"",ppmImage,jpgImage);
  }
}"
16782,"/** 
 * Test method for   {@link hipi.image.io.PNGImageUtil#decodeImage(java.io.InputStream)}.
 * @throws IOException 
 */
@Test public void testDecodeImage() throws IOException {
  ImageDecoder pngDecoder, ppmDecoder;
  pngDecoder=PNGImageUtil.getInstance();
  ppmDecoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  FloatImage ppmImage, pngImage;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    ppmImage=ppmDecoder.decodeImage(fis);
    assumeNotNull(ppmImage);
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    pngImage=pngDecoder.decodeImage(fis);
    assumeNotNull(pngImage);
    assertArrayEquals(fileName[i] + ""String_Node_Str"" + fileName[i],ppmImage.getData(),pngImage.getData(),0);
  }
}","/** 
 * Test method for   {@link hipi.image.io.PNGImageUtil#decodeImage(java.io.InputStream)}.
 * @throws IOException 
 */
@Test public void testDecodeImage() throws IOException {
  ImageDecoder pngDecoder, ppmDecoder;
  pngDecoder=PNGImageUtil.getInstance();
  ppmDecoder=PPMImageUtil.getInstance();
  FileInputStream fis;
  FloatImage ppmImage, pngImage;
  String[] fileName={""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < fileName.length; i++) {
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    ppmImage=ppmDecoder.decodeImage(fis);
    assumeNotNull(ppmImage);
    fis=new FileInputStream(""String_Node_Str"" + fileName[i] + ""String_Node_Str"");
    pngImage=pngDecoder.decodeImage(fis);
    assumeNotNull(pngImage);
    assertEquals(fileName[i] + ""String_Node_Str"" + fileName[i],ppmImage,pngImage);
  }
}"
16783,"/** 
 * {@inheritDoc}
 */
@Override protected void openForWrite() throws IOException {
  if (_data_output_stream != null || _reader != null || _index_output_stream != null || _index_input_stream != null) {
    throw new IOException(""String_Node_Str"" + _file_path.getName() + ""String_Node_Str"");
  }
  _index_file=_file_path;
  _index_output_stream=new DataOutputStream(FileSystem.get(_conf).create(_index_file));
  _data_file=_file_path.suffix(""String_Node_Str"");
  _data_output_stream=new DataOutputStream(FileSystem.get(_conf).create(_data_file));
  _countingOffset=0;
  writeBundleHeader();
}","/** 
 * {@inheritDoc}
 */
@Override protected void openForWrite() throws IOException {
  if (_data_output_stream != null || _reader != null || _index_output_stream != null || _index_input_stream != null) {
    throw new IOException(""String_Node_Str"" + _file_path.getName() + ""String_Node_Str"");
  }
  _index_file=_file_path;
  FileSystem fs=FileSystem.get(_conf);
  _index_output_stream=new DataOutputStream(fs.create(_index_file));
  _data_file=_file_path.suffix(""String_Node_Str"");
  if (_blockSize <= 0)   _blockSize=fs.getDefaultBlockSize();
  if (_replication <= 0)   _replication=fs.getDefaultReplication();
  _data_output_stream=new DataOutputStream(fs.create(_data_file,true,fs.getConf().getInt(""String_Node_Str"",4096),_replication,_blockSize));
  _countingOffset=0;
  writeBundleHeader();
}"
16784,"/** 
 * @param file_path The {@link Path} indicating where the image bundle is (or should be written to)
 * @param conf {@link Configuration} that determines the {@link FileSystem} for the image bundle
 */
public HipiImageBundle(Path file_path,Configuration conf){
  super(file_path,conf);
}","public HipiImageBundle(Path file_path,Configuration conf,short replication,long blockSize){
  super(file_path,conf);
  _replication=replication;
  _blockSize=blockSize;
}"
16785,"public void reduce(NullWritable key,Iterable<FloatImage> values,Context context) throws IOException, InterruptedException {
  FloatImage mean=new FloatImage(2592,1944,1);
  int num_pics=0;
  for (  FloatImage val : values) {
    mean.add(val);
    num_pics++;
  }
  mean.scale(1 / num_pics);
  context.write(new IntWritable(0),mean);
}","public void reduce(NullWritable key,Iterable<FloatImage> values,Context context) throws IOException, InterruptedException {
  FloatImage mean=new FloatImage(2592,1944,1);
  int num_pics=0;
  for (  FloatImage val : values) {
    mean.add(val);
    num_pics++;
  }
  float scale=1.0f / num_pics;
  mean.scale(scale);
  System.out.println(""String_Node_Str"" + scale);
  context.write(new IntWritable(0),mean);
}"
16786,"public int run(String[] args) throws Exception {
  if (args.length < 3) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  Configuration conf=new Configuration();
  String outputPath=args[1];
  String input_file_type=args[2];
  conf.setStrings(""String_Node_Str"",outputPath);
  conf.setStrings(""String_Node_Str"",input_file_type);
  Job job=new Job(conf,""String_Node_Str"");
  job.setJarByClass(AverageImage.class);
  job.setMapperClass(MyMapper.class);
  job.setReducerClass(MyReducer.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setMapOutputKeyClass(NullWritable.class);
  job.setMapOutputValueClass(FloatImage.class);
  removeDir(""String_Node_Str"",conf);
  FileOutputFormat.setOutputPath(job,new Path(""String_Node_Str""));
  JPEGFileInputFormat.addInputPath(job,new Path(args[0]));
  if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGFileInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGFileInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGSequenceFileInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  System.exit(job.waitForCompletion(true) ? 0 : 1);
  return 0;
}","public int run(String[] args) throws Exception {
  if (args.length < 3) {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  Configuration conf=new Configuration();
  String outputPath=args[1];
  String input_file_type=args[2];
  conf.setStrings(""String_Node_Str"",input_file_type);
  Job job=new Job(conf,""String_Node_Str"");
  job.setJarByClass(AverageImage.class);
  job.setMapperClass(MyMapper.class);
  job.setReducerClass(MyReducer.class);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(FloatImage.class);
  job.setOutputFormatClass(BinaryOutputFormat.class);
  job.setMapOutputKeyClass(NullWritable.class);
  job.setMapOutputValueClass(FloatImage.class);
  removeDir(outputPath,conf);
  FileOutputFormat.setOutputPath(job,new Path(outputPath));
  JPEGFileInputFormat.addInputPath(job,new Path(args[0]));
  if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(ImageBundleInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGFileInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGFileInputFormat.class);
 else   if (input_file_type.equals(""String_Node_Str""))   job.setInputFormatClass(JPEGSequenceFileInputFormat.class);
 else {
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  System.exit(job.waitForCompletion(true) ? 0 : 1);
  return 0;
}"
16787,"public void map(ImageHeader key,FloatImage value,Context context) throws IOException, InterruptedException {
  if (value != null) {
    FloatImage gray=value.convert(FloatImage.RGB2GRAY);
    context.write(new BooleanWritable(true),new LongWritable(gray.hashCode()));
  }
 else   context.write(new BooleanWritable(false),new LongWritable(0));
}","public void map(ImageHeader key,FloatImage value,Context context) throws IOException, InterruptedException {
  if (value != null) {
    FloatImage gray=value.convert(FloatImage.RGB2GRAY);
    context.write(new BooleanWritable(true),new LongWritable(gray.hashCode()));
    ImageEncoder encoder=JPEGImageUtil.getInstance();
  }
 else   context.write(new BooleanWritable(false),new LongWritable(0));
}"
16788,"public void reduce(BooleanWritable key,Iterable<Text> values,Context context) throws IOException, InterruptedException {
  if (key.get()) {
    FileSystem fileSystem=FileSystem.get(conf);
    HipiImageBundle hib=new HipiImageBundle(new Path(conf.get(""String_Node_Str"")),conf);
    hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
    for (    Text temp_string : values) {
      Path temp_path=new Path(temp_string.toString());
      HipiImageBundle input_bundle=new HipiImageBundle(temp_path,conf);
      hib.append(input_bundle);
      Path index_path=input_bundle.getPath();
      Path data_path=new Path(index_path.toString() + ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + data_path.toString());
      fileSystem.delete(index_path,false);
      fileSystem.delete(data_path,false);
      context.write(new BooleanWritable(true),new Text(input_bundle.getPath().toString()));
      context.progress();
    }
  }
}","public void reduce(BooleanWritable key,Iterable<Text> values,Context context) throws IOException, InterruptedException {
  if (key.get()) {
    FileSystem fileSystem=FileSystem.get(conf);
    HipiImageBundle hib=new HipiImageBundle(new Path(conf.get(""String_Node_Str"")),conf);
    hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
    for (    Text temp_string : values) {
      Path temp_path=new Path(temp_string.toString());
      HipiImageBundle input_bundle=new HipiImageBundle(temp_path,conf);
      hib.append(input_bundle);
      Path index_path=input_bundle.getPath();
      Path data_path=new Path(index_path.toString() + ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + data_path.toString());
      fileSystem.delete(index_path,false);
      fileSystem.delete(data_path,false);
      context.write(new BooleanWritable(true),new Text(input_bundle.getPath().toString()));
      context.progress();
    }
    hib.close();
  }
}"
16789,"public void map(IntWritable key,Text value,Context context) throws IOException, InterruptedException {
  String temp_path=conf.get(""String_Node_Str"") + key.get() + ""String_Node_Str"";
  System.out.println(""String_Node_Str"" + temp_path);
  HipiImageBundle hib=new HipiImageBundle(new Path(temp_path),conf);
  hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
  String word=value.toString();
  BufferedReader reader=new BufferedReader(new StringReader(word));
  String uri;
  int i=key.get();
  int iprev=i;
  while ((uri=reader.readLine()) != null) {
    if (i >= iprev + 100) {
      hib.close();
      context.write(new BooleanWritable(true),new Text(hib.getPath().toString()));
      temp_path=conf.get(""String_Node_Str"") + i + ""String_Node_Str"";
      hib=new HipiImageBundle(new Path(temp_path),conf);
      hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
      iprev=i;
    }
    long startT=0;
    long stopT=0;
    startT=System.currentTimeMillis();
    try {
      String type=""String_Node_Str"";
      URLConnection conn;
      context.progress();
      try {
        URL link=new URL(uri);
        conn=link.openConnection();
        conn.connect();
        type=conn.getContentType();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + uri);
        continue;
      }
      if (type == null)       continue;
      if (type.compareTo(""String_Node_Str"") == 0)       continue;
      if (type != null) {
        if (type.compareTo(""String_Node_Str"") == 0)         hib.addImage(conn.getInputStream(),ImageType.JPEG_IMAGE);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
    i++;
    stopT=System.currentTimeMillis();
    float el=(float)(stopT - startT) / 1000.0f;
    System.out.println(""String_Node_Str"" + el + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  try {
    context.write(new BooleanWritable(true),new Text(hib.getPath().toString()));
    reader.close();
    hib.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void map(IntWritable key,Text value,Context context) throws IOException, InterruptedException {
  String temp_path=conf.get(""String_Node_Str"") + key.get() + ""String_Node_Str"";
  System.out.println(""String_Node_Str"" + temp_path);
  HipiImageBundle hib=new HipiImageBundle(new Path(temp_path),conf);
  hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
  String word=value.toString();
  BufferedReader reader=new BufferedReader(new StringReader(word));
  String uri;
  int i=key.get();
  int iprev=i;
  while ((uri=reader.readLine()) != null) {
    if (i >= iprev + 100) {
      hib.close();
      context.write(new BooleanWritable(true),new Text(hib.getPath().toString()));
      temp_path=conf.get(""String_Node_Str"") + i + ""String_Node_Str"";
      hib=new HipiImageBundle(new Path(temp_path),conf);
      hib.open(HipiImageBundle.FILE_MODE_WRITE,true);
      iprev=i;
    }
    long startT=0;
    long stopT=0;
    startT=System.currentTimeMillis();
    try {
      String type=""String_Node_Str"";
      URLConnection conn;
      context.progress();
      try {
        URL link=new URL(uri);
        conn=link.openConnection();
        conn.connect();
        type=conn.getContentType();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + uri);
        continue;
      }
      if (type == null)       continue;
      if (type.compareTo(""String_Node_Str"") == 0)       continue;
      if (type != null) {
        if (type.compareTo(""String_Node_Str"") == 0)         hib.addImage(conn.getInputStream(),ImageType.JPEG_IMAGE);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.err.println(""String_Node_Str"");
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
    i++;
    stopT=System.currentTimeMillis();
    float el=(float)(stopT - startT) / 1000.0f;
    System.out.println(""String_Node_Str"" + el + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  try {
    reader.close();
    hib.close();
    context.write(new BooleanWritable(true),new Text(hib.getPath().toString()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
16790,"public ImageHeader getCurrentKey() throws IOException {
  if (_header != null)   return _header;
  if (_cacheLength > 0) {
    ImageDecoder decoder=CodecManager.getDecoder(ImageType.fromValue(_cacheType));
    if (decoder == null)     return null;
    ByteArrayInputStream _byte_array_input_stream=new ByteArrayInputStream(_byte_array_data);
    try {
      _header=decoder.decodeImageHeader(_byte_array_input_stream);
    }
 catch (    IOException e) {
      _header=null;
    }
    return _header;
  }
  return null;
}","public ImageHeader getCurrentKey() throws IOException {
  if (_header != null)   return _header;
  if (_cacheLength > 0) {
    ImageDecoder decoder=CodecManager.getDecoder(ImageType.fromValue(_cacheType));
    if (decoder == null)     return null;
    ByteArrayInputStream _byte_array_input_stream=new ByteArrayInputStream(_byte_array_data);
    try {
      _header=decoder.decodeImageHeader(_byte_array_input_stream);
    }
 catch (    Exception e) {
      e.printStackTrace();
      _header=null;
    }
    return _header;
  }
  return null;
}"
16791,"public boolean nextKeyValue(){
  try {
    _countingOffset+=_cacheLength + 8;
    if (_end > 0 && _countingOffset > _end) {
      _cacheLength=_cacheType=0;
      return false;
    }
    int byteRead=_data_input_stream.read(_sig);
    if (byteRead <= 0)     return false;
    _cacheLength=((_sig[0] & 0xff) << 24) | ((_sig[1] & 0xff) << 16) | ((_sig[2] & 0xff) << 8)| (_sig[3] & 0xff);
    _cacheType=((_sig[4] & 0xff) << 24) | ((_sig[5] & 0xff) << 16) | ((_sig[6] & 0xff) << 8)| (_sig[7] & 0xff);
    _image=null;
    _header=null;
    _byte_array_data=new byte[_cacheLength];
    _data_input_stream.read(_byte_array_data);
    return true;
  }
 catch (  IOException e) {
    return false;
  }
}","public boolean nextKeyValue(){
  try {
    if (_end > 0 && _countingOffset > _end) {
      _cacheLength=_cacheType=0;
      return false;
    }
    int readOff=0;
    int byteRead=_data_input_stream.read(_sig);
    while (byteRead < 8 - readOff && byteRead > 0) {
      readOff+=byteRead;
      byteRead=_data_input_stream.read(_sig,readOff,8 - readOff);
    }
    if (byteRead <= 0) {
      _cacheLength=_cacheType=0;
      return false;
    }
    if (byteRead < 8)     System.out.println(""String_Node_Str"" + byteRead);
    _cacheLength=((_sig[0] & 0xff) << 24) | ((_sig[1] & 0xff) << 16) | ((_sig[2] & 0xff) << 8)| (_sig[3] & 0xff);
    _cacheType=((_sig[4] & 0xff) << 24) | ((_sig[5] & 0xff) << 16) | ((_sig[6] & 0xff) << 8)| (_sig[7] & 0xff);
    _image=null;
    _header=null;
    if (_cacheLength < 0) {
      System.out.println(""String_Node_Str"" + _countingOffset + ""String_Node_Str"");
      _cacheLength=_cacheType=0;
      return false;
    }
    _byte_array_data=new byte[_cacheLength];
    readOff=0;
    byteRead=_data_input_stream.read(_byte_array_data);
    while (byteRead < _byte_array_data.length - readOff && byteRead > 0) {
      readOff+=byteRead;
      byteRead=_data_input_stream.read(_byte_array_data,readOff,_byte_array_data.length - readOff);
    }
    if (byteRead <= 0) {
      _cacheLength=_cacheType=0;
      return false;
    }
    _countingOffset+=_cacheLength + 8;
    return true;
  }
 catch (  IOException e) {
    return false;
  }
}"
16792,"public FloatImage getCurrentValue() throws IOException {
  if (_image != null)   return _image;
  if (_cacheLength > 0) {
    ImageDecoder decoder=CodecManager.getDecoder(ImageType.fromValue(_cacheType));
    if (decoder == null)     return null;
    ByteArrayInputStream _byte_array_input_stream=new ByteArrayInputStream(_byte_array_data);
    try {
      _image=decoder.decodeImage(_byte_array_input_stream);
    }
 catch (    IOException e) {
      _image=null;
    }
    _byte_array_input_stream.close();
    return _image;
  }
  return null;
}","public FloatImage getCurrentValue() throws IOException {
  if (_image != null)   return _image;
  if (_cacheLength > 0) {
    ImageDecoder decoder=CodecManager.getDecoder(ImageType.fromValue(_cacheType));
    if (decoder == null)     return null;
    ByteArrayInputStream _byte_array_input_stream=new ByteArrayInputStream(_byte_array_data);
    try {
      _image=decoder.decodeImage(_byte_array_input_stream);
    }
 catch (    Exception e) {
      e.printStackTrace();
      _image=null;
    }
    return _image;
  }
  return null;
}"
16793,"public FileReader(FileSystem fs,Path path,Configuration conf,long start,long end) throws IOException {
  _data_input_stream=new DataInputStream(fs.open(path));
  _countingOffset=_start=start;
  while (_countingOffset > 0) {
    long skipped=_data_input_stream.skip((long)_countingOffset);
    if (skipped <= 0)     break;
    _countingOffset-=skipped;
  }
  _countingOffset=_start;
  _end=end;
}","public FileReader(FileSystem fs,Path path,Configuration conf,long start,long end) throws IOException {
  _data_input_stream=new DataInputStream(fs.open(path));
  _start=start;
  while (start > 0) {
    long skipped=_data_input_stream.skip((long)start);
    if (skipped <= 0)     break;
    start-=skipped;
  }
  _countingOffset=_start;
  _end=end;
}"
16794,"/** 
 * Converts a   {@code String} to a {@code Date} value.
 * @param value Value to convert.
 * @return Date value.
 */
static Date toDate(String value){
  if (dateFormat == null) {
    dateFormat=new SimpleDateFormat[6];
    dateFormat[0]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[0].setLenient(true);
    dateFormat[1]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[1].setLenient(true);
    dateFormat[2]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[2].setLenient(true);
    dateFormat[3]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[3].setLenient(true);
    dateFormat[4]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[4].setLenient(true);
    dateFormat[5]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[5].setLenient(true);
  }
  if (datePattern == null) {
    String pattern=""String_Node_Str"";
    datePattern=Pattern.compile(pattern);
  }
  for (  SimpleDateFormat simpleDateFormat : dateFormat) {
    try {
      Matcher matcher=datePattern.matcher(value);
      value=matcher.replaceAll(""String_Node_Str"");
      return simpleDateFormat.parse(value);
    }
 catch (    ParseException e) {
    }
  }
  try {
    return new Date(Long.parseLong(value) * 1000);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","/** 
 * Converts a   {@code String} to a {@code Date} value.
 * @param value Value to convert.
 * @return Date value.
 */
static synchronized Date toDate(String value){
  if (dateFormat == null) {
    dateFormat=new SimpleDateFormat[6];
    dateFormat[0]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[0].setLenient(true);
    dateFormat[1]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[1].setLenient(true);
    dateFormat[2]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[2].setLenient(true);
    dateFormat[3]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[3].setLenient(true);
    dateFormat[4]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[4].setLenient(true);
    dateFormat[5]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[5].setLenient(true);
  }
  if (datePattern == null) {
    String pattern=""String_Node_Str"";
    datePattern=Pattern.compile(pattern);
  }
  for (  SimpleDateFormat simpleDateFormat : dateFormat) {
    try {
      Matcher matcher=datePattern.matcher(value);
      value=matcher.replaceAll(""String_Node_Str"");
      return simpleDateFormat.parse(value);
    }
 catch (    ParseException e) {
    }
  }
  try {
    return new Date(Long.parseLong(value) * 1000);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}"
16795,"/** 
 * Converts a   {@code String} to a {@code Date} value.
 * @param value Value to convert.
 * @return Date value.
 */
static Date toDate(String value){
  if (dateFormat == null) {
    dateFormat=new SimpleDateFormat[6];
    dateFormat[0]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[0].setLenient(true);
    dateFormat[1]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[1].setLenient(true);
    dateFormat[2]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[2].setLenient(true);
    dateFormat[3]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[3].setLenient(true);
    dateFormat[4]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[4].setLenient(true);
    dateFormat[5]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[5].setLenient(true);
  }
  if (datePattern == null) {
    String pattern=""String_Node_Str"";
    datePattern=Pattern.compile(pattern);
  }
  for (  SimpleDateFormat simpleDateFormat : dateFormat) {
    try {
      Matcher matcher=datePattern.matcher(value);
      value=matcher.replaceAll(""String_Node_Str"");
      return simpleDateFormat.parse(value);
    }
 catch (    ParseException e) {
    }
  }
  try {
    return new Date(Long.parseLong(value) * 1000);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","/** 
 * Converts a   {@code String} to a {@code Date} value.
 * @param value Value to convert.
 * @return Date value.
 */
static synchronized Date toDate(String value){
  if (dateFormat == null) {
    dateFormat=new SimpleDateFormat[6];
    dateFormat[0]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[0].setLenient(true);
    dateFormat[1]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[1].setLenient(true);
    dateFormat[2]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[2].setLenient(true);
    dateFormat[3]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[3].setLenient(true);
    dateFormat[4]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[4].setLenient(true);
    dateFormat[5]=new SimpleDateFormat(""String_Node_Str"");
    dateFormat[5].setLenient(true);
  }
  if (datePattern == null) {
    String pattern=""String_Node_Str"";
    datePattern=Pattern.compile(pattern);
  }
  for (  SimpleDateFormat simpleDateFormat : dateFormat) {
    try {
      Matcher matcher=datePattern.matcher(value);
      value=matcher.replaceAll(""String_Node_Str"");
      return simpleDateFormat.parse(value);
    }
 catch (    ParseException e) {
    }
  }
  try {
    return new Date(Long.parseLong(value) * 1000);
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}"
16796,"private int getResultCountOfIndex(Service s){
  InputStream results=s.oneshotSearch(""String_Node_Str"" + indexName);
  try {
    ResultsReaderXml resultsReader=new ResultsReaderXml(results);
    int numEvents=0;
    while (resultsReader.getNextEvent() != null) {
      numEvents++;
    }
    return numEvents;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private int getResultCountOfIndex(Service s,String indexName){
  InputStream results=s.oneshotSearch(""String_Node_Str"" + indexName);
  try {
    ResultsReaderXml resultsReader=new ResultsReaderXml(results);
    int numEvents=0;
    while (resultsReader.getNextEvent() != null) {
      numEvents++;
    }
    return numEvents;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
16797,"/** 
 * Issue an HTTP request against the service using a given path and request message.
 * @param path    The request path.
 * @param request The request message.
 * @return The HTTP response.
 */
public ResponseMessage send(String path,RequestMessage request){
  URL url=getUrl(path);
  HttpURLConnection cn;
  try {
    cn=(HttpURLConnection)url.openConnection();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  if (cn instanceof HttpsURLConnection) {
    ((HttpsURLConnection)cn).setSSLSocketFactory(sslSocketFactory);
    ((HttpsURLConnection)cn).setHostnameVerifier(HOSTNAME_VERIFIER);
  }
  cn.setUseCaches(false);
  cn.setAllowUserInteraction(false);
  cn.setConnectTimeout(connectTimeout == null ? 0 : connectTimeout);
  cn.setReadTimeout(readTimeout == null ? 0 : readTimeout);
  String method=request.getMethod();
  try {
    cn.setRequestMethod(method);
  }
 catch (  ProtocolException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  Map<String,String> header=request.getHeader();
  for (  Entry<String,String> entry : header.entrySet())   cn.setRequestProperty(entry.getKey(),entry.getValue());
  for (  Entry<String,String> entry : defaultHeader.entrySet()) {
    String key=entry.getKey();
    if (header.containsKey(key))     continue;
    cn.setRequestProperty(key,entry.getValue());
  }
  cn.setRequestProperty(""String_Node_Str"",cookieStore.getCookies());
  try {
    Object content=request.getContent();
    if (content != null) {
      cn.setDoOutput(true);
      OutputStream stream=cn.getOutputStream();
      OutputStreamWriter writer=new OutputStreamWriter(stream,""String_Node_Str"");
      writer.write((String)content);
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  if (VERBOSE_REQUESTS) {
    System.out.format(""String_Node_Str"",method,url.toString());
  }
  try {
    cn.connect();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  int status;
  try {
    status=cn.getResponseCode();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  InputStream input=null;
  try {
    input=status >= 400 ? cn.getErrorStream() : cn.getInputStream();
  }
 catch (  IOException e) {
    assert(false);
  }
  cookieStore.add(cn.getHeaderField(""String_Node_Str""));
  ResponseMessage response=new ResponseMessage(status,input);
  if (VERBOSE_REQUESTS) {
    System.out.format(""String_Node_Str"",status);
    if (method.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + request.getContent());
    }
  }
  if (status >= 400)   throw HttpException.create(response);
  return response;
}","/** 
 * Issue an HTTP request against the service using a given path and request message.
 * @param path    The request path.
 * @param request The request message.
 * @return The HTTP response.
 */
public ResponseMessage send(String path,RequestMessage request){
  URL url=getUrl(path);
  HttpURLConnection cn;
  try {
    cn=(HttpURLConnection)url.openConnection();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  if (cn instanceof HttpsURLConnection) {
    ((HttpsURLConnection)cn).setSSLSocketFactory(sslSocketFactory);
    ((HttpsURLConnection)cn).setHostnameVerifier(HOSTNAME_VERIFIER);
  }
  cn.setUseCaches(false);
  cn.setAllowUserInteraction(false);
  cn.setConnectTimeout(connectTimeout == null ? 0 : connectTimeout);
  cn.setReadTimeout(readTimeout == null ? 0 : readTimeout);
  String method=request.getMethod();
  try {
    cn.setRequestMethod(method);
  }
 catch (  ProtocolException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  Map<String,String> header=request.getHeader();
  for (  Entry<String,String> entry : header.entrySet())   cn.setRequestProperty(entry.getKey(),entry.getValue());
  for (  Entry<String,String> entry : defaultHeader.entrySet()) {
    String key=entry.getKey();
    if (header.containsKey(key))     continue;
    cn.setRequestProperty(key,entry.getValue());
  }
  cn.setRequestProperty(""String_Node_Str"",cookieStore.getCookies());
  try {
    Object content=request.getContent();
    if (content != null) {
      cn.setDoOutput(true);
      OutputStream stream=cn.getOutputStream();
      OutputStreamWriter writer=new OutputStreamWriter(stream,""String_Node_Str"");
      writer.write((String)content);
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  if (VERBOSE_REQUESTS) {
    System.out.format(""String_Node_Str"",method,url.toString());
  }
  try {
    cn.connect();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  int status;
  try {
    status=cn.getResponseCode();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  InputStream input=null;
  try {
    input=status >= 400 ? cn.getErrorStream() : cn.getInputStream();
  }
 catch (  IOException e) {
    assert(false);
  }
  Map<String,List<String>> headers=cn.getHeaderFields();
  if (headers.containsKey(""String_Node_Str"")) {
    for (    String cookieHeader : headers.get(""String_Node_Str"")) {
      if (cookieHeader != null && cookieHeader.length() > 0)       cookieStore.add(cookieHeader);
    }
  }
  ResponseMessage response=new ResponseMessage(status,input);
  if (VERBOSE_REQUESTS) {
    System.out.format(""String_Node_Str"",status);
    if (method.equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + request.getContent());
    }
  }
  if (status >= 400)   throw HttpException.create(response);
  return response;
}"
16798,"@Test public void testHandleErrorsReturnedAsJson(){
  JobExportArgs exportArgs=new JobExportArgs();
  exportArgs.setOutputMode(JobExportArgs.OutputMode.JSON);
  exportArgs.setSearchMode(JobExportArgs.SearchMode.REALTIME);
  exportArgs.setEarliestTime(""String_Node_Str"");
  exportArgs.setLatestTime(""String_Node_Str"");
  try {
    service.export(""String_Node_Str"",exportArgs);
  }
 catch (  Exception e) {
    Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    return;
  }
  Assert.fail();
}","@Test public void testHandleErrorsReturnedAsJson(){
  JobExportArgs exportArgs=new JobExportArgs();
  exportArgs.setOutputMode(JobExportArgs.OutputMode.JSON);
  exportArgs.setSearchMode(JobExportArgs.SearchMode.REALTIME);
  exportArgs.setEarliestTime(""String_Node_Str"");
  exportArgs.setLatestTime(""String_Node_Str"");
  try {
    service.export(""String_Node_Str"",exportArgs);
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getMessage().contains(""String_Node_Str""));
    return;
  }
  Assert.fail();
}"
16799,"@Test public void testAddStringFilterAgainstSplunk(){
  DataModel dm=(DataModel)service.getDataModels().get(""String_Node_Str"");
  DataModelObject dmo=dm.getObject(""String_Node_Str"");
  PivotSpecification pivotSpec=dmo.createPivotSpecification();
  pivotSpec.addCellValue(""String_Node_Str"",""String_Node_Str"",StatsFunction.COUNT);
  pivotSpec.addFilter(""String_Node_Str"",StringComparison.DOES_NOT_CONTAIN,""String_Node_Str"");
  pivotSpec.addFilter(""String_Node_Str"",StringComparison.CONTAINS,""String_Node_Str"");
  Pivot p=pivotSpec.pivot();
  Job j=p.run();
  assertEventuallyTrue(new EventuallyTrueBehavior(){
    @Override public boolean predicate(){
      if (!j.isDone()) {
        j.refresh();
      }
      return j.isDone();
    }
  }
);
}","@Test public void testAddStringFilterAgainstSplunk(){
  DataModel dm=(DataModel)service.getDataModels().get(""String_Node_Str"");
  DataModelObject dmo=dm.getObject(""String_Node_Str"");
  PivotSpecification pivotSpec=dmo.createPivotSpecification();
  pivotSpec.addCellValue(""String_Node_Str"",""String_Node_Str"",StatsFunction.COUNT);
  pivotSpec.addFilter(""String_Node_Str"",StringComparison.DOES_NOT_CONTAIN,""String_Node_Str"");
  pivotSpec.addFilter(""String_Node_Str"",StringComparison.CONTAINS,""String_Node_Str"");
  Pivot p=pivotSpec.pivot();
  final Job j=p.run();
  assertEventuallyTrue(new EventuallyTrueBehavior(){
    @Override public boolean predicate(){
      if (!j.isDone()) {
        j.refresh();
      }
      return j.isDone();
    }
  }
);
}"
16800,"/** 
 * Parses a stream containing XML into an InputDefinition.
 * @param stream The stream containing XML to parse.
 * @return An {@code InputDefinition} object.
 * @throws ParserConfigurationException If there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException If there is an error in reading from the stream.
 * @throws SAXException When the XML is invalid.
 * @throws MalformedDataException When the XML does specify a valid set of inputs.
 */
public static InputDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  InputDefinition definition=new InputDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == node.TEXT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
        if (child.getNodeType() == child.TEXT_NODE) {
          continue;
        }
        if (!child.getNodeName().equals(""String_Node_Str"")) {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
        }
        String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        List<Parameter> parameter=Parameter.nodeToParameterList(child);
        definition.addInput(name,parameter);
      }
    }
 else {
      definition.metadata.put(node.getNodeName(),XmlUtil.textInNode(node,""String_Node_Str"" + node.getNodeName()));
    }
  }
  return definition;
}","/** 
 * Parses a stream containing XML into an InputDefinition.
 * @param stream The stream containing XML to parse.
 * @return An {@code InputDefinition} object.
 * @throws ParserConfigurationException If there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException If there is an error in reading from the stream.
 * @throws SAXException When the XML is invalid.
 * @throws MalformedDataException When the XML does specify a valid set of inputs.
 */
public static InputDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  InputDefinition definition=new InputDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == Node.TEXT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
        if (child.getNodeType() == Node.TEXT_NODE) {
          continue;
        }
        if (!child.getNodeName().equals(""String_Node_Str"")) {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
        }
        String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        List<Parameter> parameter=Parameter.nodeToParameterList(child);
        definition.addInput(name,parameter);
      }
    }
 else {
      definition.metadata.put(node.getNodeName(),XmlUtil.textInNode(node,""String_Node_Str"" + node.getNodeName()));
    }
  }
  return definition;
}"
16801,"/** 
 * Generates a list of   {@code Parameter} objects from an {@code org.w3c.dom.Node} object containing a set of parameters. The nodemay be any element, but is expected to contain elements param or param_list, as in <pre> {@code <stanza name=""foobar://aaa""> <param name=""param1"">value1</param> <param name=""param2"">value2</param> <param name=""disabled"">0</param> <param name=""index"">default</param> <param_list name=""multiValue""> <value>value1</value> <value>value2</value> </param_list> </stanza>}</pre>
 * @param node An {@code org.w3c.dom.Node} object containing the parameter list as children.
 * @return A list of Parameter objects extracted from the XML.
 * @throws com.splunk.modularinput.MalformedDataException If the XML does not specify a valid parameter list.
 */
public static List<Parameter> nodeToParameterList(Node node) throws MalformedDataException {
  List<Parameter> parameters=new ArrayList<Parameter>();
  for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
    if (child.getNodeType() == child.TEXT_NODE) {
      continue;
    }
    if (child.getNodeName() == ""String_Node_Str"") {
      String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      String value=XmlUtil.textInNode(child,""String_Node_Str"" + name + ""String_Node_Str"");
      parameters.add(new SingleValueParameter(name,value));
    }
 else     if (child.getNodeName() == ""String_Node_Str"") {
      String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      MultiValueParameter parameter=new MultiValueParameter(name);
      for (Node valueNode=child.getFirstChild(); valueNode != null; valueNode=valueNode.getNextSibling()) {
        if (valueNode.getNodeType() == valueNode.TEXT_NODE)         continue;
        if (valueNode.getNodeName() != ""String_Node_Str"") {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName() + ""String_Node_Str""+ valueNode.getNodeName());
        }
 else {
          parameter.appendValue(XmlUtil.textInNode(valueNode,""String_Node_Str"" + child.getNodeName() + ""String_Node_Str""));
        }
      }
      parameters.add(parameter);
    }
 else {
      throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
    }
  }
  return parameters;
}","/** 
 * Generates a list of   {@code Parameter} objects from an {@code org.w3c.dom.Node} object containing a set of parameters. The nodemay be any element, but is expected to contain elements param or param_list, as in <pre> {@code <stanza name=""foobar://aaa""> <param name=""param1"">value1</param> <param name=""param2"">value2</param> <param name=""disabled"">0</param> <param name=""index"">default</param> <param_list name=""multiValue""> <value>value1</value> <value>value2</value> </param_list> </stanza>}</pre>
 * @param node An {@code org.w3c.dom.Node} object containing the parameter list as children.
 * @return A list of Parameter objects extracted from the XML.
 * @throws com.splunk.modularinput.MalformedDataException If the XML does not specify a valid parameter list.
 */
public static List<Parameter> nodeToParameterList(Node node) throws MalformedDataException {
  List<Parameter> parameters=new ArrayList<Parameter>();
  for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
    if (child.getNodeType() == Node.TEXT_NODE) {
      continue;
    }
    if (""String_Node_Str"".equals(child.getNodeName())) {
      String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      String value=XmlUtil.textInNode(child,""String_Node_Str"" + name + ""String_Node_Str"");
      parameters.add(new SingleValueParameter(name,value));
    }
 else     if (""String_Node_Str"".equals(child.getNodeName())) {
      String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      MultiValueParameter parameter=new MultiValueParameter(name);
      for (Node valueNode=child.getFirstChild(); valueNode != null; valueNode=valueNode.getNextSibling()) {
        if (valueNode.getNodeType() == Node.TEXT_NODE)         continue;
        if (!""String_Node_Str"".equals(valueNode.getNodeName())) {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName() + ""String_Node_Str""+ valueNode.getNodeName());
        }
 else {
          parameter.appendValue(XmlUtil.textInNode(valueNode,""String_Node_Str"" + child.getNodeName() + ""String_Node_Str""));
        }
      }
      parameters.add(parameter);
    }
 else {
      throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
    }
  }
  return parameters;
}"
16802,"/** 
 * Create a ValidationDefinition from a provided stream containing XML. The XML typically will look like <pre>  {@code <items> <server_host>myHost</server_host> <server_uri>https://127.0.0.1:8089</server_uri> <session_key>123102983109283019283</session_key> <checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir> <item name=""myScheme""> <param name=""param1"">value1</param> <param_list name=""param2""> <value>value2</value> <value>value3</value> <value>value4</value> </param_list> </item> </items>}</pre>
 * @param stream containing XML to parse.
 * @return a ValidationDefinition.
 * @throws ParserConfigurationException if there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException if there is an error in reading from the stream.
 * @throws SAXException when the XML is invalid.
 * @throws MalformedDataException when the XML does not meet the required schema.
 */
public static ValidationDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  ValidationDefinition definition=new ValidationDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == node.TEXT_NODE || node.getNodeType() == node.COMMENT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      String name=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      definition.setName(name);
      List<Parameter> parameter=Parameter.nodeToParameterList(node);
      definition.setParameters(parameter);
    }
 else {
      definition.metadata.put(node.getNodeName(),XmlUtil.textInNode(node,""String_Node_Str"" + node.getNodeName()));
    }
  }
  return definition;
}","/** 
 * Create a ValidationDefinition from a provided stream containing XML. The XML typically will look like <pre>  {@code <items> <server_host>myHost</server_host> <server_uri>https://127.0.0.1:8089</server_uri> <session_key>123102983109283019283</session_key> <checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir> <item name=""myScheme""> <param name=""param1"">value1</param> <param_list name=""param2""> <value>value2</value> <value>value3</value> <value>value4</value> </param_list> </item> </items>}</pre>
 * @param stream containing XML to parse.
 * @return a ValidationDefinition.
 * @throws ParserConfigurationException if there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException if there is an error in reading from the stream.
 * @throws SAXException when the XML is invalid.
 * @throws MalformedDataException when the XML does not meet the required schema.
 */
public static ValidationDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  ValidationDefinition definition=new ValidationDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.COMMENT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      String name=node.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      definition.setName(name);
      List<Parameter> parameter=Parameter.nodeToParameterList(node);
      definition.setParameters(parameter);
    }
 else {
      definition.metadata.put(node.getNodeName(),XmlUtil.textInNode(node,""String_Node_Str"" + node.getNodeName()));
    }
  }
  return definition;
}"
16803,"/** 
 * Given an   {@code org.w3c.dom.Node} which is an element containing text, returns the text. If thereis anything but text inside the element, throws a  {@code MalformedDataException} with {@code errorMessage} as the reason.
 * @param node The {@code Node} object to pull text out of.
 * @param errorMessage The reason provided if there is something besides text in the element.
 * @return A String of the text in the element.
 * @throws MalformedDataException When there is anything besides text in the element.
 */
static String textInNode(Node node,String errorMessage) throws MalformedDataException {
  Node child=node.getFirstChild();
  if (child.getNodeType() != child.TEXT_NODE) {
    throw new MalformedDataException(errorMessage);
  }
 else {
    return ((Text)child).getData();
  }
}","/** 
 * Given an   {@code org.w3c.dom.Node} which is an element containing text, returns the text. If thereis anything but text inside the element, throws a  {@code MalformedDataException} with {@code errorMessage} as the reason.
 * @param node The {@code Node} object to pull text out of.
 * @param errorMessage The reason provided if there is something besides text in the element.
 * @return A String of the text in the element.
 * @throws MalformedDataException When there is anything besides text in the element.
 */
static String textInNode(Node node,String errorMessage) throws MalformedDataException {
  Node child=node.getFirstChild();
  if (child.getNodeType() != Node.TEXT_NODE) {
    throw new MalformedDataException(errorMessage);
  }
 else {
    return ((Text)child).getData();
  }
}"
16804,"private Args namespace(AtomEntry entry){
  Args namespace=new Args();
  if (entry.content == null)   return namespace;
  HashMap<String,String> entityMetadata=(HashMap<String,String>)entry.content.get(""String_Node_Str"");
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  return namespace;
}","private Args namespace(AtomEntry entry){
  Args namespace=new Args();
  if (entry.content == null)   return namespace;
  HashMap<String,String> entityMetadata=(HashMap<String,String>)entry.content.get(""String_Node_Str"");
  if (entityMetadata == null) {
    entityMetadata=new HashMap<String,String>();
  }
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  if (entityMetadata.containsKey(""String_Node_Str""))   namespace.put(""String_Node_Str"",entityMetadata.get(""String_Node_Str""));
  return namespace;
}"
16805,"/** 
 * Create an   {@code HttpException} instance based on the given response.
 * @param response The HTTP response that returned an error code.
 * @return A new {@code HttpException) instance.}
 */
static HttpException create(ResponseMessage response){
  int status=response.getStatus();
  StringBuilder s=new StringBuilder();
  InputStreamReader r;
  try {
    r=new InputStreamReader(response.getContent(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    throw new AssertionError(""String_Node_Str"");
  }
  int c=-1;
  while (true) {
    try {
      c=r.read();
    }
 catch (    IOException e1) {
    }
    if (c == -1)     break;
    s.appendCodePoint(c);
  }
  String detail=""String_Node_Str"";
  try {
    Document document=Xml.parse(new ByteArrayInputStream(detail.getBytes()));
    NodeList msgs=document.getElementsByTagName(""String_Node_Str"");
    if (msgs.getLength() > 0)     detail=msgs.item(0).getTextContent();
  }
 catch (  Exception e) {
    detail=s.toString();
  }
  String message=String.format(""String_Node_Str"",status);
  if (detail != null && detail.length() > 0)   message=message + ""String_Node_Str"" + detail;
  return new HttpException(status,message,detail);
}","/** 
 * Create an   {@code HttpException} instance based on the given response.
 * @param response The HTTP response that returned an error code.
 * @return A new {@code HttpException) instance.}
 */
static HttpException create(ResponseMessage response){
  int status=response.getStatus();
  StringBuilder s=new StringBuilder();
  InputStreamReader r;
  try {
    r=new InputStreamReader(response.getContent(),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e1) {
    throw new AssertionError(""String_Node_Str"");
  }
  int c=-1;
  while (true) {
    try {
      c=r.read();
    }
 catch (    IOException e1) {
    }
    if (c == -1)     break;
    s.appendCodePoint(c);
  }
  String detail=s.toString();
  try {
    Document document=Xml.parse(new ByteArrayInputStream(detail.getBytes()));
    NodeList msgs=document.getElementsByTagName(""String_Node_Str"");
    if (msgs.getLength() > 0)     detail=msgs.item(0).getTextContent();
  }
 catch (  Exception e) {
  }
  String message=String.format(""String_Node_Str"",status);
  if (detail != null && detail.length() > 0)   message=message + ""String_Node_Str"" + detail;
  return new HttpException(status,message,detail);
}"
16806,"/** 
 * @return a JSON serialization of this object.
 */
JsonObject toJson(){
  JsonObject root=new JsonObject();
  DataModelField f=this.dataModelObject.getField(fieldName);
  root.addProperty(""String_Node_Str"",this.fieldName);
  root.addProperty(""String_Node_Str"",f.getOwnerName());
  root.addProperty(""String_Node_Str"",f.getType().toString());
  root.addProperty(""String_Node_Str"",this.label);
  root.addProperty(""String_Node_Str"",this.generateSparkline);
  root.addProperty(""String_Node_Str"",this.statsFunction.toString());
  return root;
}","/** 
 * @return a JSON serialization of this object.
 */
JsonObject toJson(){
  JsonObject root=new JsonObject();
  DataModelField f=this.dataModelObject.getField(fieldName);
  root.addProperty(""String_Node_Str"",this.fieldName);
  root.addProperty(""String_Node_Str"",Util.join(""String_Node_Str"",f.getOwnerLineage()));
  root.addProperty(""String_Node_Str"",f.getType().toString());
  root.addProperty(""String_Node_Str"",this.label);
  root.addProperty(""String_Node_Str"",this.generateSparkline);
  root.addProperty(""String_Node_Str"",this.statsFunction.toString());
  return root;
}"
16807,"@Test public void testAccelerationWorks(){
  DataModel model=dataModelObject.getDataModel();
  model.setAcceleration(true);
  model.setEarliestAcceleratedTime(""String_Node_Str"");
  model.setAccelerationCronSchedule(""String_Node_Str"");
  model.update();
  PivotSpecification pivotArgs=dataModelObject.createPivotSpecification();
  Assert.assertEquals(dataModelObject.getDataModel().getName(),pivotArgs.getAccelerationNamespace());
  String sid=createTemporaryName();
  pivotArgs.setAccelerationJob(sid);
  Assert.assertEquals(""String_Node_Str"" + sid,pivotArgs.getAccelerationNamespace());
  String namespace=createTemporaryName();
  pivotArgs.setAccelerationNamespace(namespace);
  Assert.assertEquals(namespace,pivotArgs.getAccelerationNamespace());
}","@Test public void testAccelerationWorks(){
  DataModel model=dataModelObject.getDataModel();
  Args postArgs=new Args();
  postArgs.put(""String_Node_Str"",""String_Node_Str"");
  postArgs.put(""String_Node_Str"",model.getService().username);
  model.getService().post(model.path + ""String_Node_Str"",postArgs);
  model.setAcceleration(true);
  model.setEarliestAcceleratedTime(""String_Node_Str"");
  model.setAccelerationCronSchedule(""String_Node_Str"");
  model.update();
  PivotSpecification pivotArgs=dataModelObject.createPivotSpecification();
  Assert.assertEquals(dataModelObject.getDataModel().getName(),pivotArgs.getAccelerationNamespace());
  String sid=createTemporaryName();
  pivotArgs.setAccelerationJob(sid);
  Assert.assertEquals(""String_Node_Str"" + sid,pivotArgs.getAccelerationNamespace());
  String namespace=createTemporaryName();
  pivotArgs.setAccelerationNamespace(namespace);
  Assert.assertEquals(namespace,pivotArgs.getAccelerationNamespace());
}"
16808,"@Test public void testLicensePoolSetters() throws Exception {
  LicensePoolCollection licensePoolCollection=service.getLicensePools();
  boolean foundAnUpdatablePool=false;
  for (  LicensePool licensePool : licensePoolCollection.values()) {
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    foundAnUpdatablePool=true;
    String originalDescription=licensePool.getDescription();
{
      licensePool.setDescription(""String_Node_Str"");
      licensePool.setQuota(""String_Node_Str"");
      licensePool.update();
      Assert.assertEquals(""String_Node_Str"",licensePool.getDescription());
      Assert.assertEquals(""String_Node_Str"",licensePool.getQuota());
    }
    String[] originalSlaves=licensePool.getSlaves();
{
      licensePool.setSlaves(""String_Node_Str"");
      String[] slaves=licensePool.getSlaves();
      Assert.assertEquals(slaves[0],""String_Node_Str"");
      Assert.assertEquals(slaves[1],""String_Node_Str"");
      licensePool.setSlaves(new String[]{""String_Node_Str"",""String_Node_Str""});
      String[] slaves2=licensePool.getSlaves();
      Assert.assertEquals(slaves2[0],""String_Node_Str"");
      Assert.assertEquals(slaves2[1],""String_Node_Str"");
      licensePool.update();
      String[] slaves3=licensePool.getSlaves();
      Assert.assertEquals(slaves3.length,2);
      Assert.assertTrue(Arrays.asList(slaves3).contains(""String_Node_Str""));
      Assert.assertTrue(Arrays.asList(slaves3).contains(""String_Node_Str""));
      licensePool.setSlaves(originalSlaves);
      String[] slaves4=licensePool.getSlaves();
      Assert.assertEquals(slaves4.length,originalSlaves.length);
      for (int i=0; i < originalSlaves.length; i++) {
        Assert.assertTrue(Arrays.asList(slaves4).contains(originalSlaves[i]));
      }
    }
    licensePool.update(new Args(""String_Node_Str"",originalDescription));
    licensePool.update(new Args(""String_Node_Str"",""String_Node_Str""));
  }
  if (!foundAnUpdatablePool) {
    System.out.println(""String_Node_Str"");
  }
}","@Test public void testLicensePoolSetters() throws Exception {
  LicensePoolCollection licensePoolCollection=service.getLicensePools();
  boolean foundAnUpdatablePool=false;
  for (  LicensePool licensePool : licensePoolCollection.values()) {
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    foundAnUpdatablePool=true;
    String originalDescription=licensePool.getDescription();
{
      licensePool.setDescription(""String_Node_Str"");
      licensePool.setQuota(""String_Node_Str"");
      licensePool.update();
      Assert.assertEquals(""String_Node_Str"",licensePool.getDescription());
      Assert.assertEquals(""String_Node_Str"",licensePool.getQuota());
    }
    licensePool.update(new Args(""String_Node_Str"",originalDescription));
    licensePool.update(new Args(""String_Node_Str"",""String_Node_Str""));
  }
  if (!foundAnUpdatablePool) {
    System.out.println(""String_Node_Str"");
  }
}"
16809,"@Test public void testCreateDelete() throws Exception {
  EntityCollection<License> licenses=service.getLicenses();
  if (licenses.containsKey(""String_Node_Str"")) {
    licenses.remove(""String_Node_Str"");
  }
  Assert.assertFalse(licenses.containsKey(""String_Node_Str""));
  String licenseKey;
  String licenseFilename;
  if (service.versionIsAtLeast(""String_Node_Str"")) {
    licenseKey=""String_Node_Str"";
    licenseFilename=""String_Node_Str"";
  }
 else {
    licenseKey=""String_Node_Str"";
    licenseFilename=""String_Node_Str"";
  }
  if (licenses.containsKey(licenseKey)) {
    licenses.remove(licenseKey);
  }
  Assert.assertFalse(licenses.containsKey(licenseKey));
  byte[] licensePayload=new byte[2048];
  InputStream licenseStream=SDKTestCase.openResource(licenseFilename);
  Assert.assertNotNull(""String_Node_Str"" + licenseFilename,licenseStream);
  try {
    licenseStream.read(licensePayload);
  }
  finally {
    licenseStream.close();
  }
  licenses.create(""String_Node_Str"",new Args(""String_Node_Str"",new String(licensePayload)));
  Assert.assertTrue(licenses.containsKey(licenseKey));
  licenses.remove(licenseKey);
  Assert.assertFalse(licenses.containsKey(licenseKey));
  clearRestartMessage();
}","@Test public void testCreateDelete() throws Exception {
  EntityCollection<License> licenses=service.getLicenses();
  String activeGroup=null;
  EntityCollection<Entity> licenseGroups=new EntityCollection<Entity>(service,""String_Node_Str"");
  for (  Entity entity : licenseGroups.values()) {
    if (entity.getBoolean(""String_Node_Str"",false)) {
      activeGroup=entity.getName();
      break;
    }
  }
  try {
    Args args=new Args();
    args.put(""String_Node_Str"",""String_Node_Str"");
    service.post(""String_Node_Str"",args);
    splunkRestart();
    String licenseKey;
    String licenseFilename;
    if (service.versionIsAtLeast(""String_Node_Str"")) {
      licenseKey=""String_Node_Str"";
      licenseFilename=""String_Node_Str"";
    }
 else {
      licenseKey=""String_Node_Str"";
      licenseFilename=""String_Node_Str"";
    }
    if (licenses.containsKey(licenseKey)) {
      licenses.remove(licenseKey);
    }
    Assert.assertFalse(licenses.containsKey(licenseKey));
    byte[] licensePayload=new byte[2048];
    InputStream licenseStream=SDKTestCase.openResource(licenseFilename);
    try {
      licenseStream.read(licensePayload);
    }
  finally {
      licenseStream.close();
    }
    licenses.create(licenseKey,new Args(""String_Node_Str"",new String(licensePayload)));
    Assert.assertTrue(licenses.containsKey(licenseKey));
    licenses.remove(licenseKey);
    Assert.assertFalse(licenses.containsKey(licenseKey));
  }
  finally {
    if (activeGroup != null) {
      Args args=new Args();
      args.put(""String_Node_Str"",""String_Node_Str"");
      service.post(""String_Node_Str"" + activeGroup,args);
      splunkRestart();
    }
  }
}"
16810,"/** 
 * Constructs a fully-qualified URL for this service using a given path.
 * @param path The path to qualify.
 * @return The fully-qualified URL for the service.
 */
public URL getUrl(String path){
  try {
    if (getScheme() == HTTPS_SCHEME && httpsHandler != null) {
      return new URL(getScheme(),getHost(),getPort(),path,httpsHandler);
    }
 else {
      return new URL(getScheme(),getHost(),getPort(),path);
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","/** 
 * Constructs a fully-qualified URL for this service using a given path.
 * @param path The path to qualify.
 * @return The fully-qualified URL for the service.
 */
public URL getUrl(String path){
  try {
    if (HTTPS_SCHEME.equals(getScheme()) && httpsHandler != null) {
      return new URL(getScheme(),getHost(),getPort(),path,httpsHandler);
    }
 else {
      return new URL(getScheme(),getHost(),getPort(),path);
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}"
16811,"/** 
 * Logs an event to this index through HTTP POST.
 * @param indexName The index to write to.
 * @param data A string containing event data.
 * @param args Optional arguments for this stream. Valid parameters are: ""host"", ""host_regex"", ""source"", and ""sourcetype"".
 */
public void submit(String indexName,Args args,String data){
  String sendString=""String_Node_Str"";
  RequestMessage request=new RequestMessage(""String_Node_Str"");
  request.setContent(data);
  if (indexName != null) {
    sendString=String.format(""String_Node_Str"",indexName);
  }
  if (args != null && args.size() > 0) {
    sendString=sendString + ((indexName == null) ? ""String_Node_Str"" : ""String_Node_Str"");
    sendString=sendString + args.encode();
  }
  service.send(service.simpleReceiverEndPoint + sendString,request);
}","/** 
 * Logs an event to this index through HTTP POST.
 * @param indexName The index to write to.
 * @param data A string containing event data.
 * @param args Optional arguments for this stream. Valid parameters are: ""host"", ""host_regex"", ""source"", and ""sourcetype"".
 */
public void submit(String indexName,Args args,String data){
  String sendString=""String_Node_Str"";
  RequestMessage request=new RequestMessage(""String_Node_Str"");
  request.setContent(data);
  if (indexName != null) {
    sendString=String.format(""String_Node_Str"",indexName);
  }
  if (args != null && args.size() > 0) {
    sendString=sendString + ((indexName == null) ? ""String_Node_Str"" : ""String_Node_Str"");
    sendString=sendString + args.encode();
  }
  ResponseMessage response=service.send(service.simpleReceiverEndPoint + sendString,request);
  try {
    response.getContent().close();
  }
 catch (  IOException e) {
  }
}"
16812,"protected static String locateSystemLog(){
  final String filename;
  String osName=service.getInfo().getOsName();
  if (osName.equals(""String_Node_Str""))   filename=""String_Node_Str"";
 else   if (osName.equals(""String_Node_Str"")) {
    String[] filenames={""String_Node_Str"",""String_Node_Str""};
    for (    String candidate : filenames) {
      if (new File(candidate).exists()) {
        filename=candidate;
      }
    }
  }
 else   if (osName.equals(""String_Node_Str"")) {
    filename=""String_Node_Str"";
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + osName + ""String_Node_Str"");
  }
  return filename;
}","protected static String locateSystemLog(){
  String filename=null;
  String osName=service.getInfo().getOsName();
  if (osName.equals(""String_Node_Str""))   filename=""String_Node_Str"";
 else   if (osName.equals(""String_Node_Str"")) {
    String[] filenames={""String_Node_Str"",""String_Node_Str""};
    for (    String candidate : filenames) {
      if (new File(candidate).exists()) {
        filename=candidate;
      }
    }
  }
 else   if (osName.equals(""String_Node_Str"")) {
    filename=""String_Node_Str"";
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + osName + ""String_Node_Str"");
  }
  return filename;
}"
16813,"/** 
 * Open a resource from the Splunk SDK for Java project and parse it into an org.w3c.dom.Document object.
 * @param path a path relative to the test directory of the SDK.
 * @return an org.w3c.dom.Document object containing the parsed XML.
 */
public Document resourceToXmlDocument(String path){
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=null;
  try {
    documentBuilder=documentBuilderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new AssertionError(""String_Node_Str"" + e.toString(),e);
  }
  InputStream resource=SDKTestCase.openResource(path);
  try {
    Document doc=documentBuilder.parse(resource);
    return doc;
  }
 catch (  SAXException e) {
    throw new AssertionError(""String_Node_Str"" + path,e);
  }
catch (  IOException e) {
    throw new AssertionError(""String_Node_Str"" + path,e);
  }
}","/** 
 * Open a resource from the Splunk SDK for Java project and parse it into an org.w3c.dom.Document object.
 * @param path a path relative to the test directory of the SDK.
 * @return an org.w3c.dom.Document object containing the parsed XML.
 */
public Document resourceToXmlDocument(String path){
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=null;
  try {
    documentBuilder=documentBuilderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new AssertionError(""String_Node_Str"" + e.toString());
  }
  InputStream resource=SDKTestCase.openResource(path);
  try {
    Document doc=documentBuilder.parse(resource);
    return doc;
  }
 catch (  SAXException e) {
    throw new AssertionError(""String_Node_Str"" + path);
  }
catch (  IOException e) {
    throw new AssertionError(""String_Node_Str"" + path);
  }
}"
16814,"/** 
 * Parse XML in a string into an org.w3c.dom.Document object.
 * @param xml a String containing XML.
 * @return an org.w3c.dom.Document object.
 */
public Document stringToXmlDocument(String xml){
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=null;
  try {
    documentBuilder=documentBuilderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new AssertionError(""String_Node_Str"" + e.toString());
  }
  Document generatedDoc=null;
  try {
    generatedDoc=documentBuilder.parse(new ByteArrayInputStream(xml.getBytes(""String_Node_Str"")));
    return generatedDoc;
  }
 catch (  SAXException e) {
    e.printStackTrace();
    throw new AssertionError(""String_Node_Str"" + e.toString(),e);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new AssertionError(""String_Node_Str"" + e.toString(),e);
  }
}","/** 
 * Parse XML in a string into an org.w3c.dom.Document object.
 * @param xml a String containing XML.
 * @return an org.w3c.dom.Document object.
 */
public Document stringToXmlDocument(String xml){
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=null;
  try {
    documentBuilder=documentBuilderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new AssertionError(""String_Node_Str"" + e.toString());
  }
  Document generatedDoc=null;
  try {
    generatedDoc=documentBuilder.parse(new ByteArrayInputStream(xml.getBytes(""String_Node_Str"")));
    return generatedDoc;
  }
 catch (  SAXException e) {
    e.printStackTrace();
    throw new AssertionError(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new AssertionError(""String_Node_Str"" + e.toString());
  }
}"
16815,"/** 
 * Write this event to the given XMLStreamWriter.
 * @param out The XMLStreamWriter to append to.
 * @throws XMLStreamException if there is a problem in the XMLStreamWriter.
 * @throws MalformedDataException if you have not specified data for this event.
 */
public void writeTo(XMLStreamWriter out) throws XMLStreamException, MalformedDataException {
  if (data == null) {
    throw new MalformedDataException(""String_Node_Str"");
  }
  out.writeStartElement(""String_Node_Str"");
  if (getStanza() != null) {
    out.writeAttribute(""String_Node_Str"",getStanza());
  }
  out.writeAttribute(""String_Node_Str"",isUnbroken() ? ""String_Node_Str"" : ""String_Node_Str"");
  long epoch_time=time != null ? time.getTime() : System.currentTimeMillis();
  writeFieldTo(out,""String_Node_Str"",Long.toString(epoch_time / 1000));
  writeFieldTo(out,""String_Node_Str"",getSource());
  writeFieldTo(out,""String_Node_Str"",getSourceType());
  writeFieldTo(out,""String_Node_Str"",getIndex());
  writeFieldTo(out,""String_Node_Str"",getHost());
  writeFieldTo(out,""String_Node_Str"",getData());
  if (!isUnbroken() && isDone()) {
    out.writeStartElement(""String_Node_Str"");
    out.writeEndElement();
  }
  out.writeEndElement();
}","/** 
 * Write this event to the given XMLStreamWriter.
 * @param out The XMLStreamWriter to append to.
 * @throws XMLStreamException if there is a problem in the XMLStreamWriter.
 * @throws MalformedDataException if you have not specified data for this event.
 */
public void writeTo(XMLStreamWriter out) throws XMLStreamException, MalformedDataException {
  if (data == null) {
    throw new MalformedDataException(""String_Node_Str"");
  }
  out.writeStartElement(""String_Node_Str"");
  if (getStanza() != null) {
    out.writeAttribute(""String_Node_Str"",getStanza());
  }
  out.writeAttribute(""String_Node_Str"",isUnbroken() ? ""String_Node_Str"" : ""String_Node_Str"");
  long epoch_time;
  if (this.time == null) {
    epoch_time=System.currentTimeMillis();
  }
 else {
    epoch_time=this.time.getTime();
  }
  writeFieldTo(out,""String_Node_Str"",String.format(""String_Node_Str"",epoch_time / 1000D));
  writeFieldTo(out,""String_Node_Str"",getSource());
  writeFieldTo(out,""String_Node_Str"",getSourceType());
  writeFieldTo(out,""String_Node_Str"",getIndex());
  writeFieldTo(out,""String_Node_Str"",getHost());
  writeFieldTo(out,""String_Node_Str"",getData());
  if (!isUnbroken() && isDone()) {
    out.writeStartElement(""String_Node_Str"");
    out.writeEndElement();
  }
  out.writeEndElement();
}"
16816,"InputDefinition(){
  inputs=new HashMap<String,List<Parameter>>();
}","InputDefinition(){
  inputs=new HashMap<String,List<Parameter>>();
  metadata=new HashMap<String,String>();
}"
16817,"/** 
 * @return the name of the server on which this modular input is being run.
 */
public String getServerHost(){
  return serverHost;
}","/** 
 * @return the name of the server on which this modular input is being run.
 */
public String getServerHost(){
  return this.metadata.get(serverHostField);
}"
16818,"/** 
 * Parse a stream containing XML into an InputDefinition.
 * @param stream The stream containing XML to parse.
 * @return an InputDefinition object.
 * @throws ParserConfigurationException if there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException if there is an error in reading from the stream.
 * @throws SAXException when the XML is invalid.
 * @throws MalformedDataException when the XML does specify a valid set of inputs.
 */
public static InputDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  InputDefinition definition=new InputDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == node.TEXT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      definition.setServerHost(XmlUtil.textInNode(node,""String_Node_Str""));
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      definition.setServerUri(XmlUtil.textInNode(node,""String_Node_Str""));
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      definition.setCheckpointDir(XmlUtil.textInNode(node,""String_Node_Str""));
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      definition.setSessionKey(XmlUtil.textInNode(node,""String_Node_Str""));
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
        if (child.getNodeType() == child.TEXT_NODE) {
          continue;
        }
        if (!child.getNodeName().equals(""String_Node_Str"")) {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
        }
        String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        List<Parameter> parameter=Parameter.nodeToParameterList(child);
        definition.addInput(name,parameter);
      }
    }
  }
  return definition;
}","/** 
 * Parse a stream containing XML into an InputDefinition.
 * @param stream The stream containing XML to parse.
 * @return an InputDefinition object.
 * @throws ParserConfigurationException if there are errors in setting up the parser (which indicates systemconfiguration issues).
 * @throws IOException if there is an error in reading from the stream.
 * @throws SAXException when the XML is invalid.
 * @throws MalformedDataException when the XML does specify a valid set of inputs.
 */
public static InputDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setIgnoringElementContentWhitespace(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document doc=documentBuilder.parse(stream);
  InputDefinition definition=new InputDefinition();
  for (Node node=doc.getDocumentElement().getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == node.TEXT_NODE) {
      continue;
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
        if (child.getNodeType() == child.TEXT_NODE) {
          continue;
        }
        if (!child.getNodeName().equals(""String_Node_Str"")) {
          throw new MalformedDataException(""String_Node_Str"" + child.getNodeName());
        }
        String name=child.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        List<Parameter> parameter=Parameter.nodeToParameterList(child);
        definition.addInput(name,parameter);
      }
    }
 else {
      definition.metadata.put(node.getNodeName(),XmlUtil.textInNode(node,""String_Node_Str"" + node.getNodeName()));
    }
  }
  return definition;
}"
16819,"/** 
 * Set the name of the server on which this modular input is being run.
 */
public void setServerHost(String serverHost){
  this.serverHost=serverHost;
}","/** 
 * Set the name of the server on which this modular input is being run.
 */
public void setServerHost(String serverHost){
  this.metadata.put(serverHostField,serverHost);
}"
16820,"/** 
 * @return A session key providing access to splunkd's REST API on this host.
 */
public String getSessionKey(){
  return sessionKey;
}","/** 
 * @return A session key providing access to splunkd's REST API on this host.
 */
public String getSessionKey(){
  return this.metadata.get(sessionKeyField);
}"
16821,"/** 
 * @param checkpointDir The path to write checkpoint files in.
 */
public void setCheckpointDir(String checkpointDir){
  this.checkpointDir=checkpointDir;
}","/** 
 * @param checkpointDir The path to write checkpoint files in.
 */
public void setCheckpointDir(String checkpointDir){
  this.metadata.put(checkpointDirField,checkpointDir);
}"
16822,"/** 
 * @return the path to write checkpoint files for restarting inputs in.
 */
public String getCheckpointDir(){
  return checkpointDir;
}","/** 
 * @return the path to write checkpoint files for restarting inputs in.
 */
public String getCheckpointDir(){
  return this.metadata.get(checkpointDirField);
}"
16823,"@Override public boolean equals(Object other){
  if (!(other instanceof InputDefinition)) {
    return false;
  }
  InputDefinition that=(InputDefinition)other;
  return this.getServerUri().equals(that.getServerUri()) && this.getServerHost().equals(that.getServerHost()) && this.getCheckpointDir().equals(that.getCheckpointDir())&& this.getSessionKey().equals(that.getSessionKey())&& this.getInputs().equals(that.getInputs());
}","@Override public boolean equals(Object other){
  if (!(other instanceof InputDefinition)) {
    return false;
  }
  InputDefinition that=(InputDefinition)other;
  return this.metadata.equals(that.metadata) && this.inputs.equals(that.inputs);
}"
16824,"/** 
 * @param sessionKey A session key that can be used to access splunkd's REST API.
 */
public void setSessionKey(String sessionKey){
  this.sessionKey=sessionKey;
}","/** 
 * @param sessionKey A session key that can be used to access splunkd's REST API.
 */
public void setSessionKey(String sessionKey){
  this.metadata.put(sessionKeyField,sessionKey);
}"
16825,"/** 
 * @param serverUri The URI to reach the server on which this modular input is being run.
 */
public void setServerUri(String serverUri){
  this.serverUri=serverUri;
}","/** 
 * @param serverUri The URI to reach the server on which this modular input is being run.
 */
public void setServerUri(String serverUri){
  this.metadata.put(serverUriField,serverUri);
}"
16826,"/** 
 * @return the URI to the server on which this modular input is being run.
 */
public String getServerUri(){
  return serverUri;
}","/** 
 * @return the URI to the server on which this modular input is being run.
 */
public String getServerUri(){
  return this.metadata.get(serverUriField);
}"
16827,"@Test public void testArgumentGeneration() throws ParserConfigurationException, TransformerException {
  Argument argument=new Argument(""String_Node_Str"");
  argument.setDescription(""String_Node_Str"");
  argument.setDataType(Argument.DataType.NUMBER);
  argument.setRequiredOnCreate(true);
  argument.setRequiredOnEdit(true);
  argument.setValidation(""String_Node_Str"");
  Document generatedDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  argument.addToDocument(generatedDoc,generatedDoc);
  Document expectedDoc=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expectedDoc,generatedDoc);
}","@Test public void testArgumentGeneration() throws ParserConfigurationException, TransformerException {
  Argument argument=new Argument(""String_Node_Str"");
  argument.setDescription(""String_Node_Str"");
  argument.setDataType(Argument.DataType.BOOLEAN);
  argument.setValidation(""String_Node_Str"");
  argument.setRequiredOnEdit(true);
  argument.setRequiredOnCreate(true);
  Document generatedDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  argument.addToDocument(generatedDoc,generatedDoc);
  Document expectedDoc=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expectedDoc,generatedDoc);
}"
16828,"@Test public void testMinimalEvent() throws XMLStreamException, MalformedDataException, TransformerException, ParserConfigurationException {
  StringBufferOutputStream sb=new StringBufferOutputStream();
  XMLStreamWriter writer=XMLOutputFactory.newInstance().createXMLStreamWriter(sb);
  Event event=new Event();
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.writeTo(writer);
  Document found=stringToXmlDocument(sb.toString());
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}","@Test public void testMinimalEvent() throws XMLStreamException, MalformedDataException, TransformerException, ParserConfigurationException {
  StringBufferOutputStream sb=new StringBufferOutputStream();
  XMLStreamWriter writer=XMLOutputFactory.newInstance().createXMLStreamWriter(sb);
  Event event=new Event();
  event.setTime(new Date(1372187084000L));
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.writeTo(writer);
  Document found=stringToXmlDocument(sb.toString());
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}"
16829,"@Test public void testEventWriterWithMaximalEvents() throws XMLStreamException, TransformerException, ParserConfigurationException, MalformedDataException {
  StringBufferOutputStream out=new StringBufferOutputStream();
  StringBufferOutputStream err=new StringBufferOutputStream();
  EventWriter ew=new EventWriter(out,err);
  Event event=new Event();
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.setHost(""String_Node_Str"");
  event.setIndex(""String_Node_Str"");
  event.setSource(""String_Node_Str"");
  event.setSourceType(""String_Node_Str"");
  event.setTime(new Date());
  event.setDone(true);
  event.setUnbroken(true);
  ew.writeEvent(event);
  Document found=stringToXmlDocument(out.toString() + ""String_Node_Str"");
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
  Assert.assertEquals(""String_Node_Str"",err.toString());
  err.clear();
  ew.writeEvent(event);
  ew.close();
  found=stringToXmlDocument(out.toString());
  expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}","@Test public void testEventWriterWithMaximalEvents() throws XMLStreamException, TransformerException, ParserConfigurationException, MalformedDataException {
  StringBufferOutputStream out=new StringBufferOutputStream();
  StringBufferOutputStream err=new StringBufferOutputStream();
  EventWriter ew=new EventWriter(out,err);
  Event event=new Event();
  event.setTime(new Date(1372275124466L));
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.setHost(""String_Node_Str"");
  event.setIndex(""String_Node_Str"");
  event.setSource(""String_Node_Str"");
  event.setSourceType(""String_Node_Str"");
  event.setDone(true);
  event.setUnbroken(true);
  ew.writeEvent(event);
  Document found=stringToXmlDocument(out.toString() + ""String_Node_Str"");
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
  Assert.assertEquals(""String_Node_Str"",err.toString());
  err.clear();
  ew.writeEvent(event);
  ew.close();
  found=stringToXmlDocument(out.toString());
  expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}"
16830,"@Test public void testMaximalEvent() throws MalformedDataException, XMLStreamException, TransformerException, ParserConfigurationException {
  StringBufferOutputStream sb=new StringBufferOutputStream();
  XMLStreamWriter writer=XMLOutputFactory.newInstance().createXMLStreamWriter(sb);
  Event event=new Event();
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.setHost(""String_Node_Str"");
  event.setIndex(""String_Node_Str"");
  event.setSource(""String_Node_Str"");
  event.setSourceType(""String_Node_Str"");
  event.setTime(new Date());
  event.setDone(true);
  event.setUnbroken(true);
  event.writeTo(writer);
  Document found=stringToXmlDocument(sb.toString());
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}","@Test public void testMaximalEvent() throws MalformedDataException, XMLStreamException, TransformerException, ParserConfigurationException {
  StringBufferOutputStream sb=new StringBufferOutputStream();
  XMLStreamWriter writer=XMLOutputFactory.newInstance().createXMLStreamWriter(sb);
  Event event=new Event();
  event.setTime(new Date(1372274622493L));
  event.setStanza(""String_Node_Str"");
  event.setData(""String_Node_Str"");
  event.setHost(""String_Node_Str"");
  event.setIndex(""String_Node_Str"");
  event.setSource(""String_Node_Str"");
  event.setSourceType(""String_Node_Str"");
  event.setDone(true);
  event.setUnbroken(true);
  event.writeTo(writer);
  Document found=stringToXmlDocument(sb.toString());
  Document expected=resourceToXmlDocument(""String_Node_Str"");
  assertXmlEqual(expected,found);
}"
16831,"/** 
 * Constructs a fully-qualified URL for this service using a given path.
 * @param path The path to qualify.
 * @return The fully-qualified URL for the service.
 */
public URL getUrl(String path){
  try {
    return new URL(getPrefix() + path);
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}","/** 
 * Constructs a fully-qualified URL for this service using a given path.
 * @param path The path to qualify.
 * @return The fully-qualified URL for the service.
 */
public URL getUrl(String path){
  try {
    if (getScheme() == HTTPS_SCHEME && httpsHandler != null) {
      return new URL(getScheme(),getHost(),getPort(),path,httpsHandler);
    }
 else {
      return new URL(getScheme(),getHost(),getPort(),path);
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}"
16832,"/** 
 * Constructs a new   {@code HttpService} instance using the given host,port, and scheme.
 * @param host The host name of the service.
 * @param port The port number of the service.
 * @param scheme Scheme for accessing the service ({@code http} or {@code https}).
 */
public HttpService(String host,int port,String scheme){
  this.host=host;
  this.port=port;
  this.scheme=scheme;
}","/** 
 * Constructs a new   {@code HttpService} instance using the given host,port, and scheme, and instructing it to use the specified HTTPS handler.
 * @param host The host name of the service.
 * @param port The port number of the service.
 * @param scheme Scheme for accessing the service ({@code http} or {@code https}).
 */
public HttpService(String host,int port,String scheme,URLStreamHandler httpsHandler){
  this.host=host;
  this.port=port;
  this.scheme=scheme;
  this.httpsHandler=httpsHandler;
}"
16833,"/** 
 * Creates a new   {@code Service} instance using a map of arguments.
 * @param args A {@code Map} of arguments to initialize the service.
 */
public Service(Map<String,Object> args){
  super();
  this.app=Args.<String>get(args,""String_Node_Str"",null);
  this.host=Args.<String>get(args,""String_Node_Str"",DEFAULT_HOST);
  this.owner=Args.<String>get(args,""String_Node_Str"",null);
  this.port=Args.<Integer>get(args,""String_Node_Str"",DEFAULT_PORT);
  this.scheme=Args.<String>get(args,""String_Node_Str"",DEFAULT_SCHEME);
  this.token=Args.<String>get(args,""String_Node_Str"",null);
  this.username=(String)args.get(""String_Node_Str"");
  this.password=(String)args.get(""String_Node_Str"");
}","/** 
 * Creates a new   {@code Service} instance using a map of arguments.
 * @param args A {@code Map} of arguments to initialize the service.
 */
public Service(Map<String,Object> args){
  super();
  this.app=Args.<String>get(args,""String_Node_Str"",null);
  this.host=Args.<String>get(args,""String_Node_Str"",DEFAULT_HOST);
  this.owner=Args.<String>get(args,""String_Node_Str"",null);
  this.port=Args.<Integer>get(args,""String_Node_Str"",DEFAULT_PORT);
  this.scheme=Args.<String>get(args,""String_Node_Str"",DEFAULT_SCHEME);
  this.token=Args.<String>get(args,""String_Node_Str"",null);
  this.username=(String)args.get(""String_Node_Str"");
  this.password=(String)args.get(""String_Node_Str"");
  this.httpsHandler=Args.<URLStreamHandler>get(args,""String_Node_Str"",null);
}"
16834,"/** 
 * Sets the wildcard argument that accepts any saved search template argument, such as ""args.username=foobar"" when the search is ""search $username$"".
 * @param wildcard The wildcard argument.
 */
public void setArgsWildcard(String wildcard){
  setCacheValue(""String_Node_Str"",wildcard);
}","/** 
 * Sets the wildcard argument that accepts any saved search template argument, such as ""args.username=foobar"" when the search is ""search $username$"".
 * @param wildcard The wildcard argument.
 * @deprecated This method probably does not work correctly. See DVPL-1266.Use  {@link #update(Map)} with a manual map instead.
 */
public void setArgsWildcard(String wildcard){
  setCacheValue(""String_Node_Str"",wildcard);
}"
16835,"/** 
 * Returns how frequently Splunk runs the MapReduce reduce phase on accumulated map values.
 * @return The reduce frequency.
 */
public int getDispatchReduceFreq(){
  return getInteger(""String_Node_Str"");
}","/** 
 * Returns how frequently Splunk runs the MapReduce reduce phase on accumulated map values.
 * @return The reduce frequency.
 * @deprecated Use {@link #getDispatchReduceFrequency()} instead.
 */
public int getDispatchReduceFreq(){
  return getDispatchReduceFrequency();
}"
16836,"/** 
 * Sets whether a real-time search managed by the scheduler is restarted when a search peer becomes available for this saved search. <p> <b>Note:</b> The peer can be one that is newly added or one that has become available after being down.
 * @param restart {@code true} to restart a real-time search, {@code false}if not.
 */
public void setRestartOnSearchpeerAdd(boolean restart){
  setCacheValue(""String_Node_Str"",restart);
}","/** 
 * Sets whether a real-time search managed by the scheduler is restarted when a search peer becomes available for this saved search. <p> <b>Note:</b> The peer can be one that is newly added or one that has become available after being down.
 * @param restart {@code true} to restart a real-time search, {@code false}if not.
 * @deprecated Use {@link #setRestartOnSearchPeerAdd(boolean)} instead.
 */
public void setRestartOnSearchpeerAdd(boolean restart){
  setRestartOnSearchPeerAdd(restart);
}"
16837,"/** 
 * Sets the maximum number of timeline buckets.
 * @param buckets The maximum number of timeline buckets.
 */
public void setDispatchBuckets(String buckets){
  setCacheValue(""String_Node_Str"",buckets);
}","/** 
 * Sets the maximum number of timeline buckets.
 * @param buckets The maximum number of timeline buckets.
 */
public void setDispatchBuckets(int buckets){
  setCacheValue(""String_Node_Str"",buckets);
}"
16838,"/** 
 * Indicates whether to back fill the real-time window for this search. This attribute only applies to real-time searches.
 * @return {@code true} if Splunk back fills the real-time window,{@code false} if not.
 */
public boolean getDispatchRtBackfill(){
  return getBoolean(""String_Node_Str"",false);
}","/** 
 * Indicates whether to back fill the real-time window for this search. This attribute only applies to real-time searches.
 * @return {@code true} if Splunk back fills the real-time window,{@code false} if not.
 * @deprecated Use {@link #getDispatchRealTimeBackfill()} instead.
 */
public boolean getDispatchRtBackfill(){
  return getDispatchRealTimeBackfill();
}"
16839,"@Test public void testUpdate(){
  boolean isVisible=savedSearch.isVisible();
  savedSearch.setIsVisible(!isVisible);
  savedSearch.setActionEmailAuthPassword(""String_Node_Str"");
  savedSearch.setActionEmailAuthUsername(""String_Node_Str"");
  savedSearch.setActionEmailBcc(""String_Node_Str"");
  savedSearch.setActionEmailCc(""String_Node_Str"");
  savedSearch.setActionEmailCommand(""String_Node_Str"");
  savedSearch.setActionEmailFormat(""String_Node_Str"");
  savedSearch.setActionEmailFrom(""String_Node_Str"");
  savedSearch.setActionEmailHostname(""String_Node_Str"");
  savedSearch.setActionEmailInline(true);
  savedSearch.setActionEmailMailServer(""String_Node_Str"");
  savedSearch.setActionEmailMaxResults(101);
  savedSearch.setActionEmailMaxTime(""String_Node_Str"");
  savedSearch.setActionEmailPdfView(""String_Node_Str"");
  savedSearch.setActionEmailPreProcessResults(""String_Node_Str"");
  savedSearch.setActionEmailReportPaperOrientation(""String_Node_Str"");
  savedSearch.setActionEmailReportPaperSize(""String_Node_Str"");
  savedSearch.setActionEmailReportServerEnabled(false);
  savedSearch.setActionEmailReportServerUrl(""String_Node_Str"");
  savedSearch.setActionEmailSendPdf(false);
  savedSearch.setActionEmailSendResults(false);
  savedSearch.setActionEmailSubject(""String_Node_Str"");
  savedSearch.setActionEmailTo(""String_Node_Str"");
  savedSearch.setActionEmailTrackAlert(false);
  savedSearch.setActionEmailTtl(""String_Node_Str"");
  savedSearch.setActionEmailUseSsl(false);
  savedSearch.setActionEmailUseTls(false);
  savedSearch.setActionEmailWidthSortColumns(false);
  savedSearch.setActionPopulateLookupCommand(""String_Node_Str"");
  savedSearch.setActionPopulateLookupDest(""String_Node_Str"");
  savedSearch.setActionPopulateLookupHostname(""String_Node_Str"");
  savedSearch.setActionPopulateLookupMaxResults(102);
  savedSearch.setActionPopulateLookupMaxTime(""String_Node_Str"");
  savedSearch.setActionPopulateLookupTrackAlert(false);
  savedSearch.setActionPopulateLookupTtl(""String_Node_Str"");
  savedSearch.setActionRssCommand(""String_Node_Str"");
  savedSearch.setActionRssHostname(""String_Node_Str"");
  savedSearch.setActionRssMaxResults(103);
  savedSearch.setActionRssMaxTime(""String_Node_Str"");
  savedSearch.setActionRssTrackAlert(false);
  savedSearch.setActionRssTtl(""String_Node_Str"");
  savedSearch.setActionScriptCommand(""String_Node_Str"");
  savedSearch.setActionScriptHostname(""String_Node_Str"");
  savedSearch.setActionScriptMaxResults(104);
  savedSearch.setActionScriptMaxTime(""String_Node_Str"");
  savedSearch.setActionScriptTrackAlert(false);
  savedSearch.setActionScriptTtl(""String_Node_Str"");
  savedSearch.setActionSummaryIndexName(""String_Node_Str"");
  savedSearch.setActionSummaryIndexCommand(""String_Node_Str"");
  savedSearch.setActionSummaryIndexHostname(""String_Node_Str"");
  savedSearch.setActionSummaryIndexInline(false);
  savedSearch.setActionSummaryIndexMaxResults(105);
  savedSearch.setActionSummaryIndexMaxTime(""String_Node_Str"");
  savedSearch.setActionSummaryIndexTrackAlert(false);
  savedSearch.setActionSummaryIndexTtl(""String_Node_Str"");
  savedSearch.setActions(""String_Node_Str"");
  savedSearch.setSearch(""String_Node_Str"");
  savedSearch.setAlertComparator(""String_Node_Str"");
  savedSearch.setAlertCondition(""String_Node_Str"");
  savedSearch.setAlertDigestMode(true);
  savedSearch.setAlertExpires(""String_Node_Str"");
  savedSearch.setAlertSeverity(6);
  savedSearch.setAlertSuppress(true);
  savedSearch.setAlertSuppressFields(""String_Node_Str"");
  savedSearch.setAlertSuppressPeriod(""String_Node_Str"");
  savedSearch.setAlertThreshold(""String_Node_Str"");
  savedSearch.setAlertTrack(""String_Node_Str"");
  savedSearch.setAlertType(""String_Node_Str"");
  savedSearch.setCronSchedule(""String_Node_Str"");
  savedSearch.setDescription(""String_Node_Str"");
  savedSearch.setDispatchBuckets(""String_Node_Str"");
  savedSearch.setDispatchEarliestTime(""String_Node_Str"");
  savedSearch.setDispatchLatestTime(""String_Node_Str"");
  savedSearch.setDispatchLookups(false);
  savedSearch.setDispatchMaxCount(100000);
  savedSearch.setDispatchMaxTime(120);
  savedSearch.setDispatchSpawnProcess(true);
  savedSearch.setDispatchTimeFormat(""String_Node_Str"");
  savedSearch.setDispatchTtl(""String_Node_Str"");
  savedSearch.setDisplayView(""String_Node_Str"");
  savedSearch.setMaxConcurrent(2);
  savedSearch.setRealtimeSchedule(false);
  savedSearch.setRequestUiDispatchApp(""String_Node_Str"");
  savedSearch.setRequestUiDispatchView(""String_Node_Str"");
  savedSearch.setRunOnStartup(true);
  savedSearch.setVsid(""String_Node_Str"");
  savedSearch.update();
  savedSearch.refresh();
  assertTrue(savedSearch.isActionEmail());
  assertTrue(savedSearch.isActionPopulateLookup());
  assertTrue(savedSearch.isActionRss());
  assertTrue(savedSearch.isActionScript());
  assertTrue(savedSearch.isActionSummaryIndex());
  assertTrue(savedSearch.isDigestMode());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailAuthPassword());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailAuthUsername());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailBcc());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailCc());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailFormat());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailFrom());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailHostname());
  assertTrue(savedSearch.getActionEmailInline());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailMailServer());
  assertEquals(101,savedSearch.getActionEmailMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailMaxTime());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailPdfView());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailPreProcessResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportPaperOrientation());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportPaperSize());
  assertFalse(savedSearch.getActionEmailReportServerEnabled());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportServerUrl());
  assertFalse(savedSearch.getActionEmailSendPdf());
  assertFalse(savedSearch.getActionEmailSendResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailSubject());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailTo());
  assertFalse(savedSearch.getActionEmailTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailTtl());
  assertFalse(savedSearch.getActionEmailUseSsl());
  assertFalse(savedSearch.getActionEmailUseTls());
  assertFalse(savedSearch.getActionEmailWidthSortColumns());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupDest());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupHostname());
  assertEquals(102,savedSearch.getActionPopulateLookupMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupMaxTime());
  assertFalse(savedSearch.getActionPopulateLookupTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssHostname());
  assertEquals(103,savedSearch.getActionRssMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssMaxTime());
  assertFalse(savedSearch.getActionRssTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptHostname());
  assertEquals(104,savedSearch.getActionScriptMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptMaxTime());
  assertFalse(savedSearch.getActionScriptTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexName());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexHostname());
  assertFalse(savedSearch.getActionSummaryIndexInline());
  assertEquals(105,savedSearch.getActionSummaryIndexMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexMaxTime());
  assertFalse(savedSearch.getActionSummaryIndexTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexTtl());
  assertEquals(savedSearch.isVisible(),!isVisible);
  assertEquals(""String_Node_Str"",savedSearch.getAlertComparator());
  assertEquals(""String_Node_Str"",savedSearch.getAlertCondition());
  assertEquals(true,savedSearch.getAlertDigestMode());
  assertEquals(""String_Node_Str"",savedSearch.getAlertExpires());
  assertEquals(6,savedSearch.getAlertSeverity());
  assertEquals(true,savedSearch.getAlertSuppress());
  assertEquals(""String_Node_Str"",savedSearch.getAlertSuppressFields());
  assertEquals(""String_Node_Str"",savedSearch.getAlertSuppressPeriod());
  assertEquals(""String_Node_Str"",savedSearch.getAlertThreshold());
  assertEquals(""String_Node_Str"",savedSearch.getAlertTrack());
  assertEquals(""String_Node_Str"",savedSearch.getAlertType());
  assertEquals(""String_Node_Str"",savedSearch.getCronSchedule());
  assertEquals(""String_Node_Str"",savedSearch.getDescription());
  assertEquals(100,savedSearch.getDispatchBuckets());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchEarliestTime());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchLatestTime());
  assertEquals(false,savedSearch.getDispatchLookups());
  assertEquals(100000,savedSearch.getDispatchMaxCount());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchMaxTime());
  assertEquals(true,savedSearch.getDispatchSpawnProcess());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchTimeFormat());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchTtl());
  assertEquals(""String_Node_Str"",savedSearch.getDisplayView());
  assertEquals(2,savedSearch.getMaxConcurrent());
  assertEquals(false,savedSearch.getRealtimeSchedule());
  assertEquals(""String_Node_Str"",savedSearch.getRequestUiDispatchApp());
  assertEquals(""String_Node_Str"",savedSearch.getRequestUiDispatchView());
  assertEquals(true,savedSearch.getRunOnStartup());
  assertEquals(null,savedSearch.getVsid());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testUpdate(){
  boolean isVisible=savedSearch.isVisible();
  savedSearch.setIsVisible(!isVisible);
  savedSearch.setActionEmailAuthPassword(""String_Node_Str"");
  savedSearch.setActionEmailAuthUsername(""String_Node_Str"");
  savedSearch.setActionEmailBcc(""String_Node_Str"");
  savedSearch.setActionEmailCc(""String_Node_Str"");
  savedSearch.setActionEmailCommand(""String_Node_Str"");
  savedSearch.setActionEmailFormat(""String_Node_Str"");
  savedSearch.setActionEmailFrom(""String_Node_Str"");
  savedSearch.setActionEmailHostname(""String_Node_Str"");
  savedSearch.setActionEmailInline(true);
  savedSearch.setActionEmailMailServer(""String_Node_Str"");
  savedSearch.setActionEmailMaxResults(101);
  savedSearch.setActionEmailMaxTime(""String_Node_Str"");
  savedSearch.setActionEmailPdfView(""String_Node_Str"");
  savedSearch.setActionEmailPreProcessResults(""String_Node_Str"");
  savedSearch.setActionEmailReportPaperOrientation(""String_Node_Str"");
  savedSearch.setActionEmailReportPaperSize(""String_Node_Str"");
  savedSearch.setActionEmailReportServerEnabled(false);
  savedSearch.setActionEmailReportServerUrl(""String_Node_Str"");
  savedSearch.setActionEmailSendPdf(false);
  savedSearch.setActionEmailSendResults(false);
  savedSearch.setActionEmailSubject(""String_Node_Str"");
  savedSearch.setActionEmailTo(""String_Node_Str"");
  savedSearch.setActionEmailTrackAlert(false);
  savedSearch.setActionEmailTtl(""String_Node_Str"");
  savedSearch.setActionEmailUseSsl(false);
  savedSearch.setActionEmailUseTls(false);
  savedSearch.setActionEmailWidthSortColumns(false);
  savedSearch.setActionPopulateLookupCommand(""String_Node_Str"");
  savedSearch.setActionPopulateLookupDest(""String_Node_Str"");
  savedSearch.setActionPopulateLookupHostname(""String_Node_Str"");
  savedSearch.setActionPopulateLookupMaxResults(102);
  savedSearch.setActionPopulateLookupMaxTime(""String_Node_Str"");
  savedSearch.setActionPopulateLookupTrackAlert(false);
  savedSearch.setActionPopulateLookupTtl(""String_Node_Str"");
  savedSearch.setActionRssCommand(""String_Node_Str"");
  savedSearch.setActionRssHostname(""String_Node_Str"");
  savedSearch.setActionRssMaxResults(103);
  savedSearch.setActionRssMaxTime(""String_Node_Str"");
  savedSearch.setActionRssTrackAlert(false);
  savedSearch.setActionRssTtl(""String_Node_Str"");
  savedSearch.setActionScriptCommand(""String_Node_Str"");
  savedSearch.setActionScriptHostname(""String_Node_Str"");
  savedSearch.setActionScriptMaxResults(104);
  savedSearch.setActionScriptMaxTime(""String_Node_Str"");
  savedSearch.setActionScriptTrackAlert(false);
  savedSearch.setActionScriptTtl(""String_Node_Str"");
  savedSearch.setActionSummaryIndexName(""String_Node_Str"");
  savedSearch.setActionSummaryIndexCommand(""String_Node_Str"");
  savedSearch.setActionSummaryIndexHostname(""String_Node_Str"");
  savedSearch.setActionSummaryIndexInline(false);
  savedSearch.setActionSummaryIndexMaxResults(105);
  savedSearch.setActionSummaryIndexMaxTime(""String_Node_Str"");
  savedSearch.setActionSummaryIndexTrackAlert(false);
  savedSearch.setActionSummaryIndexTtl(""String_Node_Str"");
  savedSearch.setActions(""String_Node_Str"");
  savedSearch.setSearch(""String_Node_Str"");
  savedSearch.setAlertComparator(""String_Node_Str"");
  savedSearch.setAlertCondition(""String_Node_Str"");
  savedSearch.setAlertDigestMode(true);
  savedSearch.setAlertExpires(""String_Node_Str"");
  savedSearch.setAlertSeverity(6);
  savedSearch.setAlertSuppress(true);
  savedSearch.setAlertSuppressFields(""String_Node_Str"");
  savedSearch.setAlertSuppressPeriod(""String_Node_Str"");
  savedSearch.setAlertThreshold(""String_Node_Str"");
  savedSearch.setAlertTrack(""String_Node_Str"");
  savedSearch.setAlertType(""String_Node_Str"");
  savedSearch.setCronSchedule(""String_Node_Str"");
  savedSearch.setDescription(""String_Node_Str"");
  savedSearch.setDispatchBuckets(""String_Node_Str"");
  savedSearch.setDispatchEarliestTime(""String_Node_Str"");
  savedSearch.setDispatchLatestTime(""String_Node_Str"");
  savedSearch.setDispatchLookups(false);
  savedSearch.setDispatchMaxCount(100000);
  savedSearch.setDispatchMaxTime(120);
  savedSearch.setDispatchSpawnProcess(true);
  savedSearch.setDispatchTimeFormat(""String_Node_Str"");
  savedSearch.setDispatchTtl(""String_Node_Str"");
  savedSearch.setDisplayView(""String_Node_Str"");
  savedSearch.setMaxConcurrent(2);
  savedSearch.setRealtimeSchedule(false);
  savedSearch.setRequestUiDispatchApp(""String_Node_Str"");
  savedSearch.setRequestUiDispatchView(""String_Node_Str"");
  savedSearch.setRunOnStartup(true);
  savedSearch.setVsid(""String_Node_Str"");
  savedSearch.setDispatchReduceFrequency(11);
  savedSearch.setDispatchRealTimeBackfill(true);
  savedSearch.setRestartOnSearchpeerAdd(false);
  savedSearch.setDisabled(true);
  savedSearch.update();
  savedSearch.refresh();
  assertTrue(savedSearch.isActionEmail());
  assertTrue(savedSearch.isActionPopulateLookup());
  assertTrue(savedSearch.isActionRss());
  assertTrue(savedSearch.isActionScript());
  assertTrue(savedSearch.isActionSummaryIndex());
  assertTrue(savedSearch.isDigestMode());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailAuthPassword());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailAuthUsername());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailBcc());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailCc());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailFormat());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailFrom());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailHostname());
  assertTrue(savedSearch.getActionEmailInline());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailMailServer());
  assertEquals(101,savedSearch.getActionEmailMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailMaxTime());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailPdfView());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailPreProcessResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportPaperOrientation());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportPaperSize());
  assertFalse(savedSearch.getActionEmailReportServerEnabled());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailReportServerUrl());
  assertFalse(savedSearch.getActionEmailSendPdf());
  assertFalse(savedSearch.getActionEmailSendResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailSubject());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailTo());
  assertFalse(savedSearch.getActionEmailTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionEmailTtl());
  assertFalse(savedSearch.getActionEmailUseSsl());
  assertFalse(savedSearch.getActionEmailUseTls());
  assertFalse(savedSearch.getActionEmailWidthSortColumns());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupDest());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupHostname());
  assertEquals(102,savedSearch.getActionPopulateLookupMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupMaxTime());
  assertFalse(savedSearch.getActionPopulateLookupTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionPopulateLookupTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssHostname());
  assertEquals(103,savedSearch.getActionRssMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssMaxTime());
  assertFalse(savedSearch.getActionRssTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionRssTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptHostname());
  assertEquals(104,savedSearch.getActionScriptMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptMaxTime());
  assertFalse(savedSearch.getActionScriptTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionScriptTtl());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexName());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexCommand());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexHostname());
  assertFalse(savedSearch.getActionSummaryIndexInline());
  assertEquals(105,savedSearch.getActionSummaryIndexMaxResults());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexMaxTime());
  assertFalse(savedSearch.getActionSummaryIndexTrackAlert());
  assertEquals(""String_Node_Str"",savedSearch.getActionSummaryIndexTtl());
  assertEquals(savedSearch.isVisible(),!isVisible);
  assertEquals(""String_Node_Str"",savedSearch.getAlertComparator());
  assertEquals(""String_Node_Str"",savedSearch.getAlertCondition());
  assertEquals(true,savedSearch.getAlertDigestMode());
  assertEquals(""String_Node_Str"",savedSearch.getAlertExpires());
  assertEquals(6,savedSearch.getAlertSeverity());
  assertEquals(true,savedSearch.getAlertSuppress());
  assertEquals(""String_Node_Str"",savedSearch.getAlertSuppressFields());
  assertEquals(""String_Node_Str"",savedSearch.getAlertSuppressPeriod());
  assertEquals(""String_Node_Str"",savedSearch.getAlertThreshold());
  assertEquals(""String_Node_Str"",savedSearch.getAlertTrack());
  assertEquals(""String_Node_Str"",savedSearch.getAlertType());
  assertEquals(""String_Node_Str"",savedSearch.getCronSchedule());
  assertEquals(""String_Node_Str"",savedSearch.getDescription());
  assertEquals(100,savedSearch.getDispatchBuckets());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchEarliestTime());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchLatestTime());
  assertEquals(false,savedSearch.getDispatchLookups());
  assertEquals(100000,savedSearch.getDispatchMaxCount());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchMaxTime());
  assertEquals(true,savedSearch.getDispatchSpawnProcess());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchTimeFormat());
  assertEquals(""String_Node_Str"",savedSearch.getDispatchTtl());
  assertEquals(""String_Node_Str"",savedSearch.getDisplayView());
  assertEquals(2,savedSearch.getMaxConcurrent());
  assertEquals(false,savedSearch.getRealtimeSchedule());
  assertEquals(""String_Node_Str"",savedSearch.getRequestUiDispatchApp());
  assertEquals(""String_Node_Str"",savedSearch.getRequestUiDispatchView());
  assertEquals(true,savedSearch.getRunOnStartup());
  assertEquals(null,savedSearch.getVsid());
  assertEquals(11,savedSearch.getDispatchReduceFreq());
  assertEquals(true,savedSearch.getDispatchRtBackfill());
  assertEquals(false,savedSearch.getRestartOnSearchPeerAdd());
  assertEquals(true,savedSearch.isDisabled());
}"
16840,"/** 
 * Returns the list of slaves for this license pool.
 * @return A comma-separated list of slaves by ID, or {@code null} if notspecified.
 */
public String[] getSlaves(){
  return getStringArray(""String_Node_Str"",null);
}","/** 
 * Returns the list of slaves for this license pool.
 * @return A comma-separated list of slaves by ID, or {@code null} if notspecified.
 */
public String[] getSlaves(){
  if (toUpdate.containsKey(""String_Node_Str"")) {
    String value=(String)toUpdate.get(""String_Node_Str"");
    return value.split(""String_Node_Str"");
  }
 else {
    return getStringArray(""String_Node_Str"",null);
  }
}"
16841,"/** 
 * Sets the list of slaves that are members of this license pool.
 * @param slaves The comma-separated list of slaves. Use an asterisk (""*"") to accept all slaves.
 */
public void setSlaves(String slaves){
  setCacheValue(""String_Node_Str"",slaves);
}","/** 
 * Sets the list of slaves that are members of this license pool.
 * @param slaves The array of slaves. Use an array with a single elementthat is an asterisk (""*"") to accept all slaves.
 */
public void setSlaves(String[] slaves){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < slaves.length; i++) {
    sb.append(slaves[i]);
    if (i < slaves.length - 1) {
      sb.append(""String_Node_Str"");
    }
  }
  setSlaves(sb.toString());
}"
16842,"@Test public void testLicensePoolSetters() throws Exception {
  LicensePoolCollection licensePoolCollection=service.getLicensePools();
  boolean foundAnUpdatablePool=false;
  for (  LicensePool licensePool : licensePoolCollection.values()) {
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    foundAnUpdatablePool=true;
    String originalDescription=licensePool.getDescription();
{
      licensePool.setDescription(""String_Node_Str"");
      licensePool.setQuota(""String_Node_Str"");
      licensePool.update();
      assertEquals(""String_Node_Str"",licensePool.getDescription());
      assertEquals(""String_Node_Str"",licensePool.getQuota());
    }
    licensePool.update(new Args(""String_Node_Str"",originalDescription));
    licensePool.update(new Args(""String_Node_Str"",""String_Node_Str""));
  }
  if (!foundAnUpdatablePool) {
    System.out.println(""String_Node_Str"");
  }
}","@Test public void testLicensePoolSetters() throws Exception {
  LicensePoolCollection licensePoolCollection=service.getLicensePools();
  boolean foundAnUpdatablePool=false;
  for (  LicensePool licensePool : licensePoolCollection.values()) {
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    if (licensePool.getStackId().equals(""String_Node_Str""))     continue;
    foundAnUpdatablePool=true;
    String originalDescription=licensePool.getDescription();
{
      licensePool.setDescription(""String_Node_Str"");
      licensePool.setQuota(""String_Node_Str"");
      licensePool.update();
      assertEquals(""String_Node_Str"",licensePool.getDescription());
      assertEquals(""String_Node_Str"",licensePool.getQuota());
    }
    String[] originalSlaves=licensePool.getSlaves();
{
      licensePool.setSlaves(""String_Node_Str"");
      String[] slaves=licensePool.getSlaves();
      assertEquals(slaves[0],""String_Node_Str"");
      assertEquals(slaves[1],""String_Node_Str"");
      licensePool.setSlaves(new String[]{""String_Node_Str"",""String_Node_Str""});
      String[] slaves2=licensePool.getSlaves();
      assertEquals(slaves2[0],""String_Node_Str"");
      assertEquals(slaves2[1],""String_Node_Str"");
      licensePool.update();
      String[] slaves3=licensePool.getSlaves();
      assertEquals(slaves3.length,2);
      assertTrue(Arrays.asList(slaves3).contains(""String_Node_Str""));
      assertTrue(Arrays.asList(slaves3).contains(""String_Node_Str""));
      licensePool.setSlaves(originalSlaves);
      String[] slaves4=licensePool.getSlaves();
      assertEquals(slaves4.length,originalSlaves.length);
      for (int i=0; i < originalSlaves.length; i++) {
        assertTrue(Arrays.asList(slaves4).contains(originalSlaves[i]));
      }
    }
    licensePool.update(new Args(""String_Node_Str"",originalDescription));
    licensePool.update(new Args(""String_Node_Str"",""String_Node_Str""));
  }
  if (!foundAnUpdatablePool) {
    System.out.println(""String_Node_Str"");
  }
}"
16843,"/** 
 * Returns the string array value associated with the specified key, or the default value if the key does not exist.
 * @param key The key to look up.
 * @param defaultValue The default value.
 * @return The string array value associated with the specified key.
 */
String[] getStringArray(String key,String[] defaultValue){
  if (toUpdate.containsKey(key))   return getStringArray(toUpdate.get(key).toString());
  return getContent().getStringArray(key,defaultValue);
}","/** 
 * Returns the string array value associated with the specified key, or the default value if the key does not exist.
 * @param key The key to look up.
 * @param defaultValue The default value.
 * @return The string array value associated with the specified key.
 */
String[] getStringArray(String key,String[] defaultValue){
  if (toUpdate.containsKey(key))   return getStringArray(key);
  return getContent().getStringArray(key,defaultValue);
}"
16844,"@Test public void testForEmptySetup(){
}","@Test public void testForEmptySetup(){
  try {
    assertNull(application.setup().getSetupXml());
  }
 catch (  Exception e) {
    fail(e.toString());
  }
}"
16845,"@Before public void setUp() throws Exception {
  super.setUp();
  indexName=createTemporaryName();
  index=service.getIndexes().create(indexName);
  tcpPort=findNextUnusedTcpPort(10000);
  Args args=new Args();
  args.add(""String_Node_Str"",indexName);
  tcpInput=service.getInputs().create(String.valueOf(tcpPort),InputKind.Tcp,args);
}","@Before public void setUp() throws Exception {
  super.setUp();
  indexName=createTemporaryName();
  index=service.getIndexes().create(indexName);
  tcpPort=findNextUnusedPort(10000);
  tcpInput=service.getInputs().create(String.valueOf(tcpPort),InputKind.Tcp,new Args(""String_Node_Str"",indexName));
}"
16846,"@After public void tearDown() throws Exception {
  super.tearDown();
  if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
    index.remove();
  }
  if (tcpPort != -1) {
    service.getInputs().get(String.valueOf(tcpPort)).remove();
  }
}","@After public void tearDown() throws Exception {
  if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
    index.remove();
  }
  if (tcpInput != null) {
    tcpInput.remove();
  }
  super.tearDown();
}"
16847,"@Before public void setUp() throws Exception {
  super.setUp();
  indexName=createTemporaryName();
  index=service.getIndexes().create(indexName);
  udpPort=findNextUnusedUdpPort(10000);
  Args args=new Args();
  args.add(""String_Node_Str"",indexName);
  udpInput=service.getInputs().create(String.valueOf(udpPort),InputKind.Udp,args);
}","@Before public void setUp() throws Exception {
  super.setUp();
  indexName=createTemporaryName();
  index=service.getIndexes().create(indexName);
  udpPort=findNextUnusedPort(10000);
  udpInput=service.getInputs().create(String.valueOf(udpPort),InputKind.Udp,new Args(""String_Node_Str"",indexName));
}"
16848,"@After public void tearDown() throws Exception {
  super.tearDown();
  if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
    index.remove();
  }
  if (udpInput != null) {
    udpInput.remove();
  }
}","@After public void tearDown() throws Exception {
  if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
    index.remove();
  }
  if (udpInput != null) {
    udpInput.remove();
  }
  super.tearDown();
}"
16849,"/** 
 * Returns an   {@code InputKind} representing this input's kind.The kind is inferred from the input's path.
 * @return Unknown input kind.
 */
public InputKind getKind(){
  String[] pathComponents=this.path.split(""String_Node_Str"");
  int offset=0;
  while (!pathComponents[offset].equals(""String_Node_Str"")) {
    offset+=1;
  }
  List<String> toJoin=new ArrayList<String>();
  for (int i=offset + 1; i < pathComponents.length; i++) {
    toJoin.add(pathComponents[i]);
  }
  String relpath=Util.join(""String_Node_Str"",toJoin);
  return InputKind.create(relpath);
}","/** 
 * Returns an   {@code InputKind} representing this input's kind.The kind is inferred from the input's path.
 * @return Unknown input kind.
 */
public InputKind getKind(){
  String[] pathComponents=this.path.split(""String_Node_Str"");
  int offset=0;
  while (!pathComponents[offset].equals(""String_Node_Str"")) {
    offset+=1;
  }
  List<String> relpathComponents=new ArrayList<String>();
  for (int i=offset + 1; i < pathComponents.length - 1; i++) {
    relpathComponents.add(pathComponents[i]);
  }
  String relpath=Util.join(""String_Node_Str"",relpathComponents);
  return InputKind.createFromRelativePath(relpath);
}"
16850,"/** 
 * Returns the path's   {@code InputKind} value.
 * @param path The input path.
 * @return The kind of input.
 */
protected InputKind itemKind(String path){
  for (  InputKind kind : this.inputKinds) {
    if (path.indexOf(""String_Node_Str"" + kind.getRelativePath()) > 0)     return kind;
  }
  return InputKind.Unknown;
}","/** 
 * Returns the path's   {@code InputKind} value.
 * @param path The input path.
 * @return The kind of input.
 */
protected InputKind itemKind(String path){
  String relpathWithInputName=Util.substringAfter(path,""String_Node_Str"",null);
  for (  InputKind kind : inputKinds) {
    if (relpathWithInputName.startsWith(kind.getRelativePath())) {
      return kind;
    }
  }
  return InputKind.Unknown;
}"
16851,"/** 
 * Refresh the   {@code inputKinds} field on this object.
 */
private void refreshInputKinds(){
  List<String> basePath=new ArrayList<String>();
  Set<InputKind> kinds=assembleInputKindSet(basePath);
  this.inputKinds.clear();
  this.inputKinds.addAll(kinds);
}","/** 
 * Refresh the   {@code inputKinds} field on this object.
 */
private void refreshInputKinds(){
  Set<InputKind> kinds=assembleInputKindSet(new ArrayList<String>());
  this.inputKinds.clear();
  this.inputKinds.addAll(kinds);
}"
16852,"/** 
 * Recursively assemble a set of all the   {@code InputKind}s available on this Splunk instance.   {@code subPath} is a list of URL components *after* "".../data/inputs/"".So a call to assemble all inputs should pass an empty list as  {@code subPath}. If you wanted only TCP inputs, you would pass a list with one element,   {@code ""tcp""}.
 * @param subPath A list of strings giving the components of the URL after ""data/inputs/"".
 * @return A set of {@code InputKind} objects.
 */
private Set<InputKind> assembleInputKindSet(List<String> subPath){
  Set<InputKind> kinds=new HashSet<InputKind>();
  ResponseMessage response=service.get(this.path + ""String_Node_Str"" + Util.join(""String_Node_Str"",subPath));
  AtomFeed feed=AtomFeed.parseStream(response.getContent());
  for (  AtomEntry entry : feed.entries) {
    String relpath=itemKey(entry);
    boolean hasCreateLink=false;
    for (    String linkName : entry.links.keySet()) {
      if (linkName.equals(""String_Node_Str"")) {
        hasCreateLink=true;
      }
    }
    List<String> thisSubPath=new ArrayList<String>(subPath);
    thisSubPath.add(relpath);
    if (entry.title.equals(""String_Node_Str"") || Util.join(""String_Node_Str"",thisSubPath).equals(""String_Node_Str"")) {
      continue;
    }
 else     if (hasCreateLink) {
      InputKind newKind=InputKind.create(relpath);
      kinds.add(newKind);
    }
 else {
      Set<InputKind> subKinds=assembleInputKindSet(thisSubPath);
      kinds.addAll(subKinds);
    }
  }
  return kinds;
}","/** 
 * Recursively assemble a set of all the   {@code InputKind}s available on this Splunk instance.   {@code subPath} is a list of URL components *after* "".../data/inputs/"".So a call to assemble all inputs should pass an empty list as  {@code subPath}. If you wanted only TCP inputs, you would pass a list with one element,   {@code ""tcp""}.
 * @param subPath A list of strings giving the components of the URL after ""data/inputs/"".
 * @return A set of {@code InputKind} objects.
 */
private Set<InputKind> assembleInputKindSet(List<String> subPath){
  Set<InputKind> kinds=new HashSet<InputKind>();
  ResponseMessage response=service.get(this.path + ""String_Node_Str"" + Util.join(""String_Node_Str"",subPath));
  AtomFeed feed=AtomFeed.parseStream(response.getContent());
  for (  AtomEntry entry : feed.entries) {
    String itemKeyName=itemKey(entry);
    boolean hasCreateLink=false;
    for (    String linkName : entry.links.keySet()) {
      if (linkName.equals(""String_Node_Str"")) {
        hasCreateLink=true;
      }
    }
    List<String> thisSubPath=new ArrayList<String>(subPath);
    thisSubPath.add(itemKeyName);
    String relpath=Util.join(""String_Node_Str"",thisSubPath);
    if (relpath.equals(""String_Node_Str"") || relpath.equals(""String_Node_Str"")) {
      continue;
    }
 else     if (hasCreateLink) {
      InputKind newKind=InputKind.createFromRelativePath(relpath);
      kinds.add(newKind);
    }
 else {
      Set<InputKind> subKinds=assembleInputKindSet(thisSubPath);
      kinds.addAll(subKinds);
    }
  }
  return kinds;
}"
16853,"private InputKind(String relpath,Class inputClass){
  this(relpath,inputClass,relpath);
}","private InputKind(String relpath,Class<? extends Input> inputClass){
  this(relpath,inputClass,relpath);
}"
16854,"/** 
 * @return String representing the kind of this InputKind.
 */
String getKind(){
  return kind;
}","/** 
 * @return String representing the kind of this InputKind, as it isrepresented in the Atom entry for an input entity.
 */
String getKind(){
  return kind;
}"
16855,"@Test public void testAttachWith() throws Exception {
  Service service=connect();
  String indexName=temporaryName();
  final Index index=service.getIndexes().create(indexName);
  try {
    final int nEvents=index.getTotalEventCount();
    index.attachWith(new ReceiverBehavior(){
      public void run(      OutputStream stream) throws IOException {
        String s=createTimestamp() + ""String_Node_Str"";
        stream.write(s.getBytes(""String_Node_Str""));
      }
    }
);
    int nTries=10;
    while (nTries > 0) {
      index.refresh();
      if (index.getTotalEventCount() == nEvents + 1) {
        return;
      }
 else {
        nTries-=1;
        Thread.sleep(1000);
      }
    }
    if (nTries == 0) {
      SplunkTestCase.fail(""String_Node_Str"");
    }
  }
  finally {
    if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
      index.remove();
    }
  }
}","@Test public void testAttachWith() throws Exception {
  Service service=connect();
  String indexName=createTemporaryName();
  final Index index=service.getIndexes().create(indexName);
  try {
    final int nEvents=index.getTotalEventCount();
    index.attachWith(new ReceiverBehavior(){
      public void run(      OutputStream stream) throws IOException {
        String s=createTimestamp() + ""String_Node_Str"";
        stream.write(s.getBytes(""String_Node_Str""));
      }
    }
);
    int nTries=10;
    while (nTries > 0) {
      index.refresh();
      if (index.getTotalEventCount() == nEvents + 1) {
        return;
      }
 else {
        nTries-=1;
        Thread.sleep(1000);
      }
    }
    if (nTries == 0) {
      SplunkTestCase.fail(""String_Node_Str"");
    }
  }
  finally {
    if (index != null && service.versionCompare(""String_Node_Str"") >= 0) {
      index.remove();
    }
  }
}"
16856,"@Test public void testDeleteIndex() throws Exception {
  Service service=connect();
  if (service.versionCompare(""String_Node_Str"") < 0) {
  }
  String indexName=temporaryName();
  EntityCollection<Index> indexes=service.getIndexes();
  Index index=indexes.create(indexName);
  SplunkTestCase.assertTrue(indexes.containsKey(indexName));
  indexes.remove(indexName);
  int nTries=10;
  while (nTries > 0) {
    if (indexes.containsKey(indexName)) {
      Thread.sleep(300);
    }
 else {
      return;
    }
  }
  SplunkTestCase.fail(""String_Node_Str"");
}","@Test public void testDeleteIndex() throws Exception {
  Service service=connect();
  if (service.versionCompare(""String_Node_Str"") < 0) {
  }
  String indexName=createTemporaryName();
  EntityCollection<Index> indexes=service.getIndexes();
  Index index=indexes.create(indexName);
  SplunkTestCase.assertTrue(indexes.containsKey(indexName));
  indexes.remove(indexName);
  int nTries=10;
  while (nTries > 0) {
    if (indexes.containsKey(indexName)) {
      Thread.sleep(300);
    }
 else {
      return;
    }
  }
  SplunkTestCase.fail(""String_Node_Str"");
}"
16857,"/** 
 * Parses the value content of a dict/key or a list/item element. The value is either text, a   {@code <dict>} element, or a {@code <list>} element.
 * @param xmlEventReader The XML element containing the values to parse.
 * @return An object containing the parsed values. If the source was a textvalue, the object is a  {@code String}. If the source was a   {@code <dict>}element, the object is a   {@code Record}. If the source was a  {@code <list>} element, the object is a {@code List} object.
 * @throws Exception on a streaming error.
 */
Object parseValue(XMLEventReader xmlEventReader) throws Exception {
  XMLEvent xmlEvent=xmlEventReader.nextEvent();
  if (xmlEvent.getEventType() == XMLStreamConstants.START_ELEMENT) {
    String type=xmlEvent.asStartElement().getName().getLocalPart();
    if (type.equals(""String_Node_Str""))     return parseDict(xmlEventReader);
 else     if (type.equals(""String_Node_Str""))     return parseList(xmlEventReader);
 else     if (type.equals(""String_Node_Str"")) {
      return parseValue(xmlEventReader);
    }
 else     if (type.equals(""String_Node_Str"")) {
      xmlEvent=xmlEventReader.nextEvent();
      return xmlEvent.asCharacters().getData();
    }
  }
 else   if (xmlEvent.getEventType() == XMLStreamConstants.CHARACTERS) {
    String text=xmlEvent.asCharacters().getData();
    if (text.startsWith(""String_Node_Str"")) {
      XMLEvent xmlEvent2=xmlEventReader.peek();
      if (xmlEvent2.getEventType() == XMLStreamConstants.END_ELEMENT) {
        return text.length() == 0 ? null : text;
      }
      return parseValue(xmlEventReader);
    }
 else {
      return text;
    }
  }
 else {
    xmlEventReader.nextEvent();
  }
  return null;
}","/** 
 * Parses the value content of a dict/key or a list/item element. The value is either text, a   {@code <dict>} element, or a {@code <list>} element.
 * @param xmlEventReader The XML element containing the values to parse.
 * @return An object containing the parsed values. If the source was a textvalue, the object is a  {@code String}. If the source was a   {@code <dict>}element, the object is a   {@code Record}. If the source was a  {@code <list>} element, the object is a {@code List} object.
 * @throws Exception on a streaming error.
 */
Object parseValue(XMLEventReader xmlEventReader) throws Exception {
  XMLEvent xmlEvent=xmlEventReader.nextEvent();
  if (xmlEvent.getEventType() == XMLStreamConstants.START_ELEMENT) {
    String type=xmlEvent.asStartElement().getName().getLocalPart();
    if (type.equals(""String_Node_Str""))     return parseDict(xmlEventReader);
 else     if (type.equals(""String_Node_Str""))     return parseList(xmlEventReader);
 else     if (type.equals(""String_Node_Str"")) {
      return parseValue(xmlEventReader);
    }
 else     if (type.equals(""String_Node_Str"")) {
      xmlEvent=xmlEventReader.nextEvent();
      return xmlEvent.asCharacters().getData();
    }
  }
 else   if (xmlEvent.getEventType() == XMLStreamConstants.CHARACTERS) {
    Characters characters=xmlEvent.asCharacters();
    if (characters.isWhiteSpace())     return parseValue(xmlEventReader);
    return characters.getData();
  }
 else {
    xmlEventReader.nextEvent();
  }
  return null;
}"
16858,"void load(AtomFeed value){
  try {
    super.load(value);
    Constructor ctor=entityClass.getConstructor(new Class[]{Service.class,String.class});
    Object[] args=new Object[2];
    args[0]=service;
    this.entities=new HashMap<String,T>();
    for (    AtomEntry entry : value.entries) {
      args[1]=entry.id;
      T entity=(T)ctor.newInstance(args);
      entity.load(entry);
      this.entities.put(entity.getName(),entity);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage());
  }
}","void load(AtomFeed value){
  try {
    super.load(value);
    Constructor ctor=entityClass.getConstructor(new Class[]{Service.class,String.class});
    Object[] args=new Object[2];
    args[0]=service;
    this.entities=new HashMap<String,T>();
    for (    AtomEntry entry : value.entries) {
      URL url=new URL(entry.id);
      args[1]=url.getPath();
      T entity=(T)ctor.newInstance(args);
      entity.load(entry);
      this.entities.put(entity.getName(),entity);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getMessage());
  }
}"
16859,"public String getVersion(){
  return Value.getString(getContent(),""String_Node_Str"",null);
}","public String getVersion(){
  return getString(""String_Node_Str"",null);
}"
16860,"public Boolean isConfigured(){
  return Value.getBoolean(getContent(),""String_Node_Str"");
}","public boolean isConfigured(){
  return getBoolean(""String_Node_Str"");
}"
16861,"public Boolean isManageable(){
  return Value.getBoolean(getContent(),""String_Node_Str"");
}","public boolean isManageable(){
  return getBoolean(""String_Node_Str"");
}"
16862,"public String getLabel(){
  return Value.getString(getContent(),""String_Node_Str"",""String_Node_Str"");
}","public String getLabel(){
  return getString(""String_Node_Str"",""String_Node_Str"");
}"
16863,"public Boolean getCheckForUpdates(){
  return Value.getBoolean(getContent(),""String_Node_Str"");
}","public boolean getCheckForUpdates(){
  return getBoolean(""String_Node_Str"");
}"
16864,"public Boolean isVisible(){
  return Value.getBoolean(getContent(),""String_Node_Str"");
}","public boolean isVisible(){
  return getBoolean(""String_Node_Str"");
}"
16865,"public Boolean isDisabled(){
  return Value.getBoolean(getContent(),""String_Node_Str"",false);
}","public boolean isDisabled(){
  return Value.getBoolean(getContent(),""String_Node_Str"",false);
}"
16866,"public TwitterProfile(long id,String screenName,String name,String url,String profileImageUrl,String description,String location,Date createdDate){
  this.id=id;
  this.screenName=screenName;
  this.name=name;
  this.url=url;
  this.profileImageUrl=profileImageUrl;
  this.description=description;
  this.location=location;
  this.createdDate=createdDate;
}","public TwitterProfile(long id,String idStr,String screenName,String name,String url,String profileImageUrl,String description,String location,Date createdDate){
  this.id=id;
  this.idStr=idStr;
  this.screenName=screenName;
  this.name=name;
  this.url=url;
  this.profileImageUrl=profileImageUrl;
  this.description=description;
  this.location=location;
  this.createdDate=createdDate;
}"
16867,"@Override public int hashCode(){
  int result=(int)(id ^ (id >>> 32));
  result=31 * result + (screenName != null ? screenName.hashCode() : 0);
  result=31 * result + (name != null ? name.hashCode() : 0);
  result=31 * result + (url != null ? url.hashCode() : 0);
  result=31 * result + (profileImageUrl != null ? profileImageUrl.hashCode() : 0);
  result=31 * result + (description != null ? description.hashCode() : 0);
  result=31 * result + (location != null ? location.hashCode() : 0);
  result=31 * result + (createdDate != null ? createdDate.hashCode() : 0);
  result=31 * result + (language != null ? language.hashCode() : 0);
  result=31 * result + statusesCount;
  result=31 * result + friendsCount;
  result=31 * result + followersCount;
  result=31 * result + favoritesCount;
  result=31 * result + listedCount;
  result=31 * result + (following ? 1 : 0);
  result=31 * result + (followRequestSent ? 1 : 0);
  result=31 * result + (isProtected ? 1 : 0);
  result=31 * result + (notificationsEnabled ? 1 : 0);
  result=31 * result + (verified ? 1 : 0);
  result=31 * result + (geoEnabled ? 1 : 0);
  result=31 * result + (contributorsEnabled ? 1 : 0);
  result=31 * result + (translator ? 1 : 0);
  result=31 * result + (timeZone != null ? timeZone.hashCode() : 0);
  result=31 * result + utcOffset;
  result=31 * result + (sidebarBorderColor != null ? sidebarBorderColor.hashCode() : 0);
  result=31 * result + (sidebarFillColor != null ? sidebarFillColor.hashCode() : 0);
  result=31 * result + (backgroundColor != null ? backgroundColor.hashCode() : 0);
  result=31 * result + (useBackgroundImage ? 1 : 0);
  result=31 * result + (backgroundImageUrl != null ? backgroundImageUrl.hashCode() : 0);
  result=31 * result + (backgroundImageTiled ? 1 : 0);
  result=31 * result + (textColor != null ? textColor.hashCode() : 0);
  result=31 * result + (linkColor != null ? linkColor.hashCode() : 0);
  result=31 * result + (showAllInlineMedia ? 1 : 0);
  return result;
}","@Override public int hashCode(){
  int result=(int)(id ^ (id >>> 32));
  result=31 * result + (idStr != null ? idStr.hashCode() : 0);
  result=31 * result + (screenName != null ? screenName.hashCode() : 0);
  result=31 * result + (name != null ? name.hashCode() : 0);
  result=31 * result + (url != null ? url.hashCode() : 0);
  result=31 * result + (profileImageUrl != null ? profileImageUrl.hashCode() : 0);
  result=31 * result + (description != null ? description.hashCode() : 0);
  result=31 * result + (location != null ? location.hashCode() : 0);
  result=31 * result + (createdDate != null ? createdDate.hashCode() : 0);
  result=31 * result + (language != null ? language.hashCode() : 0);
  result=31 * result + statusesCount;
  result=31 * result + friendsCount;
  result=31 * result + followersCount;
  result=31 * result + favoritesCount;
  result=31 * result + listedCount;
  result=31 * result + (following ? 1 : 0);
  result=31 * result + (followRequestSent ? 1 : 0);
  result=31 * result + (isProtected ? 1 : 0);
  result=31 * result + (notificationsEnabled ? 1 : 0);
  result=31 * result + (verified ? 1 : 0);
  result=31 * result + (geoEnabled ? 1 : 0);
  result=31 * result + (contributorsEnabled ? 1 : 0);
  result=31 * result + (translator ? 1 : 0);
  result=31 * result + (timeZone != null ? timeZone.hashCode() : 0);
  result=31 * result + utcOffset;
  result=31 * result + (sidebarBorderColor != null ? sidebarBorderColor.hashCode() : 0);
  result=31 * result + (sidebarFillColor != null ? sidebarFillColor.hashCode() : 0);
  result=31 * result + (backgroundColor != null ? backgroundColor.hashCode() : 0);
  result=31 * result + (useBackgroundImage ? 1 : 0);
  result=31 * result + (backgroundImageUrl != null ? backgroundImageUrl.hashCode() : 0);
  result=31 * result + (backgroundImageTiled ? 1 : 0);
  result=31 * result + (textColor != null ? textColor.hashCode() : 0);
  result=31 * result + (linkColor != null ? linkColor.hashCode() : 0);
  result=31 * result + (showAllInlineMedia ? 1 : 0);
  return result;
}"
16868,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  TwitterProfile that=(TwitterProfile)o;
  if (backgroundImageTiled != that.backgroundImageTiled) {
    return false;
  }
  if (contributorsEnabled != that.contributorsEnabled) {
    return false;
  }
  if (favoritesCount != that.favoritesCount) {
    return false;
  }
  if (followRequestSent != that.followRequestSent) {
    return false;
  }
  if (followersCount != that.followersCount) {
    return false;
  }
  if (following != that.following) {
    return false;
  }
  if (friendsCount != that.friendsCount) {
    return false;
  }
  if (geoEnabled != that.geoEnabled) {
    return false;
  }
  if (id != that.id) {
    return false;
  }
  if (isProtected != that.isProtected) {
    return false;
  }
  if (listedCount != that.listedCount) {
    return false;
  }
  if (notificationsEnabled != that.notificationsEnabled) {
    return false;
  }
  if (showAllInlineMedia != that.showAllInlineMedia) {
    return false;
  }
  if (statusesCount != that.statusesCount) {
    return false;
  }
  if (translator != that.translator) {
    return false;
  }
  if (useBackgroundImage != that.useBackgroundImage) {
    return false;
  }
  if (utcOffset != that.utcOffset) {
    return false;
  }
  if (verified != that.verified) {
    return false;
  }
  if (backgroundColor != null ? !backgroundColor.equals(that.backgroundColor) : that.backgroundColor != null) {
    return false;
  }
  if (backgroundImageUrl != null ? !backgroundImageUrl.equals(that.backgroundImageUrl) : that.backgroundImageUrl != null) {
    return false;
  }
  if (createdDate != null ? !createdDate.equals(that.createdDate) : that.createdDate != null) {
    return false;
  }
  if (description != null ? !description.equals(that.description) : that.description != null) {
    return false;
  }
  if (language != null ? !language.equals(that.language) : that.language != null) {
    return false;
  }
  if (linkColor != null ? !linkColor.equals(that.linkColor) : that.linkColor != null) {
    return false;
  }
  if (location != null ? !location.equals(that.location) : that.location != null) {
    return false;
  }
  if (name != null ? !name.equals(that.name) : that.name != null) {
    return false;
  }
  if (profileImageUrl != null ? !profileImageUrl.equals(that.profileImageUrl) : that.profileImageUrl != null) {
    return false;
  }
  if (screenName != null ? !screenName.equals(that.screenName) : that.screenName != null) {
    return false;
  }
  if (sidebarBorderColor != null ? !sidebarBorderColor.equals(that.sidebarBorderColor) : that.sidebarBorderColor != null) {
    return false;
  }
  if (sidebarFillColor != null ? !sidebarFillColor.equals(that.sidebarFillColor) : that.sidebarFillColor != null) {
    return false;
  }
  if (textColor != null ? !textColor.equals(that.textColor) : that.textColor != null) {
    return false;
  }
  if (timeZone != null ? !timeZone.equals(that.timeZone) : that.timeZone != null) {
    return false;
  }
  if (url != null ? !url.equals(that.url) : that.url != null) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  TwitterProfile that=(TwitterProfile)o;
  if (backgroundImageTiled != that.backgroundImageTiled) {
    return false;
  }
  if (contributorsEnabled != that.contributorsEnabled) {
    return false;
  }
  if (favoritesCount != that.favoritesCount) {
    return false;
  }
  if (followRequestSent != that.followRequestSent) {
    return false;
  }
  if (followersCount != that.followersCount) {
    return false;
  }
  if (following != that.following) {
    return false;
  }
  if (friendsCount != that.friendsCount) {
    return false;
  }
  if (geoEnabled != that.geoEnabled) {
    return false;
  }
  if (id != that.id) {
    return false;
  }
  if (isProtected != that.isProtected) {
    return false;
  }
  if (listedCount != that.listedCount) {
    return false;
  }
  if (notificationsEnabled != that.notificationsEnabled) {
    return false;
  }
  if (showAllInlineMedia != that.showAllInlineMedia) {
    return false;
  }
  if (statusesCount != that.statusesCount) {
    return false;
  }
  if (translator != that.translator) {
    return false;
  }
  if (useBackgroundImage != that.useBackgroundImage) {
    return false;
  }
  if (utcOffset != that.utcOffset) {
    return false;
  }
  if (verified != that.verified) {
    return false;
  }
  if (idStr != null ? !idStr.equals(that.idStr) : that.idStr != null) {
    return false;
  }
  if (backgroundColor != null ? !backgroundColor.equals(that.backgroundColor) : that.backgroundColor != null) {
    return false;
  }
  if (backgroundImageUrl != null ? !backgroundImageUrl.equals(that.backgroundImageUrl) : that.backgroundImageUrl != null) {
    return false;
  }
  if (createdDate != null ? !createdDate.equals(that.createdDate) : that.createdDate != null) {
    return false;
  }
  if (description != null ? !description.equals(that.description) : that.description != null) {
    return false;
  }
  if (language != null ? !language.equals(that.language) : that.language != null) {
    return false;
  }
  if (linkColor != null ? !linkColor.equals(that.linkColor) : that.linkColor != null) {
    return false;
  }
  if (location != null ? !location.equals(that.location) : that.location != null) {
    return false;
  }
  if (name != null ? !name.equals(that.name) : that.name != null) {
    return false;
  }
  if (profileImageUrl != null ? !profileImageUrl.equals(that.profileImageUrl) : that.profileImageUrl != null) {
    return false;
  }
  if (screenName != null ? !screenName.equals(that.screenName) : that.screenName != null) {
    return false;
  }
  if (sidebarBorderColor != null ? !sidebarBorderColor.equals(that.sidebarBorderColor) : that.sidebarBorderColor != null) {
    return false;
  }
  if (sidebarFillColor != null ? !sidebarFillColor.equals(that.sidebarFillColor) : that.sidebarFillColor != null) {
    return false;
  }
  if (textColor != null ? !textColor.equals(that.textColor) : that.textColor != null) {
    return false;
  }
  if (timeZone != null ? !timeZone.equals(that.timeZone) : that.timeZone != null) {
    return false;
  }
  if (url != null ? !url.equals(that.url) : that.url != null) {
    return false;
  }
  return true;
}"
16869,"@Test public void getUserProfile_userId() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile(12345);
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}","@Test public void getUserProfile_userId() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile(12345);
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getIdStr());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}"
16870,"@Test public void getUserProfile() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile();
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
  assertTrue(profile.isNotificationsEnabled());
  assertFalse(profile.isVerified());
  assertTrue(profile.isGeoEnabled());
  assertTrue(profile.isContributorsEnabled());
  assertTrue(profile.isTranslator());
  assertTrue(profile.isFollowing());
  assertTrue(profile.isFollowRequestSent());
  assertTrue(profile.isProtected());
  assertEquals(""String_Node_Str"",profile.getLanguage());
  assertEquals(125,profile.getStatusesCount());
  assertEquals(1001,profile.getListedCount());
  assertEquals(14,profile.getFollowersCount());
  assertEquals(194,profile.getFriendsCount());
  assertEquals(4,profile.getFavoritesCount());
  assertEquals(""String_Node_Str"",profile.getTimeZone());
  assertEquals(-25200,profile.getUtcOffset());
  assertTrue(profile.useBackgroundImage());
  assertEquals(""String_Node_Str"",profile.getSidebarBorderColor());
  assertEquals(""String_Node_Str"",profile.getSidebarFillColor());
  assertEquals(""String_Node_Str"",profile.getBackgroundColor());
  assertEquals(""String_Node_Str"",profile.getBackgroundImageUrl());
  assertFalse(profile.isBackgroundImageTiled());
  assertEquals(""String_Node_Str"",profile.getTextColor());
  assertEquals(""String_Node_Str"",profile.getLinkColor());
}","@Test public void getUserProfile() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile();
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getIdStr());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
  assertTrue(profile.isNotificationsEnabled());
  assertFalse(profile.isVerified());
  assertTrue(profile.isGeoEnabled());
  assertTrue(profile.isContributorsEnabled());
  assertTrue(profile.isTranslator());
  assertTrue(profile.isFollowing());
  assertTrue(profile.isFollowRequestSent());
  assertTrue(profile.isProtected());
  assertEquals(""String_Node_Str"",profile.getLanguage());
  assertEquals(125,profile.getStatusesCount());
  assertEquals(1001,profile.getListedCount());
  assertEquals(14,profile.getFollowersCount());
  assertEquals(194,profile.getFriendsCount());
  assertEquals(4,profile.getFavoritesCount());
  assertEquals(""String_Node_Str"",profile.getTimeZone());
  assertEquals(-25200,profile.getUtcOffset());
  assertTrue(profile.useBackgroundImage());
  assertEquals(""String_Node_Str"",profile.getSidebarBorderColor());
  assertEquals(""String_Node_Str"",profile.getSidebarFillColor());
  assertEquals(""String_Node_Str"",profile.getBackgroundColor());
  assertEquals(""String_Node_Str"",profile.getBackgroundImageUrl());
  assertFalse(profile.isBackgroundImageTiled());
  assertEquals(""String_Node_Str"",profile.getTextColor());
  assertEquals(""String_Node_Str"",profile.getLinkColor());
}"
16871,"@Test public void getUserProfile_userId_appAuthorization() throws Exception {
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=appAuthTwitter.userOperations().getUserProfile(12345);
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}","@Test public void getUserProfile_userId_appAuthorization() throws Exception {
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=appAuthTwitter.userOperations().getUserProfile(12345);
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getIdStr());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}"
16872,"@Test public void getUserProfile_screenName() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile(""String_Node_Str"");
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}","@Test public void getUserProfile_screenName() throws Exception {
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=twitter.userOperations().getUserProfile(""String_Node_Str"");
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getIdStr());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}"
16873,"@Test public void getUserProfile_screenName_appAuthorization() throws Exception {
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=appAuthTwitter.userOperations().getUserProfile(""String_Node_Str"");
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}","@Test public void getUserProfile_screenName_appAuthorization() throws Exception {
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  TwitterProfile profile=appAuthTwitter.userOperations().getUserProfile(""String_Node_Str"");
  assertEquals(161064614,profile.getId());
  assertEquals(""String_Node_Str"",profile.getIdStr());
  assertEquals(""String_Node_Str"",profile.getScreenName());
  assertEquals(""String_Node_Str"",profile.getName());
  assertEquals(""String_Node_Str"",profile.getDescription());
  assertEquals(""String_Node_Str"",profile.getLocation());
  assertEquals(""String_Node_Str"",profile.getUrl());
  assertEquals(""String_Node_Str"",profile.getProfileImageUrl());
}"
16874,"/** 
 * Constructs a Tweet
 * @param id The tweet's ID
 * @param idStr The tweet's ID as a String
 * @param text The tweet's text
 * @param createdAt Date Tweet was created
 * @param fromUser The username of the author of the tweet.
 * @param profileImageUrl The URL to the profile picture of the tweet's author.
 * @param toUserId The user ID of the user to whom the tweet is targeted.
 * @param fromUserId The user ID of the tweet's author.
 * @param languageCode The language code
 * @param source The source of the tweet.
 * @deprecated Use other constructor with String ID instead.
 */
public Tweet(long id,String idStr,String text,Date createdAt,String fromUser,String profileImageUrl,Long toUserId,long fromUserId,String languageCode,String source){
  this.id=id;
  this.idStr=idStr;
  this.text=text;
  this.createdAt=createdAt;
  this.fromUser=fromUser;
  this.profileImageUrl=profileImageUrl;
  this.toUserId=toUserId;
  this.fromUserId=fromUserId;
  this.languageCode=languageCode;
  this.source=source;
}","public Tweet(String id,String text,Date createdAt,String fromUser,String profileImageUrl,Long toUserId,long fromUserId,String languageCode,String source){
  this.id=id;
  this.text=text;
  this.createdAt=createdAt;
  this.fromUser=fromUser;
  this.profileImageUrl=profileImageUrl;
  this.toUserId=toUserId;
  this.fromUserId=fromUserId;
  this.languageCode=languageCode;
  this.source=source;
}"
16875,"public long getId(){
  return id;
}","public String getId(){
  return id;
}"
16876,"@Override public int hashCode(){
  int result=(int)(id ^ (id >>> 32));
  result=31 * result + (idStr != null ? idStr.hashCode() : 0);
  result=31 * result + (text != null ? text.hashCode() : 0);
  result=31 * result + (createdAt != null ? createdAt.hashCode() : 0);
  result=31 * result + (fromUser != null ? fromUser.hashCode() : 0);
  result=31 * result + (profileImageUrl != null ? profileImageUrl.hashCode() : 0);
  result=31 * result + (toUserId != null ? toUserId.hashCode() : 0);
  result=31 * result + (inReplyToStatusId != null ? inReplyToStatusId.hashCode() : 0);
  result=31 * result + (inReplyToUserId != null ? inReplyToUserId.hashCode() : 0);
  result=31 * result + (inReplyToScreenName != null ? inReplyToScreenName.hashCode() : 0);
  result=31 * result + (int)(fromUserId ^ (fromUserId >>> 32));
  result=31 * result + (languageCode != null ? languageCode.hashCode() : 0);
  result=31 * result + (source != null ? source.hashCode() : 0);
  result=31 * result + (retweetCount != null ? retweetCount.hashCode() : 0);
  result=31 * result + (retweeted ? 1 : 0);
  result=31 * result + (retweetedStatus != null ? retweetedStatus.hashCode() : 0);
  result=31 * result + (entities != null ? entities.hashCode() : 0);
  result=31 * result + (user != null ? user.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=(id != null ? id.hashCode() : 0);
  result=31 * result + (text != null ? text.hashCode() : 0);
  result=31 * result + (createdAt != null ? createdAt.hashCode() : 0);
  result=31 * result + (fromUser != null ? fromUser.hashCode() : 0);
  result=31 * result + (profileImageUrl != null ? profileImageUrl.hashCode() : 0);
  result=31 * result + (toUserId != null ? toUserId.hashCode() : 0);
  result=31 * result + (inReplyToStatusId != null ? inReplyToStatusId.hashCode() : 0);
  result=31 * result + (inReplyToUserId != null ? inReplyToUserId.hashCode() : 0);
  result=31 * result + (inReplyToScreenName != null ? inReplyToScreenName.hashCode() : 0);
  result=31 * result + (int)(fromUserId ^ (fromUserId >>> 32));
  result=31 * result + (languageCode != null ? languageCode.hashCode() : 0);
  result=31 * result + (source != null ? source.hashCode() : 0);
  result=31 * result + (retweetCount != null ? retweetCount.hashCode() : 0);
  result=31 * result + (retweeted ? 1 : 0);
  result=31 * result + (retweetedStatus != null ? retweetedStatus.hashCode() : 0);
  result=31 * result + (entities != null ? entities.hashCode() : 0);
  result=31 * result + (user != null ? user.hashCode() : 0);
  return result;
}"
16877,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Tweet tweet=(Tweet)o;
  if (fromUserId != tweet.fromUserId) {
    return false;
  }
  if (id != tweet.id) {
    return false;
  }
  if (idStr != null ? !idStr.equals(tweet.idStr) : tweet.idStr != null) {
    return false;
  }
  if (retweeted != tweet.retweeted) {
    return false;
  }
  if (createdAt != null ? !createdAt.equals(tweet.createdAt) : tweet.createdAt != null) {
    return false;
  }
  if (entities != null ? !entities.equals(tweet.entities) : tweet.entities != null) {
    return false;
  }
  if (fromUser != null ? !fromUser.equals(tweet.fromUser) : tweet.fromUser != null) {
    return false;
  }
  if (inReplyToScreenName != null ? !inReplyToScreenName.equals(tweet.inReplyToScreenName) : tweet.inReplyToScreenName != null) {
    return false;
  }
  if (inReplyToStatusId != null ? !inReplyToStatusId.equals(tweet.inReplyToStatusId) : tweet.inReplyToStatusId != null) {
    return false;
  }
  if (inReplyToUserId != null ? !inReplyToUserId.equals(tweet.inReplyToUserId) : tweet.inReplyToUserId != null) {
    return false;
  }
  if (languageCode != null ? !languageCode.equals(tweet.languageCode) : tweet.languageCode != null) {
    return false;
  }
  if (profileImageUrl != null ? !profileImageUrl.equals(tweet.profileImageUrl) : tweet.profileImageUrl != null) {
    return false;
  }
  if (retweetCount != null ? !retweetCount.equals(tweet.retweetCount) : tweet.retweetCount != null) {
    return false;
  }
  if (retweetedStatus != null ? !retweetedStatus.equals(tweet.retweetedStatus) : tweet.retweetedStatus != null) {
    return false;
  }
  if (source != null ? !source.equals(tweet.source) : tweet.source != null) {
    return false;
  }
  if (text != null ? !text.equals(tweet.text) : tweet.text != null) {
    return false;
  }
  if (toUserId != null ? !toUserId.equals(tweet.toUserId) : tweet.toUserId != null) {
    return false;
  }
  if (user != null ? !user.equals(tweet.user) : tweet.user != null) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Tweet tweet=(Tweet)o;
  if (fromUserId != tweet.fromUserId) {
    return false;
  }
  if (id != tweet.id) {
    return false;
  }
  if (retweeted != tweet.retweeted) {
    return false;
  }
  if (createdAt != null ? !createdAt.equals(tweet.createdAt) : tweet.createdAt != null) {
    return false;
  }
  if (entities != null ? !entities.equals(tweet.entities) : tweet.entities != null) {
    return false;
  }
  if (fromUser != null ? !fromUser.equals(tweet.fromUser) : tweet.fromUser != null) {
    return false;
  }
  if (inReplyToScreenName != null ? !inReplyToScreenName.equals(tweet.inReplyToScreenName) : tweet.inReplyToScreenName != null) {
    return false;
  }
  if (inReplyToStatusId != null ? !inReplyToStatusId.equals(tweet.inReplyToStatusId) : tweet.inReplyToStatusId != null) {
    return false;
  }
  if (inReplyToUserId != null ? !inReplyToUserId.equals(tweet.inReplyToUserId) : tweet.inReplyToUserId != null) {
    return false;
  }
  if (languageCode != null ? !languageCode.equals(tweet.languageCode) : tweet.languageCode != null) {
    return false;
  }
  if (profileImageUrl != null ? !profileImageUrl.equals(tweet.profileImageUrl) : tweet.profileImageUrl != null) {
    return false;
  }
  if (retweetCount != null ? !retweetCount.equals(tweet.retweetCount) : tweet.retweetCount != null) {
    return false;
  }
  if (retweetedStatus != null ? !retweetedStatus.equals(tweet.retweetedStatus) : tweet.retweetedStatus != null) {
    return false;
  }
  if (source != null ? !source.equals(tweet.source) : tweet.source != null) {
    return false;
  }
  if (text != null ? !text.equals(tweet.text) : tweet.text != null) {
    return false;
  }
  if (toUserId != null ? !toUserId.equals(tweet.toUserId) : tweet.toUserId != null) {
    return false;
  }
  if (user != null ? !user.equals(tweet.user) : tweet.user != null) {
    return false;
  }
  return true;
}"
16878,"/** 
 * The URL to the banner image shown on the user's Twitter profile page
 */
public String getProfileBannerUrl(){
  return profileBannerUrl;
}","/** 
 * The URL to the banner image shown on the user's Twitter profile page
 * @return The URL to the banner image shown on the user's Twitter profile page
 */
public String getProfileBannerUrl(){
  return profileBannerUrl;
}"
16879,"/** 
 * Retrieves a list of Twitter profiles for the given list of screen names. Supports either user or application authorization.
 * @return a list of Twitter profiles
 * @throws ApiException if there is an error while communicating with Twitter.
 * @throws MissingAuthorizationException if TwitterTemplate was not created with OAuth credentials or an application access token.
 */
List<TwitterProfile> getUsers(String... screenNames);","/** 
 * Retrieves a list of Twitter profiles for the given list of screen names. Supports either user or application authorization.
 * @param screenNames The screen names to retrieve profiles for
 * @return a list of Twitter profiles
 * @throws ApiException if there is an error while communicating with Twitter.
 * @throws MissingAuthorizationException if TwitterTemplate was not created with OAuth credentials or an application access token.
 */
List<TwitterProfile> getUsers(String... screenNames);"
16880,"/** 
 * Searches for users that match a given query.
 * @param page the page of search results to return
 * @param pageSize the number of {@link TwitterProfile}s per page. Maximum of 20 per page.
 * @return a list of Twitter profiles
 * @throws ApiException if there is an error while communicating with Twitter.
 * @throws MissingAuthorizationException if TwitterTemplate was not created with OAuth credentials.
 */
List<TwitterProfile> searchForUsers(String query,int page,int pageSize);","/** 
 * Searches for users that match a given query.
 * @param query The search query
 * @param page the page of search results to return
 * @param pageSize the number of {@link TwitterProfile}s per page. Maximum of 20 per page.
 * @return a list of Twitter profiles
 * @throws ApiException if there is an error while communicating with Twitter.
 * @throws MissingAuthorizationException if TwitterTemplate was not created with OAuth credentials.
 */
List<TwitterProfile> searchForUsers(String query,int page,int pageSize);"
16881,"@Override public LocalTrendsHolder deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  JsonNode node=jp.readValueAs(JsonNode.class);
  Iterator<JsonNode> dayIt=node.iterator();
  if (dayIt.hasNext()) {
    JsonNode day=dayIt.next();
    Date createdAt=toDate(day.get(""String_Node_Str"").asText());
    JsonNode trendNodes=day.get(""String_Node_Str"");
    List<Trend> trends=new ArrayList<Trend>();
    for (Iterator<JsonNode> trendsIt=trendNodes.iterator(); trendsIt.hasNext(); ) {
      JsonNode trendNode=trendsIt.next();
      trends.add(new Trend(trendNode.get(""String_Node_Str"").asText(),trendNode.get(""String_Node_Str"").asText()));
    }
    jp.skipChildren();
    return new LocalTrendsHolder(new Trends(createdAt,trends));
  }
  throw ctxt.mappingException(LocalTrendsHolder.class);
}","@Override public LocalTrendsHolder deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  JsonNode node=jp.readValueAs(JsonNode.class);
  Iterator<JsonNode> dayIt=node.iterator();
  if (dayIt.hasNext()) {
    JsonNode day=dayIt.next();
    Date createdAt=toDate(day.get(""String_Node_Str"").asText());
    JsonNode trendNodes=day.get(""String_Node_Str"");
    List<Trend> trends=new ArrayList<Trend>();
    for (Iterator<JsonNode> trendsIt=trendNodes.iterator(); trendsIt.hasNext(); ) {
      JsonNode trendNode=trendsIt.next();
      trends.add(new Trend(trendNode.get(""String_Node_Str"").asText(),trendNode.get(""String_Node_Str"").asText()));
    }
    jp.skipChildren();
    return new LocalTrendsHolder(new Trends(createdAt,trends));
  }
  throw new JsonMappingException(jp,""String_Node_Str"" + LocalTrendsHolder.class.getName());
}"
16882,"@SuppressWarnings(""String_Node_Str"") @Override public List<Place> deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.registerModule(new TwitterModule());
  jp.setCodec(mapper);
  JsonNode treeNode=(JsonNode)jp.readValueAs(JsonNode.class).get(""String_Node_Str"");
  return (List<Place>)mapper.reader(new TypeReference<List<Place>>(){
  }
).readValue(treeNode);
}","@SuppressWarnings(""String_Node_Str"") @Override public List<Place> deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.registerModule(new TwitterModule());
  jp.setCodec(mapper);
  JsonNode treeNode=jp.readValueAs(JsonNode.class).get(""String_Node_Str"");
  return (List<Place>)mapper.readerFor(new TypeReference<List<Place>>(){
  }
).readValue(treeNode);
}"
16883,"@Override public SimilarPlacesResponse deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.registerModule(new TwitterModule());
  jp.setCodec(mapper);
  JsonNode node=jp.readValueAs(JsonNode.class);
  JsonNode resultNode=node.get(""String_Node_Str"");
  String token=resultNode.get(""String_Node_Str"").textValue();
  JsonNode placesNode=resultNode.get(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<Place> places=(List<Place>)mapper.reader(new TypeReference<List<Place>>(){
  }
).readValue(placesNode);
  return new SimilarPlacesResponse(places,token);
}","@Override public SimilarPlacesResponse deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.registerModule(new TwitterModule());
  jp.setCodec(mapper);
  JsonNode node=jp.readValueAs(JsonNode.class);
  JsonNode resultNode=node.get(""String_Node_Str"");
  String token=resultNode.get(""String_Node_Str"").textValue();
  JsonNode placesNode=resultNode.get(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<Place> places=(List<Place>)mapper.readerFor(new TypeReference<List<Place>>(){
  }
).readValue(placesNode);
  return new SimilarPlacesResponse(places,token);
}"
16884,"private void handleTweet(String line) throws IOException {
  final Tweet tweet=objectMapper.readValue(line,Tweet.class);
  for (  final StreamListener listener : listeners) {
    Future<?> result=pool.submit((new Runnable(){
      public void run(){
        listener.onTweet(tweet);
      }
    }
));
  }
}","private void handleTweet(String line) throws IOException {
  final Tweet tweet=objectMapper.readValue(line,Tweet.class);
  for (  final StreamListener listener : listeners) {
    pool.submit((new Runnable(){
      public void run(){
        listener.onTweet(tweet);
      }
    }
));
  }
}"
16885,"private void handleLimit(String line) throws IOException {
  final TrackLimitEvent limitEvent=objectMapper.readValue(line,TrackLimitEvent.class);
  for (  final StreamListener listener : listeners) {
    Future<?> result=pool.submit((new Runnable(){
      public void run(){
        listener.onLimit(limitEvent.getNumberOfLimitedTweets());
      }
    }
));
  }
}","private void handleLimit(String line) throws IOException {
  final TrackLimitEvent limitEvent=objectMapper.readValue(line,TrackLimitEvent.class);
  for (  final StreamListener listener : listeners) {
    pool.submit((new Runnable(){
      public void run(){
        listener.onLimit(limitEvent.getNumberOfLimitedTweets());
      }
    }
));
  }
}"
16886,"private void handleWarning(String line) throws IOException {
  final StreamWarningEvent warningEvent=objectMapper.readValue(line,StreamWarningEvent.class);
  for (  final StreamListener listener : listeners) {
    Future<?> result=pool.submit((new Runnable(){
      public void run(){
        listener.onWarning(warningEvent);
      }
    }
));
  }
}","private void handleWarning(String line) throws IOException {
  final StreamWarningEvent warningEvent=objectMapper.readValue(line,StreamWarningEvent.class);
  for (  final StreamListener listener : listeners) {
    pool.submit((new Runnable(){
      public void run(){
        listener.onWarning(warningEvent);
      }
    }
));
  }
}"
16887,"public StreamDispatcher(Queue<String> queue,List<StreamListener> listeners){
  this.queue=queue;
  this.listeners=listeners;
  pool=Executors.newCachedThreadPool();
  objectMapper=new ObjectMapper();
  objectMapper.addMixInAnnotations(Tweet.class,TweetMixin.class);
  objectMapper.addMixInAnnotations(StreamDeleteEvent.class,StreamDeleteEventMixin.class);
  objectMapper.addMixInAnnotations(StreamWarningEvent.class,StreamWarningEventMixin.class);
  active=new AtomicBoolean(true);
}","public StreamDispatcher(Queue<String> queue,List<StreamListener> listeners){
  this.queue=queue;
  this.listeners=listeners;
  pool=Executors.newCachedThreadPool();
  objectMapper=new ObjectMapper();
  objectMapper.addMixIn(Tweet.class,TweetMixin.class);
  objectMapper.addMixIn(StreamDeleteEvent.class,StreamDeleteEventMixin.class);
  objectMapper.addMixIn(StreamWarningEvent.class,StreamWarningEventMixin.class);
  active=new AtomicBoolean(true);
}"
16888,"private void handleDelete(String line) throws IOException {
  final StreamDeleteEvent deleteEvent=objectMapper.readValue(line,StreamDeleteEvent.class);
  for (  final StreamListener listener : listeners) {
    Future<?> result=pool.submit((new Runnable(){
      public void run(){
        listener.onDelete(deleteEvent);
      }
    }
));
  }
}","private void handleDelete(String line) throws IOException {
  final StreamDeleteEvent deleteEvent=objectMapper.readValue(line,StreamDeleteEvent.class);
  for (  final StreamListener listener : listeners) {
    pool.submit((new Runnable(){
      public void run(){
        listener.onDelete(deleteEvent);
      }
    }
));
  }
}"
16889,"private void handleClientErrors(ClientHttpResponse response) throws IOException {
  HttpStatus statusCode=response.getStatusCode();
  Map<String,Object> errorMap=extractErrorDetailsFromResponse(response);
  String errorText=""String_Node_Str"";
  if (errorMap.containsKey(""String_Node_Str"")) {
    errorText=(String)errorMap.get(""String_Node_Str"");
  }
 else   if (errorMap.containsKey(""String_Node_Str"")) {
    Object errors=errorMap.get(""String_Node_Str"");
    if (errors instanceof List) {
      @SuppressWarnings(""String_Node_Str"") List<Map<String,String>> errorsList=(List<Map<String,String>>)errors;
      errorText=errorsList.get(0).get(""String_Node_Str"");
    }
 else     if (errors instanceof String) {
      errorText=(String)errors;
    }
  }
  if (statusCode == HttpStatus.BAD_REQUEST) {
    if (errorText.contains(""String_Node_Str"")) {
      throw new RateLimitExceededException(""String_Node_Str"");
    }
  }
 else   if (statusCode == HttpStatus.UNAUTHORIZED) {
    if (errorText == null) {
      throw new NotAuthorizedException(""String_Node_Str"",response.getStatusText());
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new MissingAuthorizationException(""String_Node_Str"");
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new RevokedAuthorizationException(""String_Node_Str"");
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new InvalidAuthorizationException(""String_Node_Str"",errorText);
    }
 else {
      throw new NotAuthorizedException(""String_Node_Str"",errorText);
    }
  }
 else   if (statusCode == HttpStatus.FORBIDDEN) {
    if (errorText.equals(DUPLICATE_STATUS_TEXT) || errorText.contains(""String_Node_Str"")) {
      throw new DuplicateStatusException(""String_Node_Str"",errorText);
    }
 else     if (errorText.equals(STATUS_TOO_LONG_TEXT) || errorText.contains(MESSAGE_TOO_LONG_TEXT)) {
      throw new MessageTooLongException(errorText);
    }
 else     if (errorText.equals(INVALID_MESSAGE_RECIPIENT_TEXT)) {
      throw new InvalidMessageRecipientException(errorText);
    }
 else     if (errorText.equals(DAILY_RATE_LIMIT_TEXT)) {
      throw new RateLimitExceededException(""String_Node_Str"");
    }
 else {
      throw new OperationNotPermittedException(""String_Node_Str"",errorText);
    }
  }
 else   if (statusCode == HttpStatus.NOT_FOUND) {
    throw new ResourceNotFoundException(""String_Node_Str"",errorText);
  }
 else   if (statusCode == HttpStatus.valueOf(ENHANCE_YOUR_CALM)) {
    throw new RateLimitExceededException(""String_Node_Str"");
  }
}","private void handleClientErrors(ClientHttpResponse response) throws IOException {
  HttpStatus statusCode=response.getStatusCode();
  Map<String,Object> errorMap=extractErrorDetailsFromResponse(response);
  String errorText=""String_Node_Str"";
  if (errorMap.containsKey(""String_Node_Str"")) {
    errorText=(String)errorMap.get(""String_Node_Str"");
  }
 else   if (errorMap.containsKey(""String_Node_Str"")) {
    Object errors=errorMap.get(""String_Node_Str"");
    if (errors instanceof List) {
      @SuppressWarnings(""String_Node_Str"") List<Map<String,String>> errorsList=(List<Map<String,String>>)errors;
      errorText=errorsList.get(0).get(""String_Node_Str"");
    }
 else     if (errors instanceof String) {
      errorText=(String)errors;
    }
  }
  if (statusCode == HttpStatus.BAD_REQUEST) {
    if (errorText.contains(""String_Node_Str"")) {
      throw new RateLimitExceededException(""String_Node_Str"");
    }
  }
 else   if (statusCode == HttpStatus.UNAUTHORIZED) {
    if (errorText == null) {
      throw new NotAuthorizedException(""String_Node_Str"",response.getStatusText());
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new MissingAuthorizationException(""String_Node_Str"");
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new RevokedAuthorizationException(""String_Node_Str"");
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new InvalidAuthorizationException(""String_Node_Str"",errorText);
    }
 else {
      throw new NotAuthorizedException(""String_Node_Str"",errorText);
    }
  }
 else   if (statusCode == HttpStatus.FORBIDDEN) {
    if (errorText.equals(DUPLICATE_STATUS_TEXT) || errorText.contains(""String_Node_Str"")) {
      throw new DuplicateStatusException(""String_Node_Str"",errorText);
    }
 else     if (errorText.equals(STATUS_TOO_LONG_TEXT) || errorText.contains(MESSAGE_TOO_LONG_TEXT)) {
      throw new MessageTooLongException(errorText);
    }
 else     if (errorText.equals(INVALID_MESSAGE_RECIPIENT_TEXT)) {
      throw new InvalidMessageRecipientException(errorText);
    }
 else     if (errorText.equals(DAILY_RATE_LIMIT_TEXT)) {
      throw new RateLimitExceededException(""String_Node_Str"");
    }
 else {
      throw new OperationNotPermittedException(""String_Node_Str"",errorText);
    }
  }
 else   if (statusCode == HttpStatus.NOT_FOUND) {
    throw new ResourceNotFoundException(""String_Node_Str"",errorText);
  }
 else   if (statusCode == HttpStatus.valueOf(ENHANCE_YOUR_CALM) || statusCode == HttpStatus.valueOf(TOO_MANY_REQUESTS)) {
    throw new RateLimitExceededException(""String_Node_Str"");
  }
}"
16890,"public SearchMetadata(int max_id,long since_id){
  this.max_id=max_id;
  this.since_id=since_id;
}","public SearchMetadata(long max_id,long since_id){
  this.max_id=max_id;
  this.since_id=since_id;
}"
16891,"@Override public SearchMetadata deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  JsonNode node=jp.readValueAs(JsonNode.class);
  int max_id=node.get(""String_Node_Str"").asInt();
  long since_id=node.get(""String_Node_Str"").asLong();
  return new SearchMetadata(max_id,since_id);
}","@Override public SearchMetadata deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  JsonNode node=jp.readValueAs(JsonNode.class);
  long max_id=node.get(""String_Node_Str"").asLong();
  long since_id=node.get(""String_Node_Str"").asLong();
  return new SearchMetadata(max_id,since_id);
}"
16892,"@Test public void search_pageAndResultsPerPage(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"",10);
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_pageAndResultsPerPage(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"",10);
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16893,"@Test public void search_sinceAndMaxId_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"",10,123,54321);
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_sinceAndMaxId_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"",10,123,54321);
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16894,"@Test public void search_queryOnly_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"");
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_queryOnly_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"");
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16895,"@Test public void search_sinceAndMaxId(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"",10,123,54321);
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_sinceAndMaxId(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"",10,123,54321);
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16896,"@Test public void search_pageAndResultsPerPage_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"",10);
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_pageAndResultsPerPage_appAuthorization(){
  appAuthMockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andExpect(header(""String_Node_Str"",""String_Node_Str"")).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=appAuthTwitter.searchOperations().search(""String_Node_Str"",10);
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16897,"@Test public void search_queryOnly(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"");
  assertEquals(10,searchResults.getSearchMetadata().getSince_id());
  assertEquals(999,searchResults.getSearchMetadata().getMax_id());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}","@Test public void search_queryOnly(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  SearchResults searchResults=twitter.searchOperations().search(""String_Node_Str"");
  assertEquals(10,searchResults.getSearchMetadata().getSinceId());
  assertEquals(999,searchResults.getSearchMetadata().getMaxId());
  List<Tweet> tweets=searchResults.getTweets();
  assertSearchTweets(tweets);
}"
16898,"public SearchResults search(String query,int page,int resultsPerPage,long sinceId,long maxId){
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",query);
  parameters.put(""String_Node_Str"",String.valueOf(resultsPerPage));
  parameters.put(""String_Node_Str"",String.valueOf(page));
  String searchUrl=SEARCH_URL;
  if (sinceId > 0) {
    searchUrl+=""String_Node_Str"";
    parameters.put(""String_Node_Str"",String.valueOf(sinceId));
  }
  if (maxId > 0) {
    searchUrl+=""String_Node_Str"";
    parameters.put(""String_Node_Str"",String.valueOf(maxId));
  }
  if (this.includeEntities) {
    parameters.put(""String_Node_Str"",""String_Node_Str"");
  }
  return restTemplate.getForObject(searchUrl,SearchResults.class,parameters);
}","public SearchResults search(String query,int page,int resultsPerPage,long sinceId,long maxId){
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",query);
  parameters.put(""String_Node_Str"",String.valueOf(resultsPerPage));
  parameters.put(""String_Node_Str"",String.valueOf(page));
  String searchUrl=SEARCH_URL;
  if (sinceId > 0) {
    searchUrl+=""String_Node_Str"";
    parameters.put(""String_Node_Str"",String.valueOf(sinceId));
  }
  if (maxId > 0) {
    searchUrl+=""String_Node_Str"";
    parameters.put(""String_Node_Str"",String.valueOf(maxId));
  }
  if (this.includeEntities) {
    searchUrl+=""String_Node_Str"";
    parameters.put(""String_Node_Str"",""String_Node_Str"");
  }
  return restTemplate.getForObject(searchUrl,SearchResults.class,parameters);
}"
16899,"private void handleClientErrors(ClientHttpResponse response) throws IOException {
  HttpStatus statusCode=response.getStatusCode();
  Map<String,Object> errorMap=extractErrorDetailsFromResponse(response);
  if (errorMap == null) {
    return;
  }
  String errorText=null;
  if (errorMap.containsKey(""String_Node_Str"")) {
    errorText=(String)errorMap.get(""String_Node_Str"");
  }
 else   if (errorMap.containsKey(""String_Node_Str"")) {
    Object errors=errorMap.get(""String_Node_Str"");
    if (errors instanceof List) {
      @SuppressWarnings(""String_Node_Str"") List<Map<String,String>> errorsList=(List<Map<String,String>>)errors;
      errorText=errorsList.get(0).get(""String_Node_Str"");
    }
 else     if (errors instanceof String) {
      errorText=(String)errors;
    }
  }
  if (statusCode == HttpStatus.UNAUTHORIZED) {
    if (errorText == null) {
      throw new NotAuthorizedException(response.getStatusText());
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new MissingAuthorizationException();
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new RevokedAuthorizationException();
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new InvalidAuthorizationException(errorText);
    }
 else {
      throw new NotAuthorizedException(errorText);
    }
  }
 else   if (statusCode == HttpStatus.FORBIDDEN) {
    if (errorText.equals(DUPLICATE_STATUS_TEXT) || errorText.contains(""String_Node_Str"")) {
      throw new DuplicateStatusException(errorText);
    }
 else     if (errorText.equals(STATUS_TOO_LONG_TEXT) || errorText.contains(MESSAGE_TOO_LONG_TEXT)) {
      throw new MessageTooLongException(errorText);
    }
 else     if (errorText.equals(INVALID_MESSAGE_RECIPIENT_TEXT)) {
      throw new InvalidMessageRecipientException(errorText);
    }
 else     if (errorText.equals(DAILY_RATE_LIMIT_TEXT)) {
      throw new RateLimitExceededException();
    }
 else {
      throw new OperationNotPermittedException(errorText);
    }
  }
 else   if (statusCode == HttpStatus.NOT_FOUND) {
    throw new ResourceNotFoundException(errorText);
  }
 else   if (statusCode == HttpStatus.valueOf(ENHANCE_YOUR_CALM)) {
    throw new RateLimitExceededException();
  }
}","private void handleClientErrors(ClientHttpResponse response) throws IOException {
  HttpStatus statusCode=response.getStatusCode();
  Map<String,Object> errorMap=extractErrorDetailsFromResponse(response);
  if (errorMap == null) {
    return;
  }
  String errorText=null;
  if (errorMap.containsKey(""String_Node_Str"")) {
    errorText=(String)errorMap.get(""String_Node_Str"");
  }
 else   if (errorMap.containsKey(""String_Node_Str"")) {
    Object errors=errorMap.get(""String_Node_Str"");
    if (errors instanceof List) {
      @SuppressWarnings(""String_Node_Str"") List<Map<String,String>> errorsList=(List<Map<String,String>>)errors;
      errorText=errorsList.get(0).get(""String_Node_Str"");
    }
 else     if (errors instanceof String) {
      errorText=(String)errors;
    }
  }
  if (statusCode == HttpStatus.BAD_REQUEST) {
    if (errorText.contains(""String_Node_Str"")) {
      throw new RateLimitExceededException();
    }
  }
 else   if (statusCode == HttpStatus.UNAUTHORIZED) {
    if (errorText == null) {
      throw new NotAuthorizedException(response.getStatusText());
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new MissingAuthorizationException();
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new RevokedAuthorizationException();
    }
 else     if (errorText.equals(""String_Node_Str"")) {
      throw new InvalidAuthorizationException(errorText);
    }
 else {
      throw new NotAuthorizedException(errorText);
    }
  }
 else   if (statusCode == HttpStatus.FORBIDDEN) {
    if (errorText.equals(DUPLICATE_STATUS_TEXT) || errorText.contains(""String_Node_Str"")) {
      throw new DuplicateStatusException(errorText);
    }
 else     if (errorText.equals(STATUS_TOO_LONG_TEXT) || errorText.contains(MESSAGE_TOO_LONG_TEXT)) {
      throw new MessageTooLongException(errorText);
    }
 else     if (errorText.equals(INVALID_MESSAGE_RECIPIENT_TEXT)) {
      throw new InvalidMessageRecipientException(errorText);
    }
 else     if (errorText.equals(DAILY_RATE_LIMIT_TEXT)) {
      throw new RateLimitExceededException();
    }
 else {
      throw new OperationNotPermittedException(errorText);
    }
  }
 else   if (statusCode == HttpStatus.NOT_FOUND) {
    throw new ResourceNotFoundException(errorText);
  }
 else   if (statusCode == HttpStatus.valueOf(ENHANCE_YOUR_CALM)) {
    throw new RateLimitExceededException();
  }
}"
16900,"/** 
 * Retrieves the user's Twitter screen name.
 * @return the user's screen name at Twitter
 */
String getProfileId();","/** 
 * Retrieves the authenticated user's Twitter ID.
 * @return the user's ID at Twitter
 */
long getProfileId();"
16901,"public String getProfileId(){
  Map<?,?> response=restTemplate.getForObject(VERIFY_CREDENTIALS_URL,Map.class);
  return (String)response.get(""String_Node_Str"");
}","public long getProfileId(){
  Map<?,?> response=restTemplate.getForObject(VERIFY_CREDENTIALS_URL,Map.class);
  return Long.valueOf(String.valueOf(response.get(""String_Node_Str"")));
}"
16902,"@Test public void getProfileId(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  assertEquals(""String_Node_Str"",twitter.userApi().getProfileId());
}","@Test public void getProfileId(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  assertEquals(7078572,twitter.userApi().getProfileId());
}"
16903,"public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String jdbcTemplate=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(jdbcTemplate);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}","public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String dataSource=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(dataSource);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}"
16904,"/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(TwitterApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}","/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(LinkedInApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}"
16905,"/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.restOperations=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
}","/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  RestTemplate restTemplate=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
  restTemplate.setErrorHandler(new TwitterErrorHandler());
  this.restOperations=restTemplate;
  this.statusCodeTranslator=new TwitterResponseStatusCodeTranslator();
}"
16906,"public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,Collections.emptyMap(),Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}","public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,""String_Node_Str"",Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}"
16907,"SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Long maxId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  Long sinceId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  return new SearchResults(tweets,maxId,sinceId,response.get(""String_Node_Str"") == null);
}","SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Number maxId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  Number sinceId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  return new SearchResults(tweets,maxId.longValue(),sinceId.longValue(),response.get(""String_Node_Str"") == null);
}"
16908,"@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}","@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",42);
  response.put(""String_Node_Str"",24);
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}"
16909,"/** 
 * Search commits between the given start commit id and end revision string.
 * @param start
 * @param end
 * @param filter
 * @return this service
 */
public CommitService walkBetween(ObjectId start,String end,RevFilter filter){
  for (  Repository repository : repositories)   searchBetween(start,lookup(repository,end),filter);
  return this;
}","/** 
 * Search commits between the given start commit id and end revision string.
 * @param start
 * @param end
 * @param filter
 * @return this service
 */
public CommitService walkBetween(ObjectId start,String end,RevFilter filter){
  for (  Repository repository : this)   searchBetween(start,lookup(repository,end),filter);
  return this;
}"
16910,"/** 
 * @param gitDir
 */
public CommitService(String gitDir){
  super(gitDir);
}","/** 
 * @param gitDirs
 */
public CommitService(String... gitDirs){
  super(gitDirs);
}"
16911,"/** 
 * Search commits starting from the given revision string.
 * @param start
 * @param filter
 * @return this service
 */
public CommitService searchFrom(String start,RevFilter filter){
  for (  Repository repository : repositories)   searchFrom(lookup(repository,start),filter);
  return this;
}","/** 
 * Search commits starting from the given revision string.
 * @param start
 * @param filter
 * @return this service
 */
public CommitService searchFrom(String start,RevFilter filter){
  for (  Repository repository : this)   walk(repository,null,lookup(repository,start),null,filter);
  return this;
}"
16912,"/** 
 * Search commits between the given start revision string and the given end revision string.
 * @param start
 * @param end
 * @param filter
 * @return this service
 */
public CommitService searchBetween(String start,String end,RevFilter filter){
  for (  Repository repository : repositories)   searchBetween(lookup(repository,start),lookup(repository,end),filter);
  return this;
}","/** 
 * Search commits between the given start revision string and the given end revision string.
 * @param start
 * @param end
 * @param filter
 * @return this service
 */
public CommitService searchBetween(String start,String end,RevFilter filter){
  for (  Repository repository : this)   searchBetween(lookup(repository,start),lookup(repository,end),filter);
  return this;
}"
16913,"/** 
 * Get an iterator over all repositories configured for this service. This iterator will always have at least one element.
 */
public Iterator<Repository> iterator(){
  return this.repositories.iterator();
}","/** 
 * Get an iterator over all repositories configured for this service. This iterator will always have at least one element.
 */
public final Iterator<Repository> iterator(){
  return this.repositories.iterator();
}"
16914,"/** 
 * Add file to test repository
 * @param path
 * @param content
 * @param message
 * @return commit
 * @throws Exception
 */
protected RevCommit add(String path,String content,String message) throws Exception {
  File file=new File(testRepo.getParentFile(),path);
  if (!file.getParentFile().exists())   assertTrue(file.getParentFile().mkdirs());
  if (!file.exists())   assertTrue(file.createNewFile());
  PrintWriter writer=new PrintWriter(file);
  if (content == null)   content=""String_Node_Str"";
  try {
    writer.print(content);
  }
  finally {
    writer.close();
  }
  Git git=Git.open(testRepo);
  git.add().addFilepattern(path).call();
  RevCommit commit=git.commit().setOnly(path).setMessage(message).setAuthor(author).setCommitter(committer).call();
  assertNotNull(commit);
  return commit;
}","/** 
 * Add file to test repository
 * @param repo
 * @param path
 * @param content
 * @param message
 * @return commit
 * @throws Exception
 */
protected RevCommit add(File repo,String path,String content,String message) throws Exception {
  File file=new File(repo.getParentFile(),path);
  if (!file.getParentFile().exists())   assertTrue(file.getParentFile().mkdirs());
  if (!file.exists())   assertTrue(file.createNewFile());
  PrintWriter writer=new PrintWriter(file);
  if (content == null)   content=""String_Node_Str"";
  try {
    writer.print(content);
  }
  finally {
    writer.close();
  }
  Git git=Git.open(repo);
  git.add().addFilepattern(path).call();
  RevCommit commit=git.commit().setOnly(path).setMessage(message).setAuthor(author).setCommitter(committer).call();
  assertNotNull(commit);
  return commit;
}"
16915,"@Override protected void setUp() throws Exception {
  super.setUp();
  String tmpDir=System.getProperty(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",tmpDir);
  File dir=new File(tmpDir,""String_Node_Str"" + System.nanoTime());
  assertTrue(dir.mkdir());
  Git.init().setDirectory(dir).setBare(false).call();
  testRepo=new File(dir,Constants.DOT_GIT);
  testRepo.deleteOnExit();
}","@Override protected void setUp() throws Exception {
  super.setUp();
  testRepo=initRepo();
}"
16916,"/** 
 * Create branch with name and checkout
 * @param name
 * @return branch ref
 * @throws Exception
 */
protected Ref branch(String name) throws Exception {
  Git git=Git.open(testRepo);
  git.branchCreate().setName(name).call();
  Ref ref=git.checkout().setName(name).call();
  assertNotNull(ref);
  return ref;
}","/** 
 * Create branch with name and checkout
 * @param repo
 * @param name
 * @return branch ref
 * @throws Exception
 */
protected Ref branch(File repo,String name) throws Exception {
  Git git=Git.open(repo);
  git.branchCreate().setName(name).call();
  Ref ref=git.checkout().setName(name).call();
  assertNotNull(ref);
  return ref;
}"
16917,"public void reloadConfig(){
  boolean wasEnabled=isEnabled();
  if (wasEnabled)   setEnabled(false);
  for (  Arena a : arenas) {
    a.forceEnd();
  }
  plugin.reloadConfigFile();
  config=plugin.getConfig();
  initialize();
  if (wasEnabled)   setEnabled(true);
}","public void reloadConfig(){
  boolean wasEnabled=isEnabled();
  if (wasEnabled)   setEnabled(false);
  for (  Arena a : arenas) {
    a.forceEnd();
  }
  plugin.reloadConfig();
  config=plugin.getConfig();
  initialize();
  if (wasEnabled)   setEnabled(true);
}"
16918,"public void onEnable(){
  reloadConfigFile();
  loadAnnouncementsFile();
  loadAbilities();
  setupVault();
  setupMagicSpells();
  arenaMaster=new ArenaMasterImpl(this);
  arenaMaster.initialize();
  registerInventories();
  registerListeners();
  startMetrics();
  Messenger.info(""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
  if (getConfig().getBoolean(""String_Node_Str"",false)) {
    VersionChecker.checkForUpdates(this,null);
  }
}","public void onEnable(){
  configFile=new File(getDataFolder(),""String_Node_Str"");
  config=new YamlConfiguration();
  reloadConfig();
  getConfig().options().header(getHeader());
  saveConfig();
  loadAnnouncementsFile();
  loadAbilities();
  setupVault();
  setupMagicSpells();
  arenaMaster=new ArenaMasterImpl(this);
  arenaMaster.initialize();
  registerInventories();
  registerListeners();
  startMetrics();
  Messenger.info(""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
  if (getConfig().getBoolean(""String_Node_Str"",false)) {
    VersionChecker.checkForUpdates(this,null);
  }
}"
16919,"@Override public boolean takeFee(Player p){
  if (entryFee.isEmpty())   return true;
  PlayerInventory inv=p.getInventory();
  for (  ItemStack stack : InventoryUtils.extractAll(MobArena.ECONOMY_MONEY_ID,entryFee)) {
    plugin.takeMoney(p,stack);
  }
  for (  ItemStack fee : entryFee) {
    int remaining=fee.getAmount();
    while (remaining > 0) {
      int slot=inv.first(fee.getType());
      ItemStack item=inv.getItem(slot);
      remaining-=item.getAmount();
      if (remaining >= 0) {
        inv.setItem(slot,null);
      }
 else {
        item.setAmount(-remaining);
        inv.setItem(slot,item);
      }
    }
  }
  Messenger.tell(p,Msg.JOIN_FEE_PAID.format(MAUtils.listToString(entryFee,plugin)));
  return true;
}","@Override public boolean takeFee(Player p){
  if (entryFee.isEmpty())   return true;
  PlayerInventory inv=p.getInventory();
  for (  ItemStack stack : InventoryUtils.extractAll(MobArena.ECONOMY_MONEY_ID,entryFee)) {
    plugin.takeMoney(p,stack);
  }
  for (  ItemStack fee : entryFee) {
    if (fee.getTypeId() < 0)     continue;
    int remaining=fee.getAmount();
    while (remaining > 0) {
      int slot=inv.first(fee.getType());
      if (slot < 0)       break;
      ItemStack item=inv.getItem(slot);
      remaining-=item.getAmount();
      if (remaining >= 0) {
        inv.setItem(slot,null);
      }
 else {
        item.setAmount(-remaining);
        inv.setItem(slot,item);
      }
    }
  }
  Messenger.tell(p,Msg.JOIN_FEE_PAID.format(MAUtils.listToString(entryFee,plugin)));
  return true;
}"
16920,"@Override public boolean takeFee(Player p){
  if (entryFee.isEmpty())   return true;
  PlayerInventory inv=p.getInventory();
  for (  ItemStack stack : InventoryUtils.extractAll(MobArena.ECONOMY_MONEY_ID,entryFee)) {
    plugin.takeMoney(p,stack);
  }
  for (  ItemStack stack : entryFee) {
    inv.removeItem(stack);
  }
  Messenger.tell(p,Msg.JOIN_FEE_PAID.format(MAUtils.listToString(entryFee,plugin)));
  return true;
}","@Override public boolean takeFee(Player p){
  if (entryFee.isEmpty())   return true;
  PlayerInventory inv=p.getInventory();
  for (  ItemStack stack : InventoryUtils.extractAll(MobArena.ECONOMY_MONEY_ID,entryFee)) {
    plugin.takeMoney(p,stack);
  }
  for (  ItemStack fee : entryFee) {
    int remaining=fee.getAmount();
    while (remaining > 0) {
      int slot=inv.first(fee.getType());
      ItemStack item=inv.getItem(slot);
      remaining-=item.getAmount();
      if (remaining >= 0) {
        inv.setItem(slot,null);
      }
 else {
        item.setAmount(-remaining);
        inv.setItem(slot,item);
      }
    }
  }
  Messenger.tell(p,Msg.JOIN_FEE_PAID.format(MAUtils.listToString(entryFee,plugin)));
  return true;
}"
16921,"public void expandP1(int x,int z){
  Location l=new Location(p1.getWorld(),p1.getX() - x,p1.getY(),p1.getZ() - z);
  setLocation(coords,""String_Node_Str"",l);
  save();
  reloadRegion();
}","public void expandP1(int dx,int dz){
  int x=p1.getBlockX() - dx;
  int y=p1.getBlockY();
  int z=p1.getBlockZ() - dz;
  setSaveReload(coords,""String_Node_Str"",p1.getWorld(),x,y,z);
}"
16922,"public void expandL1(int x,int z){
  l1.setX(l1.getX() - x);
  l1.setZ(l1.getZ() - z);
  set(RegionPoint.L1,l1);
}","public void expandL1(int dx,int dz){
  int x=l1.getBlockX() - dx;
  int y=l1.getBlockY();
  int z=l1.getBlockZ() - dz;
  setSaveReload(coords,""String_Node_Str"",l1.getWorld(),x,y,z);
}"
16923,"public void expandP2(int x,int z){
  Location l=new Location(p2.getWorld(),p2.getX() + x,p2.getY(),p2.getZ() + z);
  setLocation(coords,""String_Node_Str"",l);
  save();
  reloadRegion();
}","public void expandP2(int dx,int dz){
  int x=p2.getBlockX() + dx;
  int y=p2.getBlockY();
  int z=p2.getBlockZ() + dz;
  setSaveReload(coords,""String_Node_Str"",p2.getWorld(),x,y,z);
}"
16924,"public void expandLobbyUp(int amount){
  l2.setY(Math.min(arena.getWorld().getMaxHeight(),l2.getY() + amount));
  set(RegionPoint.L2,l2);
}","public void expandLobbyUp(int amount){
  int x=l2.getBlockX();
  int y=Math.min(l2.getWorld().getMaxHeight(),l2.getBlockY() + amount);
  int z=l2.getBlockZ();
  setSaveReload(coords,""String_Node_Str"",l2.getWorld(),x,y,z);
}"
16925,"public void expandLobbyDown(int amount){
  l1.setY(Math.max(0D,l1.getY() + amount));
  set(RegionPoint.L1,l1);
}","public void expandLobbyDown(int amount){
  int x=l1.getBlockX();
  int y=Math.max(0,l1.getBlockY() - amount);
  int z=l1.getBlockZ();
  setSaveReload(coords,""String_Node_Str"",l1.getWorld(),x,y,z);
}"
16926,"public void expandUp(int amount){
  Location l=new Location(p2.getWorld(),p2.getX(),Math.min(p2.getWorld().getMaxHeight(),p2.getY() + amount),p2.getZ());
  setLocation(coords,""String_Node_Str"",l);
  save();
  reloadRegion();
}","public void expandUp(int amount){
  int x=p2.getBlockX();
  int y=Math.min(p2.getWorld().getMaxHeight(),p2.getBlockY() + amount);
  int z=p2.getBlockZ();
  setSaveReload(coords,""String_Node_Str"",p2.getWorld(),x,y,z);
}"
16927,"public void expandL2(int x,int z){
  l2.setX(l2.getX() + x);
  l2.setZ(l2.getZ() + z);
  set(RegionPoint.L2,l2);
}","public void expandL2(int dx,int dz){
  int x=l2.getBlockX() + dx;
  int y=l2.getBlockY();
  int z=l2.getBlockZ() + dz;
  setSaveReload(coords,""String_Node_Str"",l2.getWorld(),x,y,z);
}"
16928,"public void expandDown(int amount){
  Location l=new Location(p1.getWorld(),p1.getX(),Math.max(0D,p1.getY() - amount),p1.getZ());
  setLocation(coords,""String_Node_Str"",l);
  save();
  reloadRegion();
}","public void expandDown(int amount){
  int x=p1.getBlockX();
  int y=Math.max(0,p1.getBlockY() - amount);
  int z=p1.getBlockZ();
  setSaveReload(coords,""String_Node_Str"",p1.getWorld(),x,y,z);
}"
16929,"/** 
 * DAMAGE LISTENERS
 */
public void onEntityDamage(EntityDamageEvent event){
  Entity damagee=event.getEntity();
  if (!arena.isRunning() || !arena.getRegion().contains(damagee.getLocation())) {
    return;
  }
  EntityDamageByEntityEvent edbe=(event instanceof EntityDamageByEntityEvent) ? (EntityDamageByEntityEvent)event : null;
  Entity damager=null;
  if (edbe != null) {
    damager=edbe.getDamager();
    if (damager instanceof Projectile) {
      damager=((Projectile)damager).getShooter();
    }
    if (damager instanceof Player) {
      repairWeapon((Player)damager);
    }
 else     if (damager instanceof TNTPrimed) {
      damager=getPlanter(damager);
    }
  }
  if (damagee instanceof Wolf && arena.hasPet(damagee)) {
    onPetDamage(event,(Wolf)damagee,damager);
  }
 else   if (damagee instanceof Player) {
    onPlayerDamage(event,(Player)damagee,damager);
  }
 else   if (damagee instanceof Snowman && event.getCause() == DamageCause.MELTING) {
    event.setCancelled(true);
  }
 else   if (monsters.getMonsters().contains(damagee)) {
    onMonsterDamage(event,damagee,damager);
  }
 else   if (monsters.getGolems().contains(damagee)) {
    onGolemDamage(event,damagee,damager);
  }
}","/** 
 * DAMAGE LISTENERS
 */
public void onEntityDamage(EntityDamageEvent event){
  Entity damagee=event.getEntity();
  if (!arena.isRunning() && !arena.getRegion().contains(damagee.getLocation())) {
    return;
  }
  EntityDamageByEntityEvent edbe=(event instanceof EntityDamageByEntityEvent) ? (EntityDamageByEntityEvent)event : null;
  Entity damager=null;
  if (edbe != null) {
    damager=edbe.getDamager();
    if (damager instanceof Projectile) {
      damager=((Projectile)damager).getShooter();
    }
    if (damager instanceof Player) {
      repairWeapon((Player)damager);
    }
 else     if (damager instanceof TNTPrimed) {
      damager=getPlanter(damager);
    }
  }
  if (damagee instanceof Wolf && arena.hasPet(damagee)) {
    onPetDamage(event,(Wolf)damagee,damager);
  }
 else   if (damagee instanceof Player) {
    onPlayerDamage(event,(Player)damagee,damager);
  }
 else   if (damagee instanceof Snowman && event.getCause() == DamageCause.MELTING) {
    event.setCancelled(true);
  }
 else   if (monsters.getMonsters().contains(damagee)) {
    onMonsterDamage(event,damagee,damager);
  }
 else   if (monsters.getGolems().contains(damagee)) {
    onGolemDamage(event,damagee,damager);
  }
}"
16930,"public void onEnable(){
  FileUtils.extractResource(this.getDataFolder(),""String_Node_Str"");
  loadConfigFile();
  loadAbilities();
  setupVault();
  setupHeroes();
  setupSpout();
  setupMagicSpells();
  setupStrategies();
  arenaMaster=new ArenaMasterImpl(this);
  arenaMaster.initialize();
  registerInventories();
  MAMessages.init(this);
  registerListeners();
  startMetrics();
  Messenger.info(""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
  if (config.getBoolean(""String_Node_Str"",false)) {
    VersionChecker.checkForUpdates(this,null);
  }
}","public void onEnable(){
  FileUtils.extractResource(this.getDataFolder(),""String_Node_Str"",getClass());
  loadConfigFile();
  loadAbilities();
  setupVault();
  setupHeroes();
  setupSpout();
  setupMagicSpells();
  setupStrategies();
  arenaMaster=new ArenaMasterImpl(this);
  arenaMaster.initialize();
  registerInventories();
  MAMessages.init(this);
  registerListeners();
  startMetrics();
  Messenger.info(""String_Node_Str"" + this.getDescription().getVersion() + ""String_Node_Str"");
  if (config.getBoolean(""String_Node_Str"",false)) {
    VersionChecker.checkForUpdates(this,null);
  }
}"
16931,"private void loadAbilities(){
  File dir=new File(this.getDataFolder(),""String_Node_Str"");
  if (!dir.exists())   dir.mkdir();
  AbilityManager.loadAbilities(dir);
}","private void loadAbilities(){
  File dir=new File(this.getDataFolder(),""String_Node_Str"");
  if (!dir.exists())   dir.mkdir();
  AbilityManager.loadAbilities(dir,getClass());
}"
16932,"public MagicSpellsListener(MobArena plugin){
  this.plugin=plugin;
  File spellFile=FileUtils.extractResource(plugin.getDataFolder(),""String_Node_Str"");
  Config spellConfig=new Config(spellFile);
  spellConfig.load();
  setupSpells(spellConfig);
}","public MagicSpellsListener(MobArena plugin){
  this.plugin=plugin;
  File spellFile=FileUtils.extractResource(plugin.getDataFolder(),""String_Node_Str"",plugin.getClass());
  Config spellConfig=new Config(spellFile);
  spellConfig.load();
  setupSpells(spellConfig);
}"
16933,"/** 
 * Extracts all of the given resources to the given directory. Convenience method, used if one is too lazy to create a new list for the resource names.
 * @param dir a directory
 * @param resources an array of resources to extract
 * @return a list of all the files that were written
 */
public static List<File> extractResources(File dir,String... resources){
  return extractResources(dir,Arrays.asList(resources));
}","public static List<File> extractResources(File dir,String path,List<String> filenames,Class<?> cls){
  List<File> files=new ArrayList<File>();
  if (!path.equals(""String_Node_Str"")) {
    if (path.startsWith(""String_Node_Str"")) {
      path=path.substring(1);
    }
    if (!path.endsWith(""String_Node_Str"")) {
      path=path + ""String_Node_Str"";
    }
  }
  for (  String filename : filenames) {
    File file=extractResource(dir,path + filename,cls);
    if (file != null) {
      files.add(file);
    }
  }
  return files;
}"
16934,"/** 
 * Extracts the given resource to the given directory.
 * @param dir a directory
 * @param resource a resource to extract
 * @return the file that was written, or null
 */
public static File extractResource(File dir,String resource){
  if (!dir.exists())   dir.mkdirs();
  String filename=getFilename(resource);
  File file=new File(dir,filename);
  if (file.exists())   return file;
  InputStream in=MobArena.class.getResourceAsStream(""String_Node_Str"" + resource);
  if (in == null)   return null;
  try {
    FileOutputStream out=new FileOutputStream(file);
    byte[] buffer=new byte[4096];
    int read=0;
    while ((read=in.read(buffer)) > 0) {
      out.write(buffer,0,read);
    }
    in.close();
    out.close();
    return file;
  }
 catch (  Exception e) {
  }
  return null;
}","/** 
 * Extracts the given resource to the given directory.
 * @param dir a directory
 * @param resource a resource to extract
 * @return the file that was written, or null
 */
public static File extractResource(File dir,String resource,Class<?> cls){
  if (!dir.exists())   dir.mkdirs();
  String filename=getFilename(resource);
  File file=new File(dir,filename);
  if (file.exists())   return file;
  InputStream in=cls.getResourceAsStream(""String_Node_Str"" + resource);
  if (in == null)   return null;
  try {
    FileOutputStream out=new FileOutputStream(file);
    byte[] buffer=new byte[4096];
    int read=0;
    while ((read=in.read(buffer)) > 0) {
      out.write(buffer,0,read);
    }
    in.close();
    out.close();
    return file;
  }
 catch (  Exception e) {
  }
  return null;
}"
16935,"public static YamlConfiguration getConfig(MobArena plugin,String filename){
  InputStream in=MobArena.class.getResourceAsStream(""String_Node_Str"" + filename);
  if (in == null) {
    Messenger.severe(""String_Node_Str"" + filename + ""String_Node_Str"");
    return null;
  }
  try {
    YamlConfiguration result=new YamlConfiguration();
    result.load(in);
    return result;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Messenger.warning(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
  return null;
}","public static YamlConfiguration getConfig(MobArena plugin,String filename,Class<?> cls){
  InputStream in=cls.getResourceAsStream(""String_Node_Str"" + filename);
  if (in == null) {
    Messenger.severe(""String_Node_Str"" + filename + ""String_Node_Str"");
    return null;
  }
  try {
    YamlConfiguration result=new YamlConfiguration();
    result.load(in);
    return result;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Messenger.warning(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
  return null;
}"
16936,"/** 
 * Load the known abilities as well as all custom abilities from the specified directory.
 * @param dir a directory of .class (and/or .java) files
 */
public static void loadAbilities(File classDir){
  abilities=new HashMap<String,Ability>();
  File javaDir=new File(classDir,""String_Node_Str"");
  if (javaDir.exists()) {
    if (ToolProvider.getSystemJavaCompiler() != null) {
      compileAbilities(javaDir,classDir);
    }
 else {
      Messenger.warning(""String_Node_Str"");
    }
  }
  String[] files=classDir.list();
  if (files.length == 0 || (files.length == 1 && files[0].equals(""String_Node_Str""))) {
    Messenger.info(""String_Node_Str"");
    extractDefaultAbilities(classDir);
  }
  loadClasses(classDir);
}","/** 
 * Load the known abilities as well as all custom abilities from the specified directory.
 * @param dir a directory of .class (and/or .java) files
 */
public static void loadAbilities(File classDir,Class<?> cls){
  abilities=new HashMap<String,Ability>();
  File javaDir=new File(classDir,""String_Node_Str"");
  if (javaDir.exists()) {
    if (ToolProvider.getSystemJavaCompiler() != null) {
      compileAbilities(javaDir,classDir);
    }
 else {
      Messenger.warning(""String_Node_Str"");
    }
  }
  String[] files=classDir.list();
  if (files.length == 0 || (files.length == 1 && files[0].equals(""String_Node_Str""))) {
    Messenger.info(""String_Node_Str"");
    extractDefaultAbilities(classDir,cls);
  }
  loadClasses(classDir);
}"
16937,"private static void extractDefaultAbilities(File classDir){
  List<String> resources=FileUtils.listFilesOnPath(""String_Node_Str"",""String_Node_Str"");
  if (resources == null || resources.isEmpty()) {
    Messenger.severe(""String_Node_Str"");
    return;
  }
  List<File> files=FileUtils.extractResources(classDir,""String_Node_Str"",resources);
  Messenger.info(""String_Node_Str"" + fileListToString(files,""String_Node_Str""));
}","private static void extractDefaultAbilities(File classDir,Class<?> cls){
  List<String> resources=FileUtils.listFilesOnPath(""String_Node_Str"",""String_Node_Str"");
  if (resources == null || resources.isEmpty()) {
    Messenger.severe(""String_Node_Str"");
    return;
  }
  List<File> files=FileUtils.extractResources(classDir,""String_Node_Str"",resources,cls);
  Messenger.info(""String_Node_Str"" + fileListToString(files,""String_Node_Str""));
}"
16938,"/** 
 * Load all arena-related stuff.
 */
public void loadArenas(){
  Set<String> arenanames=config.getKeys(""String_Node_Str"");
  if (arenanames == null || arenanames.isEmpty()) {
    createArenaNode(""String_Node_Str"",plugin.getServer().getWorlds().get(0));
  }
  arenas=new LinkedList<Arena>();
  for (  World w : Bukkit.getServer().getWorlds()) {
    loadArenasInWorld(w.getName());
  }
}","/** 
 * Load all arena-related stuff.
 */
public void loadArenas(){
  Set<String> arenanames=config.getKeys(""String_Node_Str"");
  if (arenanames == null || arenanames.isEmpty()) {
    createArenaNode(""String_Node_Str"",plugin.getServer().getWorlds().get(0),false);
  }
  arenas=new LinkedList<Arena>();
  for (  World w : Bukkit.getServer().getWorlds()) {
    loadArenasInWorld(w.getName());
  }
}"
16939,"public Arena createArenaNode(String arenaName,World world){
  String path=""String_Node_Str"" + arenaName;
  if (config.getConfigSection(path) != null)   throw new IllegalArgumentException(""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.set(path + ""String_Node_Str"",world.getName());
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.save();
  return loadArena(arenaName);
}","private Arena createArenaNode(String arenaName,World world,boolean load){
  String path=""String_Node_Str"" + arenaName;
  if (config.getConfigSection(path) != null)   throw new IllegalArgumentException(""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.set(path + ""String_Node_Str"",world.getName());
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.save();
  return (load ? loadArena(arenaName) : null);
}"
16940,"@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  if (!Commands.isPlayer(sender)) {
    Messenger.tellPlayer(sender,Msg.MISC_NOT_FROM_CONSOLE);
    return false;
  }
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  Player p=(Player)sender;
  if (!arg1.matches(""String_Node_Str"")) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return true;
  }
  am.getSelectedArena().getRegion().addSpawn(arg1,p.getLocation());
  Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
  return true;
}","@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  if (!Commands.isPlayer(sender)) {
    Messenger.tellPlayer(sender,Msg.MISC_NOT_FROM_CONSOLE);
    return false;
  }
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  Player p=(Player)sender;
  if (!arg1.matches(""String_Node_Str"")) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return true;
  }
  if (am.getSelectedArena().getRegion().contains(p.getLocation())) {
    am.getSelectedArena().getRegion().addSpawn(arg1,p.getLocation());
    Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
  }
 else {
    if (am.getSelectedArena().getRegion().isDefined()) {
      Messenger.tellPlayer(sender,""String_Node_Str"");
    }
 else {
      Messenger.tellPlayer(sender,""String_Node_Str"");
    }
  }
  return true;
}"
16941,"@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  if (!arg1.matches(""String_Node_Str"")) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return false;
  }
  if (am.getSelectedArena().getRegion().removeSpawn(arg1))   Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
 else   Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
  return true;
}","@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  if (!arg1.matches(""String_Node_Str"")) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return false;
  }
  if (am.getSelectedArena().getRegion().removeChest(arg1))   Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
 else   Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
  return true;
}"
16942,"@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  if (!Commands.isPlayer(sender)) {
    Messenger.tellPlayer(sender,Msg.MISC_NOT_FROM_CONSOLE);
    return false;
  }
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  Player p=(Player)sender;
  if (!(arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str""))) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return true;
  }
  am.getSelectedArena().getRegion().set(arg1,p.getLocation());
  Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
  Messenger.tellPlayer(sender,""String_Node_Str"");
  return true;
}","@Override public boolean execute(ArenaMaster am,CommandSender sender,String... args){
  if (!Commands.isPlayer(sender)) {
    Messenger.tellPlayer(sender,Msg.MISC_NOT_FROM_CONSOLE);
    return false;
  }
  String arg1=(args.length > 0 ? args[0] : ""String_Node_Str"");
  Player p=(Player)sender;
  if (!(arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str"") || arg1.equals(""String_Node_Str""))) {
    Messenger.tellPlayer(sender,""String_Node_Str"");
    return true;
  }
  if (arg1.equals(""String_Node_Str"") && !am.getSelectedArena().getRegion().contains(p.getLocation())) {
    if (am.getSelectedArena().getRegion().isDefined()) {
      Messenger.tellPlayer(sender,""String_Node_Str"");
    }
 else {
      Messenger.tellPlayer(sender,""String_Node_Str"");
    }
  }
 else {
    am.getSelectedArena().getRegion().set(arg1,p.getLocation());
    Messenger.tellPlayer(sender,""String_Node_Str"" + arg1 + ""String_Node_Str""+ am.getSelectedArena().configName()+ ""String_Node_Str"");
    Messenger.tellPlayer(sender,""String_Node_Str"");
  }
  return true;
}"
16943,"public void reloadRegion(){
  p1=coords.getLocation(""String_Node_Str"",world);
  p2=coords.getLocation(""String_Node_Str"",world);
  l1=coords.getLocation(""String_Node_Str"",world);
  l2=coords.getLocation(""String_Node_Str"",world);
}","public void reloadRegion(){
  p1=coords.getLocation(""String_Node_Str"",world);
  p2=coords.getLocation(""String_Node_Str"",world);
  fixRegion();
  l1=coords.getLocation(""String_Node_Str"",world);
  l2=coords.getLocation(""String_Node_Str"",world);
  fixLobbyRegion();
}"
16944,"public boolean removeSpawn(String name){
  if (spawns.getString(name) == null) {
    return false;
  }
  spawns.set(name,null);
  reloadSpawnpoints();
  verifyData();
  save();
  return true;
}","public boolean removeSpawn(String name){
  if (spawns.getString(name) == null) {
    return false;
  }
  spawns.set(name,null);
  save();
  reloadSpawnpoints();
  verifyData();
  return true;
}"
16945,"private void fix(String location1,String location2){
  Location loc1=coords.getLocation(location1,world);
  Location loc2=coords.getLocation(location2,world);
  if (loc1 == null || loc2 == null) {
    return;
  }
  if (loc1.getX() > loc2.getX()) {
    double tmp=loc1.getX();
    loc1.setX(loc2.getX());
    loc2.setX(tmp);
  }
  if (loc1.getZ() > loc2.getZ()) {
    double tmp=loc1.getZ();
    loc1.setZ(loc2.getZ());
    loc2.setZ(tmp);
  }
  if (loc1.getY() > loc2.getY()) {
    double tmp=loc1.getY();
    loc1.setY(loc2.getY());
    loc2.setY(tmp);
  }
  if (!arena.getWorld().getName().equals(world.getName()))   arena.setWorld(world);
  coords.set(location1,loc1);
  coords.set(location2,loc2);
}","private void fix(String location1,String location2){
  Location loc1=coords.getLocation(location1,world);
  Location loc2=coords.getLocation(location2,world);
  if (loc1 == null || loc2 == null) {
    return;
  }
  boolean modified=false;
  if (loc1.getX() > loc2.getX()) {
    double tmp=loc1.getX();
    loc1.setX(loc2.getX());
    loc2.setX(tmp);
    modified=true;
  }
  if (loc1.getZ() > loc2.getZ()) {
    double tmp=loc1.getZ();
    loc1.setZ(loc2.getZ());
    loc2.setZ(tmp);
    modified=true;
  }
  if (loc1.getY() > loc2.getY()) {
    double tmp=loc1.getY();
    loc1.setY(loc2.getY());
    loc2.setY(tmp);
    modified=true;
  }
  if (!arena.getWorld().getName().equals(world.getName())) {
    arena.setWorld(world);
    modified=true;
  }
  if (!modified) {
    return;
  }
  coords.set(location1,loc1);
  coords.set(location2,loc2);
}"
16946,"public void addChest(String name,Location loc){
  chests.set(name,loc);
  reloadChests();
  save();
}","public void addChest(String name,Location loc){
  chests.set(name,loc);
  save();
  reloadChests();
}"
16947,"public boolean removeChest(String name){
  if (chests.getString(name) == null) {
    return false;
  }
  chests.set(name,null);
  reloadChests();
  save();
  return true;
}","public boolean removeChest(String name){
  if (chests.getString(name) == null) {
    return false;
  }
  chests.set(name,null);
  save();
  reloadChests();
  return true;
}"
16948,"public boolean contains(Location l,int radius){
  if (!l.getWorld().getName().equals(world.getName()) || !setup) {
    return false;
  }
  int x=l.getBlockX();
  int y=l.getBlockY();
  int z=l.getBlockZ();
  if (lobbySetup) {
    if ((x + radius >= l1.getBlockX() && x - radius <= l2.getBlockX()) && (z + radius >= l1.getBlockZ() && z - radius <= l2.getBlockZ()) && (y + radius >= l1.getBlockY() && y - radius <= l2.getBlockY()))     return true;
  }
  return ((x + radius >= p1.getBlockX() && x - radius <= p2.getBlockX()) && (z + radius >= p1.getBlockZ() && z - radius <= p2.getBlockZ()) && (y + radius >= p1.getBlockY() && y - radius <= p2.getBlockY()));
}","public boolean contains(Location l,int radius){
  if (!l.getWorld().getName().equals(world.getName()) || !isDefined()) {
    return false;
  }
  int x=l.getBlockX();
  int y=l.getBlockY();
  int z=l.getBlockZ();
  if (lobbySetup) {
    if ((x + radius >= l1.getBlockX() && x - radius <= l2.getBlockX()) && (z + radius >= l1.getBlockZ() && z - radius <= l2.getBlockZ()) && (y + radius >= l1.getBlockY() && y - radius <= l2.getBlockY()))     return true;
  }
  return ((x + radius >= p1.getBlockX() && x - radius <= p2.getBlockX()) && (z + radius >= p1.getBlockZ() && z - radius <= p2.getBlockZ()) && (y + radius >= p1.getBlockY() && y - radius <= p2.getBlockY()));
}"
16949,"public ArenaRegion(ConfigSection coords,Arena arena){
  this.arena=arena;
  this.world=arena.getWorld();
  this.coords=coords;
  this.spawns=coords.getConfigSection(""String_Node_Str"");
  this.chests=coords.getConfigSection(""String_Node_Str"");
  reloadAll();
  adjustRegion();
}","public ArenaRegion(ConfigSection coords,Arena arena){
  this.arena=arena;
  this.world=arena.getWorld();
  this.coords=coords;
  this.spawns=coords.getConfigSection(""String_Node_Str"");
  this.chests=coords.getConfigSection(""String_Node_Str"");
  reloadAll();
}"
16950,"public void set(String point,Location loc){
  coords.set(point,loc);
  if (point.equals(""String_Node_Str"") || point.equals(""String_Node_Str"") || point.equals(""String_Node_Str"")) {
    readjustRegion(loc);
  }
  fixRegion();
  fixLobbyRegion();
  reloadRegion();
  reloadWarps();
  reloadLeaderboards();
  verifyData();
  save();
}","public void set(String point,Location loc){
  coords.set(point,loc);
  save();
  reloadRegion();
  reloadWarps();
  reloadLeaderboards();
  verifyData();
}"
16951,"public void addSpawn(String name,Location loc){
  spawns.set(name,loc);
  readjustRegion(loc);
  reloadSpawnpoints();
  verifyData();
  save();
}","public void addSpawn(String name,Location loc){
  spawns.set(name,loc);
  save();
  reloadSpawnpoints();
  verifyData();
}"
16952,"/** 
 * Load the global settings.
 */
public void loadSettings(){
  ConfigUtils.replaceAllNodes(plugin,config,""String_Node_Str"",""String_Node_Str"");
  ConfigSection section=config.getConfigSection(""String_Node_Str"");
  String cmds=section.getString(""String_Node_Str"",""String_Node_Str"");
  String[] parts=cmds.split(""String_Node_Str"");
  allowedCommands.add(""String_Node_Str"");
  for (  String part : parts) {
    allowedCommands.add(part.trim().toLowerCase());
  }
}","/** 
 * Load the global settings.
 */
public void loadSettings(){
  ConfigUtils.replaceAllNodes(config,""String_Node_Str"",""String_Node_Str"");
  ConfigSection section=config.getConfigSection(""String_Node_Str"");
  String cmds=section.getString(""String_Node_Str"",""String_Node_Str"");
  String[] parts=cmds.split(""String_Node_Str"");
  allowedCommands.add(""String_Node_Str"");
  for (  String part : parts) {
    allowedCommands.add(part.trim().toLowerCase());
  }
}"
16953,"/** 
 * Loads the classes in res/classes.yml into the config-file.
 */
public void loadDefaultClasses(){
  ConfigUtils.addMissingNodes(plugin,config,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Loads the classes in res/classes.yml into the config-file.
 */
public void loadDefaultClasses(){
  ConfigUtils.addMissingNodes(config,""String_Node_Str"",""String_Node_Str"");
}"
16954,"private Arena loadArena(String arenaname){
  String path=""String_Node_Str"" + arenaname;
  String worldName=config.getString(path + ""String_Node_Str"",""String_Node_Str"");
  World world=null;
  if (!worldName.equals(""String_Node_Str"")) {
    world=plugin.getServer().getWorld(worldName);
    if (world == null) {
      Messenger.warning(""String_Node_Str"" + worldName + ""String_Node_Str""+ arenaname+ ""String_Node_Str"");
      return null;
    }
  }
 else {
    world=plugin.getServer().getWorlds().get(0);
    Messenger.warning(""String_Node_Str"" + arenaname + ""String_Node_Str""+ world.getName()+ ""String_Node_Str"");
  }
  ConfigUtils.replaceAllNodes(plugin,config,path + ""String_Node_Str"",""String_Node_Str"");
  Arena arena=new ArenaImpl(plugin,config,arenaname,world);
  registerPermission(""String_Node_Str"" + arenaname.toLowerCase(),PermissionDefault.TRUE);
  if (selectedArena == null) {
    selectedArena=arena;
  }
  arenas.add(arena);
  Messenger.info(""String_Node_Str"" + arenaname + ""String_Node_Str"");
  return arena;
}","private Arena loadArena(String arenaname){
  String path=""String_Node_Str"" + arenaname;
  String worldName=config.getString(path + ""String_Node_Str"",""String_Node_Str"");
  World world=null;
  if (!worldName.equals(""String_Node_Str"")) {
    world=plugin.getServer().getWorld(worldName);
    if (world == null) {
      Messenger.warning(""String_Node_Str"" + worldName + ""String_Node_Str""+ arenaname+ ""String_Node_Str"");
      return null;
    }
  }
 else {
    world=plugin.getServer().getWorlds().get(0);
    Messenger.warning(""String_Node_Str"" + arenaname + ""String_Node_Str""+ world.getName()+ ""String_Node_Str"");
  }
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  Arena arena=new ArenaImpl(plugin,config,arenaname,world);
  registerPermission(""String_Node_Str"" + arenaname.toLowerCase(),PermissionDefault.TRUE);
  if (selectedArena == null) {
    selectedArena=arena;
  }
  arenas.add(arena);
  Messenger.info(""String_Node_Str"" + arenaname + ""String_Node_Str"");
  return arena;
}"
16955,"public Arena createArenaNode(String arenaName,World world){
  String path=""String_Node_Str"" + arenaName;
  if (config.getConfigSection(path) != null)   throw new IllegalArgumentException(""String_Node_Str"");
  ConfigUtils.replaceAllNodes(plugin,config,path + ""String_Node_Str"",""String_Node_Str"");
  config.set(path + ""String_Node_Str"",world.getName());
  ConfigUtils.replaceAllNodes(plugin,config,path + ""String_Node_Str"",""String_Node_Str"");
  ConfigUtils.replaceAllNodes(plugin,config,path + ""String_Node_Str"",""String_Node_Str"");
  config.save();
  return loadArena(arenaName);
}","public Arena createArenaNode(String arenaName,World world){
  String path=""String_Node_Str"" + arenaName;
  if (config.getConfigSection(path) != null)   throw new IllegalArgumentException(""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.set(path + ""String_Node_Str"",world.getName());
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  ConfigUtils.replaceAllNodes(config,path + ""String_Node_Str"",""String_Node_Str"");
  config.save();
  return loadArena(arenaName);
}"
16956,"private void updateSettings(Config config){
  Set<String> arenas=config.getKeys(""String_Node_Str"");
  if (arenas == null)   return;
  for (  String arena : arenas) {
    String path=""String_Node_Str"" + arena + ""String_Node_Str"";
    ConfigUtils.replaceAllNodes(this,config,path,""String_Node_Str"");
  }
}","private void updateSettings(Config config){
  Set<String> arenas=config.getKeys(""String_Node_Str"");
  if (arenas == null)   return;
  for (  String arena : arenas) {
    String path=""String_Node_Str"" + arena + ""String_Node_Str"";
    ConfigUtils.replaceAllNodes(config,path,""String_Node_Str"");
  }
}"
16957,"public static YamlConfiguration getConfig(MobArena plugin,String filename,Class<?> cls){
  InputStream in=cls.getResourceAsStream(""String_Node_Str"" + filename);
  if (in == null) {
    Messenger.severe(""String_Node_Str"" + filename + ""String_Node_Str"");
    return null;
  }
  try {
    YamlConfiguration result=new YamlConfiguration();
    result.load(in);
    return result;
  }
 catch (  Exception e) {
    e.printStackTrace();
    Messenger.warning(""String_Node_Str"" + filename + ""String_Node_Str"");
  }
  return null;
}","/** 
 * Get a YamlConfiguration of a given resource.
 * @param filename the name of the resource
 * @return a YamlConfiguration for the given resource
 * @throws IOException if the resource does not exist
 * @throws InvalidConfigurationException if the resource is not a valid config
 */
public static YamlConfiguration getConfig(String filename) throws IOException, InvalidConfigurationException {
  ZipFile zip=new ZipFile(JAR);
  ZipEntry entry=zip.getEntry(RES + filename);
  YamlConfiguration yaml=new YamlConfiguration();
  yaml.load(zip.getInputStream(entry));
  return yaml;
}"
16958,"public static void replaceAllNodes(MobArena plugin,Config config,String path,String filename){
  assertNodes(plugin,config,path,filename,false);
}","public static void replaceAllNodes(Config config,String path,String filename){
  assertNodes(config,path,filename,false);
}"
16959,"public static void addMissingNodes(MobArena plugin,Config config,String path,String filename){
  assertNodes(plugin,config,path,filename,true);
}","public static void addMissingNodes(Config config,String path,String filename){
  assertNodes(config,path,filename,true);
}"
16960,"@Override public boolean playerJoin(Player p,Location loc){
  ArenaPlayerJoinEvent event=new ArenaPlayerJoinEvent(p,this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  takeFee(p);
  storePlayerData(p,loc);
  removePotionEffects(p);
  MAUtils.sitPets(p);
  setHealth(p,p.getMaxHealth());
  p.setFoodLevel(20);
  p.setGameMode(GameMode.SURVIVAL);
  movePlayerToLobby(p);
  arenaPlayerMap.put(p,new ArenaPlayer(p,this,plugin));
  if (MobArena.hasSpout && settings.getBoolean(""String_Node_Str""))   Spouty.classSelectionScreen(plugin,this,p);
  autoStartTimer.start();
  Messenger.tellPlayer(p,Msg.JOIN_PLAYER_JOINED);
  if (autoStartTimer.isRunning()) {
    Messenger.tellPlayer(p,Msg.ARENA_AUTO_START,""String_Node_Str"" + autoStartTimer.getRemaining());
  }
  return true;
}","@Override public boolean playerJoin(Player p,Location loc){
  ArenaPlayerJoinEvent event=new ArenaPlayerJoinEvent(p,this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  takeFee(p);
  storePlayerData(p,loc);
  removePotionEffects(p);
  MAUtils.sitPets(p);
  setHealth(p,p.getMaxHealth());
  p.setFoodLevel(20);
  if (settings.getBoolean(""String_Node_Str"",false)) {
    p.setLevel(0);
    p.setExp(0.0f);
  }
  p.setGameMode(GameMode.SURVIVAL);
  movePlayerToLobby(p);
  arenaPlayerMap.put(p,new ArenaPlayer(p,this,plugin));
  if (MobArena.hasSpout && settings.getBoolean(""String_Node_Str""))   Spouty.classSelectionScreen(plugin,this,p);
  autoStartTimer.start();
  Messenger.tellPlayer(p,Msg.JOIN_PLAYER_JOINED);
  if (autoStartTimer.isRunning()) {
    Messenger.tellPlayer(p,Msg.ARENA_AUTO_START,""String_Node_Str"" + autoStartTimer.getRemaining());
  }
  return true;
}"
16961,"@Override public boolean startArena(){
  if (running || lobbyPlayers.isEmpty() || !readyPlayers.containsAll(lobbyPlayers)) {
    return false;
  }
  ArenaStartEvent event=new ArenaStartEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  storeContainerContents();
  arenaPlayers.addAll(lobbyPlayers);
  lobbyPlayers.clear();
  readyPlayers.clear();
  for (  Player p : randoms) {
    assignRandomClass(p);
  }
  randoms.clear();
  if (arenaPlayers.isEmpty()) {
    return false;
  }
  scoreboard.initialize();
  for (  Player p : arenaPlayers) {
    if (inSpec(p)) {
      specPlayers.remove(p);
      System.out.println(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
    p.teleport(region.getArenaWarp());
    p.setAllowFlight(false);
    p.setFlying(false);
    setHealth(p,p.getMaxHealth());
    p.setFoodLevel(20);
    assignClassPermissions(p);
    arenaPlayerMap.get(p).resetStats();
    scoreboard.addPlayer(p);
  }
  startSpawner();
  startBouncingSheep();
  running=true;
  spawnPets();
  limitManager.clearClassesInUse();
  rewardManager.reset();
  leaderboard.initialize();
  leaderboard.startTracking();
  Messenger.tellAll(this,Msg.ARENA_START);
  return true;
}","@Override public boolean startArena(){
  if (running || lobbyPlayers.isEmpty() || !readyPlayers.containsAll(lobbyPlayers)) {
    return false;
  }
  ArenaStartEvent event=new ArenaStartEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  storeContainerContents();
  arenaPlayers.addAll(lobbyPlayers);
  lobbyPlayers.clear();
  readyPlayers.clear();
  for (  Player p : randoms) {
    assignRandomClass(p);
  }
  randoms.clear();
  if (arenaPlayers.isEmpty()) {
    return false;
  }
  scoreboard.initialize();
  for (  Player p : arenaPlayers) {
    if (inSpec(p)) {
      specPlayers.remove(p);
      System.out.println(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
    p.teleport(region.getArenaWarp());
    p.setAllowFlight(false);
    p.setFlying(false);
    setHealth(p,p.getMaxHealth());
    p.setFoodLevel(20);
    if (settings.getBoolean(""String_Node_Str"",false)) {
      p.setLevel(0);
      p.setExp(0.0f);
    }
    assignClassPermissions(p);
    arenaPlayerMap.get(p).resetStats();
    scoreboard.addPlayer(p);
  }
  startSpawner();
  startBouncingSheep();
  running=true;
  spawnPets();
  limitManager.clearClassesInUse();
  rewardManager.reset();
  leaderboard.initialize();
  leaderboard.startTracking();
  Messenger.tellAll(this,Msg.ARENA_START);
  return true;
}"
16962,"private void restoreInvAndExp(Player p){
  inventoryManager.clearInventory(p);
  try {
    inventoryManager.restoreInv(p);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Messenger.severe(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
  }
  rewardManager.grantRewards(p);
  if (lobbyPlayers.contains(p) || !settings.getBoolean(""String_Node_Str"",false)) {
    playerData.get(p).restoreData();
  }
 else {
    p.setFoodLevel(playerData.get(p).food());
  }
}","private void restoreInvAndExp(Player p){
  inventoryManager.clearInventory(p);
  try {
    inventoryManager.restoreInv(p);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Messenger.severe(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
  }
  rewardManager.grantRewards(p);
  if (lobbyPlayers.contains(p) || !settings.getBoolean(""String_Node_Str"") || settings.getBoolean(""String_Node_Str"",false)|| settings.getBoolean(""String_Node_Str"",false)) {
    playerData.get(p).restoreData();
  }
 else {
    p.setFoodLevel(playerData.get(p).food());
  }
}"
16963,"public static String parseString(ItemStack stack){
  if (stack.getTypeId() == 0)   return null;
  String type=stack.getType().toString().toLowerCase();
  MaterialData md=stack.getData();
  byte data=(md != null ? md.getData() : 0);
  if (stack.getType() == Material.WOOL) {
    data=(byte)(15 - data);
  }
  int amount=stack.getAmount();
  Map<Enchantment,Integer> enchants=null;
  if (stack.getType() == Material.ENCHANTED_BOOK) {
    EnchantmentStorageMeta esm=(EnchantmentStorageMeta)stack.getItemMeta();
    enchants=esm.getStoredEnchants();
  }
 else {
    enchants=stack.getEnchantments();
  }
  String enchantments=""String_Node_Str"";
  for (  Entry<Enchantment,Integer> entry : enchants.entrySet()) {
    int id=entry.getKey().getId();
    int lvl=entry.getValue();
    enchantments+=""String_Node_Str"" + id + ""String_Node_Str""+ lvl;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    enchantments=enchantments.substring(1);
  }
  String result=type;
  if (data != 0) {
    result+=""String_Node_Str"" + data;
  }
  if (amount > 1 || data != 0) {
    result+=""String_Node_Str"" + amount;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    result+=""String_Node_Str"" + enchantments;
  }
  return result;
}","public static String parseString(ItemStack stack){
  if (stack.getTypeId() == 0)   return null;
  String type=stack.getType().toString().toLowerCase();
  MaterialData md=stack.getData();
  short data=(md != null ? md.getData() : 0);
  if (stack.getType() == Material.WOOL) {
    data=(byte)(15 - data);
  }
 else   if (stack.getType() == Material.POTION) {
    data=stack.getDurability();
  }
  int amount=stack.getAmount();
  Map<Enchantment,Integer> enchants=null;
  if (stack.getType() == Material.ENCHANTED_BOOK) {
    EnchantmentStorageMeta esm=(EnchantmentStorageMeta)stack.getItemMeta();
    enchants=esm.getStoredEnchants();
  }
 else {
    enchants=stack.getEnchantments();
  }
  String enchantments=""String_Node_Str"";
  for (  Entry<Enchantment,Integer> entry : enchants.entrySet()) {
    int id=entry.getKey().getId();
    int lvl=entry.getValue();
    enchantments+=""String_Node_Str"" + id + ""String_Node_Str""+ lvl;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    enchantments=enchantments.substring(1);
  }
  String result=type;
  if (data != 0) {
    result+=""String_Node_Str"" + data;
  }
  if (amount > 1 || data != 0) {
    result+=""String_Node_Str"" + amount;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    result+=""String_Node_Str"" + enchantments;
  }
  return result;
}"
16964,"/** 
 * Add an item to the items list. If the item is a weapon-type, its durability will be set to ""infinite"". If the item is a bone, the pets counter will be incremented.
 * @param stack an item
 */
public void addItem(ItemStack stack){
  if (stack == null)   return;
  if (isWeapon(stack)) {
    stack.setDurability(Short.MIN_VALUE);
  }
 else   if (stack.getType() == Material.BONE) {
    pets+=stack.getAmount();
  }
  items.add(stack);
}","/** 
 * Add an item to the items list. If the item is a weapon-type, its durability will be set to ""infinite"". If the item is a bone, the pets counter will be incremented.
 * @param stack an item
 */
public void addItem(ItemStack stack){
  if (stack == null)   return;
  if (isWeapon(stack)) {
    stack.setDurability(Short.MIN_VALUE);
  }
 else   if (stack.getType() == Material.BONE) {
    pets+=stack.getAmount();
  }
 else   if (stack.getAmount() > 64) {
    while (stack.getAmount() > 64) {
      items.add(new ItemStack(stack.getType(),64));
      stack.setAmount(stack.getAmount() - 64);
    }
  }
  items.add(stack);
}"
16965,"/** 
 * Primary constructor. Requires a name and a world.
 */
public ArenaImpl(MobArena plugin,Config config,String name,World world){
  if (world == null)   throw new NullPointerException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.name=name;
  this.world=world;
  this.plugin=plugin;
  this.settings=new ConfigSection(config,""String_Node_Str"" + name + ""String_Node_Str"");
  this.region=new ArenaRegion(new ConfigSection(config,""String_Node_Str"" + name + ""String_Node_Str""),this);
  this.enabled=settings.getBoolean(""String_Node_Str"",false);
  this.protect=settings.getBoolean(""String_Node_Str"",true);
  this.running=false;
  this.edit=false;
  this.inventoryManager=new InventoryManager(this);
  this.rewardManager=new RewardManager(this);
  this.leaderboard=new Leaderboard(plugin,this,region.getLeaderboard());
  this.arenaPlayerMap=new HashMap<Player,ArenaPlayer>();
  this.arenaPlayers=new HashSet<Player>();
  this.lobbyPlayers=new HashSet<Player>();
  this.readyPlayers=new HashSet<Player>();
  this.specPlayers=new HashSet<Player>();
  this.deadPlayers=new HashSet<Player>();
  this.randoms=new HashSet<Player>();
  this.classes=plugin.getArenaMaster().getClasses();
  this.attachments=new HashMap<Player,PermissionAttachment>();
  this.repairQueue=new PriorityBlockingQueue<Repairable>(100,new RepairableComparator());
  this.blocks=new HashSet<Block>();
  this.repairables=new LinkedList<Repairable>();
  this.containables=new LinkedList<Repairable>();
  this.monsterManager=new MonsterManager();
  this.waveManager=new WaveManager(this,config);
  this.everyWaveMap=MAUtils.getArenaRewardMap(plugin,config,name,""String_Node_Str"");
  this.afterWaveMap=MAUtils.getArenaRewardMap(plugin,config,name,""String_Node_Str"");
  this.eventListener=new ArenaListener(this,plugin);
  this.entryFee=ItemParser.parseItems(settings.getString(""String_Node_Str"",""String_Node_Str""));
  this.allowMonsters=world.getAllowMonsters();
  this.allowAnimals=world.getAllowAnimals();
  String timeString=settings.getString(""String_Node_Str"",""String_Node_Str"");
  Time time=Enums.getEnumFromString(Time.class,timeString);
  this.timeStrategy=(time != null ? new TimeStrategyLocked(time) : new TimeStrategyNull());
  this.dir=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ name);
  this.sessionBuilder=new YMLSessionBuilder(new File(dir,""String_Node_Str""));
  this.totalsBuilder=new YMLTotalsBuilder(new File(dir,""String_Node_Str""));
  this.log=new ArenaLog(this,sessionBuilder,totalsBuilder);
}","/** 
 * Primary constructor. Requires a name and a world.
 */
public ArenaImpl(MobArena plugin,Config config,String name,World world){
  if (world == null)   throw new NullPointerException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.name=name;
  this.world=world;
  this.plugin=plugin;
  this.settings=new ConfigSection(config,""String_Node_Str"" + name + ""String_Node_Str"");
  this.region=new ArenaRegion(new ConfigSection(config,""String_Node_Str"" + name + ""String_Node_Str""),this);
  this.enabled=settings.getBoolean(""String_Node_Str"",false);
  this.protect=settings.getBoolean(""String_Node_Str"",true);
  this.logging=settings.getBoolean(""String_Node_Str"",true);
  this.running=false;
  this.edit=false;
  this.inventoryManager=new InventoryManager(this);
  this.rewardManager=new RewardManager(this);
  this.leaderboard=new Leaderboard(plugin,this,region.getLeaderboard());
  this.arenaPlayerMap=new HashMap<Player,ArenaPlayer>();
  this.arenaPlayers=new HashSet<Player>();
  this.lobbyPlayers=new HashSet<Player>();
  this.readyPlayers=new HashSet<Player>();
  this.specPlayers=new HashSet<Player>();
  this.deadPlayers=new HashSet<Player>();
  this.randoms=new HashSet<Player>();
  this.classes=plugin.getArenaMaster().getClasses();
  this.attachments=new HashMap<Player,PermissionAttachment>();
  this.repairQueue=new PriorityBlockingQueue<Repairable>(100,new RepairableComparator());
  this.blocks=new HashSet<Block>();
  this.repairables=new LinkedList<Repairable>();
  this.containables=new LinkedList<Repairable>();
  this.monsterManager=new MonsterManager();
  this.waveManager=new WaveManager(this,config);
  this.everyWaveMap=MAUtils.getArenaRewardMap(plugin,config,name,""String_Node_Str"");
  this.afterWaveMap=MAUtils.getArenaRewardMap(plugin,config,name,""String_Node_Str"");
  this.eventListener=new ArenaListener(this,plugin);
  this.entryFee=ItemParser.parseItems(settings.getString(""String_Node_Str"",""String_Node_Str""));
  this.allowMonsters=world.getAllowMonsters();
  this.allowAnimals=world.getAllowAnimals();
  String timeString=settings.getString(""String_Node_Str"",""String_Node_Str"");
  Time time=Enums.getEnumFromString(Time.class,timeString);
  this.timeStrategy=(time != null ? new TimeStrategyLocked(time) : new TimeStrategyNull());
  if (isLogging()) {
    this.dir=new File(plugin.getDataFolder() + File.separator + ""String_Node_Str""+ File.separator+ name);
    this.sessionBuilder=new YMLSessionBuilder(new File(dir,""String_Node_Str""));
    this.totalsBuilder=new YMLTotalsBuilder(new File(dir,""String_Node_Str""));
    this.log=new ArenaLog(this,sessionBuilder,totalsBuilder);
  }
}"
16966,"@Override public void setProtected(boolean value){
  protect=value;
}","@Override public void setProtected(boolean value){
  protect=value;
  settings.set(""String_Node_Str"",protect);
}"
16967,"@Override public boolean startArena(){
  if (running || lobbyPlayers.isEmpty() || !readyPlayers.containsAll(lobbyPlayers)) {
    return false;
  }
  ArenaStartEvent event=new ArenaStartEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  storeContainerContents();
  arenaPlayers.addAll(lobbyPlayers);
  lobbyPlayers.clear();
  readyPlayers.clear();
  for (  Player p : randoms) {
    assignRandomClass(p);
  }
  if (arenaPlayers.isEmpty()) {
    return false;
  }
  for (  Player p : arenaPlayers) {
    p.teleport(region.getArenaWarp());
    setHealth(p,20);
    p.setFoodLevel(20);
    assignClassPermissions(p);
    arenaPlayerMap.get(p).resetStats();
  }
  startSpawner();
  startBouncingSheep();
  running=true;
  spawnPets();
  rewardManager.reset();
  log.start();
  leaderboard.initialize();
  leaderboard.startTracking();
  Messenger.tellAll(this,Msg.ARENA_START);
  return true;
}","@Override public boolean startArena(){
  if (running || lobbyPlayers.isEmpty() || !readyPlayers.containsAll(lobbyPlayers)) {
    return false;
  }
  ArenaStartEvent event=new ArenaStartEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  storeContainerContents();
  arenaPlayers.addAll(lobbyPlayers);
  lobbyPlayers.clear();
  readyPlayers.clear();
  for (  Player p : randoms) {
    assignRandomClass(p);
  }
  if (arenaPlayers.isEmpty()) {
    return false;
  }
  for (  Player p : arenaPlayers) {
    p.teleport(region.getArenaWarp());
    setHealth(p,20);
    p.setFoodLevel(20);
    assignClassPermissions(p);
    arenaPlayerMap.get(p).resetStats();
  }
  startSpawner();
  startBouncingSheep();
  running=true;
  spawnPets();
  rewardManager.reset();
  if (isLogging())   log.start();
  leaderboard.initialize();
  leaderboard.startTracking();
  Messenger.tellAll(this,Msg.ARENA_START);
  return true;
}"
16968,"@Override public boolean endArena(){
  if (!running || !arenaPlayers.isEmpty()) {
    return false;
  }
  ArenaEndEvent event=new ArenaEndEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  boolean en=enabled;
  enabled=false;
  running=false;
  leaderboard.stopTracking();
  leaderboard.update();
  log.end();
  stopSpawner();
  Messenger.tellAll(this,Msg.ARENA_END,true);
  cleanup();
  if (settings.getBoolean(""String_Node_Str"",false)) {
    restoreRegion();
  }
  restoreContainerContents();
  enabled=en;
  return true;
}","@Override public boolean endArena(){
  if (!running || !arenaPlayers.isEmpty()) {
    return false;
  }
  ArenaEndEvent event=new ArenaEndEvent(this);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  boolean en=enabled;
  enabled=false;
  running=false;
  leaderboard.stopTracking();
  leaderboard.update();
  if (isLogging())   log.end();
  stopSpawner();
  Messenger.tellAll(this,Msg.ARENA_END,true);
  cleanup();
  if (settings.getBoolean(""String_Node_Str"",false)) {
    restoreRegion();
  }
  restoreContainerContents();
  enabled=en;
  return true;
}"
16969,"private boolean addRemoveClassPermission(String classname,String perm,boolean add){
  String path=""String_Node_Str"" + classname;
  if (config.getConfigSection(path) == null)   return false;
  ConfigSection section=config.getConfigSection(path);
  List<String> nodes=section.getStringList(""String_Node_Str"",null);
  if (nodes.contains(perm))   return false;
  if (add) {
    removeContradictions(nodes,perm);
    nodes.add(perm);
  }
 else {
    nodes.remove(perm);
  }
  section.set(""String_Node_Str"",nodes);
  config.save();
  loadClass(classname);
  return true;
}","private boolean addRemoveClassPermission(String classname,String perm,boolean add){
  classname=TextUtils.camelCase(classname);
  String path=""String_Node_Str"" + classname;
  if (config.getConfigSection(path) == null)   return false;
  ConfigSection section=config.getConfigSection(path);
  List<String> nodes=section.getStringList(""String_Node_Str"",null);
  if (nodes.contains(perm) && add)   return false;
 else   if (nodes.contains(perm) && !add)   nodes.remove(perm);
 else   if (!nodes.contains(perm) && add)   nodes.add(perm);
 else   if (!nodes.contains(perm) && !add)   return false;
  section.set(""String_Node_Str"",nodes);
  config.save();
  loadClass(classname);
  return true;
}"
16970,"/** 
 * Register all the commands directly. This could also be done with a somewhat dirty classloader/resource reader method, but this is neater, albeit more manual work.
 */
private void registerCommands(){
  commands=new HashMap<String,Command>();
  register(ArenaListCommand.class);
  register(JoinCommand.class);
  register(LeaveCommand.class);
  register(NotReadyCommand.class);
  register(SpecCommand.class);
  register(PlayerListCommand.class);
  register(DisableCommand.class);
  register(EnableCommand.class);
  register(ForceCommand.class);
  register(KickCommand.class);
  register(RestoreCommand.class);
  register(AddArenaCommand.class);
  register(AddClassPermCommand.class);
  register(AddContainerCommand.class);
  register(AddSpawnpointCommand.class);
  register(ArenaCommand.class);
  register(CheckDataCommand.class);
  register(ConfigCommand.class);
  register(ContainersCommand.class);
  register(EditArenaCommand.class);
  register(ExpandLobbyRegionCommand.class);
  register(ExpandRegionCommand.class);
  register(ListClassesCommand.class);
  register(ListClassPermsCommand.class);
  register(ProtectCommand.class);
  register(RemoveArenaCommand.class);
  register(RemoveClassCommand.class);
  register(RemoveClassPermCommand.class);
  register(RemoveContainerCommand.class);
  register(RemoveSpawnpointCommand.class);
  register(SetArenaCommand.class);
  register(SetClassCommand.class);
  register(SetLobbyRegionCommand.class);
  register(SetRegionCommand.class);
  register(SetWarpCommand.class);
  register(ShowRegionCommand.class);
  register(SpawnpointsCommand.class);
  register(AutoGenerateCommand.class);
  register(AutoDegenerateCommand.class);
}","/** 
 * Register all the commands directly. This could also be done with a somewhat dirty classloader/resource reader method, but this is neater, albeit more manual work.
 */
private void registerCommands(){
  commands=new HashMap<String,Command>();
  register(ArenaListCommand.class);
  register(JoinCommand.class);
  register(LeaveCommand.class);
  register(NotReadyCommand.class);
  register(SpecCommand.class);
  register(PlayerListCommand.class);
  register(DisableCommand.class);
  register(EnableCommand.class);
  register(ForceCommand.class);
  register(KickCommand.class);
  register(RestoreCommand.class);
  register(AddArenaCommand.class);
  register(AddClassPermCommand.class);
  register(AddContainerCommand.class);
  register(AddSpawnpointCommand.class);
  register(ArenaCommand.class);
  register(CheckDataCommand.class);
  register(ConfigCommand.class);
  register(ContainersCommand.class);
  register(EditArenaCommand.class);
  register(ExpandLobbyRegionCommand.class);
  register(ExpandRegionCommand.class);
  register(ListClassesCommand.class);
  register(ListClassPermsCommand.class);
  register(ProtectCommand.class);
  register(RemoveArenaCommand.class);
  register(RemoveClassCommand.class);
  register(RemoveClassPermCommand.class);
  register(RemoveContainerCommand.class);
  register(RemoveLeaderboardCommand.class);
  register(RemoveSpawnpointCommand.class);
  register(SetArenaCommand.class);
  register(SetClassCommand.class);
  register(SetLobbyRegionCommand.class);
  register(SetRegionCommand.class);
  register(SetWarpCommand.class);
  register(ShowRegionCommand.class);
  register(SpawnpointsCommand.class);
  register(AutoGenerateCommand.class);
  register(AutoDegenerateCommand.class);
}"
16971,"@Override public void buildClassDistribution(Map<String,MutableInt> classDistribution){
  for (  Entry<String,MutableInt> entry : classDistribution.entrySet()) {
    int amount=entry.getValue().value();
    config.set(CLASSES + entry.getKey(),amount);
  }
}","@Override public void buildClassDistribution(Map<String,MutableInt> classDistribution){
  for (  Entry<String,MutableInt> entry : classDistribution.entrySet()) {
    int amount=entry.getValue().value();
    config.set(CLASSES + ""String_Node_Str"" + entry.getKey(),amount);
  }
}"
16972,"private void reset(){
  config.set(GENERAL,null);
  config.set(CLASSES,null);
  config.set(PLAYERS,null);
}","private void reset(){
  if (config.get(GENERAL) != null)   config.set(GENERAL,null);
  if (config.get(CLASSES) != null)   config.set(CLASSES,null);
  if (config.get(PLAYERS) != null)   config.set(PLAYERS,null);
}"
16973,"@Override public void buildPlayerEntry(ArenaLogPlayerEntry entry,List<ItemStack> rewards){
  String path=PLAYERS + entry.playername + ""String_Node_Str"";
  config.set(path + ""String_Node_Str"",entry.playername);
  config.set(path + ""String_Node_Str"",entry.classname);
  config.set(path + ""String_Node_Str"",entry.kills);
  config.set(path + ""String_Node_Str"",entry.dmgDone);
  config.set(path + ""String_Node_Str"",entry.dmgTaken);
  config.set(path + ""String_Node_Str"",entry.swings);
  config.set(path + ""String_Node_Str"",entry.hits);
  config.set(path + ""String_Node_Str"",entry.lastWave);
  config.set(path + ""String_Node_Str"",TimeUtils.toTime(entry.leaveTime - start));
  Map<String,MutableInt> summed=new HashMap<String,MutableInt>();
  for (  ItemStack stack : rewards) {
    if (stack == null)     continue;
    String type=(stack.getTypeId() == MobArena.ECONOMY_MONEY_ID ? ""String_Node_Str"" : stack.getType().toString().toLowerCase());
    if (!summed.containsKey(type)) {
      summed.put(type,new MutableInt());
    }
    summed.get(type).add(stack.getAmount());
  }
  for (  Entry<String,MutableInt> e : summed.entrySet()) {
    config.set(path + ""String_Node_Str"" + e.getKey(),e.getValue().value());
  }
}","@Override public void buildPlayerEntry(ArenaLogPlayerEntry entry,List<ItemStack> rewards){
  String path=PLAYERS + ""String_Node_Str"" + entry.playername+ ""String_Node_Str"";
  config.set(path + ""String_Node_Str"",entry.playername);
  config.set(path + ""String_Node_Str"",entry.classname);
  config.set(path + ""String_Node_Str"",entry.kills);
  config.set(path + ""String_Node_Str"",entry.dmgDone);
  config.set(path + ""String_Node_Str"",entry.dmgTaken);
  config.set(path + ""String_Node_Str"",entry.swings);
  config.set(path + ""String_Node_Str"",entry.hits);
  config.set(path + ""String_Node_Str"",entry.lastWave);
  config.set(path + ""String_Node_Str"",TimeUtils.toTime(entry.leaveTime - start));
  Map<String,MutableInt> summed=new HashMap<String,MutableInt>();
  for (  ItemStack stack : rewards) {
    if (stack == null)     continue;
    String type=(stack.getTypeId() == MobArena.ECONOMY_MONEY_ID ? ""String_Node_Str"" : stack.getType().toString().toLowerCase());
    if (!summed.containsKey(type)) {
      summed.put(type,new MutableInt());
    }
    summed.get(type).add(stack.getAmount());
  }
  for (  Entry<String,MutableInt> e : summed.entrySet()) {
    config.set(path + ""String_Node_Str"" + e.getKey(),e.getValue().value());
  }
}"
16974,"public void expandLobbyUp(int amount){
  l2.setY(Math.min(127D,l2.getY() + amount));
  set(RegionPoint.L2,l2);
}","public void expandLobbyUp(int amount){
  l2.setY(Math.min(arena.getWorld().getMaxHeight(),l2.getY() + amount));
  set(RegionPoint.L2,l2);
}"
16975,"public void expandUp(int amount){
  p2.setY(Math.min(127D,p2.getY() + amount));
  set(RegionPoint.P2,p2);
}","public void expandUp(int amount){
  p2.setY(Math.min(arena.getWorld().getMaxHeight(),p2.getY() + amount));
  set(RegionPoint.P2,p2);
}"
16976,"public static String parseString(ItemStack stack){
  if (stack.getTypeId() == 0)   return null;
  String type=stack.getType().toString().toLowerCase();
  MaterialData md=stack.getData();
  byte data=(md != null ? md.getData() : 0);
  if (stack.getType() == Material.WOOL) {
    data=(byte)(15 - data);
  }
  int amount=stack.getAmount();
  String enchantments=""String_Node_Str"";
  for (  Entry<Enchantment,Integer> entry : stack.getEnchantments().entrySet()) {
    int id=entry.getKey().getId();
    int lvl=entry.getValue();
    enchantments+=""String_Node_Str"" + id + ""String_Node_Str""+ lvl;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    enchantments=enchantments.substring(2);
  }
  String result=type;
  if (data != 0) {
    result+=""String_Node_Str"" + data;
  }
  if (amount > 1 || data != 0) {
    result+=""String_Node_Str"" + amount;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    result+=""String_Node_Str"" + enchantments;
  }
  return result;
}","public static String parseString(ItemStack stack){
  if (stack.getTypeId() == 0)   return null;
  String type=stack.getType().toString().toLowerCase();
  MaterialData md=stack.getData();
  byte data=(md != null ? md.getData() : 0);
  if (stack.getType() == Material.WOOL) {
    data=(byte)(15 - data);
  }
  int amount=stack.getAmount();
  String enchantments=""String_Node_Str"";
  for (  Entry<Enchantment,Integer> entry : stack.getEnchantments().entrySet()) {
    int id=entry.getKey().getId();
    int lvl=entry.getValue();
    enchantments+=""String_Node_Str"" + id + ""String_Node_Str""+ lvl;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    enchantments=enchantments.substring(1);
  }
  String result=type;
  if (data != 0) {
    result+=""String_Node_Str"" + data;
  }
  if (amount > 1 || data != 0) {
    result+=""String_Node_Str"" + amount;
  }
  if (!enchantments.equals(""String_Node_Str"")) {
    result+=""String_Node_Str"" + enchantments;
  }
  return result;
}"
16977,"private static Wave parseBossWave(Arena arena,String name,ConfigSection config){
  MACreature monster=getSingleMonster(config);
  if (monster == null) {
    Messenger.warning(WaveError.SINGLE_MONSTER_MISSING.format(name,arena.configName()));
    return null;
  }
  BossWave result=new BossWave(monster);
  String hlth=config.getString(""String_Node_Str"");
  BossHealth health=BossHealth.fromString(hlth);
  result.setHealth(health);
  String ablts=config.getString(""String_Node_Str"");
  if (ablts != null) {
    String[] parts=ablts.split(""String_Node_Str"");
    for (    String ability : parts) {
      Ability a=AbilityManager.fromString(ability.trim());
      if (a == null) {
        Messenger.warning(WaveError.BOSS_ABILITY.format(ability.trim(),name,arena.configName()));
        continue;
      }
      result.addBossAbility(a);
    }
  }
  int interval=config.getInt(""String_Node_Str"",3) * 20;
  result.setAbilityInterval(interval);
  return result;
}","private static Wave parseBossWave(Arena arena,String name,ConfigSection config){
  MACreature monster=getSingleMonster(config);
  if (monster == null) {
    Messenger.warning(WaveError.SINGLE_MONSTER_MISSING.format(name,arena.configName()));
    return null;
  }
  BossWave result=new BossWave(monster);
  String hlth=config.getString(""String_Node_Str"");
  BossHealth health=BossHealth.fromString(hlth);
  result.setHealth(health);
  String ablts=config.getString(""String_Node_Str"");
  if (ablts != null) {
    String[] parts=ablts.split(""String_Node_Str"");
    for (    String ability : parts) {
      Ability a=AbilityManager.fromString(ability.trim());
      if (a == null) {
        Messenger.warning(WaveError.BOSS_ABILITY.format(ability.trim(),name,arena.configName()));
        continue;
      }
      result.addBossAbility(a);
    }
  }
  result.setAbilityInterval(config.getInt(""String_Node_Str"",3) * 20);
  result.setAbilityAnnounce(config.getBoolean(""String_Node_Str"",true));
  return result;
}"
16978,"public BossWave(MACreature monster){
  this.monster=monster;
  this.bosses=new HashSet<MABoss>();
  this.abilities=new ArrayList<Ability>();
  this.activated=false;
  this.setType(WaveType.BOSS);
}","public BossWave(MACreature monster){
  this.monster=monster;
  this.bosses=new HashSet<MABoss>();
  this.abilities=new ArrayList<Ability>();
  this.activated=false;
  this.abilityAnnounce=false;
  this.setType(WaveType.BOSS);
}"
16979,"public void announceAbility(Ability ability,MABoss boss,Arena arena){
  AbilityInfo info=ability.getClass().getAnnotation(AbilityInfo.class);
  Messenger.tellAll(arena,Msg.WAVE_BOSS_ABILITY,info.name());
}","public void announceAbility(Ability ability,MABoss boss,Arena arena){
  if (getAbilityAnnounce()) {
    AbilityInfo info=ability.getClass().getAnnotation(AbilityInfo.class);
    Messenger.tellAll(arena,Msg.WAVE_BOSS_ABILITY,info.name());
  }
}"
16980,"public static String getDownloadTargetPath(ListEntryItem item){
  if (item.getUrl() == null) {
    return ExternalDirectory.getExternalRootDirectory() + item.getTitle();
  }
  return ExternalDirectory.getExternalRootDirectory() + URLPathDecoder.decode(item.getUrl());
}","public static String getDownloadTargetPath(ListEntryItem item){
  if (item.getUrl() == null) {
    return ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + item.getTitle();
  }
  return ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + URLPathDecoder.decode(item.getUrl());
}"
16981,"/** 
 * Takes care of state of external and throws a   {@link RuntimeException} if sdcard is unmounted
 * @return path to external storage
 */
public static String getExternalRootDirectory(){
  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    File extDir=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"");
    if (extDir.mkdirs() || extDir.exists()) {
      return extDir.getAbsolutePath();
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Takes care of state of external and throws a   {@link RuntimeException} if sdcard is unmounted
 * @return path to external storage
 */
private static String getExternalRootDirectory(){
  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    File extDir=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"");
    if (extDir.mkdirs() || extDir.exists()) {
      return extDir.getAbsolutePath();
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
16982,"public static String getDownloadTargetPath(String url){
  return ExternalDirectory.getExternalRootDirectory() + URLPathDecoder.decode(url);
}","public static String getDownloadTargetPath(ListEntryItem item){
  if (item.getUrl() == null) {
    return ExternalDirectory.getExternalRootDirectory() + item.getTitle();
  }
  return ExternalDirectory.getExternalRootDirectory() + URLPathDecoder.decode(item.getUrl());
}"
16983,"public void addEntry(ListEntryItem entry){
  if (hideFilesFolders && entry.getTitle().startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    entry.setFilePath(ExternalDirectory.getDownloadTargetPath(entry.getUrl()));
    if (entry.isDirectory()) {
      ExternalDirectory.createDirectory(entry.getFilePath());
    }
    items.add(entry);
    Collections.sort(items);
    notifyDataSetChanged();
  }
}","public void addEntry(ListEntryItem entry){
  if (hideFilesFolders && entry.getTitle().startsWith(""String_Node_Str"")) {
    return;
  }
 else {
    entry.setFilePath(ExternalDirectory.getDownloadTargetPath(entry));
    if (entry.isDirectory()) {
      ExternalDirectory.createDirectory(entry.getFilePath());
    }
    items.add(entry);
    Collections.sort(items);
    notifyDataSetChanged();
  }
}"
16984,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  addPreferencesFromResource(R.xml.settings);
  hideFilesFolders=(CheckBoxPreference)findPreference(getString(R.string.settings_hide_files_folders));
  hideFilesFolders.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      SharedPreferences prefs=getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      if (hideFilesFolders.isChecked()) {
        editor.putBoolean(""String_Node_Str"",true);
      }
 else {
        editor.putBoolean(""String_Node_Str"",false);
      }
      return editor.commit();
    }
  }
);
  releaseAccount=(Preference)findPreference(getString(R.string.settings_release_account));
  releaseAccount.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      AlertDialog.Builder builder=new AlertDialog.Builder(context);
      builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
          Editor editor=prefs.edit();
          editor.remove(""String_Node_Str"");
          editor.remove(""String_Node_Str"");
          editor.commit();
          Intent backToSetup=new Intent(context,SetupActivity.class);
          startActivity(backToSetup);
          ((Activity)context).finish();
        }
      }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return true;
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  addPreferencesFromResource(R.xml.settings);
  hideFilesFolders=(CheckBoxPreference)findPreference(getString(R.string.settings_hide_files_folders));
  hideFilesFolders.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      SharedPreferences prefs=getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      if (hideFilesFolders.isChecked()) {
        editor.putBoolean(""String_Node_Str"",true);
      }
 else {
        editor.putBoolean(""String_Node_Str"",false);
      }
      return editor.commit();
    }
  }
);
  releaseAccount=(Preference)findPreference(getString(R.string.settings_release_account));
  releaseAccount.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      AlertDialog.Builder builder=new AlertDialog.Builder(context);
      builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
          Editor editor=prefs.edit();
          editor.remove(""String_Node_Str"");
          editor.remove(""String_Node_Str"");
          editor.commit();
          Intent backToSetup=new Intent(context,SetupActivity.class);
          backToSetup.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
          startActivity(backToSetup);
          ((Activity)context).finish();
        }
      }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return true;
    }
  }
);
}"
16985,"@Override public boolean onPreferenceClick(Preference preference){
  AlertDialog.Builder builder=new AlertDialog.Builder(context);
  builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      editor.remove(""String_Node_Str"");
      editor.remove(""String_Node_Str"");
      editor.commit();
      Intent backToSetup=new Intent(context,SetupActivity.class);
      startActivity(backToSetup);
      ((Activity)context).finish();
    }
  }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  AlertDialog alert=builder.create();
  alert.show();
  return true;
}","@Override public boolean onPreferenceClick(Preference preference){
  AlertDialog.Builder builder=new AlertDialog.Builder(context);
  builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      editor.remove(""String_Node_Str"");
      editor.remove(""String_Node_Str"");
      editor.commit();
      Intent backToSetup=new Intent(context,SetupActivity.class);
      backToSetup.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
      startActivity(backToSetup);
      ((Activity)context).finish();
    }
  }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  AlertDialog alert=builder.create();
  alert.show();
  return true;
}"
16986,"@Override protected Boolean doInBackground(String... params){
  HttpClient client=new DefaultHttpClient();
  serverUrl=params[0];
  HttpPost post=new HttpPost(serverUrl + AUTH_SUFFIX);
  try {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",edtLinkcode.getText().toString()));
    post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    HttpResponse response=client.execute(post);
    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
      BufferedReader in=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
      StringBuffer sb=new StringBuffer();
      String line=""String_Node_Str"";
      String NL=System.getProperty(""String_Node_Str"");
      while ((line=in.readLine()) != null) {
        sb.append(line + NL);
      }
      in.close();
      JSONObject credentials=new JSONObject(sb.toString());
      String ident=credentials.getString(""String_Node_Str"");
      String authCode=credentials.getString(""String_Node_Str"");
      foldername=credentials.getString(""String_Node_Str"");
      SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      editor.putString(""String_Node_Str"",ident);
      editor.putString(""String_Node_Str"",authCode);
      editor.putString(""String_Node_Str"",serverUrl);
      editor.commit();
    }
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  ClientProtocolException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  JSONException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
  return true;
}","@Override protected Boolean doInBackground(String... params){
  HttpClient client=new DefaultHttpClient();
  serverUrl=params[0];
  HttpPost post=new HttpPost(serverUrl + AUTH_SUFFIX);
  try {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",edtLinkcode.getText().toString()));
    post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    HttpResponse response=client.execute(post);
    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
      BufferedReader in=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
      StringBuffer sb=new StringBuffer();
      String line=""String_Node_Str"";
      String NL=System.getProperty(""String_Node_Str"");
      while ((line=in.readLine()) != null) {
        sb.append(line + NL);
      }
      in.close();
      JSONObject credentials=new JSONObject(sb.toString());
      String ident=credentials.getString(""String_Node_Str"");
      String authCode=credentials.getString(""String_Node_Str"");
      SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      editor.putString(""String_Node_Str"",ident);
      editor.putString(""String_Node_Str"",authCode);
      editor.putString(""String_Node_Str"",serverUrl);
      editor.commit();
    }
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  ClientProtocolException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  JSONException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
catch (  Exception e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
    return false;
  }
  return true;
}"
16987,"@Override protected void onPostExecute(Boolean successfully){
  loadingDialog.dismiss();
  if (successfully) {
    Intent browseData=new Intent(context,BrowsingActivity.class);
    browseData.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"");
    browseData.putExtra(""String_Node_Str"",foldername);
    startActivity(browseData);
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(context);
    builder.setMessage(getString(R.string.login_error)).setCancelable(false).setPositiveButton(getString(R.string.close),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ((Activity)context).finish();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}","@Override protected void onPostExecute(Boolean successfully){
  loadingDialog.dismiss();
  if (successfully) {
    Intent browseData=new Intent(context,BrowsingActivity.class);
    browseData.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"");
    startActivity(browseData);
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(context);
    builder.setMessage(getString(R.string.login_error)).setCancelable(false).setPositiveButton(getString(R.string.close),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ((Activity)context).finish();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}"
16988,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  addPreferencesFromResource(R.xml.settings);
  hideFilesFolders=(CheckBoxPreference)findPreference(getString(R.string.settings_hide_files_folders));
  hideFilesFolders.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      SharedPreferences prefs=getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      if (hideFilesFolders.isChecked()) {
        editor.putBoolean(""String_Node_Str"",false);
      }
 else {
        editor.putBoolean(""String_Node_Str"",true);
      }
      return editor.commit();
    }
  }
);
  releaseAccount=(Preference)findPreference(getString(R.string.settings_release_account));
  releaseAccount.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      AlertDialog.Builder builder=new AlertDialog.Builder(context);
      builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
          Editor editor=prefs.edit();
          editor.remove(""String_Node_Str"");
          editor.remove(""String_Node_Str"");
          editor.commit();
        }
      }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return true;
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  addPreferencesFromResource(R.xml.settings);
  hideFilesFolders=(CheckBoxPreference)findPreference(getString(R.string.settings_hide_files_folders));
  hideFilesFolders.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      SharedPreferences prefs=getSettings((ContextWrapper)context);
      Editor editor=prefs.edit();
      if (hideFilesFolders.isChecked()) {
        editor.putBoolean(""String_Node_Str"",true);
      }
 else {
        editor.putBoolean(""String_Node_Str"",false);
      }
      return editor.commit();
    }
  }
);
  releaseAccount=(Preference)findPreference(getString(R.string.settings_release_account));
  releaseAccount.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      AlertDialog.Builder builder=new AlertDialog.Builder(context);
      builder.setMessage(getString(R.string.release_account_hint)).setTitle(getString(R.string.are_you_sure)).setCancelable(false).setPositiveButton(getString(R.string.release),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
          Editor editor=prefs.edit();
          editor.remove(""String_Node_Str"");
          editor.remove(""String_Node_Str"");
          editor.commit();
        }
      }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          dialog.dismiss();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return true;
    }
  }
);
}"
16989,"@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  SharedPreferences prefs=getSettings((ContextWrapper)context);
  Editor editor=prefs.edit();
  if (hideFilesFolders.isChecked()) {
    editor.putBoolean(""String_Node_Str"",false);
  }
 else {
    editor.putBoolean(""String_Node_Str"",true);
  }
  return editor.commit();
}","@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  SharedPreferences prefs=getSettings((ContextWrapper)context);
  Editor editor=prefs.edit();
  if (hideFilesFolders.isChecked()) {
    editor.putBoolean(""String_Node_Str"",true);
  }
 else {
    editor.putBoolean(""String_Node_Str"",false);
  }
  return editor.commit();
}"
16990,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  lv_browsing=new ListView(context);
  adapter=new BrowsingAdapter(context);
  lv_browsing.setAdapter(adapter);
  lv_browsing.setOnItemClickListener(onListItemClick());
  setContentView(lv_browsing);
  SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
  ident=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  authCode=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  serverUrl=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  String url=getIntent().getStringExtra(""String_Node_Str"");
  new DownloadFileList().execute(url);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  context=this;
  lvBrowsing=new ListView(context);
  adapter=new BrowsingAdapter(context);
  lvBrowsing.setAdapter(adapter);
  lvBrowsing.setOnItemClickListener(onListItemClick());
  setContentView(lvBrowsing);
  SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)context);
  ident=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  authCode=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  serverUrl=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  folderId=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",folderId);
  String url=getIntent().getStringExtra(""String_Node_Str"");
  new DownloadFileList().execute(url);
}"
16991,"private OnItemClickListener onListItemClick(){
  OnItemClickListener listener=new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListEntryItem current=(ListEntryItem)adapter.getItem(position);
      if (current.getType().equals(""String_Node_Str"")) {
        Intent browseFolder=new Intent(context,BrowsingActivity.class);
        browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + current.getId()+ ""String_Node_Str""+ current.getUrl());
        startActivity(browseFolder);
      }
 else       if (current.getType().equals(""String_Node_Str"")) {
        Intent browseFolder=new Intent(context,BrowsingActivity.class);
        browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + current.getId());
        startActivity(browseFolder);
      }
 else       if (current.getType().equals(""String_Node_Str"")) {
        File file=new File(ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + current.getTitle());
        if (file.exists()) {
          Intent open=new Intent(Intent.ACTION_VIEW,Uri.parse(file.getAbsolutePath()));
          String mime=URLConnection.guessContentTypeFromName(file.getAbsolutePath());
          open.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          open.setAction(android.content.Intent.ACTION_VIEW);
          open.setDataAndType((Uri.fromFile(file)),mime);
          startActivity(open);
        }
 else {
          StringBuilder sb=new StringBuilder();
          sb.append(serverUrl);
          sb.append(""String_Node_Str"");
          sb.append(current.getId() + ""String_Node_Str"");
          sb.append(current.getUrl());
          current.setUrl(sb.toString());
          new DownloadFile().execute(current);
        }
      }
    }
  }
;
  return listener;
}","/** 
 * Will be called everytime an item on this activities' listview was clicked.
 * @return newly created {@link OnItemClickListener}
 */
private OnItemClickListener onListItemClick(){
  OnItemClickListener listener=new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListEntryItem current=(ListEntryItem)adapter.getItem(position);
      if (current.getType().equals(""String_Node_Str"")) {
        Intent browseFolder=new Intent(context,BrowsingActivity.class);
        String tmpUrl=serverUrl + ""String_Node_Str"" + folderId+ ""String_Node_Str""+ current.getUrl();
        browseFolder.putExtra(""String_Node_Str"",tmpUrl);
        startActivity(browseFolder);
      }
 else       if (current.getType().equals(""String_Node_Str"")) {
        Intent browseFolder=new Intent(context,BrowsingActivity.class);
        folderId=current.getId();
        SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)parent.getContext());
        Editor editor=prefs.edit();
        editor.putString(""String_Node_Str"",folderId);
        editor.commit();
        browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + folderId);
        startActivity(browseFolder);
      }
 else       if (current.getType().equals(""String_Node_Str"")) {
        File file=new File(ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + current.getTitle());
        if (file.exists()) {
          Intent open=new Intent(Intent.ACTION_VIEW,Uri.parse(file.getAbsolutePath()));
          String mime=URLConnection.guessContentTypeFromName(file.getAbsolutePath());
          open.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
          open.setAction(android.content.Intent.ACTION_VIEW);
          open.setDataAndType((Uri.fromFile(file)),mime);
          startActivity(open);
        }
 else {
          StringBuilder sb=new StringBuilder();
          sb.append(serverUrl);
          sb.append(""String_Node_Str"");
          sb.append(current.getId() + ""String_Node_Str"");
          sb.append(current.getUrl());
          current.setUrl(sb.toString());
          new DownloadFile().execute(current);
        }
      }
    }
  }
;
  return listener;
}"
16992,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListEntryItem current=(ListEntryItem)adapter.getItem(position);
  if (current.getType().equals(""String_Node_Str"")) {
    Intent browseFolder=new Intent(context,BrowsingActivity.class);
    browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + current.getId()+ ""String_Node_Str""+ current.getUrl());
    startActivity(browseFolder);
  }
 else   if (current.getType().equals(""String_Node_Str"")) {
    Intent browseFolder=new Intent(context,BrowsingActivity.class);
    browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + current.getId());
    startActivity(browseFolder);
  }
 else   if (current.getType().equals(""String_Node_Str"")) {
    File file=new File(ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + current.getTitle());
    if (file.exists()) {
      Intent open=new Intent(Intent.ACTION_VIEW,Uri.parse(file.getAbsolutePath()));
      String mime=URLConnection.guessContentTypeFromName(file.getAbsolutePath());
      open.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      open.setAction(android.content.Intent.ACTION_VIEW);
      open.setDataAndType((Uri.fromFile(file)),mime);
      startActivity(open);
    }
 else {
      StringBuilder sb=new StringBuilder();
      sb.append(serverUrl);
      sb.append(""String_Node_Str"");
      sb.append(current.getId() + ""String_Node_Str"");
      sb.append(current.getUrl());
      current.setUrl(sb.toString());
      new DownloadFile().execute(current);
    }
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListEntryItem current=(ListEntryItem)adapter.getItem(position);
  if (current.getType().equals(""String_Node_Str"")) {
    Intent browseFolder=new Intent(context,BrowsingActivity.class);
    String tmpUrl=serverUrl + ""String_Node_Str"" + folderId+ ""String_Node_Str""+ current.getUrl();
    browseFolder.putExtra(""String_Node_Str"",tmpUrl);
    startActivity(browseFolder);
  }
 else   if (current.getType().equals(""String_Node_Str"")) {
    Intent browseFolder=new Intent(context,BrowsingActivity.class);
    folderId=current.getId();
    SharedPreferences prefs=SettingsActivity.getSettings((ContextWrapper)parent.getContext());
    Editor editor=prefs.edit();
    editor.putString(""String_Node_Str"",folderId);
    editor.commit();
    browseFolder.putExtra(""String_Node_Str"",serverUrl + ""String_Node_Str"" + folderId);
    startActivity(browseFolder);
  }
 else   if (current.getType().equals(""String_Node_Str"")) {
    File file=new File(ExternalDirectory.getExternalRootDirectory() + ""String_Node_Str"" + current.getTitle());
    if (file.exists()) {
      Intent open=new Intent(Intent.ACTION_VIEW,Uri.parse(file.getAbsolutePath()));
      String mime=URLConnection.guessContentTypeFromName(file.getAbsolutePath());
      open.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      open.setAction(android.content.Intent.ACTION_VIEW);
      open.setDataAndType((Uri.fromFile(file)),mime);
      startActivity(open);
    }
 else {
      StringBuilder sb=new StringBuilder();
      sb.append(serverUrl);
      sb.append(""String_Node_Str"");
      sb.append(current.getId() + ""String_Node_Str"");
      sb.append(current.getUrl());
      current.setUrl(sb.toString());
      new DownloadFile().execute(current);
    }
  }
}"
16993,"private void createInnerTypeRefProperty(JstType currentType,JstType innerType){
  if (currentType.isOType())   return;
  JstModifiers mod=innerType.getModifiers().getCopy();
  JstSynthesizedProperty property=new JstSynthesizedProperty(getTypeRef(innerType),innerType.getSimpleName(),null,mod);
  property.setParent(currentType);
  if (currentType.getProperty(property.getName().getName()) != null) {
    int line=0;
    int column=0;
    int start=0;
    int end=0;
    JstSource src=innerType.getSource();
    if (src != null) {
      line=src.getRow();
      column=src.getColumn();
      start=src.getStartOffSet();
      end=src.getEndOffSet();
    }
    m_ctx.getErrorReporter().error(""String_Node_Str"" + innerType.getSimpleName() + ""String_Node_Str""+ m_ctx.getCurrentType().getName(),m_ctx.getCurrentType().getName(),start,end,line,column);
  }
 else {
    currentType.addProperty(property);
  }
}","private void createInnerTypeRefProperty(JstType currentType,JstType innerType){
  if (currentType.isOType())   return;
  JstModifiers mod=innerType.getModifiers().getCopy();
  JstSynthesizedProperty property=new JstSynthesizedProperty(getTypeRef(innerType),innerType.getSimpleName(),(JstIdentifier)null,mod);
  property.setParent(currentType);
  if (currentType.getProperty(property.getName().getName()) != null) {
    int line=0;
    int column=0;
    int start=0;
    int end=0;
    JstSource src=innerType.getSource();
    if (src != null) {
      line=src.getRow();
      column=src.getColumn();
      start=src.getStartOffSet();
      end=src.getEndOffSet();
    }
    m_ctx.getErrorReporter().error(""String_Node_Str"" + innerType.getSimpleName() + ""String_Node_Str""+ m_ctx.getCurrentType().getName(),m_ctx.getCurrentType().getName(),start,end,line,column);
  }
 else {
    currentType.addProperty(property);
  }
}"
16994,"private void smartIndentAfterNewLine(IDocument d,DocumentCommand c){
  int indexOf=c.text.indexOf('\t');
  if (indexOf != -1) {
    c.text=c.text.substring(0,indexOf);
  }
  indexOf=c.text.indexOf(' ');
  if (indexOf != -1) {
    c.text=c.text.substring(0,indexOf);
  }
  JavaHeuristicScanner scanner=new JavaHeuristicScanner(d);
  VjoIndenter indenter=new VjoIndenter(d,scanner,fProject);
  StringBuffer indent=indenter.computeIndentation(c.offset);
  if (indent == null)   indent=new StringBuffer();
  int docLength=d.getLength();
  if (c.offset == -1 || docLength == 0)   return;
  try {
    int p=(c.offset == docLength ? c.offset - 1 : c.offset);
    int line=d.getLineOfOffset(p);
    StringBuffer buf=new StringBuffer(c.text + indent);
    IRegion reg=d.getLineInformation(line);
    int lineEnd=reg.getOffset() + reg.getLength();
    int contentStart=findEndOfWhiteSpace(d,c.offset,lineEnd);
    c.length=Math.max(contentStart - c.offset,0);
    int start=reg.getOffset();
    ITypedRegion region=TextUtilities.getPartition(d,fPartitioning,start,true);
    if (IJavaScriptPartitions.JS_DOC.equals(region.getType()))     start=d.getLineInformationOfOffset(region.getOffset()).getOffset();
    if (closeBrace() && !isBlockBalanced(d) && (isAfterOpenBrace(d,c.offset) || !isClosedBrace(d,c.offset))) {
      c.caretOffset=c.offset + buf.length();
      c.shiftsCaret=false;
      copyContent(d,c,buf,lineEnd,contentStart);
      appendReference(d,c,indenter,buf,lineEnd,start);
      buf.append('}');
    }
 else     if (c.offset > start && contentStart < lineEnd && d.getChar(contentStart) == '}') {
      int firstCharPos=scanner.findNonWhitespaceBackward(c.offset - 1,start);
      if (firstCharPos != JavaHeuristicScanner.NOT_FOUND && d.getChar(firstCharPos) == '{') {
        c.caretOffset=c.offset + buf.length();
        c.shiftsCaret=false;
        appendReference(d,c,indenter,buf,lineEnd,start);
      }
    }
    c.text=buf.toString();
  }
 catch (  BadLocationException e) {
    DLTKUIPlugin.log(e);
  }
}","private void smartIndentAfterNewLine(IDocument d,DocumentCommand c){
  int indexOf=c.text.indexOf('\t');
  if (indexOf != -1) {
    c.text=c.text.substring(0,indexOf);
  }
  indexOf=c.text.indexOf(' ');
  if (indexOf != -1) {
    c.text=c.text.substring(0,indexOf);
  }
  JavaHeuristicScanner scanner=new JavaHeuristicScanner(d);
  VjoIndenter indenter=new VjoIndenter(d,scanner,fProject);
  StringBuffer indent=indenter.computeIndentation(c.offset);
  if (indent == null)   indent=new StringBuffer();
  int docLength=d.getLength();
  if (c.offset == -1 || docLength == 0)   return;
  try {
    int p=(c.offset == docLength ? c.offset - 1 : c.offset);
    int line=d.getLineOfOffset(p);
    StringBuffer buf=new StringBuffer(c.text + indent);
    IRegion reg=d.getLineInformation(line);
    int lineEnd=reg.getOffset() + reg.getLength();
    int contentStart=findEndOfWhiteSpace(d,c.offset,lineEnd);
    c.length=Math.max(contentStart - c.offset,0);
    int start=reg.getOffset();
    ITypedRegion region=TextUtilities.getPartition(d,fPartitioning,start,true);
    if (IJavaScriptPartitions.JS_DOC.equals(region.getType()))     start=d.getLineInformationOfOffset(region.getOffset()).getOffset();
    if (closeBrace() && !isBlockBalanced(d) && (isAfterOpenBrace(d,c.offset) || !isClosedBrace(d,c.offset))) {
      c.caretOffset=c.offset + buf.length();
      c.shiftsCaret=false;
      buf.append('}');
      copyContent(d,c,buf,lineEnd,contentStart);
      appendReference(d,c,indenter,buf,lineEnd,start);
    }
 else     if (c.offset > start && contentStart < lineEnd && d.getChar(contentStart) == '}') {
      int firstCharPos=scanner.findNonWhitespaceBackward(c.offset - 1,start);
      if (firstCharPos != JavaHeuristicScanner.NOT_FOUND && d.getChar(firstCharPos) == '{') {
        c.caretOffset=c.offset + buf.length();
        c.shiftsCaret=false;
        appendReference(d,c,indenter,buf,lineEnd,start);
      }
    }
    c.text=buf.toString();
  }
 catch (  BadLocationException e) {
    DLTKUIPlugin.log(e);
  }
}"
16995,"public JstMethod setOverloaded(List<IJstMethod> jstMethods){
  m_overloaded=jstMethods;
  return this;
}","public JstMethod setOverloaded(List<IJstMethod> jstMethods){
  if (jstMethods != null) {
    m_overloaded=new ArrayList<IJstMethod>();
    m_overloaded.addAll(jstMethods);
  }
 else {
    m_overloaded=jstMethods;
  }
  return this;
}"
16996,"/** 
 * @see BuildpathContainerInitializer#initialize(IPath,IScriptProject)
 */
public void initialize(IPath containerPath,IScriptProject project) throws CoreException {
  int size=containerPath.segmentCount();
  if (size > 0) {
    if (containerPath.segment(0).equals(VjetPlugin.JS_DEFAULT_SDK)) {
      IInterpreterInstall interp=resolveInterpreter(getNatureFromProject(project),getEnvironmentFromProject(project),containerPath);
      String[] defaultLibs=TsLibLoader.getJsNativeGroups();
      for (      String group : defaultLibs) {
        BuildPathUtils.addLinkForGroup(group);
      }
      JsSdkBuildpathContainer container=new JsSdkBuildpathContainer(interp,containerPath);
      DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
    }
  }
}","public void initialize(final IPath containerPath,final IScriptProject project) throws CoreException {
  int size=containerPath.segmentCount();
  if (size > 0) {
    if (containerPath.segment(0).equals(VjetPlugin.JS_DEFAULT_SDK)) {
      final String[] defaultLibs=TsLibLoader.getJsNativeGroups();
      Job job=new Job(""String_Node_Str""){
        public IStatus run(        IProgressMonitor monitor){
          try {
            IInterpreterInstall interp=resolveInterpreter(getNatureFromProject(project),getEnvironmentFromProject(project),containerPath);
            JsSdkBuildpathContainer container=null;
            for (            String group : defaultLibs) {
              BuildPathUtils.addLinkForGroup(group);
            }
            container=new JsSdkBuildpathContainer(interp,containerPath);
            container.setEntries(createEntries());
            DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
          }
 catch (          CoreException e) {
            return e.getStatus();
          }
 finally {
            monitor.done();
          }
          return Status.OK_STATUS;
        }
      }
;
      job.setRule(ResourcesPlugin.getWorkspace().getRoot());
      job.schedule();
    }
  }
}"
16997,"/** 
 * Computes the buildpath entries associated with a interpreter - one entry per library.
 * @param interpreter
 * @return buildpath entries
 */
private IBuildpathEntry[] computeBuildpathEntries(String sdkName){
  TypeSpaceMgr tmg=TypeSpaceMgr.getInstance();
  String[] defaultLibs=TsLibLoader.getJsNativeGroups();
  List entries=new ArrayList(defaultLibs.length);
  Set rawEntries=new HashSet(defaultLibs.length);
  for (int i=0; i < defaultLibs.length; i++) {
    String groupName=defaultLibs[i];
    if (rawEntries.contains(groupName))     continue;
    IBuildpathAttribute[] attributes=new IBuildpathAttribute[0];
    ArrayList excluded=new ArrayList();
    entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(BuildPathUtils.createPathForGroup(groupName)),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
    rawEntries.add(groupName);
  }
  return (IBuildpathEntry[])entries.toArray(new IBuildpathEntry[entries.size()]);
}","private IBuildpathEntry[] computeBuildpathEntries(String sdkName){
  List entries=m_entries;
  return (IBuildpathEntry[])entries.toArray(new IBuildpathEntry[entries.size()]);
}"
16998,"public IStatus run(IProgressMonitor monitor){
  try {
    IFile getZipFile=project.getProject().getFile(containerPath.lastSegment());
    String groupName=getZipFile.getFullPath().lastSegment();
    IFile zipfile=project.getProject().getFile(groupName);
    BuildPathUtils.initGroupWithTypeList(groupName,zipfile);
    BuildPathUtils.addLinkForGroup(groupName,groupName);
    System.out.println(containerPath);
    System.out.println(project);
    VJETZipContainer container=new VJETZipContainer(groupName,zipfile.getFullPath());
    container.setEntries(createEntries(groupName,getZipFile.getFullPath()));
    DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
  }
 catch (  CoreException e) {
    return e.getStatus();
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}","public IStatus run(IProgressMonitor monitor){
  try {
    IFile getZipFile=project.getProject().getFile(containerPath.lastSegment());
    String groupName=getZipFile.getFullPath().lastSegment();
    IFile zipfile=project.getProject().getFile(groupName);
    BuildPathUtils.initGroupWithTypeList(groupName,zipfile);
    BuildPathUtils.addLinkForGroup(groupName,groupName);
    VJETZipContainer container=new VJETZipContainer(groupName,zipfile.getFullPath());
    container.setEntries(createEntries(groupName,getZipFile.getFullPath()));
    DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
  }
 catch (  CoreException e) {
    return e.getStatus();
  }
 finally {
    monitor.done();
  }
  return Status.OK_STATUS;
}"
16999,"public void initialize(final IPath containerPath,final IScriptProject project) throws CoreException {
  Job job=new Job(""String_Node_Str""){
    public IStatus run(    IProgressMonitor monitor){
      try {
        IFile getZipFile=project.getProject().getFile(containerPath.lastSegment());
        String groupName=getZipFile.getFullPath().lastSegment();
        IFile zipfile=project.getProject().getFile(groupName);
        BuildPathUtils.initGroupWithTypeList(groupName,zipfile);
        BuildPathUtils.addLinkForGroup(groupName,groupName);
        System.out.println(containerPath);
        System.out.println(project);
        VJETZipContainer container=new VJETZipContainer(groupName,zipfile.getFullPath());
        container.setEntries(createEntries(groupName,getZipFile.getFullPath()));
        DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
      }
 catch (      CoreException e) {
        return e.getStatus();
      }
 finally {
        monitor.done();
      }
      return Status.OK_STATUS;
    }
    private List createEntries(    String groupName,    IPath containerPath){
      List entries=new ArrayList(1);
      IBuildpathAttribute[] attributes=new IBuildpathAttribute[0];
      ArrayList excluded=new ArrayList();
      entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(BuildPathUtils.createPathForGroup(groupName)),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
      entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(containerPath),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
      return entries;
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.schedule();
}","public void initialize(final IPath containerPath,final IScriptProject project) throws CoreException {
  Job job=new Job(""String_Node_Str""){
    public IStatus run(    IProgressMonitor monitor){
      try {
        IFile getZipFile=project.getProject().getFile(containerPath.lastSegment());
        String groupName=getZipFile.getFullPath().lastSegment();
        IFile zipfile=project.getProject().getFile(groupName);
        BuildPathUtils.initGroupWithTypeList(groupName,zipfile);
        BuildPathUtils.addLinkForGroup(groupName,groupName);
        VJETZipContainer container=new VJETZipContainer(groupName,zipfile.getFullPath());
        container.setEntries(createEntries(groupName,getZipFile.getFullPath()));
        DLTKCore.setBuildpathContainer(containerPath,new IScriptProject[]{project},new IBuildpathContainer[]{container},null);
      }
 catch (      CoreException e) {
        return e.getStatus();
      }
 finally {
        monitor.done();
      }
      return Status.OK_STATUS;
    }
    private List createEntries(    String groupName,    IPath containerPath){
      List entries=new ArrayList(1);
      IBuildpathAttribute[] attributes=new IBuildpathAttribute[0];
      ArrayList excluded=new ArrayList();
      entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(containerPath),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
      entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(BuildPathUtils.createPathForGroup(groupName)),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
      return entries;
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.schedule();
}"
17000,"private List createEntries(String groupName,IPath containerPath){
  List entries=new ArrayList(1);
  IBuildpathAttribute[] attributes=new IBuildpathAttribute[0];
  ArrayList excluded=new ArrayList();
  entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(BuildPathUtils.createPathForGroup(groupName)),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
  entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(containerPath),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
  return entries;
}","private List createEntries(String groupName,IPath containerPath){
  List entries=new ArrayList(1);
  IBuildpathAttribute[] attributes=new IBuildpathAttribute[0];
  ArrayList excluded=new ArrayList();
  entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(containerPath),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
  entries.add(new BuildpathEntry(IProjectFragment.K_BINARY,IBuildpathEntry.BPE_LIBRARY,ScriptProject.canonicalizedPath(BuildPathUtils.createPathForGroup(groupName)),false,BuildpathEntry.INCLUDE_ALL,(IPath[])excluded.toArray(new IPath[excluded.size()]),EMPTY_RULES,false,attributes,false));
  return entries;
}"
