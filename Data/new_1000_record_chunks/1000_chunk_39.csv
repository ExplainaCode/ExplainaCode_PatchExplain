record_number,buggy_code,fixed_code
38001,"private void sendDiscoveryFailed(String switchId,String portId,Tuple tuple) throws IOException {
  String discoFail=OFEMessageUtils.createIslFail(switchId,portId);
  Values dataVal=new Values(PAYLOAD,discoFail,switchId,portId,OFEMessageUtils.LINK_DOWN);
  collector.emit(topoEngTopic,tuple,dataVal);
  discovery.handleFailed(switchId,portId);
  logger.warn(""String_Node_Str"",discoFail);
}","private void sendDiscoveryFailed(String switchId,String portId,Tuple tuple) throws IOException {
  String discoFail=OFEMessageUtils.createIslFail(switchId,portId);
  collector.emit(topoEngTopic,tuple,new Values(PAYLOAD,discoFail));
  discovery.handleFailed(switchId,portId);
  logger.warn(""String_Node_Str"",discoFail);
}"
38002,"private void parseRecord(ConsumerRecord record){
  try {
    if (record.value() instanceof String) {
      String value=(String)record.value();
      BaseMessage message=MAPPER.readValue(value,BaseMessage.class);
      if (message instanceof CommandMessage) {
        logger.debug(""String_Node_Str"",value);
        doControllerMsg((CommandMessage)message);
      }
 else {
        logger.trace(""String_Node_Str"",message);
      }
    }
 else {
      logger.error(""String_Node_Str"",record.value());
    }
  }
 catch (  Exception exception) {
    logger.error(""String_Node_Str"",record.value(),exception);
  }
}","private void parseRecord(ConsumerRecord record){
  try {
    if (record.value() instanceof String) {
      String value=(String)record.value();
      CommandMessage message=MAPPER.readValue(value,CommandMessage.class);
      doControllerMsg((CommandMessage)message);
    }
 else {
      logger.error(""String_Node_Str"",record.value());
    }
  }
 catch (  Exception exception) {
    logger.error(""String_Node_Str"",record.value(),exception);
  }
}"
38003,"/** 
 * Returns CommandData entity constructed by data string from json resource file.
 * @param value data string from json resource file
 * @return CommandData entity
 * @throws IOException if mapping fails
 */
private static CommandData prepareData(String value) throws IOException {
  Message message=MAPPER.readValue(value,Message.class);
  CommandMessage commandMessage=(CommandMessage)message;
  return commandMessage.getData();
}","/** 
 * Returns CommandData entity constructed by data string from json resource file.
 * @param value data string from json resource file
 * @return CommandData entity
 * @throws IOException if mapping fails
 */
private static CommandData prepareData(String value) throws IOException {
  CommandMessage message=MAPPER.readValue(value,CommandMessage.class);
  return message.getData();
}"
38004,"/** 
 * Runs test case.
 * @param value       data string from json resource file
 * @param flowCommand OFFlowAdd instance to compare result with
 * @throws InterruptedException if test was interrupted during run
 */
private void runTest(final String value,final OFFlowAdd flowCommand,final OFMeterMod meterCommand,final OFFlowAdd reverseFlowCommand,final OFMeterMod reverseMeterCommand) throws InterruptedException {
  ConsumerRecord<String,String> record=new ConsumerRecord<>(""String_Node_Str"",0,0,""String_Node_Str"",value);
  KafkaMessageCollector.ParseRecord parseRecord=collector.new ParseRecord(record);
  Capture<OFFlowAdd> flowAddCapture=flowCommand == null ? null : newCapture(CaptureType.ALL);
  Capture<OFMeterMod> meterAddCapture=meterCommand == null ? null : newCapture(CaptureType.ALL);
  prepareMocks(flowAddCapture,meterAddCapture,reverseFlowCommand != null,reverseMeterCommand != null);
  parseRecordExecutor.execute(parseRecord);
  parseRecordExecutor.shutdown();
  parseRecordExecutor.awaitTermination(10,TimeUnit.SECONDS);
  if (meterCommand != null) {
    assertEquals(meterCommand,meterAddCapture.getValues().get(0));
    if (reverseMeterCommand != null) {
      assertEquals(reverseMeterCommand,meterAddCapture.getValues().get(1));
    }
  }
  if (flowCommand != null) {
    assertEquals(flowCommand,flowAddCapture.getValues().get(0));
    if (reverseFlowCommand != null) {
      assertEquals(reverseFlowCommand,flowAddCapture.getValues().get(1));
    }
  }
}","/** 
 * Runs test case.
 * @param value       data string from json resource file
 * @param flowCommand OFFlowAdd instance to compare result with
 * @throws InterruptedException if test was interrupted during run
 */
private void runTest(final String value,final OFFlowAdd flowCommand,final OFMeterMod meterCommand,final OFFlowAdd reverseFlowCommand,final OFMeterMod reverseMeterCommand) throws InterruptedException {
  ConsumerRecord<String,String> record=new ConsumerRecord<>(""String_Node_Str"",0,0,""String_Node_Str"",value);
  KafkaMessageCollector.ParseRecord parseRecord=collector.new ParseRecord(record);
  Capture<OFFlowAdd> flowAddCapture=flowCommand == null ? null : newCapture(CaptureType.ALL);
  Capture<OFMeterMod> meterAddCapture=meterCommand == null ? null : newCapture(CaptureType.ALL);
  prepareMocks(flowAddCapture,meterAddCapture,reverseFlowCommand != null,reverseMeterCommand != null);
  parseRecordExecutor.execute(parseRecord);
  parseRecordExecutor.shutdown();
  parseRecordExecutor.awaitTermination(10,TimeUnit.SECONDS);
  if (meterCommand != null) {
    System.out.println(""String_Node_Str"" + meterCommand);
    System.out.println(""String_Node_Str"" + meterAddCapture.getValues());
    assertEquals(meterCommand,meterAddCapture.getValues().get(0));
    if (reverseMeterCommand != null) {
      assertEquals(reverseMeterCommand,meterAddCapture.getValues().get(1));
    }
  }
  if (flowCommand != null) {
    assertEquals(flowCommand,flowAddCapture.getValues().get(0));
    if (reverseFlowCommand != null) {
      assertEquals(reverseFlowCommand,flowAddCapture.getValues().get(1));
    }
  }
}"
38005,"@Test @Ignore public void BasicSwitchPortEventsTest() throws Exception {
  System.out.println(""String_Node_Str"");
  String sw1_up=OFEMessageUtils.createSwitchDataMessage(OFEMessageUtils.SWITCH_UP,""String_Node_Str"");
  String sw2_up=OFEMessageUtils.createSwitchDataMessage(OFEMessageUtils.SWITCH_UP,""String_Node_Str"");
  String sw1p1_up=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_UP,""String_Node_Str"",""String_Node_Str"");
  String sw2p2_up=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_UP,""String_Node_Str"",""String_Node_Str"");
  String sw2p2_down=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_DOWN,""String_Node_Str"",""String_Node_Str"");
  String switch_topic=InfoEventSplitterBolt.I_SWITCH_UPDOWN;
  String port_topic=InfoEventSplitterBolt.I_PORT_UPDOWN;
  kProducer.pushMessage(switch_topic,sw1_up);
  kProducer.pushMessage(switch_topic,sw2_up);
  kProducer.pushMessage(port_topic,sw1p1_up);
  kProducer.pushMessage(port_topic,sw2p2_up);
  kProducer.pushMessage(switch_topic,sw1_up);
  kProducer.pushMessage(switch_topic,sw2_up);
  kProducer.pushMessage(port_topic,sw1p1_up);
  kProducer.pushMessage(port_topic,sw2p2_up);
  Utils.sleep(4 * 1000);
  messagesExpected=8;
  messagesReceived=safeLinesCount(discoFiler.getFiler().getFile());
  Assert.assertEquals(messagesExpected,messagesReceived);
  Utils.sleep(1 * 1000);
  kProducer.pushMessage(port_topic,sw2p2_down);
  Utils.sleep(2 * 1000);
  messagesReceived=safeLinesCount(discoFiler.getFiler().getFile());
  if (messagesReceived == 0) {
    System.out.println(""String_Node_Str"");
    for (    String s : Files.readLines(discoFiler.getFiler().getFile(),Charsets.UTF_8)) {
      System.out.println(""String_Node_Str"" + s);
    }
  }
  Assert.assertTrue(messagesReceived > 0);
  cluster.killTopology(manager.makeTopologyName());
  cluster.killTopology(""String_Node_Str"");
  Utils.sleep(4 * 1000);
}","@Test @Ignore public void BasicSwitchPortEventsTest() throws Exception {
  System.out.println(""String_Node_Str"");
  OFEventWFMTopology manager=new OFEventWFMTopology(makeLaunchEnvironment());
  TopologyConfig config=manager.getConfig();
  String sw1_up=OFEMessageUtils.createSwitchDataMessage(OFEMessageUtils.SWITCH_UP,""String_Node_Str"");
  String sw2_up=OFEMessageUtils.createSwitchDataMessage(OFEMessageUtils.SWITCH_UP,""String_Node_Str"");
  String sw1p1_up=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_UP,""String_Node_Str"",""String_Node_Str"");
  String sw2p2_up=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_UP,""String_Node_Str"",""String_Node_Str"");
  String sw2p2_down=OFEMessageUtils.createPortDataMessage(OFEMessageUtils.PORT_DOWN,""String_Node_Str"",""String_Node_Str"");
  String switch_topic=config.getKafkaTopoDiscoTopic();
  String port_topic=config.getKafkaTopoDiscoTopic();
  kProducer.pushMessage(switch_topic,sw1_up);
  kProducer.pushMessage(switch_topic,sw2_up);
  kProducer.pushMessage(port_topic,sw1p1_up);
  kProducer.pushMessage(port_topic,sw2p2_up);
  kProducer.pushMessage(switch_topic,sw1_up);
  kProducer.pushMessage(switch_topic,sw2_up);
  kProducer.pushMessage(port_topic,sw1p1_up);
  kProducer.pushMessage(port_topic,sw2p2_up);
  Utils.sleep(4 * 1000);
  messagesExpected=8;
  messagesReceived=safeLinesCount(discoFiler.getFiler().getFile());
  Assert.assertEquals(messagesExpected,messagesReceived);
  Utils.sleep(1 * 1000);
  kProducer.pushMessage(port_topic,sw2p2_down);
  Utils.sleep(2 * 1000);
  messagesReceived=safeLinesCount(discoFiler.getFiler().getFile());
  if (messagesReceived == 0) {
    System.out.println(""String_Node_Str"");
    for (    String s : Files.readLines(discoFiler.getFiler().getFile(),Charsets.UTF_8)) {
      System.out.println(""String_Node_Str"" + s);
    }
  }
  Assert.assertTrue(messagesReceived > 0);
  cluster.killTopology(manager.makeTopologyName());
  cluster.killTopology(""String_Node_Str"");
  Utils.sleep(4 * 1000);
}"
38006,"/** 
 * BasicLinkDiscoveryTest will exercise the basics of Link Discovery test. The key results should show up in a kafka topic, which are dumped to file.
 */
@Test @Ignore public void basicLinkDiscoveryTest() throws IOException, ConfigurationException, CmdLineException {
  System.out.println(""String_Node_Str"");
  OFEventWFMTopology manager=new OFEventWFMTopology(makeLaunchEnvironment());
  TopologyConfig config=manager.getConfig();
  Tuple tuple;
  KeyValueState<String,Object> state=new InMemoryKeyValueState<>();
  initMocks();
  List<PathNode> nodes=Arrays.asList(new PathNode(""String_Node_Str"",1,0,10L),new PathNode(""String_Node_Str"",2,1,10L));
  InfoData data=new IslInfoData(10L,nodes,10000L,IslChangeType.DISCOVERED,9000L);
  String isl_discovered=MAPPER.writeValueAsString(data);
  OFELinkBolt linkBolt=new OFELinkBolt(config);
  linkBolt.prepare(stormConfig(),topologyContext,outputCollector);
  linkBolt.initState(state);
  ArrayList<DiscoveryFilterEntity> skipNodes=new ArrayList<>(1);
  skipNodes.add(new DiscoveryFilterEntity(""String_Node_Str"",""String_Node_Str""));
  CommandMessage islFilterSetup=new CommandMessage(new DiscoveryFilterPopulateData(skipNodes),1,""String_Node_Str"",Destination.WFM_OF_DISCOVERY);
  String json=MAPPER.writeValueAsString(islFilterSetup);
  tuple=new TupleImpl(topologyContext,Collections.singletonList(json),4,""String_Node_Str"");
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",OFEMessageUtils.SWITCH_UP),0,InfoEventSplitterBolt.I_SWITCH_UPDOWN);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",OFEMessageUtils.SWITCH_UP),0,InfoEventSplitterBolt.I_SWITCH_UPDOWN);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",""String_Node_Str"",OFEMessageUtils.PORT_UP),1,InfoEventSplitterBolt.I_PORT_UPDOWN);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",""String_Node_Str"",OFEMessageUtils.PORT_UP),1,InfoEventSplitterBolt.I_PORT_UPDOWN);
  linkBolt.execute(tuple);
  Tuple tickTuple=new TupleImpl(topologyContext,Collections.emptyList(),2,Constants.SYSTEM_TICK_STREAM_ID);
  linkBolt.execute(tickTuple);
  tuple=new TupleImpl(topologyContext,Collections.singletonList(isl_discovered),3,InfoEventSplitterBolt.I_ISL_UPDOWN);
  linkBolt.execute(tuple);
  linkBolt.execute(tickTuple);
  linkBolt.execute(tickTuple);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  linkBolt.execute(tickTuple);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
}","/** 
 * BasicLinkDiscoveryTest will exercise the basics of Link Discovery test. The key results should show up in a kafka topic, which are dumped to file.
 */
@Test @Ignore public void basicLinkDiscoveryTest() throws IOException, ConfigurationException, CmdLineException {
  System.out.println(""String_Node_Str"");
  OFEventWFMTopology manager=new OFEventWFMTopology(makeLaunchEnvironment());
  TopologyConfig config=manager.getConfig();
  String topo_input_topic=config.getKafkaTopoDiscoTopic();
  Tuple tuple;
  KeyValueState<String,Object> state=new InMemoryKeyValueState<>();
  initMocks(topo_input_topic);
  List<PathNode> nodes=Arrays.asList(new PathNode(""String_Node_Str"",1,0,10L),new PathNode(""String_Node_Str"",2,1,10L));
  InfoData data=new IslInfoData(10L,nodes,10000L,IslChangeType.DISCOVERED,9000L);
  String isl_discovered=MAPPER.writeValueAsString(data);
  OFELinkBolt linkBolt=new OFELinkBolt(config);
  linkBolt.prepare(stormConfig(),topologyContext,outputCollector);
  linkBolt.initState(state);
  ArrayList<DiscoveryFilterEntity> skipNodes=new ArrayList<>(1);
  skipNodes.add(new DiscoveryFilterEntity(""String_Node_Str"",""String_Node_Str""));
  CommandMessage islFilterSetup=new CommandMessage(new DiscoveryFilterPopulateData(skipNodes),1,""String_Node_Str"",Destination.WFM_OF_DISCOVERY);
  String json=MAPPER.writeValueAsString(islFilterSetup);
  tuple=new TupleImpl(topologyContext,Collections.singletonList(json),4,""String_Node_Str"");
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",OFEMessageUtils.SWITCH_UP),0,topo_input_topic);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",OFEMessageUtils.SWITCH_UP),0,topo_input_topic);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",""String_Node_Str"",OFEMessageUtils.PORT_UP),1,topo_input_topic);
  linkBolt.execute(tuple);
  tuple=new TupleImpl(topologyContext,Arrays.asList(""String_Node_Str"",""String_Node_Str"",OFEMessageUtils.PORT_UP),1,topo_input_topic);
  linkBolt.execute(tuple);
  Tuple tickTuple=new TupleImpl(topologyContext,Collections.emptyList(),2,Constants.SYSTEM_TICK_STREAM_ID);
  linkBolt.execute(tickTuple);
  tuple=new TupleImpl(topologyContext,Collections.singletonList(isl_discovered),3,topo_input_topic);
  linkBolt.execute(tuple);
  linkBolt.execute(tickTuple);
  linkBolt.execute(tickTuple);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  linkBolt.execute(tickTuple);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
  messagesExpected=7;
  messagesReceived=outputCollectorMock.getMessagesCount(config.getKafkaTopoDiscoTopic());
  Assert.assertEquals(messagesExpected,messagesReceived);
}"
38007,"private void initMocks(){
  Fields switchSchema=new Fields(OFEMessageUtils.FIELD_SWITCH_ID,OFEMessageUtils.FIELD_STATE);
  when(topologyContext.getComponentId(0)).thenReturn(InfoEventSplitterBolt.I_SWITCH_UPDOWN);
  when(topologyContext.getComponentOutputFields(InfoEventSplitterBolt.I_SWITCH_UPDOWN,InfoEventSplitterBolt.I_SWITCH_UPDOWN)).thenReturn(switchSchema);
  Fields portSchema=new Fields(OFEMessageUtils.FIELD_SWITCH_ID,OFEMessageUtils.FIELD_PORT_ID,OFEMessageUtils.FIELD_STATE);
  when(topologyContext.getComponentId(1)).thenReturn(InfoEventSplitterBolt.I_PORT_UPDOWN);
  when(topologyContext.getComponentOutputFields(InfoEventSplitterBolt.I_PORT_UPDOWN,InfoEventSplitterBolt.I_PORT_UPDOWN)).thenReturn(portSchema);
  Fields tickSchema=new Fields();
  when(topologyContext.getComponentId(2)).thenReturn(Constants.SYSTEM_COMPONENT_ID);
  when(topologyContext.getComponentOutputFields(Constants.SYSTEM_COMPONENT_ID,Constants.SYSTEM_TICK_STREAM_ID)).thenReturn(tickSchema);
  Fields islSchema=new Fields(InfoEventSplitterBolt.I_ISL_UPDOWN);
  when(topologyContext.getComponentId(3)).thenReturn(InfoEventSplitterBolt.I_ISL_UPDOWN);
  when(topologyContext.getComponentOutputFields(InfoEventSplitterBolt.I_ISL_UPDOWN,InfoEventSplitterBolt.I_ISL_UPDOWN)).thenReturn(islSchema);
  when(topologyContext.getComponentId(4)).thenReturn(OFEventWFMTopology.SPOUT_ID_INPUT);
  when(topologyContext.getComponentOutputFields(OFEventWFMTopology.SPOUT_ID_INPUT,AbstractTopology.MESSAGE_FIELD)).thenReturn(AbstractTopology.fieldMessage);
}","private void initMocks(String topo_input_topic){
  Fields switchSchema=new Fields(OFEMessageUtils.FIELD_SWITCH_ID,OFEMessageUtils.FIELD_STATE);
  when(topologyContext.getComponentId(0)).thenReturn(topo_input_topic);
  when(topologyContext.getComponentOutputFields(topo_input_topic,topo_input_topic)).thenReturn(switchSchema);
  Fields portSchema=new Fields(OFEMessageUtils.FIELD_SWITCH_ID,OFEMessageUtils.FIELD_PORT_ID,OFEMessageUtils.FIELD_STATE);
  when(topologyContext.getComponentId(1)).thenReturn(topo_input_topic);
  when(topologyContext.getComponentOutputFields(topo_input_topic,topo_input_topic)).thenReturn(portSchema);
  Fields tickSchema=new Fields();
  when(topologyContext.getComponentId(2)).thenReturn(Constants.SYSTEM_COMPONENT_ID);
  when(topologyContext.getComponentOutputFields(Constants.SYSTEM_COMPONENT_ID,Constants.SYSTEM_TICK_STREAM_ID)).thenReturn(tickSchema);
  Fields islSchema=new Fields(topo_input_topic);
  when(topologyContext.getComponentId(3)).thenReturn(topo_input_topic);
  when(topologyContext.getComponentOutputFields(topo_input_topic,topo_input_topic)).thenReturn(islSchema);
  when(topologyContext.getComponentId(4)).thenReturn(OFEventWFMTopology.SPOUT_ID_INPUT);
  when(topologyContext.getComponentOutputFields(OFEventWFMTopology.SPOUT_ID_INPUT,AbstractTopology.MESSAGE_FIELD)).thenReturn(AbstractTopology.fieldMessage);
}"
38008,"@BeforeClass public static void setupOnce() throws Exception {
  System.out.println(""String_Node_Str"");
  makeConfigFile();
  server=new TestUtils.KafkaTestFixture(makeUnboundConfig());
  server.start();
  cluster=new LocalCluster();
  kProducer=new TestKafkaProducer(kafkaProperties());
}","@BeforeClass public static void setupOnce() throws Exception {
  System.out.println(""String_Node_Str"");
  clusterParam=new MkClusterParam();
  clusterParam.setSupervisors(1);
  Config daemonConfig=new Config();
  daemonConfig.put(Config.STORM_LOCAL_MODE_ZMQ,false);
  clusterParam.setDaemonConf(daemonConfig);
  makeConfigFile();
  Config conf=new Config();
  conf.setNumWorkers(1);
  completeTopologyParam=new CompleteTopologyParam();
  completeTopologyParam.setStormConf(conf);
}"
38009,"@Override public void execute(Tuple tuple){
  try {
    String tupleSource=tuple.getSourceComponent();
switch (tupleSource) {
case SimulatorTopology.SIMULATOR_SPOUT:
      doCommand(tuple);
    break;
default :
  logger.error(""String_Node_Str"",tupleSource);
}
}
 catch (Exception e) {
logger.error(e);
}
 finally {
collector.ack(tuple);
}
}","@Override public void execute(Tuple tuple){
  try {
    String tupleSource=tuple.getSourceComponent();
switch (tupleSource) {
case SimulatorTopology.SIMULATOR_SPOUT:
      doCommand(tuple);
    break;
default :
  logger.error(""String_Node_Str"",tupleSource);
}
}
 catch (Exception e) {
logger.error(e.toString());
}
 finally {
collector.ack(tuple);
}
}"
38010,"protected List<Values> addSwitch(SwitchMessage switchMessage) throws Exception {
  ISwitchImpl sw=switches.get(switchMessage.getDpid());
  List<Values> values=new ArrayList<>();
  if (sw == null) {
    logger.info(""String_Node_Str"");
    sw=new ISwitchImpl(switchMessage.getDpid(),switchMessage.getNumOfPorts(),PortStateType.DOWN);
    sw.activate();
    List<LinkMessage> links=switchMessage.getLinks();
    for (    LinkMessage l : links) {
      IPortImpl localPort=sw.getPort(l.getLocalPort());
      localPort.setLatency(l.getLatency());
      localPort.setPeerPortNum(l.getPeerPort());
      localPort.setPeerSwitch(l.getPeerSwitch());
      localPort.enable();
    }
    switches.put(sw.getDpid().toString(),sw);
    values.add(new Values(""String_Node_Str"",makeSwitchMessage(sw,SwitchState.ADDED)));
    values.add(new Values(""String_Node_Str"",makeSwitchMessage(sw,SwitchState.ACTIVATED)));
    for (    IPortImpl p : sw.getPorts()) {
      PortChangeType changeType=p.isActive() ? PortChangeType.UP : PortChangeType.DOWN;
      values.add(new Values(""String_Node_Str"",makePortMessage(sw,p.getNumber(),changeType)));
    }
  }
  return values;
}","protected List<Values> addSwitch(SwitchMessage switchMessage) throws Exception {
  ISwitchImpl sw=switches.get(switchMessage.getDpid());
  List<Values> values=new ArrayList<>();
  if (sw == null) {
    logger.info(""String_Node_Str"");
    sw=new ISwitchImpl(switchMessage.getDpid(),switchMessage.getNumOfPorts(),PortStateType.DOWN);
    sw.activate();
    List<LinkMessage> links=switchMessage.getLinks();
    for (    LinkMessage l : links) {
      IPortImpl localPort=sw.getPort(l.getLocalPort());
      localPort.setLatency(l.getLatency());
      localPort.setPeerPortNum(l.getPeerPort());
      localPort.setPeerSwitch(l.getPeerSwitch());
      localPort.enable();
    }
    switches.put(sw.getDpid().toString(),sw);
    values.add(new Values(""String_Node_Str"",makeSwitchMessage(sw,SwitchState.ADDED)));
    values.add(new Values(""String_Node_Str"",makeSwitchMessage(sw,SwitchState.ACTIVATED)));
    for (    IPortImpl p : sw.getPorts()) {
      PortChangeType changeType=p.isActive() ? PortChangeType.UP : PortChangeType.DOWN;
      if (changeType == PortChangeType.UP) {
        values.add(new Values(""String_Node_Str"",makePortMessage(sw,p.getNumber(),changeType)));
      }
    }
  }
  return values;
}"
38011,"protected void discoverIslPartTwo(Tuple tuple,IslInfoData data) throws Exception {
  ISwitchImpl sw=getSwitch(data.getPath().get(1).getSwitchId());
  if (!sw.isActive()) {
    return;
  }
  IPortImpl port=sw.getPort(data.getPath().get(1).getPortNo());
  if (port.isActiveIsl()) {
    long now=Instant.now().toEpochMilli();
    InfoMessage infoMessage=new InfoMessage(data,now,""String_Node_Str"",null);
    logger.info(""String_Node_Str"",data.toString());
    collector.emit(SimulatorTopology.KAFKA_BOLT_STREAM,tuple,new Values(""String_Node_Str"",Utils.MAPPER.writeValueAsString(infoMessage)));
  }
}","protected void discoverIslPartTwo(Tuple tuple,IslInfoData data) throws Exception {
  ISwitchImpl sw=getSwitch(data.getPath().get(1).getSwitchId());
  if (!sw.isActive()) {
    return;
  }
  IPortImpl port=sw.getPort(data.getPath().get(1).getPortNo());
  if (port.isActiveIsl()) {
    long now=Instant.now().toEpochMilli();
    InfoMessage infoMessage=new InfoMessage(data,now,""String_Node_Str"",null);
    logger.debug(""String_Node_Str"",data.toString());
    collector.emit(SimulatorTopology.KAFKA_BOLT_STREAM,tuple,new Values(""String_Node_Str"",Utils.MAPPER.writeValueAsString(infoMessage)));
  }
}"
38012,"@Override public void execute(Tuple tuple){
  logger.debug(""String_Node_Str"",tuple.toString());
  try {
    String tupleSource=tuple.getSourceComponent();
switch (tupleSource) {
case SimulatorTopology.COMMAND_BOLT:
case SimulatorTopology.SWITCH_BOLT:
      doCommand(tuple);
    break;
case SimulatorTopology.SIMULATOR_COMMAND_BOLT:
  doSimulatorCommand(tuple);
break;
default :
logger.error(""String_Node_Str"",tupleSource);
}
}
 catch (Exception e) {
logger.error(e);
e.printStackTrace();
}
 finally {
collector.ack(tuple);
}
}","@Override public void execute(Tuple tuple){
  logger.debug(""String_Node_Str"",tuple.toString());
  try {
    String tupleSource=tuple.getSourceComponent();
switch (tupleSource) {
case SimulatorTopology.COMMAND_BOLT:
case SimulatorTopology.SWITCH_BOLT:
      doCommand(tuple);
    break;
case SimulatorTopology.SIMULATOR_COMMAND_BOLT:
  doSimulatorCommand(tuple);
break;
default :
logger.error(""String_Node_Str"",tupleSource);
}
}
 catch (Exception e) {
logger.error(e.toString());
e.printStackTrace();
}
 finally {
collector.ack(tuple);
}
}"
38013,"@Test public void getFlowName() throws Exception {
  assertEquals(flowName,flow.getCookie());
}","@Test public void getFlowName() throws Exception {
  assertEquals(flowName,flow.getFlowName());
}"
38014,"/** 
 * Instance constructor.
 * @param flowName        name of the flow
 * @param switchId        switch ID for flow installation
 * @param inputPort       input port of the flow
 * @param outputPort      output port of the flow
 * @param inputVlanId     input vlan id value
 * @param outputVlanId    output vlan id value
 * @param outputVlanType  output vlan tag action
 * @param bandwidth       flow bandwidth
 * @param inputMeterId    allocated meter id
 * @param outputMeterId   allocated meter id
 * @throws IllegalArgumentException if any of arguments is null
 */
@JsonCreator public InstallOneSwitchFlowCommandData(@JsonProperty(""String_Node_Str"") String cookie,@JsonProperty(""String_Node_Str"") String switchId,@JsonProperty(""String_Node_Str"") Number inputPort,@JsonProperty(""String_Node_Str"") Number outputPort,@JsonProperty(""String_Node_Str"") Number inputVlanId,@JsonProperty(""String_Node_Str"") Number outputVlanId,@JsonProperty(""String_Node_Str"") OutputVlanType outputVlanType,@JsonProperty(""String_Node_Str"") Number bandwidth,@JsonProperty(""String_Node_Str"") Number inputMeterId,@JsonProperty(""String_Node_Str"") Number outputMeterId){
  super(cookie,switchId,inputPort,outputPort);
  setInputVlanId(inputVlanId);
  setOutputVlanId(outputVlanId);
  setOutputVlanType(outputVlanType);
  setBandwidth(bandwidth);
  setInputMeterId(inputMeterId);
  setOutputMeterId(outputMeterId);
}","/** 
 * Instance constructor.
 * @param flowName        name of the flow
 * @param switchId        switch ID for flow installation
 * @param inputPort       input port of the flow
 * @param outputPort      output port of the flow
 * @param inputVlanId     input vlan id value
 * @param outputVlanId    output vlan id value
 * @param outputVlanType  output vlan tag action
 * @param bandwidth       flow bandwidth
 * @param inputMeterId    allocated meter id
 * @param outputMeterId   allocated meter id
 * @throws IllegalArgumentException if any of arguments is null
 */
@JsonCreator public InstallOneSwitchFlowCommandData(@JsonProperty(""String_Node_Str"") String flowName,@JsonProperty(""String_Node_Str"") String switchId,@JsonProperty(""String_Node_Str"") Number inputPort,@JsonProperty(""String_Node_Str"") Number outputPort,@JsonProperty(""String_Node_Str"") Number inputVlanId,@JsonProperty(""String_Node_Str"") Number outputVlanId,@JsonProperty(""String_Node_Str"") OutputVlanType outputVlanType,@JsonProperty(""String_Node_Str"") Number bandwidth,@JsonProperty(""String_Node_Str"") Number inputMeterId,@JsonProperty(""String_Node_Str"") Number outputMeterId){
  super(flowName,switchId,inputPort,outputPort);
  setInputVlanId(inputVlanId);
  setOutputVlanId(outputVlanId);
  setOutputVlanType(outputVlanType);
  setBandwidth(bandwidth);
  setInputMeterId(inputMeterId);
  setOutputMeterId(outputMeterId);
}"
38015,"/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return toStringHelper(this).addValue(cookie).addValue(switchId).addValue(inputPort).addValue(outputPort).addValue(inputVlanId).addValue(outputVlanId).addValue(outputVlanType).addValue(bandwidth).addValue(inputMeterId).addValue(outputMeterId).toString();
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return toStringHelper(this).addValue(flowName).addValue(switchId).addValue(inputPort).addValue(outputPort).addValue(inputVlanId).addValue(outputVlanId).addValue(outputVlanType).addValue(bandwidth).addValue(inputMeterId).addValue(outputMeterId).toString();
}"
38016,"/** 
 * The data field holds the ""message_type"" and ""state"" fields.
 * @param root the ""data"" field of an ""INFO"" message
 */
private void splitInfoMessage(Map<String,?> root,Tuple tuple) throws JsonProcessingException {
  Values dataVal=new Values(""String_Node_Str"",new ObjectMapper().writeValueAsString(root));
  String key=((String)root.get(""String_Node_Str"")).toLowerCase();
  String state=(String)root.get(""String_Node_Str"");
switch (key) {
case ""String_Node_Str"":
    _collector.emit(I_SWITCH,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH,dataVal);
if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
  _collector.emit(I_SWITCH_UPDOWN,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH_UPDOWN,dataVal);
}
 else {
  _collector.emit(I_SWITCH_OTHER,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH_OTHER,dataVal);
}
break;
case ""String_Node_Str"":
_collector.emit(I_PORT,tuple,dataVal);
if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
_collector.emit(I_PORT_UPDOWN,tuple,dataVal);
}
 else {
_collector.emit(I_PORT_OTHER,tuple,dataVal);
}
break;
case ""String_Node_Str"":
_collector.emit(I_ISL,tuple,dataVal);
if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
_collector.emit(I_ISL_UPDOWN,tuple,dataVal);
}
 else {
_collector.emit(I_ISL_OTHER,tuple,dataVal);
}
break;
default :
_collector.emit(I_OTHER,tuple,dataVal);
logger.warn(""String_Node_Str"",key,root);
}
}","/** 
 * The data field holds the ""message_type"" and ""state"" fields.
 * @param root the ""data"" field of an ""INFO"" message
 */
private void splitInfoMessage(Map<String,?> root,Tuple tuple) throws JsonProcessingException {
  Values dataVal=new Values(""String_Node_Str"",new ObjectMapper().writeValueAsString(root));
  String key=((String)root.get(""String_Node_Str"")).toLowerCase();
  String state=(String)root.get(""String_Node_Str"");
switch (key) {
case ""String_Node_Str"":
    _collector.emit(I_SWITCH,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH,dataVal);
if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
  _collector.emit(I_SWITCH_UPDOWN,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH_UPDOWN,dataVal);
}
 else {
  _collector.emit(I_SWITCH_OTHER,tuple,dataVal);
  logger.debug(""String_Node_Str"",I_SWITCH_OTHER,dataVal);
}
break;
case ""String_Node_Str"":
_collector.emit(I_PORT,tuple,dataVal);
logger.debug(""String_Node_Str"",I_PORT,dataVal);
if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
_collector.emit(I_PORT_UPDOWN,tuple,dataVal);
}
 else {
_collector.emit(I_PORT_OTHER,tuple,dataVal);
}
break;
case ""String_Node_Str"":
_collector.emit(I_ISL,tuple,dataVal);
logger.debug(""String_Node_Str"",I_ISL,dataVal);
if (state != null && (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str""))) {
_collector.emit(I_ISL_UPDOWN,tuple,dataVal);
}
 else {
_collector.emit(I_ISL_OTHER,tuple,dataVal);
}
break;
default :
_collector.emit(I_OTHER,tuple,dataVal);
logger.warn(""String_Node_Str"",key,root);
}
}"
38017,"/** 
 * This will create all of the topics passed in. - Currently doesn't check to see if they already exist.
 */
public void createTopics(String[] topics,int partitions,int replication){
  int sessionTimeoutMs=5 * 1000;
  int connectionTimeoutMs=5 * 1000;
  ZkClient zkClient=new ZkClient(zookeeperHost,sessionTimeoutMs,connectionTimeoutMs,ZKStringSerializer$.MODULE$);
  boolean isSecureKafkaCluster=false;
  ZkUtils zkUtils=new ZkUtils(zkClient,new ZkConnection(zookeeperHost),isSecureKafkaCluster);
  Properties topicConfig=new Properties();
  for (  String topic : topics) {
    AdminUtils.createTopic(zkUtils,topic,partitions,replication,topicConfig,RackAwareMode.Disabled$.MODULE$);
  }
  zkClient.close();
}","/** 
 * Create the topic, using the default setting for Partitions and Replication
 */
public void createTopics(String[] topics){
  createTopics(topics,1,1);
}"
38018,"public void primeKafkaTopic(String topic){
  kProducer.send(new ProducerRecord<>(topic,""String_Node_Str"",""String_Node_Str""));
}","public void primeKafkaTopic(String topic){
  if (!kutils.topicExists(topic)) {
    kutils.createTopics(new String[]{topic});
  }
}"
38019,"public StormTopology createTopology(){
  logger.debug(""String_Node_Str"" + this.getClass().getSimpleName());
  TopologyBuilder builder=new TopologyBuilder();
  BoltDeclarer kbolt=builder.setBolt(kafkaOutputTopic + ""String_Node_Str"",kutils.createKafkaBolt(kafkaOutputTopic),parallelism);
  BoltDeclarer[] tbolt=new BoltDeclarer[bolts.length];
  for (int i=0; i < topics.length; i++) {
    String topic=topics[i];
    String spoutName=topic + ""String_Node_Str"";
    String boltName=topic + ""String_Node_Str"";
    builder.setSpout(spoutName,kutils.createKafkaSpout(topic));
    tbolt[i]=builder.setBolt(boltName,bolts[i],parallelism).shuffleGrouping(spoutName);
    kbolt=kbolt.shuffleGrouping(boltName,kafkaOutputTopic);
  }
  tbolt[2].shuffleGrouping(topics[0] + ""String_Node_Str"",kafkaOutputTopic).shuffleGrouping(topics[1] + ""String_Node_Str"",kafkaOutputTopic);
  String discoTopic=((OFELinkBolt)bolts[2]).islDiscoTopic;
  builder.setBolt(""String_Node_Str"",kutils.createKafkaBolt(discoTopic),parallelism).shuffleGrouping(topics[2] + ""String_Node_Str"",discoTopic);
  return builder.createTopology();
}","public StormTopology createTopology(){
  logger.debug(""String_Node_Str"" + this.getClass().getSimpleName());
  TopologyBuilder builder=new TopologyBuilder();
  primeTopic(kafkaOutputTopic);
  BoltDeclarer kbolt=builder.setBolt(kafkaOutputTopic + ""String_Node_Str"",kutils.createKafkaBolt(kafkaOutputTopic),parallelism);
  BoltDeclarer[] tbolt=new BoltDeclarer[bolts.length];
  for (int i=0; i < topics.length; i++) {
    String topic=topics[i];
    String spoutName=topic + ""String_Node_Str"";
    String boltName=topic + ""String_Node_Str"";
    primeTopic(topic);
    builder.setSpout(spoutName,kutils.createKafkaSpout(topic));
    tbolt[i]=builder.setBolt(boltName,bolts[i],parallelism).shuffleGrouping(spoutName);
    kbolt=kbolt.shuffleGrouping(boltName,kafkaOutputTopic);
  }
  tbolt[2].shuffleGrouping(topics[0] + ""String_Node_Str"",kafkaOutputTopic).shuffleGrouping(topics[1] + ""String_Node_Str"",kafkaOutputTopic);
  String discoTopic=((OFELinkBolt)bolts[2]).islDiscoTopic;
  builder.setBolt(""String_Node_Str"",kutils.createKafkaBolt(discoTopic),parallelism).shuffleGrouping(topics[2] + ""String_Node_Str"",discoTopic);
  return builder.createTopology();
}"
38020,"@Test public void KafkaSplitterTest() throws IOException {
  Properties kprops=new Properties();
  kprops.put(""String_Node_Str"",TestUtils.kafkaUrl);
  OFEventSplitterTopology splitter=new OFEventSplitterTopology().withKafkaProps(kprops);
  splitter.kutils=kutils;
  LocalCluster cluster=new LocalCluster();
  cluster.submitTopology(splitter.defaultTopoName,stormConfig(),splitter.createTopology());
  KafkaFilerTopology kfiler=new KafkaFilerTopology();
  cluster.submitTopology(""String_Node_Str"",stormConfig(),kfiler.createTopology(InfoEventSplitterBolt.I_SWITCH_UPDOWN,server.tempDir.getAbsolutePath(),TestUtils.zookeeperUrl));
  Utils.sleep(4 * 1000);
  SendMessages(splitter.topic);
  Utils.sleep(8 * 1000);
  long messagesExpected=4;
  long messagesReceived=Files.readLines(kfiler.filer.getFile(),Charsets.UTF_8).size();
  Assert.assertEquals(messagesExpected,messagesReceived);
  Utils.sleep(2 * 1000);
  cluster.killTopology(splitter.defaultTopoName);
}","@Test public void KafkaSplitterTest() throws IOException {
  Properties kprops=new Properties();
  kprops.put(""String_Node_Str"",TestUtils.kafkaUrl);
  OFEventSplitterTopology splitter=new OFEventSplitterTopology().withKafkaProps(kprops);
  splitter.kutils=kutils;
  LocalCluster cluster=new LocalCluster();
  cluster.submitTopology(splitter.defaultTopoName,stormConfig(),splitter.createTopology());
  KafkaFilerTopology kfiler=new KafkaFilerTopology();
  cluster.submitTopology(""String_Node_Str"",stormConfig(),kfiler.createTopology(InfoEventSplitterBolt.I_SWITCH_UPDOWN,server.tempDir.getAbsolutePath(),TestUtils.zookeeperUrl));
  Utils.sleep(4 * 1000);
  SendMessages(splitter.topic);
  Utils.sleep(8 * 1000);
  long messagesExpected=3;
  long messagesReceived=Files.readLines(kfiler.filer.getFile(),Charsets.UTF_8).size();
  Assert.assertEquals(messagesExpected,messagesReceived);
  Utils.sleep(2 * 1000);
  cluster.killTopology(splitter.defaultTopoName);
}"
38021,"public Observer<QuoteModel> getQuoteObserver(){
  return new Observer<QuoteModel>(){
    @Override public void onSubscribe(    Disposable d){
      compositeDisposable.add(d);
    }
    @Override public void onNext(    QuoteModel quoteModel){
      quoteTV.setText(quoteModel.getResult().getQuote());
      authorTV.setText(quoteModel.getResult().getAuthor());
      mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}","public Observer<QuoteModel> getQuoteObserver(){
  return new Observer<QuoteModel>(){
    @Override public void onSubscribe(    Disposable d){
      compositeDisposable.add(d);
    }
    @Override public void onNext(    QuoteModel quoteModel){
      String quote=quoteModel.getResult().getQuote();
      if (quote.length() > 224) {
        setQuoteToBottomSheet(getQuoteObservableFromPresenter());
      }
 else {
        quoteTV.setText(quoteModel.getResult().getQuote());
        authorTV.setText(quoteModel.getResult().getAuthor());
        mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
}"
38022,"@Override public void onNext(QuoteModel quoteModel){
  quoteTV.setText(quoteModel.getResult().getQuote());
  authorTV.setText(quoteModel.getResult().getAuthor());
  mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
}","@Override public void onNext(QuoteModel quoteModel){
  String quote=quoteModel.getResult().getQuote();
  if (quote.length() > 224) {
    setQuoteToBottomSheet(getQuoteObservableFromPresenter());
  }
 else {
    quoteTV.setText(quoteModel.getResult().getQuote());
    authorTV.setText(quoteModel.getResult().getAuthor());
    mBottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
  }
}"
38023,"@Override public void onCreate(@Nullable Bundle savedInstanceState){
  DaggerArchiveFragmentComponent.builder().rVAdapterModule(new RVAdapterModule(getContext())).build().injectFragment(this);
  ;
  super.onCreate(savedInstanceState);
}","@Override public void onCreate(@Nullable Bundle savedInstanceState){
  DaggerArchiveFragmentComponent.builder().rVAdapterModule(new RVAdapterModule(getContext())).build().injectFragment(this);
  super.onCreate(savedInstanceState);
}"
38024,"public void setOnItemClickListenerToAdapter(){
  rvAdapter.setOnItemClickListener((view,position,data) -> {
    popupMenu=new PopupMenu(view.getContext(),view);
    popupMenu.getMenuInflater().inflate(R.menu.popup_menu,popupMenu.getMenu());
    popupMenu.setOnMenuItemClickListener(item -> {
      if (item.getItemId() == R.id.delete) {
        final QuoteDb quoteDb=QuoteDb.getQuoteDb(getContext());
        rvAdapter.quoteList.remove(position);
        quoteDb.quoteDao().deleteOne(rvAdapter.quoteList.get(position));
        rvAdapter.notifyItemRemoved(position);
        return true;
      }
      if (item.getItemId() == R.id.share) {
        Intent intent=new Intent();
        intent.setAction(Intent.ACTION_SEND);
        intent.setType(""String_Node_Str"");
        intent.putExtra(Intent.EXTRA_TEXT,rvAdapter.quoteList.get(position).getQuote());
        view.getContext().startActivity(Intent.createChooser(intent,""String_Node_Str""));
        return true;
      }
      return true;
    }
);
    popupMenu.show();
  }
);
}","public void setOnItemClickListenerToAdapter(){
  rvAdapter.setOnItemClickListener((view,position,data) -> {
    popupMenu=new PopupMenu(view.getContext(),view);
    popupMenu.getMenuInflater().inflate(R.menu.popup_menu,popupMenu.getMenu());
    popupMenu.setOnMenuItemClickListener(item -> {
      if (item.getItemId() == R.id.delete) {
        final QuoteDb quoteDb=QuoteDb.getQuoteDb(getContext());
        quoteDb.quoteDao().deleteOne(rvAdapter.quoteList.get(position));
        rvAdapter.quoteList.remove(position);
        rvAdapter.notifyItemRemoved(position);
        return true;
      }
      if (item.getItemId() == R.id.share) {
        Intent intent=new Intent();
        intent.setAction(Intent.ACTION_SEND);
        intent.setType(""String_Node_Str"");
        intent.putExtra(Intent.EXTRA_TEXT,rvAdapter.quoteList.get(position).getQuote());
        view.getContext().startActivity(Intent.createChooser(intent,""String_Node_Str""));
        return true;
      }
      return true;
    }
);
    popupMenu.show();
  }
);
}"
38025,"@Override public void onResponse(Call<QuoteModel> call,Response<QuoteModel> response){
  if (response.isSuccessful()) {
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    String code=String.valueOf(response.code());
    Toast.makeText(getContext(),response.message() + code,Toast.LENGTH_SHORT).show();
  }
}","@Override public void onResponse(Call<QuoteModel> call,Response<QuoteModel> response){
  if (response.isSuccessful()) {
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    try {
      Toast.makeText(getContext(),response.errorBody().string(),Toast.LENGTH_SHORT).show();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}"
38026,"@Override public void onClick(View v){
  QuoteProvider QProvider=new QuoteProvider();
  QuoteClient QService=QProvider.getmQService();
  JSONObject josonBody=new JSONObject();
  try {
    josonBody.put(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  String api_key=josonBody.toString();
  Call<QuoteModel> call=QService.getQuote(api_key);
  call.enqueue(new Callback<QuoteModel>(){
    @Override public void onResponse(    Call<QuoteModel> call,    Response<QuoteModel> response){
      if (response.isSuccessful()) {
        Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        String code=String.valueOf(response.code());
        Toast.makeText(getContext(),response.message() + code,Toast.LENGTH_SHORT).show();
      }
    }
    @Override public void onFailure(    Call<QuoteModel> call,    Throwable t){
      Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      t.printStackTrace();
    }
  }
);
}","@Override public void onClick(View v){
  String api_token=ClientConfig.api_token;
  QuoteProvider QProvider=new QuoteProvider();
  QuoteClient QService=QProvider.getmQService();
  Call<QuoteModel> call=QService.getQuote(api_token);
  call.enqueue(new Callback<QuoteModel>(){
    @Override public void onResponse(    Call<QuoteModel> call,    Response<QuoteModel> response){
      if (response.isSuccessful()) {
        Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        try {
          Toast.makeText(getContext(),response.errorBody().string(),Toast.LENGTH_SHORT).show();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    @Override public void onFailure(    Call<QuoteModel> call,    Throwable t){
      Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      t.printStackTrace();
    }
  }
);
}"
38027,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mButton=(Button)getView().findViewById(R.id.fetchButton);
  mButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      QuoteProvider QProvider=new QuoteProvider();
      QuoteClient QService=QProvider.getmQService();
      JSONObject josonBody=new JSONObject();
      try {
        josonBody.put(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      String api_key=josonBody.toString();
      Call<QuoteModel> call=QService.getQuote(api_key);
      call.enqueue(new Callback<QuoteModel>(){
        @Override public void onResponse(        Call<QuoteModel> call,        Response<QuoteModel> response){
          if (response.isSuccessful()) {
            Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            String code=String.valueOf(response.code());
            Toast.makeText(getContext(),response.message() + code,Toast.LENGTH_SHORT).show();
          }
        }
        @Override public void onFailure(        Call<QuoteModel> call,        Throwable t){
          Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          t.printStackTrace();
        }
      }
);
    }
  }
);
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mButton=(Button)getView().findViewById(R.id.fetchButton);
  mButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String api_token=ClientConfig.api_token;
      QuoteProvider QProvider=new QuoteProvider();
      QuoteClient QService=QProvider.getmQService();
      Call<QuoteModel> call=QService.getQuote(api_token);
      call.enqueue(new Callback<QuoteModel>(){
        @Override public void onResponse(        Call<QuoteModel> call,        Response<QuoteModel> response){
          if (response.isSuccessful()) {
            Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            try {
              Toast.makeText(getContext(),response.errorBody().string(),Toast.LENGTH_SHORT).show();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
        @Override public void onFailure(        Call<QuoteModel> call,        Throwable t){
          Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          t.printStackTrace();
        }
      }
);
    }
  }
);
}"
38028,"@POST(""String_Node_Str"") Call<QuoteModel> getQuote(@Body String api_key);","@FormUrlEncoded @POST(""String_Node_Str"") Call<QuoteModel> getQuote(@Field(""String_Node_Str"") String api_token);"
38029,"public void bind(HasText text){
  setBadgeComponent(text);
  addNotificationsChangeListener(new NotificationsChangeListener(){
    @Override public void onNotificationChanges(    NotificationHolder holder){
      updateBadgeCaption();
    }
  }
);
}","public void bind(HasText text){
  addBadgeHolderComponent(text);
  addNotificationsChangeListener(new NotificationsChangeListener(){
    @Override public void onNotificationChanges(    NotificationHolder holder){
      updateBadgeCaptions();
    }
  }
);
}"
38030,"private void updateBadgeCaption(){
  if (text != null) {
    int unread=getUnreadNotifications();
    String value;
    if (unread < 1) {
      value=String.valueOf(0);
    }
 else     if (unread < 10) {
      value=String.valueOf(unread);
    }
 else {
      value=""String_Node_Str"";
    }
    text.setText(value);
    if (text instanceof Component) {
      ((Component)text).setVisible(unread > 0);
    }
  }
}","private void updateBadgeCaption(HasText hasText){
  if (hasText != null) {
    int unread=getUnreadNotifications();
    String value;
    if (unread < 1) {
      value=String.valueOf(0);
    }
 else     if (unread < 10) {
      value=String.valueOf(unread);
    }
 else {
      value=""String_Node_Str"";
    }
    hasText.setText(value);
    if (hasText instanceof Component) {
      ((Component)hasText).setVisible(unread > 0);
    }
  }
}"
38031,"private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badge.clearCount();
  notificationHolder.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(1000);
      for (int i=0; i < 3; i++) {
        addNotification(MEDIUM);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
);
  currentThread.start();
}","private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badge.clearCount();
  notificationHolder.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(1000);
      for (int i=0; i < 3; i++) {
        addNotification(MEDIUM);
        badge.increase();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
);
  currentThread.start();
}"
38032,"public void increase(){
  count++;
  listeners.forEach(listener -> listener.onChange(this));
}","public void increase(){
  count++;
  listeners.forEach(listener -> listener.onChange(this));
  updateBadgeCaptions();
}"
38033,"public void decrease(){
  if (count > 0) {
    count--;
  }
  listeners.forEach(listener -> listener.onChange(this));
}","public void decrease(){
  if (count > 0) {
    count--;
  }
  listeners.forEach(listener -> listener.onChange(this));
  updateBadgeCaptions();
}"
38034,"public void setCount(int count){
  this.count=count;
  listeners.forEach(listener -> listener.onChange(this));
}","public void setCount(int count){
  this.count=count;
  listeners.forEach(listener -> listener.onChange(this));
  updateBadgeCaptions();
}"
38035,"public void bind(HasText text){
  addBadgeHolderComponent(text);
  addNotificationsChangeListener(new NotificationsChangeListener(){
    @Override public void onNotificationChanges(    NotificationHolder holder){
      updateBadgeCaptions();
    }
  }
);
}","public void bind(HasText text){
  addBadgeHolderComponent(text);
  updateBadgeCaptions();
}"
38036,"public void addNotification(T notification){
  recentNotification=notification;
  notifications.add(notification);
  notifyListeners();
  notifyAddListeners(notification);
}","public void addNotification(T notification){
  recentNotification=notification;
  notifications.add(notification);
  notifyListeners();
  notifyAddListeners(notification);
  updateBadgeCaptions();
}"
38037,"public void removeNotification(T notification){
  notifications.remove(notification);
  notifyListeners();
  notifyRemoveListeners(notification);
}","public void removeNotification(T notification){
  notifications.remove(notification);
  notifyListeners();
  notifyRemoveListeners(notification);
  updateBadgeCaptions();
}"
38038,"public void clearNotifications(){
  notifications.clear();
  notifyListeners();
}","public void clearNotifications(){
  notifications.clear();
  notifyListeners();
  updateBadgeCaptions();
}"
38039,"private void addNotification(Priority priority){
  getUI().ifPresent(ui -> ui.accessSynchronously(() -> {
    badge.increase();
    notificationHolder.addNotification(new DefaultNotification(""String_Node_Str"" + badge.getCount(),""String_Node_Str"" + badge.getCount(),priority));
  }
));
}","private void addNotification(Priority priority){
  notificationHolder.addNotification(new DefaultNotification(""String_Node_Str"" + badgeHolder.getCount(),""String_Node_Str"" + badgeHolder.getCount(),priority));
}"
38040,"@Override public AppLayout getAppLayout(){
  if (variant == null) {
    variant=Behaviour.LEFT_RESPONSIVE;
    notificationHolder=new DefaultNotificationHolder(newStatus -> {
    }
);
    badge=new DefaultBadgeHolder();
  }
  reloadNotifications();
  if (!variant.isTop()) {
    LeftNavigationComponent home=new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.HOME.create(),View1.class);
    notificationHolder.bind(home.getBadge());
    return AppLayoutBuilder.get(variant).withTitle(""String_Node_Str"").withIcon(""String_Node_Str"").withAppBar(AppBarBuilder.get().add(new AppBarNotificationButton(VaadinIcon.BELL.create(),notificationHolder)).build()).withDesign(AppLayoutDesign.MATERIAL).withAppMenu(LeftAppMenuBuilder.get().addToSection(new MenuHeaderComponent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),HEADER).addToSection(new LeftClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),HEADER).add(home).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.SPLINE_CHART.create(),View2.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View3.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View4.class)).build()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View5.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View6.class)).build()).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View7.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View8.class)).build()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.MENU.create(),View9.class)).addToSection(new LeftClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),FOOTER).build()).build();
  }
 else {
    return AppLayoutBuilder.get(variant).withTitle(""String_Node_Str"").withAppBar(AppBarBuilder.get().add(new AppBarNotificationButton(VaadinIcon.BELL.create(),notificationHolder)).build()).withDesign(AppLayoutDesign.MATERIAL).withAppMenu(TopAppMenuBuilder.get().addToSection(new TopClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),HEADER).add(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.HOME.create(),View1.class)).add(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.SPLINE_CHART.create(),View2.class)).addToSection(new TopClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),FOOTER).addToSection(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View3.class),FOOTER).build()).build();
  }
}","@Override public AppLayout getAppLayout(){
  if (variant == null) {
    variant=Behaviour.LEFT_RESPONSIVE;
    notificationHolder=new DefaultNotificationHolder(newStatus -> {
    }
);
    badgeHolder=new DefaultBadgeHolder();
  }
  reloadNotifications();
  if (!variant.isTop()) {
    LeftNavigationComponent home=new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.HOME.create(),View1.class);
    LeftNavigationComponent menu=new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.MENU.create(),View9.class);
    notificationHolder.bind(home.getBadge());
    badgeHolder.bind(menu.getBadge());
    return AppLayoutBuilder.get(variant).withTitle(""String_Node_Str"").withIcon(""String_Node_Str"").withAppBar(AppBarBuilder.get().add(new AppBarNotificationButton(VaadinIcon.BELL.create(),notificationHolder)).build()).withDesign(AppLayoutDesign.MATERIAL).withAppMenu(LeftAppMenuBuilder.get().addToSection(new MenuHeaderComponent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),HEADER).addToSection(new LeftClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),HEADER).add(home).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.SPLINE_CHART.create(),View2.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View3.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View4.class)).build()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View5.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View6.class)).build()).add(LeftSubMenuBuilder.get(""String_Node_Str"",VaadinIcon.PLUS.create()).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View7.class)).add(new LeftNavigationComponent(""String_Node_Str"",VaadinIcon.COG.create(),View8.class)).build()).add(menu).addToSection(new LeftClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),FOOTER).build()).build();
  }
 else {
    return AppLayoutBuilder.get(variant).withTitle(""String_Node_Str"").withAppBar(AppBarBuilder.get().add(new AppBarNotificationButton(VaadinIcon.BELL.create(),notificationHolder)).build()).withDesign(AppLayoutDesign.MATERIAL).withAppMenu(TopAppMenuBuilder.get().addToSection(new TopClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),HEADER).add(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.HOME.create(),View1.class)).add(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.SPLINE_CHART.create(),View2.class)).addToSection(new TopClickableComponent(""String_Node_Str"",VaadinIcon.COG.create(),clickEvent -> openModeSelector(variant)),FOOTER).addToSection(new TopNavigationComponent(""String_Node_Str"",VaadinIcon.CONNECT.create(),View3.class),FOOTER).build()).build();
  }
}"
38041,"private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badge.clearCount();
  notificationHolder.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(1000);
      for (int i=0; i < 3; i++) {
        addNotification(MEDIUM);
        badge.increase();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
);
  currentThread.start();
}","private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badgeHolder.clearCount();
  notificationHolder.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(1000);
      for (int i=0; i < 3; i++) {
        getUI().ifPresent(ui -> ui.access(() -> {
          addNotification(MEDIUM);
          badgeHolder.increase();
          badgeHolder.increase();
        }
));
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
);
  currentThread.start();
}"
38042,"public AppLayoutRouterLayout(){
  setSizeFull();
  loadConfiguration();
  UI.getCurrent().getSession().setAttribute(""String_Node_Str"",this);
}","public AppLayoutRouterLayout(){
  setSizeFull();
  getElement().getStyle().set(""String_Node_Str"",""String_Node_Str"");
  loadConfiguration();
  UI.getCurrent().getSession().setAttribute(""String_Node_Str"",this);
}"
38043,"public PaperDrawerIconItem(String title,String icon,ComponentEventListener<ClickEvent<PaperDrawerIconItem>> listener){
  this.listener=listener;
  setTitle(title);
  setIcon(icon);
  getElement().addEventListener(""String_Node_Str"",domEvent -> {
    if (listener != null) {
      listener.onComponentEvent(new ClickEvent<>(this));
    }
  }
);
}","public PaperDrawerIconItem(String title,String icon,ComponentEventListener<ClickEvent<PaperDrawerIconItem>> listener){
  this.listener=listener;
  setTitle(title);
  setIcon(icon);
  getElement().addEventListener(""String_Node_Str"",domEvent -> {
    if (this.listener != null) {
      this.listener.onComponentEvent(new ClickEvent<>(this));
    }
  }
);
}"
38044,"public PaperDrawerItem(String title,ComponentEventListener<ClickEvent<PaperDrawerIconItem>> listener){
  this.listener=listener;
  setTitle(title);
  getElement().addEventListener(""String_Node_Str"",domEvent -> {
    if (listener != null) {
      listener.onComponentEvent(new ClickEvent<>(this));
    }
  }
);
}","public PaperDrawerItem(String title,ComponentEventListener<ClickEvent<PaperDrawerIconItem>> listener){
  this.listener=listener;
  setTitle(title);
  getElement().addEventListener(""String_Node_Str"",domEvent -> {
    if (this.listener != null) {
      this.listener.onComponentEvent(new ClickEvent<>(this));
    }
  }
);
}"
38045,"public void init(VaadinRequest request){
  setContent(AppLayout.getDefaultBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications)).withNavigationElementInfoProvider(new DefaultNavigationElementInfoProvider()).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}","public void init(VaadinRequest request){
  setContent(AppLayout.getDefaultBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications)).withNavigationElementInfoProvider(new DefaultNavigationElementInfoProducer()).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}"
38046,"public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProvider()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}","public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}"
38047,"public void init(VaadinRequest request){
  DefaultNotificationHolder notifications=new DefaultNotificationHolder();
  DefaultBadgeHolder badge=new DefaultBadgeHolder();
  AppLayoutComponent layout=AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProvider()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).withNavigatorConsumer(navigator -> {
  }
).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).build();
  setContent(layout);
}","public void init(VaadinRequest request){
  DefaultNotificationHolder notifications=new DefaultNotificationHolder();
  DefaultBadgeHolder badge=new DefaultBadgeHolder();
  AppLayoutComponent layout=AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).withNavigatorConsumer(navigator -> {
  }
).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).build();
  setContent(layout);
}"
38048,"public void init(VaadinRequest request){
  setContent(AppLayout.getDefaultBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications)).withNavigationElementInfoProvider(new DefaultNavigationElementInfoProducer()).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}","public void init(VaadinRequest request){
  setContent(AppLayout.getDefaultBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications)).withNavigationElementInfoProducer(new DefaultNavigationElementInfoProducer()).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}"
38049,"public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}","public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProducer(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}"
38050,"public void init(VaadinRequest request){
  DefaultNotificationHolder notifications=new DefaultNotificationHolder();
  DefaultBadgeHolder badge=new DefaultBadgeHolder();
  AppLayoutComponent layout=AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).withNavigatorConsumer(navigator -> {
  }
).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).build();
  setContent(layout);
}","public void init(VaadinRequest request){
  DefaultNotificationHolder notifications=new DefaultNotificationHolder();
  DefaultBadgeHolder badge=new DefaultBadgeHolder();
  AppLayoutComponent layout=AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withNavigationElementInfoProducer(new DefaultSpringNavigationElementInfoProducer()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppLayoutDesign.MATERIAL).withNavigatorConsumer(navigator -> {
  }
).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,View1.class).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).build();
  setContent(layout);
}"
38051,"/** 
 * Appends a menu element which is bound to a view which then can be navigated to by clicking on the element at the DEFAULT position Note: The caption, icon and navigation path will also be determined via the NavigationElementInfoProvider
 * @param caption
 * @param path
 * @param icon
 * @param badgeHolder
 * @param element
 * @param position
 * @return
 */
public T add(String caption,String path,Resource icon,DefaultBadgeHolder badgeHolder,Class<? extends View> element,AppLayoutConfiguration.Position position){
  addToPosition(new NavigatorNavigationElement(caption,path,icon,badgeHolder,element),position);
  return (T)this;
}","/** 
 * Appends a menu element which is bound to a view which then can be navigated to by clicking on the element at the DEFAULT position Note: The caption, icon and navigation path will also be determined via the NavigationElementInfoProvider
 * @param caption
 * @param icon
 * @param badgeHolder
 * @param element
 * @param position
 * @return
 */
public T add(String caption,Resource icon,DefaultBadgeHolder badgeHolder,Class<? extends View> element,AppLayoutConfiguration.Position position){
  addToPosition(new NavigatorNavigationElement(caption,icon,badgeHolder,element),position);
  return (T)this;
}"
38052,"/** 
 * Appends a menu element which is bound to a view which then can be navigated to by clicking on the element at the DEFAULT position Note: The caption, icon and navigation path will also be determined via the NavigationElementInfoProvider
 * @param caption
 * @param viewName
 * @param icon
 * @param badgeHolder
 * @param element
 * @param position
 * @return
 */
public T add(String caption,String viewName,Resource icon,DefaultBadgeHolder badgeHolder,View element,AppLayoutConfiguration.Position position){
  addToPosition(new NavigatorNavigationElement(caption,viewName,icon,badgeHolder,element),position);
  return (T)this;
}","/** 
 * Appends a menu element which is bound to a view which then can be navigated to by clicking on the element at the DEFAULT position Note: The caption, icon and navigation path will also be determined via the NavigationElementInfoProvider
 * @param caption
 * @param viewName
 * @param icon
 * @param badgeHolder
 * @param view
 * @param position
 * @return
 */
public T add(String caption,String viewName,Resource icon,DefaultBadgeHolder badgeHolder,View view,AppLayoutConfiguration.Position position){
  addToPosition(new NavigatorNavigationElement(caption,viewName,icon,badgeHolder,view),position);
  return (T)this;
}"
38053,"private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badge.clearCount();
  notifications.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    for (int i=0; i < 10; i++) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      addNotification(MEDIUM);
    }
  }
);
  currentThread.start();
}","private void reloadNotifications(){
  if (currentThread != null && !currentThread.isInterrupted()) {
    currentThread.interrupt();
  }
  badge.clearCount();
  notifications.clearNotifications();
  currentThread=new Thread(() -> {
    try {
      Thread.sleep(3000);
      for (int i=0; i < 10; i++) {
        Thread.sleep(1000);
        addNotification(MEDIUM);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
);
  currentThread.start();
}"
38054,"public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  setTitle(title);
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI) {
      if (defaultNavigationElement == null) {
        defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
      }
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      componentNavigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      componentNavigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
  return instance;
}","public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  instance.setTitle(title);
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI) {
      if (defaultNavigationElement == null) {
        defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
      }
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      componentNavigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      componentNavigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
  return instance;
}"
38055,"public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  if (titleComponent == null) {
    instance.setTitle(title);
  }
 else {
    instance.setTitleComponent(titleComponent);
  }
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    if (navigator == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI) {
      if (defaultNavigationElement == null) {
        defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
      }
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (componentNavigatorConsumer != null) {
      componentNavigatorConsumer.accept(componentNavigator);
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
  return instance;
}","public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  if (titleComponent == null) {
    instance.setTitle(title);
  }
 else {
    instance.setTitleComponent(titleComponent);
  }
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    if (navigator == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI && defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (componentNavigatorConsumer != null) {
      componentNavigatorConsumer.accept(componentNavigator);
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
 else {
    if (!CDI && defaultNavigationElement != null) {
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
  return instance;
}"
38056,"public static CDIAppLayoutBuilderWrapper getCDIBuilder(Behaviour behaviour){
  return new CDIAppLayoutBuilderWrapper(behaviour);
}","public static CDIBuilderNavigatorPreamble getCDIBuilder(Behaviour behaviour){
  return new CDIBuilderNavigatorPreamble(CDIAppLayoutBuilder.get(behaviour.getInstance()));
}"
38057,"public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  instance.setTitle(title);
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI) {
      if (defaultNavigationElement == null) {
        defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
      }
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      componentNavigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      componentNavigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
  return instance;
}","public AppLayoutComponent build(){
  if (navigationElementProvider == null) {
    if (variant.isTop())     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
 else     navigationElementProvider=new DefaultLeftNavigationBadgeElementComponentProvider();
  }
  if (customElementProvider == null) {
    if (variant.isTop())     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
 else     customElementProvider=new DefaultLeftClickableNavigationElementProvider();
  }
  if (sectionProvider == null) {
    if (variant.isTop())     sectionProvider=new DefaultLeftSectionElementComponentProvider();
 else     sectionProvider=new DefaultLeftSectionElementComponentProvider();
  }
  if (submenuProvider == null) {
    if (variant.isTop())     submenuProvider=new DefaultTopSubmenuNavigationElementProvider();
 else     submenuProvider=new DefaultLeftSubmenuNavigationElementProvider();
  }
  AppLayoutSessionHelper.setActiveVariant(variant);
  instance.setTitle(title);
  if (navigatorEnabled) {
    navigator=navigatorProducer.apply(instance.getContentHolder());
    navigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (viewProviderSupplier != null) {
      navigator.addProvider(viewProviderSupplier.get());
    }
    if (errorProvider != null) {
      navigator.setErrorProvider(errorProvider.get());
    }
    if (errorViewProvider != null) {
      navigator.setErrorView(errorViewProvider.get());
    }
    if (navigatorConsumer != null) {
      navigatorConsumer.accept(navigator);
    }
    if (!CDI) {
      if (defaultNavigationElement == null) {
        defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
      }
      defaultNavigationElement.addViewToNavigator(navigator);
    }
 else     if (CDI && defaultNavigationElement != null) {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    componentNavigator=new ComponentNavigator(instance.getContentHolder());
    componentNavigator.addViewChangeListener(event -> beforeViewChange(event.getViewName()));
    if (errorViewProvider != null) {
      componentNavigator.setErrorView(errorViewProvider.get());
    }
    if (defaultNavigationElement == null) {
      defaultNavigationElement=navigationElements.stream().filter(element -> element instanceof NavigatorNavigationElement).map(element -> ((NavigatorNavigationElement)element)).findFirst().orElse(null);
    }
    defaultNavigationElement.addViewToComponentNavigator(componentNavigator);
  }
  addComponents(headerElements,instance::addNavigationHeaderElement);
  addComponents(navigationElements,instance::addNavigationElement);
  addComponents(footerElements,instance::addNavigationFooterElement);
  appBarElements.forEach(instance::addAppBarElement);
  instance.setDesign(design);
  if (appBarIconComponent != null) {
    instance.addAppBarIcon(appBarIconComponent);
  }
  instance.setNavigatorNavigationElements(navigatorElements);
  if (!navigatorEnabled) {
    componentNavigator.navigateTo(defaultNavigationElement.getViewName());
  }
  return instance;
}"
38058,"public void navigateTo(String viewName){
  if (currentViewName == null || !currentViewName.equals(viewName)) {
    contentHolder.setContent(views.get(viewName).getViewComponent());
    this.listeners.forEach(viewChangeListener -> viewChangeListener.beforeViewChange(new ViewChangeListener.ViewChangeEvent(this,views.getOrDefault(currentViewName,null),views.get(viewName),viewName,null)));
    currentViewName=viewName;
  }
}","public void navigateTo(String viewName){
  if (currentViewName == null || !currentViewName.equals(viewName)) {
    if (views.containsKey(viewName)) {
      contentHolder.setContent(views.get(viewName).getViewComponent());
      this.listeners.forEach(viewChangeListener -> viewChangeListener.beforeViewChange(new ViewChangeListener.ViewChangeEvent(this,views.getOrDefault(currentViewName,null),views.get(viewName),viewName,null)));
      currentViewName=viewName;
    }
 else {
      currentViewName=null;
      if (errorView != null) {
        contentHolder.setContent(errorView.getViewComponent());
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
}"
38059,"private void setDrawerVariant(Behaviour variant){
  holder.removeAllComponents();
  AppLayoutComponent drawer=AppLayout.getBuilder(variant).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withViewNameInterceptor(new DefaultViewNameInterceptor()).withDefaultNavigationView(View1.class).withDesign(AppBarDesign.MATERIAL).withNavigatorConsumer(navigator -> {
  }
).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).addClickable(""String_Node_Str"",VaadinIcons.COG,clickEvent -> openModeSelector(variant),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,new View1()).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).addClickable(""String_Node_Str"",VaadinIcons.COG,clickEvent -> openModeSelector(variant),FOOTER).build();
  drawer.addStyleName(""String_Node_Str"");
  holder.addComponent(drawer);
  if (getNavigator() != null) {
    getNavigator().navigateTo(""String_Node_Str"");
  }
}","private void setDrawerVariant(Behaviour variant){
  holder.removeAllComponents();
  AppLayoutComponent drawer=AppLayout.getDefaultBuilder(variant).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withViewNameInterceptor(new DefaultViewNameInterceptor()).withDefaultNavigationView(View1.class).withDesign(AppBarDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).addClickable(""String_Node_Str"",VaadinIcons.COG,clickEvent -> openModeSelector(variant),HEADER).add(""String_Node_Str"",VaadinIcons.HOME,badge,new View1()).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(SubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(""String_Node_Str"",VaadinIcons.SPLINE_CHART,View2.class).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.CONNECT,View3.class).add(""String_Node_Str"",VaadinIcons.COG,View4.class).build()).add(""String_Node_Str"",VaadinIcons.MENU,View5.class).add(""String_Node_Str"",VaadinIcons.LIST,View6.class).addClickable(""String_Node_Str"",VaadinIcons.COG,clickEvent -> openModeSelector(variant),FOOTER).build();
  drawer.addStyleName(""String_Node_Str"");
  holder.addComponent(drawer);
  if (getNavigator() != null) {
    getNavigator().navigateTo(""String_Node_Str"");
  }
}"
38060,"public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withErrorView(() -> new View1()).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProvider()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppBarDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(View1.class,badge).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}","public void init(VaadinRequest request){
  setContent(AppLayout.getCDIBuilder(Behaviour.LEFT_RESPONSIVE_HYBRID).withViewProvider(() -> viewProvider).withErrorView(() -> new View1()).withNavigationElementInfoProvider(new DefaultSpringNavigationElementInfoProvider()).withTitle(""String_Node_Str"").addToAppBar(new AppBarNotificationButton(notifications,true)).withDesign(AppBarDesign.MATERIAL).add(new MenuHeader(""String_Node_Str"",new ThemeResource(""String_Node_Str"")),HEADER).add(badge,View1.class).add(CDISubmenuBuilder.get(""String_Node_Str"",VaadinIcons.PLUS).add(View2.class).add(View3.class).add(View4.class).build()).add(View5.class).add(View6.class).build());
}"
38061,"public NavigationButton(String name,Resource icon){
  com.vaadin.ui.Button button=new com.vaadin.ui.Button(name);
  button.setIcon(icon);
  button.addStyleName(ValoTheme.BUTTON_BORDERLESS);
  button.addStyleName(""String_Node_Str"");
  button.addStyleName(""String_Node_Str"");
  button.setWidth(100,Sizeable.Unit.PERCENTAGE);
}","public NavigationButton(String name,Resource icon){
  super(name);
  setIcon(icon);
  addStyleName(ValoTheme.BUTTON_BORDERLESS);
  addStyleName(""String_Node_Str"");
  addStyleName(""String_Node_Str"");
  setWidth(100,Sizeable.Unit.PERCENTAGE);
}"
38062,"public AbstractNavigationDrawer(String filename) throws IOException {
  super(AbstractNavigationDrawer.class.getResourceAsStream(filename));
  contentHolder.setMargin(false);
  menuElementHolder.setMargin(false);
  menuElementHolder.setWidth(99,Unit.PERCENTAGE);
  setSizeFull();
  addStyleName(getStyleName());
  super.addComponent(contentHolder,""String_Node_Str"");
  super.addComponent(menuElementHolder,""String_Node_Str"");
  super.addComponent(appBar,""String_Node_Str"");
  appBar.addComponents(titleWrapper,appBarElementHolder);
  appBar.setSizeFull();
  appBar.setComponentAlignment(appBarElementHolder,Alignment.TOP_RIGHT);
  appBarElementHolder.setSpacing(false);
  titleWrapper.setHeight(45,Unit.PIXELS);
  titleWrapper.setComponentAlignment(title,Alignment.MIDDLE_LEFT);
}","public AbstractNavigationDrawer(String filename) throws IOException {
  super(AbstractNavigationDrawer.class.getResourceAsStream(filename));
  contentHolder.setMargin(false);
  menuElementHolder.setMargin(false);
  menuElementHolder.setWidth(99,Unit.PERCENTAGE);
  setSizeFull();
  addStyleName(getStyleName());
  super.addComponent(contentHolder,""String_Node_Str"");
  super.addComponent(menuElementHolder,""String_Node_Str"");
  super.addComponent(appBar,""String_Node_Str"");
  appBar.addComponents(titleWrapper,appBarElementHolder);
  appBar.setWidth(100,Unit.PERCENTAGE);
  appBar.setHeight(45,Unit.PIXELS);
  appBar.setComponentAlignment(appBarElementHolder,Alignment.MIDDLE_RIGHT);
  appBarElementHolder.setSpacing(false);
  titleWrapper.setHeight(100,Unit.PERCENTAGE);
  titleWrapper.setComponentAlignment(title,Alignment.MIDDLE_LEFT);
}"
38063,"public AbstractNavigationDrawer(String filename) throws IOException {
  super(AbstractNavigationDrawer.class.getResourceAsStream(filename));
  contentHolder.setMargin(false);
  menuElementHolder.setMargin(false);
  setSizeFull();
  addStyleName(getStyleName());
  super.addComponent(contentHolder,""String_Node_Str"");
  super.addComponent(menuElementHolder,""String_Node_Str"");
  super.addComponent(appBar,""String_Node_Str"");
  appBar.addComponents(titleWrapper,appBarElementHolder);
  appBar.setSizeFull();
  appBar.setComponentAlignment(appBarElementHolder,Alignment.TOP_RIGHT);
  appBarElementHolder.setSpacing(false);
  titleWrapper.setHeight(100,Unit.PERCENTAGE);
  titleWrapper.setComponentAlignment(title,Alignment.MIDDLE_LEFT);
}","public AbstractNavigationDrawer(String filename) throws IOException {
  super(AbstractNavigationDrawer.class.getResourceAsStream(filename));
  contentHolder.setMargin(false);
  menuElementHolder.setMargin(false);
  menuElementHolder.setWidth(99,Unit.PERCENTAGE);
  setSizeFull();
  addStyleName(getStyleName());
  super.addComponent(contentHolder,""String_Node_Str"");
  super.addComponent(menuElementHolder,""String_Node_Str"");
  super.addComponent(appBar,""String_Node_Str"");
  appBar.addComponents(titleWrapper,appBarElementHolder);
  appBar.setSizeFull();
  appBar.setComponentAlignment(appBarElementHolder,Alignment.TOP_RIGHT);
  appBarElementHolder.setSpacing(false);
  titleWrapper.setHeight(100,Unit.PERCENTAGE);
  titleWrapper.setComponentAlignment(title,Alignment.MIDDLE_LEFT);
}"
38064,"@HttpPost @Route(""String_Node_Str"") public void checkMe(){
  try {
    Session session=Request().session();
    long uid=session == null || session.attribute(""String_Node_Str"") == null ? 0 : session.attribute(""String_Node_Str"");
    if (uid < 1) {
      throw new HttpException(""String_Node_Str"",200);
    }
    User user=userService.getUser(uid);
    session.addAttribute(""String_Node_Str"",user.getId());
    session.addAttribute(""String_Node_Str"",user.getUsername());
    session.addAttribute(""String_Node_Str"",user.getEmail());
    Map<String,Object> resp=new HashMap<>(2);
    resp.put(""String_Node_Str"",user);
    resp.put(""String_Node_Str"",""String_Node_Str"");
    Succeed(resp);
  }
 catch (  Exception e) {
    Fail(e);
  }
}","@HttpPost @Route(""String_Node_Str"") public void checkMe(){
  try {
    Session session=Request().session();
    long uid=session == null || session.attribute(""String_Node_Str"") == null ? 0 : session.attribute(""String_Node_Str"");
    if (uid < 1) {
      throw new HttpException(""String_Node_Str"",200);
    }
    LoginUser user=userService.getLoginUser(uid);
    user.setFavoriteTopicIds(userMetaService.getFavoriteIds(uid));
    session.addAttribute(""String_Node_Str"",user.getId());
    session.addAttribute(""String_Node_Str"",user.getUsername());
    session.addAttribute(""String_Node_Str"",user.getEmail());
    Map<String,Object> resp=new HashMap<>(2);
    resp.put(""String_Node_Str"",user);
    resp.put(""String_Node_Str"",""String_Node_Str"");
    Succeed(resp);
  }
 catch (  Exception e) {
    Fail(e);
  }
}"
38065,"@Override public LoginUser getLoginUser(long id){
  User user=getUser(id);
  LoginUser loginUser=DozerMapperUtil.map(user,LoginUser.class);
  loginUser.setFavoriteTopicIds(userMetaService.getFavoriteIds(id));
  return loginUser;
}","@Override public LoginUser getLoginUser(long id){
  User user=getUser(id);
  LoginUser loginUser=DozerMapperUtil.map(user,LoginUser.class);
  return loginUser;
}"
38066,"public static void main(String[] args) throws IOException {
  while (!order.isClosed()) {
    int cost;
    String continueChoice;
    do {
      System.out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      int choice=Integer.parseInt(reader.readLine());
      cost=priceOnProducts.get(choice);
      System.out.print(""String_Node_Str"");
      int count=Integer.parseInt(reader.readLine());
      order.setTotalCost(cost * count);
      System.out.print(""String_Node_Str"");
      continueChoice=reader.readLine();
    }
 while (continueChoice.equalsIgnoreCase(""String_Node_Str""));
    if (strategy == null) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String paymentMethod=reader.readLine();
      if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByPayPal();
      }
 else       if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByCreditCard();
      }
      order.processOrder(strategy);
    }
    System.out.print(""String_Node_Str"" + order.getTotalCost() + ""String_Node_Str"");
    String proceed=reader.readLine();
    if (proceed.equalsIgnoreCase(""String_Node_Str"")) {
      if (strategy.pay(order.getTotalCost())) {
        System.out.println(""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
      order.setClosed();
    }
  }
}","public static void main(String[] args) throws IOException {
  while (!order.isClosed()) {
    int cost;
    String continueChoice;
    do {
      System.out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      int choice=Integer.parseInt(reader.readLine());
      cost=priceOnProducts.get(choice);
      System.out.print(""String_Node_Str"");
      int count=Integer.parseInt(reader.readLine());
      order.setTotalCost(cost * count);
      System.out.print(""String_Node_Str"");
      continueChoice=reader.readLine();
    }
 while (continueChoice.equalsIgnoreCase(""String_Node_Str""));
    if (strategy == null) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String paymentMethod=reader.readLine();
      if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByPayPal();
      }
 else {
        strategy=new PayByCreditCard();
      }
      order.processOrder(strategy);
      System.out.print(""String_Node_Str"" + order.getTotalCost() + ""String_Node_Str"");
      String proceed=reader.readLine();
      if (proceed.equalsIgnoreCase(""String_Node_Str"")) {
        if (strategy.pay(order.getTotalCost())) {
          System.out.println(""String_Node_Str"");
        }
 else {
          System.out.println(""String_Node_Str"");
        }
        order.setClosed();
      }
    }
  }
}"
38067,"public CreditCard(String number,String date,String cvv){
}","CreditCard(String number,String date,String cvv){
}"
38068,"public static File fix(VideoFile result){
  System.out.println(""String_Node_Str"");
  return new File(""String_Node_Str"");
}","public File fix(VideoFile result){
  System.out.println(""String_Node_Str"");
  return new File(""String_Node_Str"");
}"
38069,"private void simulateNetworkLatency(){
  try {
    Thread.currentThread().sleep(2500);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}","private void simulateNetworkLatency(){
  try {
    Thread.sleep(2500);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}"
38070,"private void simulateNetworkLatency(){
  try {
    Thread.currentThread().sleep(2500);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}","private void simulateNetworkLatency(){
  try {
    Thread.sleep(2500);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}"
38071,"private Singleton(String value){
  try {
    Thread.currentThread().sleep(1000);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
  this.value=value;
}","private Singleton(String value){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
  this.value=value;
}"
38072,"public static void main(String[] args) throws IOException {
  while (!order.isClosed()) {
    int cost;
    String continueChoice;
    do {
      System.out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      int choice=Integer.parseInt(reader.readLine());
      cost=priceOnProducts.get(choice);
      System.out.print(""String_Node_Str"");
      int count=Integer.parseInt(reader.readLine());
      order.setTotalCost(cost * count);
      System.out.print(""String_Node_Str"");
      continueChoice=reader.readLine();
    }
 while (continueChoice.equalsIgnoreCase(""String_Node_Str""));
    if (strategy == null) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String paymentMethod=reader.readLine();
      if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByPayPal();
      }
 else       if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByCreditCard();
      }
      order.processOrder(strategy);
    }
    System.out.print(""String_Node_Str"" + Order.getTotalCost() + ""String_Node_Str"");
    String proceed=reader.readLine();
    if (proceed.equalsIgnoreCase(""String_Node_Str"")) {
      if (strategy.pay(Order.getTotalCost())) {
        System.out.println(""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
      order.setClosed();
    }
  }
}","public static void main(String[] args) throws IOException {
  while (!order.isClosed()) {
    int cost;
    String continueChoice;
    do {
      System.out.print(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      int choice=Integer.parseInt(reader.readLine());
      cost=priceOnProducts.get(choice);
      System.out.print(""String_Node_Str"");
      int count=Integer.parseInt(reader.readLine());
      order.setTotalCost(cost * count);
      System.out.print(""String_Node_Str"");
      continueChoice=reader.readLine();
    }
 while (continueChoice.equalsIgnoreCase(""String_Node_Str""));
    if (strategy == null) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      String paymentMethod=reader.readLine();
      if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByPayPal();
      }
 else       if (paymentMethod.equals(""String_Node_Str"")) {
        strategy=new PayByCreditCard();
      }
      order.processOrder(strategy);
    }
    System.out.print(""String_Node_Str"" + order.getTotalCost() + ""String_Node_Str"");
    String proceed=reader.readLine();
    if (proceed.equalsIgnoreCase(""String_Node_Str"")) {
      if (strategy.pay(order.getTotalCost())) {
        System.out.println(""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
      order.setClosed();
    }
  }
}"
38073,"public static int getTotalCost(){
  return totalCost;
}","public int getTotalCost(){
  return totalCost;
}"
38074,"private void simulateNetworkLatency(){
  try {
    int i=0;
    System.out.println();
    while (i < 10) {
      System.out.print(""String_Node_Str"");
      Thread.currentThread().sleep(500);
      i++;
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}","private void simulateNetworkLatency(){
  try {
    int i=0;
    System.out.println();
    while (i < 10) {
      System.out.print(""String_Node_Str"");
      Thread.sleep(500);
      i++;
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}"
38075,"private void simulateNetworkLatency(){
  try {
    int i=0;
    System.out.println();
    while (i < 10) {
      System.out.print(""String_Node_Str"");
      Thread.currentThread().sleep(500);
      i++;
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}","private void simulateNetworkLatency(){
  try {
    int i=0;
    System.out.println();
    while (i < 10) {
      System.out.print(""String_Node_Str"");
      Thread.sleep(500);
      i++;
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}"
38076,"private static String getMessage(Throwable t){
  if (t.getMessage().isEmpty()) {
    return t.getClass().getSimpleName();
  }
 else {
    return t.getClass().getSimpleName() + ""String_Node_Str"" + t.getMessage();
  }
}","private static String getMessage(Throwable t){
  if (t.getMessage() == null) {
    return t.getClass().getSimpleName();
  }
 else {
    return t.getClass().getSimpleName() + ""String_Node_Str"" + t.getMessage();
  }
}"
38077,"private static String getMessage(Throwable t){
  if (t.getMessage().isEmpty()) {
    return t.getClass().getSimpleName();
  }
 else {
    return t.getClass().getSimpleName() + ""String_Node_Str"" + t.getMessage();
  }
}","private static String getMessage(Throwable t){
  if (t.getMessage() == null) {
    return t.getClass().getSimpleName();
  }
 else {
    return t.getClass().getSimpleName() + ""String_Node_Str"" + t.getMessage();
  }
}"
38078,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
switch (qName) {
case ""String_Node_Str"":
    file=new File(attributes.getValue(""String_Node_Str""));
  break;
case ""String_Node_Str"":
failures.add(new Failure.Builder().source(attributes.getValue(""String_Node_Str"")).severity(attributes.getValue(""String_Node_Str"").toUpperCase()).file(file).line(Integer.parseInt(attributes.getValue(""String_Node_Str""))).message(attributes.getValue(""String_Node_Str"")).build());
default :
break;
}
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes){
switch (qName) {
case ""String_Node_Str"":
    file=new File(attributes.getValue(""String_Node_Str""));
  break;
case ""String_Node_Str"":
failures.add(new Failure.Builder().source(attributes.getValue(""String_Node_Str"")).severity(attributes.getValue(""String_Node_Str"").toUpperCase()).file(file).line(Integer.parseInt(attributes.getValue(""String_Node_Str""))).message(attributes.getValue(""String_Node_Str"")).build());
default :
break;
}
}"
38079,"private boolean isUntracked(Task task){
  return !(task instanceof Test) && !isStyleTask(task);
}","private static boolean isUntracked(Task task){
  return !(task instanceof Test) && !isStyleTask(task);
}"
38080,"private void configureCheckstyleTask(final Project project,final Checkstyle checkstyleTask,final String circleReportsDir,final StyleTaskTimer timer){
  checkstyleTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      checkstyleTask.getReports().findByName(""String_Node_Str"").setEnabled(true);
    }
  }
);
  CircleStyleFinalizer finalizer=createTask(project.getTasks(),checkstyleTask.getName() + ""String_Node_Str"",CircleStyleFinalizer.class);
  if (finalizer == null) {
    return;
  }
  finalizer.setReportParser(CheckstyleReportHandler.PARSER);
  finalizer.setStyleTask(checkstyleTask);
  finalizer.setReporting(checkstyleTask);
  finalizer.setStyleTaskTimer(timer);
  finalizer.setTargetFile(new File(new File(circleReportsDir,""String_Node_Str""),project.getName() + ""String_Node_Str"" + checkstyleTask.getName()+ ""String_Node_Str""));
  checkstyleTask.finalizedBy(finalizer);
}","private static void configureCheckstyleTask(final Project project,final Checkstyle checkstyleTask,final String circleReportsDir,final StyleTaskTimer timer){
  checkstyleTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      checkstyleTask.getReports().findByName(""String_Node_Str"").setEnabled(true);
    }
  }
);
  CircleStyleFinalizer finalizer=createTask(project.getTasks(),checkstyleTask.getName() + ""String_Node_Str"",CircleStyleFinalizer.class);
  if (finalizer == null) {
    return;
  }
  finalizer.setReportParser(CheckstyleReportHandler.PARSER);
  finalizer.setStyleTask(checkstyleTask);
  finalizer.setReporting(checkstyleTask);
  finalizer.setStyleTaskTimer(timer);
  finalizer.setTargetFile(new File(new File(circleReportsDir,""String_Node_Str""),project.getName() + ""String_Node_Str"" + checkstyleTask.getName()+ ""String_Node_Str""));
  checkstyleTask.finalizedBy(finalizer);
}"
38081,"private void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + (++attemptNumber) + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}","private static void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + (++attemptNumber) + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}"
38082,"private void configureFindbugsTask(final Project project,final FindBugs findbugsTask,final String circleReportsDir,final StyleTaskTimer timer){
  findbugsTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      for (      SingleFileReport report : findbugsTask.getReports()) {
        report.setEnabled(false);
      }
      FindBugsXmlReport xmlReport=(FindBugsXmlReport)findbugsTask.getReports().findByName(""String_Node_Str"");
      xmlReport.setEnabled(true);
      xmlReport.setWithMessages(true);
    }
  }
);
  CircleStyleFinalizer finalizer=createTask(project.getTasks(),findbugsTask.getName() + ""String_Node_Str"",CircleStyleFinalizer.class);
  if (finalizer == null) {
    return;
  }
  finalizer.setReportParser(FindBugsReportHandler.PARSER);
  finalizer.setStyleTask(findbugsTask);
  finalizer.setReporting(findbugsTask);
  finalizer.setStyleTaskTimer(timer);
  finalizer.setTargetFile(new File(new File(circleReportsDir,""String_Node_Str""),project.getName() + ""String_Node_Str"" + findbugsTask.getName()+ ""String_Node_Str""));
  findbugsTask.finalizedBy(finalizer);
}","private static void configureFindbugsTask(final Project project,final FindBugs findbugsTask,final String circleReportsDir,final StyleTaskTimer timer){
  findbugsTask.doFirst(new Action<Task>(){
    @Override public void execute(    Task task){
      for (      SingleFileReport report : findbugsTask.getReports()) {
        report.setEnabled(false);
      }
      FindBugsXmlReport xmlReport=(FindBugsXmlReport)findbugsTask.getReports().findByName(""String_Node_Str"");
      xmlReport.setEnabled(true);
      xmlReport.setWithMessages(true);
    }
  }
);
  CircleStyleFinalizer finalizer=createTask(project.getTasks(),findbugsTask.getName() + ""String_Node_Str"",CircleStyleFinalizer.class);
  if (finalizer == null) {
    return;
  }
  finalizer.setReportParser(FindBugsReportHandler.PARSER);
  finalizer.setStyleTask(findbugsTask);
  finalizer.setReporting(findbugsTask);
  finalizer.setStyleTaskTimer(timer);
  finalizer.setTargetFile(new File(new File(circleReportsDir,""String_Node_Str""),project.getName() + ""String_Node_Str"" + findbugsTask.getName()+ ""String_Node_Str""));
  findbugsTask.finalizedBy(finalizer);
}"
38083,"@Override public void characters(char[] ch,int start,int length) throws SAXException {
  if (content != null) {
    content.append(ch,start,length);
  }
}","@Override public void characters(char[] ch,int start,int length){
  if (content != null) {
    content.append(ch,start,length);
  }
}"
38084,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (qName) {
case ""String_Node_Str"":
    sources.add(content.toString());
  content=null;
break;
case ""String_Node_Str"":
failure.message(content.toString());
content=null;
break;
case ""String_Node_Str"":
failures.add(failure.build());
failure=null;
break;
default :
break;
}
depth--;
}","@Override public void endElement(String uri,String localName,String qName){
switch (qName) {
case ""String_Node_Str"":
    sources.add(content.toString());
  content=null;
break;
case ""String_Node_Str"":
failure.message(content.toString());
content=null;
break;
case ""String_Node_Str"":
failures.add(failure.build());
failure=null;
break;
default :
break;
}
depth--;
}"
38085,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  depth++;
switch (qName) {
case ""String_Node_Str"":
    content=new StringBuilder();
  break;
case ""String_Node_Str"":
depth=0;
failure=new Failure.Builder().source(attributes.getValue(""String_Node_Str"")).severity(""String_Node_Str"");
break;
case ""String_Node_Str"":
content=new StringBuilder();
break;
case ""String_Node_Str"":
if (depth == 1) {
String sourcepath=attributes.getValue(""String_Node_Str"");
File sourceFile=new File(sourcepath);
for (String source : sources) {
if (source.endsWith(sourcepath)) {
sourceFile=new File(source);
}
}
failure.file(sourceFile).line(Integer.parseInt(attributes.getValue(""String_Node_Str"")));
}
break;
default :
break;
}
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes){
  depth++;
switch (qName) {
case ""String_Node_Str"":
    content=new StringBuilder();
  break;
case ""String_Node_Str"":
depth=0;
failure=new Failure.Builder().source(attributes.getValue(""String_Node_Str"")).severity(""String_Node_Str"");
break;
case ""String_Node_Str"":
content=new StringBuilder();
break;
case ""String_Node_Str"":
if (depth == 1) {
String sourcepath=attributes.getValue(""String_Node_Str"");
File sourceFile=new File(sourcepath);
for (String source : sources) {
if (source.endsWith(sourcepath)) {
sourceFile=new File(source);
}
}
failure.file(sourceFile).line(Integer.parseInt(attributes.getValue(""String_Node_Str"")));
}
break;
default :
break;
}
}"
38086,"private Task task(String projectName,String taskName){
  Task task=Mockito.mock(Task.class,Mockito.RETURNS_DEEP_STUBS);
  when(task.getProject().getName()).thenReturn(projectName);
  when(task.getName()).thenReturn(taskName);
  return task;
}","private static Task task(String projectName,String taskName){
  Task task=Mockito.mock(Task.class,Mockito.RETURNS_DEEP_STUBS);
  when(task.getProject().getName()).thenReturn(projectName);
  when(task.getName()).thenReturn(taskName);
  return task;
}"
38087,"@Test public void testTwoErrors() throws TransformerException {
  Report report=failuresReport(ROOT,""String_Node_Str"",""String_Node_Str"",FAILED_CHECKSTYLE_TIME_NANOS,CHECKSTYLE_FAILURES);
  assertThat(report).isEqualTo(REPORT);
}","@Test public void testTwoErrors(){
  Report report=failuresReport(ROOT,""String_Node_Str"",""String_Node_Str"",FAILED_CHECKSTYLE_TIME_NANOS,CHECKSTYLE_FAILURES);
  assertThat(report).isEqualTo(REPORT);
}"
38088,"@Test public void testNoErrors() throws TransformerException {
  Report report=failuresReport(ROOT,""String_Node_Str"",""String_Node_Str"",FAILED_CHECKSTYLE_TIME_NANOS,ImmutableList.<Failure>of());
  assertThat(report).isEqualTo(new Report.Builder().name(""String_Node_Str"").subname(""String_Node_Str"").elapsedTimeNanos(FAILED_CHECKSTYLE_TIME_NANOS).build());
}","@Test public void testNoErrors(){
  Report report=failuresReport(ROOT,""String_Node_Str"",""String_Node_Str"",FAILED_CHECKSTYLE_TIME_NANOS,ImmutableList.<Failure>of());
  assertThat(report).isEqualTo(new Report.Builder().name(""String_Node_Str"").subname(""String_Node_Str"").elapsedTimeNanos(FAILED_CHECKSTYLE_TIME_NANOS).build());
}"
38089,"private void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + attemptNumber + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}","private void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + (++attemptNumber) + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}"
38090,"private void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + attemptNumber + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}","private void configureBuildFailureFinalizer(Project rootProject,String circleReportsDir){
  int attemptNumber=1;
  File targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"");
  while (targetFile.exists()) {
    targetFile=new File(new File(circleReportsDir,""String_Node_Str""),""String_Node_Str"" + (++attemptNumber) + ""String_Node_Str"");
  }
  Integer container;
  try {
    container=Integer.parseInt(System.getenv(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    container=null;
  }
  CircleBuildFailureListener listener=new CircleBuildFailureListener();
  CircleBuildFinishedAction action=new CircleBuildFinishedAction(container,targetFile,listener);
  rootProject.getGradle().addListener(listener);
  rootProject.getGradle().buildFinished(action);
}"
38091,"@Override public void getAllStudent(Context context,DatabaseQueryCallback<List<Student>> callback){
  DatabaseHelper databaseHelper=DatabaseHelper.getInstance(context);
  SQLiteDatabase sqLiteDatabase=databaseHelper.getReadableDatabase();
  String SELECT_QUERY=String.format(""String_Node_Str"",Config.COLUMN_STUDENT_NAME,Config.COLUMN_SUBJECT_OF_STUDENT_REGISTRATION,Config.COLUMN_STUDENT_EMAIL,Config.COLUMN_STUDENT_PHONE,Config.TABLE_STUDENT);
  Cursor cursor=null;
  try {
    cursor=sqLiteDatabase.rawQuery(SELECT_QUERY,null);
    if (cursor != null && cursor.moveToFirst()) {
      List<Student> studentList=new ArrayList<>();
      do {
        String name=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_NAME));
        long registrationNumber=cursor.getLong(cursor.getColumnIndex(Config.COLUMN_STUDENT_REGISTRATION));
        String email=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_EMAIL));
        String phone=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_PHONE));
        studentList.add(new Student(name,registrationNumber,phone,email));
      }
 while (cursor.moveToNext());
      callback.onQuerySuccess(studentList);
    }
 else     callback.onQueryFailed(new Exception(""String_Node_Str""));
  }
 catch (  Exception e) {
    Logger.d(""String_Node_Str"" + e.getMessage());
    callback.onQueryFailed(e);
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 finally {
    if (cursor != null)     cursor.close();
    sqLiteDatabase.close();
  }
}","@Override public void getAllStudent(Context context,DatabaseQueryCallback<List<Student>> callback){
  DatabaseHelper databaseHelper=DatabaseHelper.getInstance(context);
  SQLiteDatabase sqLiteDatabase=databaseHelper.getReadableDatabase();
  String SELECT_QUERY=String.format(""String_Node_Str"",Config.COLUMN_STUDENT_NAME,Config.COLUMN_STUDENT_REGISTRATION,Config.COLUMN_STUDENT_EMAIL,Config.COLUMN_STUDENT_PHONE,Config.TABLE_STUDENT);
  Cursor cursor=null;
  try {
    cursor=sqLiteDatabase.rawQuery(SELECT_QUERY,null);
    if (cursor != null && cursor.moveToFirst()) {
      List<Student> studentList=new ArrayList<>();
      do {
        String name=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_NAME));
        long registrationNumber=cursor.getLong(cursor.getColumnIndex(Config.COLUMN_STUDENT_REGISTRATION));
        String email=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_EMAIL));
        String phone=cursor.getString(cursor.getColumnIndex(Config.COLUMN_STUDENT_PHONE));
        studentList.add(new Student(name,registrationNumber,phone,email));
      }
 while (cursor.moveToNext());
      callback.onQuerySuccess(studentList);
    }
 else     callback.onQueryFailed(new Exception(""String_Node_Str""));
  }
 catch (  Exception e) {
    Logger.d(""String_Node_Str"" + e.getMessage());
    callback.onQueryFailed(e);
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 finally {
    if (cursor != null)     cursor.close();
    sqLiteDatabase.close();
  }
}"
38092,"/** 
 * Returns payload of a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return payload as a JSONObject.
 */
static JSONObject getPayload(String jwt){
  try {
    validateJWT(jwt);
    final String payload=jwt.split(""String_Node_Str"")[PAYLOAD];
    final byte[] sectionDecoded=Base64.decode(payload);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}","/** 
 * Returns payload of a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return payload as a JSONObject.
 */
static JSONObject getPayload(String jwt){
  try {
    validateJWT(jwt);
    Base64.Decoder dec=Base64.getDecoder();
    final String payload=jwt.split(""String_Node_Str"")[PAYLOAD];
    final byte[] sectionDecoded=dec.decode(payload);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    System.out.println(e);
    throw new InvalidParameterException(""String_Node_Str"");
  }
}"
38093,"/** 
 * Returns signature of a JWT as a String.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return signature as a String.
 */
public static String getSignature(String jwt){
  try {
    validateJWT(jwt);
    final byte[] sectionDecoded=Base64.decode(jwt.split(""String_Node_Str"")[SIGNATURE]);
    return new String(sectionDecoded,""String_Node_Str"");
  }
 catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}","/** 
 * Returns signature of a JWT as a String.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return signature as a String.
 */
public static String getSignature(String jwt){
  try {
    validateJWT(jwt);
    Base64.Decoder dec=Base64.getDecoder();
    final byte[] sectionDecoded=dec.decode(jwt.split(""String_Node_Str"")[SIGNATURE]);
    return new String(sectionDecoded,""String_Node_Str"");
  }
 catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}"
38094,"/** 
 * Returns header for a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return header as a JSONObject.
 */
static JSONObject getHeader(String jwt){
  try {
    validateJWT(jwt);
    final byte[] sectionDecoded=Base64.decode(jwt.split(""String_Node_Str"")[HEADER]);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}","/** 
 * Returns header for a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return header as a JSONObject.
 */
static JSONObject getHeader(String jwt){
  try {
    validateJWT(jwt);
    Base64.Decoder dec=Base64.getDecoder();
    final byte[] sectionDecoded=dec.decode(jwt.split(""String_Node_Str"")[HEADER]);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}"
38095,"/** 
 * Returns payload of a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return payload as a JSONObject.
 */
static JSONObject getPayload(String jwt){
  try {
    validateJWT(jwt);
    Base64.Decoder dec=Base64.getDecoder();
    final String payload=jwt.split(""String_Node_Str"")[PAYLOAD];
    final byte[] sectionDecoded=dec.decode(payload);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    System.out.println(e);
    throw new InvalidParameterException(""String_Node_Str"");
  }
}","/** 
 * Returns payload of a JWT as a JSON object.
 * @param jwt REQUIRED: valid JSON Web Token as String.
 * @return payload as a JSONObject.
 */
static JSONObject getPayload(String jwt){
  try {
    validateJWT(jwt);
    Base64.Decoder dec=Base64.getDecoder();
    final String payload=jwt.split(""String_Node_Str"")[PAYLOAD];
    final byte[] sectionDecoded=dec.decode(payload);
    final String jwtSection=new String(sectionDecoded,""String_Node_Str"");
    return new JSONObject(jwtSection);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new InvalidParameterException(e.getMessage());
  }
catch (  final Exception e) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
}"
38096,"public void disconnect(){
  bleHandler.sendEmptyMessage(MSG_DISCONNECT);
}","public void disconnect(){
  bleHandler.obtainMessage(MSG_DISCONNECT,bluetoothDevice).sendToTarget();
}"
38097,"@Override public Indent getIndent(){
  if (formattingInfo.getCsvCodeStyleSettings().TABULARIZE && formattingInfo.getCsvCodeStyleSettings().LEADING_WHITE_SPACES && getNode().getElementType() == CsvTypes.RECORD) {
    CsvColumnInfo columnInfo=formattingInfo.getColumnInfo(0);
    Block fieldBlock=getSubBlocks().get(0);
    return Indent.getSpaceIndent(columnInfo.getMaxLength() - fieldBlock.getTextRange().getLength());
  }
  return null;
}","@Override public Indent getIndent(){
  if (formattingInfo.getCsvCodeStyleSettings().TABULARIZE && formattingInfo.getCsvCodeStyleSettings().LEADING_WHITE_SPACES && getNode().getElementType() == CsvTypes.RECORD && (formattingInfo.getCsvCodeStyleSettings().WHITE_SPACES_OUTSIDE_QUOTES || !CsvFormatHelper.isFirstFieldOfRecordQuoted(this))) {
    CsvColumnInfo columnInfo=formattingInfo.getColumnInfo(0);
    Block fieldBlock=getSubBlocks().get(0);
    return Indent.getSpaceIndent(columnInfo.getMaxLength() - fieldBlock.getTextRange().getLength());
  }
  return null;
}"
38098,"private Spacing getSpacingForRecords(@Nullable CsvBlock child1,@Nullable CsvBlock child2){
  Spacing spacing;
  Block fieldBlock=null;
  CsvColumnInfo columnInfo=null;
  if (child2 != null && child2.getNode().getElementType() == CsvTypes.RECORD) {
    columnInfo=formattingInfo.getColumnInfo(0);
    fieldBlock=child2.getSubBlocks().get(0);
  }
  int spaces=0;
  if (columnInfo != null) {
    spaces+=columnInfo.getMaxLength() - fieldBlock.getTextRange().getLength();
  }
  spacing=Spacing.createSpacing(spaces,spaces,0,true,formattingInfo.getCodeStyleSettings().KEEP_BLANK_LINES_IN_CODE);
  return spacing;
}","private Spacing getSpacingForRecords(@Nullable CsvBlock child1,@Nullable CsvBlock child2){
  Spacing spacing;
  Block fieldBlock=null;
  CsvColumnInfo columnInfo=null;
  List<Block> subBlocks=child2.getSubBlocks();
  if (child2 != null && child2.getNode().getElementType() == CsvTypes.RECORD) {
    columnInfo=formattingInfo.getColumnInfo(0);
    fieldBlock=subBlocks.get(0);
  }
  int spaces=0;
  if (columnInfo != null && subBlocks.size() > 1) {
    spaces+=columnInfo.getMaxLength() - fieldBlock.getTextRange().getLength();
  }
  spacing=Spacing.createSpacing(spaces,spaces,0,true,formattingInfo.getCodeStyleSettings().KEEP_BLANK_LINES_IN_CODE);
  return spacing;
}"
38099,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>Workbook write(List<T> list) throws Exception {
  if (ListUtils.isEmpty(list)) {
  }
  Workbook wb=new SXSSFWorkbook();
  Sheet sheet=wb.createSheet();
  Row row=sheet.createRow(0);
  Cell cell=null;
  Class clazz=list.get(0).getClass();
  List<Field> fields=ReflectUtils.getFields(clazz,true);
  Excel excel=null;
  int columnIndex=0;
  CellStyle cs=null;
  Font font=null;
  Map<String,Class<? extends ExcelFormatter>> formatter=new TreeMap<String,Class<? extends ExcelFormatter>>();
  for (  Field field : fields) {
    excel=field.getAnnotation(Excel.class);
    if (excel == null || excel.skip() == true) {
      continue;
    }
    formatter.put(""String_Node_Str"" + StringUtils.firstCharToUpperCase(field.getName()),excel.formatter());
    cell=row.createCell(columnIndex);
    cs=wb.createCellStyle();
    cs.setBorderBottom(HSSFCellStyle.BORDER_THIN);
    cs.setBorderLeft(HSSFCellStyle.BORDER_THIN);
    cs.setBorderTop(HSSFCellStyle.BORDER_THIN);
    cs.setBorderRight(HSSFCellStyle.BORDER_THIN);
    cs.setFillPattern(CellStyle.SOLID_FOREGROUND);
    cs.setFillForegroundColor(excel.bgColor().getIndex());
    font=wb.createFont();
    font.setColor(excel.fontColor().getIndex());
    font.setBoldweight(excel.boldFont() ? Font.BOLDWEIGHT_BOLD : Font.BOLDWEIGHT_NORMAL);
    cs.setFont(font);
    cell.setCellStyle(cs);
    cell.setCellValue(excel.value());
    columnIndex++;
  }
  int rowIndex=1;
  Object value=null;
  for (  T t : list) {
    row=sheet.createRow(rowIndex);
    columnIndex=0;
    for (    String method : formatter.keySet()) {
      cell=row.createCell(columnIndex);
      cs=wb.createCellStyle();
      cs.setWrapText(true);
      cs.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);
      cs.setBorderBottom(HSSFCellStyle.BORDER_THIN);
      cs.setBorderLeft(HSSFCellStyle.BORDER_THIN);
      cs.setBorderTop(HSSFCellStyle.BORDER_THIN);
      cs.setBorderRight(HSSFCellStyle.BORDER_THIN);
      cell.setCellStyle(cs);
      value=clazz.getMethod(method,null).invoke(t,null);
      cell.setCellValue(formatter.get(method).newInstance().format(value));
      columnIndex++;
    }
    rowIndex++;
  }
  columnIndex=0;
  for (  Field field : fields) {
    excel=field.getAnnotation(Excel.class);
    if (excel == null || excel.skip() == true) {
      continue;
    }
    if (excel.width() == -1) {
      sheet.autoSizeColumn(columnIndex,true);
    }
 else {
      sheet.setColumnWidth(columnIndex,excel.width() * 256);
    }
    columnIndex++;
  }
  return wb;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>Workbook write(List<T> list) throws Exception {
  if (ListUtils.isEmpty(list)) {
  }
  Workbook wb=new SXSSFWorkbook();
  Sheet sheet=wb.createSheet();
  Row row=sheet.createRow(0);
  Cell cell=null;
  Class clazz=list.get(0).getClass();
  List<Field> fields=ReflectUtils.getFields(clazz,true);
  Excel excel=null;
  int columnIndex=0;
  CellStyle cs=null;
  Font font=null;
  Map<String,Class<? extends ExcelFormatter>> formatter=new TreeMap<String,Class<? extends ExcelFormatter>>();
  System.out.println(fields);
  for (  Field field : fields) {
    excel=field.getAnnotation(Excel.class);
    if (excel == null || excel.skip() == true) {
      continue;
    }
    formatter.put(""String_Node_Str"" + StringUtils.firstCharToUpperCase(field.getName()),excel.formatter());
    cell=row.createCell(columnIndex);
    cs=wb.createCellStyle();
    cs.setBorderBottom(HSSFCellStyle.BORDER_THIN);
    cs.setBorderLeft(HSSFCellStyle.BORDER_THIN);
    cs.setBorderTop(HSSFCellStyle.BORDER_THIN);
    cs.setBorderRight(HSSFCellStyle.BORDER_THIN);
    cs.setFillPattern(CellStyle.SOLID_FOREGROUND);
    cs.setFillForegroundColor(excel.bgColor().getIndex());
    font=wb.createFont();
    font.setColor(excel.fontColor().getIndex());
    font.setBoldweight(excel.boldFont() ? Font.BOLDWEIGHT_BOLD : Font.BOLDWEIGHT_NORMAL);
    cs.setFont(font);
    cell.setCellStyle(cs);
    cell.setCellValue(excel.value());
    columnIndex++;
  }
  System.out.println(formatter);
  int rowIndex=1;
  Object value=null;
  String method=""String_Node_Str"";
  for (  T t : list) {
    row=sheet.createRow(rowIndex);
    columnIndex=0;
    for (    Field field : fields) {
      cell=row.createCell(columnIndex);
      cs=wb.createCellStyle();
      cs.setWrapText(true);
      cs.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);
      cs.setBorderBottom(HSSFCellStyle.BORDER_THIN);
      cs.setBorderLeft(HSSFCellStyle.BORDER_THIN);
      cs.setBorderTop(HSSFCellStyle.BORDER_THIN);
      cs.setBorderRight(HSSFCellStyle.BORDER_THIN);
      cell.setCellStyle(cs);
      method=""String_Node_Str"" + StringUtils.firstCharToUpperCase(field.getName());
      value=clazz.getMethod(method,null).invoke(t,null);
      cell.setCellValue(formatter.get(method).newInstance().format(value));
      columnIndex++;
    }
    rowIndex++;
  }
  columnIndex=0;
  for (  Field field : fields) {
    excel=field.getAnnotation(Excel.class);
    if (excel == null || excel.skip() == true) {
      continue;
    }
    if (excel.width() == -1) {
      sheet.autoSizeColumn(columnIndex,true);
    }
 else {
      sheet.setColumnWidth(columnIndex,excel.width() * 256);
    }
    columnIndex++;
  }
  return wb;
}"
38100,"private void showDialogAfterDelay(FragmentManager fm,String tag){
  startedShowing=true;
  super.show(fm,tag);
}","private void showDialogAfterDelay(FragmentManager fm,String tag){
  startedShowing=true;
  FragmentTransaction ft=fm.beginTransaction();
  ft.add(this,tag);
  ft.commitAllowingStateLoss();
}"
38101,"private void init(Context context,AttributeSet attrs){
  this.mContext=context;
  mAttributeSet=attrs;
  getAttrs();
  setWillNotDraw(false);
  mBottomAnimation.setDuration(300);
  mBottomAnimation.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
      TextView textView=(TextView)getChildAt(selectLastIndex + itemCount);
      textView.setTextColor(textColor);
      TextView selectTextView=(TextView)getChildAt(selectIndex + itemCount);
      selectTextView.setTextColor(selectTextColor);
    }
    @Override public void onAnimationEnd(    Animation animation){
      clearAnimation();
      itemMoveLastLeft=itemMoveLeft;
      itemMoveLastRight=itemMoveRight;
      selectLastIndex=selectIndex;
      Log.d(""String_Node_Str"",""String_Node_Str"" + itemMoveLastRight);
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
  }
);
}","private void init(Context context,AttributeSet attrs){
  this.mContext=context;
  mAttributeSet=attrs;
  getAttrs();
  setWillNotDraw(false);
  mBottomAnimation.setDuration(300);
  mBottomAnimation.setAnimationListener(new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
      clearAnimation();
      itemMoveLastLeft=itemMoveLeft;
      itemMoveLastRight=itemMoveRight;
      selectLastIndex=selectIndex;
      Log.d(""String_Node_Str"",""String_Node_Str"" + itemMoveLastRight);
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
  }
);
}"
38102,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  Log.d(""String_Node_Str"",""String_Node_Str"" + count++);
  for (int i=0; i < itemCount; i++) {
    itemCenterX[i]=(int)(itemWidth * (i + 0.5));
    View childImageView=getChildAt(i);
    childImageView.layout(itemWidth * i,0,itemWidth * (i + 1),100);
    View childTextView=getChildAt(itemCount + i);
    childTextView.layout(itemWidth * i + childTextView.getWidth() / 4,100,itemWidth * (i + 1),barHeight);
  }
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  for (int i=0; i < itemCount; i++) {
    itemCenterX[i]=(int)(itemWidth * (i + 0.5));
    View childImageView=getChildAt(i);
    childImageView.layout(itemWidth * i,0,itemWidth * (i + 1),100);
    View childTextView=getChildAt(itemCount + i);
    childTextView.layout(itemWidth * i + childTextView.getWidth() / 4,100,itemWidth * (i + 1),barHeight);
  }
}"
38103,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  Log.d(""String_Node_Str"",""String_Node_Str"" + count++);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  childCount=getChildCount();
  barWidth=getSize(300,widthMeasureSpec);
  barHeight=getSize(300,heightMeasureSpec);
  itemWidth=barWidth / itemCount;
  for (int i=0; i < childCount; i++) {
    View childView=getChildAt(i);
    measureChild(childView,widthMeasureSpec,heightMeasureSpec);
    childView.getLayoutParams().width=itemWidth;
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + barWidth);
  setSelectIndex(0);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  childCount=getChildCount();
  barWidth=getSize(300,widthMeasureSpec);
  barHeight=getSize(300,heightMeasureSpec);
  itemWidth=barWidth / itemCount;
  for (int i=0; i < childCount; i++) {
    View childView=getChildAt(i);
    measureChild(childView,widthMeasureSpec,heightMeasureSpec);
    childView.getLayoutParams().width=itemWidth;
  }
  setSelectIndex(0);
}"
38104,"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    touchDownX=ev.getX();
  break;
case MotionEvent.ACTION_UP:
if (ev.getX() / itemWidth == touchDownX / itemWidth) {
  selectIndex=(int)(ev.getX() / itemWidth);
  sendListenerPostion(selectIndex);
  startAnimation(mBottomAnimation);
}
break;
}
return true;
}","@Override public boolean dispatchTouchEvent(MotionEvent ev){
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    touchDownX=ev.getX();
  break;
case MotionEvent.ACTION_UP:
if (ev.getX() / itemWidth == touchDownX / itemWidth) {
  selectIndex=(int)(ev.getX() / itemWidth);
  changeTitleColor();
  sendListenerPosition(selectIndex);
  startAnimation(mBottomAnimation);
}
break;
}
return true;
}"
38105,"private int getSize(int defaultsize,int measureSpec){
  int mySize=defaultsize;
  int mode=MeasureSpec.getMode(measureSpec);
  int size=MeasureSpec.getSize(measureSpec);
switch (mode) {
case MeasureSpec.UNSPECIFIED:
    mySize=defaultsize;
  break;
case MeasureSpec.AT_MOST:
mySize=size;
break;
case MeasureSpec.EXACTLY:
mySize=size;
break;
}
return mySize;
}","private int getSize(int defaultSize,int measureSpec){
  int mySize=defaultSize;
  int mode=MeasureSpec.getMode(measureSpec);
  int size=MeasureSpec.getSize(measureSpec);
switch (mode) {
case MeasureSpec.UNSPECIFIED:
    mySize=defaultSize;
  break;
case MeasureSpec.AT_MOST:
mySize=size;
break;
case MeasureSpec.EXACTLY:
mySize=size;
break;
}
return mySize;
}"
38106,"public void build() throws Exception {
  itemCount=mBottomItemArrayList.size();
  if (itemCount > CHILDCOUNTMAX) {
    throw new Exception(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + getWidth());
  Log.d(""String_Node_Str"",""String_Node_Str"" + count++);
  itemWidth=getLayoutParams().width / itemCount;
  for (  BottomItem bottomItem : mBottomItemArrayList) {
    ImageView imageView=new ImageView(mContext);
    imageView.setImageResource(bottomItem.drawableRes);
    addView(imageView,itemWidth,20);
  }
  for (  BottomItem bottomItem : mBottomItemArrayList) {
    TextView textView=new TextView(mContext);
    textView.setTextSize(textSize);
    textView.setText(bottomItem.title);
    textView.setTextColor(textColor);
    textView.setGravity(Gravity.CENTER);
    addView(textView,itemWidth,20);
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + itemWidth);
}","public void build() throws Exception {
  itemCount=mBottomItemArrayList.size();
  if (itemCount > CHILDCOUNTMAX) {
    throw new Exception(""String_Node_Str"");
  }
  itemWidth=getLayoutParams().width / itemCount;
  for (  BottomItem bottomItem : mBottomItemArrayList) {
    ImageView imageView=new ImageView(mContext);
    imageView.setImageResource(bottomItem.drawableRes);
    mImageViews.add(imageView);
    addView(imageView,itemWidth,20);
  }
  for (  BottomItem bottomItem : mBottomItemArrayList) {
    TextView textView=new TextView(mContext);
    textView.setTextSize(textSize);
    textView.setText(bottomItem.title);
    textView.setTextColor(textColor);
    textView.setGravity(Gravity.CENTER);
    mTextViews.add(textView);
    addView(textView,itemWidth,20);
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + itemWidth);
}"
38107,"@Override protected void onDraw(Canvas canvas){
  for (int i=0; i < 5; i++) {
    mPaint.setColor(itemcolors[i]);
    canvas.drawRect(itemWidth * i,0,itemWidth * (i + 1),barHeight,mPaint);
    canvas.save();
  }
  mPaint.setColor(backGroundColor);
  canvas.drawRect(0,0,itemMoveLeft,barHeight,mPaint);
  canvas.drawRect(itemMoveRight,0,itemWidth * 5,barHeight,mPaint);
  canvas.save();
  for (int i=0; i < itemCount; i++) {
    int deltaX=Math.abs(itemMoveCenter - itemCenterX[i]);
    if (deltaX < itemWidth) {
      itemScale[i]=(float)(-0.5 * deltaX / itemWidth + 1);
    }
 else     itemScale[i]=0.5f;
    View childImageView=getChildAt(i);
    childImageView.setScaleX(itemScale[i]);
    childImageView.setScaleY(itemScale[i]);
    View childTextView=getChildAt(itemCount + i);
    childTextView.setScaleX(itemScale[i]);
    childTextView.setScaleY(itemScale[i]);
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + selectIndex + ""String_Node_Str""+ itemScale[selectIndex]);
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  for (int i=0; i < 5; i++) {
    mPaint.setColor(itemcolors[i]);
    canvas.drawRect(itemWidth * i,0,itemWidth * (i + 1),barHeight,mPaint);
    canvas.save();
  }
  mPaint.setColor(backGroundColor);
  canvas.drawRect(0,0,itemMoveLeft,barHeight,mPaint);
  canvas.drawRect(itemMoveRight,0,itemWidth * 5,barHeight,mPaint);
  canvas.save();
  for (int i=0; i < itemCount; i++) {
    int deltaX=Math.abs(itemMoveCenter - itemCenterX[i]);
    if (deltaX < itemWidth) {
      itemScale[i]=(float)(-0.5 * deltaX / itemWidth + 1);
    }
 else     itemScale[i]=0.5f;
    mImageViews.get(i).setScaleX(itemScale[i]);
    mImageViews.get(i).setScaleY(itemScale[i]);
    mTextViews.get(i).setScaleX(itemScale[i]);
    mTextViews.get(i).setScaleY(itemScale[i]);
  }
  super.onDraw(canvas);
}"
38108,"@Override public void onAnimationStart(Animation animation){
  TextView textView=(TextView)getChildAt(selectLastIndex + itemCount);
  textView.setTextColor(textColor);
  TextView selectTextView=(TextView)getChildAt(selectIndex + itemCount);
  selectTextView.setTextColor(selectTextColor);
}","@Override public void onAnimationStart(Animation animation){
}"
38109,"@Override public void configure(HttpSecurity http) throws Exception {
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().requestMatchers().antMatchers(""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").authenticated();
}","@Override public void configure(HttpSecurity http) throws Exception {
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().requestMatchers().antMatchers(""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").authenticated();
}"
38110,"@Override protected void configure(HttpSecurity http) throws Exception {
  http.httpBasic().and().csrf().ignoringAntMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").hasRole(""String_Node_Str"").antMatchers(""String_Node_Str"").hasRole(""String_Node_Str"").anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").successHandler(new SuccessHandler()).and().logout();
}","@Override protected void configure(HttpSecurity http) throws Exception {
  http.httpBasic().and().csrf().ignoringAntMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").permitAll().antMatchers(""String_Node_Str"").hasRole(""String_Node_Str"").antMatchers(""String_Node_Str"").hasRole(""String_Node_Str"").antMatchers(""String_Node_Str"").permitAll().anyRequest().authenticated().and().formLogin().loginPage(""String_Node_Str"").successHandler(new SuccessHandler()).and().logout();
}"
38111,"@ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"") @GetMapping(""String_Node_Str"") public UserResponse me(Principal principal){
  if (Objects.isNull(principal) || StringUtils.isBlank(principal.getName())) {
    throw new UnauthorizedException(""String_Node_Str"");
  }
  return userService.getResponse(principal.getName());
}","@ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"") @PostMapping(""String_Node_Str"") public UserResponse me(Principal principal){
  if (Objects.isNull(principal) || StringUtils.isBlank(principal.getName())) {
    throw new UnauthorizedException(""String_Node_Str"");
  }
  return userService.getResponse(principal.getName());
}"
38112,"@Override public void configure(HttpSecurity http) throws Exception {
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().requestMatchers().antMatchers(""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"").authenticated();
}","@Override public void configure(HttpSecurity http) throws Exception {
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().requestMatchers().antMatchers(""String_Node_Str"",""String_Node_Str"").and().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated();
}"
38113,"@Override public void onFaceDetection(Face[] faces,CameraManager.CameraProxy camera){
  mFaceView.setFaces(faces);
}","@Override public void onFaceDetection(Face[] faces,CameraManager.CameraProxy camera){
  if (mIsBokehMode) {
    mFaceView.clear();
    return;
  }
  mFaceView.setFaces(faces);
}"
38114,"@Override public void showSuccess(boolean timeout){
  if (mState == STATE_FOCUSING) {
    startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
    mState=STATE_FINISHING;
    mFocused=true;
  }
}","@Override public void showSuccess(boolean timeout){
  if (mIsBokehMode) {
    mOverlay.postDelayed(new Runnable(){
      @Override public void run(){
        if (mState == STATE_FOCUSING) {
          startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
          mState=STATE_FINISHING;
          mFocused=true;
        }
      }
    }
,3000);
  }
 else {
    if (mState == STATE_FOCUSING) {
      startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
      mState=STATE_FINISHING;
      mFocused=true;
    }
  }
}"
38115,"@Override public void onFaceDetection(Face[] faces,CameraManager.CameraProxy camera){
  mFaceView.setFaces(faces);
}","@Override public void onFaceDetection(Face[] faces,CameraManager.CameraProxy camera){
  if (mIsBokehMode) {
    mFaceView.clear();
    return;
  }
  mFaceView.setFaces(faces);
}"
38116,"@Override public void showSuccess(boolean timeout){
  if (mState == STATE_FOCUSING) {
    startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
    mState=STATE_FINISHING;
    mFocused=true;
  }
}","@Override public void showSuccess(boolean timeout){
  if (mIsBokehMode) {
    mOverlay.postDelayed(new Runnable(){
      @Override public void run(){
        if (mState == STATE_FOCUSING) {
          startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
          mState=STATE_FINISHING;
          mFocused=true;
        }
      }
    }
,3000);
  }
 else {
    if (mState == STATE_FOCUSING) {
      startAnimation(SCALING_DOWN_TIME,timeout,mStartAnimationAngle);
      mState=STATE_FINISHING;
      mFocused=true;
    }
  }
}"
38117,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,ParametersWrapper.getSupportedTouchAfAec(mParameters))) {
      mCurrTouchAfAec=touchAfAec;
      ParametersWrapper.setTouchAfAec(mParameters,touchAfAec);
    }
  }
 else {
    ParametersWrapper.setTouchAfAec(mParameters,ParametersWrapper.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (ParametersWrapper.getTouchAfAec(mParameters).equals(ParametersWrapper.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=ParametersWrapper.getSupportedSelectableZoneAf(mParameters);
  if (CameraUtil.isSupported(selectableZoneAf,ParametersWrapper.getSupportedSelectableZoneAf(mParameters))) {
    ParametersWrapper.setSelectableZoneAf(mParameters,selectableZoneAf);
  }
  if (ParametersWrapper.getSupportedDenoiseModes(mParameters) != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    ParametersWrapper.setDenoise(mParameters,Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,ParametersWrapper.getSupportedRedeyeReductionModes(mParameters))) {
    ParametersWrapper.setRedeyeReductionMode(mParameters,redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,ParametersWrapper.getSupportedIsoValues(mParameters))) {
      ParametersWrapper.setISOValue(mParameters,iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= ParametersWrapper.getMaxSaturation(mParameters))) {
    ParametersWrapper.setSaturation(mParameters,saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= ParametersWrapper.getMaxContrast(mParameters))) {
    ParametersWrapper.setContrast(mParameters,contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (ParametersWrapper.getMaxSharpness(mParameters) / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= ParametersWrapper.getMaxSharpness(mParameters))) {
    ParametersWrapper.setSharpness(mParameters,sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(ParametersWrapper.FACE_DETECTION_ON,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,ParametersWrapper.FACE_DETECTION_ON);
        }
      }
);
      ParametersWrapper.setFaceDetectionMode(mParameters,ParametersWrapper.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      ParametersWrapper.setFaceDetectionMode(mParameters,faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,ParametersWrapper.getSupportedAutoexposure(mParameters))) {
    ParametersWrapper.setAutoExposure(mParameters,autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  ParametersWrapper.setZSLMode(mParameters,zsl);
  if (zsl.equals(""String_Node_Str"") && ParametersWrapper.getSupportedZSLModes(mParameters) != null) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_ZSL;
    ParametersWrapper.setCameraMode(mParameters,1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_NONZSL;
    ParametersWrapper.setCameraMode(mParameters,0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String instantCapture=mPreferences.getString(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_default));
  if (!instantCapture.equals(mActivity.getString(R.string.pref_camera_instant_capture_value_disable))) {
    if (zsl.equals(""String_Node_Str"") && advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_none))) {
      if (!mInstantCaptureSnapShot) {
        instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      }
    }
 else {
      mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
      instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
        }
      }
);
    }
  }
  Log.v(TAG,""String_Node_Str"" + instantCapture + ""String_Node_Str""+ mInstantCaptureSnapShot);
  mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,instantCapture);
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,ParametersWrapper.getSupportedHistogramModes(mParameters)) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (aeBracket != null && !aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
  if (!mFocusManager.getFocusMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE) && !mFocusManager.isFocusCompleted()) {
    mUI.clearFocus();
  }
  String bokehMode=mPreferences.getString(CameraSettings.KEY_BOKEH_MODE,mActivity.getString(R.string.pref_camera_bokeh_mode_default));
  String bokehMpo=mPreferences.getString(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
  String bokehBlurDegree=mPreferences.getString(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
  CameraSettings.getSupportedDegreesOfBlur(mParameters);
  if (!bokehMode.equals(mActivity.getString(R.string.pref_camera_bokeh_mode_entry_value_disable))) {
    if (!zsl.equals(""String_Node_Str"")) {
      ParametersWrapper.setZSLMode(mParameters,""String_Node_Str"");
    }
    if (mParameters.getSceneMode() != Parameters.SCENE_MODE_AUTO) {
      mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
    }
    if (mParameters.getFlashMode() != Parameters.FLASH_MODE_OFF) {
      mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
    }
    if (mParameters.get(""String_Node_Str"").equals(mActivity.getString(R.string.setting_on_value))) {
      mParameters.set(""String_Node_Str"",mActivity.getString(R.string.setting_off_value));
    }
    if (mManual3AEnabled != 0) {
      mManual3AEnabled=0;
    }
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mActivity);
    final int degree=prefs.getInt(CameraSettings.KEY_BOKEH_BLUR_VALUE,50);
    bokehBlurDegree=String.valueOf(degree);
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
        mUI.overrideSettings(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_value_on));
        mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,""String_Node_Str"");
        mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
        mBlurDegreeProgressBar.setVisibility(View.VISIBLE);
        mBlurDegreeProgressBar.setProgress(degree);
      }
    }
);
  }
 else {
    bokehBlurDegree=""String_Node_Str"";
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
        mBlurDegreeProgressBar.setVisibility(View.GONE);
      }
    }
);
  }
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MODE,bokehMode);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MPO_MODE,bokehMpo);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_BLUR_VALUE,bokehBlurDegree);
  Log.v(TAG,""String_Node_Str"" + bokehMode + ""String_Node_Str""+ bokehMpo+ ""String_Node_Str""+ bokehBlurDegree);
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,ParametersWrapper.getSupportedTouchAfAec(mParameters))) {
      mCurrTouchAfAec=touchAfAec;
      ParametersWrapper.setTouchAfAec(mParameters,touchAfAec);
    }
  }
 else {
    ParametersWrapper.setTouchAfAec(mParameters,ParametersWrapper.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (ParametersWrapper.getTouchAfAec(mParameters).equals(ParametersWrapper.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mUI.hideRemainingPhotoCnt();
        }
      }
);
    }
 else {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mUI.showRemainingPhotoCnt();
        }
      }
);
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=ParametersWrapper.getSupportedSelectableZoneAf(mParameters);
  if (CameraUtil.isSupported(selectableZoneAf,ParametersWrapper.getSupportedSelectableZoneAf(mParameters))) {
    ParametersWrapper.setSelectableZoneAf(mParameters,selectableZoneAf);
  }
  if (ParametersWrapper.getSupportedDenoiseModes(mParameters) != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    ParametersWrapper.setDenoise(mParameters,Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,ParametersWrapper.getSupportedRedeyeReductionModes(mParameters))) {
    ParametersWrapper.setRedeyeReductionMode(mParameters,redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,ParametersWrapper.getSupportedIsoValues(mParameters))) {
      ParametersWrapper.setISOValue(mParameters,iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= ParametersWrapper.getMaxSaturation(mParameters))) {
    ParametersWrapper.setSaturation(mParameters,saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= ParametersWrapper.getMaxContrast(mParameters))) {
    ParametersWrapper.setContrast(mParameters,contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (ParametersWrapper.getMaxSharpness(mParameters) / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= ParametersWrapper.getMaxSharpness(mParameters))) {
    ParametersWrapper.setSharpness(mParameters,sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(ParametersWrapper.FACE_DETECTION_ON,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,ParametersWrapper.FACE_DETECTION_ON);
        }
      }
);
      ParametersWrapper.setFaceDetectionMode(mParameters,ParametersWrapper.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      ParametersWrapper.setFaceDetectionMode(mParameters,faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,ParametersWrapper.getSupportedAutoexposure(mParameters))) {
    ParametersWrapper.setAutoExposure(mParameters,autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  ParametersWrapper.setZSLMode(mParameters,zsl);
  if (zsl.equals(""String_Node_Str"") && ParametersWrapper.getSupportedZSLModes(mParameters) != null) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_ZSL;
    ParametersWrapper.setCameraMode(mParameters,1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_NONZSL;
    ParametersWrapper.setCameraMode(mParameters,0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String instantCapture=mPreferences.getString(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_default));
  if (!instantCapture.equals(mActivity.getString(R.string.pref_camera_instant_capture_value_disable))) {
    if (zsl.equals(""String_Node_Str"") && advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_none))) {
      if (!mInstantCaptureSnapShot) {
        instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      }
    }
 else {
      mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
      instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
        }
      }
);
    }
  }
  Log.v(TAG,""String_Node_Str"" + instantCapture + ""String_Node_Str""+ mInstantCaptureSnapShot);
  mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,instantCapture);
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,ParametersWrapper.getSupportedHistogramModes(mParameters)) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (aeBracket != null && !aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
  if (!mFocusManager.getFocusMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE) && !mFocusManager.isFocusCompleted()) {
    mUI.clearFocus();
  }
  String bokehMode=mPreferences.getString(CameraSettings.KEY_BOKEH_MODE,mActivity.getString(R.string.pref_camera_bokeh_mode_default));
  String bokehMpo=mPreferences.getString(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
  String bokehBlurDegree=mPreferences.getString(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
  CameraSettings.getSupportedDegreesOfBlur(mParameters);
  if (!bokehMode.equals(mActivity.getString(R.string.pref_camera_bokeh_mode_entry_value_disable))) {
    if (!zsl.equals(""String_Node_Str"")) {
      ParametersWrapper.setZSLMode(mParameters,""String_Node_Str"");
    }
    if (mParameters.getSceneMode() != Parameters.SCENE_MODE_AUTO) {
      mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
    }
    if (mParameters.getFlashMode() != Parameters.FLASH_MODE_OFF) {
      mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
    }
    if (mParameters.get(""String_Node_Str"").equals(mActivity.getString(R.string.setting_on_value))) {
      mParameters.set(""String_Node_Str"",mActivity.getString(R.string.setting_off_value));
    }
    if (mManual3AEnabled != 0) {
      mManual3AEnabled=0;
    }
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mActivity);
    final int degree=prefs.getInt(CameraSettings.KEY_BOKEH_BLUR_VALUE,50);
    bokehBlurDegree=String.valueOf(degree);
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
        mUI.overrideSettings(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_value_on));
        mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,""String_Node_Str"");
        mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
        mBlurDegreeProgressBar.setVisibility(View.VISIBLE);
        mBlurDegreeProgressBar.setProgress(degree);
      }
    }
);
  }
 else {
    bokehBlurDegree=""String_Node_Str"";
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
        mBlurDegreeProgressBar.setVisibility(View.GONE);
      }
    }
);
  }
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MODE,bokehMode);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MPO_MODE,bokehMpo);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_BLUR_VALUE,bokehBlurDegree);
  Log.v(TAG,""String_Node_Str"" + bokehMode + ""String_Node_Str""+ bokehMpo+ ""String_Node_Str""+ bokehBlurDegree);
}"
38118,"private boolean startRecordingVideo(final int cameraId){
  if (null == mCameraDevice[cameraId]) {
    return false;
  }
  Log.d(TAG,""String_Node_Str"" + cameraId);
  mStartRecPending=true;
  mIsRecordingVideo=true;
  mMediaRecorderPausing=false;
  mUI.hideUIwhileRecording();
  mActivity.updateStorageSpaceAndHint();
  if (mActivity.getStorageSpaceBytes() <= Storage.LOW_STORAGE_THRESHOLD_BYTES) {
    Log.w(TAG,""String_Node_Str"");
    mStartRecPending=false;
    mIsRecordingVideo=false;
    return false;
  }
  try {
    setUpMediaRecorder(cameraId);
    if (mUnsupportedResolution == true) {
      Log.v(TAG,""String_Node_Str"");
      mStartRecPending=false;
      mIsRecordingVideo=false;
      return false;
    }
    if (mMediaRecorder == null) {
      Log.e(TAG,""String_Node_Str"");
      mStartRecPending=false;
      mIsRecordingVideo=false;
      return false;
    }
    requestAudioFocus();
    mUI.clearFocus();
    mCameraHandler.removeMessages(CANCEL_TOUCH_FOCUS,mCameraId[cameraId]);
    mState[cameraId]=STATE_PREVIEW;
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    closePreviewSession();
    mFrameProcessor.onClose();
    Size preview=mVideoPreviewSize;
    if (mHighSpeedCapture) {
      preview=mVideoSize;
    }
    boolean changed=mUI.setPreviewSize(preview.getWidth(),preview.getHeight());
    if (changed) {
      mUI.hideSurfaceView();
      mUI.showSurfaceView();
    }
    mUI.resetTrackingFocus();
    createVideoSnapshotImageReader();
    mVideoRequestBuilder=mCameraDevice[cameraId].createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
    mVideoRequestBuilder.setTag(cameraId);
    mPreviewRequestBuilder[cameraId]=mVideoRequestBuilder;
    List<Surface> surfaces=new ArrayList<>();
    Surface surface=getPreviewSurfaceForSession(cameraId);
    mFrameProcessor.onOpen(getFrameProcFilterId(),mVideoSize);
    if (mFrameProcessor.isFrameFilterEnabled()) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          mUI.getSurfaceHolder().setFixedSize(mVideoSize.getHeight(),mVideoSize.getWidth());
        }
      }
);
    }
    mFrameProcessor.setOutputSurface(surface);
    mFrameProcessor.setVideoOutputSurface(mMediaRecorder.getSurface());
    addPreviewSurface(mVideoRequestBuilder,surfaces,cameraId);
    if (mHighSpeedCapture)     mVideoRequestBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,mHighSpeedFPSRange);
    if (mHighSpeedCapture && ((int)mHighSpeedFPSRange.getUpper() > NORMAL_SESSION_MAX_FPS)) {
      mCameraDevice[cameraId].createConstrainedHighSpeedCaptureSession(surfaces,new CameraConstrainedHighSpeedCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          mCurrentSession=cameraCaptureSession;
          mCaptureSession[cameraId]=cameraCaptureSession;
          CameraConstrainedHighSpeedCaptureSession session=(CameraConstrainedHighSpeedCaptureSession)mCurrentSession;
          try {
            List list=CameraUtil.createHighSpeedRequestList(mVideoRequestBuilder.build(),cameraId);
            session.setRepeatingBurst(list,mCaptureCallback,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalArgumentException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
          try {
            mMediaRecorder.start();
          }
 catch (          RuntimeException e) {
            Toast.makeText(mActivity,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            releaseMediaRecorder();
            releaseAudioFocus();
            mStartRecPending=false;
            mIsRecordingVideo=false;
            return;
          }
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.enableShutter(false);
          mUI.showRecordingUI(true,true);
          updateRecordingTime();
          keepScreenOn();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
 else {
      surfaces.add(mVideoSnapshotImageReader.getSurface());
      mCameraDevice[cameraId].createCaptureSession(surfaces,new CameraCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          Log.d(TAG,""String_Node_Str"");
          mCurrentSession=cameraCaptureSession;
          mCaptureSession[cameraId]=cameraCaptureSession;
          try {
            setUpVideoCaptureRequestBuilder(mVideoRequestBuilder,cameraId);
            mCurrentSession.setRepeatingRequest(mVideoRequestBuilder.build(),mCaptureCallback,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            e.printStackTrace();
          }
          try {
            mMediaRecorder.start();
          }
 catch (          RuntimeException e) {
            Toast.makeText(mActivity,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            releaseMediaRecorder();
            releaseAudioFocus();
            mStartRecPending=false;
            mIsRecordingVideo=false;
            return;
          }
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true,false);
          updateRecordingTime();
          keepScreenOn();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  mStartRecPending=false;
  return true;
}","private boolean startRecordingVideo(final int cameraId){
  if (null == mCameraDevice[cameraId]) {
    return false;
  }
  Log.d(TAG,""String_Node_Str"" + cameraId);
  mStartRecPending=true;
  mIsRecordingVideo=true;
  mMediaRecorderPausing=false;
  mActivity.updateStorageSpaceAndHint();
  if (mActivity.getStorageSpaceBytes() <= Storage.LOW_STORAGE_THRESHOLD_BYTES) {
    Log.w(TAG,""String_Node_Str"");
    mStartRecPending=false;
    mIsRecordingVideo=false;
    return false;
  }
  try {
    setUpMediaRecorder(cameraId);
    try {
      mMediaRecorder.start();
    }
 catch (    RuntimeException e) {
      Toast.makeText(mActivity,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      releaseMediaRecorder();
      releaseAudioFocus();
      mStartRecPending=false;
      mIsRecordingVideo=false;
      return false;
    }
    if (mUnsupportedResolution == true) {
      Log.v(TAG,""String_Node_Str"");
      mStartRecPending=false;
      mIsRecordingVideo=false;
      return false;
    }
    if (mMediaRecorder == null) {
      Log.e(TAG,""String_Node_Str"");
      mStartRecPending=false;
      mIsRecordingVideo=false;
      return false;
    }
    requestAudioFocus();
    mUI.clearFocus();
    mUI.hideUIwhileRecording();
    mCameraHandler.removeMessages(CANCEL_TOUCH_FOCUS,mCameraId[cameraId]);
    mState[cameraId]=STATE_PREVIEW;
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    closePreviewSession();
    mFrameProcessor.onClose();
    Size preview=mVideoPreviewSize;
    if (mHighSpeedCapture) {
      preview=mVideoSize;
    }
    boolean changed=mUI.setPreviewSize(preview.getWidth(),preview.getHeight());
    if (changed) {
      mUI.hideSurfaceView();
      mUI.showSurfaceView();
    }
    mUI.resetTrackingFocus();
    createVideoSnapshotImageReader();
    mVideoRequestBuilder=mCameraDevice[cameraId].createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
    mVideoRequestBuilder.setTag(cameraId);
    mPreviewRequestBuilder[cameraId]=mVideoRequestBuilder;
    List<Surface> surfaces=new ArrayList<>();
    Surface surface=getPreviewSurfaceForSession(cameraId);
    mFrameProcessor.onOpen(getFrameProcFilterId(),mVideoSize);
    if (mFrameProcessor.isFrameFilterEnabled()) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          mUI.getSurfaceHolder().setFixedSize(mVideoSize.getHeight(),mVideoSize.getWidth());
        }
      }
);
    }
    mFrameProcessor.setOutputSurface(surface);
    mFrameProcessor.setVideoOutputSurface(mMediaRecorder.getSurface());
    addPreviewSurface(mVideoRequestBuilder,surfaces,cameraId);
    if (mHighSpeedCapture)     mVideoRequestBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,mHighSpeedFPSRange);
    if (mHighSpeedCapture && ((int)mHighSpeedFPSRange.getUpper() > NORMAL_SESSION_MAX_FPS)) {
      mCameraDevice[cameraId].createConstrainedHighSpeedCaptureSession(surfaces,new CameraConstrainedHighSpeedCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          mCurrentSession=cameraCaptureSession;
          mCaptureSession[cameraId]=cameraCaptureSession;
          CameraConstrainedHighSpeedCaptureSession session=(CameraConstrainedHighSpeedCaptureSession)mCurrentSession;
          try {
            List list=CameraUtil.createHighSpeedRequestList(mVideoRequestBuilder.build(),cameraId);
            session.setRepeatingBurst(list,mCaptureCallback,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalArgumentException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.enableShutter(false);
          mUI.showRecordingUI(true,true);
          updateRecordingTime();
          keepScreenOn();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
 else {
      surfaces.add(mVideoSnapshotImageReader.getSurface());
      mCameraDevice[cameraId].createCaptureSession(surfaces,new CameraCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          Log.d(TAG,""String_Node_Str"");
          mCurrentSession=cameraCaptureSession;
          mCaptureSession[cameraId]=cameraCaptureSession;
          try {
            setUpVideoCaptureRequestBuilder(mVideoRequestBuilder,cameraId);
            mCurrentSession.setRepeatingRequest(mVideoRequestBuilder.build(),mCaptureCallback,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            e.printStackTrace();
          }
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true,false);
          updateRecordingTime();
          keepScreenOn();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  mStartRecPending=false;
  return true;
}"
38119,"@Override public void onConfigured(CameraCaptureSession cameraCaptureSession){
  Log.d(TAG,""String_Node_Str"");
  mCurrentSession=cameraCaptureSession;
  mCaptureSession[cameraId]=cameraCaptureSession;
  try {
    setUpVideoCaptureRequestBuilder(mVideoRequestBuilder,cameraId);
    mCurrentSession.setRepeatingRequest(mVideoRequestBuilder.build(),mCaptureCallback,mCameraHandler);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
  }
  try {
    mMediaRecorder.start();
  }
 catch (  RuntimeException e) {
    Toast.makeText(mActivity,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
    releaseMediaRecorder();
    releaseAudioFocus();
    mStartRecPending=false;
    mIsRecordingVideo=false;
    return;
  }
  mUI.clearFocus();
  mUI.resetPauseButton();
  mRecordingTotalTime=0L;
  mRecordingStartTime=SystemClock.uptimeMillis();
  mUI.showRecordingUI(true,false);
  updateRecordingTime();
  keepScreenOn();
}","@Override public void onConfigured(CameraCaptureSession cameraCaptureSession){
  Log.d(TAG,""String_Node_Str"");
  mCurrentSession=cameraCaptureSession;
  mCaptureSession[cameraId]=cameraCaptureSession;
  try {
    setUpVideoCaptureRequestBuilder(mVideoRequestBuilder,cameraId);
    mCurrentSession.setRepeatingRequest(mVideoRequestBuilder.build(),mCaptureCallback,mCameraHandler);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
  }
  mUI.clearFocus();
  mUI.resetPauseButton();
  mRecordingTotalTime=0L;
  mRecordingStartTime=SystemClock.uptimeMillis();
  mUI.showRecordingUI(true,false);
  updateRecordingTime();
  keepScreenOn();
}"
38120,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)&& mCameraBound != null) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    Matrix translateMatrix=new Matrix();
    translateMatrix.preTranslate(-mCameraBound.width() / 2f,-mCameraBound.height() / 2f);
    translateMatrix.postScale(2000f / mCameraBound.width(),2000f / mCameraBound.height());
    Matrix bsgcTranslateMatrix=new Matrix();
    bsgcTranslateMatrix.preTranslate(-mCameraBound.width() / 2f * mZoom,-mCameraBound.height() / 2f * mZoom);
    bsgcTranslateMatrix.postScale(2000f / mCameraBound.width(),2000f / mCameraBound.height());
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    float rectWidth;
    float rectHeight;
    float diameter;
    int extendFaceSize=0;
    extendFaceSize=mExFaces == null ? 0 : mExFaces.length;
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].getScore() < 50)       continue;
      Rect faceBound=mFaces[i].getBounds();
      faceBound.offset(-mCameraBound.left,-mCameraBound.top);
      mRect.set(faceBound);
      translateMatrix.mapRect(mRect);
      mMatrix.mapRect(mRect);
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      rectHeight=mRect.bottom - mRect.top;
      rectWidth=mRect.right - mRect.left;
      diameter=rectHeight > rectWidth ? rectWidth : rectHeight;
      canvas.drawCircle(mRect.centerX(),mRect.centerY(),diameter / 2,mPaint);
      if (i < extendFaceSize && mExFaces[i] != null) {
        ExtendedFace exFace=mExFaces[i];
        Face face=mFaces[i];
        float[] point=new float[4];
        int delta_x=faceBound.width() / 12;
        int delta_y=faceBound.height() / 12;
        delta_x=(int)(delta_x * mZoom);
        delta_y=(int)(delta_y * mZoom);
        Log.e(TAG,""String_Node_Str"" + exFace.getLeyeBlink() + ""String_Node_Str""+ exFace.getReyeBlink()+ ""String_Node_Str"");
        if (face.getLeftEyePosition() != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.getLeftEyePosition().x;
            point[1]=face.getLeftEyePosition().y - delta_y / 2;
            point[2]=face.getLeftEyePosition().x;
            point[3]=face.getLeftEyePosition().y + delta_y / 2;
          }
 else {
            point[0]=face.getLeftEyePosition().x - delta_x / 2;
            point[1]=face.getLeftEyePosition().y;
            point[2]=face.getLeftEyePosition().x + delta_x / 2;
            point[3]=face.getLeftEyePosition().y;
          }
          bsgcTranslateMatrix.mapPoints(point);
          mMatrix.mapPoints(point);
          if (exFace.getLeyeBlink() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getRightEyePosition() != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.getRightEyePosition().x;
            point[1]=face.getRightEyePosition().y - delta_y / 2;
            point[2]=face.getRightEyePosition().x;
            point[3]=face.getRightEyePosition().y + delta_y / 2;
          }
 else {
            point[0]=face.getRightEyePosition().x - delta_x / 2;
            point[1]=face.getRightEyePosition().y;
            point[2]=face.getRightEyePosition().x + delta_x / 2;
            point[3]=face.getRightEyePosition().y;
          }
          bsgcTranslateMatrix.mapPoints(point);
          mMatrix.mapPoints(point);
          if (exFace.getReyeBlink() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (exFace.getLeftrightGaze() != 0 || exFace.getTopbottomGaze() != 0) {
          double length=Math.sqrt((face.getLeftEyePosition().x - face.getRightEyePosition().x) * (face.getLeftEyePosition().x - face.getRightEyePosition().x) + (face.getLeftEyePosition().y - face.getRightEyePosition().y) * (face.getLeftEyePosition().y - face.getRightEyePosition().y)) / 2.0;
          double nGazeYaw=-exFace.getLeftrightGaze();
          double nGazePitch=-exFace.getTopbottomGaze();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-exFace.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-exFace.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-exFace.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-exFace.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (exFace.getLeyeBlink() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.getLeftEyePosition().x;
              point[1]=face.getLeftEyePosition().y;
              point[2]=face.getLeftEyePosition().x + gazeRollX;
              point[3]=face.getLeftEyePosition().y + gazeRollY;
            }
 else {
              point[0]=face.getLeftEyePosition().x;
              point[1]=face.getLeftEyePosition().y;
              point[2]=face.getLeftEyePosition().x + gazeRollY;
              point[3]=face.getLeftEyePosition().y + gazeRollX;
            }
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (exFace.getReyeBlink() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.getRightEyePosition().x;
              point[1]=face.getRightEyePosition().y;
              point[2]=face.getRightEyePosition().x + gazeRollX;
              point[3]=face.getRightEyePosition().y + gazeRollY;
            }
 else {
              point[0]=face.getRightEyePosition().x;
              point[1]=face.getRightEyePosition().y;
              point[2]=face.getRightEyePosition().x + gazeRollY;
              point[3]=face.getRightEyePosition().y + gazeRollX;
            }
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getMouthPosition() != null) {
          Log.e(TAG,""String_Node_Str"" + exFace.getSmileDegree() + ""String_Node_Str""+ exFace.getSmileConfidence());
          if (exFace.getSmileDegree() < smile_threashold_no_smile) {
            point[0]=face.getMouthPosition().x + dx - delta_x;
            point[1]=face.getMouthPosition().y;
            point[2]=face.getMouthPosition().x + dx + delta_x;
            point[3]=face.getMouthPosition().y;
            Matrix faceMatrix=new Matrix();
            faceMatrix.preRotate(exFace.getRollDirection(),face.getMouthPosition().x,face.getMouthPosition().y);
            faceMatrix.mapPoints(point);
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (exFace.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.getMouthPosition().x - delta_x,face.getMouthPosition().y - delta_y,face.getMouthPosition().x + delta_x,face.getMouthPosition().y + delta_y);
            bsgcTranslateMatrix.mapRect(mRect);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.getMouthPosition().x - delta_x,face.getMouthPosition().y - delta_y,face.getMouthPosition().x + delta_x,face.getMouthPosition().y + delta_y);
            bsgcTranslateMatrix.mapRect(mRect);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)&& mCameraBound != null) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    Matrix translateMatrix=new Matrix();
    translateMatrix.preTranslate(-mCameraBound.width() / 2f,-mCameraBound.height() / 2f);
    translateMatrix.postScale(2000f / mCameraBound.width(),2000f / mCameraBound.height());
    Matrix bsgcTranslateMatrix=new Matrix();
    bsgcTranslateMatrix.preTranslate(-mCameraBound.width() / 2f * mZoom,-mCameraBound.height() / 2f * mZoom);
    bsgcTranslateMatrix.postScale(2000f / mCameraBound.width(),2000f / mCameraBound.height());
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    float rectWidth;
    float rectHeight;
    float diameter;
    int extendFaceSize=0;
    extendFaceSize=mExFaces == null ? 0 : mExFaces.length;
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].getScore() < 50)       continue;
      Rect faceBound=mFaces[i].getBounds();
      faceBound.offset(-mCameraBound.left,-mCameraBound.top);
      mRect.set(faceBound);
      translateMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      rectHeight=mRect.bottom - mRect.top;
      rectWidth=mRect.right - mRect.left;
      diameter=rectHeight > rectWidth ? rectWidth : rectHeight;
      canvas.drawCircle(mRect.centerX(),mRect.centerY(),diameter / 2,mPaint);
      if (i < extendFaceSize && mExFaces[i] != null) {
        ExtendedFace exFace=mExFaces[i];
        Face face=mFaces[i];
        float[] point=new float[4];
        int delta_x=faceBound.width() / 12;
        int delta_y=faceBound.height() / 12;
        delta_x=(int)(delta_x * mZoom);
        delta_y=(int)(delta_y * mZoom);
        Log.e(TAG,""String_Node_Str"" + exFace.getLeyeBlink() + ""String_Node_Str""+ exFace.getReyeBlink()+ ""String_Node_Str"");
        if (face.getLeftEyePosition() != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.getLeftEyePosition().x;
            point[1]=face.getLeftEyePosition().y - delta_y / 2;
            point[2]=face.getLeftEyePosition().x;
            point[3]=face.getLeftEyePosition().y + delta_y / 2;
          }
 else {
            point[0]=face.getLeftEyePosition().x - delta_x / 2;
            point[1]=face.getLeftEyePosition().y;
            point[2]=face.getLeftEyePosition().x + delta_x / 2;
            point[3]=face.getLeftEyePosition().y;
          }
          bsgcTranslateMatrix.mapPoints(point);
          mMatrix.mapPoints(point);
          if (exFace.getLeyeBlink() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getRightEyePosition() != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.getRightEyePosition().x;
            point[1]=face.getRightEyePosition().y - delta_y / 2;
            point[2]=face.getRightEyePosition().x;
            point[3]=face.getRightEyePosition().y + delta_y / 2;
          }
 else {
            point[0]=face.getRightEyePosition().x - delta_x / 2;
            point[1]=face.getRightEyePosition().y;
            point[2]=face.getRightEyePosition().x + delta_x / 2;
            point[3]=face.getRightEyePosition().y;
          }
          bsgcTranslateMatrix.mapPoints(point);
          mMatrix.mapPoints(point);
          if (exFace.getReyeBlink() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (exFace.getLeftrightGaze() != 0 || exFace.getTopbottomGaze() != 0) {
          double length=Math.sqrt((face.getLeftEyePosition().x - face.getRightEyePosition().x) * (face.getLeftEyePosition().x - face.getRightEyePosition().x) + (face.getLeftEyePosition().y - face.getRightEyePosition().y) * (face.getLeftEyePosition().y - face.getRightEyePosition().y)) / 2.0;
          double nGazeYaw=-exFace.getLeftrightGaze();
          double nGazePitch=-exFace.getTopbottomGaze();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-exFace.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-exFace.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-exFace.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-exFace.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (exFace.getLeyeBlink() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.getLeftEyePosition().x;
              point[1]=face.getLeftEyePosition().y;
              point[2]=face.getLeftEyePosition().x + gazeRollX;
              point[3]=face.getLeftEyePosition().y + gazeRollY;
            }
 else {
              point[0]=face.getLeftEyePosition().x;
              point[1]=face.getLeftEyePosition().y;
              point[2]=face.getLeftEyePosition().x + gazeRollY;
              point[3]=face.getLeftEyePosition().y + gazeRollX;
            }
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (exFace.getReyeBlink() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.getRightEyePosition().x;
              point[1]=face.getRightEyePosition().y;
              point[2]=face.getRightEyePosition().x + gazeRollX;
              point[3]=face.getRightEyePosition().y + gazeRollY;
            }
 else {
              point[0]=face.getRightEyePosition().x;
              point[1]=face.getRightEyePosition().y;
              point[2]=face.getRightEyePosition().x + gazeRollY;
              point[3]=face.getRightEyePosition().y + gazeRollX;
            }
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getMouthPosition() != null) {
          Log.e(TAG,""String_Node_Str"" + exFace.getSmileDegree() + ""String_Node_Str""+ exFace.getSmileConfidence());
          if (exFace.getSmileDegree() < smile_threashold_no_smile) {
            point[0]=face.getMouthPosition().x + dx - delta_x;
            point[1]=face.getMouthPosition().y;
            point[2]=face.getMouthPosition().x + dx + delta_x;
            point[3]=face.getMouthPosition().y;
            Matrix faceMatrix=new Matrix();
            faceMatrix.preRotate(exFace.getRollDirection(),face.getMouthPosition().x,face.getMouthPosition().y);
            faceMatrix.mapPoints(point);
            bsgcTranslateMatrix.mapPoints(point);
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (exFace.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.getMouthPosition().x - delta_x,face.getMouthPosition().y - delta_y,face.getMouthPosition().x + delta_x,face.getMouthPosition().y + delta_y);
            bsgcTranslateMatrix.mapRect(mRect);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.getMouthPosition().x - delta_x,face.getMouthPosition().y - delta_y,face.getMouthPosition().x + delta_x,face.getMouthPosition().y + delta_y);
            bsgcTranslateMatrix.mapRect(mRect);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38121,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,ParametersWrapper.getSupportedTouchAfAec(mParameters))) {
      mCurrTouchAfAec=touchAfAec;
      ParametersWrapper.setTouchAfAec(mParameters,touchAfAec);
    }
  }
 else {
    ParametersWrapper.setTouchAfAec(mParameters,ParametersWrapper.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (ParametersWrapper.getTouchAfAec(mParameters).equals(ParametersWrapper.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=ParametersWrapper.getSupportedSelectableZoneAf(mParameters);
  if (CameraUtil.isSupported(selectableZoneAf,ParametersWrapper.getSupportedSelectableZoneAf(mParameters))) {
    ParametersWrapper.setSelectableZoneAf(mParameters,selectableZoneAf);
  }
  if (ParametersWrapper.getSupportedDenoiseModes(mParameters) != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    ParametersWrapper.setDenoise(mParameters,Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,ParametersWrapper.getSupportedRedeyeReductionModes(mParameters))) {
    ParametersWrapper.setRedeyeReductionMode(mParameters,redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,ParametersWrapper.getSupportedIsoValues(mParameters))) {
      ParametersWrapper.setISOValue(mParameters,iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= ParametersWrapper.getMaxSaturation(mParameters))) {
    ParametersWrapper.setSaturation(mParameters,saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= ParametersWrapper.getMaxContrast(mParameters))) {
    ParametersWrapper.setContrast(mParameters,contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (ParametersWrapper.getMaxSharpness(mParameters) / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= ParametersWrapper.getMaxSharpness(mParameters))) {
    ParametersWrapper.setSharpness(mParameters,sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(ParametersWrapper.FACE_DETECTION_ON,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,ParametersWrapper.FACE_DETECTION_ON);
        }
      }
);
      ParametersWrapper.setFaceDetectionMode(mParameters,ParametersWrapper.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      ParametersWrapper.setFaceDetectionMode(mParameters,faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,ParametersWrapper.getSupportedAutoexposure(mParameters))) {
    ParametersWrapper.setAutoExposure(mParameters,autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  ParametersWrapper.setZSLMode(mParameters,zsl);
  if (zsl.equals(""String_Node_Str"") && ParametersWrapper.getSupportedZSLModes(mParameters) != null) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_ZSL;
    ParametersWrapper.setCameraMode(mParameters,1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_NONZSL;
    ParametersWrapper.setCameraMode(mParameters,0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String instantCapture=mPreferences.getString(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_default));
  if (!instantCapture.equals(mActivity.getString(R.string.pref_camera_instant_capture_value_disable))) {
    if (zsl.equals(""String_Node_Str"") && advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_none))) {
      if (!mInstantCaptureSnapShot) {
        instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      }
    }
 else {
      mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
      instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
        }
      }
);
    }
  }
  Log.v(TAG,""String_Node_Str"" + instantCapture + ""String_Node_Str""+ mInstantCaptureSnapShot);
  mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,instantCapture);
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,ParametersWrapper.getSupportedHistogramModes(mParameters)) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (aeBracket != null && !aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
  if (!mFocusManager.getFocusMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE) && !mFocusManager.isFocusCompleted()) {
    mUI.clearFocus();
  }
  String bokehMode=mPreferences.getString(CameraSettings.KEY_BOKEH_MODE,mActivity.getString(R.string.pref_camera_bokeh_mode_default));
  String bokehMpo=mPreferences.getString(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
  String bokehBlurDegree=mPreferences.getString(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
  CameraSettings.getSupportedDegreesOfBlur(mParameters);
  if (!bokehMode.equals(mActivity.getString(R.string.pref_camera_bokeh_mode_entry_value_disable))) {
    if (!zsl.equals(""String_Node_Str"")) {
      ParametersWrapper.setZSLMode(mParameters,""String_Node_Str"");
    }
    if (mParameters.getSceneMode() != Parameters.SCENE_MODE_AUTO) {
      mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
    }
    if (mParameters.getFlashMode() != Parameters.FLASH_MODE_OFF) {
      mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
    }
    if (mParameters.get(""String_Node_Str"").equals(mActivity.getString(R.string.setting_on_value))) {
      mParameters.set(""String_Node_Str"",mActivity.getString(R.string.setting_off_value));
    }
    if (mManual3AEnabled != 0) {
      mManual3AEnabled=0;
    }
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mActivity);
    final int degree=prefs.getInt(CameraSettings.KEY_BOKEH_BLUR_VALUE,50);
    bokehBlurDegree=String.valueOf(degree);
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
        mUI.overrideSettings(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_value_on));
        mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,""String_Node_Str"");
        mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
        mBlurDegreeProgressBar.setVisibility(View.VISIBLE);
        mBlurDegreeProgressBar.setProgress(degree);
      }
    }
);
  }
 else {
    bokehBlurDegree=""String_Node_Str"";
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
        mBlurDegreeProgressBar.setVisibility(View.GONE);
      }
    }
);
  }
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MODE,bokehMode);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MPO_MODE,bokehMpo);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_BLUR_VALUE,bokehBlurDegree);
  Log.v(TAG,""String_Node_Str"" + bokehMode + ""String_Node_Str""+ bokehMpo+ ""String_Node_Str""+ bokehBlurDegree);
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,ParametersWrapper.getSupportedTouchAfAec(mParameters))) {
      mCurrTouchAfAec=touchAfAec;
      ParametersWrapper.setTouchAfAec(mParameters,touchAfAec);
    }
  }
 else {
    ParametersWrapper.setTouchAfAec(mParameters,ParametersWrapper.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (ParametersWrapper.getTouchAfAec(mParameters).equals(ParametersWrapper.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mUI.hideRemainingPhotoCnt();
        }
      }
);
    }
 else {
      mHandler.post(new Runnable(){
        @Override public void run(){
          mUI.showRemainingPhotoCnt();
        }
      }
);
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=ParametersWrapper.getSupportedSelectableZoneAf(mParameters);
  if (CameraUtil.isSupported(selectableZoneAf,ParametersWrapper.getSupportedSelectableZoneAf(mParameters))) {
    ParametersWrapper.setSelectableZoneAf(mParameters,selectableZoneAf);
  }
  if (ParametersWrapper.getSupportedDenoiseModes(mParameters) != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    ParametersWrapper.setDenoise(mParameters,Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,ParametersWrapper.getSupportedRedeyeReductionModes(mParameters))) {
    ParametersWrapper.setRedeyeReductionMode(mParameters,redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,ParametersWrapper.getSupportedIsoValues(mParameters))) {
      ParametersWrapper.setISOValue(mParameters,iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= ParametersWrapper.getMaxSaturation(mParameters))) {
    ParametersWrapper.setSaturation(mParameters,saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= ParametersWrapper.getMaxContrast(mParameters))) {
    ParametersWrapper.setContrast(mParameters,contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (ParametersWrapper.getMaxSharpness(mParameters) / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= ParametersWrapper.getMaxSharpness(mParameters))) {
    ParametersWrapper.setSharpness(mParameters,sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(ParametersWrapper.FACE_DETECTION_ON,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,ParametersWrapper.FACE_DETECTION_ON);
        }
      }
);
      ParametersWrapper.setFaceDetectionMode(mParameters,ParametersWrapper.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,ParametersWrapper.getSupportedFaceDetectionModes(mParameters))) {
      ParametersWrapper.setFaceDetectionMode(mParameters,faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,ParametersWrapper.getSupportedAutoexposure(mParameters))) {
    ParametersWrapper.setAutoExposure(mParameters,autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  ParametersWrapper.setZSLMode(mParameters,zsl);
  if (zsl.equals(""String_Node_Str"") && ParametersWrapper.getSupportedZSLModes(mParameters) != null) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_ZSL;
    ParametersWrapper.setCameraMode(mParameters,1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfoWrapper.CAMERA_SUPPORT_MODE_NONZSL;
    ParametersWrapper.setCameraMode(mParameters,0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String instantCapture=mPreferences.getString(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_default));
  if (!instantCapture.equals(mActivity.getString(R.string.pref_camera_instant_capture_value_disable))) {
    if (zsl.equals(""String_Node_Str"") && advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_none))) {
      if (!mInstantCaptureSnapShot) {
        instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      }
    }
 else {
      mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
      instantCapture=mActivity.getString(R.string.pref_camera_instant_capture_value_disable);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_INSTANT_CAPTURE,mActivity.getString(R.string.pref_camera_instant_capture_value_disable));
        }
      }
);
    }
  }
  Log.v(TAG,""String_Node_Str"" + instantCapture + ""String_Node_Str""+ mInstantCaptureSnapShot);
  mParameters.set(CameraSettings.KEY_QC_INSTANT_CAPTURE,instantCapture);
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,ParametersWrapper.getSupportedHistogramModes(mParameters)) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (aeBracket != null && !aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
  if (!mFocusManager.getFocusMode().equals(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE) && !mFocusManager.isFocusCompleted()) {
    mUI.clearFocus();
  }
  String bokehMode=mPreferences.getString(CameraSettings.KEY_BOKEH_MODE,mActivity.getString(R.string.pref_camera_bokeh_mode_default));
  String bokehMpo=mPreferences.getString(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
  String bokehBlurDegree=mPreferences.getString(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
  CameraSettings.getSupportedDegreesOfBlur(mParameters);
  if (!bokehMode.equals(mActivity.getString(R.string.pref_camera_bokeh_mode_entry_value_disable))) {
    if (!zsl.equals(""String_Node_Str"")) {
      ParametersWrapper.setZSLMode(mParameters,""String_Node_Str"");
    }
    if (mParameters.getSceneMode() != Parameters.SCENE_MODE_AUTO) {
      mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
    }
    if (mParameters.getFlashMode() != Parameters.FLASH_MODE_OFF) {
      mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
    }
    if (mParameters.get(""String_Node_Str"").equals(mActivity.getString(R.string.setting_on_value))) {
      mParameters.set(""String_Node_Str"",mActivity.getString(R.string.setting_off_value));
    }
    if (mManual3AEnabled != 0) {
      mManual3AEnabled=0;
    }
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mActivity);
    final int degree=prefs.getInt(CameraSettings.KEY_BOKEH_BLUR_VALUE,50);
    bokehBlurDegree=String.valueOf(degree);
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
        mUI.overrideSettings(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_value_on));
        mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,""String_Node_Str"");
        mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
        mBlurDegreeProgressBar.setVisibility(View.VISIBLE);
        mBlurDegreeProgressBar.setProgress(degree);
      }
    }
);
  }
 else {
    bokehBlurDegree=""String_Node_Str"";
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_MPO,mActivity.getString(R.string.pref_camera_bokeh_mpo_default));
        mUI.overrideSettings(CameraSettings.KEY_BOKEH_BLUR_VALUE,mActivity.getString(R.string.pref_camera_bokeh_blur_degree_default));
        mBlurDegreeProgressBar.setVisibility(View.GONE);
      }
    }
);
  }
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MODE,bokehMode);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_MPO_MODE,bokehMpo);
  mParameters.set(CameraSettings.KEY_QC_BOKEH_BLUR_VALUE,bokehBlurDegree);
  Log.v(TAG,""String_Node_Str"" + bokehMode + ""String_Node_Str""+ bokehMpo+ ""String_Node_Str""+ bokehBlurDegree);
}"
38122,"public void showCapturedReview(byte[] jpegData,int orientation,boolean mirror){
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mUI.showCapturedImageForReview(jpegData,orientation,mirror);
    }
  }
);
}","public void showCapturedReview(final byte[] jpegData,int orientation,boolean mirror){
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mUI.showCapturedImageForReview(jpegData,orientation,mirror);
    }
  }
);
}"
38123,"protected void showCapturedImageForReview(byte[] jpegData,int orientation,boolean mirror){
  mCameraControls.hideCameraSettings();
  mDecodeTaskForReview=new DecodeImageForReview(jpegData,orientation,mirror);
  mDecodeTaskForReview.execute();
  mOnScreenIndicators.setVisibility(View.GONE);
  mMenuButton.setVisibility(View.GONE);
  CameraUtil.fadeIn(mReviewDoneButton);
  mShutterButton.setVisibility(View.INVISIBLE);
  CameraUtil.fadeIn(mReviewRetakeButton);
  mMenu.hideTopMenu(true);
  pauseFaceDetection();
}","protected void showCapturedImageForReview(byte[] jpegData,int orientation,boolean mirror){
  mCameraControls.hideCameraSettings();
  mDecodeTaskForReview=new DecodeImageForReview(jpegData,orientation,mirror);
  mDecodeTaskForReview.execute();
  mOnScreenIndicators.setVisibility(View.GONE);
  mMenuButton.setVisibility(View.GONE);
  CameraUtil.fadeIn(mReviewDoneButton);
  mShutterButton.setVisibility(View.INVISIBLE);
  CameraUtil.fadeIn(mReviewRetakeButton);
  setOrientation(mOrientation,true);
  mMenu.hideTopMenu(true);
  pauseFaceDetection();
}"
38124,"protected void showCapturedImageForReview(byte[] jpegData,int orientation,boolean mirror){
  mCameraControls.hideCameraSettings();
  mDecodeTaskForReview=new DecodeImageForReview(jpegData,orientation,mirror);
  mDecodeTaskForReview.execute();
  mOnScreenIndicators.setVisibility(View.GONE);
  mMenuButton.setVisibility(View.GONE);
  CameraUtil.fadeIn(mReviewDoneButton);
  mShutterButton.setVisibility(View.INVISIBLE);
  CameraUtil.fadeIn(mReviewRetakeButton);
  mMenu.hideTopMenu(true);
  pauseFaceDetection();
}","protected void showCapturedImageForReview(byte[] jpegData,int orientation,boolean mirror){
  mCameraControls.hideCameraSettings();
  mDecodeTaskForReview=new DecodeImageForReview(jpegData,orientation,mirror);
  mDecodeTaskForReview.execute();
  mOnScreenIndicators.setVisibility(View.GONE);
  mMenuButton.setVisibility(View.GONE);
  CameraUtil.fadeIn(mReviewDoneButton);
  mShutterButton.setVisibility(View.INVISIBLE);
  CameraUtil.fadeIn(mReviewRetakeButton);
  setOrientation(mOrientation,true);
  mMenu.hideTopMenu(true);
  pauseFaceDetection();
}"
38125,"public void showCapturedReview(byte[] jpegData,int orientation,boolean mirror){
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mUI.showCapturedImageForReview(jpegData,orientation,mirror);
    }
  }
);
}","public void showCapturedReview(final byte[] jpegData,int orientation,boolean mirror){
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mUI.showCapturedImageForReview(jpegData,orientation,mirror);
    }
  }
);
}"
38126,"public void setProMode(boolean promode){
  mProModeOn=promode;
  initializeProMode(mProModeOn);
  resetProModeIcons();
}","public void setProMode(boolean promode){
  mProModeOn=promode;
  initializeProMode(mProModeOn);
  resetProModeIcons();
  mProMode.reinit();
}"
38127,"public void setProMode(boolean promode){
  mProModeOn=promode;
  initializeProMode(mProModeOn);
  resetProModeIcons();
}","public void setProMode(boolean promode){
  mProModeOn=promode;
  initializeProMode(mProModeOn);
  resetProModeIcons();
  mProMode.reinit();
}"
38128,"private void filterPreferences(int cameraId){
  ListPreference whiteBalance=mPreferenceGroup.findPreference(KEY_WHITE_BALANCE);
  ListPreference flashMode=mPreferenceGroup.findPreference(KEY_FLASH_MODE);
  ListPreference colorEffect=mPreferenceGroup.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=mPreferenceGroup.findPreference(KEY_SCENE_MODE);
  ListPreference cameraIdPref=mPreferenceGroup.findPreference(KEY_CAMERA_ID);
  ListPreference pictureSize=mPreferenceGroup.findPreference(KEY_PICTURE_SIZE);
  ListPreference exposure=mPreferenceGroup.findPreference(KEY_EXPOSURE);
  ListPreference iso=mPreferenceGroup.findPreference(KEY_ISO);
  ListPreference clearsight=mPreferenceGroup.findPreference(KEY_CLEARSIGHT);
  ListPreference monoPreview=mPreferenceGroup.findPreference(KEY_MONO_PREVIEW);
  ListPreference monoOnly=mPreferenceGroup.findPreference(KEY_MONO_ONLY);
  ListPreference mpo=mPreferenceGroup.findPreference(KEY_MPO);
  ListPreference redeyeReduction=mPreferenceGroup.findPreference(KEY_REDEYE_REDUCTION);
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  ListPreference videoEncoder=mPreferenceGroup.findPreference(KEY_VIDEO_ENCODER);
  ListPreference audioEncoder=mPreferenceGroup.findPreference(KEY_AUDIO_ENCODER);
  ListPreference noiseReduction=mPreferenceGroup.findPreference(KEY_NOISE_REDUCTION);
  ListPreference faceDetection=mPreferenceGroup.findPreference(KEY_FACE_DETECTION);
  ListPreference makeup=mPreferenceGroup.findPreference(KEY_MAKEUP);
  ListPreference trackingfocus=mPreferenceGroup.findPreference(KEY_TRACKINGFOCUS);
  ListPreference hfr=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  if (whiteBalance != null) {
    if (filterUnsupportedOptions(whiteBalance,getSupportedWhiteBalanceModes(cameraId))) {
      mFilteredKeys.add(whiteBalance.getKey());
    }
  }
  if (flashMode != null) {
    if (!isFlashAvailable(mCameraId)) {
      removePreference(mPreferenceGroup,KEY_FLASH_MODE);
      mFilteredKeys.add(flashMode.getKey());
    }
  }
  if (colorEffect != null) {
    if (filterUnsupportedOptions(colorEffect,getSupportedColorEffects(cameraId))) {
      mFilteredKeys.add(colorEffect.getKey());
    }
  }
  if (sceneMode != null) {
    if (filterUnsupportedOptions(sceneMode,getSupportedSceneModes(cameraId))) {
      mFilteredKeys.add(sceneMode.getKey());
    }
  }
  if (cameraIdPref != null)   buildCameraId();
  if (pictureSize != null) {
    if (filterUnsupportedOptions(pictureSize,getSupportedPictureSize(cameraId))) {
      mFilteredKeys.add(pictureSize.getKey());
    }
 else {
      if (CameraSettings.filterSimilarPictureSize(mPreferenceGroup,pictureSize)) {
        mFilteredKeys.add(pictureSize.getKey());
      }
    }
  }
  if (exposure != null)   buildExposureCompensation(cameraId);
  if (iso != null) {
    if (filterUnsupportedOptions(iso,getSupportedIso(cameraId))) {
      mFilteredKeys.add(iso.getKey());
    }
  }
  if (videoQuality != null) {
    CameraSettings.filterUnsupportedOptions(mPreferenceGroup,videoQuality,getSupportedVideoSize(cameraId));
    mVideoQualityEntryValues=videoQuality.getEntryValues();
    mVideoQualityEntries=videoQuality.getEntries();
  }
  if (iso != null) {
    if (filterUnsupportedOptions(videoQuality,getSupportedVideoSize(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (!mIsMonoCameraPresent) {
    if (clearsight != null)     removePreference(mPreferenceGroup,KEY_CLEARSIGHT);
    if (monoPreview != null)     removePreference(mPreferenceGroup,KEY_MONO_PREVIEW);
    if (monoOnly != null)     removePreference(mPreferenceGroup,KEY_MONO_ONLY);
    if (mpo != null)     removePreference(mPreferenceGroup,KEY_MPO);
  }
  if (redeyeReduction != null) {
    if (filterUnsupportedOptions(redeyeReduction,getSupportedRedeyeReduction(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (videoEncoder != null) {
    if (filterUnsupportedOptions(videoEncoder,getSupportedVideoEncoders(videoEncoder.getEntryValues()))) {
      mFilteredKeys.add(videoEncoder.getKey());
    }
  }
  if (audioEncoder != null) {
    if (filterUnsupportedOptions(audioEncoder,getSupportedAudioEncoders(audioEncoder.getEntryValues()))) {
      mFilteredKeys.add(audioEncoder.getKey());
    }
  }
  if (noiseReduction != null) {
    if (filterUnsupportedOptions(noiseReduction,getSupportedNoiseReductionModes(cameraId))) {
      mFilteredKeys.add(noiseReduction.getKey());
    }
  }
  if (faceDetection != null) {
    if (!isFaceDetectionSupported(cameraId)) {
      removePreference(mPreferenceGroup,KEY_FACE_DETECTION);
    }
  }
  if (trackingfocus != null) {
    if (!TrackingFocusFrameListener.isSupportedStatic())     removePreference(mPreferenceGroup,KEY_TRACKINGFOCUS);
  }
  if (hfr != null) {
    buildHFR();
  }
  if (!mIsFrontCameraPresent || !isFacingFront(mCameraId)) {
    removePreference(mPreferenceGroup,KEY_SELFIE_FLASH);
    removePreference(mPreferenceGroup,KEY_SELFIEMIRROR);
  }
}","private void filterPreferences(int cameraId){
  ListPreference whiteBalance=mPreferenceGroup.findPreference(KEY_WHITE_BALANCE);
  ListPreference flashMode=mPreferenceGroup.findPreference(KEY_FLASH_MODE);
  ListPreference colorEffect=mPreferenceGroup.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=mPreferenceGroup.findPreference(KEY_SCENE_MODE);
  ListPreference cameraIdPref=mPreferenceGroup.findPreference(KEY_CAMERA_ID);
  ListPreference pictureSize=mPreferenceGroup.findPreference(KEY_PICTURE_SIZE);
  ListPreference exposure=mPreferenceGroup.findPreference(KEY_EXPOSURE);
  ListPreference iso=mPreferenceGroup.findPreference(KEY_ISO);
  ListPreference clearsight=mPreferenceGroup.findPreference(KEY_CLEARSIGHT);
  ListPreference monoPreview=mPreferenceGroup.findPreference(KEY_MONO_PREVIEW);
  ListPreference monoOnly=mPreferenceGroup.findPreference(KEY_MONO_ONLY);
  ListPreference mpo=mPreferenceGroup.findPreference(KEY_MPO);
  ListPreference redeyeReduction=mPreferenceGroup.findPreference(KEY_REDEYE_REDUCTION);
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  ListPreference videoEncoder=mPreferenceGroup.findPreference(KEY_VIDEO_ENCODER);
  ListPreference audioEncoder=mPreferenceGroup.findPreference(KEY_AUDIO_ENCODER);
  ListPreference noiseReduction=mPreferenceGroup.findPreference(KEY_NOISE_REDUCTION);
  ListPreference faceDetection=mPreferenceGroup.findPreference(KEY_FACE_DETECTION);
  ListPreference makeup=mPreferenceGroup.findPreference(KEY_MAKEUP);
  ListPreference trackingfocus=mPreferenceGroup.findPreference(KEY_TRACKINGFOCUS);
  ListPreference hfr=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  if (whiteBalance != null) {
    if (filterUnsupportedOptions(whiteBalance,getSupportedWhiteBalanceModes(cameraId))) {
      mFilteredKeys.add(whiteBalance.getKey());
    }
  }
  if (flashMode != null) {
    if (!isFlashAvailable(mCameraId)) {
      removePreference(mPreferenceGroup,KEY_FLASH_MODE);
      mFilteredKeys.add(flashMode.getKey());
    }
  }
  if (colorEffect != null) {
    if (filterUnsupportedOptions(colorEffect,getSupportedColorEffects(cameraId))) {
      mFilteredKeys.add(colorEffect.getKey());
    }
  }
  if (sceneMode != null) {
    if (filterUnsupportedOptions(sceneMode,getSupportedSceneModes(cameraId))) {
      mFilteredKeys.add(sceneMode.getKey());
    }
  }
  if (cameraIdPref != null)   buildCameraId();
  if (pictureSize != null) {
    if (filterUnsupportedOptions(pictureSize,getSupportedPictureSize(cameraId))) {
      mFilteredKeys.add(pictureSize.getKey());
    }
 else {
      if (CameraSettings.filterSimilarPictureSize(mPreferenceGroup,pictureSize)) {
        mFilteredKeys.add(pictureSize.getKey());
      }
    }
  }
  if (exposure != null)   buildExposureCompensation(cameraId);
  if (iso != null) {
    if (filterUnsupportedOptions(iso,getSupportedIso(cameraId))) {
      mFilteredKeys.add(iso.getKey());
    }
  }
  if (videoQuality != null) {
    CameraSettings.filterUnsupportedOptions(mPreferenceGroup,videoQuality,getSupportedVideoSize(cameraId));
    mVideoQualityEntryValues=videoQuality.getEntryValues();
    mVideoQualityEntries=videoQuality.getEntries();
  }
  if (!mIsMonoCameraPresent) {
    if (clearsight != null)     removePreference(mPreferenceGroup,KEY_CLEARSIGHT);
    if (monoPreview != null)     removePreference(mPreferenceGroup,KEY_MONO_PREVIEW);
    if (monoOnly != null)     removePreference(mPreferenceGroup,KEY_MONO_ONLY);
    if (mpo != null)     removePreference(mPreferenceGroup,KEY_MPO);
  }
  if (redeyeReduction != null) {
    if (filterUnsupportedOptions(redeyeReduction,getSupportedRedeyeReduction(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (videoEncoder != null) {
    if (filterUnsupportedOptions(videoEncoder,getSupportedVideoEncoders(videoEncoder.getEntryValues()))) {
      mFilteredKeys.add(videoEncoder.getKey());
    }
  }
  if (audioEncoder != null) {
    if (filterUnsupportedOptions(audioEncoder,getSupportedAudioEncoders(audioEncoder.getEntryValues()))) {
      mFilteredKeys.add(audioEncoder.getKey());
    }
  }
  if (noiseReduction != null) {
    if (filterUnsupportedOptions(noiseReduction,getSupportedNoiseReductionModes(cameraId))) {
      mFilteredKeys.add(noiseReduction.getKey());
    }
  }
  if (faceDetection != null) {
    if (!isFaceDetectionSupported(cameraId)) {
      removePreference(mPreferenceGroup,KEY_FACE_DETECTION);
    }
  }
  if (trackingfocus != null) {
    if (!TrackingFocusFrameListener.isSupportedStatic())     removePreference(mPreferenceGroup,KEY_TRACKINGFOCUS);
  }
  if (hfr != null) {
    buildHFR();
  }
  if (!mIsFrontCameraPresent || !isFacingFront(mCameraId)) {
    removePreference(mPreferenceGroup,KEY_SELFIE_FLASH);
    removePreference(mPreferenceGroup,KEY_SELFIEMIRROR);
  }
}"
38129,"private void filterPreferences(int cameraId){
  ListPreference whiteBalance=mPreferenceGroup.findPreference(KEY_WHITE_BALANCE);
  ListPreference flashMode=mPreferenceGroup.findPreference(KEY_FLASH_MODE);
  ListPreference colorEffect=mPreferenceGroup.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=mPreferenceGroup.findPreference(KEY_SCENE_MODE);
  ListPreference cameraIdPref=mPreferenceGroup.findPreference(KEY_CAMERA_ID);
  ListPreference pictureSize=mPreferenceGroup.findPreference(KEY_PICTURE_SIZE);
  ListPreference exposure=mPreferenceGroup.findPreference(KEY_EXPOSURE);
  ListPreference iso=mPreferenceGroup.findPreference(KEY_ISO);
  ListPreference clearsight=mPreferenceGroup.findPreference(KEY_CLEARSIGHT);
  ListPreference monoPreview=mPreferenceGroup.findPreference(KEY_MONO_PREVIEW);
  ListPreference monoOnly=mPreferenceGroup.findPreference(KEY_MONO_ONLY);
  ListPreference mpo=mPreferenceGroup.findPreference(KEY_MPO);
  ListPreference redeyeReduction=mPreferenceGroup.findPreference(KEY_REDEYE_REDUCTION);
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  ListPreference videoEncoder=mPreferenceGroup.findPreference(KEY_VIDEO_ENCODER);
  ListPreference audioEncoder=mPreferenceGroup.findPreference(KEY_AUDIO_ENCODER);
  ListPreference noiseReduction=mPreferenceGroup.findPreference(KEY_NOISE_REDUCTION);
  ListPreference faceDetection=mPreferenceGroup.findPreference(KEY_FACE_DETECTION);
  ListPreference makeup=mPreferenceGroup.findPreference(KEY_MAKEUP);
  ListPreference trackingfocus=mPreferenceGroup.findPreference(KEY_TRACKINGFOCUS);
  ListPreference hfr=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  if (whiteBalance != null) {
    if (filterUnsupportedOptions(whiteBalance,getSupportedWhiteBalanceModes(cameraId))) {
      mFilteredKeys.add(whiteBalance.getKey());
    }
  }
  if (flashMode != null) {
    if (!isFlashAvailable(mCameraId)) {
      removePreference(mPreferenceGroup,KEY_FLASH_MODE);
      mFilteredKeys.add(flashMode.getKey());
    }
  }
  if (colorEffect != null) {
    if (filterUnsupportedOptions(colorEffect,getSupportedColorEffects(cameraId))) {
      mFilteredKeys.add(colorEffect.getKey());
    }
  }
  if (sceneMode != null) {
    if (filterUnsupportedOptions(sceneMode,getSupportedSceneModes(cameraId))) {
      mFilteredKeys.add(sceneMode.getKey());
    }
  }
  if (cameraIdPref != null)   buildCameraId();
  if (pictureSize != null) {
    if (filterUnsupportedOptions(pictureSize,getSupportedPictureSize(cameraId))) {
      mFilteredKeys.add(pictureSize.getKey());
    }
 else {
      if (CameraSettings.filterSimilarPictureSize(mPreferenceGroup,pictureSize)) {
        mFilteredKeys.add(pictureSize.getKey());
      }
    }
  }
  if (exposure != null)   buildExposureCompensation(cameraId);
  if (iso != null) {
    if (filterUnsupportedOptions(iso,getSupportedIso(cameraId))) {
      mFilteredKeys.add(iso.getKey());
    }
  }
  if (videoQuality != null) {
    CameraSettings.filterUnsupportedOptions(mPreferenceGroup,videoQuality,getSupportedVideoSize(cameraId));
    mVideoQualityEntryValues=videoQuality.getEntryValues();
    mVideoQualityEntries=videoQuality.getEntries();
  }
  if (iso != null) {
    if (filterUnsupportedOptions(videoQuality,getSupportedVideoSize(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (!mIsMonoCameraPresent) {
    if (clearsight != null)     removePreference(mPreferenceGroup,KEY_CLEARSIGHT);
    if (monoPreview != null)     removePreference(mPreferenceGroup,KEY_MONO_PREVIEW);
    if (monoOnly != null)     removePreference(mPreferenceGroup,KEY_MONO_ONLY);
    if (mpo != null)     removePreference(mPreferenceGroup,KEY_MPO);
  }
  if (redeyeReduction != null) {
    if (filterUnsupportedOptions(redeyeReduction,getSupportedRedeyeReduction(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (videoEncoder != null) {
    if (filterUnsupportedOptions(videoEncoder,getSupportedVideoEncoders(videoEncoder.getEntryValues()))) {
      mFilteredKeys.add(videoEncoder.getKey());
    }
  }
  if (audioEncoder != null) {
    if (filterUnsupportedOptions(audioEncoder,getSupportedAudioEncoders(audioEncoder.getEntryValues()))) {
      mFilteredKeys.add(audioEncoder.getKey());
    }
  }
  if (noiseReduction != null) {
    if (filterUnsupportedOptions(noiseReduction,getSupportedNoiseReductionModes(cameraId))) {
      mFilteredKeys.add(noiseReduction.getKey());
    }
  }
  if (faceDetection != null) {
    if (!isFaceDetectionSupported(cameraId)) {
      removePreference(mPreferenceGroup,KEY_FACE_DETECTION);
    }
  }
  if (trackingfocus != null) {
    if (!TrackingFocusFrameListener.isSupportedStatic())     removePreference(mPreferenceGroup,KEY_TRACKINGFOCUS);
  }
  if (hfr != null) {
    buildHFR();
  }
  if (!mIsFrontCameraPresent || !isFacingFront(mCameraId)) {
    removePreference(mPreferenceGroup,KEY_SELFIE_FLASH);
  }
}","private void filterPreferences(int cameraId){
  ListPreference whiteBalance=mPreferenceGroup.findPreference(KEY_WHITE_BALANCE);
  ListPreference flashMode=mPreferenceGroup.findPreference(KEY_FLASH_MODE);
  ListPreference colorEffect=mPreferenceGroup.findPreference(KEY_COLOR_EFFECT);
  ListPreference sceneMode=mPreferenceGroup.findPreference(KEY_SCENE_MODE);
  ListPreference cameraIdPref=mPreferenceGroup.findPreference(KEY_CAMERA_ID);
  ListPreference pictureSize=mPreferenceGroup.findPreference(KEY_PICTURE_SIZE);
  ListPreference exposure=mPreferenceGroup.findPreference(KEY_EXPOSURE);
  ListPreference iso=mPreferenceGroup.findPreference(KEY_ISO);
  ListPreference clearsight=mPreferenceGroup.findPreference(KEY_CLEARSIGHT);
  ListPreference monoPreview=mPreferenceGroup.findPreference(KEY_MONO_PREVIEW);
  ListPreference monoOnly=mPreferenceGroup.findPreference(KEY_MONO_ONLY);
  ListPreference mpo=mPreferenceGroup.findPreference(KEY_MPO);
  ListPreference redeyeReduction=mPreferenceGroup.findPreference(KEY_REDEYE_REDUCTION);
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  ListPreference videoEncoder=mPreferenceGroup.findPreference(KEY_VIDEO_ENCODER);
  ListPreference audioEncoder=mPreferenceGroup.findPreference(KEY_AUDIO_ENCODER);
  ListPreference noiseReduction=mPreferenceGroup.findPreference(KEY_NOISE_REDUCTION);
  ListPreference faceDetection=mPreferenceGroup.findPreference(KEY_FACE_DETECTION);
  ListPreference makeup=mPreferenceGroup.findPreference(KEY_MAKEUP);
  ListPreference trackingfocus=mPreferenceGroup.findPreference(KEY_TRACKINGFOCUS);
  ListPreference hfr=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  if (whiteBalance != null) {
    if (filterUnsupportedOptions(whiteBalance,getSupportedWhiteBalanceModes(cameraId))) {
      mFilteredKeys.add(whiteBalance.getKey());
    }
  }
  if (flashMode != null) {
    if (!isFlashAvailable(mCameraId)) {
      removePreference(mPreferenceGroup,KEY_FLASH_MODE);
      mFilteredKeys.add(flashMode.getKey());
    }
  }
  if (colorEffect != null) {
    if (filterUnsupportedOptions(colorEffect,getSupportedColorEffects(cameraId))) {
      mFilteredKeys.add(colorEffect.getKey());
    }
  }
  if (sceneMode != null) {
    if (filterUnsupportedOptions(sceneMode,getSupportedSceneModes(cameraId))) {
      mFilteredKeys.add(sceneMode.getKey());
    }
  }
  if (cameraIdPref != null)   buildCameraId();
  if (pictureSize != null) {
    if (filterUnsupportedOptions(pictureSize,getSupportedPictureSize(cameraId))) {
      mFilteredKeys.add(pictureSize.getKey());
    }
 else {
      if (CameraSettings.filterSimilarPictureSize(mPreferenceGroup,pictureSize)) {
        mFilteredKeys.add(pictureSize.getKey());
      }
    }
  }
  if (exposure != null)   buildExposureCompensation(cameraId);
  if (iso != null) {
    if (filterUnsupportedOptions(iso,getSupportedIso(cameraId))) {
      mFilteredKeys.add(iso.getKey());
    }
  }
  if (videoQuality != null) {
    CameraSettings.filterUnsupportedOptions(mPreferenceGroup,videoQuality,getSupportedVideoSize(cameraId));
    mVideoQualityEntryValues=videoQuality.getEntryValues();
    mVideoQualityEntries=videoQuality.getEntries();
  }
  if (!mIsMonoCameraPresent) {
    if (clearsight != null)     removePreference(mPreferenceGroup,KEY_CLEARSIGHT);
    if (monoPreview != null)     removePreference(mPreferenceGroup,KEY_MONO_PREVIEW);
    if (monoOnly != null)     removePreference(mPreferenceGroup,KEY_MONO_ONLY);
    if (mpo != null)     removePreference(mPreferenceGroup,KEY_MPO);
  }
  if (redeyeReduction != null) {
    if (filterUnsupportedOptions(redeyeReduction,getSupportedRedeyeReduction(cameraId))) {
      mFilteredKeys.add(redeyeReduction.getKey());
    }
  }
  if (videoEncoder != null) {
    if (filterUnsupportedOptions(videoEncoder,getSupportedVideoEncoders(videoEncoder.getEntryValues()))) {
      mFilteredKeys.add(videoEncoder.getKey());
    }
  }
  if (audioEncoder != null) {
    if (filterUnsupportedOptions(audioEncoder,getSupportedAudioEncoders(audioEncoder.getEntryValues()))) {
      mFilteredKeys.add(audioEncoder.getKey());
    }
  }
  if (noiseReduction != null) {
    if (filterUnsupportedOptions(noiseReduction,getSupportedNoiseReductionModes(cameraId))) {
      mFilteredKeys.add(noiseReduction.getKey());
    }
  }
  if (faceDetection != null) {
    if (!isFaceDetectionSupported(cameraId)) {
      removePreference(mPreferenceGroup,KEY_FACE_DETECTION);
    }
  }
  if (trackingfocus != null) {
    if (!TrackingFocusFrameListener.isSupportedStatic())     removePreference(mPreferenceGroup,KEY_TRACKINGFOCUS);
  }
  if (hfr != null) {
    buildHFR();
  }
  if (!mIsFrontCameraPresent || !isFacingFront(mCameraId)) {
    removePreference(mPreferenceGroup,KEY_SELFIE_FLASH);
  }
}"
38130,"private void initializePreferences(){
  ListPreference pref=(ListPreference)findPreference(SettingsManager.KEY_EXPOSURE);
  pref.setEntries(mSettingsManager.getExposureCompensationEntries());
  pref.setEntryValues(mSettingsManager.getExposureCompensationEntryValues());
  Map<String,SettingsManager.Values> map=mSettingsManager.getValuesMap();
  Set<Map.Entry<String,SettingsManager.Values>> set=map.entrySet();
  for (  Map.Entry<String,SettingsManager.Values> entry : set) {
    String key=entry.getKey();
    Preference p=findPreference(key);
    if (p == null)     continue;
    SettingsManager.Values values=entry.getValue();
    boolean disabled=values.overriddenValue != null;
    String value=disabled ? values.overriddenValue : values.value;
    if (p instanceof SwitchPreference) {
      ((SwitchPreference)p).setChecked(isOn(value));
    }
 else     if (p instanceof ListPreference) {
      ((ListPreference)p).setValue(value);
    }
    if (disabled)     p.setEnabled(false);
  }
  try {
    String versionName=getPackageManager().getPackageInfo(getPackageName(),0).versionName;
    int index=versionName.indexOf(' ');
    versionName=versionName.substring(0,index);
    findPreference(""String_Node_Str"").setSummary(versionName);
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
}","private void initializePreferences(){
  updatePreference(SettingsManager.KEY_PICTURE_SIZE);
  updatePreference(SettingsManager.KEY_VIDEO_QUALITY);
  updatePreference(SettingsManager.KEY_EXPOSURE);
  updatePreference(SettingsManager.KEY_VIDEO_HIGH_FRAME_RATE);
  Map<String,SettingsManager.Values> map=mSettingsManager.getValuesMap();
  Set<Map.Entry<String,SettingsManager.Values>> set=map.entrySet();
  for (  Map.Entry<String,SettingsManager.Values> entry : set) {
    String key=entry.getKey();
    Preference p=findPreference(key);
    if (p == null)     continue;
    SettingsManager.Values values=entry.getValue();
    boolean disabled=values.overriddenValue != null;
    String value=disabled ? values.overriddenValue : values.value;
    if (p instanceof SwitchPreference) {
      ((SwitchPreference)p).setChecked(isOn(value));
    }
 else     if (p instanceof ListPreference) {
      ((ListPreference)p).setValue(value);
    }
    if (disabled)     p.setEnabled(false);
  }
  try {
    String versionName=getPackageManager().getPackageInfo(getPackageName(),0).versionName;
    int index=versionName.indexOf(' ');
    versionName=versionName.substring(0,index);
    findPreference(""String_Node_Str"").setSummary(versionName);
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
}"
38131,"private void filterPreferences(){
  String[] categories={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Set<String> set=mSettingsManager.getFilteredKeys();
  if (!mDeveloperMenuEnabled) {
    set.add(SettingsManager.KEY_MONO_PREVIEW);
    set.add(SettingsManager.KEY_MONO_ONLY);
    set.add(SettingsManager.KEY_CLEARSIGHT);
  }
  for (  String key : set) {
    Preference p=findPreference(key);
    if (p == null)     continue;
    for (int i=0; i < categories.length; i++) {
      PreferenceGroup group=(PreferenceGroup)findPreference(categories[i]);
      if (group.removePreference(p))       break;
    }
  }
  ListPreference pictureSize=(ListPreference)findPreference(SettingsManager.KEY_PICTURE_SIZE);
  if (pictureSize != null) {
    pictureSize.setEntryValues(mSettingsManager.getEntryValues(SettingsManager.KEY_PICTURE_SIZE));
    pictureSize.setEntries(mSettingsManager.getEntries(SettingsManager.KEY_PICTURE_SIZE));
  }
}","private void filterPreferences(){
  String[] categories={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Set<String> set=mSettingsManager.getFilteredKeys();
  if (!mDeveloperMenuEnabled) {
    set.add(SettingsManager.KEY_MONO_PREVIEW);
    set.add(SettingsManager.KEY_MONO_ONLY);
    set.add(SettingsManager.KEY_CLEARSIGHT);
  }
  for (  String key : set) {
    Preference p=findPreference(key);
    if (p == null)     continue;
    for (int i=0; i < categories.length; i++) {
      PreferenceGroup group=(PreferenceGroup)findPreference(categories[i]);
      if (group.removePreference(p))       break;
    }
  }
}"
38132,"@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  Preference p=findPreference(key);
  if (p == null)   return;
  String value;
  if (p instanceof SwitchPreference) {
    boolean checked=((SwitchPreference)p).isChecked();
    value=checked ? ""String_Node_Str"" : ""String_Node_Str"";
    mSettingsManager.setValue(key,value);
  }
 else   if (p instanceof ListPreference) {
    value=((ListPreference)p).getValue();
    mSettingsManager.setValue(key,value);
  }
}","@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  Preference p=findPreference(key);
  if (p == null)   return;
  String value;
  if (p instanceof SwitchPreference) {
    boolean checked=((SwitchPreference)p).isChecked();
    value=checked ? ""String_Node_Str"" : ""String_Node_Str"";
    mSettingsManager.setValue(key,value);
  }
 else   if (p instanceof ListPreference) {
    value=((ListPreference)p).getValue();
    mSettingsManager.setValue(key,value);
  }
  if (key.equals(SettingsManager.KEY_VIDEO_QUALITY)) {
    updatePreference(SettingsManager.KEY_VIDEO_HIGH_FRAME_RATE);
  }
}"
38133,"@Override public void onSettingChanged(ListPreference pref){
  String key=pref.getKey();
  if (pref.getKey().equals(KEY_VIDEO_QUALITY))   buildHFR();
  List changed=checkDependencyAndUpdate(key);
  if (changed == null)   return;
  notifyListeners(changed);
}","@Override public void onSettingChanged(ListPreference pref){
  String key=pref.getKey();
  List changed=checkDependencyAndUpdate(key);
  if (changed == null)   return;
  if (pref.getKey().equals(KEY_VIDEO_QUALITY))   buildHFR();
  notifyListeners(changed);
}"
38134,"private void buildHFR(){
  ListPreference hfrPref=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  Size[] highSpeedVideoSize=getSupportedHighSpeedVideoSize(mCameraId);
  if (highSpeedVideoSize.length == 0) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    hfrPref.setValueIndex(0);
    return;
  }
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  String video=videoQuality.getValue();
  int x=video.indexOf('x');
  Size videoSize=new Size(Integer.parseInt(video.substring(0,x)),Integer.parseInt(video.substring(x + 1)));
  boolean found=false;
  for (  Size s : highSpeedVideoSize) {
    if (videoSize.equals(s)) {
      found=true;
      break;
    }
  }
  if (!found) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    hfrPref.setValueIndex(0);
    return;
  }
  Range[] range=getSupportedHighSpeedVideoFPSRange(mCameraId,highSpeedVideoSize[0]);
  ArrayList<Range> list=new ArrayList<>();
  for (  Range r : range) {
    if (r.getLower() == r.getUpper()) {
      list.add(r);
    }
  }
  if (list.size() == 0) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    hfrPref.setValueIndex(0);
    return;
  }
  CharSequence[] entryValues=new CharSequence[list.size() * 2 + 1];
  CharSequence[] entries=new CharSequence[list.size() * 2 + 1];
  entryValues[0]=""String_Node_Str"";
  entries[0]=""String_Node_Str"";
  int i=1;
  for (  Range r : list) {
    entries[i]=""String_Node_Str"" + r.getLower();
    entryValues[i]=""String_Node_Str"" + r.getLower();
    i++;
  }
  for (  Range r : list) {
    entries[i]=""String_Node_Str"" + r.getLower();
    entryValues[i]=""String_Node_Str"" + r.getLower();
    i++;
  }
  hfrPref.setEntryValues(entryValues);
  hfrPref.setEntries(entries);
}","private void buildHFR(){
  ListPreference hfrPref=mPreferenceGroup.findPreference(KEY_VIDEO_HIGH_FRAME_RATE);
  Size[] highSpeedVideoSize=getSupportedHighSpeedVideoSize(mCameraId);
  if (highSpeedVideoSize.length == 0) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    setValueIndex(KEY_VIDEO_HIGH_FRAME_RATE,0);
    return;
  }
  ListPreference videoQuality=mPreferenceGroup.findPreference(KEY_VIDEO_QUALITY);
  String video=videoQuality.getValue();
  int x=video.indexOf('x');
  Size videoSize=new Size(Integer.parseInt(video.substring(0,x)),Integer.parseInt(video.substring(x + 1)));
  boolean found=false;
  for (  Size s : highSpeedVideoSize) {
    if (videoSize.equals(s)) {
      found=true;
      break;
    }
  }
  if (!found) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    setValueIndex(KEY_VIDEO_HIGH_FRAME_RATE,0);
    return;
  }
  Range[] range=getSupportedHighSpeedVideoFPSRange(mCameraId,videoSize);
  ArrayList<Range> list=new ArrayList<>();
  for (  Range r : range) {
    if (r.getLower() == r.getUpper()) {
      list.add(r);
    }
  }
  if (list.size() == 0) {
    CharSequence[] entryValues=new CharSequence[1];
    CharSequence[] entries=new CharSequence[1];
    entryValues[0]=""String_Node_Str"";
    entries[0]=""String_Node_Str"";
    hfrPref.setEntryValues(entryValues);
    hfrPref.setEntries(entries);
    setValueIndex(KEY_VIDEO_HIGH_FRAME_RATE,0);
    return;
  }
  CharSequence[] entryValues=new CharSequence[list.size() * 2 + 1];
  CharSequence[] entries=new CharSequence[list.size() * 2 + 1];
  entryValues[0]=""String_Node_Str"";
  entries[0]=""String_Node_Str"";
  int i=1;
  for (  Range r : list) {
    entries[i]=""String_Node_Str"" + r.getLower();
    entryValues[i]=""String_Node_Str"" + r.getLower();
    i++;
  }
  for (  Range r : list) {
    entries[i]=""String_Node_Str"" + r.getLower();
    entryValues[i]=""String_Node_Str"" + r.getLower();
    i++;
  }
  hfrPref.setEntryValues(entryValues);
  hfrPref.setEntries(entries);
  int index=getValueIndex(KEY_VIDEO_HIGH_FRAME_RATE);
  if (index == -1) {
    setValueIndex(KEY_VIDEO_HIGH_FRAME_RATE,0);
  }
}"
38135,"private void updateMapAndNotify(ListPreference pref){
  String key=pref.getKey();
  List changed=checkDependencyAndUpdate(key);
  if (changed == null)   return;
  notifyListeners(changed);
}","private void updateMapAndNotify(ListPreference pref){
  String key=pref.getKey();
  List changed=checkDependencyAndUpdate(key);
  if (changed == null)   return;
  if (pref.getKey().equals(KEY_VIDEO_QUALITY))   buildHFR();
  notifyListeners(changed);
}"
38136,"private void captureStillPicture(final int id){
  Log.d(TAG,""String_Node_Str"" + id);
  mIsRefocus=false;
  CameraCaptureSession.CaptureCallback captureCallback=new CameraCaptureSession.CaptureCallback(){
    @Override public void onCaptureCompleted(    CameraCaptureSession session,    CaptureRequest request,    TotalCaptureResult result){
      Log.d(TAG,""String_Node_Str"" + id);
    }
    @Override public void onCaptureFailed(    CameraCaptureSession session,    CaptureRequest request,    CaptureFailure result){
      Log.d(TAG,""String_Node_Str"" + id);
    }
    @Override public void onCaptureSequenceCompleted(    CameraCaptureSession session,    int sequenceId,    long frameNumber){
      Log.d(TAG,""String_Node_Str"" + id);
      unlockFocus(id);
    }
  }
;
  try {
    if (null == mActivity || null == mCameraDevice[id]) {
      warningToast(""String_Node_Str"");
      return;
    }
    checkAndPlayShutterSound(id);
    final boolean csEnabled=isClearSightOn();
    CaptureRequest.Builder captureBuilder;
    if (csEnabled) {
      captureBuilder=ClearSightImageProcessor.getInstance().createCaptureRequest(mCameraDevice[id]);
    }
 else {
      captureBuilder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
    }
    Location location=mLocationManager.getCurrentLocation();
    if (location != null) {
      Log.d(TAG,""String_Node_Str"" + location.toString());
      location.setTime(location.getTime() / 1000);
      captureBuilder.set(CaptureRequest.JPEG_GPS_LOCATION,location);
    }
 else {
      Log.d(TAG,""String_Node_Str"" + getRecordLocation());
    }
    captureBuilder.set(CaptureRequest.JPEG_ORIENTATION,CameraUtil.getJpegRotation(id,mOrientation));
    captureBuilder.set(CaptureRequest.CONTROL_MODE,CaptureRequest.CONTROL_MODE_AUTO);
    addPreviewSurface(captureBuilder,null,id);
    captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,mControlAFMode);
    captureBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CaptureRequest.CONTROL_AF_TRIGGER_IDLE);
    applySettingsForLockExposure(captureBuilder,id);
    applySettingsForCapture(captureBuilder,id);
    if (csEnabled) {
      ClearSightImageProcessor.getInstance().capture(id == BAYER_ID,mCaptureSession[id],captureBuilder,mCaptureCallbackHandler);
    }
 else     if (id == getMainCameraId() && mPostProcessor.isFilterOn()) {
      mCaptureSession[id].stopRepeating();
      captureBuilder.addTarget(mImageReader[id].getSurface());
      if (mPostProcessor.isManualMode()) {
        mPostProcessor.manualCapture(captureBuilder,mCaptureSession[id],captureCallback,mCaptureCallbackHandler);
      }
 else {
        List<CaptureRequest> captureList=mPostProcessor.setRequiredImages(captureBuilder);
        mCaptureSession[id].captureBurst(captureList,captureCallback,mCaptureCallbackHandler);
      }
    }
 else {
      captureBuilder.addTarget(mImageReader[id].getSurface());
      mCaptureSession[id].stopRepeating();
      if (mLongshotActive) {
        Log.d(TAG,""String_Node_Str"" + id);
        List<CaptureRequest> burstList=new ArrayList<>();
        for (int i=0; i < PersistUtil.getLongshotShotLimit(); i++) {
          burstList.add(captureBuilder.build());
        }
        mCaptureSession[id].captureBurst(burstList,new CameraCaptureSession.CaptureCallback(){
          @Override public void onCaptureCompleted(          CameraCaptureSession session,          CaptureRequest request,          TotalCaptureResult result){
            Log.d(TAG,""String_Node_Str"" + id);
            if (mLongshotActive) {
              mActivity.runOnUiThread(new Runnable(){
                @Override public void run(){
                  mUI.doShutterAnimation();
                }
              }
);
            }
          }
          @Override public void onCaptureFailed(          CameraCaptureSession session,          CaptureRequest request,          CaptureFailure result){
            Log.d(TAG,""String_Node_Str"" + id);
            if (mLongshotActive) {
              mActivity.runOnUiThread(new Runnable(){
                @Override public void run(){
                  mUI.doShutterAnimation();
                }
              }
);
            }
          }
          @Override public void onCaptureSequenceCompleted(          CameraCaptureSession session,          int sequenceId,          long frameNumber){
            Log.d(TAG,""String_Node_Str"" + id);
            mLongshotActive=false;
            unlockFocus(id);
          }
        }
,mCaptureCallbackHandler);
      }
 else {
        if (isMpoOn()) {
          mCaptureStartTime=System.currentTimeMillis();
          mMpoSaveHandler.obtainMessage(MpoSaveHandler.MSG_CONFIGURE,Long.valueOf(mCaptureStartTime)).sendToTarget();
        }
        mCaptureSession[id].capture(captureBuilder.build(),captureCallback,mCaptureCallbackHandler);
      }
    }
  }
 catch (  CameraAccessException e) {
    Log.d(TAG,""String_Node_Str"");
    e.printStackTrace();
  }
}","private void captureStillPicture(final int id){
  Log.d(TAG,""String_Node_Str"" + id);
  mIsRefocus=false;
  CameraCaptureSession.CaptureCallback captureCallback=new CameraCaptureSession.CaptureCallback(){
    @Override public void onCaptureCompleted(    CameraCaptureSession session,    CaptureRequest request,    TotalCaptureResult result){
      Log.d(TAG,""String_Node_Str"" + id);
    }
    @Override public void onCaptureFailed(    CameraCaptureSession session,    CaptureRequest request,    CaptureFailure result){
      Log.d(TAG,""String_Node_Str"" + id);
    }
    @Override public void onCaptureSequenceCompleted(    CameraCaptureSession session,    int sequenceId,    long frameNumber){
      Log.d(TAG,""String_Node_Str"" + id);
      unlockFocus(id);
    }
  }
;
  try {
    if (null == mActivity || null == mCameraDevice[id]) {
      warningToast(""String_Node_Str"");
      return;
    }
    final boolean csEnabled=isClearSightOn();
    CaptureRequest.Builder captureBuilder;
    if (csEnabled) {
      captureBuilder=ClearSightImageProcessor.getInstance().createCaptureRequest(mCameraDevice[id]);
    }
 else {
      captureBuilder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
    }
    Location location=mLocationManager.getCurrentLocation();
    if (location != null) {
      Log.d(TAG,""String_Node_Str"" + location.toString());
      location.setTime(location.getTime() / 1000);
      captureBuilder.set(CaptureRequest.JPEG_GPS_LOCATION,location);
    }
 else {
      Log.d(TAG,""String_Node_Str"" + getRecordLocation());
    }
    captureBuilder.set(CaptureRequest.JPEG_ORIENTATION,CameraUtil.getJpegRotation(id,mOrientation));
    captureBuilder.set(CaptureRequest.CONTROL_MODE,CaptureRequest.CONTROL_MODE_AUTO);
    addPreviewSurface(captureBuilder,null,id);
    captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,mControlAFMode);
    captureBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CaptureRequest.CONTROL_AF_TRIGGER_IDLE);
    applySettingsForLockExposure(captureBuilder,id);
    applySettingsForCapture(captureBuilder,id);
    if (csEnabled) {
      checkAndPlayShutterSound(id);
      ClearSightImageProcessor.getInstance().capture(id == BAYER_ID,mCaptureSession[id],captureBuilder,mCaptureCallbackHandler);
    }
 else     if (id == getMainCameraId() && mPostProcessor.isFilterOn()) {
      checkAndPlayShutterSound(id);
      mCaptureSession[id].stopRepeating();
      captureBuilder.addTarget(mImageReader[id].getSurface());
      if (mPostProcessor.isManualMode()) {
        mPostProcessor.manualCapture(captureBuilder,mCaptureSession[id],captureCallback,mCaptureCallbackHandler);
      }
 else {
        List<CaptureRequest> captureList=mPostProcessor.setRequiredImages(captureBuilder);
        mCaptureSession[id].captureBurst(captureList,captureCallback,mCaptureCallbackHandler);
      }
    }
 else {
      captureBuilder.addTarget(mImageReader[id].getSurface());
      mCaptureSession[id].stopRepeating();
      if (mLongshotActive) {
        Log.d(TAG,""String_Node_Str"" + id);
        List<CaptureRequest> burstList=new ArrayList<>();
        for (int i=0; i < PersistUtil.getLongshotShotLimit(); i++) {
          burstList.add(captureBuilder.build());
        }
        mCaptureSession[id].captureBurst(burstList,new CameraCaptureSession.CaptureCallback(){
          @Override public void onCaptureCompleted(          CameraCaptureSession session,          CaptureRequest request,          TotalCaptureResult result){
            Log.d(TAG,""String_Node_Str"" + id);
            if (mLongshotActive) {
              checkAndPlayShutterSound(id);
              mActivity.runOnUiThread(new Runnable(){
                @Override public void run(){
                  mUI.doShutterAnimation();
                }
              }
);
            }
          }
          @Override public void onCaptureFailed(          CameraCaptureSession session,          CaptureRequest request,          CaptureFailure result){
            Log.d(TAG,""String_Node_Str"" + id);
            if (mLongshotActive) {
              mActivity.runOnUiThread(new Runnable(){
                @Override public void run(){
                  mUI.doShutterAnimation();
                }
              }
);
            }
          }
          @Override public void onCaptureSequenceCompleted(          CameraCaptureSession session,          int sequenceId,          long frameNumber){
            Log.d(TAG,""String_Node_Str"" + id);
            mLongshotActive=false;
            unlockFocus(id);
          }
        }
,mCaptureCallbackHandler);
      }
 else {
        checkAndPlayShutterSound(id);
        if (isMpoOn()) {
          mCaptureStartTime=System.currentTimeMillis();
          mMpoSaveHandler.obtainMessage(MpoSaveHandler.MSG_CONFIGURE,Long.valueOf(mCaptureStartTime)).sendToTarget();
        }
        mCaptureSession[id].capture(captureBuilder.build(),captureCallback,mCaptureCallbackHandler);
      }
    }
  }
 catch (  CameraAccessException e) {
    Log.d(TAG,""String_Node_Str"");
    e.printStackTrace();
  }
}"
38137,"@Override public void onZoomChanged(float requestedZoom){
  mZoomValue=requestedZoom;
  if (isBackCamera()) {
switch (getCameraMode()) {
case DUAL_MODE:
      applyZoomAndUpdate(BAYER_ID);
    applyZoomAndUpdate(MONO_ID);
  break;
case BAYER_MODE:
applyZoomAndUpdate(BAYER_ID);
break;
case MONO_MODE:
applyZoomAndUpdate(MONO_ID);
break;
}
}
 else {
applyZoomAndUpdate(FRONT_ID);
}
}","@Override public void onZoomChanged(float requestedZoom){
  mZoomValue=requestedZoom;
  if (isBackCamera()) {
switch (getCameraMode()) {
case DUAL_MODE:
      applyZoomAndUpdate(BAYER_ID);
    applyZoomAndUpdate(MONO_ID);
  break;
case BAYER_MODE:
applyZoomAndUpdate(BAYER_ID);
break;
case MONO_MODE:
applyZoomAndUpdate(MONO_ID);
break;
}
}
 else {
applyZoomAndUpdate(FRONT_ID);
}
mUI.updateFaceViewCameraBound(mCropRegion[getMainCameraId()]);
}"
38138,"private void setUpMediaRecorder(int cameraId) throws IOException {
  Log.d(TAG,""String_Node_Str"");
  String videoSize=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_QUALITY);
  int size=CameraSettings.VIDEO_QUALITY_TABLE.get(videoSize);
  if (mCaptureTimeLapse) {
    size=CameraSettings.getTimeLapseQualityFor(size);
  }
  updateHFRSetting();
  boolean hfr=mHighSpeedCapture && !mHighSpeedCaptureSlowMode;
  mProfile=CamcorderProfile.get(cameraId,size);
  int videoEncoder=SettingTranslation.getVideoEncoder(mSettingsManager.getValue(SettingsManager.KEY_VIDEO_ENCODER));
  int audioEncoder=SettingTranslation.getAudioEncoder(mSettingsManager.getValue(SettingsManager.KEY_AUDIO_ENCODER));
  int outputFormat=MediaRecorder.OutputFormat.MPEG_4;
  if (!mCaptureTimeLapse && !hfr) {
    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
  mMediaRecorder.setOutputFormat(mProfile.fileFormat);
  String fileName=generateVideoFilename(outputFormat);
  Log.v(TAG,""String_Node_Str"" + fileName);
  mMediaRecorder.setOutputFile(fileName);
  mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
  mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
  if (mFrameProcessor.isFrameFilterEnabled()) {
    mMediaRecorder.setVideoSize(mProfile.videoFrameHeight,mProfile.videoFrameWidth);
  }
 else {
    mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  }
  mMediaRecorder.setVideoEncoder(videoEncoder);
  if (!mCaptureTimeLapse && !hfr) {
    mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
    mMediaRecorder.setAudioChannels(mProfile.audioChannels);
    mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
    mMediaRecorder.setAudioEncoder(audioEncoder);
  }
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    mMediaRecorder.setCaptureRate(fps);
  }
 else   if (mHighSpeedCapture) {
    mHighSpeedFPSRange=new Range(mHighSpeedCaptureRate,mHighSpeedCaptureRate);
    int fps=(int)mHighSpeedFPSRange.getUpper();
    mMediaRecorder.setCaptureRate(fps);
    if (mHighSpeedCaptureSlowMode) {
      mMediaRecorder.setVideoFrameRate(30);
    }
 else {
      mMediaRecorder.setVideoFrameRate(fps);
    }
    int scaledBitrate=mProfile.videoBitRate * fps / mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  Location loc=mLocationManager.getCurrentLocation();
  if (loc != null) {
    mMediaRecorder.setLocation((float)loc.getLatitude(),(float)loc.getLongitude());
  }
  int rotation=CameraUtil.getJpegRotation(cameraId,mOrientation);
  String videoRotation=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_ROTATION);
  if (videoRotation != null) {
    rotation+=Integer.parseInt(videoRotation);
    rotation=rotation % 360;
  }
  if (mFrameProcessor.isFrameFilterEnabled()) {
    mMediaRecorder.setOrientationHint(0);
  }
 else {
    mMediaRecorder.setOrientationHint(rotation);
  }
  mMediaRecorder.prepare();
}","private void setUpMediaRecorder(int cameraId) throws IOException {
  Log.d(TAG,""String_Node_Str"");
  String videoSize=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_QUALITY);
  int size=CameraSettings.VIDEO_QUALITY_TABLE.get(videoSize);
  if (mCaptureTimeLapse) {
    size=CameraSettings.getTimeLapseQualityFor(size);
  }
  updateHFRSetting();
  boolean hfr=mHighSpeedCapture && !mHighSpeedCaptureSlowMode;
  mProfile=CamcorderProfile.get(cameraId,size);
  int videoEncoder=SettingTranslation.getVideoEncoder(mSettingsManager.getValue(SettingsManager.KEY_VIDEO_ENCODER));
  int audioEncoder=SettingTranslation.getAudioEncoder(mSettingsManager.getValue(SettingsManager.KEY_AUDIO_ENCODER));
  int outputFormat=MediaRecorder.OutputFormat.MPEG_4;
  if (!mCaptureTimeLapse && !hfr) {
    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
  mMediaRecorder.setOutputFormat(mProfile.fileFormat);
  String fileName=generateVideoFilename(outputFormat);
  Log.v(TAG,""String_Node_Str"" + fileName);
  mMediaRecorder.setOutputFile(fileName);
  mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
  mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
  if (mFrameProcessor.isFrameFilterEnabled()) {
    mMediaRecorder.setVideoSize(mProfile.videoFrameHeight,mProfile.videoFrameWidth);
  }
 else {
    mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  }
  mMediaRecorder.setVideoEncoder(videoEncoder);
  if (!mCaptureTimeLapse && !hfr) {
    mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
    mMediaRecorder.setAudioChannels(mProfile.audioChannels);
    mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
    mMediaRecorder.setAudioEncoder(audioEncoder);
  }
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    mMediaRecorder.setCaptureRate(fps);
  }
 else   if (mHighSpeedCapture) {
    mHighSpeedFPSRange=new Range(mHighSpeedCaptureRate,mHighSpeedCaptureRate);
    int fps=(int)mHighSpeedFPSRange.getUpper();
    mMediaRecorder.setCaptureRate(fps);
    if (mHighSpeedCaptureSlowMode) {
      mMediaRecorder.setVideoFrameRate(30);
    }
 else {
      mMediaRecorder.setVideoFrameRate(fps);
    }
    int scaledBitrate=mProfile.videoBitRate * (fps / mProfile.videoFrameRate);
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  Location loc=mLocationManager.getCurrentLocation();
  if (loc != null) {
    mMediaRecorder.setLocation((float)loc.getLatitude(),(float)loc.getLongitude());
  }
  int rotation=CameraUtil.getJpegRotation(cameraId,mOrientation);
  String videoRotation=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_ROTATION);
  if (videoRotation != null) {
    rotation+=Integer.parseInt(videoRotation);
    rotation=rotation % 360;
  }
  if (mFrameProcessor.isFrameFilterEnabled()) {
    mMediaRecorder.setOrientationHint(0);
  }
 else {
    mMediaRecorder.setOrientationHint(rotation);
  }
  mMediaRecorder.prepare();
}"
38139,"private void checkSelfieFlashAndTakePicture(){
  String value=mSettingsManager.getValue(SettingsManager.KEY_SELFIE_FLASH);
  if (value == null) {
    takePicture();
    return;
  }
  if (value.equals(""String_Node_Str"") && getMainCameraId() == FRONT_ID) {
    mUI.startSelfieFlash();
    if (selfieThread == null) {
      selfieThread=new SelfieThread();
      selfieThread.start();
    }
  }
 else {
    takePicture();
  }
}","private void checkSelfieFlashAndTakePicture(){
  if (isSelfieFlash()) {
    mUI.startSelfieFlash();
    if (selfieThread == null) {
      selfieThread=new SelfieThread();
      selfieThread.start();
    }
  }
 else {
    takePicture();
  }
}"
38140,"public boolean takeZSLPicture(CameraDevice cameraDevice,CameraCaptureSession captureSession,ImageReader imageReader){
  if (mCameraDevice == null || mCaptureSession == null || mImageReader == null) {
    mCameraDevice=cameraDevice;
    mCaptureSession=captureSession;
    mImageReader=imageReader;
  }
  ZSLQueue.ImageItem imageItem=mZSLQueue.tryToGetMatchingItem();
  if (mController.getPreviewCaptureResult().get(CaptureResult.CONTROL_AE_STATE) == CameraMetadata.CONTROL_AE_STATE_FLASH_REQUIRED) {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    imageItem=null;
  }
  if (imageItem != null) {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    reprocessImage(imageItem);
    return true;
  }
 else {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    mZSLQueue.addPictureRequest();
    return false;
  }
}","public boolean takeZSLPicture(CameraDevice cameraDevice,CameraCaptureSession captureSession,ImageReader imageReader){
  if (mCameraDevice == null || mCaptureSession == null || mImageReader == null) {
    mCameraDevice=cameraDevice;
    mCaptureSession=captureSession;
    mImageReader=imageReader;
  }
  ZSLQueue.ImageItem imageItem=mZSLQueue.tryToGetMatchingItem();
  if (mController.getPreviewCaptureResult().get(CaptureResult.CONTROL_AE_STATE) == CameraMetadata.CONTROL_AE_STATE_FLASH_REQUIRED) {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    imageItem=null;
  }
  if (mController.isSelfieFlash()) {
    imageItem=null;
  }
  if (imageItem != null) {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    reprocessImage(imageItem);
    return true;
  }
 else {
    if (DEBUG_ZSL)     Log.d(TAG,""String_Node_Str"");
    mZSLQueue.addPictureRequest();
    return false;
  }
}"
38141,"private void processFinalPair(){
  Log.d(TAG,""String_Node_Str"");
  releaseBayerFrames();
  releaseMonoFrames();
  mImageProcessHandler.removeMessages(MSG_NEW_CAPTURE_RESULT);
  mImageProcessHandler.removeMessages(MSG_NEW_CAPTURE_FAIL);
  mCaptureDone=true;
}","private void processFinalPair(){
  Log.d(TAG,""String_Node_Str"");
  releaseBayerFrames();
  releaseMonoFrames();
  mImageProcessHandler.removeMessages(MSG_NEW_CAPTURE_RESULT);
  mImageProcessHandler.removeMessages(MSG_NEW_CAPTURE_FAIL);
  mCaptureDone=true;
  if (mReprocessingPairCount == 0) {
    Log.w(TAG,""String_Node_Str"");
    if (mCallback != null)     mCallback.onClearSightFailure(null);
  }
}"
38142,"public void init(StreamConfigurationMap map,int width,int height,Context context,OnMediaSavedListener mediaListener){
  Log.d(TAG,""String_Node_Str"");
  mIsClosing=false;
  mImageProcessThread=new HandlerThread(""String_Node_Str"");
  mImageProcessThread.start();
  mClearsightRegisterThread=new HandlerThread(""String_Node_Str"");
  mClearsightRegisterThread.start();
  mClearsightProcessThread=new HandlerThread(""String_Node_Str"");
  mClearsightProcessThread.start();
  mImageEncodeThread=new HandlerThread(""String_Node_Str"");
  mImageEncodeThread.start();
  mImageProcessHandler=new ImageProcessHandler(mImageProcessThread.getLooper());
  mClearsightRegisterHandler=new ClearsightRegisterHandler(mClearsightRegisterThread.getLooper());
  mClearsightProcessHandler=new ClearsightProcessHandler(mClearsightProcessThread.getLooper());
  mImageEncodeHandler=new ImageEncodeHandler(mImageEncodeThread.getLooper());
  mFinalPictureSize=new Size(width,height);
  mFinalPictureRatio=(float)width / (float)height;
  mFinalMonoSize=getFinalMonoSize();
  Size maxSize=findMaxOutputSize(map);
  int maxWidth=maxSize.getWidth();
  int maxHeight=maxSize.getHeight();
  mImageReader[CAM_TYPE_BAYER]=createImageReader(CAM_TYPE_BAYER,maxWidth,maxHeight);
  mImageReader[CAM_TYPE_MONO]=createImageReader(CAM_TYPE_MONO,maxWidth,maxHeight);
  mEncodeImageReader[CAM_TYPE_BAYER]=createEncodeImageReader(CAM_TYPE_BAYER,maxWidth,maxHeight);
  mEncodeImageReader[CAM_TYPE_MONO]=createEncodeImageReader(CAM_TYPE_MONO,maxWidth,maxHeight);
  mMediaSavedListener=mediaListener;
  CameraManager cm=(CameraManager)context.getSystemService(Context.CAMERA_SERVICE);
  try {
    CameraCharacteristics cc=cm.getCameraCharacteristics(""String_Node_Str"");
    byte[] blob=cc.get(OTP_CALIB_BLOB);
    ClearSightNativeEngine.getInstance().init(mNumFrameCount * 2,width,height,CamSystemCalibrationData.createFromBytes(blob));
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
  Log.d(TAG,""String_Node_Str"");
}","public void init(StreamConfigurationMap map,int width,int height,Context context,OnMediaSavedListener mediaListener){
  Log.d(TAG,""String_Node_Str"");
  mIsClosing=false;
  mImageProcessThread=new HandlerThread(""String_Node_Str"");
  mImageProcessThread.start();
  mClearsightRegisterThread=new HandlerThread(""String_Node_Str"");
  mClearsightRegisterThread.start();
  mClearsightProcessThread=new HandlerThread(""String_Node_Str"");
  mClearsightProcessThread.start();
  mImageEncodeThread=new HandlerThread(""String_Node_Str"");
  mImageEncodeThread.start();
  mImageProcessHandler=new ImageProcessHandler(mImageProcessThread.getLooper());
  mClearsightRegisterHandler=new ClearsightRegisterHandler(mClearsightRegisterThread.getLooper());
  mClearsightProcessHandler=new ClearsightProcessHandler(mClearsightProcessThread.getLooper());
  mImageEncodeHandler=new ImageEncodeHandler(mImageEncodeThread.getLooper());
  mFinalPictureSize=new Size(width,height);
  mFinalPictureRatio=(float)width / (float)height;
  mFinalMonoSize=getFinalMonoSize();
  Size maxSize=findMaxOutputSize(map);
  int maxWidth=maxSize.getWidth();
  int maxHeight=maxSize.getHeight();
  mImageReader[CAM_TYPE_BAYER]=createImageReader(CAM_TYPE_BAYER,maxWidth,maxHeight);
  mImageReader[CAM_TYPE_MONO]=createImageReader(CAM_TYPE_MONO,maxWidth,maxHeight);
  mEncodeImageReader[CAM_TYPE_BAYER]=createEncodeImageReader(CAM_TYPE_BAYER,maxWidth,maxHeight);
  mEncodeImageReader[CAM_TYPE_MONO]=createEncodeImageReader(CAM_TYPE_MONO,maxWidth,maxHeight);
  mMediaSavedListener=mediaListener;
  CameraManager cm=(CameraManager)context.getSystemService(Context.CAMERA_SERVICE);
  try {
    CameraCharacteristics cc=cm.getCameraCharacteristics(""String_Node_Str"");
    byte[] blob=cc.get(OTP_CALIB_BLOB);
    ClearSightNativeEngine.getInstance().init(mNumFrameCount * 2,maxWidth,maxHeight,CamSystemCalibrationData.createFromBytes(blob));
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
  Log.d(TAG,""String_Node_Str"");
}"
38143,"private Rect getFinalCropRect(Rect rect){
  Rect finalRect=new Rect(rect);
  float rectRatio=(float)rect.width() / (float)rect.height();
  if (rectRatio > mFinalPictureRatio) {
    int newWidth=(int)(((float)rect.height() * mFinalPictureRatio) + .5f);
    int newXoffset=(rect.width() - newWidth) / 2;
    finalRect.left=newXoffset;
    finalRect.right=newXoffset + newWidth;
  }
 else   if (rectRatio < mFinalPictureRatio) {
    int newHeight=(int)(((float)rect.width() / mFinalPictureRatio) + .5f);
    int newYoffset=(rect.height() - newHeight) / 2;
    finalRect.top=newYoffset;
    finalRect.bottom=newYoffset + newHeight;
  }
  return finalRect;
}","private Rect getFinalCropRect(Rect rect){
  Rect finalRect=new Rect(rect);
  float rectRatio=(float)rect.width() / (float)rect.height();
  Log.d(TAG,""String_Node_Str"" + rect.toString());
  Log.d(TAG,""String_Node_Str"" + rectRatio + ""String_Node_Str""+ mFinalPictureRatio);
  if (rectRatio > mFinalPictureRatio) {
    int newWidth=(int)(((float)rect.height() * mFinalPictureRatio) + .5f);
    int newXoffset=(rect.width() - newWidth) / 2 + rect.left;
    finalRect.left=newXoffset;
    finalRect.right=newXoffset + newWidth;
  }
 else   if (rectRatio < mFinalPictureRatio) {
    int newHeight=(int)(((float)rect.width() / mFinalPictureRatio) + .5f);
    int newYoffset=(rect.height() - newHeight) / 2 + rect.top;
    finalRect.top=newYoffset;
    finalRect.bottom=newYoffset + newHeight;
  }
  Log.d(TAG,""String_Node_Str"" + finalRect.toString());
  return finalRect;
}"
38144,"/** 
 * Unlock the focus. This method should be called when still image capture sequence is finished.
 */
private void unlockFocus(int id){
  Log.d(TAG,""String_Node_Str"" + id);
  try {
    CaptureRequest.Builder builder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
    builder.setTag(id);
    addPreviewSurface(builder,null,id);
    applySettingsForUnlockFocus(builder,id);
    mCaptureSession[id].capture(builder.build(),mCaptureCallback,mCameraHandler);
    mState[id]=STATE_PREVIEW;
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    applySettingsForUnlockExposure(mPreviewRequestBuilder[id],id);
    setAFModeToPreview(id,mControlAFMode);
    mTakingPicture[id]=false;
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.stopSelfieFlash();
        mUI.enableShutter(true);
      }
    }
);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}","/** 
 * Unlock the focus. This method should be called when still image capture sequence is finished.
 */
private void unlockFocus(int id){
  Log.d(TAG,""String_Node_Str"" + id);
  try {
    CaptureRequest.Builder builder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
    builder.setTag(id);
    addPreviewSurface(builder,null,id);
    applySettingsForUnlockFocus(builder,id);
    mCaptureSession[id].capture(builder.build(),mCaptureCallback,mCameraHandler);
    mState[id]=STATE_PREVIEW;
    if (id == getMainCameraId()) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.clearFocus();
        }
      }
);
    }
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    applySettingsForUnlockExposure(mPreviewRequestBuilder[id],id);
    setAFModeToPreview(id,mControlAFMode);
    mTakingPicture[id]=false;
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.stopSelfieFlash();
        mUI.enableShutter(true);
      }
    }
);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}"
38145,"private void handlePermissionsSuccess(){
  if (mIntent != null) {
    mIsReturnResult=true;
    mIntent.setClass(this,CameraActivity.class);
    startActivityForResult(mIntent,1);
  }
 else {
    mIsReturnResult=false;
    Intent intent=new Intent(this,CameraActivity.class);
    startActivity(intent);
    finish();
  }
}","private void handlePermissionsSuccess(){
  if (mIntent != null) {
    mIsReturnResult=true;
    mIntent.setClass(this,CameraActivity.class);
    mIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    startActivity(mIntent);
    finish();
  }
 else {
    mIsReturnResult=false;
    Intent intent=new Intent(this,CameraActivity.class);
    startActivity(intent);
    finish();
  }
}"
38146,"private void doReturnToCaller(boolean valid){
  Intent resultIntent=new Intent();
  int resultCode;
  if (valid) {
    resultCode=Activity.RESULT_OK;
    resultIntent.setData(mCurrentVideoUri);
  }
 else {
    resultCode=Activity.RESULT_CANCELED;
  }
  mActivity.setResultEx(resultCode,resultIntent);
  mActivity.finish();
}","private void doReturnToCaller(boolean valid){
  Intent resultIntent=new Intent();
  int resultCode;
  if (valid) {
    resultCode=Activity.RESULT_OK;
    resultIntent.setData(mCurrentVideoUri);
    resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
 else {
    resultCode=Activity.RESULT_CANCELED;
  }
  mActivity.setResultEx(resultCode,resultIntent);
  mActivity.finish();
}"
38147,"/** 
 * Unlock the focus. This method should be called when still image capture sequence is finished.
 */
private void unlockFocus(int id){
  Log.d(TAG,""String_Node_Str"" + id);
  try {
    CaptureRequest.Builder builder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
    builder.setTag(id);
    addPreviewSurface(builder,null,id);
    applySettingsForUnlockFocus(builder,id);
    mCaptureSession[id].capture(builder.build(),mCaptureCallback,mCameraHandler);
    mState[id]=STATE_PREVIEW;
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    applySettingsForUnlockExposure(mPreviewRequestBuilder[id],id);
    setAFModeToPreview(id,mControlAFMode);
    mTakingPicture[id]=false;
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.stopSelfieFlash();
        mUI.enableShutter(true);
      }
    }
);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}","/** 
 * Unlock the focus. This method should be called when still image capture sequence is finished.
 */
private void unlockFocus(int id){
  Log.d(TAG,""String_Node_Str"" + id);
  try {
    CaptureRequest.Builder builder=mCameraDevice[id].createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
    builder.setTag(id);
    addPreviewSurface(builder,null,id);
    applySettingsForUnlockFocus(builder,id);
    mCaptureSession[id].capture(builder.build(),mCaptureCallback,mCameraHandler);
    mState[id]=STATE_PREVIEW;
    if (id == getMainCameraId()) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.clearFocus();
        }
      }
);
    }
    mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
    applySettingsForUnlockExposure(mPreviewRequestBuilder[id],id);
    setAFModeToPreview(id,mControlAFMode);
    mTakingPicture[id]=false;
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.stopSelfieFlash();
        mUI.enableShutter(true);
      }
    }
);
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}"
38148,"private void processNewReprocessImage(Message msg){
  boolean isBayer=(msg.arg1 == CAM_TYPE_BAYER);
  Image image=(Image)msg.obj;
  long ts=image.getTimestamp();
  Log.d(TAG,""String_Node_Str"" + ts);
  if (mDumpImages) {
    saveDebugImageAsJpeg(mMediaSaveService,image,isBayer,mNamedEntity,ClearSightNativeEngine.getInstance().getImageCount(isBayer));
  }
  if (mDumpYUV) {
    saveDebugImageAsNV21(image,isBayer,mNamedEntity,ClearSightNativeEngine.getInstance().getImageCount(isBayer));
  }
  if (!ClearSightNativeEngine.getInstance().hasReferenceImage(isBayer)) {
    ClearSightNativeEngine.getInstance().setReferenceImage(isBayer,image);
  }
 else {
    mClearsightRegisterHandler.obtainMessage(MSG_NEW_IMG,msg.arg1,0,msg.obj).sendToTarget();
  }
  mReprocessingFrames.removeAt(mReprocessingFrames.indexOfValue(ts));
  checkReprocessDone();
}","private void processNewReprocessImage(Message msg){
  boolean isBayer=(msg.arg1 == CAM_TYPE_BAYER);
  Image image=(Image)msg.obj;
  long ts=image.getTimestamp();
  Log.d(TAG,""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ ts);
  int frameCount=isBayer ? ++mReprocessedBayerCount : ++mReprocessedMonoCount;
  if (mDumpImages) {
    saveDebugImageAsJpeg(mMediaSaveService,image,isBayer,mNamedEntity,frameCount,ts / 1000000);
  }
  if (mDumpYUV) {
    saveDebugImageAsNV21(image,isBayer,mNamedEntity,frameCount,ts / 1000000);
  }
  if (!ClearSightNativeEngine.getInstance().hasReferenceImage(isBayer)) {
    ClearSightNativeEngine.getInstance().setReferenceImage(isBayer,image);
  }
 else {
    mClearsightRegisterHandler.obtainMessage(MSG_NEW_IMG,msg.arg1,0,msg.obj).sendToTarget();
  }
  mReprocessingFrames.removeAt(mReprocessingFrames.indexOfValue(ts));
  checkReprocessDone();
}"
38149,"public void saveDebugImageAsNV21(Image image,boolean isBayer,NamedEntity namedEntity,int count){
  if (image.getFormat() != ImageFormat.YUV_420_888) {
    Log.d(TAG,""String_Node_Str"");
  }
  String type=isBayer ? ""String_Node_Str"" : ""String_Node_Str"";
  String title=String.format(""String_Node_Str"",namedEntity.title,image.getWidth(),image.getHeight(),type,count);
  YuvImage yuv=createYuvImage(image);
  String path=Storage.generateFilepath(title,""String_Node_Str"");
  Storage.writeFile(path,yuv.getYuvData(),null,""String_Node_Str"");
}","public void saveDebugImageAsNV21(Image image,boolean isBayer,NamedEntity namedEntity,int count,long ts){
  if (image.getFormat() != ImageFormat.YUV_420_888) {
    Log.d(TAG,""String_Node_Str"");
  }
  String type=isBayer ? ""String_Node_Str"" : ""String_Node_Str"";
  String title=String.format(""String_Node_Str"",namedEntity.title,image.getWidth(),image.getHeight(),type,count,ts);
  YuvImage yuv=createYuvImage(image);
  String path=Storage.generateFilepath(title,""String_Node_Str"");
  Storage.writeFile(path,yuv.getYuvData(),null,""String_Node_Str"");
}"
38150,"public void saveDebugImageAsJpeg(MediaSaveService service,Image image,boolean isBayer,NamedEntity namedEntity,int count){
  if (image.getFormat() == ImageFormat.YUV_420_888)   saveDebugImageAsJpeg(service,createYuvImage(image),isBayer,namedEntity,count);
 else   if (image.getFormat() == ImageFormat.JPEG) {
    saveDebugImageAsJpeg(service,getJpegData(image),image.getWidth(),image.getHeight(),isBayer,namedEntity,count);
  }
}","public void saveDebugImageAsJpeg(MediaSaveService service,Image image,boolean isBayer,NamedEntity namedEntity,int count,long ts){
  if (image.getFormat() == ImageFormat.YUV_420_888)   saveDebugImageAsJpeg(service,createYuvImage(image),isBayer,namedEntity,count,ts);
 else   if (image.getFormat() == ImageFormat.JPEG) {
    saveDebugImageAsJpeg(service,getJpegData(image),image.getWidth(),image.getHeight(),isBayer,namedEntity,count,ts);
  }
}"
38151,"private void handlePermissionsSuccess(){
  if (mIntent != null) {
    mIsReturnResult=true;
    mIntent.setClass(this,CameraActivity.class);
    startActivityForResult(mIntent,1);
  }
 else {
    mIsReturnResult=false;
    Intent intent=new Intent(this,CameraActivity.class);
    startActivity(intent);
    finish();
  }
}","private void handlePermissionsSuccess(){
  if (mIntent != null) {
    mIsReturnResult=true;
    mIntent.setClass(this,CameraActivity.class);
    mIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    startActivity(mIntent);
    finish();
  }
 else {
    mIsReturnResult=false;
    Intent intent=new Intent(this,CameraActivity.class);
    startActivity(intent);
    finish();
  }
}"
38152,"private void doReturnToCaller(boolean valid){
  Intent resultIntent=new Intent();
  int resultCode;
  if (valid) {
    resultCode=Activity.RESULT_OK;
    resultIntent.setData(mCurrentVideoUri);
  }
 else {
    resultCode=Activity.RESULT_CANCELED;
  }
  mActivity.setResultEx(resultCode,resultIntent);
  mActivity.finish();
}","private void doReturnToCaller(boolean valid){
  Intent resultIntent=new Intent();
  int resultCode;
  if (valid) {
    resultCode=Activity.RESULT_OK;
    resultIntent.setData(mCurrentVideoUri);
    resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
 else {
    resultCode=Activity.RESULT_CANCELED;
  }
  mActivity.setResultEx(resultCode,resultIntent);
  mActivity.finish();
}"
38153,"private void processNewReprocessImage(Message msg){
  boolean isBayer=(msg.arg1 == CAM_TYPE_BAYER);
  Image image=(Image)msg.obj;
  long ts=image.getTimestamp();
  Log.d(TAG,""String_Node_Str"" + ts);
  if (mDumpImages) {
    saveDebugImageAsJpeg(mMediaSaveService,image,isBayer,mNamedEntity,ClearSightNativeEngine.getInstance().getImageCount(isBayer));
  }
  if (mDumpYUV) {
    saveDebugImageAsNV21(image,isBayer,mNamedEntity,ClearSightNativeEngine.getInstance().getImageCount(isBayer));
  }
  if (!ClearSightNativeEngine.getInstance().hasReferenceImage(isBayer)) {
    ClearSightNativeEngine.getInstance().setReferenceImage(isBayer,image);
  }
 else {
    mClearsightRegisterHandler.obtainMessage(MSG_NEW_IMG,msg.arg1,0,msg.obj).sendToTarget();
  }
  mReprocessingFrames.removeAt(mReprocessingFrames.indexOfValue(ts));
  checkReprocessDone();
}","private void processNewReprocessImage(Message msg){
  boolean isBayer=(msg.arg1 == CAM_TYPE_BAYER);
  Image image=(Image)msg.obj;
  long ts=image.getTimestamp();
  Log.d(TAG,""String_Node_Str"" + msg.arg1 + ""String_Node_Str""+ ts);
  int frameCount=isBayer ? ++mReprocessedBayerCount : ++mReprocessedMonoCount;
  if (mDumpImages) {
    saveDebugImageAsJpeg(mMediaSaveService,image,isBayer,mNamedEntity,frameCount,ts / 1000000);
  }
  if (mDumpYUV) {
    saveDebugImageAsNV21(image,isBayer,mNamedEntity,frameCount,ts / 1000000);
  }
  if (!ClearSightNativeEngine.getInstance().hasReferenceImage(isBayer)) {
    ClearSightNativeEngine.getInstance().setReferenceImage(isBayer,image);
  }
 else {
    mClearsightRegisterHandler.obtainMessage(MSG_NEW_IMG,msg.arg1,0,msg.obj).sendToTarget();
  }
  mReprocessingFrames.removeAt(mReprocessingFrames.indexOfValue(ts));
  checkReprocessDone();
}"
38154,"public void saveDebugImageAsNV21(Image image,boolean isBayer,NamedEntity namedEntity,int count){
  if (image.getFormat() != ImageFormat.YUV_420_888) {
    Log.d(TAG,""String_Node_Str"");
  }
  String type=isBayer ? ""String_Node_Str"" : ""String_Node_Str"";
  String title=String.format(""String_Node_Str"",namedEntity.title,image.getWidth(),image.getHeight(),type,count);
  YuvImage yuv=createYuvImage(image);
  String path=Storage.generateFilepath(title,""String_Node_Str"");
  Storage.writeFile(path,yuv.getYuvData(),null,""String_Node_Str"");
}","public void saveDebugImageAsNV21(Image image,boolean isBayer,NamedEntity namedEntity,int count,long ts){
  if (image.getFormat() != ImageFormat.YUV_420_888) {
    Log.d(TAG,""String_Node_Str"");
  }
  String type=isBayer ? ""String_Node_Str"" : ""String_Node_Str"";
  String title=String.format(""String_Node_Str"",namedEntity.title,image.getWidth(),image.getHeight(),type,count,ts);
  YuvImage yuv=createYuvImage(image);
  String path=Storage.generateFilepath(title,""String_Node_Str"");
  Storage.writeFile(path,yuv.getYuvData(),null,""String_Node_Str"");
}"
38155,"public void saveDebugImageAsJpeg(MediaSaveService service,Image image,boolean isBayer,NamedEntity namedEntity,int count){
  if (image.getFormat() == ImageFormat.YUV_420_888)   saveDebugImageAsJpeg(service,createYuvImage(image),isBayer,namedEntity,count);
 else   if (image.getFormat() == ImageFormat.JPEG) {
    saveDebugImageAsJpeg(service,getJpegData(image),image.getWidth(),image.getHeight(),isBayer,namedEntity,count);
  }
}","public void saveDebugImageAsJpeg(MediaSaveService service,Image image,boolean isBayer,NamedEntity namedEntity,int count,long ts){
  if (image.getFormat() == ImageFormat.YUV_420_888)   saveDebugImageAsJpeg(service,createYuvImage(image),isBayer,namedEntity,count,ts);
 else   if (image.getFormat() == ImageFormat.JPEG) {
    saveDebugImageAsJpeg(service,getJpegData(image),image.getWidth(),image.getHeight(),isBayer,namedEntity,count,ts);
  }
}"
38156,"private void startRecordingVideo(int cameraId){
  if (null == mCameraDevice[cameraId]) {
    return;
  }
  Log.d(TAG,""String_Node_Str"" + cameraId);
  mIsRecordingVideo=true;
  mMediaRecorderPausing=false;
  mUI.hideUIwhileRecording();
  mUI.clearFocus();
  mCameraHandler.removeMessages(CANCEL_TOUCH_FOCUS,cameraId);
  mState[cameraId]=STATE_PREVIEW;
  mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
  closePreviewSession();
  mFrameProcessor.onClose();
  boolean changed=mUI.setPreviewSize(mVideoSize.getWidth(),mVideoSize.getHeight());
  if (changed) {
    mUI.hideSurfaceView();
    mUI.showSurfaceView();
  }
  try {
    setUpMediaRecorder(cameraId);
    createVideoSnapshotImageReader();
    final CaptureRequest.Builder mPreviewBuilder=mCameraDevice[cameraId].createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
    List<Surface> surfaces=new ArrayList<>();
    Surface surface=getPreviewSurfaceForSession(cameraId);
    mFrameProcessor.init(mVideoSize);
    if (mFrameProcessor.isFrameFilterEnabled()) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          mUI.getSurfaceHolder().setFixedSize(mVideoSize.getHeight(),mVideoSize.getWidth());
        }
      }
);
    }
    mFrameProcessor.setOutputSurface(surface);
    mFrameProcessor.setVideoOutputSurface(mMediaRecorder.getSurface());
    addPreviewSurface(mPreviewBuilder,surfaces,cameraId);
    if (!mHighSpeedCapture)     surfaces.add(mVideoSnapshotImageReader.getSurface());
 else     mPreviewBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,mHighSpeedFPSRange);
    if (!mHighSpeedCapture) {
      mCameraDevice[cameraId].createCaptureSession(surfaces,new CameraCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          Log.d(TAG,""String_Node_Str"");
          mCurrentSession=cameraCaptureSession;
          try {
            setUpVideoCaptureRequestBuilder(mPreviewBuilder);
            mCurrentSession.setRepeatingRequest(mPreviewBuilder.build(),null,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            e.printStackTrace();
          }
          mMediaRecorder.start();
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true);
          updateRecordingTime();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
 else {
      mCameraDevice[cameraId].createConstrainedHighSpeedCaptureSession(surfaces,new CameraConstrainedHighSpeedCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          mCurrentSession=cameraCaptureSession;
          CameraConstrainedHighSpeedCaptureSession session=(CameraConstrainedHighSpeedCaptureSession)mCurrentSession;
          try {
            List list=session.createHighSpeedRequestList(mPreviewBuilder.build());
            session.setRepeatingBurst(list,null,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalArgumentException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
          mMediaRecorder.start();
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true);
          updateRecordingTime();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","private void startRecordingVideo(int cameraId){
  if (null == mCameraDevice[cameraId]) {
    return;
  }
  Log.d(TAG,""String_Node_Str"" + cameraId);
  mIsRecordingVideo=true;
  mMediaRecorderPausing=false;
  mUI.hideUIwhileRecording();
  mUI.clearFocus();
  mCameraHandler.removeMessages(CANCEL_TOUCH_FOCUS,cameraId);
  mState[cameraId]=STATE_PREVIEW;
  mControlAFMode=CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE;
  closePreviewSession();
  mFrameProcessor.onClose();
  boolean changed=mUI.setPreviewSize(mVideoPreviewSize.getWidth(),mVideoPreviewSize.getHeight());
  if (changed) {
    mUI.hideSurfaceView();
    mUI.showSurfaceView();
  }
  try {
    setUpMediaRecorder(cameraId);
    createVideoSnapshotImageReader();
    final CaptureRequest.Builder mPreviewBuilder=mCameraDevice[cameraId].createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
    List<Surface> surfaces=new ArrayList<>();
    Surface surface=getPreviewSurfaceForSession(cameraId);
    if (mFrameProcessor.isFrameFilterEnabled()) {
      mFrameProcessor.init(mVideoSize);
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          mUI.getSurfaceHolder().setFixedSize(mVideoSize.getHeight(),mVideoSize.getWidth());
        }
      }
);
      mFrameProcessor.setOutputSurface(surface);
      mFrameProcessor.setVideoOutputSurface(mMediaRecorder.getSurface());
      addPreviewSurface(mPreviewBuilder,surfaces,cameraId);
    }
 else {
      surfaces.add(surface);
      mPreviewBuilder.addTarget(surface);
      surfaces.add(mMediaRecorder.getSurface());
      mPreviewBuilder.addTarget(mMediaRecorder.getSurface());
    }
    if (!mHighSpeedCapture)     surfaces.add(mVideoSnapshotImageReader.getSurface());
 else     mPreviewBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,mHighSpeedFPSRange);
    if (!mHighSpeedCapture) {
      mCameraDevice[cameraId].createCaptureSession(surfaces,new CameraCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          Log.d(TAG,""String_Node_Str"");
          mCurrentSession=cameraCaptureSession;
          try {
            setUpVideoCaptureRequestBuilder(mPreviewBuilder);
            mCurrentSession.setRepeatingRequest(mPreviewBuilder.build(),null,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            e.printStackTrace();
          }
          mMediaRecorder.start();
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true);
          updateRecordingTime();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
 else {
      mCameraDevice[cameraId].createConstrainedHighSpeedCaptureSession(surfaces,new CameraConstrainedHighSpeedCaptureSession.StateCallback(){
        @Override public void onConfigured(        CameraCaptureSession cameraCaptureSession){
          mCurrentSession=cameraCaptureSession;
          CameraConstrainedHighSpeedCaptureSession session=(CameraConstrainedHighSpeedCaptureSession)mCurrentSession;
          try {
            List list=session.createHighSpeedRequestList(mPreviewBuilder.build());
            session.setRepeatingBurst(list,null,mCameraHandler);
          }
 catch (          CameraAccessException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalArgumentException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"" + e.getMessage());
            e.printStackTrace();
          }
          mMediaRecorder.start();
          mUI.clearFocus();
          mUI.resetPauseButton();
          mRecordingTotalTime=0L;
          mRecordingStartTime=SystemClock.uptimeMillis();
          mUI.showRecordingUI(true);
          updateRecordingTime();
        }
        @Override public void onConfigureFailed(        CameraCaptureSession cameraCaptureSession){
          Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
,null);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}"
38157,"private void updateVideoSize(){
  String videoSize=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_QUALITY);
  mVideoSize=parsePictureSize(videoSize);
}","private void updateVideoSize(){
  String videoSize=mSettingsManager.getValue(SettingsManager.KEY_VIDEO_QUALITY);
  mVideoSize=parsePictureSize(videoSize);
  Point screenSize=new Point();
  mActivity.getWindowManager().getDefaultDisplay().getSize(screenSize);
  Size[] prevSizes=mSettingsManager.getSupportedOutputSize(getMainCameraId(),MediaRecorder.class);
  mVideoPreviewSize=getOptimalPreviewSize(mVideoSize,prevSizes,screenSize.x,screenSize.y);
}"
38158,"private void updateFilterModeIcon(ListPreference scenePref,ListPreference hdrPref){
  if (scenePref == null || hdrPref == null)   return;
  if ((notSame(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO)) || (notSame(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff))) {
    buttonSetEnabled(mFilterModeSwitcher,false);
    changeFilterModeControlIcon(""String_Node_Str"");
  }
 else {
    buttonSetEnabled(mFilterModeSwitcher,true);
  }
}","private void updateFilterModeIcon(ListPreference scenePref,ListPreference hdrPref){
  if (scenePref == null || hdrPref == null)   return;
  if ((notSame(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO)) || (notSame(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff))) {
    buttonSetEnabled(mFilterModeSwitcher,false);
    changeFilterModeControlIcon(""String_Node_Str"");
  }
 else   if (same(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO) && (same(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff) || !hdrPref.getKey().equals(CameraSettings.KEY_CAMERA_HDR))) {
    buttonSetEnabled(mFilterModeSwitcher,true);
  }
}"
38159,"public void enableTouch(boolean enable){
  if (enable) {
    ((ShutterButton)mShutter).setPressed(false);
    mVideoShutter.setPressed(false);
    mSwitcher.setPressed(false);
    mMenu.setPressed(false);
    mMute.setPressed(false);
    mFrontBackSwitcher.setPressed(false);
    if (TsMakeupManager.HAS_TS_MAKEUP) {
      mTsMakeupSwitcher.setPressed(false);
    }
 else {
      mHdrSwitcher.setPressed(false);
    }
    mSceneModeSwitcher.setPressed(false);
    mFilterModeSwitcher.setPressed(false);
  }
 else {
    mTempEnabled[FILTER_MODE_INDEX]=mFilterModeSwitcher.isEnabled();
  }
  ((ShutterButton)mShutter).enableTouch(enable);
  mVideoShutter.setClickable(enable);
  ((ModuleSwitcher)mSwitcher).enableTouch(enable);
  mMenu.setEnabled(enable);
  mMute.setEnabled(enable);
  mFrontBackSwitcher.setEnabled(enable);
  if (TsMakeupManager.HAS_TS_MAKEUP) {
    mTsMakeupSwitcher.setEnabled(enable);
  }
 else {
    mHdrSwitcher.setEnabled(enable);
  }
  mSceneModeSwitcher.setEnabled(enable);
  mPreview.setEnabled(enable);
  mFilterModeSwitcher.setEnabled(enable && mTempEnabled[FILTER_MODE_INDEX]);
}","public void enableTouch(boolean enable){
  if (enable) {
    ((ShutterButton)mShutter).setPressed(false);
    mVideoShutter.setPressed(false);
    mSwitcher.setPressed(false);
    mMenu.setPressed(false);
    mMute.setPressed(false);
    mFrontBackSwitcher.setPressed(false);
    if (TsMakeupManager.HAS_TS_MAKEUP) {
      mTsMakeupSwitcher.setPressed(false);
    }
 else {
      mHdrSwitcher.setPressed(false);
    }
    mSceneModeSwitcher.setPressed(false);
  }
  ((ShutterButton)mShutter).enableTouch(enable);
  mVideoShutter.setClickable(enable);
  ((ModuleSwitcher)mSwitcher).enableTouch(enable);
  mMenu.setEnabled(enable);
  mMute.setEnabled(enable);
  mFrontBackSwitcher.setEnabled(enable);
  if (TsMakeupManager.HAS_TS_MAKEUP) {
    mTsMakeupSwitcher.setEnabled(enable);
  }
 else {
    mHdrSwitcher.setEnabled(enable);
  }
  mSceneModeSwitcher.setEnabled(enable);
  mPreview.setEnabled(enable);
}"
38160,"private void updateFilterModeIcon(ListPreference scenePref,ListPreference hdrPref){
  if (scenePref == null || hdrPref == null)   return;
  if ((notSame(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO)) || (notSame(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff))) {
    buttonSetEnabled(mFilterModeSwitcher,false);
    changeFilterModeControlIcon(""String_Node_Str"");
  }
 else {
    buttonSetEnabled(mFilterModeSwitcher,true);
  }
}","private void updateFilterModeIcon(ListPreference scenePref,ListPreference hdrPref){
  if (scenePref == null || hdrPref == null)   return;
  if ((notSame(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO)) || (notSame(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff))) {
    buttonSetEnabled(mFilterModeSwitcher,false);
    changeFilterModeControlIcon(""String_Node_Str"");
  }
 else   if (same(scenePref,CameraSettings.KEY_SCENE_MODE,Parameters.SCENE_MODE_AUTO) && (same(hdrPref,CameraSettings.KEY_CAMERA_HDR,mSettingOff) || !hdrPref.getKey().equals(CameraSettings.KEY_CAMERA_HDR))) {
    buttonSetEnabled(mFilterModeSwitcher,true);
  }
}"
38161,"public void enableTouch(boolean enable){
  if (enable) {
    ((ShutterButton)mShutter).setPressed(false);
    mVideoShutter.setPressed(false);
    mSwitcher.setPressed(false);
    mMenu.setPressed(false);
    mMute.setPressed(false);
    mFrontBackSwitcher.setPressed(false);
    if (TsMakeupManager.HAS_TS_MAKEUP) {
      mTsMakeupSwitcher.setPressed(false);
    }
 else {
      mHdrSwitcher.setPressed(false);
    }
    mSceneModeSwitcher.setPressed(false);
    mFilterModeSwitcher.setPressed(false);
  }
 else {
    mTempEnabled[FILTER_MODE_INDEX]=mFilterModeSwitcher.isEnabled();
  }
  ((ShutterButton)mShutter).enableTouch(enable);
  mVideoShutter.setClickable(enable);
  ((ModuleSwitcher)mSwitcher).enableTouch(enable);
  mMenu.setEnabled(enable);
  mMute.setEnabled(enable);
  mFrontBackSwitcher.setEnabled(enable);
  if (TsMakeupManager.HAS_TS_MAKEUP) {
    mTsMakeupSwitcher.setEnabled(enable);
  }
 else {
    mHdrSwitcher.setEnabled(enable);
  }
  mSceneModeSwitcher.setEnabled(enable);
  mPreview.setEnabled(enable);
  mFilterModeSwitcher.setEnabled(enable && mTempEnabled[FILTER_MODE_INDEX]);
}","public void enableTouch(boolean enable){
  if (enable) {
    ((ShutterButton)mShutter).setPressed(false);
    mVideoShutter.setPressed(false);
    mSwitcher.setPressed(false);
    mMenu.setPressed(false);
    mMute.setPressed(false);
    mFrontBackSwitcher.setPressed(false);
    if (TsMakeupManager.HAS_TS_MAKEUP) {
      mTsMakeupSwitcher.setPressed(false);
    }
 else {
      mHdrSwitcher.setPressed(false);
    }
    mSceneModeSwitcher.setPressed(false);
  }
  ((ShutterButton)mShutter).enableTouch(enable);
  mVideoShutter.setClickable(enable);
  ((ModuleSwitcher)mSwitcher).enableTouch(enable);
  mMenu.setEnabled(enable);
  mMute.setEnabled(enable);
  mFrontBackSwitcher.setEnabled(enable);
  if (TsMakeupManager.HAS_TS_MAKEUP) {
    mTsMakeupSwitcher.setEnabled(enable);
  }
 else {
    mHdrSwitcher.setEnabled(enable);
  }
  mSceneModeSwitcher.setEnabled(enable);
  mPreview.setEnabled(enable);
}"
38162,"private void initializeRecorder(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice == null)   return;
  if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
    mUI.showSurfaceView();
  }
  Intent intent=mActivity.getIntent();
  Bundle myExtras=intent.getExtras();
  videoWidth=mProfile.videoFrameWidth;
  videoHeight=mProfile.videoFrameHeight;
  mUnsupportedResolution=false;
  List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
  for (  VideoEncoderCap videoEncoder : videoEncoders) {
    if (videoEncoder.mCodec == mVideoEncoder) {
      if (videoWidth > videoEncoder.mMaxFrameWidth || videoWidth < videoEncoder.mMinFrameWidth || videoHeight > videoEncoder.mMaxFrameHeight || videoHeight < videoEncoder.mMinFrameHeight) {
        Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMinFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMinFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameWidth+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameHeight);
        mUnsupportedResolution=true;
        RotateTextToast.makeText(mActivity,R.string.error_app_unsupported,Toast.LENGTH_LONG).show();
        return;
      }
      break;
    }
  }
  long requestedSizeLimit=0;
  closeVideoFileDescriptor();
  mCurrentVideoUriFromMediaSaved=false;
  if (mIsVideoCaptureIntent && myExtras != null) {
    Uri saveUri=(Uri)myExtras.getParcelable(MediaStore.EXTRA_OUTPUT);
    if (saveUri != null) {
      try {
        mVideoFileDescriptor=mContentResolver.openFileDescriptor(saveUri,""String_Node_Str"");
        mCurrentVideoUri=saveUri;
      }
 catch (      java.io.FileNotFoundException ex) {
        Log.e(TAG,ex.toString());
      }
    }
    requestedSizeLimit=myExtras.getLong(MediaStore.EXTRA_SIZE_LIMIT);
  }
  mMediaRecorder=new MediaRecorder();
  mCameraDevice.unlock();
  mMediaRecorder.setCamera(mCameraDevice.getCamera());
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  Log.i(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr);
  int captureRate=0;
  boolean isHFR=(hfr != null && !hfr.equals(""String_Node_Str""));
  boolean isHSR=(hsr != null && !hsr.equals(""String_Node_Str""));
  try {
    captureRate=isHFR ? Integer.parseInt(hfr) : isHSR ? Integer.parseInt(hsr) : 0;
  }
 catch (  NumberFormatException nfe) {
    Log.e(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr+ ""String_Node_Str"");
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
  mProfile.videoCodec=mVideoEncoder;
  mProfile.audioCodec=mAudioEncoder;
  mProfile.duration=mMaxVideoDurationInMs;
  if ((mProfile.audioCodec == MediaRecorder.AudioEncoder.AMR_NB) && !mCaptureTimeLapse && !isHFR) {
    mProfile.fileFormat=MediaRecorder.OutputFormat.THREE_GPP;
  }
  if ((isHFR || isHSR) && captureRate > 0) {
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setOutputFormat(mProfile.fileFormat);
    mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
    mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
    mMediaRecorder.setVideoEncoder(mProfile.videoCodec);
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
      mMediaRecorder.setAudioChannels(mProfile.audioChannels);
      mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
      mMediaRecorder.setAudioEncoder(mProfile.audioCodec);
    }
  }
 else {
    if (!mCaptureTimeLapse) {
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setProfile(mProfile);
  }
  mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    setCaptureRate(mMediaRecorder,fps);
  }
 else   if (captureRate > 0) {
    Log.i(TAG,""String_Node_Str"" + captureRate);
    mMediaRecorder.setCaptureRate(captureRate);
    int targetFrameRate=isHSR ? captureRate : isHFR ? 30 : mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + targetFrameRate);
    mMediaRecorder.setVideoFrameRate(targetFrameRate);
    int scaledBitrate=mProfile.videoBitRate * targetFrameRate / mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  setRecordLocation();
  if (mVideoFileDescriptor != null) {
    mMediaRecorder.setOutputFile(mVideoFileDescriptor.getFileDescriptor());
  }
 else {
    generateVideoFilename(mProfile.fileFormat);
    mMediaRecorder.setOutputFile(mVideoFilename);
  }
  long maxFileSize=mActivity.getStorageSpaceBytes() - Storage.LOW_STORAGE_THRESHOLD_BYTES;
  if (requestedSizeLimit > 0 && requestedSizeLimit < maxFileSize) {
    maxFileSize=requestedSizeLimit;
  }
  if (Storage.isSaveSDCard() && maxFileSize > SDCARD_SIZE_LIMIT) {
    maxFileSize=SDCARD_SIZE_LIMIT;
  }
  try {
    mMediaRecorder.setMaxFileSize(maxFileSize);
  }
 catch (  RuntimeException exception) {
  }
  int rotation=0;
  if (mOrientation != OrientationEventListener.ORIENTATION_UNKNOWN) {
    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
    if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
      rotation=(info.orientation - mOrientation + 360) % 360;
    }
 else {
      rotation=(info.orientation + mOrientation) % 360;
    }
  }
  mMediaRecorder.setOrientationHint(rotation);
  setupMediaRecorderPreviewDisplay();
  try {
    mMediaRecorder.prepare();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + mVideoFilename,e);
    releaseMediaRecorder();
    throw new RuntimeException(e);
  }
  mMediaRecorder.setOnErrorListener(this);
  mMediaRecorder.setOnInfoListener(this);
}","private void initializeRecorder(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice == null)   return;
  if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
    mUI.showSurfaceView();
  }
  Intent intent=mActivity.getIntent();
  Bundle myExtras=intent.getExtras();
  videoWidth=mProfile.videoFrameWidth;
  videoHeight=mProfile.videoFrameHeight;
  mUnsupportedResolution=false;
  List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
  for (  VideoEncoderCap videoEncoder : videoEncoders) {
    if (videoEncoder.mCodec == mVideoEncoder) {
      if (videoWidth > videoEncoder.mMaxFrameWidth || videoWidth < videoEncoder.mMinFrameWidth || videoHeight > videoEncoder.mMaxFrameHeight || videoHeight < videoEncoder.mMinFrameHeight) {
        Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMinFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMinFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameWidth+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameHeight);
        mUnsupportedResolution=true;
        RotateTextToast.makeText(mActivity,R.string.error_app_unsupported,Toast.LENGTH_LONG).show();
        return;
      }
      break;
    }
  }
  long requestedSizeLimit=0;
  closeVideoFileDescriptor();
  mCurrentVideoUriFromMediaSaved=false;
  if (mIsVideoCaptureIntent && myExtras != null) {
    Uri saveUri=(Uri)myExtras.getParcelable(MediaStore.EXTRA_OUTPUT);
    if (saveUri != null) {
      try {
        mVideoFileDescriptor=mContentResolver.openFileDescriptor(saveUri,""String_Node_Str"");
        mCurrentVideoUri=saveUri;
      }
 catch (      java.io.FileNotFoundException ex) {
        Log.e(TAG,ex.toString());
      }
    }
    requestedSizeLimit=myExtras.getLong(MediaStore.EXTRA_SIZE_LIMIT);
  }
  mMediaRecorder=new MediaRecorder();
  mCameraDevice.unlock();
  mMediaRecorder.setCamera(mCameraDevice.getCamera());
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  Log.i(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr);
  int captureRate=0;
  boolean isHFR=(hfr != null && !hfr.equals(""String_Node_Str""));
  boolean isHSR=(hsr != null && !hsr.equals(""String_Node_Str""));
  try {
    captureRate=isHFR ? Integer.parseInt(hfr) : isHSR ? Integer.parseInt(hsr) : 0;
  }
 catch (  NumberFormatException nfe) {
    Log.e(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr+ ""String_Node_Str"");
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
  mProfile.videoCodec=mVideoEncoder;
  mProfile.audioCodec=mAudioEncoder;
  mProfile.duration=mMaxVideoDurationInMs;
  if ((mProfile.audioCodec == MediaRecorder.AudioEncoder.AMR_NB) && !mCaptureTimeLapse && !isHFR) {
    mProfile.fileFormat=MediaRecorder.OutputFormat.THREE_GPP;
  }
  if ((isHFR || isHSR) && captureRate > 0) {
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setOutputFormat(mProfile.fileFormat);
    mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
    mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
    mMediaRecorder.setVideoEncoder(mProfile.videoCodec);
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
      mMediaRecorder.setAudioChannels(mProfile.audioChannels);
      mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
      mMediaRecorder.setAudioEncoder(mProfile.audioCodec);
    }
  }
 else {
    if (!mCaptureTimeLapse) {
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setProfile(mProfile);
  }
  mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    setCaptureRate(mMediaRecorder,fps);
  }
 else   if (captureRate > 0) {
    Log.i(TAG,""String_Node_Str"" + captureRate);
    mMediaRecorder.setCaptureRate(captureRate);
    int targetFrameRate=isHSR ? captureRate : isHFR ? 30 : mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + targetFrameRate);
    mMediaRecorder.setVideoFrameRate(targetFrameRate);
    int scaledBitrate=mProfile.videoBitRate * (targetFrameRate / mProfile.videoFrameRate);
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  setRecordLocation();
  if (mVideoFileDescriptor != null) {
    mMediaRecorder.setOutputFile(mVideoFileDescriptor.getFileDescriptor());
  }
 else {
    generateVideoFilename(mProfile.fileFormat);
    mMediaRecorder.setOutputFile(mVideoFilename);
  }
  long maxFileSize=mActivity.getStorageSpaceBytes() - Storage.LOW_STORAGE_THRESHOLD_BYTES;
  if (requestedSizeLimit > 0 && requestedSizeLimit < maxFileSize) {
    maxFileSize=requestedSizeLimit;
  }
  if (Storage.isSaveSDCard() && maxFileSize > SDCARD_SIZE_LIMIT) {
    maxFileSize=SDCARD_SIZE_LIMIT;
  }
  try {
    mMediaRecorder.setMaxFileSize(maxFileSize);
  }
 catch (  RuntimeException exception) {
  }
  int rotation=0;
  if (mOrientation != OrientationEventListener.ORIENTATION_UNKNOWN) {
    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
    if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
      rotation=(info.orientation - mOrientation + 360) % 360;
    }
 else {
      rotation=(info.orientation + mOrientation) % 360;
    }
  }
  mMediaRecorder.setOrientationHint(rotation);
  setupMediaRecorderPreviewDisplay();
  try {
    mMediaRecorder.prepare();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + mVideoFilename,e);
    releaseMediaRecorder();
    throw new RuntimeException(e);
  }
  mMediaRecorder.setOnErrorListener(this);
  mMediaRecorder.setOnInfoListener(this);
}"
38163,"@Override public boolean onScale(ScaleGestureDetector detector){
  final float sf=detector.getScaleFactor();
  float circle=mCircleSize * sf * sf;
  circle=Math.max(mMinCircle,circle);
  circle=Math.min(mMaxCircle,circle);
  if (mListener != null && circle != mCircleSize) {
    mCircleSize=circle;
    if (mCamera2) {
      float zoom=mZoomMinValue + (mZoomMaxValue - mZoomMinValue) / (mMaxCircle - mMinCircle) * (mCircleSize - mMinCircle);
      zoom=((int)(zoom * 10)) / 10.0f;
      mListener.onZoomValueChanged(zoom);
    }
 else {
      int zoom=mMinZoom + (int)((mCircleSize - mMinCircle) * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
      mListener.onZoomValueChanged(zoom);
    }
    update();
  }
  return true;
}","@Override public boolean onScale(ScaleGestureDetector detector){
  final float sf=detector.getScaleFactor();
  float circle=mCircleSize * sf * sf;
  circle=Math.max(mMinCircle,circle);
  circle=Math.min(mMaxCircle,circle);
  if (mListener != null && circle != mCircleSize) {
    mCircleSize=circle;
    if (mCamera2) {
      float zoom=mZoomMinValue + (mZoomMaxValue - mZoomMinValue) / (mMaxCircle - mMinCircle) * (mCircleSize - mMinCircle);
      mListener.onZoomValueChanged(zoom);
    }
 else {
      int zoom=mMinZoom + (int)((mCircleSize - mMinCircle) * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
      mListener.onZoomValueChanged(zoom);
    }
    update();
  }
  return true;
}"
38164,"public void setZoom(float zoomValue){
  mCamera2=true;
  mZoomValue=zoomValue;
  mCircleSize=(int)(mMinCircle + (mMaxCircle - mMinCircle) * (mZoomValue - mZoomMinValue) / (mZoomMaxValue - mZoomMinValue));
}","public void setZoom(float zoomValue){
  mCamera2=true;
  mZoomSig=(int)zoomValue;
  mZoomFraction=(int)(zoomValue * 10) % 10;
  mCircleSize=(int)(mMinCircle + (mMaxCircle - mMinCircle) * (zoomValue - mZoomMinValue) / (mZoomMaxValue - mZoomMinValue));
}"
38165,"@Override public void onDraw(Canvas canvas){
  canvas.rotate(mOrientation,mCenterX,mCenterY);
  mPaint.setStrokeWidth(mInnerStroke);
  canvas.drawCircle(mCenterX,mCenterY,mMinCircle,mPaint);
  canvas.drawCircle(mCenterX,mCenterY,mMaxCircle,mPaint);
  canvas.drawLine(mCenterX - mMinCircle,mCenterY,mCenterX - mMaxCircle - 4,mCenterY,mPaint);
  mPaint.setStrokeWidth(mOuterStroke);
  canvas.drawCircle((float)mCenterX,(float)mCenterY,mCircleSize,mPaint);
  String txt=mZoomSig + ""String_Node_Str"" + mZoomFraction+ ""String_Node_Str"";
  if (mCamera2)   txt=""String_Node_Str"" + mZoomValue;
  mTextPaint.getTextBounds(txt,0,txt.length(),mTextBounds);
  canvas.drawText(txt,mCenterX - mTextBounds.centerX(),mCenterY - mTextBounds.centerY(),mTextPaint);
}","@Override public void onDraw(Canvas canvas){
  canvas.rotate(mOrientation,mCenterX,mCenterY);
  mPaint.setStrokeWidth(mInnerStroke);
  canvas.drawCircle(mCenterX,mCenterY,mMinCircle,mPaint);
  canvas.drawCircle(mCenterX,mCenterY,mMaxCircle,mPaint);
  canvas.drawLine(mCenterX - mMinCircle,mCenterY,mCenterX - mMaxCircle - 4,mCenterY,mPaint);
  mPaint.setStrokeWidth(mOuterStroke);
  canvas.drawCircle((float)mCenterX,(float)mCenterY,mCircleSize,mPaint);
  String txt=mZoomSig + ""String_Node_Str"" + mZoomFraction+ ""String_Node_Str"";
  mTextPaint.getTextBounds(txt,0,txt.length(),mTextBounds);
  canvas.drawText(txt,mCenterX - mTextBounds.centerX(),mCenterY - mTextBounds.centerY(),mTextPaint);
}"
38166,"public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      mUI.hideUI();
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}","public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID)) {
        mUI.hideUI();
      }
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}"
38167,"private void initializeRecorder(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice == null)   return;
  if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
    mUI.showSurfaceView();
  }
  Intent intent=mActivity.getIntent();
  Bundle myExtras=intent.getExtras();
  videoWidth=mProfile.videoFrameWidth;
  videoHeight=mProfile.videoFrameHeight;
  mUnsupportedResolution=false;
  List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
  for (  VideoEncoderCap videoEncoder : videoEncoders) {
    if (videoEncoder.mCodec == mVideoEncoder) {
      if (videoWidth > videoEncoder.mMaxFrameWidth || videoWidth < videoEncoder.mMinFrameWidth || videoHeight > videoEncoder.mMaxFrameHeight || videoHeight < videoEncoder.mMinFrameHeight) {
        Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMinFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMinFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameWidth+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameHeight);
        mUnsupportedResolution=true;
        RotateTextToast.makeText(mActivity,R.string.error_app_unsupported,Toast.LENGTH_LONG).show();
        return;
      }
      break;
    }
  }
  long requestedSizeLimit=0;
  closeVideoFileDescriptor();
  mCurrentVideoUriFromMediaSaved=false;
  if (mIsVideoCaptureIntent && myExtras != null) {
    Uri saveUri=(Uri)myExtras.getParcelable(MediaStore.EXTRA_OUTPUT);
    if (saveUri != null) {
      try {
        mVideoFileDescriptor=mContentResolver.openFileDescriptor(saveUri,""String_Node_Str"");
        mCurrentVideoUri=saveUri;
      }
 catch (      java.io.FileNotFoundException ex) {
        Log.e(TAG,ex.toString());
      }
    }
    requestedSizeLimit=myExtras.getLong(MediaStore.EXTRA_SIZE_LIMIT);
  }
  mMediaRecorder=new MediaRecorder();
  mCameraDevice.unlock();
  mMediaRecorder.setCamera(mCameraDevice.getCamera());
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  Log.i(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr);
  int captureRate=0;
  boolean isHFR=(hfr != null && !hfr.equals(""String_Node_Str""));
  boolean isHSR=(hsr != null && !hsr.equals(""String_Node_Str""));
  try {
    captureRate=isHFR ? Integer.parseInt(hfr) : isHSR ? Integer.parseInt(hsr) : 0;
  }
 catch (  NumberFormatException nfe) {
    Log.e(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr+ ""String_Node_Str"");
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
  mProfile.videoCodec=mVideoEncoder;
  mProfile.audioCodec=mAudioEncoder;
  mProfile.duration=mMaxVideoDurationInMs;
  if ((mProfile.audioCodec == MediaRecorder.AudioEncoder.AMR_NB) && !mCaptureTimeLapse && !isHFR) {
    mProfile.fileFormat=MediaRecorder.OutputFormat.THREE_GPP;
  }
  if ((isHFR || isHSR) && captureRate > 0) {
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setOutputFormat(mProfile.fileFormat);
    mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
    mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
    mMediaRecorder.setVideoEncoder(mProfile.videoCodec);
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
      mMediaRecorder.setAudioChannels(mProfile.audioChannels);
      mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
      mMediaRecorder.setAudioEncoder(mProfile.audioCodec);
    }
  }
 else {
    if (!mCaptureTimeLapse) {
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setProfile(mProfile);
  }
  mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    setCaptureRate(mMediaRecorder,fps);
  }
 else   if (captureRate > 0) {
    Log.i(TAG,""String_Node_Str"" + captureRate);
    mMediaRecorder.setCaptureRate(captureRate);
    int targetFrameRate=isHSR ? captureRate : isHFR ? 30 : mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + targetFrameRate);
    mMediaRecorder.setVideoFrameRate(targetFrameRate);
    int scaledBitrate=mProfile.videoBitRate * targetFrameRate / mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  setRecordLocation();
  if (mVideoFileDescriptor != null) {
    mMediaRecorder.setOutputFile(mVideoFileDescriptor.getFileDescriptor());
  }
 else {
    generateVideoFilename(mProfile.fileFormat);
    mMediaRecorder.setOutputFile(mVideoFilename);
  }
  long maxFileSize=mActivity.getStorageSpaceBytes() - Storage.LOW_STORAGE_THRESHOLD_BYTES;
  if (requestedSizeLimit > 0 && requestedSizeLimit < maxFileSize) {
    maxFileSize=requestedSizeLimit;
  }
  if (Storage.isSaveSDCard() && maxFileSize > SDCARD_SIZE_LIMIT) {
    maxFileSize=SDCARD_SIZE_LIMIT;
  }
  try {
    mMediaRecorder.setMaxFileSize(maxFileSize);
  }
 catch (  RuntimeException exception) {
  }
  int rotation=0;
  if (mOrientation != OrientationEventListener.ORIENTATION_UNKNOWN) {
    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
    if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
      rotation=(info.orientation - mOrientation + 360) % 360;
    }
 else {
      rotation=(info.orientation + mOrientation) % 360;
    }
  }
  mMediaRecorder.setOrientationHint(rotation);
  setupMediaRecorderPreviewDisplay();
  try {
    mMediaRecorder.prepare();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + mVideoFilename,e);
    releaseMediaRecorder();
    throw new RuntimeException(e);
  }
  mMediaRecorder.setOnErrorListener(this);
  mMediaRecorder.setOnInfoListener(this);
}","private void initializeRecorder(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice == null)   return;
  if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
    mUI.showSurfaceView();
  }
  Intent intent=mActivity.getIntent();
  Bundle myExtras=intent.getExtras();
  videoWidth=mProfile.videoFrameWidth;
  videoHeight=mProfile.videoFrameHeight;
  mUnsupportedResolution=false;
  List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
  for (  VideoEncoderCap videoEncoder : videoEncoders) {
    if (videoEncoder.mCodec == mVideoEncoder) {
      if (videoWidth > videoEncoder.mMaxFrameWidth || videoWidth < videoEncoder.mMinFrameWidth || videoHeight > videoEncoder.mMaxFrameHeight || videoHeight < videoEncoder.mMinFrameHeight) {
        Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
        Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMinFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMinFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameWidth+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxFrameHeight);
        mUnsupportedResolution=true;
        RotateTextToast.makeText(mActivity,R.string.error_app_unsupported,Toast.LENGTH_LONG).show();
        return;
      }
      break;
    }
  }
  long requestedSizeLimit=0;
  closeVideoFileDescriptor();
  mCurrentVideoUriFromMediaSaved=false;
  if (mIsVideoCaptureIntent && myExtras != null) {
    Uri saveUri=(Uri)myExtras.getParcelable(MediaStore.EXTRA_OUTPUT);
    if (saveUri != null) {
      try {
        mVideoFileDescriptor=mContentResolver.openFileDescriptor(saveUri,""String_Node_Str"");
        mCurrentVideoUri=saveUri;
      }
 catch (      java.io.FileNotFoundException ex) {
        Log.e(TAG,ex.toString());
      }
    }
    requestedSizeLimit=myExtras.getLong(MediaStore.EXTRA_SIZE_LIMIT);
  }
  mMediaRecorder=new MediaRecorder();
  mCameraDevice.unlock();
  mMediaRecorder.setCamera(mCameraDevice.getCamera());
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  Log.i(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr);
  int captureRate=0;
  boolean isHFR=(hfr != null && !hfr.equals(""String_Node_Str""));
  boolean isHSR=(hsr != null && !hsr.equals(""String_Node_Str""));
  try {
    captureRate=isHFR ? Integer.parseInt(hfr) : isHSR ? Integer.parseInt(hsr) : 0;
  }
 catch (  NumberFormatException nfe) {
    Log.e(TAG,""String_Node_Str"" + hfr + ""String_Node_Str""+ hsr+ ""String_Node_Str"");
  }
  mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
  mProfile.videoCodec=mVideoEncoder;
  mProfile.audioCodec=mAudioEncoder;
  mProfile.duration=mMaxVideoDurationInMs;
  if ((mProfile.audioCodec == MediaRecorder.AudioEncoder.AMR_NB) && !mCaptureTimeLapse && !isHFR) {
    mProfile.fileFormat=MediaRecorder.OutputFormat.THREE_GPP;
  }
  if ((isHFR || isHSR) && captureRate > 0) {
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setOutputFormat(mProfile.fileFormat);
    mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
    mMediaRecorder.setVideoEncodingBitRate(mProfile.videoBitRate);
    mMediaRecorder.setVideoEncoder(mProfile.videoCodec);
    if (isHSR) {
      Log.i(TAG,""String_Node_Str"");
      mMediaRecorder.setAudioEncodingBitRate(mProfile.audioBitRate);
      mMediaRecorder.setAudioChannels(mProfile.audioChannels);
      mMediaRecorder.setAudioSamplingRate(mProfile.audioSampleRate);
      mMediaRecorder.setAudioEncoder(mProfile.audioCodec);
    }
  }
 else {
    if (!mCaptureTimeLapse) {
      mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    }
    mMediaRecorder.setProfile(mProfile);
  }
  mMediaRecorder.setVideoSize(mProfile.videoFrameWidth,mProfile.videoFrameHeight);
  mMediaRecorder.setMaxDuration(mMaxVideoDurationInMs);
  if (mCaptureTimeLapse) {
    double fps=1000 / (double)mTimeBetweenTimeLapseFrameCaptureMs;
    setCaptureRate(mMediaRecorder,fps);
  }
 else   if (captureRate > 0) {
    Log.i(TAG,""String_Node_Str"" + captureRate);
    mMediaRecorder.setCaptureRate(captureRate);
    int targetFrameRate=isHSR ? captureRate : isHFR ? 30 : mProfile.videoFrameRate;
    Log.i(TAG,""String_Node_Str"" + targetFrameRate);
    mMediaRecorder.setVideoFrameRate(targetFrameRate);
    int scaledBitrate=mProfile.videoBitRate * (targetFrameRate / mProfile.videoFrameRate);
    Log.i(TAG,""String_Node_Str"" + scaledBitrate);
    mMediaRecorder.setVideoEncodingBitRate(scaledBitrate);
  }
  setRecordLocation();
  if (mVideoFileDescriptor != null) {
    mMediaRecorder.setOutputFile(mVideoFileDescriptor.getFileDescriptor());
  }
 else {
    generateVideoFilename(mProfile.fileFormat);
    mMediaRecorder.setOutputFile(mVideoFilename);
  }
  long maxFileSize=mActivity.getStorageSpaceBytes() - Storage.LOW_STORAGE_THRESHOLD_BYTES;
  if (requestedSizeLimit > 0 && requestedSizeLimit < maxFileSize) {
    maxFileSize=requestedSizeLimit;
  }
  if (Storage.isSaveSDCard() && maxFileSize > SDCARD_SIZE_LIMIT) {
    maxFileSize=SDCARD_SIZE_LIMIT;
  }
  try {
    mMediaRecorder.setMaxFileSize(maxFileSize);
  }
 catch (  RuntimeException exception) {
  }
  int rotation=0;
  if (mOrientation != OrientationEventListener.ORIENTATION_UNKNOWN) {
    CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
    if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
      rotation=(info.orientation - mOrientation + 360) % 360;
    }
 else {
      rotation=(info.orientation + mOrientation) % 360;
    }
  }
  mMediaRecorder.setOrientationHint(rotation);
  setupMediaRecorderPreviewDisplay();
  try {
    mMediaRecorder.prepare();
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"" + mVideoFilename,e);
    releaseMediaRecorder();
    throw new RuntimeException(e);
  }
  mMediaRecorder.setOnErrorListener(this);
  mMediaRecorder.setOnInfoListener(this);
}"
38168,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}"
38169,"public void reinit(){
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","public void reinit(){
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38170,"private SettingsManager(Context context){
  mListeners=new ArrayList<>();
  mCharacteristics=new ArrayList<>();
  mContext=context;
  mPreferences=new ComboPreferences(mContext);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mContext);
  CameraManager manager=(CameraManager)mContext.getSystemService(Context.CAMERA_SERVICE);
  try {
    String[] cameraIdList=manager.getCameraIdList();
    for (int i=0; i < cameraIdList.length; i++) {
      String cameraId=cameraIdList[i];
      CameraCharacteristics characteristics=manager.getCameraCharacteristics(cameraId);
      Byte monoOnly=0;
      try {
        monoOnly=characteristics.get(CaptureModule.MetaDataMonoOnlyKey);
      }
 catch (      Exception e) {
      }
      if (monoOnly == 1) {
        CaptureModule.MONO_ID=i;
        mIsMonoCameraPresent=true;
      }
      int facing=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (facing == CameraCharacteristics.LENS_FACING_FRONT) {
        CaptureModule.FRONT_ID=i;
        mIsFrontCameraPresent=true;
      }
      mCharacteristics.add(i,characteristics);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}","private SettingsManager(Context context){
  mListeners=new ArrayList<>();
  mCharacteristics=new ArrayList<>();
  mContext=context;
  mPreferences=ComboPreferences.get(mContext);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mContext);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mContext);
  CameraManager manager=(CameraManager)mContext.getSystemService(Context.CAMERA_SERVICE);
  try {
    String[] cameraIdList=manager.getCameraIdList();
    for (int i=0; i < cameraIdList.length; i++) {
      String cameraId=cameraIdList[i];
      CameraCharacteristics characteristics=manager.getCameraCharacteristics(cameraId);
      Byte monoOnly=0;
      try {
        monoOnly=characteristics.get(CaptureModule.MetaDataMonoOnlyKey);
      }
 catch (      Exception e) {
      }
      if (monoOnly == 1) {
        CaptureModule.MONO_ID=i;
        mIsMonoCameraPresent=true;
      }
      int facing=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (facing == CameraCharacteristics.LENS_FACING_FRONT) {
        CaptureModule.FRONT_ID=i;
        mIsFrontCameraPresent=true;
      }
      mCharacteristics.add(i,characteristics);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}"
38171,"@Override public void init(CameraActivity activity,View root){
  mActivity=activity;
  mUI=new VideoUI(activity,this,root);
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mOrientationManager=new OrientationManager(mActivity);
  CameraOpenThread cameraOpenThread=new CameraOpenThread();
  cameraOpenThread.start();
  mContentResolver=mActivity.getContentResolver();
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSaveToSDCard=Storage.isSaveSDCard();
  mIsVideoCaptureIntent=isVideoCaptureIntent();
  initializeSurfaceView();
  try {
    cameraOpenThread.join();
    if (mCameraDevice == null) {
      return;
    }
  }
 catch (  InterruptedException ex) {
  }
  readVideoPreferences();
  mUI.setPrefChangedListener(this);
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,null);
  mUI.setOrientationIndicator(0,false);
  setDisplayOrientation();
  mUI.showTimeLapseUI(mCaptureTimeLapse);
  initializeVideoSnapshot();
  resizeForPreviewAspectRatio();
  initializeVideoControl();
  mPendingSwitchCameraId=-1;
}","@Override public void init(CameraActivity activity,View root){
  mActivity=activity;
  mUI=new VideoUI(activity,this,root);
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mOrientationManager=new OrientationManager(mActivity);
  CameraOpenThread cameraOpenThread=new CameraOpenThread();
  cameraOpenThread.start();
  mContentResolver=mActivity.getContentResolver();
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSaveToSDCard=Storage.isSaveSDCard();
  mIsVideoCaptureIntent=isVideoCaptureIntent();
  initializeSurfaceView();
  try {
    cameraOpenThread.join();
    if (mCameraDevice == null) {
      return;
    }
  }
 catch (  InterruptedException ex) {
  }
  readVideoPreferences();
  mUI.setPrefChangedListener(this);
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,null);
  mUI.setOrientationIndicator(0,false);
  setDisplayOrientation();
  mUI.showTimeLapseUI(mCaptureTimeLapse);
  initializeVideoSnapshot();
  resizeForPreviewAspectRatio();
  initializeVideoControl();
  mPendingSwitchCameraId=-1;
}"
38172,"public void reinit(){
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","public void reinit(){
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38173,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mOrientationManager=new OrientationManager(activity);
  mCaptureState=CAPTURE_STATE_VIEWFINDER;
  mUI=new WideAnglePanoramaUI(mActivity,this,(ViewGroup)mRootView);
  mUI.setCaptureProgressOnDirectionChangeListener(new PanoProgressBar.OnDirectionChangeListener(){
    @Override public void onDirectionChange(    int direction){
      if (mDirectionChanged) {
        stopCapture(false);
        return;
      }
      if (mCaptureState == CAPTURE_STATE_MOSAIC) {
        mUI.showDirectionIndicators(direction);
      }
      if (direction != PanoProgressBar.DIRECTION_NONE) {
        mDirectionChanged=true;
      }
    }
  }
);
  mContentResolver=mActivity.getContentResolver();
  mOnFrameAvailableRunnable=new Runnable(){
    @Override public void run(){
      if (mPaused)       return;
      MosaicPreviewRenderer renderer=null;
synchronized (mRendererLock) {
        if (mMosaicPreviewRenderer == null) {
          return;
        }
        renderer=mMosaicPreviewRenderer;
      }
      if (mRootView.getVisibility() != View.VISIBLE) {
        renderer.showPreviewFrameSync();
        mRootView.setVisibility(View.VISIBLE);
      }
 else {
        if (mCaptureState == CAPTURE_STATE_VIEWFINDER) {
          if (mPreviewLayoutChanged) {
            boolean isLandscape=(mDeviceOrientation / 90) % 2 == 1;
            renderer.previewReset(mPreviewUIWidth,mPreviewUIHeight,isLandscape,mDeviceOrientation);
            mPreviewLayoutChanged=false;
          }
          renderer.showPreviewFrame();
        }
 else {
          renderer.alignFrameSync();
          mMosaicFrameProcessor.processFrame();
        }
      }
    }
  }
;
  PowerManager pm=(PowerManager)mActivity.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  mOrientationEventListener=new PanoOrientationEventListener(mActivity);
  mMosaicFrameProcessor=MosaicFrameProcessor.getInstance();
  Resources appRes=mActivity.getResources();
  mPreparePreviewString=appRes.getString(R.string.pano_dialog_prepare_preview);
  mDialogTitle=appRes.getString(R.string.pano_dialog_title);
  mDialogOkString=appRes.getString(R.string.dialog_ok);
  mDialogPanoramaFailedString=appRes.getString(R.string.pano_dialog_panorama_failed);
  mDialogWaitingPreviousString=appRes.getString(R.string.pano_dialog_waiting_previous);
  mPreferences=new ComboPreferences(mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mLocationManager=new LocationManager(mActivity,null);
  mMainHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
switch (msg.what) {
case MSG_LOW_RES_FINAL_MOSAIC_READY:
        onBackgroundThreadFinished();
      saveFinalMosaic((Bitmap)msg.obj);
    saveHighResMosaic();
  break;
case MSG_GENERATE_FINAL_MOSAIC_ERROR:
onBackgroundThreadFinished();
if (mPaused) {
resetToPreviewIfPossible();
}
 else {
mUI.showAlertDialog(mDialogTitle,mDialogPanoramaFailedString,mDialogOkString,new Runnable(){
  @Override public void run(){
    resetToPreviewIfPossible();
  }
}
);
}
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_END_DIALOG_RESET_TO_PREVIEW:
onBackgroundThreadFinished();
resetToPreviewIfPossible();
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_CLEAR_SCREEN_DELAY:
mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
break;
case MSG_RESET_TO_PREVIEW:
resetToPreviewIfPossible();
break;
}
}
}
;
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mOrientationManager=new OrientationManager(activity);
  mCaptureState=CAPTURE_STATE_VIEWFINDER;
  mUI=new WideAnglePanoramaUI(mActivity,this,(ViewGroup)mRootView);
  mUI.setCaptureProgressOnDirectionChangeListener(new PanoProgressBar.OnDirectionChangeListener(){
    @Override public void onDirectionChange(    int direction){
      if (mDirectionChanged) {
        stopCapture(false);
        return;
      }
      if (mCaptureState == CAPTURE_STATE_MOSAIC) {
        mUI.showDirectionIndicators(direction);
      }
      if (direction != PanoProgressBar.DIRECTION_NONE) {
        mDirectionChanged=true;
      }
    }
  }
);
  mContentResolver=mActivity.getContentResolver();
  mOnFrameAvailableRunnable=new Runnable(){
    @Override public void run(){
      if (mPaused)       return;
      MosaicPreviewRenderer renderer=null;
synchronized (mRendererLock) {
        if (mMosaicPreviewRenderer == null) {
          return;
        }
        renderer=mMosaicPreviewRenderer;
      }
      if (mRootView.getVisibility() != View.VISIBLE) {
        renderer.showPreviewFrameSync();
        mRootView.setVisibility(View.VISIBLE);
      }
 else {
        if (mCaptureState == CAPTURE_STATE_VIEWFINDER) {
          if (mPreviewLayoutChanged) {
            boolean isLandscape=(mDeviceOrientation / 90) % 2 == 1;
            renderer.previewReset(mPreviewUIWidth,mPreviewUIHeight,isLandscape,mDeviceOrientation);
            mPreviewLayoutChanged=false;
          }
          renderer.showPreviewFrame();
        }
 else {
          renderer.alignFrameSync();
          mMosaicFrameProcessor.processFrame();
        }
      }
    }
  }
;
  PowerManager pm=(PowerManager)mActivity.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  mOrientationEventListener=new PanoOrientationEventListener(mActivity);
  mMosaicFrameProcessor=MosaicFrameProcessor.getInstance();
  Resources appRes=mActivity.getResources();
  mPreparePreviewString=appRes.getString(R.string.pano_dialog_prepare_preview);
  mDialogTitle=appRes.getString(R.string.pano_dialog_title);
  mDialogOkString=appRes.getString(R.string.dialog_ok);
  mDialogPanoramaFailedString=appRes.getString(R.string.pano_dialog_panorama_failed);
  mDialogWaitingPreviousString=appRes.getString(R.string.pano_dialog_waiting_previous);
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mLocationManager=new LocationManager(mActivity,null);
  mMainHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
switch (msg.what) {
case MSG_LOW_RES_FINAL_MOSAIC_READY:
        onBackgroundThreadFinished();
      saveFinalMosaic((Bitmap)msg.obj);
    saveHighResMosaic();
  break;
case MSG_GENERATE_FINAL_MOSAIC_ERROR:
onBackgroundThreadFinished();
if (mPaused) {
resetToPreviewIfPossible();
}
 else {
mUI.showAlertDialog(mDialogTitle,mDialogPanoramaFailedString,mDialogOkString,new Runnable(){
  @Override public void run(){
    resetToPreviewIfPossible();
  }
}
);
}
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_END_DIALOG_RESET_TO_PREVIEW:
onBackgroundThreadFinished();
resetToPreviewIfPossible();
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_CLEAR_SCREEN_DELAY:
mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
break;
case MSG_RESET_TO_PREVIEW:
resetToPreviewIfPossible();
break;
}
}
}
;
}"
38174,"@Override public void onResumeBeforeSuper(){
  mPaused=false;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","@Override public void onResumeBeforeSuper(){
  mPaused=false;
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38175,"@Override public boolean onScale(ScaleGestureDetector detector){
  final float sf=detector.getScaleFactor();
  float circle=mCircleSize * sf * sf;
  circle=Math.max(mMinCircle,circle);
  circle=Math.min(mMaxCircle,circle);
  if (mListener != null && circle != mCircleSize) {
    mCircleSize=circle;
    if (mCamera2) {
      float zoom=mZoomMinValue + (mZoomMaxValue - mZoomMinValue) / (mMaxCircle - mMinCircle) * (mCircleSize - mMinCircle);
      zoom=((int)(zoom * 10)) / 10.0f;
      mListener.onZoomValueChanged(zoom);
    }
 else {
      int zoom=mMinZoom + (int)((mCircleSize - mMinCircle) * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
      mListener.onZoomValueChanged(zoom);
    }
    update();
  }
  return true;
}","@Override public boolean onScale(ScaleGestureDetector detector){
  final float sf=detector.getScaleFactor();
  float circle=mCircleSize * sf * sf;
  circle=Math.max(mMinCircle,circle);
  circle=Math.min(mMaxCircle,circle);
  if (mListener != null && circle != mCircleSize) {
    mCircleSize=circle;
    if (mCamera2) {
      float zoom=mZoomMinValue + (mZoomMaxValue - mZoomMinValue) / (mMaxCircle - mMinCircle) * (mCircleSize - mMinCircle);
      mListener.onZoomValueChanged(zoom);
    }
 else {
      int zoom=mMinZoom + (int)((mCircleSize - mMinCircle) * (mMaxZoom - mMinZoom) / (mMaxCircle - mMinCircle));
      mListener.onZoomValueChanged(zoom);
    }
    update();
  }
  return true;
}"
38176,"public void setZoom(float zoomValue){
  mCamera2=true;
  mZoomValue=zoomValue;
  mCircleSize=(int)(mMinCircle + (mMaxCircle - mMinCircle) * (mZoomValue - mZoomMinValue) / (mZoomMaxValue - mZoomMinValue));
}","public void setZoom(float zoomValue){
  mCamera2=true;
  mZoomSig=(int)zoomValue;
  mZoomFraction=(int)(zoomValue * 10) % 10;
  mCircleSize=(int)(mMinCircle + (mMaxCircle - mMinCircle) * (zoomValue - mZoomMinValue) / (mZoomMaxValue - mZoomMinValue));
}"
38177,"@Override public void onDraw(Canvas canvas){
  canvas.rotate(mOrientation,mCenterX,mCenterY);
  mPaint.setStrokeWidth(mInnerStroke);
  canvas.drawCircle(mCenterX,mCenterY,mMinCircle,mPaint);
  canvas.drawCircle(mCenterX,mCenterY,mMaxCircle,mPaint);
  canvas.drawLine(mCenterX - mMinCircle,mCenterY,mCenterX - mMaxCircle - 4,mCenterY,mPaint);
  mPaint.setStrokeWidth(mOuterStroke);
  canvas.drawCircle((float)mCenterX,(float)mCenterY,mCircleSize,mPaint);
  String txt=mZoomSig + ""String_Node_Str"" + mZoomFraction+ ""String_Node_Str"";
  if (mCamera2)   txt=""String_Node_Str"" + mZoomValue;
  mTextPaint.getTextBounds(txt,0,txt.length(),mTextBounds);
  canvas.drawText(txt,mCenterX - mTextBounds.centerX(),mCenterY - mTextBounds.centerY(),mTextPaint);
}","@Override public void onDraw(Canvas canvas){
  canvas.rotate(mOrientation,mCenterX,mCenterY);
  mPaint.setStrokeWidth(mInnerStroke);
  canvas.drawCircle(mCenterX,mCenterY,mMinCircle,mPaint);
  canvas.drawCircle(mCenterX,mCenterY,mMaxCircle,mPaint);
  canvas.drawLine(mCenterX - mMinCircle,mCenterY,mCenterX - mMaxCircle - 4,mCenterY,mPaint);
  mPaint.setStrokeWidth(mOuterStroke);
  canvas.drawCircle((float)mCenterX,(float)mCenterY,mCircleSize,mPaint);
  String txt=mZoomSig + ""String_Node_Str"" + mZoomFraction+ ""String_Node_Str"";
  mTextPaint.getTextBounds(txt,0,txt.length(),mTextBounds);
  canvas.drawText(txt,mCenterX - mTextBounds.centerX(),mCenterY - mTextBounds.centerY(),mTextPaint);
}"
38178,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}"
38179,"public void reinit(){
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","public void reinit(){
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38180,"private SettingsManager(Context context){
  mListeners=new ArrayList<>();
  mCharacteristics=new ArrayList<>();
  mContext=context;
  mPreferences=new ComboPreferences(mContext);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mContext);
  CameraManager manager=(CameraManager)mContext.getSystemService(Context.CAMERA_SERVICE);
  try {
    String[] cameraIdList=manager.getCameraIdList();
    for (int i=0; i < cameraIdList.length; i++) {
      String cameraId=cameraIdList[i];
      CameraCharacteristics characteristics=manager.getCameraCharacteristics(cameraId);
      Byte monoOnly=0;
      try {
        monoOnly=characteristics.get(CaptureModule.MetaDataMonoOnlyKey);
      }
 catch (      Exception e) {
      }
      if (monoOnly == 1) {
        CaptureModule.MONO_ID=i;
        mIsMonoCameraPresent=true;
      }
      int facing=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (facing == CameraCharacteristics.LENS_FACING_FRONT) {
        CaptureModule.FRONT_ID=i;
        mIsFrontCameraPresent=true;
      }
      mCharacteristics.add(i,characteristics);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}","private SettingsManager(Context context){
  mListeners=new ArrayList<>();
  mCharacteristics=new ArrayList<>();
  mContext=context;
  mPreferences=ComboPreferences.get(mContext);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mContext);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mContext);
  CameraManager manager=(CameraManager)mContext.getSystemService(Context.CAMERA_SERVICE);
  try {
    String[] cameraIdList=manager.getCameraIdList();
    for (int i=0; i < cameraIdList.length; i++) {
      String cameraId=cameraIdList[i];
      CameraCharacteristics characteristics=manager.getCameraCharacteristics(cameraId);
      Byte monoOnly=0;
      try {
        monoOnly=characteristics.get(CaptureModule.MetaDataMonoOnlyKey);
      }
 catch (      Exception e) {
      }
      if (monoOnly == 1) {
        CaptureModule.MONO_ID=i;
        mIsMonoCameraPresent=true;
      }
      int facing=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (facing == CameraCharacteristics.LENS_FACING_FRONT) {
        CaptureModule.FRONT_ID=i;
        mIsFrontCameraPresent=true;
      }
      mCharacteristics.add(i,characteristics);
    }
  }
 catch (  CameraAccessException e) {
    e.printStackTrace();
  }
}"
38181,"@Override public void init(CameraActivity activity,View root){
  mActivity=activity;
  mUI=new VideoUI(activity,this,root);
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mOrientationManager=new OrientationManager(mActivity);
  CameraOpenThread cameraOpenThread=new CameraOpenThread();
  cameraOpenThread.start();
  mContentResolver=mActivity.getContentResolver();
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSaveToSDCard=Storage.isSaveSDCard();
  mIsVideoCaptureIntent=isVideoCaptureIntent();
  initializeSurfaceView();
  try {
    cameraOpenThread.join();
    if (mCameraDevice == null) {
      return;
    }
  }
 catch (  InterruptedException ex) {
  }
  readVideoPreferences();
  mUI.setPrefChangedListener(this);
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,null);
  mUI.setOrientationIndicator(0,false);
  setDisplayOrientation();
  mUI.showTimeLapseUI(mCaptureTimeLapse);
  initializeVideoSnapshot();
  resizeForPreviewAspectRatio();
  initializeVideoControl();
  mPendingSwitchCameraId=-1;
}","@Override public void init(CameraActivity activity,View root){
  mActivity=activity;
  mUI=new VideoUI(activity,this,root);
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mOrientationManager=new OrientationManager(mActivity);
  CameraOpenThread cameraOpenThread=new CameraOpenThread();
  cameraOpenThread.start();
  mContentResolver=mActivity.getContentResolver();
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSaveToSDCard=Storage.isSaveSDCard();
  mIsVideoCaptureIntent=isVideoCaptureIntent();
  initializeSurfaceView();
  try {
    cameraOpenThread.join();
    if (mCameraDevice == null) {
      return;
    }
  }
 catch (  InterruptedException ex) {
  }
  readVideoPreferences();
  mUI.setPrefChangedListener(this);
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,null);
  mUI.setOrientationIndicator(0,false);
  setDisplayOrientation();
  mUI.showTimeLapseUI(mCaptureTimeLapse);
  initializeVideoSnapshot();
  resizeForPreviewAspectRatio();
  initializeVideoControl();
  mPendingSwitchCameraId=-1;
}"
38182,"public void reinit(){
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","public void reinit(){
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mCameraId=getPreferredCameraId(mPreferences);
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38183,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mOrientationManager=new OrientationManager(activity);
  mCaptureState=CAPTURE_STATE_VIEWFINDER;
  mUI=new WideAnglePanoramaUI(mActivity,this,(ViewGroup)mRootView);
  mUI.setCaptureProgressOnDirectionChangeListener(new PanoProgressBar.OnDirectionChangeListener(){
    @Override public void onDirectionChange(    int direction){
      if (mDirectionChanged) {
        stopCapture(false);
        return;
      }
      if (mCaptureState == CAPTURE_STATE_MOSAIC) {
        mUI.showDirectionIndicators(direction);
      }
      if (direction != PanoProgressBar.DIRECTION_NONE) {
        mDirectionChanged=true;
      }
    }
  }
);
  mContentResolver=mActivity.getContentResolver();
  mOnFrameAvailableRunnable=new Runnable(){
    @Override public void run(){
      if (mPaused)       return;
      MosaicPreviewRenderer renderer=null;
synchronized (mRendererLock) {
        if (mMosaicPreviewRenderer == null) {
          return;
        }
        renderer=mMosaicPreviewRenderer;
      }
      if (mRootView.getVisibility() != View.VISIBLE) {
        renderer.showPreviewFrameSync();
        mRootView.setVisibility(View.VISIBLE);
      }
 else {
        if (mCaptureState == CAPTURE_STATE_VIEWFINDER) {
          if (mPreviewLayoutChanged) {
            boolean isLandscape=(mDeviceOrientation / 90) % 2 == 1;
            renderer.previewReset(mPreviewUIWidth,mPreviewUIHeight,isLandscape,mDeviceOrientation);
            mPreviewLayoutChanged=false;
          }
          renderer.showPreviewFrame();
        }
 else {
          renderer.alignFrameSync();
          mMosaicFrameProcessor.processFrame();
        }
      }
    }
  }
;
  PowerManager pm=(PowerManager)mActivity.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  mOrientationEventListener=new PanoOrientationEventListener(mActivity);
  mMosaicFrameProcessor=MosaicFrameProcessor.getInstance();
  Resources appRes=mActivity.getResources();
  mPreparePreviewString=appRes.getString(R.string.pano_dialog_prepare_preview);
  mDialogTitle=appRes.getString(R.string.pano_dialog_title);
  mDialogOkString=appRes.getString(R.string.dialog_ok);
  mDialogPanoramaFailedString=appRes.getString(R.string.pano_dialog_panorama_failed);
  mDialogWaitingPreviousString=appRes.getString(R.string.pano_dialog_waiting_previous);
  mPreferences=new ComboPreferences(mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mLocationManager=new LocationManager(mActivity,null);
  mMainHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
switch (msg.what) {
case MSG_LOW_RES_FINAL_MOSAIC_READY:
        onBackgroundThreadFinished();
      saveFinalMosaic((Bitmap)msg.obj);
    saveHighResMosaic();
  break;
case MSG_GENERATE_FINAL_MOSAIC_ERROR:
onBackgroundThreadFinished();
if (mPaused) {
resetToPreviewIfPossible();
}
 else {
mUI.showAlertDialog(mDialogTitle,mDialogPanoramaFailedString,mDialogOkString,new Runnable(){
  @Override public void run(){
    resetToPreviewIfPossible();
  }
}
);
}
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_END_DIALOG_RESET_TO_PREVIEW:
onBackgroundThreadFinished();
resetToPreviewIfPossible();
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_CLEAR_SCREEN_DELAY:
mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
break;
case MSG_RESET_TO_PREVIEW:
resetToPreviewIfPossible();
break;
}
}
}
;
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mOrientationManager=new OrientationManager(activity);
  mCaptureState=CAPTURE_STATE_VIEWFINDER;
  mUI=new WideAnglePanoramaUI(mActivity,this,(ViewGroup)mRootView);
  mUI.setCaptureProgressOnDirectionChangeListener(new PanoProgressBar.OnDirectionChangeListener(){
    @Override public void onDirectionChange(    int direction){
      if (mDirectionChanged) {
        stopCapture(false);
        return;
      }
      if (mCaptureState == CAPTURE_STATE_MOSAIC) {
        mUI.showDirectionIndicators(direction);
      }
      if (direction != PanoProgressBar.DIRECTION_NONE) {
        mDirectionChanged=true;
      }
    }
  }
);
  mContentResolver=mActivity.getContentResolver();
  mOnFrameAvailableRunnable=new Runnable(){
    @Override public void run(){
      if (mPaused)       return;
      MosaicPreviewRenderer renderer=null;
synchronized (mRendererLock) {
        if (mMosaicPreviewRenderer == null) {
          return;
        }
        renderer=mMosaicPreviewRenderer;
      }
      if (mRootView.getVisibility() != View.VISIBLE) {
        renderer.showPreviewFrameSync();
        mRootView.setVisibility(View.VISIBLE);
      }
 else {
        if (mCaptureState == CAPTURE_STATE_VIEWFINDER) {
          if (mPreviewLayoutChanged) {
            boolean isLandscape=(mDeviceOrientation / 90) % 2 == 1;
            renderer.previewReset(mPreviewUIWidth,mPreviewUIHeight,isLandscape,mDeviceOrientation);
            mPreviewLayoutChanged=false;
          }
          renderer.showPreviewFrame();
        }
 else {
          renderer.alignFrameSync();
          mMosaicFrameProcessor.processFrame();
        }
      }
    }
  }
;
  PowerManager pm=(PowerManager)mActivity.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  mOrientationEventListener=new PanoOrientationEventListener(mActivity);
  mMosaicFrameProcessor=MosaicFrameProcessor.getInstance();
  Resources appRes=mActivity.getResources();
  mPreparePreviewString=appRes.getString(R.string.pano_dialog_prepare_preview);
  mDialogTitle=appRes.getString(R.string.pano_dialog_title);
  mDialogOkString=appRes.getString(R.string.dialog_ok);
  mDialogPanoramaFailedString=appRes.getString(R.string.pano_dialog_panorama_failed);
  mDialogWaitingPreviousString=appRes.getString(R.string.pano_dialog_waiting_previous);
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mLocationManager=new LocationManager(mActivity,null);
  mMainHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
switch (msg.what) {
case MSG_LOW_RES_FINAL_MOSAIC_READY:
        onBackgroundThreadFinished();
      saveFinalMosaic((Bitmap)msg.obj);
    saveHighResMosaic();
  break;
case MSG_GENERATE_FINAL_MOSAIC_ERROR:
onBackgroundThreadFinished();
if (mPaused) {
resetToPreviewIfPossible();
}
 else {
mUI.showAlertDialog(mDialogTitle,mDialogPanoramaFailedString,mDialogOkString,new Runnable(){
  @Override public void run(){
    resetToPreviewIfPossible();
  }
}
);
}
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_END_DIALOG_RESET_TO_PREVIEW:
onBackgroundThreadFinished();
resetToPreviewIfPossible();
clearMosaicFrameProcessorIfNeeded();
break;
case MSG_CLEAR_SCREEN_DELAY:
mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
break;
case MSG_RESET_TO_PREVIEW:
resetToPreviewIfPossible();
break;
}
}
}
;
}"
38184,"@Override public void onResumeBeforeSuper(){
  mPaused=false;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}","@Override public void onResumeBeforeSuper(){
  mPaused=false;
  mPreferences=ComboPreferences.get(mActivity);
  if (mPreferences == null) {
    mPreferences=new ComboPreferences(mActivity);
  }
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),mActivity);
  mPreferences.setLocalId(mActivity,getPreferredCameraId(mPreferences));
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
}"
38185,"@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  getContentResolver().unregisterContentObserver(mLocalImagesObserver);
  getContentResolver().unregisterContentObserver(mLocalVideosObserver);
  unregisterReceiver(mSDcardMountedReceiver);
  mCursor.close();
  mCursor=null;
  super.onDestroy();
}","@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  if (mCursor != null) {
    getContentResolver().unregisterContentObserver(mLocalImagesObserver);
    getContentResolver().unregisterContentObserver(mLocalVideosObserver);
    unregisterReceiver(mSDcardMountedReceiver);
    mCursor.close();
    mCursor=null;
  }
  super.onDestroy();
}"
38186,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQ_CODE_DONT_SWITCH_TO_PREVIEW) {
    mResetToPreviewOnResume=false;
    mIsEditActivityInProgress=false;
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
    if (requestCode == PERMISSIONS_ACTIVITY_REQUEST_CODE && resultCode == PERMISSIONS_RESULT_CODE_FAILED) {
      finish();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQ_CODE_DONT_SWITCH_TO_PREVIEW) {
    mResetToPreviewOnResume=false;
    mIsEditActivityInProgress=false;
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
  }
}"
38187,"@Override public void onUserInteraction(){
  super.onUserInteraction();
  mCurrentModule.onUserInteraction();
}","@Override public void onUserInteraction(){
  super.onUserInteraction();
  if (mCurrentModule != null) {
    mCurrentModule.onUserInteraction();
  }
}"
38188,"/** 
 * Checks if any of the needed Android runtime permissions are missing. If they are, then launch the permissions activity under one of the following conditions: a) The permissions dialogs have not run yet. We will ask for permission only once. b) If the missing permissions are critical to the app running, we will display a fatal error dialog. Critical permissions are: camera, microphone and storage. The app cannot run without them. Non-critical permission is location.
 */
private void checkPermissions(){
  if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    mHasCriticalPermissions=true;
  }
 else {
    mHasCriticalPermissions=false;
  }
  if ((checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) || !mHasCriticalPermissions) {
    Intent intent=new Intent(this,PermissionsActivity.class);
    startActivity(intent);
    finish();
  }
}","/** 
 * Checks if any of the needed Android runtime permissions are missing. If they are, then launch the permissions activity under one of the following conditions: a) If critical permissions are missing, display permission request again b) If non-critical permissions are missing, just display permission request once. Critical permissions are: camera, microphone and storage. The app cannot run without them. Non-critical permission is location.
 */
private boolean checkPermissions(){
  boolean requestPermission=false;
  if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    mHasCriticalPermissions=true;
  }
 else {
    mHasCriticalPermissions=false;
  }
  if ((checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) || !mHasCriticalPermissions) {
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    boolean isRequestShown=prefs.getBoolean(CameraSettings.KEY_REQUEST_PERMISSION,false);
    if (!isRequestShown || !mHasCriticalPermissions) {
      Log.v(TAG,""String_Node_Str"");
      Intent intent=new Intent(this,PermissionsActivity.class);
      startActivity(intent);
      SharedPreferences.Editor editor=prefs.edit();
      editor.putBoolean(CameraSettings.KEY_REQUEST_PERMISSION,true);
      editor.apply();
      requestPermission=true;
    }
  }
  return requestPermission;
}"
38189,"@Override public void onResume(){
  checkPermissions();
  if (!mHasCriticalPermissions) {
    super.onResume();
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  this.setSystemBarsVisibility(false);
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mPaused=false;
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
      mThumbnailDrawable=null;
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}","@Override public void onResume(){
  if (checkPermissions() || !mHasCriticalPermissions) {
    super.onResume();
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  this.setSystemBarsVisibility(false);
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mPaused=false;
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
      mThumbnailDrawable=null;
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}"
38190,"@Override public void onCreate(Bundle state){
  super.onCreate(state);
  checkPermissions();
  if (!mHasCriticalPermissions) {
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  mCursor=getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  SettingsManager.createInstance(this);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  mCameraCaptureModuleRootView=rootLayout.findViewById(R.id.camera_capture_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  boolean cam2on=SettingsManager.getInstance().isCamera2On();
  if (cam2on && moduleIndex == ModuleSwitcher.PHOTO_MODULE_INDEX)   moduleIndex=ModuleSwitcher.CAPTURE_MODULE_INDEX;
  mOrientationListener=new MyOrientationEventListener(this);
  setContentView(R.layout.camera_filmstrip);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  setModuleFromIndex(moduleIndex);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}","@Override public void onCreate(Bundle state){
  super.onCreate(state);
  if (checkPermissions() || !mHasCriticalPermissions) {
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  mCursor=getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  SettingsManager.createInstance(this);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  mCameraCaptureModuleRootView=rootLayout.findViewById(R.id.camera_capture_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  boolean cam2on=SettingsManager.getInstance().isCamera2On();
  if (cam2on && moduleIndex == ModuleSwitcher.PHOTO_MODULE_INDEX)   moduleIndex=ModuleSwitcher.CAPTURE_MODULE_INDEX;
  mOrientationListener=new MyOrientationEventListener(this);
  setContentView(R.layout.camera_filmstrip);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  setModuleFromIndex(moduleIndex);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}"
38191,"@Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){
  if (mShouldRequestCameraPermission) {
    if (grantResults[mIndexPermissionRequestCamera] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasCameraPermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestMicrophonePermission) {
    if (grantResults[mIndexPermissionRequestMicrophone] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasMicrophonePermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestStoragePermission) {
    if (grantResults[mIndexPermissionRequestStorage] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasStoragePermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestLocationPermission) {
    if (grantResults[mIndexPermissionRequestLocation] == PackageManager.PERMISSION_GRANTED) {
    }
 else {
    }
  }
  if (mFlagHasCameraPermission && mFlagHasMicrophonePermission && mFlagHasStoragePermission) {
    handlePermissionsSuccess();
  }
}","@Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){
  if (mShouldRequestCameraPermission) {
    if (grantResults[mIndexPermissionRequestCamera] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasCameraPermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestMicrophonePermission) {
    if (grantResults[mIndexPermissionRequestMicrophone] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasMicrophonePermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestStoragePermission) {
    if (grantResults[mIndexPermissionRequestStorage] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasStoragePermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestLocationPermission) {
    if (grantResults[mIndexPermissionRequestLocation] == PackageManager.PERMISSION_GRANTED) {
    }
 else {
    }
  }
  if (mFlagHasCameraPermission && mFlagHasMicrophonePermission && mFlagHasStoragePermission) {
    handlePermissionsSuccess();
  }
 else   if (mCriticalPermissionDenied) {
    handlePermissionsFailure();
  }
}"
38192,"@Override protected void onResume(){
  super.onResume();
  mNumPermissionsToRequest=0;
  checkPermissions();
}","@Override protected void onResume(){
  super.onResume();
  if (!mCriticalPermissionDenied) {
    mNumPermissionsToRequest=0;
    checkPermissions();
  }
 else {
    mCriticalPermissionDenied=false;
  }
}"
38193,"@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  getContentResolver().unregisterContentObserver(mLocalImagesObserver);
  getContentResolver().unregisterContentObserver(mLocalVideosObserver);
  unregisterReceiver(mSDcardMountedReceiver);
  mCursor.close();
  mCursor=null;
  super.onDestroy();
}","@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  if (mCursor != null) {
    getContentResolver().unregisterContentObserver(mLocalImagesObserver);
    getContentResolver().unregisterContentObserver(mLocalVideosObserver);
    unregisterReceiver(mSDcardMountedReceiver);
    mCursor.close();
    mCursor=null;
  }
  super.onDestroy();
}"
38194,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQ_CODE_DONT_SWITCH_TO_PREVIEW) {
    mResetToPreviewOnResume=false;
    mIsEditActivityInProgress=false;
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
    if (requestCode == PERMISSIONS_ACTIVITY_REQUEST_CODE && resultCode == PERMISSIONS_RESULT_CODE_FAILED) {
      finish();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQ_CODE_DONT_SWITCH_TO_PREVIEW) {
    mResetToPreviewOnResume=false;
    mIsEditActivityInProgress=false;
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
  }
}"
38195,"@Override public void onUserInteraction(){
  super.onUserInteraction();
  mCurrentModule.onUserInteraction();
}","@Override public void onUserInteraction(){
  super.onUserInteraction();
  if (mCurrentModule != null) {
    mCurrentModule.onUserInteraction();
  }
}"
38196,"/** 
 * Checks if any of the needed Android runtime permissions are missing. If they are, then launch the permissions activity under one of the following conditions: a) The permissions dialogs have not run yet. We will ask for permission only once. b) If the missing permissions are critical to the app running, we will display a fatal error dialog. Critical permissions are: camera, microphone and storage. The app cannot run without them. Non-critical permission is location.
 */
private void checkPermissions(){
  if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    mHasCriticalPermissions=true;
  }
 else {
    mHasCriticalPermissions=false;
  }
  if ((checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) || !mHasCriticalPermissions) {
    Intent intent=new Intent(this,PermissionsActivity.class);
    startActivity(intent);
    finish();
  }
}","/** 
 * Checks if any of the needed Android runtime permissions are missing. If they are, then launch the permissions activity under one of the following conditions: a) If critical permissions are missing, display permission request again b) If non-critical permissions are missing, just display permission request once. Critical permissions are: camera, microphone and storage. The app cannot run without them. Non-critical permission is location.
 */
private boolean checkPermissions(){
  boolean requestPermission=false;
  if (checkSelfPermission(Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    mHasCriticalPermissions=true;
  }
 else {
    mHasCriticalPermissions=false;
  }
  if ((checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) || !mHasCriticalPermissions) {
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    boolean isRequestShown=prefs.getBoolean(CameraSettings.KEY_REQUEST_PERMISSION,false);
    if (!isRequestShown || !mHasCriticalPermissions) {
      Log.v(TAG,""String_Node_Str"");
      Intent intent=new Intent(this,PermissionsActivity.class);
      startActivity(intent);
      SharedPreferences.Editor editor=prefs.edit();
      editor.putBoolean(CameraSettings.KEY_REQUEST_PERMISSION,true);
      editor.apply();
      requestPermission=true;
    }
  }
  return requestPermission;
}"
38197,"@Override public void onResume(){
  checkPermissions();
  if (!mHasCriticalPermissions) {
    super.onResume();
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  this.setSystemBarsVisibility(false);
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mPaused=false;
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
      mThumbnailDrawable=null;
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}","@Override public void onResume(){
  if (checkPermissions() || !mHasCriticalPermissions) {
    super.onResume();
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  this.setSystemBarsVisibility(false);
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mPaused=false;
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
      mThumbnailDrawable=null;
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}"
38198,"@Override public void onCreate(Bundle state){
  super.onCreate(state);
  checkPermissions();
  if (!mHasCriticalPermissions) {
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  mCursor=getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  mCameraCaptureModuleRootView=rootLayout.findViewById(R.id.camera_capture_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);
  CAMERA_2_ON=pref.getBoolean(CameraSettings.KEY_CAMERA2,false);
  if (CAMERA_2_ON && moduleIndex == ModuleSwitcher.PHOTO_MODULE_INDEX)   moduleIndex=ModuleSwitcher.CAPTURE_MODULE_INDEX;
  mOrientationListener=new MyOrientationEventListener(this);
  setModuleFromIndex(moduleIndex);
  setContentView(R.layout.camera_filmstrip);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}","@Override public void onCreate(Bundle state){
  super.onCreate(state);
  if (checkPermissions() || !mHasCriticalPermissions) {
    Log.v(TAG,""String_Node_Str"");
    finish();
    return;
  }
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  mCursor=getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,null,null,null,null);
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  mCameraCaptureModuleRootView=rootLayout.findViewById(R.id.camera_capture_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(this);
  CAMERA_2_ON=pref.getBoolean(CameraSettings.KEY_CAMERA2,false);
  if (CAMERA_2_ON && moduleIndex == ModuleSwitcher.PHOTO_MODULE_INDEX)   moduleIndex=ModuleSwitcher.CAPTURE_MODULE_INDEX;
  mOrientationListener=new MyOrientationEventListener(this);
  setModuleFromIndex(moduleIndex);
  setContentView(R.layout.camera_filmstrip);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}"
38199,"@Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){
  if (mShouldRequestCameraPermission) {
    if (grantResults[mIndexPermissionRequestCamera] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasCameraPermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestMicrophonePermission) {
    if (grantResults[mIndexPermissionRequestMicrophone] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasMicrophonePermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestStoragePermission) {
    if (grantResults[mIndexPermissionRequestStorage] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasStoragePermission=true;
    }
 else {
      handlePermissionsFailure();
    }
  }
  if (mShouldRequestLocationPermission) {
    if (grantResults[mIndexPermissionRequestLocation] == PackageManager.PERMISSION_GRANTED) {
    }
 else {
    }
  }
  if (mFlagHasCameraPermission && mFlagHasMicrophonePermission && mFlagHasStoragePermission) {
    handlePermissionsSuccess();
  }
}","@Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){
  if (mShouldRequestCameraPermission) {
    if (grantResults[mIndexPermissionRequestCamera] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasCameraPermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestMicrophonePermission) {
    if (grantResults[mIndexPermissionRequestMicrophone] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasMicrophonePermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestStoragePermission) {
    if (grantResults[mIndexPermissionRequestStorage] == PackageManager.PERMISSION_GRANTED) {
      mFlagHasStoragePermission=true;
    }
 else {
      mCriticalPermissionDenied=true;
    }
  }
  if (mShouldRequestLocationPermission) {
    if (grantResults[mIndexPermissionRequestLocation] == PackageManager.PERMISSION_GRANTED) {
    }
 else {
    }
  }
  if (mFlagHasCameraPermission && mFlagHasMicrophonePermission && mFlagHasStoragePermission) {
    handlePermissionsSuccess();
  }
 else   if (mCriticalPermissionDenied) {
    handlePermissionsFailure();
  }
}"
38200,"@Override protected void onResume(){
  super.onResume();
  mNumPermissionsToRequest=0;
  checkPermissions();
}","@Override protected void onResume(){
  super.onResume();
  if (!mCriticalPermissionDenied) {
    mNumPermissionsToRequest=0;
    checkPermissions();
  }
 else {
    mCriticalPermissionDenied=false;
  }
}"
38201,"public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  mScreenRatio=CameraUtil.determineRatio(ratio);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determinCloseRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mMaxPreviewWidth, height=mMaxPreviewHeight;
if (width == 0 || height == 0) return;
if (mScreenRatio == CameraUtil.RATIO_4_3) height-=(mTopMargin + mBottomMargin);
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
if (Math.max(width,height * mAspectRatio) > width) {
scaledTextureWidth=width;
scaledTextureHeight=width / mAspectRatio;
}
 else {
scaledTextureWidth=height * mAspectRatio;
scaledTextureHeight=height;
}
}
 else {
if (Math.max(height,width * mAspectRatio) > height) {
scaledTextureWidth=height / mAspectRatio;
scaledTextureHeight=height;
}
 else {
scaledTextureWidth=width;
scaledTextureHeight=width * mAspectRatio;
}
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
if (mScreenRatio == CameraUtil.RATIO_4_3) {
lp.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
lp.setMargins(0,mTopMargin,0,mBottomMargin);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}","public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  mScreenRatio=CameraUtil.determineRatio(ratio);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determinCloseRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mMaxPreviewWidth, height=mMaxPreviewHeight;
if (width == 0 || height == 0) return;
if (mScreenRatio == CameraUtil.RATIO_4_3) height-=(mTopMargin + mBottomMargin);
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
if (Math.max(width,height * mAspectRatio) > width) {
scaledTextureWidth=width;
scaledTextureHeight=width / mAspectRatio;
}
 else {
scaledTextureWidth=height * mAspectRatio;
scaledTextureHeight=height;
}
}
 else {
if (Math.max(height,width * mAspectRatio) > height) {
scaledTextureWidth=height / mAspectRatio;
scaledTextureHeight=height;
}
 else {
scaledTextureWidth=width;
scaledTextureHeight=width * mAspectRatio;
}
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
if (mScreenRatio == CameraUtil.RATIO_4_3) {
lp.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
lp.setMargins(0,mTopMargin,0,mBottomMargin);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
mIsLayoutInitializedAlready=true;
}"
38202,"@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int width=right - left;
  int height=bottom - top;
  tryToCloseSubList();
  if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
    mMaxPreviewWidth=width;
    mMaxPreviewHeight=height;
  }
  if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize) {
    layoutPreview(mAspectRatio);
    mAspectRatioResize=false;
  }
}","@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int width=right - left;
  int height=bottom - top;
  tryToCloseSubList();
  if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
    mMaxPreviewWidth=width;
    mMaxPreviewHeight=height;
  }
  if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize || !mIsLayoutInitializedAlready) {
    layoutPreview(mAspectRatio);
    mAspectRatioResize=false;
  }
}"
38203,"public PhotoUI(CameraActivity activity,PhotoController controller,View parent){
  mActivity=activity;
  mController=controller;
  mRootView=parent;
  mActivity.getLayoutInflater().inflate(R.layout.photo_module,(ViewGroup)mRootView,true);
  mPreviewCover=mRootView.findViewById(R.id.preview_cover);
  mSurfaceView=(SurfaceView)mRootView.findViewById(R.id.mdp_preview_content);
  mSurfaceView.setVisibility(View.VISIBLE);
  mSurfaceHolder=mSurfaceView.getHolder();
  mSurfaceHolder.addCallback(this);
  mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  Log.v(TAG,""String_Node_Str"");
  mSurfaceView.addOnLayoutChangeListener(new OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      int width=right - left;
      int height=bottom - top;
      tryToCloseSubList();
      if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
        mMaxPreviewWidth=width;
        mMaxPreviewHeight=height;
      }
      if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize) {
        layoutPreview(mAspectRatio);
        mAspectRatioResize=false;
      }
    }
  }
);
  mRenderOverlay=(RenderOverlay)mRootView.findViewById(R.id.render_overlay);
  mFlashOverlay=mRootView.findViewById(R.id.flash_overlay);
  mShutterButton=(ShutterButton)mRootView.findViewById(R.id.shutter_button);
  mSwitcher=(ModuleSwitcher)mRootView.findViewById(R.id.camera_switcher);
  mSwitcher.setCurrentIndex(ModuleSwitcher.PHOTO_MODULE_INDEX);
  mSwitcher.setSwitchListener(mActivity);
  mSwitcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mController.getCameraState() == PhotoController.LONGSHOT) {
        return;
      }
      mSwitcher.showPopup();
      mSwitcher.setOrientation(mOrientation,false);
    }
  }
);
  mMenuButton=mRootView.findViewById(R.id.menu);
  RotateImageView muteButton=(RotateImageView)mRootView.findViewById(R.id.mute_button);
  muteButton.setVisibility(View.GONE);
  mCameraControls=(CameraControls)mRootView.findViewById(R.id.camera_controls);
  ViewStub faceViewStub=(ViewStub)mRootView.findViewById(R.id.face_view_stub);
  if (faceViewStub != null) {
    faceViewStub.inflate();
    mFaceView=(FaceView)mRootView.findViewById(R.id.face_view);
    setSurfaceTextureSizeChangedListener(mFaceView);
  }
  initIndicators();
  mAnimationManager=new AnimationManager();
  mOrientationResize=false;
  mPrevOrientationResize=false;
  Point size=new Point();
  mActivity.getWindowManager().getDefaultDisplay().getSize(size);
  mScreenRatio=CameraUtil.determineRatio(size.x,size.y);
  calculateMargins(size);
  mCameraControls.setMargins(mTopMargin,mBottomMargin);
  showFirstTimeHelp();
}","public PhotoUI(CameraActivity activity,PhotoController controller,View parent){
  mActivity=activity;
  mController=controller;
  mRootView=parent;
  mActivity.getLayoutInflater().inflate(R.layout.photo_module,(ViewGroup)mRootView,true);
  mPreviewCover=mRootView.findViewById(R.id.preview_cover);
  mSurfaceView=(SurfaceView)mRootView.findViewById(R.id.mdp_preview_content);
  mSurfaceView.setVisibility(View.VISIBLE);
  mSurfaceHolder=mSurfaceView.getHolder();
  mSurfaceHolder.addCallback(this);
  mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  Log.v(TAG,""String_Node_Str"");
  mSurfaceView.addOnLayoutChangeListener(new OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      int width=right - left;
      int height=bottom - top;
      tryToCloseSubList();
      if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
        mMaxPreviewWidth=width;
        mMaxPreviewHeight=height;
      }
      if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize || !mIsLayoutInitializedAlready) {
        layoutPreview(mAspectRatio);
        mAspectRatioResize=false;
      }
    }
  }
);
  mRenderOverlay=(RenderOverlay)mRootView.findViewById(R.id.render_overlay);
  mFlashOverlay=mRootView.findViewById(R.id.flash_overlay);
  mShutterButton=(ShutterButton)mRootView.findViewById(R.id.shutter_button);
  mSwitcher=(ModuleSwitcher)mRootView.findViewById(R.id.camera_switcher);
  mSwitcher.setCurrentIndex(ModuleSwitcher.PHOTO_MODULE_INDEX);
  mSwitcher.setSwitchListener(mActivity);
  mSwitcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mController.getCameraState() == PhotoController.LONGSHOT) {
        return;
      }
      mSwitcher.showPopup();
      mSwitcher.setOrientation(mOrientation,false);
    }
  }
);
  mMenuButton=mRootView.findViewById(R.id.menu);
  RotateImageView muteButton=(RotateImageView)mRootView.findViewById(R.id.mute_button);
  muteButton.setVisibility(View.GONE);
  mCameraControls=(CameraControls)mRootView.findViewById(R.id.camera_controls);
  ViewStub faceViewStub=(ViewStub)mRootView.findViewById(R.id.face_view_stub);
  if (faceViewStub != null) {
    faceViewStub.inflate();
    mFaceView=(FaceView)mRootView.findViewById(R.id.face_view);
    setSurfaceTextureSizeChangedListener(mFaceView);
  }
  initIndicators();
  mAnimationManager=new AnimationManager();
  mOrientationResize=false;
  mPrevOrientationResize=false;
  Point size=new Point();
  mActivity.getWindowManager().getDefaultDisplay().getSize(size);
  mScreenRatio=CameraUtil.determineRatio(size.x,size.y);
  calculateMargins(size);
  mCameraControls.setMargins(mTopMargin,mBottomMargin);
  showFirstTimeHelp();
}"
38204,"public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  mScreenRatio=CameraUtil.determineRatio(ratio);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determinCloseRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mMaxPreviewWidth, height=mMaxPreviewHeight;
if (width == 0 || height == 0) return;
if (mScreenRatio == CameraUtil.RATIO_4_3) height-=(mTopMargin + mBottomMargin);
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
if (Math.max(width,height * mAspectRatio) > width) {
scaledTextureWidth=width;
scaledTextureHeight=width / mAspectRatio;
}
 else {
scaledTextureWidth=height * mAspectRatio;
scaledTextureHeight=height;
}
}
 else {
if (Math.max(height,width * mAspectRatio) > height) {
scaledTextureWidth=height / mAspectRatio;
scaledTextureHeight=height;
}
 else {
scaledTextureWidth=width;
scaledTextureHeight=width * mAspectRatio;
}
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
if (mScreenRatio == CameraUtil.RATIO_4_3) {
lp.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
lp.setMargins(0,mTopMargin,0,mBottomMargin);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}","public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  mScreenRatio=CameraUtil.determineRatio(ratio);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determinCloseRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mMaxPreviewWidth, height=mMaxPreviewHeight;
if (width == 0 || height == 0) return;
if (mScreenRatio == CameraUtil.RATIO_4_3) height-=(mTopMargin + mBottomMargin);
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
if (Math.max(width,height * mAspectRatio) > width) {
scaledTextureWidth=width;
scaledTextureHeight=width / mAspectRatio;
}
 else {
scaledTextureWidth=height * mAspectRatio;
scaledTextureHeight=height;
}
}
 else {
if (Math.max(height,width * mAspectRatio) > height) {
scaledTextureWidth=height / mAspectRatio;
scaledTextureHeight=height;
}
 else {
scaledTextureWidth=width;
scaledTextureHeight=width * mAspectRatio;
}
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
if (mScreenRatio == CameraUtil.RATIO_4_3) {
lp.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
lp.setMargins(0,mTopMargin,0,mBottomMargin);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
mIsLayoutInitializedAlready=true;
}"
38205,"@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int width=right - left;
  int height=bottom - top;
  tryToCloseSubList();
  if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
    mMaxPreviewWidth=width;
    mMaxPreviewHeight=height;
  }
  if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize) {
    layoutPreview(mAspectRatio);
    mAspectRatioResize=false;
  }
}","@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
  int width=right - left;
  int height=bottom - top;
  tryToCloseSubList();
  if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
    mMaxPreviewWidth=width;
    mMaxPreviewHeight=height;
  }
  if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize || !mIsLayoutInitializedAlready) {
    layoutPreview(mAspectRatio);
    mAspectRatioResize=false;
  }
}"
38206,"public PhotoUI(CameraActivity activity,PhotoController controller,View parent){
  mActivity=activity;
  mController=controller;
  mRootView=parent;
  mActivity.getLayoutInflater().inflate(R.layout.photo_module,(ViewGroup)mRootView,true);
  mPreviewCover=mRootView.findViewById(R.id.preview_cover);
  mSurfaceView=(SurfaceView)mRootView.findViewById(R.id.mdp_preview_content);
  mSurfaceView.setVisibility(View.VISIBLE);
  mSurfaceHolder=mSurfaceView.getHolder();
  mSurfaceHolder.addCallback(this);
  mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  Log.v(TAG,""String_Node_Str"");
  mSurfaceView.addOnLayoutChangeListener(new OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      int width=right - left;
      int height=bottom - top;
      tryToCloseSubList();
      if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
        mMaxPreviewWidth=width;
        mMaxPreviewHeight=height;
      }
      if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize) {
        layoutPreview(mAspectRatio);
        mAspectRatioResize=false;
      }
    }
  }
);
  mRenderOverlay=(RenderOverlay)mRootView.findViewById(R.id.render_overlay);
  mFlashOverlay=mRootView.findViewById(R.id.flash_overlay);
  mShutterButton=(ShutterButton)mRootView.findViewById(R.id.shutter_button);
  mSwitcher=(ModuleSwitcher)mRootView.findViewById(R.id.camera_switcher);
  mSwitcher.setCurrentIndex(ModuleSwitcher.PHOTO_MODULE_INDEX);
  mSwitcher.setSwitchListener(mActivity);
  mSwitcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mController.getCameraState() == PhotoController.LONGSHOT) {
        return;
      }
      mSwitcher.showPopup();
      mSwitcher.setOrientation(mOrientation,false);
    }
  }
);
  mMenuButton=mRootView.findViewById(R.id.menu);
  RotateImageView muteButton=(RotateImageView)mRootView.findViewById(R.id.mute_button);
  muteButton.setVisibility(View.GONE);
  mCameraControls=(CameraControls)mRootView.findViewById(R.id.camera_controls);
  ViewStub faceViewStub=(ViewStub)mRootView.findViewById(R.id.face_view_stub);
  if (faceViewStub != null) {
    faceViewStub.inflate();
    mFaceView=(FaceView)mRootView.findViewById(R.id.face_view);
    setSurfaceTextureSizeChangedListener(mFaceView);
  }
  initIndicators();
  mAnimationManager=new AnimationManager();
  mOrientationResize=false;
  mPrevOrientationResize=false;
  Point size=new Point();
  mActivity.getWindowManager().getDefaultDisplay().getSize(size);
  mScreenRatio=CameraUtil.determineRatio(size.x,size.y);
  calculateMargins(size);
  mCameraControls.setMargins(mTopMargin,mBottomMargin);
  showFirstTimeHelp();
}","public PhotoUI(CameraActivity activity,PhotoController controller,View parent){
  mActivity=activity;
  mController=controller;
  mRootView=parent;
  mActivity.getLayoutInflater().inflate(R.layout.photo_module,(ViewGroup)mRootView,true);
  mPreviewCover=mRootView.findViewById(R.id.preview_cover);
  mSurfaceView=(SurfaceView)mRootView.findViewById(R.id.mdp_preview_content);
  mSurfaceView.setVisibility(View.VISIBLE);
  mSurfaceHolder=mSurfaceView.getHolder();
  mSurfaceHolder.addCallback(this);
  mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  Log.v(TAG,""String_Node_Str"");
  mSurfaceView.addOnLayoutChangeListener(new OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      int width=right - left;
      int height=bottom - top;
      tryToCloseSubList();
      if (mMaxPreviewWidth == 0 && mMaxPreviewHeight == 0) {
        mMaxPreviewWidth=width;
        mMaxPreviewHeight=height;
      }
      if (mOrientationResize != mPrevOrientationResize || mAspectRatioResize || !mIsLayoutInitializedAlready) {
        layoutPreview(mAspectRatio);
        mAspectRatioResize=false;
      }
    }
  }
);
  mRenderOverlay=(RenderOverlay)mRootView.findViewById(R.id.render_overlay);
  mFlashOverlay=mRootView.findViewById(R.id.flash_overlay);
  mShutterButton=(ShutterButton)mRootView.findViewById(R.id.shutter_button);
  mSwitcher=(ModuleSwitcher)mRootView.findViewById(R.id.camera_switcher);
  mSwitcher.setCurrentIndex(ModuleSwitcher.PHOTO_MODULE_INDEX);
  mSwitcher.setSwitchListener(mActivity);
  mSwitcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mController.getCameraState() == PhotoController.LONGSHOT) {
        return;
      }
      mSwitcher.showPopup();
      mSwitcher.setOrientation(mOrientation,false);
    }
  }
);
  mMenuButton=mRootView.findViewById(R.id.menu);
  RotateImageView muteButton=(RotateImageView)mRootView.findViewById(R.id.mute_button);
  muteButton.setVisibility(View.GONE);
  mCameraControls=(CameraControls)mRootView.findViewById(R.id.camera_controls);
  ViewStub faceViewStub=(ViewStub)mRootView.findViewById(R.id.face_view_stub);
  if (faceViewStub != null) {
    faceViewStub.inflate();
    mFaceView=(FaceView)mRootView.findViewById(R.id.face_view);
    setSurfaceTextureSizeChangedListener(mFaceView);
  }
  initIndicators();
  mAnimationManager=new AnimationManager();
  mOrientationResize=false;
  mPrevOrientationResize=false;
  Point size=new Point();
  mActivity.getWindowManager().getDefaultDisplay().getSize(size);
  mScreenRatio=CameraUtil.determineRatio(size.x,size.y);
  calculateMargins(size);
  mCameraControls.setMargins(mTopMargin,mBottomMargin);
  showFirstTimeHelp();
}"
38207,"public void onSingleTapUp(int x,int y){
  if (!mInitialized || mState == STATE_FOCUSING_SNAP_ON_FINISH)   return;
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_TOUCH_FOCUS,x + ""String_Node_Str"" + y);
  if ((mFocusArea != null) && (mState == STATE_FOCUSING || mState == STATE_SUCCESS || mState == STATE_FAIL)) {
    cancelAutoFocus();
  }
  if (mPreviewRect.width() == 0 || mPreviewRect.height() == 0)   return;
  if (mFocusAreaSupported) {
    initializeFocusAreas(x,y);
  }
  if (mMeteringAreaSupported) {
    initializeMeteringAreas(x,y);
  }
  mUI.setFocusPosition(x,y);
  if (mZslEnabled) {
    mTouchAFRunning=true;
  }
  mListener.stopFaceDetection();
  mListener.setFocusParameters();
  if (mFocusAreaSupported) {
    autoFocus();
  }
 else {
    updateFocusUI();
    mHandler.removeMessages(RESET_TOUCH_FOCUS);
    mHandler.sendEmptyMessageDelayed(RESET_TOUCH_FOCUS,RESET_TOUCH_FOCUS_DELAY);
  }
}","public void onSingleTapUp(int x,int y){
  if (!mInitialized || mState == STATE_FOCUSING_SNAP_ON_FINISH)   return;
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_TOUCH_FOCUS,x + ""String_Node_Str"" + y);
  if ((mState == STATE_FOCUSING || mState == STATE_SUCCESS || mState == STATE_FAIL)) {
    cancelAutoFocus();
  }
  if (mPreviewRect.width() == 0 || mPreviewRect.height() == 0)   return;
  if (mFocusAreaSupported) {
    initializeFocusAreas(x,y);
  }
  if (mMeteringAreaSupported) {
    initializeMeteringAreas(x,y);
  }
  mUI.setFocusPosition(x,y);
  if (mZslEnabled) {
    mTouchAFRunning=true;
  }
  mListener.stopFaceDetection();
  mListener.setFocusParameters();
  if (mFocusAreaSupported) {
    autoFocus();
  }
 else {
    updateFocusUI();
    mHandler.removeMessages(RESET_TOUCH_FOCUS);
    mHandler.sendEmptyMessageDelayed(RESET_TOUCH_FOCUS,RESET_TOUCH_FOCUS_DELAY);
  }
}"
38208,"public boolean is4KEnabled(){
  if (mProfile.quality == CamcorderProfile.QUALITY_2160P || mProfile.quality == CamcorderProfile.QUALITY_4KDCI) {
    return true;
  }
 else {
    return false;
  }
}","public boolean is4KEnabled(){
  if (mProfile.quality == CamcorderProfile.QUALITY_2160P || mProfile.quality == CamcorderProfile.QUALITY_TIME_LAPSE_2160P || mProfile.quality == CamcorderProfile.QUALITY_4KDCI) {
    return true;
  }
 else {
    return false;
  }
}"
38209,"@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
        if (isInstantCaptureEnabled()) {
          mInstantCaptureSnapShot=true;
        }
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mUI.setSwitcherIndex();
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}","@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    if (isInstantCaptureEnabled()) {
      mInstantCaptureSnapShot=true;
    }
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mUI.setSwitcherIndex();
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}"
38210,"@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  mUI.showSurfaceView();
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
        if (isInstantCaptureEnabled()) {
          mInstantCaptureSnapShot=true;
        }
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mUI.setSwitcherIndex();
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}","@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  mUI.showSurfaceView();
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    if (isInstantCaptureEnabled()) {
      mInstantCaptureSnapShot=true;
    }
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mUI.setSwitcherIndex();
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}"
38211,"public boolean is4KEnabled(){
  if (mProfile.quality == CamcorderProfile.QUALITY_2160P || mProfile.quality == CamcorderProfile.QUALITY_4KDCI) {
    return true;
  }
 else {
    return false;
  }
}","public boolean is4KEnabled(){
  if (mProfile.quality == CamcorderProfile.QUALITY_2160P || mProfile.quality == CamcorderProfile.QUALITY_TIME_LAPSE_2160P || mProfile.quality == CamcorderProfile.QUALITY_4KDCI) {
    return true;
  }
 else {
    return false;
  }
}"
38212,"public void onSingleTapUp(int x,int y){
  if (!mInitialized || mState == STATE_FOCUSING_SNAP_ON_FINISH)   return;
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_TOUCH_FOCUS,x + ""String_Node_Str"" + y);
  if ((mFocusArea != null) && (mState == STATE_FOCUSING || mState == STATE_SUCCESS || mState == STATE_FAIL)) {
    cancelAutoFocus();
  }
  if (mPreviewRect.width() == 0 || mPreviewRect.height() == 0)   return;
  if (mFocusAreaSupported) {
    initializeFocusAreas(x,y);
  }
  if (mMeteringAreaSupported) {
    initializeMeteringAreas(x,y);
  }
  mUI.setFocusPosition(x,y);
  if (mZslEnabled) {
    mTouchAFRunning=true;
  }
  mListener.stopFaceDetection();
  mListener.setFocusParameters();
  if (mFocusAreaSupported) {
    autoFocus();
  }
 else {
    updateFocusUI();
    mHandler.removeMessages(RESET_TOUCH_FOCUS);
    mHandler.sendEmptyMessageDelayed(RESET_TOUCH_FOCUS,RESET_TOUCH_FOCUS_DELAY);
  }
}","public void onSingleTapUp(int x,int y){
  if (!mInitialized || mState == STATE_FOCUSING_SNAP_ON_FINISH)   return;
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_TOUCH_FOCUS,x + ""String_Node_Str"" + y);
  if ((mState == STATE_FOCUSING || mState == STATE_SUCCESS || mState == STATE_FAIL)) {
    cancelAutoFocus();
  }
  if (mPreviewRect.width() == 0 || mPreviewRect.height() == 0)   return;
  if (mFocusAreaSupported) {
    initializeFocusAreas(x,y);
  }
  if (mMeteringAreaSupported) {
    initializeMeteringAreas(x,y);
  }
  mUI.setFocusPosition(x,y);
  if (mZslEnabled) {
    mTouchAFRunning=true;
  }
  mListener.stopFaceDetection();
  mListener.setFocusParameters();
  if (mFocusAreaSupported) {
    autoFocus();
  }
 else {
    updateFocusUI();
    mHandler.removeMessages(RESET_TOUCH_FOCUS);
    mHandler.sendEmptyMessageDelayed(RESET_TOUCH_FOCUS,RESET_TOUCH_FOCUS_DELAY);
  }
}"
38213,"public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}","public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      mUI.hideUI();
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}"
38214,"public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}","public void initSwitchItem(final String prefKey,View switcher){
  final IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
  if (pref == null)   return;
  int[] iconIds=pref.getLargeIconIds();
  int resid=-1;
  int index=pref.findIndexOfValue(pref.getValue());
  if (!pref.getUseSingleIcon() && iconIds != null) {
    resid=iconIds[index];
  }
 else {
    resid=pref.getSingleIcon();
  }
  ((ImageView)switcher).setImageResource(resid);
  switcher.setVisibility(View.VISIBLE);
  mPreferences.add(pref);
  mPreferenceMap.put(pref,switcher);
  switcher.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      IconListPreference pref=(IconListPreference)mPreferenceGroup.findPreference(prefKey);
      if (pref == null)       return;
      mUI.hideUI();
      int index=pref.findIndexOfValue(pref.getValue());
      CharSequence[] values=pref.getEntryValues();
      index=(index + 1) % values.length;
      pref.setValueIndex(index);
      ((ImageView)v).setImageResource(((IconListPreference)pref).getLargeIconIds()[index]);
      if (prefKey.equals(CameraSettings.KEY_CAMERA_ID))       mListener.onCameraPickerClicked(index);
      reloadPreference(pref);
      onSettingChanged(pref);
    }
  }
);
}"
38215,"@Override public void onError(MediaRecorder mr,int what,int extra){
  Log.e(TAG,""String_Node_Str"" + what + ""String_Node_Str""+ extra);
  stopVideoRecording();
  if (what == MediaRecorder.MEDIA_RECORDER_ERROR_UNKNOWN) {
    mActivity.updateStorageSpaceAndHint();
  }
}","@Override public void onError(MediaRecorder mr,int what,int extra){
  Log.e(TAG,""String_Node_Str"" + what + ""String_Node_Str""+ extra);
  stopVideoRecording();
  mUI.showUIafterRecording();
  if (what == MediaRecorder.MEDIA_RECORDER_ERROR_UNKNOWN) {
    mActivity.updateStorageSpaceAndHint();
  }
}"
38216,"/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      try {
        Method openMethod=Class.forName(""String_Node_Str"").getMethod(""String_Node_Str"",int.class,int.class);
        mCamera=(android.hardware.Camera)openMethod.invoke(null,msg.arg1,CAMERA_HAL_API_VERSION_1_0);
      }
 catch (      Exception e) {
        Log.v(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        mCamera=android.hardware.Camera.open(msg.arg1);
      }
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
if (mCamera == null) {
  return;
}
mCamera.release();
errorCbInstance=null;
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
try {
mCamera.startPreview();
}
 catch (Exception e) {
e.printStackTrace();
if (errorCbInstance != null) errorCbInstance.onStartPreviewFailure(msg.arg1);
}
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case SET_ONESHOT_PREVIEW_CALLBACK:
mCamera.setOneShotPreviewCallback((PreviewCallback)msg.obj);
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
case SET_AUTO_HDR_MODE:
mCamera.setMetadataCb((CameraMetaDataCallback)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}","/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      try {
        Method openMethod=Class.forName(""String_Node_Str"").getMethod(""String_Node_Str"",int.class,int.class);
        mCamera=(android.hardware.Camera)openMethod.invoke(null,msg.arg1,CAMERA_HAL_API_VERSION_1_0);
      }
 catch (      Exception e) {
        Log.v(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        mCamera=android.hardware.Camera.open(msg.arg1);
      }
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
if (mCamera == null) {
  return;
}
mCamera.release();
errorCbInstance=null;
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
try {
mCamera.startPreview();
}
 catch (Exception e) {
e.printStackTrace();
if (errorCbInstance != null) errorCbInstance.onStartPreviewFailure(msg.arg1);
}
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case SET_ONESHOT_PREVIEW_CALLBACK:
mCamera.setOneShotPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
case SET_AUTO_HDR_MODE:
mCamera.setMetadataCb((CameraMetaDataCallback)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}"
38217,"/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      try {
        Method openMethod=Class.forName(""String_Node_Str"").getMethod(""String_Node_Str"",int.class,int.class);
        mCamera=(android.hardware.Camera)openMethod.invoke(null,msg.arg1,CAMERA_HAL_API_VERSION_1_0);
      }
 catch (      Exception e) {
        Log.v(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        mCamera=android.hardware.Camera.open(msg.arg1);
      }
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
if (mCamera == null) {
  return;
}
mCamera.release();
errorCbInstance=null;
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
try {
mCamera.startPreview();
}
 catch (Exception e) {
e.printStackTrace();
if (errorCbInstance != null) errorCbInstance.onStartPreviewFailure(msg.arg1);
}
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case SET_ONESHOT_PREVIEW_CALLBACK:
mCamera.setOneShotPreviewCallback((PreviewCallback)msg.obj);
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
case SET_AUTO_HDR_MODE:
mCamera.setMetadataCb((CameraMetaDataCallback)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}","/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      try {
        Method openMethod=Class.forName(""String_Node_Str"").getMethod(""String_Node_Str"",int.class,int.class);
        mCamera=(android.hardware.Camera)openMethod.invoke(null,msg.arg1,CAMERA_HAL_API_VERSION_1_0);
      }
 catch (      Exception e) {
        Log.v(TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        mCamera=android.hardware.Camera.open(msg.arg1);
      }
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
if (mCamera == null) {
  return;
}
mCamera.release();
errorCbInstance=null;
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
try {
mCamera.startPreview();
}
 catch (Exception e) {
e.printStackTrace();
if (errorCbInstance != null) errorCbInstance.onStartPreviewFailure(msg.arg1);
}
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case SET_ONESHOT_PREVIEW_CALLBACK:
mCamera.setOneShotPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
case SET_AUTO_HDR_MODE:
mCamera.setMetadataCb((CameraMetaDataCallback)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}"
38218,"public void onListMenuTouched(){
  mUI.removeLevel2();
}","public void onListMenuTouched(){
  mUI.removeLevel2();
  mPopupStatus=POPUP_FIRST_LEVEL;
}"
38219,"public void onListMenuTouched(){
  mUI.removeLevel2();
}","public void onListMenuTouched(){
  mUI.removeLevel2();
  mPopupStatus=POPUP_FIRST_LEVEL;
}"
38220,"@Override public boolean onTouchEvent(MotionEvent ev){
  return super.onTouchEvent(ev);
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_MOVE) {
    mListener.onListMenuTouched();
    resetHighlight();
  }
  return super.onTouchEvent(ev);
}"
38221,"@Override public void onReceive(Context context,Intent intent){
  sFirstStartAfterScreenOn=true;
}","@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"");
  updateStorageSpaceAndHint();
}"
38222,"@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  if (mScreenOffReceiver != null) {
    unregisterReceiver(mScreenOffReceiver);
  }
  getContentResolver().unregisterContentObserver(mLocalImagesObserver);
  getContentResolver().unregisterContentObserver(mLocalVideosObserver);
  unregisterReceiver(mSDcardMountedReceiver);
  super.onDestroy();
}","@Override public void onDestroy(){
  if (mWakeLock != null && mWakeLock.isHeld()) {
    mWakeLock.release();
    Log.d(TAG,""String_Node_Str"");
  }
  getContentResolver().unregisterContentObserver(mLocalImagesObserver);
  getContentResolver().unregisterContentObserver(mLocalVideosObserver);
  unregisterReceiver(mSDcardMountedReceiver);
  super.onDestroy();
}"
38223,"@Override public void onCreate(Bundle state){
  super.onCreate(state);
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  IntentFilter filter=new IntentFilter(Intent.ACTION_SCREEN_OFF);
  registerReceiver(mScreenOffReceiver,filter);
  if (sScreenOffReceiver == null) {
    sScreenOffReceiver=new ScreenOffReceiver();
    registerReceiver(sScreenOffReceiver,filter);
  }
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  mOrientationListener=new MyOrientationEventListener(this);
  setModuleFromIndex(moduleIndex);
  setContentView(R.layout.camera_filmstrip);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}","@Override public void onCreate(Bundle state){
  super.onCreate(state);
  Intent intent=getIntent();
  String action=intent.getAction();
  if (INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action) || ACTION_IMAGE_CAPTURE_SECURE.equals(action) || intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
    mSecureCamera=true;
  }
 else {
    mSecureCamera=intent.getBooleanExtra(SECURE_CAMERA_EXTRA,false);
  }
  if (mSecureCamera) {
    Window win=getWindow();
    WindowManager.LayoutParams params=win.getAttributes();
    params.flags|=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
    if (intent.getComponent().getClassName().equals(GESTURE_CAMERA_NAME)) {
      params.flags|=WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
      PowerManager pm=((PowerManager)getSystemService(POWER_SERVICE));
      mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
      mWakeLock.acquire();
      Log.d(TAG,""String_Node_Str"");
    }
    win.setAttributes(params);
  }
  GcamHelper.init(getContentResolver());
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
  LayoutInflater inflater=getLayoutInflater();
  View rootLayout=inflater.inflate(R.layout.camera,null,false);
  mCameraRootFrame=(FrameLayout)rootLayout.findViewById(R.id.camera_root_frame);
  mCameraPhotoModuleRootView=rootLayout.findViewById(R.id.camera_photo_root);
  mCameraVideoModuleRootView=rootLayout.findViewById(R.id.camera_video_root);
  mCameraPanoModuleRootView=rootLayout.findViewById(R.id.camera_pano_root);
  int moduleIndex=-1;
  if (MediaStore.INTENT_ACTION_VIDEO_CAMERA.equals(getIntent().getAction()) || MediaStore.ACTION_VIDEO_CAPTURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.VIDEO_MODULE_INDEX;
  }
 else   if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(getIntent().getAction()) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    if (prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1) == ModuleSwitcher.GCAM_MODULE_INDEX && GcamHelper.hasGcamCapture()) {
      moduleIndex=ModuleSwitcher.GCAM_MODULE_INDEX;
    }
  }
 else   if (MediaStore.ACTION_IMAGE_CAPTURE.equals(getIntent().getAction()) || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(getIntent().getAction())) {
    moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
  }
 else {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    moduleIndex=prefs.getInt(CameraSettings.KEY_STARTUP_MODULE_INDEX,-1);
    if ((moduleIndex == ModuleSwitcher.GCAM_MODULE_INDEX && !GcamHelper.hasGcamCapture()) || moduleIndex < 0) {
      moduleIndex=ModuleSwitcher.PHOTO_MODULE_INDEX;
    }
  }
  mOrientationListener=new MyOrientationEventListener(this);
  setModuleFromIndex(moduleIndex);
  setContentView(R.layout.camera_filmstrip);
  mActionBar=getActionBar();
  mActionBar.addOnMenuVisibilityListener(this);
  if (ApiHelper.HAS_ROTATION_ANIMATION) {
    setRotationAnimation();
  }
  mMainHandler=new MainHandler(getMainLooper());
  mAboveFilmstripControlLayout=(FrameLayout)findViewById(R.id.camera_above_filmstrip_layout);
  mAboveFilmstripControlLayout.setFitsSystemWindows(true);
  mPanoramaManager=AppManagerFactory.getInstance(this).getPanoramaStitchingManager();
  mPlaceholderManager=AppManagerFactory.getInstance(this).getGcamProcessingManager();
  mPanoramaManager.addTaskListener(mStitchingListener);
  mPlaceholderManager.addTaskListener(mPlaceholderListener);
  mPanoStitchingPanel=findViewById(R.id.pano_stitching_progress_panel);
  mBottomProgress=(ProgressBar)findViewById(R.id.pano_stitching_progress_bar);
  mCameraPreviewData=new CameraPreviewData(rootLayout,FilmStripView.ImageData.SIZE_FULL,FilmStripView.ImageData.SIZE_FULL);
  mWrappedDataAdapter=new FixedFirstDataAdapter(new CameraDataAdapter(new ColorDrawable(getResources().getColor(R.color.photo_placeholder))),mCameraPreviewData);
  mFilmStripView=(FilmStripView)findViewById(R.id.filmstrip_view);
  mFilmStripView.setViewGap(getResources().getDimensionPixelSize(R.dimen.camera_film_strip_gap));
  mPanoramaViewHelper=new PanoramaViewHelper(this);
  mPanoramaViewHelper.onCreate();
  mFilmStripView.setPanoramaViewHelper(mPanoramaViewHelper);
  mFilmStripView.setListener(mFilmStripListener);
  if (!mSecureCamera) {
    mDataAdapter=mWrappedDataAdapter;
    mFilmStripView.setDataAdapter(mDataAdapter);
    if (!isCaptureIntent()) {
      mDataAdapter.requestLoad(getContentResolver());
      mDataRequested=true;
    }
  }
 else {
    ImageView v=(ImageView)getLayoutInflater().inflate(R.layout.secure_album_placeholder,null);
    v.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        try {
          UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
          startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
        }
 catch (        ActivityNotFoundException e) {
          Log.w(TAG,""String_Node_Str"");
        }
        finish();
      }
    }
);
    mDataAdapter=new FixedLastDataAdapter(mWrappedDataAdapter,new SimpleViewData(v,v.getDrawable().getIntrinsicWidth(),v.getDrawable().getIntrinsicHeight(),0,0));
    mDataAdapter.flush();
    mFilmStripView.setDataAdapter(mDataAdapter);
  }
  setupNfcBeamPush();
  mLocalImagesObserver=new LocalMediaObserver();
  mLocalVideosObserver=new LocalMediaObserver();
  getContentResolver().registerContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,true,mLocalImagesObserver);
  getContentResolver().registerContentObserver(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,true,mLocalVideosObserver);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mDeveloperMenuEnabled=prefs.getBoolean(CameraSettings.KEY_DEVELOPER_MENU,false);
  Display display=getWindowManager().getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int width=size.x;
  int height=size.y;
  int lower=Math.min(width,height);
  int offset=lower * 7 / 100;
  SETTING_LIST_WIDTH_1=lower / 2 + offset;
  SETTING_LIST_WIDTH_2=lower / 2 - offset;
  registerSDcardMountedReceiver();
}"
38224,"private void closeCamera(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice != null) {
    mCameraDevice.setZoomChangeListener(null);
    mCameraDevice.setFaceDetectionCallback(null,null);
    mCameraDevice.setErrorCallback(null);
    if (mActivity.isSecureCamera() && !CameraActivity.isFirstStartAfterScreenOn()) {
      CameraHolder.instance().strongRelease();
    }
 else {
      CameraHolder.instance().release();
    }
    mFaceDetectionStarted=false;
    mCameraDevice=null;
    setCameraState(PREVIEW_STOPPED);
    if (mFocusManager != null) {
      mFocusManager.onCameraReleased();
    }
  }
}","private void closeCamera(){
  Log.v(TAG,""String_Node_Str"");
  if (mCameraDevice != null) {
    mCameraDevice.setZoomChangeListener(null);
    mCameraDevice.setFaceDetectionCallback(null,null);
    mCameraDevice.setErrorCallback(null);
    if (mActivity.isSecureCamera()) {
      CameraHolder.instance().strongRelease();
    }
 else {
      CameraHolder.instance().release();
    }
    mFaceDetectionStarted=false;
    mCameraDevice=null;
    setCameraState(PREVIEW_STOPPED);
    if (mFocusManager != null) {
      mFocusManager.onCameraReleased();
    }
  }
}"
38225,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_MEDIA_EJECT)) {
    stopVideoRecording();
    RotateTextToast.makeText(mActivity,mActivity.getResources().getString(R.string.video_recording_stopped),Toast.LENGTH_SHORT).show();
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_MEDIA_EJECT) || action.equals(Intent.ACTION_SCREEN_OFF)) {
    stopVideoRecording();
    RotateTextToast.makeText(mActivity,mActivity.getResources().getString(R.string.video_recording_stopped),Toast.LENGTH_SHORT).show();
  }
}"
38226,"@Override public void installIntentFilter(){
  if (mReceiver != null)   return;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new MyBroadcastReceiver();
  mActivity.registerReceiver(mReceiver,intentFilter);
}","@Override public void installIntentFilter(){
  if (mReceiver != null)   return;
  IntentFilter intentFilter=new IntentFilter(Intent.ACTION_MEDIA_EJECT);
  intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
  intentFilter.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
  intentFilter.addDataScheme(""String_Node_Str"");
  mReceiver=new MyBroadcastReceiver();
  mActivity.registerReceiver(mReceiver,intentFilter);
}"
38227,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}"
38228,"private String getSDCardStorageState(){
  try {
    return mMountService.getVolumeState(mVolume.getPath());
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"" + e);
    return Environment.MEDIA_REMOVED;
  }
}","private String getSDCardStorageState(){
  return mVolume.getState();
}"
38229,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}"
38230,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}"
38231,"/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here.
 */
private void qcomUpdateCameraParametersPreference(){
  mParameters.set(""String_Node_Str"",String.valueOf(mbrightness));
  String longshot_enable=mPreferences.getString(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.pref_camera_longshot_default));
  mParameters.set(""String_Node_Str"",longshot_enable);
  String optizoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode) || CameraUtil.SCENE_MODE_HDR.equals(mSceneMode) || optizoomOn.equals(mSceneMode)) {
    String touchAfAec=mPreferences.getString(CameraSettings.KEY_TOUCH_AF_AEC,mActivity.getString(R.string.pref_camera_touchafaec_default));
    if (CameraUtil.isSupported(touchAfAec,mParameters.getSupportedTouchAfAec())) {
      mCurrTouchAfAec=touchAfAec;
      mParameters.setTouchAfAec(touchAfAec);
    }
  }
 else {
    mParameters.setTouchAfAec(mParameters.TOUCH_AF_AEC_OFF);
    mFocusManager.resetTouchFocus();
  }
  try {
    if (mParameters.getTouchAfAec().equals(mParameters.TOUCH_AF_AEC_ON))     this.mTouchAfAecFlag=true;
 else     this.mTouchAfAecFlag=false;
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"");
  }
  String pictureFormat=mPreferences.getString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_default));
  if (mIsImageCaptureIntent && !pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
    pictureFormat=PIXEL_FORMAT_JPEG;
    Editor editor=mPreferences.edit();
    editor.putString(CameraSettings.KEY_PICTURE_FORMAT,mActivity.getString(R.string.pref_camera_picture_format_value_jpeg));
    editor.apply();
  }
  Log.v(TAG,""String_Node_Str"" + pictureFormat);
  mParameters.set(KEY_PICTURE_FORMAT,pictureFormat);
  String jpegQuality=mPreferences.getString(CameraSettings.KEY_JPEG_QUALITY,mActivity.getString(R.string.pref_camera_jpegquality_default));
  Size pic_size=mParameters.getPictureSize();
  if (pic_size == null) {
    Log.e(TAG,""String_Node_Str"");
  }
 else {
    if (""String_Node_Str"".equals(jpegQuality) && (pic_size.width >= 3200)) {
    }
 else {
      mParameters.setJpegQuality(JpegEncodingQualityMappings.getQualityNumber(jpegQuality));
      int jpegFileSize=estimateJpegFileSize(pic_size,jpegQuality);
      if (jpegFileSize != mJpegFileSizeEstimation) {
        mJpegFileSizeEstimation=jpegFileSize;
        mHandler.post(new Runnable(){
          @Override public void run(){
            updateRemainingPhotos();
          }
        }
);
      }
    }
  }
  String selectableZoneAf=mPreferences.getString(CameraSettings.KEY_SELECTABLE_ZONE_AF,mActivity.getString(R.string.pref_camera_selectablezoneaf_default));
  List<String> str=mParameters.getSupportedSelectableZoneAf();
  if (CameraUtil.isSupported(selectableZoneAf,mParameters.getSupportedSelectableZoneAf())) {
    mParameters.setSelectableZoneAf(selectableZoneAf);
  }
  if (mParameters.getSupportedDenoiseModes() != null) {
    String Denoise=mPreferences.getString(CameraSettings.KEY_DENOISE,mActivity.getString(R.string.pref_camera_denoise_default));
    mParameters.setDenoise(Denoise);
  }
  String redeyeReduction=mPreferences.getString(CameraSettings.KEY_REDEYE_REDUCTION,mActivity.getString(R.string.pref_camera_redeyereduction_default));
  if (CameraUtil.isSupported(redeyeReduction,mParameters.getSupportedRedeyeReductionModes())) {
    mParameters.setRedeyeReductionMode(redeyeReduction);
  }
  if ((mManual3AEnabled & MANUAL_EXPOSURE) == 0) {
    String iso=mPreferences.getString(CameraSettings.KEY_ISO,mActivity.getString(R.string.pref_camera_iso_default));
    if (CameraUtil.isSupported(iso,mParameters.getSupportedIsoValues())) {
      mParameters.setISOValue(iso);
    }
  }
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (CameraUtil.isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String saturationStr=mPreferences.getString(CameraSettings.KEY_SATURATION,mActivity.getString(R.string.pref_camera_saturation_default));
  int saturation=Integer.parseInt(saturationStr);
  Log.v(TAG,""String_Node_Str"" + saturation);
  if ((0 <= saturation) && (saturation <= mParameters.getMaxSaturation())) {
    mParameters.setSaturation(saturation);
  }
  String contrastStr=mPreferences.getString(CameraSettings.KEY_CONTRAST,mActivity.getString(R.string.pref_camera_contrast_default));
  int contrast=Integer.parseInt(contrastStr);
  Log.v(TAG,""String_Node_Str"" + contrast);
  if ((0 <= contrast) && (contrast <= mParameters.getMaxContrast())) {
    mParameters.setContrast(contrast);
  }
  String sharpnessStr=mPreferences.getString(CameraSettings.KEY_SHARPNESS,mActivity.getString(R.string.pref_camera_sharpness_default));
  int sharpness=Integer.parseInt(sharpnessStr) * (mParameters.getMaxSharpness() / MAX_SHARPNESS_LEVEL);
  Log.v(TAG,""String_Node_Str"" + sharpness);
  if ((0 <= sharpness) && (sharpness <= mParameters.getMaxSharpness())) {
    mParameters.setSharpness(sharpness);
  }
  String faceRC=mPreferences.getString(CameraSettings.KEY_FACE_RECOGNITION,mActivity.getString(R.string.pref_camera_facerc_default));
  Log.v(TAG,""String_Node_Str"" + faceRC);
  if (CameraUtil.isSupported(faceRC,CameraSettings.getSupportedFaceRecognitionModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_FACE_RECOGNITION,faceRC);
  }
  String aeBracketing=mPreferences.getString(CameraSettings.KEY_AE_BRACKET_HDR,mActivity.getString(R.string.pref_camera_ae_bracket_hdr_default));
  Log.v(TAG,""String_Node_Str"" + aeBracketing);
  if (CameraUtil.isSupported(aeBracketing,CameraSettings.getSupportedAEBracketingModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_AE_BRACKETING,aeBracketing);
  }
  String cds=mPreferences.getString(CameraSettings.KEY_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_default));
  if ((mPrevSavedCDS == null) && (cds != null)) {
    mPrevSavedCDS=cds;
  }
  if (CameraUtil.isSupported(cds,CameraSettings.getSupportedCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_CDS_MODE,cds);
  }
  String tnr=mPreferences.getString(CameraSettings.KEY_TNR_MODE,mActivity.getString(R.string.pref_camera_tnr_default));
  if (CameraUtil.isSupported(tnr,CameraSettings.getSupportedTNRModes(mParameters))) {
    if (!tnr.equals(mActivity.getString(R.string.pref_camera_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mActivity.getString(R.string.pref_camera_cds_value_off));
        }
      }
);
      if (cds != null) {
        mPrevSavedCDS=cds;
      }
      isTNREnabled=true;
    }
 else     if (isTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_QC_CDS_MODE,mPrevSavedCDS);
        }
      }
);
      isTNREnabled=false;
    }
    mParameters.set(CameraSettings.KEY_QC_TNR_MODE,tnr);
  }
  String hdrMode=mPreferences.getString(CameraSettings.KEY_HDR_MODE,mActivity.getString(R.string.pref_camera_hdr_mode_default));
  Log.v(TAG,""String_Node_Str"" + hdrMode);
  if (CameraUtil.isSupported(hdrMode,CameraSettings.getSupportedHDRModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_MODE,hdrMode);
  }
  String hdrNeed1x=mPreferences.getString(CameraSettings.KEY_HDR_NEED_1X,mActivity.getString(R.string.pref_camera_hdr_need_1x_default));
  Log.v(TAG,""String_Node_Str"" + hdrNeed1x);
  if (CameraUtil.isSupported(hdrNeed1x,CameraSettings.getSupportedHDRNeed1x(mParameters))) {
    mParameters.set(CameraSettings.KEY_SNAPCAM_HDR_NEED_1X,hdrNeed1x);
  }
  String advancedFeature=mPreferences.getString(CameraSettings.KEY_ADVANCED_FEATURES,mActivity.getString(R.string.pref_camera_advanced_feature_default));
  Log.e(TAG,""String_Node_Str"" + advancedFeature);
  mRefocus=false;
  if (advancedFeature != null) {
    String ubiFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_off);
    String chromaFlashOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_off);
    String optiZoomOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_off);
    String reFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_off);
    String fssrOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_off);
    String truePortraitOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_off);
    String multiTouchFocusOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_off);
    String stillMoreOff=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_off);
    if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on))) {
      qcomUpdateAdvancedFeatures(advancedFeature,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,advancedFeature,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,advancedFeature,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
      mRefocus=true;
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,advancedFeature,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,advancedFeature,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,advancedFeature,multiTouchFocusOff,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,advancedFeature,stillMoreOff);
    }
 else     if (advancedFeature.equals(mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on))) {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,advancedFeature);
    }
 else {
      qcomUpdateAdvancedFeatures(ubiFocusOff,chromaFlashOff,reFocusOff,optiZoomOff,fssrOff,truePortraitOff,multiTouchFocusOff,stillMoreOff);
    }
  }
  if (mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on).equals(advancedFeature)) {
    if (CameraUtil.isSupported(Parameters.FACE_DETECTION_ON,mParameters.getSupportedFaceDetectionModes())) {
      mActivity.runOnUiThread(new Runnable(){
        @Override public void run(){
          mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,Parameters.FACE_DETECTION_ON);
        }
      }
);
      mParameters.setFaceDetectionMode(Parameters.FACE_DETECTION_ON);
      if (mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
    }
  }
 else {
    mActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mUI.overrideSettings(CameraSettings.KEY_FACE_DETECTION,null);
      }
    }
);
    String faceDetection=mPreferences.getString(CameraSettings.KEY_FACE_DETECTION,mActivity.getString(R.string.pref_camera_facedetection_default));
    if (CameraUtil.isSupported(faceDetection,mParameters.getSupportedFaceDetectionModes())) {
      mParameters.setFaceDetectionMode(faceDetection);
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == false) {
        mFaceDetectionEnabled=true;
        startFaceDetection();
      }
      if (faceDetection.equals(""String_Node_Str"") && mFaceDetectionEnabled == true) {
        stopFaceDetection();
        mFaceDetectionEnabled=false;
      }
    }
  }
  String autoExposure=mPreferences.getString(CameraSettings.KEY_AUTOEXPOSURE,mActivity.getString(R.string.pref_camera_autoexposure_default));
  Log.v(TAG,""String_Node_Str"" + autoExposure);
  if (CameraUtil.isSupported(autoExposure,mParameters.getSupportedAutoexposure())) {
    mParameters.setAutoExposure(autoExposure);
  }
  String antiBanding=mPreferences.getString(CameraSettings.KEY_ANTIBANDING,mActivity.getString(R.string.pref_camera_antibanding_default));
  Log.v(TAG,""String_Node_Str"" + antiBanding);
  if (CameraUtil.isSupported(antiBanding,mParameters.getSupportedAntibanding())) {
    mParameters.setAntibanding(antiBanding);
  }
  String zsl=mPreferences.getString(CameraSettings.KEY_ZSL,mActivity.getString(R.string.pref_camera_zsl_default));
  String auto_hdr=mPreferences.getString(CameraSettings.KEY_AUTO_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  if (CameraUtil.isAutoHDRSupported(mParameters)) {
    mParameters.set(""String_Node_Str"",auto_hdr);
    if (auto_hdr.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.VISIBLE);
          }
        }
      }
);
      mParameters.setSceneMode(""String_Node_Str"");
      mCameraDevice.setMetadataCb(mMetaDataCallback);
    }
 else {
      mAutoHdrEnable=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mDrawAutoHDR != null) {
            mDrawAutoHDR.setVisibility(View.INVISIBLE);
          }
        }
      }
);
    }
  }
  mParameters.setZSLMode(zsl);
  if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_ZSL;
    mParameters.setCameraMode(1);
    mFocusManager.setZslEnable(true);
    mParameters.set(KEY_PICTURE_FORMAT,PIXEL_FORMAT_JPEG);
    if (CameraUtil.isSupported(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE,mParameters.getSupportedFocusModes()) && !mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
      mParameters.setFocusMode(Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }
 else     if (mFocusManager.isTouch()) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
 else {
      mFocusManager.overrideFocusMode(mFocusManager.getFocusMode());
    }
    if (!pictureFormat.equals(PIXEL_FORMAT_JPEG)) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_raw,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 else   if (zsl.equals(""String_Node_Str"")) {
    mSnapshotMode=CameraInfo.CAMERA_SUPPORT_MODE_NONZSL;
    mParameters.setCameraMode(0);
    mFocusManager.setZslEnable(false);
    if ((mManual3AEnabled & MANUAL_FOCUS) == 0) {
      mFocusManager.overrideFocusMode(null);
      mParameters.setFocusMode(mFocusManager.getFocusMode());
    }
  }
  String histogram=mPreferences.getString(CameraSettings.KEY_HISTOGRAM,mActivity.getString(R.string.pref_camera_histogram_default));
  if (CameraUtil.isSupported(histogram,mParameters.getSupportedHistogramModes()) && mCameraDevice != null) {
    if (histogram.equals(""String_Node_Str"")) {
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null) {
            mGraphView.setVisibility(View.VISIBLE);
            mGraphView.PreviewChanged();
          }
        }
      }
);
      mCameraDevice.setHistogramMode(mStatsCallback);
      mHiston=true;
    }
 else {
      mHiston=false;
      mActivity.runOnUiThread(new Runnable(){
        public void run(){
          if (mGraphView != null)           mGraphView.setVisibility(View.INVISIBLE);
        }
      }
);
      mCameraDevice.setHistogramMode(null);
    }
  }
  setFlipValue();
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mParameters.setFlashMode(fMode);
  }
}"
38232,"@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}","@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}"
38233,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
  mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}"
38234,"@Override public void onPauseBeforeSuper(){
  mPaused=true;
  Sensor gsensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  if (gsensor != null) {
    mSensorManager.unregisterListener(this,gsensor);
  }
  Sensor msensor=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
  if (msensor != null) {
    mSensorManager.unregisterListener(this,msensor);
  }
  Log.d(TAG,""String_Node_Str"");
  removeIdleHandler();
}","@Override public void onPauseBeforeSuper(){
  mPaused=true;
  Sensor gsensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  if (gsensor != null) {
    mSensorManager.unregisterListener(this,gsensor);
  }
  Sensor msensor=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
  if (msensor != null) {
    mSensorManager.unregisterListener(this,msensor);
  }
  if (mSoundPool != null) {
    mSoundPool.release();
    mSoundPool=null;
  }
  Log.d(TAG,""String_Node_Str"");
  removeIdleHandler();
}"
38235,"public CountDownView(Context context,AttributeSet attrs){
  super(context,attrs);
  mContext=context;
  mCountDownAnim=AnimationUtils.loadAnimation(context,R.anim.count_down_exit);
  if (context.getResources().getBoolean(R.bool.force_count_down_sound)) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_SYSTEM_ENFORCED,0);
  }
 else {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
  }
  mBeepOnce=mSoundPool.load(context,R.raw.beep_once,1);
  mBeepTwice=mSoundPool.load(context,R.raw.beep_twice,1);
}","public CountDownView(Context context,AttributeSet attrs){
  super(context,attrs);
  mContext=context;
  mCountDownAnim=AnimationUtils.loadAnimation(context,R.anim.count_down_exit);
  if (mSoundPool == null) {
    if (context.getResources().getBoolean(R.bool.force_count_down_sound)) {
      mSoundPool=new SoundPool(1,AudioManager.STREAM_SYSTEM_ENFORCED,0);
    }
 else {
      mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    }
    mBeepOnce=mSoundPool.load(context,R.raw.beep_once,1);
    mBeepTwice=mSoundPool.load(context,R.raw.beep_twice,1);
  }
}"
38236,"@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}","@Override public void onResumeAfterSuper(){
  mLastPhotoTakenWithRefocus=false;
  String action=mActivity.getIntent().getAction();
  if (MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA.equals(action) || MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE.equals(action)) {
    Log.v(TAG,""String_Node_Str"");
    mHandler.postDelayed(new Runnable(){
      public void run(){
        onResumeTasks();
      }
    }
,ON_RESUME_TASKS_DELAY_MSEC);
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    onResumeTasks();
  }
  if (mSoundPool == null) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
  }
  mHandler.post(new Runnable(){
    @Override public void run(){
      mActivity.updateStorageSpaceAndHint();
      updateRemainingPhotos();
    }
  }
);
}"
38237,"@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
  mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
  mRefocusSound=mSoundPool.load(mActivity,R.raw.camera_click_x5,1);
}","@Override public void init(CameraActivity activity,View parent){
  mActivity=activity;
  mRootView=parent;
  mPreferences=new ComboPreferences(mActivity);
  CameraSettings.upgradeGlobalPreferences(mPreferences.getGlobal(),activity);
  mCameraId=getPreferredCameraId(mPreferences);
  mContentResolver=mActivity.getContentResolver();
  mIsImageCaptureIntent=isImageCaptureIntent();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mUI=new PhotoUI(activity,this,parent);
  if (mOpenCameraThread == null) {
    mOpenCameraThread=new OpenCameraThread();
    mOpenCameraThread.start();
  }
  initializeControlByIntent();
  mQuickCapture=mActivity.getIntent().getBooleanExtra(EXTRA_QUICK_CAPTURE,false);
  mLocationManager=new LocationManager(mActivity,mUI);
  mSensorManager=(SensorManager)(mActivity.getSystemService(Context.SENSOR_SERVICE));
  brightnessProgressBar=(ProgressBar)mRootView.findViewById(R.id.progress);
  if (brightnessProgressBar instanceof SeekBar) {
    SeekBar seeker=(SeekBar)brightnessProgressBar;
    seeker.setOnSeekBarChangeListener(mSeekListener);
  }
  brightnessProgressBar.setMax(MAXIMUM_BRIGHTNESS);
  mbrightness=mPreferences.getInt(CameraSettings.KEY_BRIGHTNESS,DEFAULT_BRIGHTNESS);
  brightnessProgressBar.setProgress(mbrightness);
  brightnessProgressBar.setVisibility(View.INVISIBLE);
  Storage.setSaveSDCard(mPreferences.getString(CameraSettings.KEY_CAMERA_SAVEPATH,""String_Node_Str"").equals(""String_Node_Str""));
}"
38238,"@Override public void onPauseBeforeSuper(){
  mPaused=true;
  Sensor gsensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  if (gsensor != null) {
    mSensorManager.unregisterListener(this,gsensor);
  }
  Sensor msensor=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
  if (msensor != null) {
    mSensorManager.unregisterListener(this,msensor);
  }
  Log.d(TAG,""String_Node_Str"");
  removeIdleHandler();
}","@Override public void onPauseBeforeSuper(){
  mPaused=true;
  Sensor gsensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  if (gsensor != null) {
    mSensorManager.unregisterListener(this,gsensor);
  }
  Sensor msensor=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
  if (msensor != null) {
    mSensorManager.unregisterListener(this,msensor);
  }
  if (mSoundPool != null) {
    mSoundPool.release();
    mSoundPool=null;
  }
  Log.d(TAG,""String_Node_Str"");
  removeIdleHandler();
}"
38239,"public CountDownView(Context context,AttributeSet attrs){
  super(context,attrs);
  mContext=context;
  mCountDownAnim=AnimationUtils.loadAnimation(context,R.anim.count_down_exit);
  if (context.getResources().getBoolean(R.bool.force_count_down_sound)) {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_SYSTEM_ENFORCED,0);
  }
 else {
    mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
  }
  mBeepOnce=mSoundPool.load(context,R.raw.beep_once,1);
  mBeepTwice=mSoundPool.load(context,R.raw.beep_twice,1);
}","public CountDownView(Context context,AttributeSet attrs){
  super(context,attrs);
  mContext=context;
  mCountDownAnim=AnimationUtils.loadAnimation(context,R.anim.count_down_exit);
  if (mSoundPool == null) {
    if (context.getResources().getBoolean(R.bool.force_count_down_sound)) {
      mSoundPool=new SoundPool(1,AudioManager.STREAM_SYSTEM_ENFORCED,0);
    }
 else {
      mSoundPool=new SoundPool(1,AudioManager.STREAM_NOTIFICATION,0);
    }
    mBeepOnce=mSoundPool.load(context,R.raw.beep_once,1);
    mBeepTwice=mSoundPool.load(context,R.raw.beep_twice,1);
  }
}"
38240,"public boolean isOverPreviewMenu(MotionEvent ev){
  if (mPreviewMenuStatus != PREVIEW_MENU_ON)   return false;
  if (mUI.getPreviewMenuLayout() == null)   return false;
  Rect rec=new Rect();
  mUI.getPreviewMenuLayout().getChildAt(0).getHitRect(rec);
  rec.top+=(int)mUI.getPreviewMenuLayout().getY();
  rec.bottom+=(int)mUI.getPreviewMenuLayout().getY();
  return rec.contains((int)ev.getX(),(int)ev.getY());
}","public boolean isOverPreviewMenu(MotionEvent ev){
  if (mPreviewMenuStatus != PREVIEW_MENU_ON)   return false;
  if (mUI.getPreviewMenuLayout() == null)   return false;
  Rect rec=new Rect();
  mUI.getPreviewMenuLayout().getChildAt(0).getHitRect(rec);
  if (View.LAYOUT_DIRECTION_RTL == TextUtils.getLayoutDirectionFromLocale(Locale.getDefault())) {
    rec.left=mUI.getRootView().getWidth() - (rec.right - rec.left);
    rec.right=mUI.getRootView().getWidth();
  }
  rec.top+=(int)mUI.getPreviewMenuLayout().getY();
  rec.bottom+=(int)mUI.getPreviewMenuLayout().getY();
  return rec.contains((int)ev.getX(),(int)ev.getY());
}"
38241,"@Override public void onShutterButtonFocus(boolean pressed){
  if (mCameraDevice == null || mPaused || mUI.collapseCameraControls() || (mCameraState == SNAPSHOT_IN_PROGRESS) || (mCameraState == PREVIEW_STOPPED) || (null == mFocusManager)) {
    Log.v(TAG,""String_Node_Str"" + mCameraState + ""String_Node_Str""+ mCameraDevice+ ""String_Node_Str""+ mPaused);
    return;
  }
synchronized (mCameraDevice) {
    if (mCameraState == LONGSHOT) {
      mLongshotActive=false;
      mCameraDevice.setLongshot(false);
      mUI.animateCapture(mLastJpegData,mLastJpegOrientation,mMirror);
      if (!mFocusManager.isZslEnabled()) {
        setupPreview();
      }
 else {
        setCameraState(IDLE);
        mFocusManager.resetTouchFocus();
        if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
          mCameraDevice.cancelAutoFocus();
        }
        mUI.resumeFaceDetection();
      }
    }
  }
  if (pressed && !canTakePicture())   return;
  if (pressed) {
    mFocusManager.onShutterDown();
  }
 else {
    if (!mUI.isCountingDown()) {
      mFocusManager.onShutterUp();
    }
  }
}","@Override public void onShutterButtonFocus(boolean pressed){
  if (mCameraDevice == null || mPaused || mUI.collapseCameraControls() || (mCameraState == SNAPSHOT_IN_PROGRESS) || (mCameraState == PREVIEW_STOPPED) || (null == mFocusManager)) {
    Log.v(TAG,""String_Node_Str"" + mCameraState + ""String_Node_Str""+ mCameraDevice+ ""String_Node_Str""+ mPaused);
    return;
  }
synchronized (mCameraDevice) {
    if (mCameraState == LONGSHOT) {
      mLongshotActive=false;
      mCameraDevice.setLongshot(false);
      mUI.animateCapture(mLastJpegData,mLastJpegOrientation,mMirror);
      mLastJpegData=null;
      if (!mFocusManager.isZslEnabled()) {
        setupPreview();
      }
 else {
        setCameraState(IDLE);
        mFocusManager.resetTouchFocus();
        if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
          mCameraDevice.cancelAutoFocus();
        }
        mUI.resumeFaceDetection();
      }
    }
  }
  if (pressed && !canTakePicture())   return;
  if (pressed) {
    mFocusManager.onShutterDown();
  }
 else {
    if (!mUI.isCountingDown()) {
      mFocusManager.onShutterUp();
    }
  }
}"
38242,"private String getSDCardStorageState(){
  try {
    return mMountService.getVolumeState(mVolume.getPath());
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"" + e);
    return Environment.MEDIA_REMOVED;
  }
}","private String getSDCardStorageState(){
  return mVolume.getState();
}"
38243,"@Override public void onShutterButtonFocus(boolean pressed){
  if (mCameraDevice == null || mPaused || mUI.collapseCameraControls() || (mCameraState == SNAPSHOT_IN_PROGRESS) || (mCameraState == PREVIEW_STOPPED) || (null == mFocusManager)) {
    Log.v(TAG,""String_Node_Str"" + mCameraState + ""String_Node_Str""+ mCameraDevice+ ""String_Node_Str""+ mPaused);
    return;
  }
synchronized (mCameraDevice) {
    if (mCameraState == LONGSHOT) {
      mLongshotActive=false;
      mCameraDevice.setLongshot(false);
      mUI.animateCapture(mLastJpegData,mLastJpegOrientation,mMirror);
      if (!mFocusManager.isZslEnabled()) {
        setupPreview();
      }
 else {
        setCameraState(IDLE);
        mFocusManager.resetTouchFocus();
        if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
          mCameraDevice.cancelAutoFocus();
        }
        mUI.resumeFaceDetection();
      }
    }
  }
  if (pressed && !canTakePicture())   return;
  if (pressed) {
    mFocusManager.onShutterDown();
  }
 else {
    if (!mUI.isCountingDown()) {
      mFocusManager.onShutterUp();
    }
  }
}","@Override public void onShutterButtonFocus(boolean pressed){
  if (mCameraDevice == null || mPaused || mUI.collapseCameraControls() || (mCameraState == SNAPSHOT_IN_PROGRESS) || (mCameraState == PREVIEW_STOPPED) || (null == mFocusManager)) {
    Log.v(TAG,""String_Node_Str"" + mCameraState + ""String_Node_Str""+ mCameraDevice+ ""String_Node_Str""+ mPaused);
    return;
  }
synchronized (mCameraDevice) {
    if (mCameraState == LONGSHOT) {
      mLongshotActive=false;
      mCameraDevice.setLongshot(false);
      mUI.animateCapture(mLastJpegData,mLastJpegOrientation,mMirror);
      mLastJpegData=null;
      if (!mFocusManager.isZslEnabled()) {
        setupPreview();
      }
 else {
        setCameraState(IDLE);
        mFocusManager.resetTouchFocus();
        if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
          mCameraDevice.cancelAutoFocus();
        }
        mUI.resumeFaceDetection();
      }
    }
  }
  if (pressed && !canTakePicture())   return;
  if (pressed) {
    mFocusManager.onShutterDown();
  }
 else {
    if (!mUI.isCountingDown()) {
      mFocusManager.onShutterUp();
    }
  }
}"
38244,"private void qcomSetCameraParameters(){
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String disMode=mPreferences.getString(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_default));
  Log.v(TAG,""String_Node_Str"" + disMode);
  mIsDISEnabled=disMode.equals(""String_Node_Str"");
  if (is4KEnabled()) {
    if (isSupported(mActivity.getString(R.string.pref_camera_dis_value_disable),CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,mActivity.getString(R.string.pref_camera_dis_value_disable));
      mUI.overrideSettings(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_value_disable));
      RotateTextToast.makeText(mActivity,R.string.video_quality_4k_disable_IS,Toast.LENGTH_LONG).show();
    }
 else {
      Log.e(TAG,""String_Node_Str"" + mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
  }
 else {
    if (isSupported(disMode,CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,disMode);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + disMode);
    }
  }
  if (mDefaultAntibanding == null) {
    mDefaultAntibanding=mParameters.getAntibanding();
    Log.d(TAG,""String_Node_Str"" + mDefaultAntibanding);
  }
  if (disMode.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    if (isSupported(Parameters.ANTIBANDING_AUTO,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(Parameters.ANTIBANDING_AUTO);
    }
  }
 else {
    if (isSupported(mDefaultAntibanding,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(mDefaultAntibanding);
    }
  }
  Log.d(TAG,""String_Node_Str"" + mParameters.getAntibanding());
  mUnsupportedHFRVideoSize=false;
  mUnsupportedHFRVideoCodec=false;
  mUnsupportedHSRVideoSize=false;
  String yv12formatset=SystemProperties.get(""String_Node_Str"");
  if (yv12formatset.equals(""String_Node_Str"")) {
    Log.v(TAG,""String_Node_Str"");
    mParameters.setPreviewFormat(ImageFormat.YV12);
  }
  mParameters.set(KEY_PREVIEW_FORMAT,FORMAT_NV21);
  Log.v(TAG,""String_Node_Str"");
  String HighFrameRate=mPreferences.getString(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,mActivity.getString(R.string.pref_camera_hfr_default));
  if ((""String_Node_Str"".equals(HighFrameRate.substring(0,3))) || (""String_Node_Str"".equals(HighFrameRate.substring(0,3)))) {
    String hfrRate=HighFrameRate.substring(3);
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mUnsupportedHFRVideoSize=true;
    }
 else {
      mUnsupportedHSRVideoSize=true;
    }
    String hfrsize=videoWidth + ""String_Node_Str"" + videoHeight;
    Log.v(TAG,""String_Node_Str"" + hfrsize);
    try {
      Size size=null;
      if (isSupported(hfrRate,mParameters.getSupportedVideoHighFrameRateModes())) {
        int index=mParameters.getSupportedVideoHighFrameRateModes().indexOf(hfrRate);
        size=mParameters.getSupportedHfrSizes().get(index);
      }
      if (size != null) {
        if (videoWidth <= size.width && videoHeight <= size.height) {
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=false;
          }
 else {
            mUnsupportedHSRVideoSize=false;
          }
          Log.v(TAG,""String_Node_Str"");
        }
      }
    }
 catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    int hfrFps=Integer.parseInt(hfrRate);
    int inputBitrate=videoWidth * videoHeight * hfrFps;
    List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
    for (    VideoEncoderCap videoEncoder : videoEncoders) {
      if (videoEncoder.mCodec == mVideoEncoder) {
        int maxBitrate=(videoEncoder.mMaxHFRFrameWidth * videoEncoder.mMaxHFRFrameHeight * videoEncoder.mMaxHFRMode);
        if (inputBitrate > maxBitrate) {
          Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ HighFrameRate+ ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMaxHFRFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRMode);
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=true;
          }
 else {
            mUnsupportedHSRVideoSize=true;
          }
        }
        break;
      }
    }
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      if (mUnsupportedHFRVideoSize) {
        mParameters.setVideoHighFrameRate(""String_Node_Str"");
        Log.v(TAG,""String_Node_Str"");
      }
 else {
        mParameters.setVideoHighFrameRate(hfrRate);
      }
    }
 else {
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      if (mUnsupportedHSRVideoSize) {
        Log.v(TAG,""String_Node_Str"");
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      }
 else {
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,hfrRate);
      }
    }
    if (mVideoEncoder != MediaRecorder.VideoEncoder.H264) {
      mUnsupportedHFRVideoCodec=true;
    }
  }
 else {
    mParameters.setVideoHighFrameRate(""String_Node_Str"");
    mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
  }
  setFlipValue();
  String video_cds=mPreferences.getString(CameraSettings.KEY_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_default));
  if ((mPrevSavedVideoCDS == null) && (video_cds != null)) {
    mPrevSavedVideoCDS=video_cds;
  }
  if (mOverrideCDS) {
    video_cds=mPrevSavedVideoCDS;
    mOverrideCDS=false;
  }
  if (CameraUtil.isSupported(video_cds,CameraSettings.getSupportedVideoCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,video_cds);
  }
  String video_tnr=mPreferences.getString(CameraSettings.KEY_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_default));
  if (CameraUtil.isSupported(video_tnr,CameraSettings.getSupportedVideoTNRModes(mParameters))) {
    if (!video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      if (!mIsVideoCDSUpdated) {
        if (video_cds != null) {
          mPrevSavedVideoCDS=mTempVideoCDS;
        }
        mIsVideoTNREnabled=true;
        mIsVideoCDSUpdated=true;
      }
    }
 else     if (mIsVideoTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mIsVideoTNREnabled=false;
      mIsVideoCDSUpdated=false;
      mOverrideCDS=true;
    }
 else {
      mTempVideoCDS=video_cds;
    }
    mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
    mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
  }
  String seeMoreMode=mPreferences.getString(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_default));
  Log.v(TAG,""String_Node_Str"" + seeMoreMode);
  if (isSupported(seeMoreMode,CameraSettings.getSupportedSeeMoreModes(mParameters))) {
    if (is4KEnabled() && seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on))) {
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      mUI.overrideSettings(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      Toast.makeText(mActivity,R.string.video_quality_4k_disable_SeeMore,Toast.LENGTH_LONG).show();
    }
 else {
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_cds.equals(mActivity.getString(R.string.pref_camera_video_cds_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        Toast.makeText(mActivity,R.string.disable_CDS_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        Toast.makeText(mActivity,R.string.disable_TNR_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,seeMoreMode);
    }
  }
  String videoHDR=mPreferences.getString(CameraSettings.KEY_VIDEO_HDR,mActivity.getString(R.string.pref_camera_video_hdr_default));
  Log.v(TAG,""String_Node_Str"" + videoHDR);
  if (isSupported(videoHDR,mParameters.getSupportedVideoHDRModes())) {
    mParameters.setVideoHDRMode(videoHDR);
  }
 else   mParameters.setVideoHDRMode(""String_Node_Str"");
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  String hdr=mParameters.getVideoHDRMode();
  if (((hfr != null) && (!hfr.equals(""String_Node_Str""))) || ((hsr != null) && (!hsr.equals(""String_Node_Str"")))) {
    String frameIntervalStr=mPreferences.getString(CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,mActivity.getString(R.string.pref_video_time_lapse_frame_interval_default));
    int timeLapseInterval=Integer.parseInt(frameIntervalStr);
    if ((timeLapseInterval != 0) || (disMode.equals(""String_Node_Str"")) || ((hdr != null) && (!hdr.equals(""String_Node_Str"")))) {
      Log.v(TAG,""String_Node_Str"");
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,""String_Node_Str"");
    }
  }
  Size biggestSize=mParameters.getSupportedPictureSizes().get(0);
  if (biggestSize.width <= videoWidth || biggestSize.height <= videoHeight) {
    if (disMode.equals(""String_Node_Str"")) {
      Log.v(TAG,""String_Node_Str"");
      RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_dis,Toast.LENGTH_LONG).show();
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_DIS,""String_Node_Str"");
      mIsDISEnabled=false;
    }
  }
  String videoRotation=mPreferences.getString(CameraSettings.KEY_VIDEO_ROTATION,mActivity.getString(R.string.pref_camera_video_rotation_default));
  if (isSupported(videoRotation,mParameters.getSupportedVideoRotationValues())) {
    mParameters.setVideoRotation(videoRotation);
  }
  updatePowerMode();
}","private void qcomSetCameraParameters(){
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String disMode=mPreferences.getString(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_default));
  Log.v(TAG,""String_Node_Str"" + disMode);
  mIsDISEnabled=disMode.equals(""String_Node_Str"");
  if (is4KEnabled()) {
    if (isSupported(mActivity.getString(R.string.pref_camera_dis_value_disable),CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,mActivity.getString(R.string.pref_camera_dis_value_disable));
      mUI.overrideSettings(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
 else {
      Log.e(TAG,""String_Node_Str"" + mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
  }
 else {
    if (isSupported(disMode,CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,disMode);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + disMode);
    }
  }
  if (mDefaultAntibanding == null) {
    mDefaultAntibanding=mParameters.getAntibanding();
    Log.d(TAG,""String_Node_Str"" + mDefaultAntibanding);
  }
  if (disMode.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    if (isSupported(Parameters.ANTIBANDING_AUTO,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(Parameters.ANTIBANDING_AUTO);
    }
  }
 else {
    if (isSupported(mDefaultAntibanding,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(mDefaultAntibanding);
    }
  }
  Log.d(TAG,""String_Node_Str"" + mParameters.getAntibanding());
  mUnsupportedHFRVideoSize=false;
  mUnsupportedHFRVideoCodec=false;
  mUnsupportedHSRVideoSize=false;
  String yv12formatset=SystemProperties.get(""String_Node_Str"");
  if (yv12formatset.equals(""String_Node_Str"")) {
    Log.v(TAG,""String_Node_Str"");
    mParameters.setPreviewFormat(ImageFormat.YV12);
  }
  mParameters.set(KEY_PREVIEW_FORMAT,FORMAT_NV21);
  Log.v(TAG,""String_Node_Str"");
  String HighFrameRate=mPreferences.getString(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,mActivity.getString(R.string.pref_camera_hfr_default));
  if ((""String_Node_Str"".equals(HighFrameRate.substring(0,3))) || (""String_Node_Str"".equals(HighFrameRate.substring(0,3)))) {
    String hfrRate=HighFrameRate.substring(3);
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mUnsupportedHFRVideoSize=true;
    }
 else {
      mUnsupportedHSRVideoSize=true;
    }
    String hfrsize=videoWidth + ""String_Node_Str"" + videoHeight;
    Log.v(TAG,""String_Node_Str"" + hfrsize);
    try {
      Size size=null;
      if (isSupported(hfrRate,mParameters.getSupportedVideoHighFrameRateModes())) {
        int index=mParameters.getSupportedVideoHighFrameRateModes().indexOf(hfrRate);
        size=mParameters.getSupportedHfrSizes().get(index);
      }
      if (size != null) {
        if (videoWidth <= size.width && videoHeight <= size.height) {
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=false;
          }
 else {
            mUnsupportedHSRVideoSize=false;
          }
          Log.v(TAG,""String_Node_Str"");
        }
      }
    }
 catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    int hfrFps=Integer.parseInt(hfrRate);
    int inputBitrate=videoWidth * videoHeight * hfrFps;
    List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
    for (    VideoEncoderCap videoEncoder : videoEncoders) {
      if (videoEncoder.mCodec == mVideoEncoder) {
        int maxBitrate=(videoEncoder.mMaxHFRFrameWidth * videoEncoder.mMaxHFRFrameHeight * videoEncoder.mMaxHFRMode);
        if (inputBitrate > maxBitrate) {
          Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ HighFrameRate+ ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMaxHFRFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRMode);
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=true;
          }
 else {
            mUnsupportedHSRVideoSize=true;
          }
        }
        break;
      }
    }
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      if (mUnsupportedHFRVideoSize) {
        mParameters.setVideoHighFrameRate(""String_Node_Str"");
        Log.v(TAG,""String_Node_Str"");
      }
 else {
        mParameters.setVideoHighFrameRate(hfrRate);
      }
    }
 else {
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      if (mUnsupportedHSRVideoSize) {
        Log.v(TAG,""String_Node_Str"");
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      }
 else {
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,hfrRate);
      }
    }
    if (mVideoEncoder != MediaRecorder.VideoEncoder.H264) {
      mUnsupportedHFRVideoCodec=true;
    }
  }
 else {
    mParameters.setVideoHighFrameRate(""String_Node_Str"");
    mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
  }
  setFlipValue();
  String video_cds=mPreferences.getString(CameraSettings.KEY_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_default));
  if ((mPrevSavedVideoCDS == null) && (video_cds != null)) {
    mPrevSavedVideoCDS=video_cds;
  }
  if (mOverrideCDS) {
    video_cds=mPrevSavedVideoCDS;
    mOverrideCDS=false;
  }
  if (CameraUtil.isSupported(video_cds,CameraSettings.getSupportedVideoCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,video_cds);
  }
  String video_tnr=mPreferences.getString(CameraSettings.KEY_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_default));
  if (CameraUtil.isSupported(video_tnr,CameraSettings.getSupportedVideoTNRModes(mParameters))) {
    if (!video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      if (!mIsVideoCDSUpdated) {
        if (video_cds != null) {
          mPrevSavedVideoCDS=mTempVideoCDS;
        }
        mIsVideoTNREnabled=true;
        mIsVideoCDSUpdated=true;
      }
    }
 else     if (mIsVideoTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mIsVideoTNREnabled=false;
      mIsVideoCDSUpdated=false;
      mOverrideCDS=true;
    }
 else {
      mTempVideoCDS=video_cds;
    }
    mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
    mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
  }
  String seeMoreMode=mPreferences.getString(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_default));
  Log.v(TAG,""String_Node_Str"" + seeMoreMode);
  if (isSupported(seeMoreMode,CameraSettings.getSupportedSeeMoreModes(mParameters))) {
    if (is4KEnabled() && seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on))) {
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      mUI.overrideSettings(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      Toast.makeText(mActivity,R.string.video_quality_4k_disable_SeeMore,Toast.LENGTH_LONG).show();
    }
 else {
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_cds.equals(mActivity.getString(R.string.pref_camera_video_cds_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        Toast.makeText(mActivity,R.string.disable_CDS_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        Toast.makeText(mActivity,R.string.disable_TNR_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,seeMoreMode);
    }
  }
  String videoHDR=mPreferences.getString(CameraSettings.KEY_VIDEO_HDR,mActivity.getString(R.string.pref_camera_video_hdr_default));
  Log.v(TAG,""String_Node_Str"" + videoHDR);
  if (isSupported(videoHDR,mParameters.getSupportedVideoHDRModes())) {
    mParameters.setVideoHDRMode(videoHDR);
  }
 else   mParameters.setVideoHDRMode(""String_Node_Str"");
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  String hdr=mParameters.getVideoHDRMode();
  if (((hfr != null) && (!hfr.equals(""String_Node_Str""))) || ((hsr != null) && (!hsr.equals(""String_Node_Str"")))) {
    String frameIntervalStr=mPreferences.getString(CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,mActivity.getString(R.string.pref_video_time_lapse_frame_interval_default));
    int timeLapseInterval=Integer.parseInt(frameIntervalStr);
    if ((timeLapseInterval != 0) || (disMode.equals(""String_Node_Str"")) || ((hdr != null) && (!hdr.equals(""String_Node_Str"")))) {
      Log.v(TAG,""String_Node_Str"");
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,""String_Node_Str"");
    }
  }
  Size biggestSize=mParameters.getSupportedPictureSizes().get(0);
  if (biggestSize.width <= videoWidth || biggestSize.height <= videoHeight) {
    if (disMode.equals(""String_Node_Str"")) {
      Log.v(TAG,""String_Node_Str"");
      RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_dis,Toast.LENGTH_LONG).show();
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_DIS,""String_Node_Str"");
      mIsDISEnabled=false;
    }
  }
  String videoRotation=mPreferences.getString(CameraSettings.KEY_VIDEO_ROTATION,mActivity.getString(R.string.pref_camera_video_rotation_default));
  if (isSupported(videoRotation,mParameters.getSupportedVideoRotationValues())) {
    mParameters.setVideoRotation(videoRotation);
  }
  updatePowerMode();
}"
38245,"public boolean isOverPreviewMenu(MotionEvent ev){
  if (mPreviewMenuStatus != PREVIEW_MENU_ON)   return false;
  if (mUI.getPreviewMenuLayout() == null)   return false;
  Rect rec=new Rect();
  mUI.getPreviewMenuLayout().getChildAt(0).getHitRect(rec);
  rec.top+=(int)mUI.getPreviewMenuLayout().getY();
  rec.bottom+=(int)mUI.getPreviewMenuLayout().getY();
  return rec.contains((int)ev.getX(),(int)ev.getY());
}","public boolean isOverPreviewMenu(MotionEvent ev){
  if (mPreviewMenuStatus != PREVIEW_MENU_ON)   return false;
  if (mUI.getPreviewMenuLayout() == null)   return false;
  Rect rec=new Rect();
  mUI.getPreviewMenuLayout().getChildAt(0).getHitRect(rec);
  if (View.LAYOUT_DIRECTION_RTL == TextUtils.getLayoutDirectionFromLocale(Locale.getDefault())) {
    rec.left=mUI.getRootView().getWidth() - (rec.right - rec.left);
    rec.right=mUI.getRootView().getWidth();
  }
  rec.top+=(int)mUI.getPreviewMenuLayout().getY();
  rec.bottom+=(int)mUI.getPreviewMenuLayout().getY();
  return rec.contains((int)ev.getX(),(int)ev.getY());
}"
38246,"private void qcomSetCameraParameters(){
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String disMode=mPreferences.getString(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_default));
  Log.v(TAG,""String_Node_Str"" + disMode);
  mIsDISEnabled=disMode.equals(""String_Node_Str"");
  if (is4KEnabled()) {
    if (isSupported(mActivity.getString(R.string.pref_camera_dis_value_disable),CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,mActivity.getString(R.string.pref_camera_dis_value_disable));
      mUI.overrideSettings(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_value_disable));
      RotateTextToast.makeText(mActivity,R.string.video_quality_4k_disable_IS,Toast.LENGTH_LONG).show();
    }
 else {
      Log.e(TAG,""String_Node_Str"" + mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
  }
 else {
    if (isSupported(disMode,CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,disMode);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + disMode);
    }
  }
  if (mDefaultAntibanding == null) {
    mDefaultAntibanding=mParameters.getAntibanding();
    Log.d(TAG,""String_Node_Str"" + mDefaultAntibanding);
  }
  if (disMode.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    if (isSupported(Parameters.ANTIBANDING_AUTO,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(Parameters.ANTIBANDING_AUTO);
    }
  }
 else {
    if (isSupported(mDefaultAntibanding,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(mDefaultAntibanding);
    }
  }
  Log.d(TAG,""String_Node_Str"" + mParameters.getAntibanding());
  mUnsupportedHFRVideoSize=false;
  mUnsupportedHFRVideoCodec=false;
  mUnsupportedHSRVideoSize=false;
  String yv12formatset=SystemProperties.get(""String_Node_Str"");
  if (yv12formatset.equals(""String_Node_Str"")) {
    Log.v(TAG,""String_Node_Str"");
    mParameters.setPreviewFormat(ImageFormat.YV12);
  }
  mParameters.set(KEY_PREVIEW_FORMAT,FORMAT_NV21);
  Log.v(TAG,""String_Node_Str"");
  String HighFrameRate=mPreferences.getString(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,mActivity.getString(R.string.pref_camera_hfr_default));
  if ((""String_Node_Str"".equals(HighFrameRate.substring(0,3))) || (""String_Node_Str"".equals(HighFrameRate.substring(0,3)))) {
    String hfrRate=HighFrameRate.substring(3);
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mUnsupportedHFRVideoSize=true;
    }
 else {
      mUnsupportedHSRVideoSize=true;
    }
    String hfrsize=videoWidth + ""String_Node_Str"" + videoHeight;
    Log.v(TAG,""String_Node_Str"" + hfrsize);
    try {
      Size size=null;
      if (isSupported(hfrRate,mParameters.getSupportedVideoHighFrameRateModes())) {
        int index=mParameters.getSupportedVideoHighFrameRateModes().indexOf(hfrRate);
        size=mParameters.getSupportedHfrSizes().get(index);
      }
      if (size != null) {
        if (videoWidth <= size.width && videoHeight <= size.height) {
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=false;
          }
 else {
            mUnsupportedHSRVideoSize=false;
          }
          Log.v(TAG,""String_Node_Str"");
        }
      }
    }
 catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    int hfrFps=Integer.parseInt(hfrRate);
    int inputBitrate=videoWidth * videoHeight * hfrFps;
    List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
    for (    VideoEncoderCap videoEncoder : videoEncoders) {
      if (videoEncoder.mCodec == mVideoEncoder) {
        int maxBitrate=(videoEncoder.mMaxHFRFrameWidth * videoEncoder.mMaxHFRFrameHeight * videoEncoder.mMaxHFRMode);
        if (inputBitrate > maxBitrate) {
          Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ HighFrameRate+ ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMaxHFRFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRMode);
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=true;
          }
 else {
            mUnsupportedHSRVideoSize=true;
          }
        }
        break;
      }
    }
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      if (mUnsupportedHFRVideoSize) {
        mParameters.setVideoHighFrameRate(""String_Node_Str"");
        Log.v(TAG,""String_Node_Str"");
      }
 else {
        mParameters.setVideoHighFrameRate(hfrRate);
      }
    }
 else {
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      if (mUnsupportedHSRVideoSize) {
        Log.v(TAG,""String_Node_Str"");
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      }
 else {
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,hfrRate);
      }
    }
    if (mVideoEncoder != MediaRecorder.VideoEncoder.H264) {
      mUnsupportedHFRVideoCodec=true;
    }
  }
 else {
    mParameters.setVideoHighFrameRate(""String_Node_Str"");
    mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
  }
  setFlipValue();
  String video_cds=mPreferences.getString(CameraSettings.KEY_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_default));
  if ((mPrevSavedVideoCDS == null) && (video_cds != null)) {
    mPrevSavedVideoCDS=video_cds;
  }
  if (mOverrideCDS) {
    video_cds=mPrevSavedVideoCDS;
    mOverrideCDS=false;
  }
  if (CameraUtil.isSupported(video_cds,CameraSettings.getSupportedVideoCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,video_cds);
  }
  String video_tnr=mPreferences.getString(CameraSettings.KEY_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_default));
  if (CameraUtil.isSupported(video_tnr,CameraSettings.getSupportedVideoTNRModes(mParameters))) {
    if (!video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      if (!mIsVideoCDSUpdated) {
        if (video_cds != null) {
          mPrevSavedVideoCDS=mTempVideoCDS;
        }
        mIsVideoTNREnabled=true;
        mIsVideoCDSUpdated=true;
      }
    }
 else     if (mIsVideoTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mIsVideoTNREnabled=false;
      mIsVideoCDSUpdated=false;
      mOverrideCDS=true;
    }
 else {
      mTempVideoCDS=video_cds;
    }
    mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
    mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
  }
  String seeMoreMode=mPreferences.getString(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_default));
  Log.v(TAG,""String_Node_Str"" + seeMoreMode);
  if (isSupported(seeMoreMode,CameraSettings.getSupportedSeeMoreModes(mParameters))) {
    if (is4KEnabled() && seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on))) {
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      mUI.overrideSettings(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      Toast.makeText(mActivity,R.string.video_quality_4k_disable_SeeMore,Toast.LENGTH_LONG).show();
    }
 else {
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_cds.equals(mActivity.getString(R.string.pref_camera_video_cds_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        Toast.makeText(mActivity,R.string.disable_CDS_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        Toast.makeText(mActivity,R.string.disable_TNR_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,seeMoreMode);
    }
  }
  String videoHDR=mPreferences.getString(CameraSettings.KEY_VIDEO_HDR,mActivity.getString(R.string.pref_camera_video_hdr_default));
  Log.v(TAG,""String_Node_Str"" + videoHDR);
  if (isSupported(videoHDR,mParameters.getSupportedVideoHDRModes())) {
    mParameters.setVideoHDRMode(videoHDR);
  }
 else   mParameters.setVideoHDRMode(""String_Node_Str"");
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  String hdr=mParameters.getVideoHDRMode();
  if (((hfr != null) && (!hfr.equals(""String_Node_Str""))) || ((hsr != null) && (!hsr.equals(""String_Node_Str"")))) {
    String frameIntervalStr=mPreferences.getString(CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,mActivity.getString(R.string.pref_video_time_lapse_frame_interval_default));
    int timeLapseInterval=Integer.parseInt(frameIntervalStr);
    if ((timeLapseInterval != 0) || (disMode.equals(""String_Node_Str"")) || ((hdr != null) && (!hdr.equals(""String_Node_Str"")))) {
      Log.v(TAG,""String_Node_Str"");
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,""String_Node_Str"");
    }
  }
  Size biggestSize=mParameters.getSupportedPictureSizes().get(0);
  if (biggestSize.width <= videoWidth || biggestSize.height <= videoHeight) {
    if (disMode.equals(""String_Node_Str"")) {
      Log.v(TAG,""String_Node_Str"");
      RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_dis,Toast.LENGTH_LONG).show();
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_DIS,""String_Node_Str"");
      mIsDISEnabled=false;
    }
  }
  String videoRotation=mPreferences.getString(CameraSettings.KEY_VIDEO_ROTATION,mActivity.getString(R.string.pref_camera_video_rotation_default));
  if (isSupported(videoRotation,mParameters.getSupportedVideoRotationValues())) {
    mParameters.setVideoRotation(videoRotation);
  }
  updatePowerMode();
}","private void qcomSetCameraParameters(){
  String colorEffect=mPreferences.getString(CameraSettings.KEY_COLOR_EFFECT,mActivity.getString(R.string.pref_camera_coloreffect_default));
  Log.v(TAG,""String_Node_Str"" + colorEffect);
  if (isSupported(colorEffect,mParameters.getSupportedColorEffects())) {
    mParameters.setColorEffect(colorEffect);
  }
  String disMode=mPreferences.getString(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_default));
  Log.v(TAG,""String_Node_Str"" + disMode);
  mIsDISEnabled=disMode.equals(""String_Node_Str"");
  if (is4KEnabled()) {
    if (isSupported(mActivity.getString(R.string.pref_camera_dis_value_disable),CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,mActivity.getString(R.string.pref_camera_dis_value_disable));
      mUI.overrideSettings(CameraSettings.KEY_DIS,mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
 else {
      Log.e(TAG,""String_Node_Str"" + mActivity.getString(R.string.pref_camera_dis_value_disable));
    }
  }
 else {
    if (isSupported(disMode,CameraSettings.getSupportedDISModes(mParameters))) {
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,disMode);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + disMode);
    }
  }
  if (mDefaultAntibanding == null) {
    mDefaultAntibanding=mParameters.getAntibanding();
    Log.d(TAG,""String_Node_Str"" + mDefaultAntibanding);
  }
  if (disMode.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    if (isSupported(Parameters.ANTIBANDING_AUTO,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(Parameters.ANTIBANDING_AUTO);
    }
  }
 else {
    if (isSupported(mDefaultAntibanding,mParameters.getSupportedAntibanding())) {
      mParameters.setAntibanding(mDefaultAntibanding);
    }
  }
  Log.d(TAG,""String_Node_Str"" + mParameters.getAntibanding());
  mUnsupportedHFRVideoSize=false;
  mUnsupportedHFRVideoCodec=false;
  mUnsupportedHSRVideoSize=false;
  String yv12formatset=SystemProperties.get(""String_Node_Str"");
  if (yv12formatset.equals(""String_Node_Str"")) {
    Log.v(TAG,""String_Node_Str"");
    mParameters.setPreviewFormat(ImageFormat.YV12);
  }
  mParameters.set(KEY_PREVIEW_FORMAT,FORMAT_NV21);
  Log.v(TAG,""String_Node_Str"");
  String HighFrameRate=mPreferences.getString(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,mActivity.getString(R.string.pref_camera_hfr_default));
  if ((""String_Node_Str"".equals(HighFrameRate.substring(0,3))) || (""String_Node_Str"".equals(HighFrameRate.substring(0,3)))) {
    String hfrRate=HighFrameRate.substring(3);
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mUnsupportedHFRVideoSize=true;
    }
 else {
      mUnsupportedHSRVideoSize=true;
    }
    String hfrsize=videoWidth + ""String_Node_Str"" + videoHeight;
    Log.v(TAG,""String_Node_Str"" + hfrsize);
    try {
      Size size=null;
      if (isSupported(hfrRate,mParameters.getSupportedVideoHighFrameRateModes())) {
        int index=mParameters.getSupportedVideoHighFrameRateModes().indexOf(hfrRate);
        size=mParameters.getSupportedHfrSizes().get(index);
      }
      if (size != null) {
        if (videoWidth <= size.width && videoHeight <= size.height) {
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=false;
          }
 else {
            mUnsupportedHSRVideoSize=false;
          }
          Log.v(TAG,""String_Node_Str"");
        }
      }
    }
 catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    int hfrFps=Integer.parseInt(hfrRate);
    int inputBitrate=videoWidth * videoHeight * hfrFps;
    List<VideoEncoderCap> videoEncoders=EncoderCapabilities.getVideoEncoders();
    for (    VideoEncoderCap videoEncoder : videoEncoders) {
      if (videoEncoder.mCodec == mVideoEncoder) {
        int maxBitrate=(videoEncoder.mMaxHFRFrameWidth * videoEncoder.mMaxHFRFrameHeight * videoEncoder.mMaxHFRMode);
        if (inputBitrate > maxBitrate) {
          Log.e(TAG,""String_Node_Str"" + mVideoEncoder + ""String_Node_Str""+ HighFrameRate+ ""String_Node_Str""+ videoWidth+ ""String_Node_Str""+ videoHeight+ ""String_Node_Str"");
          Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + videoEncoder.mMaxHFRFrameWidth + ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRFrameHeight+ ""String_Node_Str""+ ""String_Node_Str""+ videoEncoder.mMaxHFRMode);
          if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
            mUnsupportedHFRVideoSize=true;
          }
 else {
            mUnsupportedHSRVideoSize=true;
          }
        }
        break;
      }
    }
    if (""String_Node_Str"".equals(HighFrameRate.substring(0,3))) {
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      if (mUnsupportedHFRVideoSize) {
        mParameters.setVideoHighFrameRate(""String_Node_Str"");
        Log.v(TAG,""String_Node_Str"");
      }
 else {
        mParameters.setVideoHighFrameRate(hfrRate);
      }
    }
 else {
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      if (mUnsupportedHSRVideoSize) {
        Log.v(TAG,""String_Node_Str"");
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      }
 else {
        mParameters.set(CameraSettings.KEY_VIDEO_HSR,hfrRate);
      }
    }
    if (mVideoEncoder != MediaRecorder.VideoEncoder.H264) {
      mUnsupportedHFRVideoCodec=true;
    }
  }
 else {
    mParameters.setVideoHighFrameRate(""String_Node_Str"");
    mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
  }
  setFlipValue();
  String video_cds=mPreferences.getString(CameraSettings.KEY_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_default));
  if ((mPrevSavedVideoCDS == null) && (video_cds != null)) {
    mPrevSavedVideoCDS=video_cds;
  }
  if (mOverrideCDS) {
    video_cds=mPrevSavedVideoCDS;
    mOverrideCDS=false;
  }
  if (CameraUtil.isSupported(video_cds,CameraSettings.getSupportedVideoCDSModes(mParameters))) {
    mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,video_cds);
  }
  String video_tnr=mPreferences.getString(CameraSettings.KEY_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_default));
  if (CameraUtil.isSupported(video_tnr,CameraSettings.getSupportedVideoTNRModes(mParameters))) {
    if (!video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_off))) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
      if (!mIsVideoCDSUpdated) {
        if (video_cds != null) {
          mPrevSavedVideoCDS=mTempVideoCDS;
        }
        mIsVideoTNREnabled=true;
        mIsVideoCDSUpdated=true;
      }
    }
 else     if (mIsVideoTNREnabled) {
      mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mPrevSavedVideoCDS);
      mIsVideoTNREnabled=false;
      mIsVideoCDSUpdated=false;
      mOverrideCDS=true;
    }
 else {
      mTempVideoCDS=video_cds;
    }
    mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
    mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,video_tnr);
  }
  String seeMoreMode=mPreferences.getString(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_default));
  Log.v(TAG,""String_Node_Str"" + seeMoreMode);
  if (isSupported(seeMoreMode,CameraSettings.getSupportedSeeMoreModes(mParameters))) {
    if (is4KEnabled() && seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on))) {
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      mUI.overrideSettings(CameraSettings.KEY_SEE_MORE,mActivity.getString(R.string.pref_camera_see_more_value_off));
      Toast.makeText(mActivity,R.string.video_quality_4k_disable_SeeMore,Toast.LENGTH_LONG).show();
    }
 else {
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_cds.equals(mActivity.getString(R.string.pref_camera_video_cds_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_CDS_MODE,mActivity.getString(R.string.pref_camera_video_cds_value_off));
        Toast.makeText(mActivity,R.string.disable_CDS_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      if (seeMoreMode.equals(mActivity.getString(R.string.pref_camera_see_more_value_on)) && video_tnr.equals(mActivity.getString(R.string.pref_camera_video_tnr_value_on))) {
        mParameters.set(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        mUI.overrideSettings(CameraSettings.KEY_QC_VIDEO_TNR_MODE,mActivity.getString(R.string.pref_camera_video_tnr_value_off));
        Toast.makeText(mActivity,R.string.disable_TNR_during_SeeMore,Toast.LENGTH_LONG).show();
      }
      mParameters.set(CameraSettings.KEY_QC_SEE_MORE_MODE,seeMoreMode);
    }
  }
  String videoHDR=mPreferences.getString(CameraSettings.KEY_VIDEO_HDR,mActivity.getString(R.string.pref_camera_video_hdr_default));
  Log.v(TAG,""String_Node_Str"" + videoHDR);
  if (isSupported(videoHDR,mParameters.getSupportedVideoHDRModes())) {
    mParameters.setVideoHDRMode(videoHDR);
  }
 else   mParameters.setVideoHDRMode(""String_Node_Str"");
  String hfr=mParameters.getVideoHighFrameRate();
  String hsr=mParameters.get(CameraSettings.KEY_VIDEO_HSR);
  String hdr=mParameters.getVideoHDRMode();
  if (((hfr != null) && (!hfr.equals(""String_Node_Str""))) || ((hsr != null) && (!hsr.equals(""String_Node_Str"")))) {
    String frameIntervalStr=mPreferences.getString(CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,mActivity.getString(R.string.pref_video_time_lapse_frame_interval_default));
    int timeLapseInterval=Integer.parseInt(frameIntervalStr);
    if ((timeLapseInterval != 0) || (disMode.equals(""String_Node_Str"")) || ((hdr != null) && (!hdr.equals(""String_Node_Str"")))) {
      Log.v(TAG,""String_Node_Str"");
      mParameters.setVideoHighFrameRate(""String_Node_Str"");
      mParameters.set(CameraSettings.KEY_VIDEO_HSR,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,""String_Node_Str"");
    }
  }
  Size biggestSize=mParameters.getSupportedPictureSizes().get(0);
  if (biggestSize.width <= videoWidth || biggestSize.height <= videoHeight) {
    if (disMode.equals(""String_Node_Str"")) {
      Log.v(TAG,""String_Node_Str"");
      RotateTextToast.makeText(mActivity,R.string.error_app_unsupported_dis,Toast.LENGTH_LONG).show();
      mParameters.set(CameraSettings.KEY_QC_DIS_MODE,""String_Node_Str"");
      mUI.overrideSettings(CameraSettings.KEY_DIS,""String_Node_Str"");
      mIsDISEnabled=false;
    }
  }
  String videoRotation=mPreferences.getString(CameraSettings.KEY_VIDEO_ROTATION,mActivity.getString(R.string.pref_camera_video_rotation_default));
  if (isSupported(videoRotation,mParameters.getSupportedVideoRotationValues())) {
    mParameters.setVideoRotation(videoRotation);
  }
  updatePowerMode();
}"
38247,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
 else {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y + dy - delta_y;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + dy + delta_y;
            }
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            point[0]=face.mouth.x + dx - delta_x;
            point[1]=face.mouth.y;
            point[2]=face.mouth.x + dx + delta_x;
            point[3]=face.mouth.y;
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38248,"private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
    RotateTextToast.makeText(mActivity,R.string.advanced_capture_disable_continuous_shot,Toast.LENGTH_LONG).show();
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}","private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}"
38249,"private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=0L;
    if (mMediaRecorderPausing == false)     duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
 else     duration=mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}","private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    long duration=0L;
    MediaMetadataRetriever retriever=new MediaMetadataRetriever();
    retriever.setDataSource(mCurrentVideoFilename);
    try {
      duration=Long.valueOf(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    retriever.release();
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}"
38250,"private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
    RotateTextToast.makeText(mActivity,R.string.advanced_capture_disable_continuous_shot,Toast.LENGTH_LONG).show();
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}","private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}"
38251,"private String getSDCardStorageState(){
  try {
    return mMountService.getVolumeState(mVolume.getPath());
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"" + e);
    return Environment.MEDIA_REMOVED;
  }
}","private String getSDCardStorageState(){
  return mVolume.getState();
}"
38252,"private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
    RotateTextToast.makeText(mActivity,R.string.advanced_capture_disable_continuous_shot,Toast.LENGTH_LONG).show();
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}","private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}"
38253,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
 else {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y + dy - delta_y;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + dy + delta_y;
            }
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            point[0]=face.mouth.x + dx - delta_x;
            point[1]=face.mouth.y;
            point[2]=face.mouth.x + dx + delta_x;
            point[3]=face.mouth.y;
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38254,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
 else {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y + dy - delta_y;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + dy + delta_y;
            }
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    ;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y - delta_y / 2;
            point[2]=face.leftEye.x;
            point[3]=face.leftEye.y + delta_y / 2;
          }
 else {
            point[0]=face.leftEye.x - delta_x / 2;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + delta_x / 2;
            point[3]=face.leftEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          if ((mDisplayRotation == 0) || (mDisplayRotation == 180)) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y - delta_y / 2;
            point[2]=face.rightEye.x;
            point[3]=face.rightEye.y + delta_y / 2;
          }
 else {
            point[0]=face.rightEye.x - delta_x / 2;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + delta_x / 2;
            point[3]=face.rightEye.y;
          }
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollX;
              point[3]=face.leftEye.y + gazeRollY;
            }
 else {
              point[0]=face.leftEye.x;
              point[1]=face.leftEye.y;
              point[2]=face.leftEye.x + gazeRollY;
              point[3]=face.leftEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            if ((mDisplayRotation == 90) || (mDisplayRotation == 270)) {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollX;
              point[3]=face.rightEye.y + gazeRollY;
            }
 else {
              point[0]=face.rightEye.x;
              point[1]=face.rightEye.y;
              point[2]=face.rightEye.x + gazeRollY;
              point[3]=face.rightEye.y + gazeRollX;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            point[0]=face.mouth.x + dx - delta_x;
            point[1]=face.mouth.y;
            point[2]=face.mouth.x + dx + delta_x;
            point[3]=face.mouth.y;
            Matrix faceMatrix=new Matrix(mMatrix);
            faceMatrix.preRotate(face.getRollDirection(),face.mouth.x,face.mouth.y);
            faceMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            int rotation_mouth=360 - mDisplayRotation;
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,rotation_mouth,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38255,"private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
    RotateTextToast.makeText(mActivity,R.string.advanced_capture_disable_continuous_shot,Toast.LENGTH_LONG).show();
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}","private void updateCameraSettings(){
  String sceneMode=null;
  String flashMode=null;
  String redeyeReduction=null;
  String aeBracketing=null;
  String focusMode=null;
  String colorEffect=null;
  String exposureCompensation=null;
  String touchAfAec=null;
  boolean disableLongShot=false;
  String ubiFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_ubifocus_on);
  String continuousShotOn=mActivity.getString(R.string.setting_on_value);
  String reFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_refocus_on);
  String chromaFlashOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_chromaflash_on);
  String optiZoomOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_optizoom_on);
  String fssrOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_FSSR_on);
  String truPortraitOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_trueportrait_on);
  String multiTouchFocusOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_multi_touch_focus_on);
  String optiZoom=mParameters.get(CameraSettings.KEY_QC_OPTI_ZOOM);
  String chromaFlash=mParameters.get(CameraSettings.KEY_QC_CHROMA_FLASH);
  String ubiFocus=mParameters.get(CameraSettings.KEY_QC_AF_BRACKETING);
  String fssr=mParameters.get(CameraSettings.KEY_QC_FSSR);
  String truePortrait=mParameters.get(CameraSettings.KEY_QC_TP);
  String multiTouchFocus=mParameters.get(CameraSettings.KEY_QC_MULTI_TOUCH_FOCUS);
  String stillMoreOn=mActivity.getString(R.string.pref_camera_advanced_feature_value_stillmore_on);
  String stillMore=mParameters.get(CameraSettings.KEY_QC_STILL_MORE);
  String continuousShot=mParameters.get(""String_Node_Str"");
  if (mManual3AEnabled > 0) {
    disableLongShot=true;
  }
  if ((continuousShot != null) && continuousShot.equals(continuousShotOn)) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  String reFocus=mParameters.get(CameraSettings.KEY_QC_RE_FOCUS);
  if (mFocusManager.isZslEnabled()) {
    String pictureFormat=mActivity.getString(R.string.pref_camera_picture_format_value_jpeg);
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,pictureFormat);
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_PICTURE_FORMAT,null);
  }
  if ((multiTouchFocus != null && multiTouchFocus.equals(multiTouchFocusOn)) || (chromaFlash != null && chromaFlash.equals(chromaFlashOn)) || (optiZoom != null && optiZoom.equals(optiZoomOn))|| (fssr != null && fssr.equals(fssrOn))|| (truePortrait != null && truePortrait.equals(truPortraitOn))|| (stillMore != null && stillMore.equals(stillMoreOn))) {
    if (optiZoom != null && optiZoom.equals(optiZoomOn)) {
      sceneMode=null;
    }
 else {
      mSceneMode=sceneMode=Parameters.SCENE_MODE_AUTO;
    }
    flashMode=Parameters.FLASH_MODE_OFF;
    focusMode=Parameters.FOCUS_MODE_INFINITY;
    redeyeReduction=mActivity.getString(R.string.pref_camera_redeyereduction_entry_disable);
    aeBracketing=mActivity.getString(R.string.pref_camera_ae_bracket_hdr_entry_off);
    colorEffect=mActivity.getString(R.string.pref_camera_coloreffect_default);
    exposureCompensation=CameraSettings.EXPOSURE_DEFAULT_VALUE;
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    disableLongShot=true;
  }
  if (!Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    flashMode=mParameters.FLASH_MODE_OFF;
    String whiteBalance=Parameters.WHITE_BALANCE_AUTO;
    focusMode=mFocusManager.getFocusMode();
    colorEffect=mParameters.getColorEffect();
    exposureCompensation=Integer.toString(mParameters.getExposureCompensation());
    touchAfAec=mCurrTouchAfAec;
    overrideCameraSettings(flashMode,whiteBalance,focusMode,exposureCompensation,touchAfAec,mParameters.getAutoExposure(),Integer.toString(mParameters.getSaturation()),Integer.toString(mParameters.getContrast()),Integer.toString(mParameters.getSharpness()),colorEffect,sceneMode,redeyeReduction,aeBracketing);
    if (CameraUtil.SCENE_MODE_HDR.equals(mSceneMode)) {
      disableLongShot=true;
    }
  }
 else   if (mFocusManager.isZslEnabled()) {
    focusMode=mParameters.getFocusMode();
    overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
  }
 else {
    if (mManual3AEnabled > 0) {
      updateCommonManual3ASettings();
    }
 else {
      overrideCameraSettings(flashMode,null,focusMode,exposureCompensation,touchAfAec,null,null,null,null,colorEffect,sceneMode,redeyeReduction,aeBracketing);
    }
  }
  String aeBracket=mParameters.get(CameraSettings.KEY_QC_AE_BRACKETING);
  if (!aeBracket.equalsIgnoreCase(""String_Node_Str"")) {
    String fMode=Parameters.FLASH_MODE_OFF;
    mUI.overrideSettings(CameraSettings.KEY_FLASH_MODE,fMode);
    mParameters.setFlashMode(fMode);
  }
  if (disableLongShot) {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,mActivity.getString(R.string.setting_off_value));
  }
 else {
    mUI.overrideSettings(CameraSettings.KEY_LONGSHOT,null);
  }
}"
38256,"private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=0L;
    if (mMediaRecorderPausing == false)     duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
 else     duration=mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}","private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    long duration=0L;
    MediaMetadataRetriever retriever=new MediaMetadataRetriever();
    retriever.setDataSource(mCurrentVideoFilename);
    try {
      duration=Long.valueOf(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    retriever.release();
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}"
38257,"@Override public void overrideSettings(final String... keyvalues){
  overrideCDSMode();
  super.overrideSettings(keyvalues);
  if (((mListMenu == null)) || mPopupStatus != POPUP_FIRST_LEVEL) {
    mPopupStatus=POPUP_FIRST_LEVEL;
    initializePopup();
  }
  mListMenu.overrideSettings(keyvalues);
}","@Override public void overrideSettings(final String... keyvalues){
  super.overrideSettings(keyvalues);
  if (mListMenu == null) {
    initializePopup();
  }
 else {
    overrideCDSMode();
  }
  mListMenu.overrideSettings(keyvalues);
}"
38258,"@Override public void overrideSettings(final String... keyvalues){
  overrideCDSMode();
  super.overrideSettings(keyvalues);
  if (((mListMenu == null)) || mPopupStatus != POPUP_FIRST_LEVEL) {
    mPopupStatus=POPUP_FIRST_LEVEL;
    initializePopup();
  }
  mListMenu.overrideSettings(keyvalues);
}","@Override public void overrideSettings(final String... keyvalues){
  super.overrideSettings(keyvalues);
  if (mListMenu == null) {
    initializePopup();
  }
 else {
    overrideCDSMode();
  }
  mListMenu.overrideSettings(keyvalues);
}"
38259,"/** 
 * This can run on a background thread, so don't do UI updates here. Post any view updates to MainHandler or do it on onPreviewStarted() .  
 */
private void startPreview(){
  if (mPaused || mCameraDevice == null || mParameters == null) {
    return;
  }
  SurfaceHolder sh=null;
  Log.v(TAG,""String_Node_Str"");
  if (mUI != null) {
    sh=mUI.getSurfaceHolder();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.setPreviewDisplay(sh);
  if (!mCameraPreviewParamsReady) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  mCameraDevice.setErrorCallback(mErrorCallback);
  if (mCameraState != PREVIEW_STOPPED && mCameraState != INIT) {
    stopPreview();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.startPreview();
  mHandler.sendEmptyMessage(ON_PREVIEW_STARTED);
  setDisplayOrientation();
  if (!mSnapshotOnIdle) {
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mFocusManager.setAeAwbLock(false);
  }
 else {
    mHandler.post(mDoSnapRunnable);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here. Post any view updates to MainHandler or do it on onPreviewStarted() .  
 */
private void startPreview(){
  if (mPaused || mCameraDevice == null || mParameters == null) {
    return;
  }
  SurfaceHolder sh=null;
  Log.v(TAG,""String_Node_Str"");
  if (mUI != null) {
    sh=mUI.getSurfaceHolder();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.setPreviewDisplay(sh);
  if (!mCameraPreviewParamsReady) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  mCameraDevice.setErrorCallback(mErrorCallback);
  if (mCameraState != PREVIEW_STOPPED && mCameraState != INIT) {
    stopPreview();
  }
  if (!mSnapshotOnIdle) {
    mFocusManager.setAeAwbLock(false);
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.startPreview();
  mHandler.sendEmptyMessage(ON_PREVIEW_STARTED);
  setDisplayOrientation();
  if (!mSnapshotOnIdle) {
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else {
    mHandler.post(mDoSnapRunnable);
  }
}"
38260,"/** 
 * This can run on a background thread, so don't do UI updates here. Post any view updates to MainHandler or do it on onPreviewStarted() .  
 */
private void startPreview(){
  if (mPaused || mCameraDevice == null || mParameters == null) {
    return;
  }
  SurfaceHolder sh=null;
  Log.v(TAG,""String_Node_Str"");
  if (mUI != null) {
    sh=mUI.getSurfaceHolder();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.setPreviewDisplay(sh);
  if (!mCameraPreviewParamsReady) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  mCameraDevice.setErrorCallback(mErrorCallback);
  if (mCameraState != PREVIEW_STOPPED && mCameraState != INIT) {
    stopPreview();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.startPreview();
  mHandler.sendEmptyMessage(ON_PREVIEW_STARTED);
  setDisplayOrientation();
  if (!mSnapshotOnIdle) {
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mFocusManager.setAeAwbLock(false);
  }
 else {
    mHandler.post(mDoSnapRunnable);
  }
}","/** 
 * This can run on a background thread, so don't do UI updates here. Post any view updates to MainHandler or do it on onPreviewStarted() .  
 */
private void startPreview(){
  if (mPaused || mCameraDevice == null || mParameters == null) {
    return;
  }
  SurfaceHolder sh=null;
  Log.v(TAG,""String_Node_Str"");
  if (mUI != null) {
    sh=mUI.getSurfaceHolder();
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.setPreviewDisplay(sh);
  if (!mCameraPreviewParamsReady) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  mCameraDevice.setErrorCallback(mErrorCallback);
  if (mCameraState != PREVIEW_STOPPED && mCameraState != INIT) {
    stopPreview();
  }
  if (!mSnapshotOnIdle) {
    mFocusManager.setAeAwbLock(false);
  }
  setCameraParameters(UPDATE_PARAM_ALL);
  mCameraDevice.startPreview();
  mHandler.sendEmptyMessage(ON_PREVIEW_STARTED);
  setDisplayOrientation();
  if (!mSnapshotOnIdle) {
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else {
    mHandler.post(mDoSnapRunnable);
  }
}"
38261,"@Override public void onProgress(boolean isFinished,float panningRateX,float panningRateY,float progressX,float progressY){
  float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
  float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
  boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
  if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
    stopCapture(false);
  }
 else {
    float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
    float panningRateYInDegree=panningRateY * mVerticalViewAngle;
    mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
  }
}","@Override public void onProgress(boolean isFinished,float panningRateX,float panningRateY,float progressX,float progressY){
  float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
  float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
  boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
  if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
    stopCapture(false);
  }
 else {
    float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
    float panningRateYInDegree=panningRateY * mVerticalViewAngle;
    if (mDeviceOrientation == 180 || mDeviceOrientation == 90) {
      accumulatedHorizontalAngle=-accumulatedHorizontalAngle;
      accumulatedVerticalAngle=-accumulatedVerticalAngle;
    }
    mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
  }
}"
38262,"public void startCapture(){
  mCancelComputation=false;
  mTimeTaken=System.currentTimeMillis();
  mActivity.setSwipingEnabled(false);
  mCaptureState=CAPTURE_STATE_MOSAIC;
  mUI.onStartCapture();
  Parameters parameters=mCameraDevice.getParameters();
  parameters.setAutoExposureLock(true);
  parameters.setAutoWhiteBalanceLock(true);
  configureCamera(parameters);
  mMosaicFrameProcessor.setProgressListener(new MosaicFrameProcessor.ProgressListener(){
    @Override public void onProgress(    boolean isFinished,    float panningRateX,    float panningRateY,    float progressX,    float progressY){
      float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
      float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
      boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
      if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
        stopCapture(false);
      }
 else {
        float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
        float panningRateYInDegree=panningRateY * mVerticalViewAngle;
        mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
      }
    }
  }
);
  mUI.resetCaptureProgress();
  mUI.setMaxCaptureProgress(DEFAULT_SWEEP_ANGLE);
  mUI.showCaptureProgress();
  mDeviceOrientationAtCapture=mDeviceOrientation;
  keepScreenOn();
  mOrientationLocked=true;
  int degrees=CameraUtil.getDisplayRotation(mActivity);
  int cameraId=CameraHolder.instance().getBackCameraId();
  int orientation=CameraUtil.getDisplayOrientation(degrees,cameraId);
  mUI.setProgressOrientation(orientation);
}","public void startCapture(){
  mCancelComputation=false;
  mTimeTaken=System.currentTimeMillis();
  mActivity.setSwipingEnabled(false);
  mCaptureState=CAPTURE_STATE_MOSAIC;
  mUI.onStartCapture();
  Parameters parameters=mCameraDevice.getParameters();
  parameters.setAutoExposureLock(true);
  parameters.setAutoWhiteBalanceLock(true);
  configureCamera(parameters);
  mMosaicFrameProcessor.setProgressListener(new MosaicFrameProcessor.ProgressListener(){
    @Override public void onProgress(    boolean isFinished,    float panningRateX,    float panningRateY,    float progressX,    float progressY){
      float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
      float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
      boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
      if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
        stopCapture(false);
      }
 else {
        float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
        float panningRateYInDegree=panningRateY * mVerticalViewAngle;
        if (mDeviceOrientation == 180 || mDeviceOrientation == 90) {
          accumulatedHorizontalAngle=-accumulatedHorizontalAngle;
          accumulatedVerticalAngle=-accumulatedVerticalAngle;
        }
        mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
      }
    }
  }
);
  mUI.resetCaptureProgress();
  mUI.setMaxCaptureProgress(DEFAULT_SWEEP_ANGLE);
  mUI.showCaptureProgress();
  mDeviceOrientationAtCapture=mDeviceOrientation;
  keepScreenOn();
  mOrientationLocked=true;
  int degrees=CameraUtil.getDisplayRotation(mActivity);
  int cameraId=CameraHolder.instance().getBackCameraId();
  int orientation=CameraUtil.getDisplayOrientation(degrees,cameraId);
  mUI.setProgressOrientation(orientation);
}"
38263,"@Override public void onProgress(boolean isFinished,float panningRateX,float panningRateY,float progressX,float progressY){
  float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
  float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
  boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
  if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
    stopCapture(false);
  }
 else {
    float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
    float panningRateYInDegree=panningRateY * mVerticalViewAngle;
    mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
  }
}","@Override public void onProgress(boolean isFinished,float panningRateX,float panningRateY,float progressX,float progressY){
  float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
  float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
  boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
  if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
    stopCapture(false);
  }
 else {
    float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
    float panningRateYInDegree=panningRateY * mVerticalViewAngle;
    if (mDeviceOrientation == 180 || mDeviceOrientation == 90) {
      accumulatedHorizontalAngle=-accumulatedHorizontalAngle;
      accumulatedVerticalAngle=-accumulatedVerticalAngle;
    }
    mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
  }
}"
38264,"public void startCapture(){
  mCancelComputation=false;
  mTimeTaken=System.currentTimeMillis();
  mActivity.setSwipingEnabled(false);
  mCaptureState=CAPTURE_STATE_MOSAIC;
  mUI.onStartCapture();
  Parameters parameters=mCameraDevice.getParameters();
  parameters.setAutoExposureLock(true);
  parameters.setAutoWhiteBalanceLock(true);
  configureCamera(parameters);
  mMosaicFrameProcessor.setProgressListener(new MosaicFrameProcessor.ProgressListener(){
    @Override public void onProgress(    boolean isFinished,    float panningRateX,    float panningRateY,    float progressX,    float progressY){
      float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
      float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
      boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
      if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
        stopCapture(false);
      }
 else {
        float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
        float panningRateYInDegree=panningRateY * mVerticalViewAngle;
        mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
      }
    }
  }
);
  mUI.resetCaptureProgress();
  mUI.setMaxCaptureProgress(DEFAULT_SWEEP_ANGLE);
  mUI.showCaptureProgress();
  mDeviceOrientationAtCapture=mDeviceOrientation;
  keepScreenOn();
  mOrientationLocked=true;
  int degrees=CameraUtil.getDisplayRotation(mActivity);
  int cameraId=CameraHolder.instance().getBackCameraId();
  int orientation=CameraUtil.getDisplayOrientation(degrees,cameraId);
  mUI.setProgressOrientation(orientation);
}","public void startCapture(){
  mCancelComputation=false;
  mTimeTaken=System.currentTimeMillis();
  mActivity.setSwipingEnabled(false);
  mCaptureState=CAPTURE_STATE_MOSAIC;
  mUI.onStartCapture();
  Parameters parameters=mCameraDevice.getParameters();
  parameters.setAutoExposureLock(true);
  parameters.setAutoWhiteBalanceLock(true);
  configureCamera(parameters);
  mMosaicFrameProcessor.setProgressListener(new MosaicFrameProcessor.ProgressListener(){
    @Override public void onProgress(    boolean isFinished,    float panningRateX,    float panningRateY,    float progressX,    float progressY){
      float accumulatedHorizontalAngle=progressX * mHorizontalViewAngle;
      float accumulatedVerticalAngle=progressY * mVerticalViewAngle;
      boolean isRotated=!(mDeviceOrientationAtCapture == mDeviceOrientation);
      if (isFinished || (Math.abs(accumulatedHorizontalAngle) >= DEFAULT_SWEEP_ANGLE) || (Math.abs(accumulatedVerticalAngle) >= DEFAULT_SWEEP_ANGLE)|| isRotated) {
        stopCapture(false);
      }
 else {
        float panningRateXInDegree=panningRateX * mHorizontalViewAngle;
        float panningRateYInDegree=panningRateY * mVerticalViewAngle;
        if (mDeviceOrientation == 180 || mDeviceOrientation == 90) {
          accumulatedHorizontalAngle=-accumulatedHorizontalAngle;
          accumulatedVerticalAngle=-accumulatedVerticalAngle;
        }
        mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD);
      }
    }
  }
);
  mUI.resetCaptureProgress();
  mUI.setMaxCaptureProgress(DEFAULT_SWEEP_ANGLE);
  mUI.showCaptureProgress();
  mDeviceOrientationAtCapture=mDeviceOrientation;
  keepScreenOn();
  mOrientationLocked=true;
  int degrees=CameraUtil.getDisplayRotation(mActivity);
  int cameraId=CameraHolder.instance().getBackCameraId();
  int orientation=CameraUtil.getDisplayOrientation(degrees,cameraId);
  mUI.setProgressOrientation(orientation);
}"
38265,"public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determineRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mOriginalPreviewWidth, height=mOriginalPreviewHeight;
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
scaledTextureWidth=Math.max(width,height * mAspectRatio);
scaledTextureHeight=Math.max(height,width / mAspectRatio);
}
 else {
scaledTextureWidth=Math.max(width,height / mAspectRatio);
scaledTextureHeight=Math.max(height,width * mAspectRatio);
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
int orientation=mActivity.getResources().getConfiguration().orientation;
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}","public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determineRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mOriginalPreviewWidth, height=mOriginalPreviewHeight;
if (width == 0 || height == 0) return;
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
scaledTextureWidth=Math.max(width,height * mAspectRatio);
scaledTextureHeight=Math.max(height,width / mAspectRatio);
}
 else {
scaledTextureWidth=Math.max(width,height / mAspectRatio);
scaledTextureHeight=Math.max(height,width * mAspectRatio);
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
int orientation=mActivity.getResources().getConfiguration().orientation;
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}"
38266,"public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determineRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mOriginalPreviewWidth, height=mOriginalPreviewHeight;
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
scaledTextureWidth=Math.max(width,height * mAspectRatio);
scaledTextureHeight=Math.max(height,width / mAspectRatio);
}
 else {
scaledTextureWidth=Math.max(width,height / mAspectRatio);
scaledTextureHeight=Math.max(height,width * mAspectRatio);
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
int orientation=mActivity.getResources().getConfiguration().orientation;
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}","public void layoutPreview(float ratio){
  FrameLayout.LayoutParams lp;
  float scaledTextureWidth, scaledTextureHeight;
  int rotation=CameraUtil.getDisplayRotation(mActivity);
  if (mScreenRatio == CameraUtil.RATIO_16_9 && CameraUtil.determineRatio(ratio) == CameraUtil.RATIO_4_3) {
    int l=(mTopMargin + mBottomMargin) * 4;
    int s=l * 9 / 16;
switch (rotation) {
case 90:
      lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
    lp.setMargins(mTopMargin,0,mBottomMargin,0);
  scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
case 180:
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mBottomMargin,0,mTopMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
case 270:
lp=new FrameLayout.LayoutParams(l * 3 / 4,s);
lp.setMargins(mBottomMargin,0,mTopMargin,0);
scaledTextureWidth=l * 3 / 4;
scaledTextureHeight=s;
break;
default :
lp=new FrameLayout.LayoutParams(s,l * 3 / 4);
lp.setMargins(0,mTopMargin,0,mBottomMargin);
scaledTextureWidth=s;
scaledTextureHeight=l * 3 / 4;
break;
}
}
 else {
float width=mOriginalPreviewWidth, height=mOriginalPreviewHeight;
if (width == 0 || height == 0) return;
if (mOrientationResize) {
scaledTextureWidth=height * mAspectRatio;
if (scaledTextureWidth > width) {
scaledTextureWidth=width;
scaledTextureHeight=scaledTextureWidth / mAspectRatio;
}
 else {
scaledTextureHeight=height;
}
}
 else {
if (width > height) {
scaledTextureWidth=Math.max(width,height * mAspectRatio);
scaledTextureHeight=Math.max(height,width / mAspectRatio);
}
 else {
scaledTextureWidth=Math.max(width,height / mAspectRatio);
scaledTextureHeight=Math.max(height,width * mAspectRatio);
}
}
Log.v(TAG,""String_Node_Str"" + scaledTextureWidth + ""String_Node_Str""+ scaledTextureHeight);
int orientation=mActivity.getResources().getConfiguration().orientation;
if (((rotation == 0 || rotation == 180) && scaledTextureWidth > scaledTextureHeight) || ((rotation == 90 || rotation == 270) && scaledTextureWidth < scaledTextureHeight)) {
lp=new FrameLayout.LayoutParams((int)scaledTextureHeight,(int)scaledTextureWidth,Gravity.CENTER);
}
 else {
lp=new FrameLayout.LayoutParams((int)scaledTextureWidth,(int)scaledTextureHeight,Gravity.CENTER);
}
}
if (mSurfaceTextureUncroppedWidth != scaledTextureWidth || mSurfaceTextureUncroppedHeight != scaledTextureHeight) {
mSurfaceTextureUncroppedWidth=scaledTextureWidth;
mSurfaceTextureUncroppedHeight=scaledTextureHeight;
if (mSurfaceTextureSizeListener != null) {
mSurfaceTextureSizeListener.onSurfaceTextureSizeChanged((int)mSurfaceTextureUncroppedWidth,(int)mSurfaceTextureUncroppedHeight);
Log.d(TAG,""String_Node_Str"" + mSurfaceTextureUncroppedWidth + ""String_Node_Str""+ mSurfaceTextureUncroppedHeight);
}
}
mSurfaceView.setLayoutParams(lp);
if (mFaceView != null) {
mFaceView.setLayoutParams(lp);
}
}"
38267,"private void switchCamera(){
  if (mPaused)   return;
  Log.v(TAG,""String_Node_Str"" + mPendingSwitchCameraId);
  mCameraId=mPendingSwitchCameraId;
  mPendingSwitchCameraId=-1;
  setCameraId(mCameraId);
  closeCamera();
  mUI.collapseCameraControls();
  mUI.clearFaces();
  disableSkinToneSeekBar();
  if (mFocusManager != null)   mFocusManager.removeMessages();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mCameraDevice=CameraUtil.openCamera(mActivity,mCameraId,mHandler,mActivity.getCameraOpenErrorCallback());
  if (mCameraDevice == null) {
    Log.e(TAG,""String_Node_Str"" + mCameraId + ""String_Node_Str"");
    return;
  }
  mParameters=mCameraDevice.getParameters();
  mInitialParams=mParameters;
  initializeCapabilities();
  CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
  mMirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);
  mFocusManager.setMirror(mMirror);
  mFocusManager.setParameters(mInitialParams);
  setupPreview();
  mZoomValue=0;
  resizeForPreviewAspectRatio();
  openCameraCommon();
  mHandler.sendEmptyMessage(SWITCH_CAMERA_START_ANIMATION);
}","private void switchCamera(){
  if (mPaused)   return;
  Log.v(TAG,""String_Node_Str"" + mPendingSwitchCameraId);
  mCameraId=mPendingSwitchCameraId;
  mPendingSwitchCameraId=-1;
  setCameraId(mCameraId);
  try {
    if (mOpenCameraThread != null) {
      mOpenCameraThread.join();
      mOpenCameraThread=null;
    }
  }
 catch (  InterruptedException ex) {
  }
  closeCamera();
  mUI.collapseCameraControls();
  mUI.clearFaces();
  disableSkinToneSeekBar();
  if (mFocusManager != null)   mFocusManager.removeMessages();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mCameraDevice=CameraUtil.openCamera(mActivity,mCameraId,mHandler,mActivity.getCameraOpenErrorCallback());
  if (mCameraDevice == null) {
    Log.e(TAG,""String_Node_Str"" + mCameraId + ""String_Node_Str"");
    return;
  }
  mParameters=mCameraDevice.getParameters();
  mInitialParams=mParameters;
  initializeCapabilities();
  CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
  mMirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);
  mFocusManager.setMirror(mMirror);
  mFocusManager.setParameters(mInitialParams);
  setupPreview();
  mZoomValue=0;
  resizeForPreviewAspectRatio();
  openCameraCommon();
  mHandler.sendEmptyMessage(SWITCH_CAMERA_START_ANIMATION);
}"
38268,"private void switchCamera(){
  if (mPaused)   return;
  Log.v(TAG,""String_Node_Str"" + mPendingSwitchCameraId);
  mCameraId=mPendingSwitchCameraId;
  mPendingSwitchCameraId=-1;
  setCameraId(mCameraId);
  closeCamera();
  mUI.collapseCameraControls();
  mUI.clearFaces();
  disableSkinToneSeekBar();
  if (mFocusManager != null)   mFocusManager.removeMessages();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mCameraDevice=CameraUtil.openCamera(mActivity,mCameraId,mHandler,mActivity.getCameraOpenErrorCallback());
  if (mCameraDevice == null) {
    Log.e(TAG,""String_Node_Str"" + mCameraId + ""String_Node_Str"");
    return;
  }
  mParameters=mCameraDevice.getParameters();
  mInitialParams=mParameters;
  initializeCapabilities();
  CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
  mMirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);
  mFocusManager.setMirror(mMirror);
  mFocusManager.setParameters(mInitialParams);
  setupPreview();
  mZoomValue=0;
  resizeForPreviewAspectRatio();
  openCameraCommon();
  mHandler.sendEmptyMessage(SWITCH_CAMERA_START_ANIMATION);
}","private void switchCamera(){
  if (mPaused)   return;
  Log.v(TAG,""String_Node_Str"" + mPendingSwitchCameraId);
  mCameraId=mPendingSwitchCameraId;
  mPendingSwitchCameraId=-1;
  setCameraId(mCameraId);
  try {
    if (mOpenCameraThread != null) {
      mOpenCameraThread.join();
      mOpenCameraThread=null;
    }
  }
 catch (  InterruptedException ex) {
  }
  closeCamera();
  mUI.collapseCameraControls();
  mUI.clearFaces();
  disableSkinToneSeekBar();
  if (mFocusManager != null)   mFocusManager.removeMessages();
  mPreferences.setLocalId(mActivity,mCameraId);
  CameraSettings.upgradeLocalPreferences(mPreferences.getLocal());
  mCameraDevice=CameraUtil.openCamera(mActivity,mCameraId,mHandler,mActivity.getCameraOpenErrorCallback());
  if (mCameraDevice == null) {
    Log.e(TAG,""String_Node_Str"" + mCameraId + ""String_Node_Str"");
    return;
  }
  mParameters=mCameraDevice.getParameters();
  mInitialParams=mParameters;
  initializeCapabilities();
  CameraInfo info=CameraHolder.instance().getCameraInfo()[mCameraId];
  mMirror=(info.facing == CameraInfo.CAMERA_FACING_FRONT);
  mFocusManager.setMirror(mMirror);
  mFocusManager.setParameters(mInitialParams);
  setupPreview();
  mZoomValue=0;
  resizeForPreviewAspectRatio();
  openCameraCommon();
  mHandler.sendEmptyMessage(SWITCH_CAMERA_START_ANIMATION);
}"
38269,"private boolean stopVideoRecording(){
  Log.v(TAG,""String_Node_Str"");
  mStopRecPending=true;
  mUI.setSwipingEnabled(true);
  if (!isVideoCaptureIntent()) {
    mUI.showSwitcher();
  }
  boolean fail=false;
  if (mMediaRecorderRecording) {
    boolean shouldAddToMediaStoreNow=false;
    try {
      mMediaRecorder.setOnErrorListener(null);
      mMediaRecorder.setOnInfoListener(null);
      mMediaRecorder.stop();
      shouldAddToMediaStoreNow=true;
      mCurrentVideoFilename=mVideoFilename;
      Log.v(TAG,""String_Node_Str"" + mCurrentVideoFilename);
      AccessibilityUtils.makeAnnouncement(mUI.getShutterButton(),mActivity.getString(R.string.video_recording_stopped));
    }
 catch (    RuntimeException e) {
      Log.e(TAG,""String_Node_Str"",e);
      if (mVideoFilename != null)       deleteVideoFile(mVideoFilename);
      fail=true;
    }
    mMediaRecorderRecording=false;
    mSnapshotInProgress=false;
    mOrientationManager.unlockOrientation();
    if (mPaused) {
      closeCamera();
    }
    mUI.showRecordingUI(false);
    if (!mIsVideoCaptureIntent) {
      mUI.enableCameraControls(true);
    }
    mUI.setOrientationIndicator(0,true);
    keepScreenOnAwhile();
    if (shouldAddToMediaStoreNow && !fail) {
      if (mVideoFileDescriptor == null) {
        saveVideo();
      }
 else       if (mIsVideoCaptureIntent) {
        showCaptureResult();
      }
    }
  }
  releaseMediaRecorder();
  if (!mPaused) {
    mCameraDevice.lock();
    if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
      stopPreview();
      mUI.hideSurfaceView();
      startPreview();
    }
  }
  if (!mPaused)   mParameters=mCameraDevice.getParameters();
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,fail ? UsageStatistics.ACTION_CAPTURE_FAIL : UsageStatistics.ACTION_CAPTURE_DONE,""String_Node_Str"",SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime);
  mStopRecPending=false;
  return fail;
}","private boolean stopVideoRecording(){
  Log.v(TAG,""String_Node_Str"");
  mStopRecPending=true;
  mUI.setSwipingEnabled(true);
  if (!isVideoCaptureIntent()) {
    mUI.showSwitcher();
  }
  boolean fail=false;
  if (mMediaRecorderRecording) {
    boolean shouldAddToMediaStoreNow=false;
    try {
      mMediaRecorder.setOnErrorListener(null);
      mMediaRecorder.setOnInfoListener(null);
      mMediaRecorder.stop();
      shouldAddToMediaStoreNow=true;
      mCurrentVideoFilename=mVideoFilename;
      Log.v(TAG,""String_Node_Str"" + mCurrentVideoFilename);
      AccessibilityUtils.makeAnnouncement(mUI.getShutterButton(),mActivity.getString(R.string.video_recording_stopped));
    }
 catch (    RuntimeException e) {
      Log.e(TAG,""String_Node_Str"",e);
      if (mVideoFilename != null)       deleteVideoFile(mVideoFilename);
      fail=true;
    }
    mMediaRecorderRecording=false;
    mSnapshotInProgress=false;
    mOrientationManager.unlockOrientation();
    if (mPaused) {
      closeCamera();
    }
    mUI.showRecordingUI(false);
    if (!mIsVideoCaptureIntent) {
      mUI.enableCameraControls(true);
    }
    mUI.setOrientationIndicator(0,true);
    keepScreenOnAwhile();
    if (shouldAddToMediaStoreNow && !fail) {
      if (mVideoFileDescriptor == null) {
        saveVideo();
      }
 else       if (mIsVideoCaptureIntent) {
        showCaptureResult();
      }
    }
  }
  releaseMediaRecorder();
  if (!mPaused) {
    mCameraDevice.lock();
    if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
      stopPreview();
      mUI.hideSurfaceView();
      startPreview();
    }
  }
  if (!mPaused)   mParameters=mCameraDevice.getParameters();
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,fail ? UsageStatistics.ACTION_CAPTURE_FAIL : UsageStatistics.ACTION_CAPTURE_DONE,""String_Node_Str"",mMediaRecorderPausing ? mRecordingTotalTime : SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime);
  mStopRecPending=false;
  return fail;
}"
38270,"private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}","private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=0L;
    if (mMediaRecorderPausing == false)     duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
 else     duration=mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}"
38271,"private boolean stopVideoRecording(){
  Log.v(TAG,""String_Node_Str"");
  mStopRecPending=true;
  mUI.setSwipingEnabled(true);
  if (!isVideoCaptureIntent()) {
    mUI.showSwitcher();
  }
  boolean fail=false;
  if (mMediaRecorderRecording) {
    boolean shouldAddToMediaStoreNow=false;
    try {
      mMediaRecorder.setOnErrorListener(null);
      mMediaRecorder.setOnInfoListener(null);
      mMediaRecorder.stop();
      shouldAddToMediaStoreNow=true;
      mCurrentVideoFilename=mVideoFilename;
      Log.v(TAG,""String_Node_Str"" + mCurrentVideoFilename);
      AccessibilityUtils.makeAnnouncement(mUI.getShutterButton(),mActivity.getString(R.string.video_recording_stopped));
    }
 catch (    RuntimeException e) {
      Log.e(TAG,""String_Node_Str"",e);
      if (mVideoFilename != null)       deleteVideoFile(mVideoFilename);
      fail=true;
    }
    mMediaRecorderRecording=false;
    mSnapshotInProgress=false;
    mOrientationManager.unlockOrientation();
    if (mPaused) {
      closeCamera();
    }
    mUI.showRecordingUI(false);
    if (!mIsVideoCaptureIntent) {
      mUI.enableCameraControls(true);
    }
    mUI.setOrientationIndicator(0,true);
    keepScreenOnAwhile();
    if (shouldAddToMediaStoreNow && !fail) {
      if (mVideoFileDescriptor == null) {
        saveVideo();
      }
 else       if (mIsVideoCaptureIntent) {
        showCaptureResult();
      }
    }
  }
  releaseMediaRecorder();
  if (!mPaused) {
    mCameraDevice.lock();
    if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
      stopPreview();
      mUI.hideSurfaceView();
      startPreview();
    }
  }
  if (!mPaused)   mParameters=mCameraDevice.getParameters();
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,fail ? UsageStatistics.ACTION_CAPTURE_FAIL : UsageStatistics.ACTION_CAPTURE_DONE,""String_Node_Str"",SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime);
  mStopRecPending=false;
  return fail;
}","private boolean stopVideoRecording(){
  Log.v(TAG,""String_Node_Str"");
  mStopRecPending=true;
  mUI.setSwipingEnabled(true);
  if (!isVideoCaptureIntent()) {
    mUI.showSwitcher();
  }
  boolean fail=false;
  if (mMediaRecorderRecording) {
    boolean shouldAddToMediaStoreNow=false;
    try {
      mMediaRecorder.setOnErrorListener(null);
      mMediaRecorder.setOnInfoListener(null);
      mMediaRecorder.stop();
      shouldAddToMediaStoreNow=true;
      mCurrentVideoFilename=mVideoFilename;
      Log.v(TAG,""String_Node_Str"" + mCurrentVideoFilename);
      AccessibilityUtils.makeAnnouncement(mUI.getShutterButton(),mActivity.getString(R.string.video_recording_stopped));
    }
 catch (    RuntimeException e) {
      Log.e(TAG,""String_Node_Str"",e);
      if (mVideoFilename != null)       deleteVideoFile(mVideoFilename);
      fail=true;
    }
    mMediaRecorderRecording=false;
    mSnapshotInProgress=false;
    mOrientationManager.unlockOrientation();
    if (mPaused) {
      closeCamera();
    }
    mUI.showRecordingUI(false);
    if (!mIsVideoCaptureIntent) {
      mUI.enableCameraControls(true);
    }
    mUI.setOrientationIndicator(0,true);
    keepScreenOnAwhile();
    if (shouldAddToMediaStoreNow && !fail) {
      if (mVideoFileDescriptor == null) {
        saveVideo();
      }
 else       if (mIsVideoCaptureIntent) {
        showCaptureResult();
      }
    }
  }
  releaseMediaRecorder();
  if (!mPaused) {
    mCameraDevice.lock();
    if (!ApiHelper.HAS_SURFACE_TEXTURE_RECORDING) {
      stopPreview();
      mUI.hideSurfaceView();
      startPreview();
    }
  }
  if (!mPaused)   mParameters=mCameraDevice.getParameters();
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,fail ? UsageStatistics.ACTION_CAPTURE_FAIL : UsageStatistics.ACTION_CAPTURE_DONE,""String_Node_Str"",mMediaRecorderPausing ? mRecordingTotalTime : SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime);
  mStopRecPending=false;
  return fail;
}"
38272,"private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}","private void saveVideo(){
  if (mVideoFileDescriptor == null) {
    long duration=0L;
    if (mMediaRecorderPausing == false)     duration=SystemClock.uptimeMillis() - mRecordingStartTime + mRecordingTotalTime;
 else     duration=mRecordingTotalTime;
    if (duration > 0) {
      if (mCaptureTimeLapse) {
        duration=getTimeLapseVideoLength(duration);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + duration);
    }
    File origFile=new File(mCurrentVideoFilename);
    if (!origFile.exists() || origFile.length() <= 0) {
      Log.e(TAG,""String_Node_Str"");
      mCurrentVideoValues=null;
      return;
    }
    String hfr=mParameters.getVideoHighFrameRate();
    int defaultFps=30;
    int hfrRatio=1;
    if (!(""String_Node_Str"".equals(hfr))) {
      try {
        int hfrFps=Integer.parseInt(hfr);
        hfrRatio=hfrFps / defaultFps;
      }
 catch (      NumberFormatException ex) {
        Log.e(TAG,""String_Node_Str"" + hfr);
      }
    }
    duration=duration * hfrRatio;
    mActivity.getMediaSaveService().addVideo(mCurrentVideoFilename,duration,mCurrentVideoValues,mOnVideoSavedListener,mContentResolver);
  }
  mCurrentVideoValues=null;
}"
38273,"@Override public void onPictureTaken(final byte[] jpegData,CameraProxy camera){
  mUI.enableShutter(true);
  if (mPaused) {
    return;
  }
  if (mIsImageCaptureIntent) {
    stopPreview();
  }
  if (mSceneMode == CameraUtil.SCENE_MODE_HDR) {
    mUI.showSwitcher();
    mUI.setSwipingEnabled(true);
  }
  mReceivedSnapNum=mReceivedSnapNum + 1;
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL) {
    Log.v(TAG,""String_Node_Str"");
    mParameters=mCameraDevice.getParameters();
    mBurstSnapNum=mParameters.getInt(""String_Node_Str"");
  }
  Log.v(TAG,""String_Node_Str"" + mReceivedSnapNum + ""String_Node_Str""+ mBurstSnapNum);
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  mFocusManager.updateFocusUI();
  boolean needRestartPreview=!mIsImageCaptureIntent && !mPreviewRestartSupport && (mCameraState != LONGSHOT)&& (mSnapshotMode != CameraInfo.CAMERA_SUPPORT_MODE_ZSL)&& (mReceivedSnapNum == mBurstSnapNum);
  if (needRestartPreview) {
    setupPreview();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else   if ((mReceivedSnapNum == mBurstSnapNum) && (mCameraState != LONGSHOT)) {
    mFocusManager.resetTouchFocus();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mUI.resumeFaceDetection();
    setCameraState(IDLE);
  }
  ExifInterface exif=Exif.getExif(jpegData);
  int orientation=Exif.getOrientation(exif);
  if (!mIsImageCaptureIntent) {
    if (mReceivedSnapNum > 1)     mNamedImages.nameNewImage(mCaptureStartTime);
    Size s=mParameters.getPictureSize();
    int width, height;
    if ((mJpegRotation + orientation) % 180 == 0) {
      width=s.width;
      height=s.height;
    }
 else {
      width=s.height;
      height=s.width;
    }
    String pictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
    if (pictureFormat != null && !pictureFormat.equalsIgnoreCase(PIXEL_FORMAT_JPEG)) {
      String pair=mParameters.get(KEY_QC_RAW_PICUTRE_SIZE);
      if (pair != null) {
        int pos=pair.indexOf('x');
        if (pos != -1) {
          width=Integer.parseInt(pair.substring(0,pos));
          height=Integer.parseInt(pair.substring(pos + 1));
        }
      }
    }
    NamedEntity name=mNamedImages.getNextNameEntity();
    String title=(name == null) ? null : name.title;
    long date=(name == null) ? -1 : name.date;
    if (mDebugUri != null) {
      saveToDebugUri(jpegData);
      if (title != null) {
        title=DEBUG_IMAGE_PREFIX + title;
      }
    }
    if (title == null) {
      Log.e(TAG,""String_Node_Str"");
    }
 else {
      if (date == -1)       date=mCaptureStartTime;
      if (mHeading >= 0) {
        ExifTag directionRefTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION_REF,ExifInterface.GpsTrackRef.MAGNETIC_DIRECTION);
        ExifTag directionTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION,new Rational(mHeading,1));
        exif.setTag(directionRefTag);
        exif.setTag(directionTag);
      }
      String mPictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
      mActivity.getMediaSaveService().addImage(jpegData,title,date,mLocation,width,height,orientation,exif,mOnMediaSavedListener,mContentResolver,mPictureFormat);
    }
    if (mCameraState != LONGSHOT) {
      Size pic_size=mParameters.getPictureSize();
      if ((pic_size.width <= 352) && (pic_size.height <= 288)) {
        mUI.setDownFactor(2);
      }
 else {
        mUI.setDownFactor(4);
      }
      mUI.animateCapture(jpegData,orientation,mMirror);
    }
  }
 else {
    mJpegImageData=jpegData;
    if (!mQuickCapture) {
      mUI.showCapturedImageForReview(jpegData,orientation,mMirror);
    }
 else {
      onCaptureDone();
    }
  }
  mActivity.updateStorageSpaceAndHint();
  long now=System.currentTimeMillis();
  mJpegCallbackFinishTime=now - mJpegPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mJpegCallbackFinishTime + ""String_Node_Str"");
  if (mReceivedSnapNum == mBurstSnapNum)   mJpegPictureCallbackTime=0;
  if (mHiston && (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL)) {
    mActivity.runOnUiThread(new Runnable(){
      public void run(){
        if (mGraphView != null) {
          mGraphView.setVisibility(View.VISIBLE);
          mGraphView.PreviewChanged();
        }
      }
    }
);
  }
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL && mCameraState != LONGSHOT && mReceivedSnapNum == mBurstSnapNum) {
    cancelAutoFocus();
  }
}","@Override public void onPictureTaken(final byte[] jpegData,CameraProxy camera){
  mUI.enableShutter(true);
  if (mPaused) {
    return;
  }
  if (mIsImageCaptureIntent) {
    stopPreview();
  }
  if (mSceneMode == CameraUtil.SCENE_MODE_HDR) {
    mUI.showSwitcher();
    mUI.setSwipingEnabled(true);
  }
  mReceivedSnapNum=mReceivedSnapNum + 1;
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL) {
    Log.v(TAG,""String_Node_Str"");
    mParameters=mCameraDevice.getParameters();
    mBurstSnapNum=mParameters.getInt(""String_Node_Str"");
  }
  Log.v(TAG,""String_Node_Str"" + mReceivedSnapNum + ""String_Node_Str""+ mBurstSnapNum);
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  mFocusManager.updateFocusUI();
  boolean needRestartPreview=!mIsImageCaptureIntent && !mPreviewRestartSupport && (mCameraState != LONGSHOT)&& (mSnapshotMode != CameraInfo.CAMERA_SUPPORT_MODE_ZSL)&& (mReceivedSnapNum == mBurstSnapNum);
  if (needRestartPreview) {
    setupPreview();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else   if ((mReceivedSnapNum == mBurstSnapNum) && (mCameraState != LONGSHOT)) {
    mFocusManager.resetTouchFocus();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mUI.resumeFaceDetection();
    if (!mIsImageCaptureIntent) {
      setCameraState(IDLE);
    }
  }
  ExifInterface exif=Exif.getExif(jpegData);
  int orientation=Exif.getOrientation(exif);
  if (!mIsImageCaptureIntent) {
    if (mReceivedSnapNum > 1)     mNamedImages.nameNewImage(mCaptureStartTime);
    Size s=mParameters.getPictureSize();
    int width, height;
    if ((mJpegRotation + orientation) % 180 == 0) {
      width=s.width;
      height=s.height;
    }
 else {
      width=s.height;
      height=s.width;
    }
    String pictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
    if (pictureFormat != null && !pictureFormat.equalsIgnoreCase(PIXEL_FORMAT_JPEG)) {
      String pair=mParameters.get(KEY_QC_RAW_PICUTRE_SIZE);
      if (pair != null) {
        int pos=pair.indexOf('x');
        if (pos != -1) {
          width=Integer.parseInt(pair.substring(0,pos));
          height=Integer.parseInt(pair.substring(pos + 1));
        }
      }
    }
    NamedEntity name=mNamedImages.getNextNameEntity();
    String title=(name == null) ? null : name.title;
    long date=(name == null) ? -1 : name.date;
    if (mDebugUri != null) {
      saveToDebugUri(jpegData);
      if (title != null) {
        title=DEBUG_IMAGE_PREFIX + title;
      }
    }
    if (title == null) {
      Log.e(TAG,""String_Node_Str"");
    }
 else {
      if (date == -1)       date=mCaptureStartTime;
      if (mHeading >= 0) {
        ExifTag directionRefTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION_REF,ExifInterface.GpsTrackRef.MAGNETIC_DIRECTION);
        ExifTag directionTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION,new Rational(mHeading,1));
        exif.setTag(directionRefTag);
        exif.setTag(directionTag);
      }
      String mPictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
      mActivity.getMediaSaveService().addImage(jpegData,title,date,mLocation,width,height,orientation,exif,mOnMediaSavedListener,mContentResolver,mPictureFormat);
    }
    if (mCameraState != LONGSHOT) {
      Size pic_size=mParameters.getPictureSize();
      if ((pic_size.width <= 352) && (pic_size.height <= 288)) {
        mUI.setDownFactor(2);
      }
 else {
        mUI.setDownFactor(4);
      }
      mUI.animateCapture(jpegData,orientation,mMirror);
    }
  }
 else {
    mJpegImageData=jpegData;
    if (!mQuickCapture) {
      mUI.showCapturedImageForReview(jpegData,orientation,mMirror);
    }
 else {
      onCaptureDone();
    }
  }
  mActivity.updateStorageSpaceAndHint();
  long now=System.currentTimeMillis();
  mJpegCallbackFinishTime=now - mJpegPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mJpegCallbackFinishTime + ""String_Node_Str"");
  if (mReceivedSnapNum == mBurstSnapNum)   mJpegPictureCallbackTime=0;
  if (mHiston && (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL)) {
    mActivity.runOnUiThread(new Runnable(){
      public void run(){
        if (mGraphView != null) {
          mGraphView.setVisibility(View.VISIBLE);
          mGraphView.PreviewChanged();
        }
      }
    }
);
  }
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL && mCameraState != LONGSHOT && mReceivedSnapNum == mBurstSnapNum && !mIsImageCaptureIntent) {
    cancelAutoFocus();
  }
}"
38274,"private boolean updateCameraParametersPreference(){
  setAutoExposureLockIfSupported();
  setAutoWhiteBalanceLockIfSupported();
  setFocusAreasIfSupported();
  setMeteringAreasIfSupported();
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(mActivity,mParameters);
  }
 else {
    Size old_size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + old_size.width + ""String_Node_Str""+ old_size.height);
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
    Size size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (old_size != null && size != null) {
      if (!size.equals(old_size) && mCameraState != PREVIEW_STOPPED) {
        Log.v(TAG,""String_Node_Str"");
        mRestartPreview=true;
      }
    }
  }
  Size size=mParameters.getPictureSize();
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=CameraUtil.getOptimalPreviewSize(mActivity,sizes,(double)size.width / size.height);
  Size original=mParameters.getPreviewSize();
  if (!original.equals(optimalSize)) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
    if (mHandler.getLooper() == Looper.myLooper()) {
      setupPreview();
    }
 else {
      mCameraDevice.setParameters(mParameters);
    }
    mParameters=mCameraDevice.getParameters();
    Log.v(TAG,""String_Node_Str"");
    mRestartPreview=true;
  }
  Log.v(TAG,""String_Node_Str"" + optimalSize.width + ""String_Node_Str""+ optimalSize.height);
  String onValue=mActivity.getString(R.string.setting_on_value);
  String hdr=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  String hdrPlus=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR_PLUS,mActivity.getString(R.string.pref_camera_hdr_plus_default));
  boolean hdrOn=onValue.equals(hdr);
  boolean hdrPlusOn=onValue.equals(hdrPlus);
  boolean doGcamModeSwitch=false;
  if (hdrPlusOn && GcamHelper.hasGcamCapture()) {
    doGcamModeSwitch=true;
  }
 else {
    if (hdrOn) {
      mSceneMode=CameraUtil.SCENE_MODE_HDR;
      if (!(Parameters.SCENE_MODE_AUTO).equals(mParameters.getSceneMode())) {
        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
        mCameraDevice.setParameters(mParameters);
        mParameters=mCameraDevice.getParameters();
      }
    }
 else {
      mSceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
    }
  }
  if (CameraUtil.isSupported(mSceneMode,mParameters.getSupportedSceneModes())) {
    if (!mParameters.getSceneMode().equals(mSceneMode)) {
      mParameters.setSceneMode(mSceneMode);
      mCameraDevice.setParameters(mParameters);
      mParameters=mCameraDevice.getParameters();
    }
  }
 else {
    mSceneMode=mParameters.getSceneMode();
    if (mSceneMode == null) {
      mSceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  int jpegQuality=CameraProfile.getJpegEncodingQualityParameter(mCameraId,CameraProfile.QUALITY_HIGH);
  mParameters.setJpegQuality(jpegQuality);
  int value=CameraSettings.readExposure(mPreferences);
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (value >= min && value <= max) {
    mParameters.setExposureCompensation(value);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + value);
  }
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    String flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,mActivity.getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (CameraUtil.isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=mActivity.getString(R.string.pref_camera_flashmode_no_flash);
      }
    }
    String whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,mActivity.getString(R.string.pref_camera_whitebalance_default));
    if (CameraUtil.isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusManager.overrideFocusMode(null);
    mParameters.setFocusMode(mFocusManager.getFocusMode());
  }
 else {
    mFocusManager.overrideFocusMode(mParameters.getFocusMode());
    if (hdrOn)     mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
 else {
      mParameters.setFlashMode(Parameters.FLASH_MODE_AUTO);
    }
  }
  if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {
    updateAutoFocusMoveCallback();
  }
  qcomUpdateCameraParametersPreference();
  return doGcamModeSwitch;
}","private boolean updateCameraParametersPreference(){
  setAutoExposureLockIfSupported();
  setAutoWhiteBalanceLockIfSupported();
  setFocusAreasIfSupported();
  setMeteringAreasIfSupported();
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(mActivity,mParameters);
  }
 else {
    Size old_size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + old_size.width + ""String_Node_Str""+ old_size.height);
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
    Size size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (old_size != null && size != null) {
      if (!size.equals(old_size) && mCameraState != PREVIEW_STOPPED) {
        Log.v(TAG,""String_Node_Str"");
        mRestartPreview=true;
      }
    }
  }
  Size size=mParameters.getPictureSize();
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=CameraUtil.getOptimalPreviewSize(mActivity,sizes,(double)size.width / size.height);
  Size original=mParameters.getPreviewSize();
  if (!original.equals(optimalSize)) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
    if (mHandler.getLooper() == Looper.myLooper()) {
      setupPreview();
    }
 else {
      mCameraDevice.setParameters(mParameters);
    }
    mParameters=mCameraDevice.getParameters();
    Log.v(TAG,""String_Node_Str"");
    mRestartPreview=true;
  }
  Log.v(TAG,""String_Node_Str"" + optimalSize.width + ""String_Node_Str""+ optimalSize.height);
  String onValue=mActivity.getString(R.string.setting_on_value);
  String hdr=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  String hdrPlus=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR_PLUS,mActivity.getString(R.string.pref_camera_hdr_plus_default));
  boolean hdrOn=onValue.equals(hdr);
  boolean hdrPlusOn=onValue.equals(hdrPlus);
  boolean doGcamModeSwitch=false;
  if (hdrPlusOn && GcamHelper.hasGcamCapture()) {
    doGcamModeSwitch=true;
  }
 else {
    if (hdrOn) {
      mSceneMode=CameraUtil.SCENE_MODE_HDR;
      if (!(Parameters.SCENE_MODE_AUTO).equals(mParameters.getSceneMode()) && !(Parameters.SCENE_MODE_HDR).equals(mParameters.getSceneMode())) {
        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
        mCameraDevice.setParameters(mParameters);
        mParameters=mCameraDevice.getParameters();
      }
    }
 else {
      mSceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
    }
  }
  if (CameraUtil.isSupported(mSceneMode,mParameters.getSupportedSceneModes())) {
    if (!mParameters.getSceneMode().equals(mSceneMode)) {
      mParameters.setSceneMode(mSceneMode);
      mCameraDevice.setParameters(mParameters);
      mParameters=mCameraDevice.getParameters();
    }
  }
 else {
    mSceneMode=mParameters.getSceneMode();
    if (mSceneMode == null) {
      mSceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  int jpegQuality=CameraProfile.getJpegEncodingQualityParameter(mCameraId,CameraProfile.QUALITY_HIGH);
  mParameters.setJpegQuality(jpegQuality);
  int value=CameraSettings.readExposure(mPreferences);
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (value >= min && value <= max) {
    mParameters.setExposureCompensation(value);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + value);
  }
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    String flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,mActivity.getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (CameraUtil.isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=mActivity.getString(R.string.pref_camera_flashmode_no_flash);
      }
    }
    String whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,mActivity.getString(R.string.pref_camera_whitebalance_default));
    if (CameraUtil.isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusManager.overrideFocusMode(null);
    mParameters.setFocusMode(mFocusManager.getFocusMode());
  }
 else {
    mFocusManager.overrideFocusMode(mParameters.getFocusMode());
    if (hdrOn)     mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
 else {
      mParameters.setFlashMode(Parameters.FLASH_MODE_AUTO);
    }
  }
  if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {
    updateAutoFocusMoveCallback();
  }
  qcomUpdateCameraParametersPreference();
  return doGcamModeSwitch;
}"
38275,"@Override public void onPictureTaken(final byte[] jpegData,CameraProxy camera){
  mUI.enableShutter(true);
  if (mPaused) {
    return;
  }
  if (mIsImageCaptureIntent) {
    stopPreview();
  }
  if (mSceneMode == CameraUtil.SCENE_MODE_HDR) {
    mUI.showSwitcher();
    mUI.setSwipingEnabled(true);
  }
  mReceivedSnapNum=mReceivedSnapNum + 1;
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL) {
    Log.v(TAG,""String_Node_Str"");
    mParameters=mCameraDevice.getParameters();
    mBurstSnapNum=mParameters.getInt(""String_Node_Str"");
  }
  Log.v(TAG,""String_Node_Str"" + mReceivedSnapNum + ""String_Node_Str""+ mBurstSnapNum);
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  mFocusManager.updateFocusUI();
  boolean needRestartPreview=!mIsImageCaptureIntent && !mPreviewRestartSupport && (mCameraState != LONGSHOT)&& (mSnapshotMode != CameraInfo.CAMERA_SUPPORT_MODE_ZSL)&& (mReceivedSnapNum == mBurstSnapNum);
  if (needRestartPreview) {
    setupPreview();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else   if ((mReceivedSnapNum == mBurstSnapNum) && (mCameraState != LONGSHOT)) {
    mFocusManager.resetTouchFocus();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mUI.resumeFaceDetection();
    setCameraState(IDLE);
  }
  ExifInterface exif=Exif.getExif(jpegData);
  int orientation=Exif.getOrientation(exif);
  if (!mIsImageCaptureIntent) {
    if (mReceivedSnapNum > 1)     mNamedImages.nameNewImage(mCaptureStartTime);
    Size s=mParameters.getPictureSize();
    int width, height;
    if ((mJpegRotation + orientation) % 180 == 0) {
      width=s.width;
      height=s.height;
    }
 else {
      width=s.height;
      height=s.width;
    }
    String pictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
    if (pictureFormat != null && !pictureFormat.equalsIgnoreCase(PIXEL_FORMAT_JPEG)) {
      String pair=mParameters.get(KEY_QC_RAW_PICUTRE_SIZE);
      if (pair != null) {
        int pos=pair.indexOf('x');
        if (pos != -1) {
          width=Integer.parseInt(pair.substring(0,pos));
          height=Integer.parseInt(pair.substring(pos + 1));
        }
      }
    }
    NamedEntity name=mNamedImages.getNextNameEntity();
    String title=(name == null) ? null : name.title;
    long date=(name == null) ? -1 : name.date;
    if (mDebugUri != null) {
      saveToDebugUri(jpegData);
      if (title != null) {
        title=DEBUG_IMAGE_PREFIX + title;
      }
    }
    if (title == null) {
      Log.e(TAG,""String_Node_Str"");
    }
 else {
      if (date == -1)       date=mCaptureStartTime;
      if (mHeading >= 0) {
        ExifTag directionRefTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION_REF,ExifInterface.GpsTrackRef.MAGNETIC_DIRECTION);
        ExifTag directionTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION,new Rational(mHeading,1));
        exif.setTag(directionRefTag);
        exif.setTag(directionTag);
      }
      String mPictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
      mActivity.getMediaSaveService().addImage(jpegData,title,date,mLocation,width,height,orientation,exif,mOnMediaSavedListener,mContentResolver,mPictureFormat);
    }
    if (mCameraState != LONGSHOT) {
      Size pic_size=mParameters.getPictureSize();
      if ((pic_size.width <= 352) && (pic_size.height <= 288)) {
        mUI.setDownFactor(2);
      }
 else {
        mUI.setDownFactor(4);
      }
      mUI.animateCapture(jpegData,orientation,mMirror);
    }
  }
 else {
    mJpegImageData=jpegData;
    if (!mQuickCapture) {
      mUI.showCapturedImageForReview(jpegData,orientation,mMirror);
    }
 else {
      onCaptureDone();
    }
  }
  mActivity.updateStorageSpaceAndHint();
  long now=System.currentTimeMillis();
  mJpegCallbackFinishTime=now - mJpegPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mJpegCallbackFinishTime + ""String_Node_Str"");
  if (mReceivedSnapNum == mBurstSnapNum)   mJpegPictureCallbackTime=0;
  if (mHiston && (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL)) {
    mActivity.runOnUiThread(new Runnable(){
      public void run(){
        if (mGraphView != null) {
          mGraphView.setVisibility(View.VISIBLE);
          mGraphView.PreviewChanged();
        }
      }
    }
);
  }
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL && mCameraState != LONGSHOT && mReceivedSnapNum == mBurstSnapNum) {
    cancelAutoFocus();
  }
}","@Override public void onPictureTaken(final byte[] jpegData,CameraProxy camera){
  mUI.enableShutter(true);
  if (mPaused) {
    return;
  }
  if (mIsImageCaptureIntent) {
    stopPreview();
  }
  if (mSceneMode == CameraUtil.SCENE_MODE_HDR) {
    mUI.showSwitcher();
    mUI.setSwipingEnabled(true);
  }
  mReceivedSnapNum=mReceivedSnapNum + 1;
  mJpegPictureCallbackTime=System.currentTimeMillis();
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL) {
    Log.v(TAG,""String_Node_Str"");
    mParameters=mCameraDevice.getParameters();
    mBurstSnapNum=mParameters.getInt(""String_Node_Str"");
  }
  Log.v(TAG,""String_Node_Str"" + mReceivedSnapNum + ""String_Node_Str""+ mBurstSnapNum);
  if (mPostViewPictureCallbackTime != 0) {
    mShutterToPictureDisplayedTime=mPostViewPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mPostViewPictureCallbackTime;
  }
 else {
    mShutterToPictureDisplayedTime=mRawPictureCallbackTime - mShutterCallbackTime;
    mPictureDisplayedToJpegCallbackTime=mJpegPictureCallbackTime - mRawPictureCallbackTime;
  }
  Log.v(TAG,""String_Node_Str"" + mPictureDisplayedToJpegCallbackTime + ""String_Node_Str"");
  mFocusManager.updateFocusUI();
  boolean needRestartPreview=!mIsImageCaptureIntent && !mPreviewRestartSupport && (mCameraState != LONGSHOT)&& (mSnapshotMode != CameraInfo.CAMERA_SUPPORT_MODE_ZSL)&& (mReceivedSnapNum == mBurstSnapNum);
  if (needRestartPreview) {
    setupPreview();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
  }
 else   if ((mReceivedSnapNum == mBurstSnapNum) && (mCameraState != LONGSHOT)) {
    mFocusManager.resetTouchFocus();
    if (CameraUtil.FOCUS_MODE_CONTINUOUS_PICTURE.equals(mFocusManager.getFocusMode())) {
      mCameraDevice.cancelAutoFocus();
    }
    mUI.resumeFaceDetection();
    if (!mIsImageCaptureIntent) {
      setCameraState(IDLE);
    }
  }
  ExifInterface exif=Exif.getExif(jpegData);
  int orientation=Exif.getOrientation(exif);
  if (!mIsImageCaptureIntent) {
    if (mReceivedSnapNum > 1)     mNamedImages.nameNewImage(mCaptureStartTime);
    Size s=mParameters.getPictureSize();
    int width, height;
    if ((mJpegRotation + orientation) % 180 == 0) {
      width=s.width;
      height=s.height;
    }
 else {
      width=s.height;
      height=s.width;
    }
    String pictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
    if (pictureFormat != null && !pictureFormat.equalsIgnoreCase(PIXEL_FORMAT_JPEG)) {
      String pair=mParameters.get(KEY_QC_RAW_PICUTRE_SIZE);
      if (pair != null) {
        int pos=pair.indexOf('x');
        if (pos != -1) {
          width=Integer.parseInt(pair.substring(0,pos));
          height=Integer.parseInt(pair.substring(pos + 1));
        }
      }
    }
    NamedEntity name=mNamedImages.getNextNameEntity();
    String title=(name == null) ? null : name.title;
    long date=(name == null) ? -1 : name.date;
    if (mDebugUri != null) {
      saveToDebugUri(jpegData);
      if (title != null) {
        title=DEBUG_IMAGE_PREFIX + title;
      }
    }
    if (title == null) {
      Log.e(TAG,""String_Node_Str"");
    }
 else {
      if (date == -1)       date=mCaptureStartTime;
      if (mHeading >= 0) {
        ExifTag directionRefTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION_REF,ExifInterface.GpsTrackRef.MAGNETIC_DIRECTION);
        ExifTag directionTag=exif.buildTag(ExifInterface.TAG_GPS_IMG_DIRECTION,new Rational(mHeading,1));
        exif.setTag(directionRefTag);
        exif.setTag(directionTag);
      }
      String mPictureFormat=mParameters.get(KEY_PICTURE_FORMAT);
      mActivity.getMediaSaveService().addImage(jpegData,title,date,mLocation,width,height,orientation,exif,mOnMediaSavedListener,mContentResolver,mPictureFormat);
    }
    if (mCameraState != LONGSHOT) {
      Size pic_size=mParameters.getPictureSize();
      if ((pic_size.width <= 352) && (pic_size.height <= 288)) {
        mUI.setDownFactor(2);
      }
 else {
        mUI.setDownFactor(4);
      }
      mUI.animateCapture(jpegData,orientation,mMirror);
    }
  }
 else {
    mJpegImageData=jpegData;
    if (!mQuickCapture) {
      mUI.showCapturedImageForReview(jpegData,orientation,mMirror);
    }
 else {
      onCaptureDone();
    }
  }
  mActivity.updateStorageSpaceAndHint();
  long now=System.currentTimeMillis();
  mJpegCallbackFinishTime=now - mJpegPictureCallbackTime;
  Log.v(TAG,""String_Node_Str"" + mJpegCallbackFinishTime + ""String_Node_Str"");
  if (mReceivedSnapNum == mBurstSnapNum)   mJpegPictureCallbackTime=0;
  if (mHiston && (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL)) {
    mActivity.runOnUiThread(new Runnable(){
      public void run(){
        if (mGraphView != null) {
          mGraphView.setVisibility(View.VISIBLE);
          mGraphView.PreviewChanged();
        }
      }
    }
);
  }
  if (mSnapshotMode == CameraInfo.CAMERA_SUPPORT_MODE_ZSL && mCameraState != LONGSHOT && mReceivedSnapNum == mBurstSnapNum && !mIsImageCaptureIntent) {
    cancelAutoFocus();
  }
}"
38276,"private boolean updateCameraParametersPreference(){
  setAutoExposureLockIfSupported();
  setAutoWhiteBalanceLockIfSupported();
  setFocusAreasIfSupported();
  setMeteringAreasIfSupported();
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(mActivity,mParameters);
  }
 else {
    Size old_size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + old_size.width + ""String_Node_Str""+ old_size.height);
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
    Size size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (old_size != null && size != null) {
      if (!size.equals(old_size) && mCameraState != PREVIEW_STOPPED) {
        Log.v(TAG,""String_Node_Str"");
        mRestartPreview=true;
      }
    }
  }
  Size size=mParameters.getPictureSize();
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=CameraUtil.getOptimalPreviewSize(mActivity,sizes,(double)size.width / size.height);
  Size original=mParameters.getPreviewSize();
  if (!original.equals(optimalSize)) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
    if (mHandler.getLooper() == Looper.myLooper()) {
      setupPreview();
    }
 else {
      mCameraDevice.setParameters(mParameters);
    }
    mParameters=mCameraDevice.getParameters();
    Log.v(TAG,""String_Node_Str"");
    mRestartPreview=true;
  }
  Log.v(TAG,""String_Node_Str"" + optimalSize.width + ""String_Node_Str""+ optimalSize.height);
  String onValue=mActivity.getString(R.string.setting_on_value);
  String hdr=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  String hdrPlus=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR_PLUS,mActivity.getString(R.string.pref_camera_hdr_plus_default));
  boolean hdrOn=onValue.equals(hdr);
  boolean hdrPlusOn=onValue.equals(hdrPlus);
  boolean doGcamModeSwitch=false;
  if (hdrPlusOn && GcamHelper.hasGcamCapture()) {
    doGcamModeSwitch=true;
  }
 else {
    if (hdrOn) {
      mSceneMode=CameraUtil.SCENE_MODE_HDR;
      if (!(Parameters.SCENE_MODE_AUTO).equals(mParameters.getSceneMode())) {
        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
        mCameraDevice.setParameters(mParameters);
        mParameters=mCameraDevice.getParameters();
      }
    }
 else {
      mSceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
    }
  }
  if (CameraUtil.isSupported(mSceneMode,mParameters.getSupportedSceneModes())) {
    if (!mParameters.getSceneMode().equals(mSceneMode)) {
      mParameters.setSceneMode(mSceneMode);
      mCameraDevice.setParameters(mParameters);
      mParameters=mCameraDevice.getParameters();
    }
  }
 else {
    mSceneMode=mParameters.getSceneMode();
    if (mSceneMode == null) {
      mSceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  int jpegQuality=CameraProfile.getJpegEncodingQualityParameter(mCameraId,CameraProfile.QUALITY_HIGH);
  mParameters.setJpegQuality(jpegQuality);
  int value=CameraSettings.readExposure(mPreferences);
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (value >= min && value <= max) {
    mParameters.setExposureCompensation(value);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + value);
  }
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    String flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,mActivity.getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (CameraUtil.isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=mActivity.getString(R.string.pref_camera_flashmode_no_flash);
      }
    }
    String whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,mActivity.getString(R.string.pref_camera_whitebalance_default));
    if (CameraUtil.isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusManager.overrideFocusMode(null);
    mParameters.setFocusMode(mFocusManager.getFocusMode());
  }
 else {
    mFocusManager.overrideFocusMode(mParameters.getFocusMode());
    if (hdrOn)     mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
  }
  if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {
    updateAutoFocusMoveCallback();
  }
  qcomUpdateCameraParametersPreference();
  return doGcamModeSwitch;
}","private boolean updateCameraParametersPreference(){
  setAutoExposureLockIfSupported();
  setAutoWhiteBalanceLockIfSupported();
  setFocusAreasIfSupported();
  setMeteringAreasIfSupported();
  String pictureSize=mPreferences.getString(CameraSettings.KEY_PICTURE_SIZE,null);
  if (pictureSize == null) {
    CameraSettings.initialCameraPictureSize(mActivity,mParameters);
  }
 else {
    Size old_size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + old_size.width + ""String_Node_Str""+ old_size.height);
    List<Size> supported=mParameters.getSupportedPictureSizes();
    CameraSettings.setCameraPictureSize(pictureSize,supported,mParameters);
    Size size=mParameters.getPictureSize();
    Log.v(TAG,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (old_size != null && size != null) {
      if (!size.equals(old_size) && mCameraState != PREVIEW_STOPPED) {
        Log.v(TAG,""String_Node_Str"");
        mRestartPreview=true;
      }
    }
  }
  Size size=mParameters.getPictureSize();
  List<Size> sizes=mParameters.getSupportedPreviewSizes();
  Size optimalSize=CameraUtil.getOptimalPreviewSize(mActivity,sizes,(double)size.width / size.height);
  Size original=mParameters.getPreviewSize();
  if (!original.equals(optimalSize)) {
    mParameters.setPreviewSize(optimalSize.width,optimalSize.height);
    if (mHandler.getLooper() == Looper.myLooper()) {
      setupPreview();
    }
 else {
      mCameraDevice.setParameters(mParameters);
    }
    mParameters=mCameraDevice.getParameters();
    Log.v(TAG,""String_Node_Str"");
    mRestartPreview=true;
  }
  Log.v(TAG,""String_Node_Str"" + optimalSize.width + ""String_Node_Str""+ optimalSize.height);
  String onValue=mActivity.getString(R.string.setting_on_value);
  String hdr=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR,mActivity.getString(R.string.pref_camera_hdr_default));
  String hdrPlus=mPreferences.getString(CameraSettings.KEY_CAMERA_HDR_PLUS,mActivity.getString(R.string.pref_camera_hdr_plus_default));
  boolean hdrOn=onValue.equals(hdr);
  boolean hdrPlusOn=onValue.equals(hdrPlus);
  boolean doGcamModeSwitch=false;
  if (hdrPlusOn && GcamHelper.hasGcamCapture()) {
    doGcamModeSwitch=true;
  }
 else {
    if (hdrOn) {
      mSceneMode=CameraUtil.SCENE_MODE_HDR;
      if (!(Parameters.SCENE_MODE_AUTO).equals(mParameters.getSceneMode()) && !(Parameters.SCENE_MODE_HDR).equals(mParameters.getSceneMode())) {
        mParameters.setSceneMode(Parameters.SCENE_MODE_AUTO);
        mCameraDevice.setParameters(mParameters);
        mParameters=mCameraDevice.getParameters();
      }
    }
 else {
      mSceneMode=mPreferences.getString(CameraSettings.KEY_SCENE_MODE,mActivity.getString(R.string.pref_camera_scenemode_default));
    }
  }
  if (CameraUtil.isSupported(mSceneMode,mParameters.getSupportedSceneModes())) {
    if (!mParameters.getSceneMode().equals(mSceneMode)) {
      mParameters.setSceneMode(mSceneMode);
      mCameraDevice.setParameters(mParameters);
      mParameters=mCameraDevice.getParameters();
    }
  }
 else {
    mSceneMode=mParameters.getSceneMode();
    if (mSceneMode == null) {
      mSceneMode=Parameters.SCENE_MODE_AUTO;
    }
  }
  int jpegQuality=CameraProfile.getJpegEncodingQualityParameter(mCameraId,CameraProfile.QUALITY_HIGH);
  mParameters.setJpegQuality(jpegQuality);
  int value=CameraSettings.readExposure(mPreferences);
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (value >= min && value <= max) {
    mParameters.setExposureCompensation(value);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + value);
  }
  if (Parameters.SCENE_MODE_AUTO.equals(mSceneMode)) {
    String flashMode=mPreferences.getString(CameraSettings.KEY_FLASH_MODE,mActivity.getString(R.string.pref_camera_flashmode_default));
    List<String> supportedFlash=mParameters.getSupportedFlashModes();
    if (CameraUtil.isSupported(flashMode,supportedFlash)) {
      mParameters.setFlashMode(flashMode);
    }
 else {
      flashMode=mParameters.getFlashMode();
      if (flashMode == null) {
        flashMode=mActivity.getString(R.string.pref_camera_flashmode_no_flash);
      }
    }
    String whiteBalance=mPreferences.getString(CameraSettings.KEY_WHITE_BALANCE,mActivity.getString(R.string.pref_camera_whitebalance_default));
    if (CameraUtil.isSupported(whiteBalance,mParameters.getSupportedWhiteBalance())) {
      mParameters.setWhiteBalance(whiteBalance);
    }
 else {
      whiteBalance=mParameters.getWhiteBalance();
      if (whiteBalance == null) {
        whiteBalance=Parameters.WHITE_BALANCE_AUTO;
      }
    }
    mFocusManager.overrideFocusMode(null);
    mParameters.setFocusMode(mFocusManager.getFocusMode());
  }
 else {
    mFocusManager.overrideFocusMode(mParameters.getFocusMode());
    if (hdrOn)     mParameters.setFlashMode(Parameters.FLASH_MODE_OFF);
  }
  if (mContinuousFocusSupported && ApiHelper.HAS_AUTO_FOCUS_MOVE_CALLBACK) {
    updateAutoFocusMoveCallback();
  }
  qcomUpdateCameraParametersPreference();
  return doGcamModeSwitch;
}"
38277,"@Override public void onResume(){
  if (Settings.System.getInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 0) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    mAutoRotateScreen=false;
  }
 else {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);
    mAutoRotateScreen=true;
  }
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
}","@Override public void onResume(){
  if (Settings.System.getInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 0) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    mAutoRotateScreen=false;
  }
 else {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);
    mAutoRotateScreen=true;
  }
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}"
38278,"@Override public void onResume(){
  if (Settings.System.getInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 0) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    mAutoRotateScreen=false;
  }
 else {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);
    mAutoRotateScreen=true;
  }
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
}","@Override public void onResume(){
  if (Settings.System.getInt(getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 0) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    mAutoRotateScreen=false;
  }
 else {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);
    mAutoRotateScreen=true;
  }
  UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_FOREGROUNDED,this.getClass().getSimpleName());
  mOrientationListener.enable();
  mCurrentModule.onResumeBeforeSuper();
  super.onResume();
  mCurrentModule.onResumeAfterSuper();
  setSwipingEnabled(true);
  if (mResetToPreviewOnResume) {
    mFilmStripView.getController().goToFirstItem();
  }
  mResetToPreviewOnResume=true;
  if (mLocalVideosObserver.isMediaDataChangedDuringPause() || mLocalImagesObserver.isMediaDataChangedDuringPause()) {
    if (!mSecureCamera) {
      mDataAdapter.requestLoad(getContentResolver());
    }
  }
  mLocalImagesObserver.setActivityPaused(false);
  mLocalVideosObserver.setActivityPaused(false);
  Log.d(TAG,""String_Node_Str"");
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtra(""String_Node_Str"",true);
  sendBroadcast(intent);
}"
38279,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          point[0]=face.leftEye.x + dx;
          point[1]=face.leftEye.y - delta_y / 2;
          point[2]=face.leftEye.x;
          point[3]=face.leftEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          point[0]=face.rightEye.x;
          point[1]=face.rightEye.y - delta_y / 2;
          point[2]=face.rightEye.x;
          point[3]=face.rightEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + gazeRollX;
            point[3]=face.leftEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + gazeRollX;
            point[3]=face.rightEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)) {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y - delta_y + dy;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + delta_y + dy;
            }
 else {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,0,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          point[0]=face.leftEye.x;
          point[1]=face.leftEye.y - delta_y / 2;
          point[2]=face.leftEye.x;
          point[3]=face.leftEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          point[0]=face.rightEye.x;
          point[1]=face.rightEye.y - delta_y / 2;
          point[2]=face.rightEye.x;
          point[3]=face.rightEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + gazeRollX;
            point[3]=face.leftEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + gazeRollX;
            point[3]=face.rightEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)) {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y - delta_y + dy;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + delta_y + dy;
            }
 else {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,0,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38280,"@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          point[0]=face.leftEye.x + dx;
          point[1]=face.leftEye.y - delta_y / 2;
          point[2]=face.leftEye.x;
          point[3]=face.leftEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          point[0]=face.rightEye.x;
          point[1]=face.rightEye.y - delta_y / 2;
          point[2]=face.rightEye.x;
          point[3]=face.rightEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + gazeRollX;
            point[3]=face.leftEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + gazeRollX;
            point[3]=face.rightEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)) {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y - delta_y + dy;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + delta_y + dy;
            }
 else {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,0,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}","@Override protected void onDraw(Canvas canvas){
  if (!mBlocked && (mFaces != null) && (mFaces.length > 0)) {
    int rw, rh;
    rw=mUncroppedWidth;
    rh=mUncroppedHeight;
    if (((rh > rw) && ((mDisplayOrientation == 0) || (mDisplayOrientation == 180))) || ((rw > rh) && ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)))) {
      int temp=rw;
      rw=rh;
      rh=temp;
    }
    CameraUtil.prepareMatrix(mMatrix,mMirror,mDisplayOrientation,rw,rh);
    int dx=(getWidth() - rw) / 2;
    int dy=(getHeight() - rh) / 2;
    canvas.save();
    mMatrix.postRotate(mOrientation);
    canvas.rotate(-mOrientation);
    for (int i=0; i < mFaces.length; i++) {
      if (mFaces[i].score < 50)       continue;
      mRect.set(mFaces[i].rect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mMatrix.mapRect(mRect);
      if (LOGV)       CameraUtil.dumpRect(mRect,""String_Node_Str"");
      mPaint.setColor(mColor);
      mRect.offset(dx,dy);
      canvas.drawOval(mRect,mPaint);
      if (mFaces[i] instanceof ExtendedFace) {
        ExtendedFace face=(ExtendedFace)mFaces[i];
        float[] point=new float[4];
        int delta_x=mFaces[i].rect.width() / 12;
        int delta_y=mFaces[i].rect.height() / 12;
        Log.e(TAG,""String_Node_Str"" + face.getLeftEyeBlinkDegree() + ""String_Node_Str""+ face.getRightEyeBlinkDegree()+ ""String_Node_Str"");
        if (face.leftEye != null) {
          point[0]=face.leftEye.x;
          point[1]=face.leftEye.y - delta_y / 2;
          point[2]=face.leftEye.x;
          point[3]=face.leftEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getLeftEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.rightEye != null) {
          point[0]=face.rightEye.x;
          point[1]=face.rightEye.y - delta_y / 2;
          point[2]=face.rightEye.x;
          point[3]=face.rightEye.y + delta_y / 2;
          mMatrix.mapPoints(point);
          if (face.getRightEyeBlinkDegree() >= blink_threshold) {
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.getLeftRightGazeDegree() != 0 || face.getTopBottomGazeDegree() != 0) {
          double length=Math.sqrt((face.leftEye.x - face.rightEye.x) * (face.leftEye.x - face.rightEye.x) + (face.leftEye.y - face.rightEye.y) * (face.leftEye.y - face.rightEye.y)) / 2.0;
          double nGazeYaw=-face.getLeftRightGazeDegree();
          double nGazePitch=-face.getTopBottomGazeDegree();
          float gazeRollX=(float)((-Math.sin(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI) + Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          float gazeRollY=(float)((Math.sin(-nGazeYaw / 180.0 * Math.PI) * Math.sin(-face.getRollDirection() / 180.0 * Math.PI) - Math.sin(nGazePitch / 180.0 * Math.PI) * Math.cos(nGazeYaw / 180.0 * Math.PI) * Math.cos(-face.getRollDirection() / 180.0 * Math.PI)) * (-length) + 0.5);
          if (face.getLeftEyeBlinkDegree() < blink_threshold) {
            point[0]=face.leftEye.x;
            point[1]=face.leftEye.y;
            point[2]=face.leftEye.x + gazeRollX;
            point[3]=face.leftEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
          if (face.getRightEyeBlinkDegree() < blink_threshold) {
            point[0]=face.rightEye.x;
            point[1]=face.rightEye.y;
            point[2]=face.rightEye.x + gazeRollX;
            point[3]=face.rightEye.y + gazeRollY;
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
        }
        if (face.mouth != null) {
          Log.e(TAG,""String_Node_Str"" + face.getSmileDegree() + ""String_Node_Str""+ face.getSmileScore());
          if (face.getSmileDegree() < smile_threashold_no_smile) {
            if ((mDisplayOrientation == 90) || (mDisplayOrientation == 270)) {
              point[0]=face.mouth.x;
              point[1]=face.mouth.y - delta_y + dy;
              point[2]=face.mouth.x;
              point[3]=face.mouth.y + delta_y + dy;
            }
 else {
              point[0]=face.mouth.x + dx - delta_x;
              point[1]=face.mouth.y;
              point[2]=face.mouth.x + dx + delta_x;
              point[3]=face.mouth.y;
            }
            mMatrix.mapPoints(point);
            canvas.drawLine(point[0] + dx,point[1] + dy,point[2] + dx,point[3] + dy,mPaint);
          }
 else           if (face.getSmileDegree() < smile_threashold_small_smile) {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawArc(mRect,0,180,true,mPaint);
          }
 else {
            mRect.set(face.mouth.x - delta_x,face.mouth.y - delta_y,face.mouth.x + delta_x,face.mouth.y + delta_y);
            mMatrix.mapRect(mRect);
            mRect.offset(dx,dy);
            canvas.drawOval(mRect,mPaint);
          }
        }
      }
    }
    canvas.restore();
  }
  super.onDraw(canvas);
}"
38281,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ListPreference pref=mListItem.get(position);
  int viewLayoutId=getSettingLayoutId(pref);
  InLineSettingItem view=(InLineSettingItem)convertView;
  if (view == null) {
    view=(InLineSettingItem)mInflater.inflate(viewLayoutId,parent,false);
  }
  view.initialize(pref);
  view.setSettingChangedListener(MoreSettingPopup.this);
  if (position >= 0 && position < mEnabled.length) {
    view.setEnabled(mEnabled[position]);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mEnabled.length + ""String_Node_Str""+ position);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ListPreference pref=mListItem.get(position);
  int viewLayoutId=getSettingLayoutId(pref);
  InLineSettingItem view=(InLineSettingItem)convertView;
  view=(InLineSettingItem)mInflater.inflate(viewLayoutId,parent,false);
  view.initialize(pref);
  view.setSettingChangedListener(MoreSettingPopup.this);
  if (position >= 0 && position < mEnabled.length) {
    view.setEnabled(mEnabled[position]);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mEnabled.length + ""String_Node_Str""+ position);
  }
  return view;
}"
38282,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ListPreference pref=mListItem.get(position);
  int viewLayoutId=getSettingLayoutId(pref);
  InLineSettingItem view=(InLineSettingItem)convertView;
  if (view == null) {
    view=(InLineSettingItem)mInflater.inflate(viewLayoutId,parent,false);
  }
  view.initialize(pref);
  view.setSettingChangedListener(MoreSettingPopup.this);
  if (position >= 0 && position < mEnabled.length) {
    view.setEnabled(mEnabled[position]);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mEnabled.length + ""String_Node_Str""+ position);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ListPreference pref=mListItem.get(position);
  int viewLayoutId=getSettingLayoutId(pref);
  InLineSettingItem view=(InLineSettingItem)convertView;
  view=(InLineSettingItem)mInflater.inflate(viewLayoutId,parent,false);
  view.initialize(pref);
  view.setSettingChangedListener(MoreSettingPopup.this);
  if (position >= 0 && position < mEnabled.length) {
    view.setEnabled(mEnabled[position]);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + mEnabled.length + ""String_Node_Str""+ position);
  }
  return view;
}"
38283,"@Override public void setParameters(Parameters params){
  if (params == null) {
    Log.v(TAG,""String_Node_Str"");
    return;
  }
  mCameraHandler.obtainMessage(SET_PARAMETERS,params.flatten()).sendToTarget();
}","@Override public void setParameters(Parameters params){
  if (params == null) {
    Log.v(TAG,""String_Node_Str"");
    return;
  }
  mSig.close();
  mCameraHandler.obtainMessage(SET_PARAMETERS,params).sendToTarget();
  mSig.block();
}"
38284,"/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      mCamera=android.hardware.Camera.open(msg.arg1);
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
mCamera.release();
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
mCamera.startPreview();
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mParamsToSet.unflatten((String)msg.obj);
mCamera.setParameters(mParamsToSet);
return;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}","/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      mCamera=android.hardware.Camera.open(msg.arg1);
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
mCamera.release();
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
mCamera.startPreview();
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}"
38285,"@Override public void setParameters(Parameters params){
  if (params == null) {
    Log.v(TAG,""String_Node_Str"");
    return;
  }
  mCameraHandler.obtainMessage(SET_PARAMETERS,params.flatten()).sendToTarget();
}","@Override public void setParameters(Parameters params){
  if (params == null) {
    Log.v(TAG,""String_Node_Str"");
    return;
  }
  mSig.close();
  mCameraHandler.obtainMessage(SET_PARAMETERS,params).sendToTarget();
  mSig.block();
}"
38286,"/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      mCamera=android.hardware.Camera.open(msg.arg1);
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
mCamera.release();
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
mCamera.startPreview();
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mParamsToSet.unflatten((String)msg.obj);
mCamera.setParameters(mParamsToSet);
return;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}","/** 
 * This method does not deal with the API level check.  Everyone should check first for supported operations before sending message to this handler.
 */
@Override public void handleMessage(final Message msg){
  try {
switch (msg.what) {
case OPEN_CAMERA:
      mCamera=android.hardware.Camera.open(msg.arg1);
    if (mCamera != null) {
      mParametersIsDirty=true;
      if (mParamsToSet == null) {
        mParamsToSet=mCamera.getParameters();
      }
    }
 else {
      if (msg.obj != null) {
        ((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
      }
    }
  return;
case RELEASE:
mCamera.release();
mCamera=null;
return;
case RECONNECT:
mReconnectIOException=null;
try {
mCamera.reconnect();
}
 catch (IOException ex) {
mReconnectIOException=ex;
}
return;
case UNLOCK:
mCamera.unlock();
return;
case LOCK:
mCamera.lock();
return;
case SET_PREVIEW_TEXTURE_ASYNC:
setPreviewTexture(msg.obj);
return;
case SET_PREVIEW_DISPLAY_ASYNC:
try {
mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);
}
 catch (IOException e) {
throw new RuntimeException(e);
}
return;
case START_PREVIEW_ASYNC:
mCamera.startPreview();
return;
case STOP_PREVIEW:
mCamera.stopPreview();
return;
case SET_PREVIEW_CALLBACK_WITH_BUFFER:
mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);
return;
case ADD_CALLBACK_BUFFER:
mCamera.addCallbackBuffer((byte[])msg.obj);
return;
case AUTO_FOCUS:
mCamera.autoFocus((AutoFocusCallback)msg.obj);
return;
case CANCEL_AUTO_FOCUS:
mCamera.cancelAutoFocus();
return;
case SET_AUTO_FOCUS_MOVE_CALLBACK:
setAutoFocusMoveCallback(mCamera,msg.obj);
return;
case SET_DISPLAY_ORIENTATION:
mCamera.setDisplayOrientation(msg.arg1);
return;
case SET_ZOOM_CHANGE_LISTENER:
mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);
return;
case SET_FACE_DETECTION_LISTENER:
setFaceDetectionListener((FaceDetectionListener)msg.obj);
return;
case START_FACE_DETECTION:
startFaceDetection();
return;
case STOP_FACE_DETECTION:
stopFaceDetection();
return;
case SET_ERROR_CALLBACK:
mCamera.setErrorCallback((ErrorCallback)msg.obj);
return;
case SET_PARAMETERS:
mParametersIsDirty=true;
mCamera.setParameters((Parameters)msg.obj);
mSig.open();
break;
case GET_PARAMETERS:
if (mParametersIsDirty) {
mParameters=mCamera.getParameters();
mParametersIsDirty=false;
}
return;
case SET_PREVIEW_CALLBACK:
mCamera.setPreviewCallback((PreviewCallback)msg.obj);
return;
case ENABLE_SHUTTER_SOUND:
enableShutterSound((msg.arg1 == 1) ? true : false);
return;
case REFRESH_PARAMETERS:
mParametersIsDirty=true;
return;
case SET_HISTOGRAM_MODE:
mCamera.setHistogramMode((CameraDataCallback)msg.obj);
break;
case SEND_HISTOGRAM_DATA:
mCamera.sendHistogramData();
break;
case SET_LONGSHOT:
mCamera.setLongshot((Boolean)msg.obj);
break;
default :
throw new RuntimeException(""String_Node_Str"" + msg.what);
}
}
 catch (RuntimeException e) {
if (msg.what != RELEASE && mCamera != null) {
try {
mCamera.release();
}
 catch (Exception ex) {
Log.e(TAG,""String_Node_Str"");
}
mCamera=null;
}
 else if (mCamera == null) {
if (msg.what == OPEN_CAMERA) {
if (msg.obj != null) {
((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
return;
}
throw e;
}
}"
38287,"/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
  }
}","/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
    mTimeToHide=System.currentTimeMillis() + SHOW_PROGRESS_X_ADDITIONAL_MS;
  }
}"
38288,"/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360) {
    if (showProgressXMoreFrames <= 0) {
      showProgressXMoreFrames=SHOW_PROGRESS_X_ADDITIONAL_FRAMES;
    }
 else {
      if (--showProgressXMoreFrames == 0) {
        mVisible=false;
        if (mVisibilityListener != null) {
          mVisibilityListener.onHidden();
        }
      }
    }
  }
}","/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360 && System.currentTimeMillis() > mTimeToHide) {
    mVisible=false;
    if (mVisibilityListener != null) {
      mVisibilityListener.onHidden();
    }
  }
}"
38289,"/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
  }
}","/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
    mTimeToHide=System.currentTimeMillis() + SHOW_PROGRESS_X_ADDITIONAL_MS;
  }
}"
38290,"/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360) {
    if (showProgressXMoreFrames <= 0) {
      showProgressXMoreFrames=SHOW_PROGRESS_X_ADDITIONAL_FRAMES;
    }
 else {
      if (--showProgressXMoreFrames == 0) {
        mVisible=false;
        if (mVisibilityListener != null) {
          mVisibilityListener.onHidden();
        }
      }
    }
  }
}","/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360 && System.currentTimeMillis() > mTimeToHide) {
    mVisible=false;
    if (mVisibilityListener != null) {
      mVisibilityListener.onHidden();
    }
  }
}"
38291,"/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
  }
}","/** 
 * Shows a progress indicator. If the progress is '100', the progress indicator will be hidden.
 * @param percent the progress in percent (0-100).
 */
public void setProgress(int percent){
  percent=Math.min(100,Math.max(percent,0));
  mProgressAngleDegrees=(int)((360f / 100) * percent);
  if (percent < 100) {
    mVisible=true;
    mTimeToHide=System.currentTimeMillis() + SHOW_PROGRESS_X_ADDITIONAL_MS;
  }
}"
38292,"/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360) {
    if (showProgressXMoreFrames <= 0) {
      showProgressXMoreFrames=SHOW_PROGRESS_X_ADDITIONAL_FRAMES;
    }
 else {
      if (--showProgressXMoreFrames == 0) {
        mVisible=false;
        if (mVisibilityListener != null) {
          mVisibilityListener.onHidden();
        }
      }
    }
  }
}","/** 
 * Draw the current progress (if < 100%) centered at the given location.
 */
public void onDraw(Canvas canvas,int centerX,int centerY){
  if (!mVisible) {
    return;
  }
  mArcBounds=new RectF(centerX - mProgressRadius,centerY - mProgressRadius,centerX + mProgressRadius,centerY + mProgressRadius);
  canvas.drawCircle(centerX,centerY,mProgressRadius,mProgressBasePaint);
  canvas.drawArc(mArcBounds,-90,mProgressAngleDegrees,false,mProgressPaint);
  if (mProgressAngleDegrees == 360 && System.currentTimeMillis() > mTimeToHide) {
    mVisible=false;
    if (mVisibilityListener != null) {
      mVisibilityListener.onHidden();
    }
  }
}"
38293,"@Override public void onListPrefChanged(ListPreference pref){
  if (mPopup1 != null && mPopup2 != null && mPopup3 != null) {
    if (mPopupStatus == POPUP_SECOND_LEVEL) {
      mUI.dismissPopup();
    }
  }
  onSettingChanged(pref);
}","@Override public void onListPrefChanged(ListPreference pref){
  if (mPopup != null && mPopup1 != null && mPopup2 != null && mPopup3 != null) {
    mUI.dismissPopup();
  }
  onSettingChanged(pref);
}"
38294,"@Override public void onListPrefChanged(ListPreference pref){
  if (mPopup1 != null && mPopup2 != null) {
    if (mPopupStatus == POPUP_SECOND_LEVEL) {
      mUI.dismissPopup(true);
    }
  }
  super.onSettingChanged(pref);
}","@Override public void onListPrefChanged(ListPreference pref){
  if (mPopup1 != null && mPopup2 != null) {
    if (mPopupStatus == POPUP_SECOND_LEVEL) {
      mUI.dismissPopup(true);
      mPopup1.reloadPreference();
      mPopup2.reloadPreference();
    }
  }
  super.onSettingChanged(pref);
}"
38295,"public void popupDismissed(boolean topPopupOnly){
  if (mPopupStatus == POPUP_SECOND_LEVEL) {
    initializePopup();
    mPopupStatus=POPUP_FIRST_LEVEL;
    if (topPopupOnly)     mUI.showPopup(mPopup);
  }
}","public void popupDismissed(boolean topPopupOnly){
  if (mPopupStatus == POPUP_SECOND_LEVEL) {
    initializePopup();
    mPopupStatus=POPUP_FIRST_LEVEL;
    if (topPopupOnly) {
      if (popupNum == 1)       mUI.showPopup(mPopup1);
 else       if (popupNum == 2)       mUI.showPopup(mPopup2);
    }
  }
 else {
    initializePopup();
  }
}"
38296,"public void initialize(PreferenceGroup group){
  super.initialize(group);
  mPopup=null;
  mPopup1=null;
  mPopup2=null;
  mPopupStatus=POPUP_NONE;
  PieItem item=null;
  mOtherKeys1=new String[]{CameraSettings.KEY_VIDEO_EFFECT,CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,CameraSettings.KEY_VIDEO_QUALITY,CameraSettings.KEY_VIDEO_ENCODER,CameraSettings.KEY_AUDIO_ENCODER,CameraSettings.KEY_VIDEO_DURATION,CameraSettings.KEY_RECORD_LOCATION};
  mOtherKeys2=new String[]{CameraSettings.KEY_COLOR_EFFECT,CameraSettings.KEY_VIDEO_HDR,CameraSettings.KEY_POWER_MODE,CameraSettings.KEY_WHITE_BALANCE,CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,CameraSettings.KEY_VIDEOCAMERA_FLASH_MODE};
  PieItem item1=makeItem(R.drawable.ic_settings_holo_light);
  item1.setLabel(mActivity.getResources().getString(R.string.camera_menu_more_label));
  item1.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    PieItem item){
      if (mPopup1 == null || mPopupStatus != POPUP_FIRST_LEVEL) {
        initializePopup();
        mPopupStatus=POPUP_FIRST_LEVEL;
      }
      mUI.showPopup(mPopup1);
    }
  }
);
  mRenderer.addItem(item1);
  PieItem item2=makeItem(R.drawable.ic_settings_holo_light);
  item2.setLabel(mActivity.getResources().getString(R.string.camera_menu_more_label));
  item2.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    PieItem item){
      if (mPopup2 == null || mPopupStatus != POPUP_FIRST_LEVEL) {
        initializePopup();
        mPopupStatus=POPUP_FIRST_LEVEL;
      }
      mUI.showPopup(mPopup2);
    }
  }
);
  mRenderer.addItem(item2);
  if (group.findPreference(CameraSettings.KEY_CAMERA_ID) != null) {
    item=makeItem(R.drawable.ic_switch_back);
    IconListPreference lpref=(IconListPreference)group.findPreference(CameraSettings.KEY_CAMERA_ID);
    item.setLabel(lpref.getLabel());
    item.setImageResource(mActivity,((IconListPreference)lpref).getIconIds()[lpref.findIndexOfValue(lpref.getValue())]);
    final PieItem fitem=item;
    item.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      PieItem item){
        ListPreference pref=mPreferenceGroup.findPreference(CameraSettings.KEY_CAMERA_ID);
        if (pref != null) {
          int index=pref.findIndexOfValue(pref.getValue());
          CharSequence[] values=pref.getEntryValues();
          index=(index + 1) % values.length;
          int newCameraId=Integer.parseInt((String)values[index]);
          fitem.setImageResource(mActivity,((IconListPreference)pref).getIconIds()[index]);
          fitem.setLabel(pref.getLabel());
          mListener.onCameraPickerClicked(newCameraId);
        }
      }
    }
);
    mRenderer.addItem(item);
  }
}","public void initialize(PreferenceGroup group){
  super.initialize(group);
  mPopup1=null;
  mPopup2=null;
  popupNum=0;
  mPopupStatus=POPUP_NONE;
  PieItem item=null;
  mOtherKeys1=new String[]{CameraSettings.KEY_VIDEO_EFFECT,CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL,CameraSettings.KEY_VIDEO_QUALITY,CameraSettings.KEY_VIDEO_ENCODER,CameraSettings.KEY_AUDIO_ENCODER,CameraSettings.KEY_VIDEO_DURATION,CameraSettings.KEY_RECORD_LOCATION};
  mOtherKeys2=new String[]{CameraSettings.KEY_COLOR_EFFECT,CameraSettings.KEY_VIDEO_HDR,CameraSettings.KEY_POWER_MODE,CameraSettings.KEY_WHITE_BALANCE,CameraSettings.KEY_VIDEO_HIGH_FRAME_RATE,CameraSettings.KEY_VIDEOCAMERA_FLASH_MODE};
  PieItem item1=makeItem(R.drawable.ic_settings_holo_light);
  item1.setLabel(mActivity.getResources().getString(R.string.camera_menu_more_label));
  item1.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    PieItem item){
      if (mPopup1 == null || mPopupStatus != POPUP_FIRST_LEVEL) {
        initializePopup();
        mPopupStatus=POPUP_FIRST_LEVEL;
      }
      mUI.showPopup(mPopup1);
      popupNum=1;
    }
  }
);
  mRenderer.addItem(item1);
  PieItem item2=makeItem(R.drawable.ic_settings_holo_light);
  item2.setLabel(mActivity.getResources().getString(R.string.camera_menu_more_label));
  item2.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    PieItem item){
      if (mPopup2 == null || mPopupStatus != POPUP_FIRST_LEVEL) {
        initializePopup();
        mPopupStatus=POPUP_FIRST_LEVEL;
      }
      mUI.showPopup(mPopup2);
      popupNum=2;
    }
  }
);
  mRenderer.addItem(item2);
  if (group.findPreference(CameraSettings.KEY_CAMERA_ID) != null) {
    item=makeItem(R.drawable.ic_switch_back);
    IconListPreference lpref=(IconListPreference)group.findPreference(CameraSettings.KEY_CAMERA_ID);
    item.setLabel(lpref.getLabel());
    item.setImageResource(mActivity,((IconListPreference)lpref).getIconIds()[lpref.findIndexOfValue(lpref.getValue())]);
    final PieItem fitem=item;
    item.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      PieItem item){
        ListPreference pref=mPreferenceGroup.findPreference(CameraSettings.KEY_CAMERA_ID);
        if (pref != null) {
          int index=pref.findIndexOfValue(pref.getValue());
          CharSequence[] values=pref.getEntryValues();
          index=(index + 1) % values.length;
          int newCameraId=Integer.parseInt((String)values[index]);
          fitem.setImageResource(mActivity,((IconListPreference)pref).getIconIds()[index]);
          fitem.setLabel(pref.getLabel());
          mListener.onCameraPickerClicked(newCameraId);
        }
      }
    }
);
    mRenderer.addItem(item);
  }
}"
38297,"@Override public void onPreferenceClicked(ListPreference pref){
  if (mPopupStatus != POPUP_FIRST_LEVEL)   return;
  LayoutInflater inflater=(LayoutInflater)mActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL.equals(pref.getKey())) {
    TimeIntervalPopup timeInterval=(TimeIntervalPopup)inflater.inflate(R.layout.time_interval_popup,null,false);
    timeInterval.initialize((IconListPreference)pref);
    timeInterval.setSettingChangedListener(this);
    mUI.dismissPopup(true);
    mPopup=timeInterval;
  }
 else {
    ListPrefSettingPopup basic=(ListPrefSettingPopup)inflater.inflate(R.layout.list_pref_setting_popup,null,false);
    basic.initialize(pref);
    basic.setSettingChangedListener(this);
    mUI.dismissPopup(true);
    mPopup=basic;
  }
  mUI.showPopup(mPopup);
  mPopupStatus=POPUP_SECOND_LEVEL;
}","@Override public void onPreferenceClicked(ListPreference pref){
  if (mPopupStatus != POPUP_FIRST_LEVEL)   return;
  LayoutInflater inflater=(LayoutInflater)mActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (CameraSettings.KEY_VIDEO_TIME_LAPSE_FRAME_INTERVAL.equals(pref.getKey())) {
    TimeIntervalPopup timeInterval=(TimeIntervalPopup)inflater.inflate(R.layout.time_interval_popup,null,false);
    timeInterval.initialize((IconListPreference)pref);
    timeInterval.setSettingChangedListener(this);
    mUI.dismissPopup(true);
    mPopup1=timeInterval;
  }
 else {
    ListPrefSettingPopup basic=(ListPrefSettingPopup)inflater.inflate(R.layout.list_pref_setting_popup,null,false);
    basic.initialize(pref);
    basic.setSettingChangedListener(this);
    mUI.dismissPopup(true);
    mPopup1=basic;
  }
  mUI.showPopup(mPopup1);
  mPopupStatus=POPUP_SECOND_LEVEL;
}"
38298,"@Override public void overrideSettings(final String... keyvalues){
  super.overrideSettings(keyvalues);
  if (mPopup == null || mPopupStatus != POPUP_FIRST_LEVEL) {
    mPopupStatus=POPUP_FIRST_LEVEL;
    initializePopup();
  }
  ((MoreSettingPopup)mPopup).overrideSettings(keyvalues);
}","@Override public void overrideSettings(final String... keyvalues){
  super.overrideSettings(keyvalues);
  if (((mPopup1 == null) && (mPopup2 == null)) || mPopupStatus != POPUP_FIRST_LEVEL) {
    mPopupStatus=POPUP_FIRST_LEVEL;
    initializePopup();
  }
  ((MoreSettingPopup)mPopup1).overrideSettings(keyvalues);
  ((MoreSettingPopup)mPopup2).overrideSettings(keyvalues);
}"
38299,"@Override protected Bitmap doInBackground(Void... params){
  Bitmap bitmap=CameraUtil.downSample(mData,DOWN_SAMPLE_FACTOR);
  if (mOrientation != 0 || mMirror) {
    Matrix m=new Matrix();
    m.preRotate(mOrientation);
    if (mMirror) {
      m.setScale(-1f,1f);
    }
    return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,false);
  }
  return bitmap;
}","@Override protected Bitmap doInBackground(Void... params){
  Bitmap bitmap=CameraUtil.downSample(mData,DOWN_SAMPLE_FACTOR);
  if (mOrientation != 0 || mMirror) {
    Matrix m=new Matrix();
    if (mMirror) {
      m.setScale(-1f,1f);
    }
    m.preRotate(mOrientation);
    return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,false);
  }
  return bitmap;
}"
38300,"@Override public void stopPreview(){
  if (mCameraDevice != null && mCameraState != PREVIEW_STOPPED) {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.stopPreview();
    mFaceDetectionStarted=false;
  }
  setCameraState(PREVIEW_STOPPED);
  if (mFocusManager != null)   mFocusManager.onPreviewStopped();
}","@Override public void stopPreview(){
  if (mCameraDevice != null && mCameraState != PREVIEW_STOPPED) {
    Log.v(TAG,""String_Node_Str"");
    mCameraDevice.stopPreview();
  }
  setCameraState(PREVIEW_STOPPED);
  if (mFocusManager != null)   mFocusManager.onPreviewStopped();
}"
38301,"private void startCameraPreview(){
  if (mCameraDevice == null) {
    return;
  }
  if (mUI.getSurfaceTexture() == null) {
    return;
  }
synchronized (mRendererLock) {
    if (mCameraTexture == null)     return;
    if (mCameraState != PREVIEW_STOPPED)     stopCameraPreview();
    mCameraDevice.setDisplayOrientation(0);
    mCameraTexture.setOnFrameAvailableListener(this);
    mCameraDevice.setPreviewTexture(mCameraTexture);
  }
  mCameraDevice.startPreview();
  mCameraState=PREVIEW_ACTIVE;
}","private void startCameraPreview(){
  if (mCameraDevice == null) {
    return;
  }
  if (mUI.getSurfaceTexture() == null) {
    return;
  }
synchronized (mRendererLock) {
    if (mCameraTexture == null)     return;
    if (mCameraState != PREVIEW_STOPPED)     stopCameraPreview();
    if (mCameraOrientation == 0)     mCameraDevice.setDisplayOrientation(270);
 else     mCameraDevice.setDisplayOrientation(0);
    if (mCameraTexture != null)     mCameraTexture.setOnFrameAvailableListener(this);
    mCameraDevice.setPreviewTexture(mCameraTexture);
  }
  mCameraDevice.startPreview();
  mCameraState=PREVIEW_ACTIVE;
}"
38302,"private int getCaptureOrientation(){
  int orientation;
  if (mUsingFrontCamera) {
    orientation=(mDeviceOrientationAtCapture - mCameraOrientation + 360) % 360;
  }
 else {
    orientation=(mDeviceOrientationAtCapture + mCameraOrientation) % 360;
  }
  return orientation;
}","private int getCaptureOrientation(){
  int orientation;
  int cameraOrientation=mCameraOrientation;
  if (mDeviceOrientationAtCapture == 270 || mDeviceOrientationAtCapture == 90) {
    if (mCameraOrientation == 0)     cameraOrientation=180;
  }
  if (mUsingFrontCamera) {
    orientation=(mDeviceOrientationAtCapture - cameraOrientation + 360) % 360;
  }
 else {
    orientation=(mDeviceOrientationAtCapture + cameraOrientation) % 360;
  }
  return orientation;
}"
38303,"private void startCameraPreview(){
  if (mCameraDevice == null) {
    return;
  }
  if (mUI.getSurfaceTexture() == null) {
    return;
  }
synchronized (mRendererLock) {
    if (mCameraTexture == null)     return;
    if (mCameraState != PREVIEW_STOPPED)     stopCameraPreview();
    if (mCameraOrientation == 0)     mCameraDevice.setDisplayOrientation(270);
 else     mCameraDevice.setDisplayOrientation(0);
    if (mCameraTexture != null)     mCameraTexture.setOnFrameAvailableListener(this);
    mCameraDevice.setPreviewTexture(mCameraTexture);
  }
  mCameraDevice.startPreview();
  mCameraState=PREVIEW_ACTIVE;
}","private void startCameraPreview(){
  if (mCameraDevice == null) {
    return;
  }
  if (mUI.getSurfaceTexture() == null) {
    return;
  }
synchronized (mRendererLock) {
    if (mCameraTexture == null)     return;
    if (mCameraState != PREVIEW_STOPPED)     stopCameraPreview();
    mPanoAngle=(mCameraOrientation - 90 + 360) % 360;
    mCameraDevice.setDisplayOrientation(mPanoAngle);
    if (mCameraTexture != null)     mCameraTexture.setOnFrameAvailableListener(this);
    mCameraDevice.setPreviewTexture(mCameraTexture);
  }
  mCameraDevice.startPreview();
  mCameraState=PREVIEW_ACTIVE;
}"
38304,"private int getCaptureOrientation(){
  int orientation;
  int cameraOrientation=mCameraOrientation;
  if (mDeviceOrientationAtCapture == 270 || mDeviceOrientationAtCapture == 90) {
    if (mCameraOrientation == 0)     cameraOrientation=180;
  }
  if (mUsingFrontCamera) {
    orientation=(mDeviceOrientationAtCapture - cameraOrientation + 360) % 360;
  }
 else {
    orientation=(mDeviceOrientationAtCapture + cameraOrientation) % 360;
  }
  return orientation;
}","private int getCaptureOrientation(){
  int orientation;
  if (mUsingFrontCamera) {
    orientation=(mDeviceOrientationAtCapture - mCameraOrientation - mPanoAngle + 360) % 360;
  }
 else {
    orientation=(mDeviceOrientationAtCapture + mCameraOrientation - mPanoAngle) % 360;
  }
  return orientation;
}"
38305,"@Override protected Bitmap doInBackground(Void... params){
  Bitmap bitmap=CameraUtil.downSample(mData,DOWN_SAMPLE_FACTOR);
  if (mOrientation != 0 || mMirror) {
    Matrix m=new Matrix();
    m.preRotate(mOrientation);
    if (mMirror) {
      m.setScale(-1f,1f);
    }
    return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,false);
  }
  return bitmap;
}","@Override protected Bitmap doInBackground(Void... params){
  Bitmap bitmap=CameraUtil.downSample(mData,DOWN_SAMPLE_FACTOR);
  if (mOrientation != 0 || mMirror) {
    Matrix m=new Matrix();
    if (mMirror) {
      m.setScale(-1f,1f);
    }
    m.preRotate(mOrientation);
    return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,false);
  }
  return bitmap;
}"
38306,"/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
}","/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
  mUI.updateOnScreenIndicators(mParameters,mPreferences);
}"
38307,"public boolean isVisible(){
  return mTextureView.getVisibility() == View.VISIBLE;
}","public boolean isVisible(){
  return mCameraControls.getVisibility() == View.VISIBLE;
}"
38308,"/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
}","/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
  mUI.updateOnScreenIndicators(mParameters,mPreferences);
}"
38309,"public boolean isVisible(){
  return mTextureView.getVisibility() == View.VISIBLE;
}","public boolean isVisible(){
  return mCameraControls.getVisibility() == View.VISIBLE;
}"
38310,"/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
}","/** 
 * Used to update the flash mode. Video mode can turn on the flash as torch mode, which we would like to turn on and off when we switching in and out to the preview.
 * @param forceOff whether we want to force the flash off.
 */
private void forceFlashOff(boolean forceOff){
  if (!mPreviewing || mParameters.getFlashMode() == null) {
    return;
  }
  forceFlashOffIfSupported(forceOff);
  mCameraDevice.setParameters(mParameters);
  mUI.updateOnScreenIndicators(mParameters,mPreferences);
}"
38311,"public boolean isVisible(){
  return mTextureView.getVisibility() == View.VISIBLE;
}","public boolean isVisible(){
  return mCameraControls.getVisibility() == View.VISIBLE;
}"
38312,"@Override @OnClickAttr public void onReviewCancelClicked(View v){
  mIsInReviewMode=false;
  if (mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  doReturnToCaller(false);
}","@Override @OnClickAttr public void onReviewCancelClicked(View v){
  if (mIsInReviewMode && mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  mIsInReviewMode=false;
  doReturnToCaller(false);
}"
38313,"@Override @OnClickAttr public void onReviewCancelClicked(View v){
  mIsInReviewMode=false;
  if (mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  doReturnToCaller(false);
}","@Override @OnClickAttr public void onReviewCancelClicked(View v){
  if (mIsInReviewMode && mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  mIsInReviewMode=false;
  doReturnToCaller(false);
}"
38314,"@Override @OnClickAttr public void onReviewCancelClicked(View v){
  mIsInReviewMode=false;
  if (mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  doReturnToCaller(false);
}","@Override @OnClickAttr public void onReviewCancelClicked(View v){
  if (mIsInReviewMode && mCurrentVideoUri != null) {
    mContentResolver.delete(mCurrentVideoUri,null,null);
  }
  mIsInReviewMode=false;
  doReturnToCaller(false);
}"
38315,"@Override public Result doInBackground(Request message){
  RenderingRequest request=((Render)message).request;
  RenderResult result=null;
  mHighresPreviewPipeline.render(request);
  result=new RenderResult();
  result.request=request;
  return result;
}","@Override public Result doInBackground(Request message){
  RenderingRequest request=((Render)message).request;
  RenderResult result=null;
  mHighresPreviewPipeline.renderHighres(request);
  result=new RenderResult();
  result.request=request;
  return result;
}"
38316,"@Override protected void onPostExecute(Boolean result){
  MasterImage.setMaster(mMasterImage);
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  if (null == CachingPipeline.getRenderScriptContext()) {
    Log.v(LOGTAG,""String_Node_Str"");
    return;
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.VISIBLE);
  Bitmap largeBitmap=MasterImage.getImage().getOriginalBitmapLarge();
  mBoundService.setOriginalBitmap(largeBitmap);
  float previewScale=(float)largeBitmap.getWidth() / (float)MasterImage.getImage().getOriginalBounds().width();
  mBoundService.setPreviewScaleFactor(previewScale);
  if (!mShowingTinyPlanet) {
    mCategoryFiltersAdapter.removeTinyPlanet();
  }
  MasterImage.getImage().setOriginalGeometry(largeBitmap);
  mCategoryLooksAdapter.imageLoaded();
  mCategoryBordersAdapter.imageLoaded();
  mCategoryGeometryAdapter.imageLoaded();
  mCategoryFiltersAdapter.imageLoaded();
  mLoadBitmapTask=null;
  if (mOriginalPreset != null) {
    MasterImage.getImage().setLoadedPreset(mOriginalPreset);
    MasterImage.getImage().setPreset(mOriginalPreset,mOriginalPreset.getLastRepresentation(),true);
    mOriginalPreset=null;
  }
  if (mAction == TINY_PLANET_ACTION) {
    showRepresentation(mCategoryFiltersAdapter.getTinyPlanet());
  }
  mLoading=false;
  MasterImage.getImage().notifyGeometryChange();
  LoadHighresBitmapTask highresLoad=new LoadHighresBitmapTask();
  highresLoad.execute();
  super.onPostExecute(result);
}","@Override protected void onPostExecute(Boolean result){
  MasterImage.setMaster(mMasterImage);
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  if (null == CachingPipeline.getRenderScriptContext()) {
    Log.v(LOGTAG,""String_Node_Str"");
    return;
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.VISIBLE);
  Bitmap largeBitmap=MasterImage.getImage().getOriginalBitmapLarge();
  mBoundService.setOriginalBitmap(largeBitmap);
  float previewScale=(float)largeBitmap.getWidth() / (float)MasterImage.getImage().getOriginalBounds().width();
  mBoundService.setPreviewScaleFactor(previewScale);
  if (!mShowingTinyPlanet) {
    mCategoryFiltersAdapter.removeTinyPlanet();
  }
  MasterImage.getImage().setOriginalGeometry(largeBitmap);
  mCategoryLooksAdapter.imageLoaded();
  mCategoryBordersAdapter.imageLoaded();
  mCategoryGeometryAdapter.imageLoaded();
  mCategoryFiltersAdapter.imageLoaded();
  mLoadBitmapTask=null;
  if (mOriginalPreset != null) {
    MasterImage.getImage().setLoadedPreset(mOriginalPreset);
    MasterImage.getImage().setPreset(mOriginalPreset,mOriginalPreset.getLastRepresentation(),true);
    mOriginalPreset=null;
  }
  if (mAction == TINY_PLANET_ACTION) {
    showRepresentation(mCategoryFiltersAdapter.getTinyPlanet());
  }
  MasterImage.getImage().notifyGeometryChange();
  LoadHighresBitmapTask highresLoad=new LoadHighresBitmapTask();
  highresLoad.execute();
  super.onPostExecute(result);
}"
38317,"private void startLoadBitmap(Uri uri){
  mLoading=true;
  final View loading=findViewById(R.id.loading);
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.INVISIBLE);
  loading.setVisibility(View.VISIBLE);
  mShowingTinyPlanet=false;
  mLoadBitmapTask=new LoadBitmapTask();
  mLoadBitmapTask.execute(uri);
}","private void startLoadBitmap(Uri uri){
  final View loading=findViewById(R.id.loading);
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.INVISIBLE);
  loading.setVisibility(View.VISIBLE);
  mShowingTinyPlanet=false;
  mLoadBitmapTask=new LoadBitmapTask();
  mLoadBitmapTask.execute(uri);
}"
38318,"public Bitmap process(Bitmap originalBitmap,Vector<FilterRepresentation> filters,FilterEnvironment environment){
  Bitmap cacheBitmap=originalBitmap;
  if (filters.size() != mSteps.size()) {
    mSteps.clear();
    for (int i=0; i < filters.size(); i++) {
      FilterRepresentation representation=filters.elementAt(i);
      CacheStep step=new CacheStep();
      step.representation=representation.copy();
      mSteps.add(step);
    }
  }
  if (DEBUG) {
    displayFilters(filters);
  }
  int similarUpToIndex=0;
  for (int i=0; i < filters.size(); i++) {
    FilterRepresentation representation=filters.elementAt(i);
    CacheStep step=mSteps.elementAt(i);
    boolean similar=step.representation.equals(representation);
    if (similar) {
      similarUpToIndex=i;
    }
 else {
      break;
    }
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + similarUpToIndex);
  }
  int findBaseImageIndex=similarUpToIndex;
  while (findBaseImageIndex > 0 && mSteps.elementAt(findBaseImageIndex).cache == null) {
    findBaseImageIndex--;
  }
  cacheBitmap=mSteps.elementAt(findBaseImageIndex).cache;
  boolean emptyStack=false;
  if (cacheBitmap == null) {
    emptyStack=true;
    cacheBitmap=originalBitmap.copy(Bitmap.Config.ARGB_8888,true);
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"");
    }
  }
  if (findBaseImageIndex != similarUpToIndex) {
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + findBaseImageIndex + ""String_Node_Str""+ similarUpToIndex);
    }
    if (!emptyStack) {
      cacheBitmap=cacheBitmap.copy(Bitmap.Config.ARGB_8888,true);
    }
    for (int i=findBaseImageIndex; i <= similarUpToIndex; i++) {
      FilterRepresentation representation=filters.elementAt(i);
      cacheBitmap=environment.applyRepresentation(representation,cacheBitmap);
      if (DEBUG) {
        Log.v(LOGTAG,""String_Node_Str"" + i + ""String_Node_Str""+ representation.getName());
      }
    }
    mSteps.elementAt(similarUpToIndex).cache=cacheBitmap;
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + similarUpToIndex + ""String_Node_Str""+ (filters.size() - 1));
  }
  for (int i=similarUpToIndex + 1; i < filters.size(); i++) {
    FilterRepresentation representation=filters.elementAt(i);
    CacheStep currentStep=mSteps.elementAt(i);
    cacheBitmap=cacheBitmap.copy(Bitmap.Config.ARGB_8888,true);
    cacheBitmap=environment.applyRepresentation(representation,cacheBitmap);
    currentStep.representation=representation.copy();
    currentStep.cache=cacheBitmap;
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + i + ""String_Node_Str""+ representation.getName());
    }
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"");
    displayNbBitmapsInCache();
  }
  for (int i=0; i < similarUpToIndex; i++) {
    CacheStep currentStep=mSteps.elementAt(i);
    currentStep.cache=null;
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"");
    displayNbBitmapsInCache();
  }
  return cacheBitmap;
}","public Bitmap process(Bitmap originalBitmap,Vector<FilterRepresentation> filters,FilterEnvironment environment){
  if (filters.size() == 0) {
    return originalBitmap;
  }
  if (filters.size() != mSteps.size()) {
    mSteps.clear();
    for (int i=0; i < filters.size(); i++) {
      FilterRepresentation representation=filters.elementAt(i);
      CacheStep step=new CacheStep();
      step.representation=representation.copy();
      mSteps.add(step);
    }
  }
  if (DEBUG) {
    displayFilters(filters);
  }
  int similarUpToIndex=-1;
  for (int i=0; i < filters.size(); i++) {
    FilterRepresentation representation=filters.elementAt(i);
    CacheStep step=mSteps.elementAt(i);
    boolean similar=step.representation.equals(representation);
    if (similar) {
      similarUpToIndex=i;
    }
 else {
      break;
    }
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + similarUpToIndex);
  }
  Bitmap cacheBitmap=null;
  int findBaseImageIndex=similarUpToIndex;
  if (findBaseImageIndex > -1) {
    while (findBaseImageIndex > 0 && mSteps.elementAt(findBaseImageIndex).cache == null) {
      findBaseImageIndex--;
    }
    cacheBitmap=mSteps.elementAt(findBaseImageIndex).cache;
  }
  boolean emptyStack=false;
  if (cacheBitmap == null) {
    emptyStack=true;
    cacheBitmap=originalBitmap.copy(Bitmap.Config.ARGB_8888,true);
    if (findBaseImageIndex > -1) {
      FilterRepresentation representation=filters.elementAt(findBaseImageIndex);
      cacheBitmap=environment.applyRepresentation(representation,cacheBitmap);
      mSteps.elementAt(findBaseImageIndex).representation=representation.copy();
      mSteps.elementAt(findBaseImageIndex).cache=cacheBitmap;
    }
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"");
    }
  }
  if (findBaseImageIndex != similarUpToIndex) {
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + findBaseImageIndex + ""String_Node_Str""+ similarUpToIndex);
    }
    if (!emptyStack) {
      cacheBitmap=cacheBitmap.copy(Bitmap.Config.ARGB_8888,true);
    }
 else {
      findBaseImageIndex++;
    }
    for (int i=findBaseImageIndex; i <= similarUpToIndex; i++) {
      FilterRepresentation representation=filters.elementAt(i);
      cacheBitmap=environment.applyRepresentation(representation,cacheBitmap);
      if (DEBUG) {
        Log.v(LOGTAG,""String_Node_Str"" + i + ""String_Node_Str""+ representation.getName());
      }
    }
    mSteps.elementAt(similarUpToIndex).cache=cacheBitmap;
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + similarUpToIndex + ""String_Node_Str""+ (filters.size() - 1));
  }
  for (int i=similarUpToIndex + 1; i < filters.size(); i++) {
    FilterRepresentation representation=filters.elementAt(i);
    CacheStep currentStep=mSteps.elementAt(i);
    cacheBitmap=cacheBitmap.copy(Bitmap.Config.ARGB_8888,true);
    cacheBitmap=environment.applyRepresentation(representation,cacheBitmap);
    currentStep.representation=representation.copy();
    currentStep.cache=cacheBitmap;
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + i + ""String_Node_Str""+ representation.getName());
    }
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"");
    displayNbBitmapsInCache();
  }
  for (int i=0; i < similarUpToIndex; i++) {
    CacheStep currentStep=mSteps.elementAt(i);
    currentStep.cache=null;
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"");
    displayNbBitmapsInCache();
  }
  return cacheBitmap;
}"
38319,"private Uri resetToOriginalImageIfNeeded(ImagePreset preset){
  Uri uri=null;
  if (!preset.hasModifications()) {
    File srcFile=getLocalFileFromUri(mContext,mSourceUri);
    if (srcFile != null) {
      srcFile.renameTo(mDestinationFile);
      uri=SaveImage.updateUriContent(mContext,mSelectedImageUri,mDestinationFile,System.currentTimeMillis());
    }
  }
  return uri;
}","private Uri resetToOriginalImageIfNeeded(ImagePreset preset){
  Uri uri=null;
  if (!preset.hasModifications()) {
    File srcFile=getLocalFileFromUri(mContext,mSourceUri);
    if (srcFile != null) {
      srcFile.renameTo(mDestinationFile);
      uri=SaveImage.linkNewFileToUri(mContext,mSelectedImageUri,mDestinationFile,System.currentTimeMillis());
    }
  }
  return uri;
}"
38320,"public static Uri makeAndInsertUri(Context context,Uri sourceUri){
  long time=System.currentTimeMillis();
  String filename=new SimpleDateFormat(TIME_STAMP_NAME).format(new Date(time));
  File saveDirectory=getFinalSaveDirectory(context,sourceUri);
  File file=new File(saveDirectory,filename + ""String_Node_Str"");
  return updateUriContent(context,sourceUri,file,time);
}","public static Uri makeAndInsertUri(Context context,Uri sourceUri){
  long time=System.currentTimeMillis();
  String filename=new SimpleDateFormat(TIME_STAMP_NAME).format(new Date(time));
  File saveDirectory=getFinalSaveDirectory(context,sourceUri);
  File file=new File(saveDirectory,filename + ""String_Node_Str"");
  return linkNewFileToUri(context,sourceUri,file,time);
}"
38321,"public Uri processAndSaveImage(ImagePreset preset){
  Uri uri=resetToOriginalImageIfNeeded(preset);
  if (uri != null) {
    return null;
  }
  resetProgress();
  boolean noBitmap=true;
  int num_tries=0;
  int sampleSize=1;
  Uri newSourceUri=moveSrcToAuxIfNeeded(mSourceUri,mDestinationFile);
  while (noBitmap) {
    try {
      updateProgress();
      Bitmap bitmap=ImageLoader.loadOrientedBitmapWithBackouts(mContext,newSourceUri,sampleSize);
      if (bitmap == null) {
        return null;
      }
      updateProgress();
      CachingPipeline pipeline=new CachingPipeline(FiltersManager.getManager(),""String_Node_Str"");
      bitmap=pipeline.renderFinalImage(bitmap,preset);
      updateProgress();
      Object xmp=getPanoramaXMPData(newSourceUri,preset);
      ExifInterface exif=getExifData(newSourceUri);
      updateProgress();
      long time=System.currentTimeMillis();
      exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,time,TimeZone.getDefault());
      exif.setTag(exif.buildTag(ExifInterface.TAG_ORIENTATION,ExifInterface.Orientation.TOP_LEFT));
      exif.removeCompressedThumbnail();
      updateProgress();
      if (putExifData(mDestinationFile,exif,bitmap)) {
        putPanoramaXMPData(mDestinationFile,xmp);
        XmpPresets.writeFilterXMP(mContext,newSourceUri,mDestinationFile,preset);
        uri=SaveImage.updateUriContent(mContext,mSelectedImageUri,mDestinationFile,time);
      }
      updateProgress();
      noBitmap=false;
      UsageStatistics.onEvent(UsageStatistics.COMPONENT_EDITOR,""String_Node_Str"",null);
    }
 catch (    OutOfMemoryError e) {
      if (++num_tries >= 5) {
        throw e;
      }
      System.gc();
      sampleSize*=2;
      resetProgress();
    }
  }
  return uri;
}","public Uri processAndSaveImage(ImagePreset preset){
  Uri uri=resetToOriginalImageIfNeeded(preset);
  if (uri != null) {
    return null;
  }
  resetProgress();
  boolean noBitmap=true;
  int num_tries=0;
  int sampleSize=1;
  Uri newSourceUri=moveSrcToAuxIfNeeded(mSourceUri,mDestinationFile);
  while (noBitmap) {
    try {
      updateProgress();
      Bitmap bitmap=ImageLoader.loadOrientedBitmapWithBackouts(mContext,newSourceUri,sampleSize);
      if (bitmap == null) {
        return null;
      }
      updateProgress();
      CachingPipeline pipeline=new CachingPipeline(FiltersManager.getManager(),""String_Node_Str"");
      bitmap=pipeline.renderFinalImage(bitmap,preset);
      updateProgress();
      Object xmp=getPanoramaXMPData(newSourceUri,preset);
      ExifInterface exif=getExifData(newSourceUri);
      updateProgress();
      long time=System.currentTimeMillis();
      exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,time,TimeZone.getDefault());
      exif.setTag(exif.buildTag(ExifInterface.TAG_ORIENTATION,ExifInterface.Orientation.TOP_LEFT));
      exif.removeCompressedThumbnail();
      updateProgress();
      if (putExifData(mDestinationFile,exif,bitmap)) {
        putPanoramaXMPData(mDestinationFile,xmp);
        XmpPresets.writeFilterXMP(mContext,newSourceUri,mDestinationFile,preset);
        uri=SaveImage.linkNewFileToUri(mContext,mSelectedImageUri,mDestinationFile,time);
      }
      updateProgress();
      noBitmap=false;
      UsageStatistics.onEvent(UsageStatistics.COMPONENT_EDITOR,""String_Node_Str"",null);
    }
 catch (    OutOfMemoryError e) {
      if (++num_tries >= 5) {
        throw e;
      }
      System.gc();
      sampleSize*=2;
      resetProgress();
    }
  }
  return uri;
}"
38322,"public void enableSave(boolean enable){
  if (mSaveButton != null)   mSaveButton.setEnabled(enable);
}","public void enableSave(boolean enable){
  if (mSaveButton != null) {
    mSaveButton.setEnabled(enable);
  }
}"
38323,"public void onNewValue(int parameter){
  invalidate();
  mActivity.enableSave(hasModifications());
}","public void onNewValue(int parameter){
  invalidate();
}"
38324,"@Override public void available(RenderingRequest request){
  if (request.getBitmap() == null) {
    return;
  }
  if (request.getType() == RenderingRequest.GEOMETRY_RENDERING) {
    mGeometryOnlyBitmap=request.getBitmap();
  }
  if (request.getType() == RenderingRequest.FILTERS_RENDERING) {
    mFiltersOnlyBitmap=request.getBitmap();
  }
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING && request.getScaleFactor() == getScaleFactor()) {
    mPartialBitmap=request.getBitmap();
    notifyObservers();
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    mHighresBitmap=request.getBitmap();
    notifyObservers();
  }
}","@Override public void available(RenderingRequest request){
  if (request.getBitmap() == null) {
    return;
  }
  boolean needsCheckModification=false;
  if (request.getType() == RenderingRequest.GEOMETRY_RENDERING) {
    mGeometryOnlyBitmap=request.getBitmap();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.FILTERS_RENDERING) {
    mFiltersOnlyBitmap=request.getBitmap();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING && request.getScaleFactor() == getScaleFactor()) {
    mPartialBitmap=request.getBitmap();
    notifyObservers();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    mHighresBitmap=request.getBitmap();
    notifyObservers();
    needsCheckModification=true;
  }
  if (needsCheckModification) {
    mActivity.enableSave(hasModifications());
  }
}"
38325,"public void updatePresets(boolean force){
  if (force || mGeometryOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(false);
    newPreset.setDoApplyGeometry(true);
    if (force || mGeometryOnlyPreset == null || !newPreset.same(mGeometryOnlyPreset)) {
      mGeometryOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mGeometryOnlyPreset,RenderingRequest.GEOMETRY_RENDERING,this);
    }
  }
  if (force || mFiltersOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(true);
    newPreset.setDoApplyGeometry(false);
    if (force || mFiltersOnlyPreset == null || !newPreset.same(mFiltersOnlyPreset)) {
      mFiltersOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mFiltersOnlyPreset,RenderingRequest.FILTERS_RENDERING,this);
    }
  }
  invalidatePreview();
  mActivity.enableSave(hasModifications());
}","public void updatePresets(boolean force){
  if (force || mGeometryOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(false);
    newPreset.setDoApplyGeometry(true);
    if (force || mGeometryOnlyPreset == null || !newPreset.same(mGeometryOnlyPreset)) {
      mGeometryOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mGeometryOnlyPreset,RenderingRequest.GEOMETRY_RENDERING,this);
    }
  }
  if (force || mFiltersOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(true);
    newPreset.setDoApplyGeometry(false);
    if (force || mFiltersOnlyPreset == null || !newPreset.same(mFiltersOnlyPreset)) {
      mFiltersOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mFiltersOnlyPreset,RenderingRequest.FILTERS_RENDERING,this);
    }
  }
  invalidatePreview();
}"
38326,"public synchronized boolean hasModifications(){
  if (mPreset == null) {
    return getLoadedPreset() != null;
  }
 else {
    return !mPreset.same(getLoadedPreset());
  }
}","public synchronized boolean hasModifications(){
  ImagePreset loadedPreset=getLoadedPreset();
  if (mPreset == null) {
    if (loadedPreset == null) {
      return false;
    }
 else {
      return loadedPreset.hasModifications();
    }
  }
 else {
    if (loadedPreset == null) {
      return mPreset.hasModifications();
    }
 else {
      return !mPreset.equals(getLoadedPreset());
    }
  }
}"
38327,"public void enableSave(boolean enable){
  if (mSaveButton != null)   mSaveButton.setEnabled(enable);
}","public void enableSave(boolean enable){
  if (mSaveButton != null) {
    mSaveButton.setEnabled(enable);
  }
}"
38328,"public void onNewValue(int parameter){
  invalidate();
  mActivity.enableSave(hasModifications());
}","public void onNewValue(int parameter){
  invalidate();
}"
38329,"@Override public void available(RenderingRequest request){
  if (request.getBitmap() == null) {
    return;
  }
  if (request.getType() == RenderingRequest.GEOMETRY_RENDERING) {
    mGeometryOnlyBitmap=request.getBitmap();
  }
  if (request.getType() == RenderingRequest.FILTERS_RENDERING) {
    mFiltersOnlyBitmap=request.getBitmap();
  }
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING && request.getScaleFactor() == getScaleFactor()) {
    mPartialBitmap=request.getBitmap();
    notifyObservers();
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    mHighresBitmap=request.getBitmap();
    notifyObservers();
  }
}","@Override public void available(RenderingRequest request){
  if (request.getBitmap() == null) {
    return;
  }
  boolean needsCheckModification=false;
  if (request.getType() == RenderingRequest.GEOMETRY_RENDERING) {
    mGeometryOnlyBitmap=request.getBitmap();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.FILTERS_RENDERING) {
    mFiltersOnlyBitmap=request.getBitmap();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING && request.getScaleFactor() == getScaleFactor()) {
    mPartialBitmap=request.getBitmap();
    notifyObservers();
    needsCheckModification=true;
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    mHighresBitmap=request.getBitmap();
    notifyObservers();
    needsCheckModification=true;
  }
  if (needsCheckModification) {
    mActivity.enableSave(hasModifications());
  }
}"
38330,"public void updatePresets(boolean force){
  if (force || mGeometryOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(false);
    newPreset.setDoApplyGeometry(true);
    if (force || mGeometryOnlyPreset == null || !newPreset.same(mGeometryOnlyPreset)) {
      mGeometryOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mGeometryOnlyPreset,RenderingRequest.GEOMETRY_RENDERING,this);
    }
  }
  if (force || mFiltersOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(true);
    newPreset.setDoApplyGeometry(false);
    if (force || mFiltersOnlyPreset == null || !newPreset.same(mFiltersOnlyPreset)) {
      mFiltersOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mFiltersOnlyPreset,RenderingRequest.FILTERS_RENDERING,this);
    }
  }
  invalidatePreview();
  mActivity.enableSave(hasModifications());
}","public void updatePresets(boolean force){
  if (force || mGeometryOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(false);
    newPreset.setDoApplyGeometry(true);
    if (force || mGeometryOnlyPreset == null || !newPreset.same(mGeometryOnlyPreset)) {
      mGeometryOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mGeometryOnlyPreset,RenderingRequest.GEOMETRY_RENDERING,this);
    }
  }
  if (force || mFiltersOnlyPreset == null) {
    ImagePreset newPreset=new ImagePreset(mPreset);
    newPreset.setDoApplyFilters(true);
    newPreset.setDoApplyGeometry(false);
    if (force || mFiltersOnlyPreset == null || !newPreset.same(mFiltersOnlyPreset)) {
      mFiltersOnlyPreset=newPreset;
      RenderingRequest.post(mLoader.getOriginalBitmapLarge(),mFiltersOnlyPreset,RenderingRequest.FILTERS_RENDERING,this);
    }
  }
  invalidatePreview();
}"
38331,"public synchronized boolean hasModifications(){
  if (mPreset == null) {
    return getLoadedPreset() != null;
  }
 else {
    return !mPreset.same(getLoadedPreset());
  }
}","public synchronized boolean hasModifications(){
  ImagePreset loadedPreset=getLoadedPreset();
  if (mPreset == null) {
    if (loadedPreset == null) {
      return false;
    }
 else {
      return loadedPreset.hasModifications();
    }
  }
 else {
    if (loadedPreset == null) {
      return mPreset.hasModifications();
    }
 else {
      return !mPreset.equals(getLoadedPreset());
    }
  }
}"
38332,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      backToMain();
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38333,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      backToMain();
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38334,"/** 
 * Resizes rectangle to have a certain aspect ratio (center remains stationary) while constraining it to remain within the original rect.
 * @param r rectangle to resize
 * @param w new width aspect
 * @param h new height aspect
 */
public static void fixAspectRatioContained(RectF r,float w,float h){
  float origW=r.width();
  float origH=r.height();
  float origA=origW / origH;
  float a=w / h;
  float finalW=origW;
  float finalH=origH;
  if (origA < a) {
    finalH=origW / a;
  }
 else {
    finalW=origH * a;
  }
  float centX=r.centerX();
  float centY=r.centerY();
  float hw=finalW / 2;
  float hh=finalH / 2;
  r.set(centX - hw,centY - hh,centX + hw,centY + hh);
}","/** 
 * Resizes rectangle to have a certain aspect ratio (center remains stationary) while constraining it to remain within the original rect.
 * @param r rectangle to resize
 * @param w new width aspect
 * @param h new height aspect
 */
public static void fixAspectRatioContained(RectF r,float w,float h){
  float origW=r.width();
  float origH=r.height();
  float origA=origW / origH;
  float a=w / h;
  float finalW=origW;
  float finalH=origH;
  if (origA < a) {
    finalH=origW / a;
    r.top=r.centerY() - finalH / 2;
    r.bottom=r.top + finalH;
  }
 else {
    finalW=origH * a;
    r.left=r.centerX() - finalW / 2;
    r.right=r.left + finalW;
  }
}"
38335,"public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet && !expandMediaSet(selected,set,maxSelection)) {
            return null;
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet && !expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
          return null;
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}","public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet) {
            if (!expandMediaSet(selected,set,maxSelection)) {
              return null;
            }
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet) {
          if (!expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
            return null;
          }
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}"
38336,"private void fillFx(LinearLayout listFilters,int buttonId){
  FilterFxRepresentation[] fxArray=new FilterFxRepresentation[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  for (int i=0; i < drawid.length; i++) {
    FilterFxRepresentation fx=new FilterFxRepresentation(getString(fxNameid[i]),drawid[i],fxNameid[i]);
    fxArray[p++]=fx;
  }
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
  for (int i=0; i < p; i++) {
    setupFilterRepresentationButton(fxArray[i],listFilters,button);
  }
}","private void fillFx(LinearLayout listFilters,int buttonId){
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(this,filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
}"
38337,"private void setupBorders(){
  LinearLayout list=(LinearLayout)findViewById(R.id.listBorders);
  Vector<FilterRepresentation> borders=new Vector<FilterRepresentation>();
  ImageButton borderButton=(ImageButton)findViewById(R.id.borderButton);
  borders.add(new FilterImageBorderRepresentation(0));
  FiltersManager.getManager().addBorders(borders);
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_4x5));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_brush));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_grunge));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_sumi_e));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_tape));
  borders.add(new FilterColorBorderRepresentation(Color.BLACK,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(Color.BLACK,mImageBorderSize,mImageBorderSize));
  borders.add(new FilterColorBorderRepresentation(Color.WHITE,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(Color.WHITE,mImageBorderSize,mImageBorderSize));
  int creamColor=Color.argb(255,237,237,227);
  borders.add(new FilterColorBorderRepresentation(creamColor,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(creamColor,mImageBorderSize,mImageBorderSize));
  for (int i=0; i < borders.size(); i++) {
    FilterRepresentation filter=borders.elementAt(i);
    filter.setName(getString(R.string.borders));
    if (i == 0) {
      filter.setName(getString(R.string.none));
    }
    FilterIconButton b=setupFilterRepresentationButton(filter,list,borderButton);
    if (i == 0) {
      mNullBorderFilter=b;
      mNullBorderFilter.setSelected(true);
    }
  }
}","private void setupBorders(){
  LinearLayout list=(LinearLayout)findViewById(R.id.listBorders);
  Vector<FilterRepresentation> borders=new Vector<FilterRepresentation>();
  ImageButton borderButton=(ImageButton)findViewById(R.id.borderButton);
  borders.add(new FilterImageBorderRepresentation(0));
  FiltersManager.getManager().addBorders(this,borders);
  for (int i=0; i < borders.size(); i++) {
    FilterRepresentation filter=borders.elementAt(i);
    if (i == 0) {
      filter.setName(getString(R.string.none));
    }
    FilterIconButton b=setupFilterRepresentationButton(filter,list,borderButton);
    if (i == 0) {
      mNullBorderFilter=b;
      mNullBorderFilter.setSelected(true);
    }
  }
}"
38338,"public void setOriginal(Bitmap bitmap){
  if (mPipelineIsOn) {
    Log.e(LOGTAG,""String_Node_Str"");
    return;
  }
  Log.v(LOGTAG,""String_Node_Str"" + bitmap.getWidth() + ""String_Node_Str""+ bitmap.getHeight());
  mAccessoryPipeline.setOriginal(bitmap);
  mPreviewPipeline.setOriginal(bitmap);
  mHighresPreviewPipeline.setOriginal(bitmap);
}","public void setOriginal(Bitmap bitmap){
  if (mPipelineIsOn) {
    Log.e(LOGTAG,""String_Node_Str"");
    return;
  }
  mAccessoryPipeline.setOriginal(bitmap);
  mPreviewPipeline.setOriginal(bitmap);
  mHighresPreviewPipeline.setOriginal(bitmap);
}"
38339,"public void addBorders(Vector<FilterRepresentation> representations){
}","public void addBorders(Context context,Vector<FilterRepresentation> representations){
}"
38340,"public void addLooks(Vector<FilterRepresentation> representations){
}","public void addLooks(Context context,Vector<FilterRepresentation> representations){
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  for (int i=0; i < drawid.length; i++) {
    FilterFxRepresentation fx=new FilterFxRepresentation(context.getString(fxNameid[i]),drawid[i],fxNameid[i]);
    representations.add(fx);
  }
}"
38341,"private void fillFx(LinearLayout listFilters,int buttonId){
  FilterFxRepresentation[] fxArray=new FilterFxRepresentation[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  for (int i=0; i < drawid.length; i++) {
    FilterFxRepresentation fx=new FilterFxRepresentation(getString(fxNameid[i]),drawid[i],fxNameid[i]);
    fxArray[p++]=fx;
  }
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
  for (int i=0; i < p; i++) {
    setupFilterRepresentationButton(fxArray[i],listFilters,button);
  }
}","private void fillFx(LinearLayout listFilters,int buttonId){
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(this,filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
}"
38342,"private void setupBorders(){
  LinearLayout list=(LinearLayout)findViewById(R.id.listBorders);
  Vector<FilterRepresentation> borders=new Vector<FilterRepresentation>();
  ImageButton borderButton=(ImageButton)findViewById(R.id.borderButton);
  borders.add(new FilterImageBorderRepresentation(0));
  FiltersManager.getManager().addBorders(borders);
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_4x5));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_brush));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_grunge));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_sumi_e));
  borders.add(new FilterImageBorderRepresentation(R.drawable.filtershow_border_tape));
  borders.add(new FilterColorBorderRepresentation(Color.BLACK,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(Color.BLACK,mImageBorderSize,mImageBorderSize));
  borders.add(new FilterColorBorderRepresentation(Color.WHITE,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(Color.WHITE,mImageBorderSize,mImageBorderSize));
  int creamColor=Color.argb(255,237,237,227);
  borders.add(new FilterColorBorderRepresentation(creamColor,mImageBorderSize,0));
  borders.add(new FilterColorBorderRepresentation(creamColor,mImageBorderSize,mImageBorderSize));
  for (int i=0; i < borders.size(); i++) {
    FilterRepresentation filter=borders.elementAt(i);
    filter.setName(getString(R.string.borders));
    if (i == 0) {
      filter.setName(getString(R.string.none));
    }
    FilterIconButton b=setupFilterRepresentationButton(filter,list,borderButton);
    if (i == 0) {
      mNullBorderFilter=b;
      mNullBorderFilter.setSelected(true);
    }
  }
}","private void setupBorders(){
  LinearLayout list=(LinearLayout)findViewById(R.id.listBorders);
  Vector<FilterRepresentation> borders=new Vector<FilterRepresentation>();
  ImageButton borderButton=(ImageButton)findViewById(R.id.borderButton);
  borders.add(new FilterImageBorderRepresentation(0));
  FiltersManager.getManager().addBorders(this,borders);
  for (int i=0; i < borders.size(); i++) {
    FilterRepresentation filter=borders.elementAt(i);
    if (i == 0) {
      filter.setName(getString(R.string.none));
    }
    FilterIconButton b=setupFilterRepresentationButton(filter,list,borderButton);
    if (i == 0) {
      mNullBorderFilter=b;
      mNullBorderFilter.setSelected(true);
    }
  }
}"
38343,"public void setOriginal(Bitmap bitmap){
  if (mPipelineIsOn) {
    Log.e(LOGTAG,""String_Node_Str"");
    return;
  }
  Log.v(LOGTAG,""String_Node_Str"" + bitmap.getWidth() + ""String_Node_Str""+ bitmap.getHeight());
  mAccessoryPipeline.setOriginal(bitmap);
  mPreviewPipeline.setOriginal(bitmap);
  mHighresPreviewPipeline.setOriginal(bitmap);
}","public void setOriginal(Bitmap bitmap){
  if (mPipelineIsOn) {
    Log.e(LOGTAG,""String_Node_Str"");
    return;
  }
  mAccessoryPipeline.setOriginal(bitmap);
  mPreviewPipeline.setOriginal(bitmap);
  mHighresPreviewPipeline.setOriginal(bitmap);
}"
38344,"public void addBorders(Vector<FilterRepresentation> representations){
}","public void addBorders(Context context,Vector<FilterRepresentation> representations){
}"
38345,"public void addLooks(Vector<FilterRepresentation> representations){
}","public void addLooks(Context context,Vector<FilterRepresentation> representations){
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  for (int i=0; i < drawid.length; i++) {
    FilterFxRepresentation fx=new FilterFxRepresentation(context.getString(fxNameid[i]),drawid[i],fxNameid[i]);
    representations.add(fx);
  }
}"
38346,"public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet && !expandMediaSet(selected,set,maxSelection)) {
            return null;
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet && !expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
          return null;
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}","public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet) {
            if (!expandMediaSet(selected,set,maxSelection)) {
              return null;
            }
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet) {
          if (!expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
            return null;
          }
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}"
38347,"@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(true);
    mShareActionProvider.setShareIntent(share_intent);
  }
}","@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (canSharePanoramas && supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(canShare);
    mShareActionProvider.setShareIntent(share_intent);
  }
}"
38348,"public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      final GetAllPanoramaSupports supportCallback=new GetAllPanoramaSupports(selected,jc);
      final Intent share_panorama_intent=computePanoramaSharingIntent(jc);
      final Intent share_intent=computeSharingIntent(jc);
      supportCallback.waitForPanoramaSupport();
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(true);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}","public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      int numSelected=selected.size();
      final boolean canSharePanoramas=numSelected < MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT;
      final boolean canShare=numSelected < MAX_SELECTED_ITEMS_FOR_SHARE_INTENT;
      final GetAllPanoramaSupports supportCallback=canSharePanoramas ? new GetAllPanoramaSupports(selected,jc) : null;
      final Intent share_panorama_intent=canSharePanoramas ? computePanoramaSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT) : new Intent();
      final Intent share_intent=canShare ? computeSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_SHARE_INTENT) : new Intent();
      if (canSharePanoramas) {
        supportCallback.waitForPanoramaSupport();
      }
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (canSharePanoramas && supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(canShare);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}"
38349,"private Intent computeSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}","private Intent computeSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}"
38350,"private Intent computePanoramaSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}","private Intent computePanoramaSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}"
38351,"private static void expandMediaSet(ArrayList<Path> items,MediaSet set){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    expandMediaSet(items,set.getSubMediaSet(i));
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
}","private static boolean expandMediaSet(ArrayList<Path> items,MediaSet set,int maxSelection){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    if (!expandMediaSet(items,set.getSubMediaSet(i),maxSelection)) {
      return false;
    }
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    if (list != null && list.size() > (maxSelection - items.size())) {
      return false;
    }
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
  return true;
}"
38352,"public ArrayList<Path> getSelected(boolean expandSet){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet) {
            expandMediaSet(selected,set);
          }
 else {
            selected.add(id);
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet) {
          expandMediaSet(selected,mDataManager.getMediaSet(id));
        }
 else {
          selected.add(id);
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id))           selected.add(id);
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
      }
    }
  }
  return selected;
}","public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet && !expandMediaSet(selected,set,maxSelection)) {
            return null;
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet && !expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
          return null;
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}"
38353,"@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(true);
    mShareActionProvider.setShareIntent(share_intent);
  }
}","@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (canSharePanoramas && supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(canShare);
    mShareActionProvider.setShareIntent(share_intent);
  }
}"
38354,"public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      final GetAllPanoramaSupports supportCallback=new GetAllPanoramaSupports(selected,jc);
      final Intent share_panorama_intent=computePanoramaSharingIntent(jc);
      final Intent share_intent=computeSharingIntent(jc);
      supportCallback.waitForPanoramaSupport();
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(true);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}","public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      int numSelected=selected.size();
      final boolean canSharePanoramas=numSelected < MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT;
      final boolean canShare=numSelected < MAX_SELECTED_ITEMS_FOR_SHARE_INTENT;
      final GetAllPanoramaSupports supportCallback=canSharePanoramas ? new GetAllPanoramaSupports(selected,jc) : null;
      final Intent share_panorama_intent=canSharePanoramas ? computePanoramaSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT) : new Intent();
      final Intent share_intent=canShare ? computeSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_SHARE_INTENT) : new Intent();
      if (canSharePanoramas) {
        supportCallback.waitForPanoramaSupport();
      }
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (canSharePanoramas && supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(canShare);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}"
38355,"private Intent computeSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}","private Intent computeSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}"
38356,"private Intent computePanoramaSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}","private Intent computePanoramaSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}"
38357,"private static void expandMediaSet(ArrayList<Path> items,MediaSet set){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    expandMediaSet(items,set.getSubMediaSet(i));
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
}","private static boolean expandMediaSet(ArrayList<Path> items,MediaSet set,int maxSelection){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    if (!expandMediaSet(items,set.getSubMediaSet(i),maxSelection)) {
      return false;
    }
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    if (list != null && list.size() > (maxSelection - items.size())) {
      return false;
    }
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
  return true;
}"
38358,"public ArrayList<Path> getSelected(boolean expandSet){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet) {
            expandMediaSet(selected,set);
          }
 else {
            selected.add(id);
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet) {
          expandMediaSet(selected,mDataManager.getMediaSet(id));
        }
 else {
          selected.add(id);
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id))           selected.add(id);
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
      }
    }
  }
  return selected;
}","public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet && !expandMediaSet(selected,set,maxSelection)) {
            return null;
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet && !expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
          return null;
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}"
38359,"@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(true);
    mShareActionProvider.setShareIntent(share_intent);
  }
}","@Override public void run(){
  mMenuTask=null;
  if (jc.isCancelled())   return;
  MenuExecutor.updateMenuOperation(mMenu,operation);
  MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
  if (mSharePanoramaMenuItem != null) {
    mSharePanoramaMenuItem.setEnabled(true);
    if (canSharePanoramas && supportCallback.mAllPanorama360) {
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
    }
 else {
      mSharePanoramaMenuItem.setVisible(false);
      mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
      mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
    }
    mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
  }
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(canShare);
    mShareActionProvider.setShareIntent(share_intent);
  }
}"
38360,"public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      final GetAllPanoramaSupports supportCallback=new GetAllPanoramaSupports(selected,jc);
      final Intent share_panorama_intent=computePanoramaSharingIntent(jc);
      final Intent share_intent=computeSharingIntent(jc);
      supportCallback.waitForPanoramaSupport();
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,supportCallback.mAllPanorama360,supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(true);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}","public void updateSupportedOperation(){
  if (mMenuTask != null)   mMenuTask.cancel();
  updateSelectionMenu();
  if (mSharePanoramaMenuItem != null)   mSharePanoramaMenuItem.setEnabled(false);
  if (mShareMenuItem != null)   mShareMenuItem.setEnabled(false);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      ArrayList<MediaObject> selected=getSelectedMediaObjects(jc);
      if (selected == null) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
            mMenuTask=null;
            if (jc.isCancelled())             return;
            MenuExecutor.updateMenuOperation(mMenu,0);
          }
        }
);
        return null;
      }
      final int operation=computeMenuOptions(selected);
      if (jc.isCancelled()) {
        return null;
      }
      int numSelected=selected.size();
      final boolean canSharePanoramas=numSelected < MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT;
      final boolean canShare=numSelected < MAX_SELECTED_ITEMS_FOR_SHARE_INTENT;
      final GetAllPanoramaSupports supportCallback=canSharePanoramas ? new GetAllPanoramaSupports(selected,jc) : null;
      final Intent share_panorama_intent=canSharePanoramas ? computePanoramaSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_PANORAMA_SHARE_INTENT) : new Intent();
      final Intent share_intent=canShare ? computeSharingIntent(jc,MAX_SELECTED_ITEMS_FOR_SHARE_INTENT) : new Intent();
      if (canSharePanoramas) {
        supportCallback.waitForPanoramaSupport();
      }
      if (jc.isCancelled()) {
        return null;
      }
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (jc.isCancelled())           return;
          MenuExecutor.updateMenuOperation(mMenu,operation);
          MenuExecutor.updateMenuForPanorama(mMenu,canSharePanoramas && supportCallback.mAllPanorama360,canSharePanoramas && supportCallback.mHasPanorama360);
          if (mSharePanoramaMenuItem != null) {
            mSharePanoramaMenuItem.setEnabled(true);
            if (canSharePanoramas && supportCallback.mAllPanorama360) {
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share_as_photo));
            }
 else {
              mSharePanoramaMenuItem.setVisible(false);
              mShareMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
              mShareMenuItem.setTitle(mActivity.getResources().getString(R.string.share));
            }
            mSharePanoramaActionProvider.setShareIntent(share_panorama_intent);
          }
          if (mShareMenuItem != null) {
            mShareMenuItem.setEnabled(canShare);
            mShareActionProvider.setShareIntent(share_intent);
          }
        }
      }
);
      return null;
    }
  }
);
}"
38361,"private Intent computeSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}","private Intent computeSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    setNfcBeamPushUris(null);
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  int type=0;
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    int support=manager.getSupportedOperations(path);
    type|=manager.getMediaType(path);
    if ((support & MediaObject.SUPPORT_SHARE) != 0) {
      uris.add(manager.getContentUri(path));
    }
  }
  final int size=uris.size();
  if (size > 0) {
    final String mimeType=MenuExecutor.getMimeType(type);
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE).setType(mimeType);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND).setType(mimeType);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setNfcBeamPushUris(uris.toArray(new Uri[uris.size()]));
  }
 else {
    setNfcBeamPushUris(null);
  }
  return intent;
}"
38362,"private Intent computePanoramaSharingIntent(JobContext jc){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true);
  if (expandedPaths.size() == 0) {
    return null;
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}","private Intent computePanoramaSharingIntent(JobContext jc,int maxItems){
  ArrayList<Path> expandedPaths=mSelectionManager.getSelected(true,maxItems);
  if (expandedPaths == null || expandedPaths.size() == 0) {
    return new Intent();
  }
  final ArrayList<Uri> uris=new ArrayList<Uri>();
  DataManager manager=mActivity.getDataManager();
  final Intent intent=new Intent();
  for (  Path path : expandedPaths) {
    if (jc.isCancelled())     return null;
    uris.add(manager.getContentUri(path));
  }
  final int size=uris.size();
  if (size > 0) {
    if (size > 1) {
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);
    }
 else {
      intent.setAction(Intent.ACTION_SEND);
      intent.setType(GalleryUtils.MIME_TYPE_PANORAMA360);
      intent.putExtra(Intent.EXTRA_STREAM,uris.get(0));
    }
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
  return intent;
}"
38363,"private static void expandMediaSet(ArrayList<Path> items,MediaSet set){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    expandMediaSet(items,set.getSubMediaSet(i));
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
}","private static boolean expandMediaSet(ArrayList<Path> items,MediaSet set,int maxSelection){
  int subCount=set.getSubMediaSetCount();
  for (int i=0; i < subCount; i++) {
    if (!expandMediaSet(items,set.getSubMediaSet(i),maxSelection)) {
      return false;
    }
  }
  int total=set.getMediaItemCount();
  int batch=50;
  int index=0;
  while (index < total) {
    int count=index + batch < total ? batch : total - index;
    ArrayList<MediaItem> list=set.getMediaItem(index,count);
    if (list != null && list.size() > (maxSelection - items.size())) {
      return false;
    }
    for (    MediaItem item : list) {
      items.add(item.getPath());
    }
    index+=batch;
  }
  return true;
}"
38364,"public ArrayList<Path> getSelected(boolean expandSet){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet) {
            expandMediaSet(selected,set);
          }
 else {
            selected.add(id);
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet) {
          expandMediaSet(selected,mDataManager.getMediaSet(id));
        }
 else {
          selected.add(id);
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id))           selected.add(id);
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
      }
    }
  }
  return selected;
}","public ArrayList<Path> getSelected(boolean expandSet,int maxSelection){
  ArrayList<Path> selected=new ArrayList<Path>();
  if (mIsAlbumSet) {
    if (mInverseSelection) {
      int total=getTotalCount();
      for (int i=0; i < total; i++) {
        MediaSet set=mSourceMediaSet.getSubMediaSet(i);
        Path id=set.getPath();
        if (!mClickedSet.contains(id)) {
          if (expandSet && !expandMediaSet(selected,set,maxSelection)) {
            return null;
          }
 else {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
      }
    }
 else {
      for (      Path id : mClickedSet) {
        if (expandSet && !expandMediaSet(selected,mDataManager.getMediaSet(id),maxSelection)) {
          return null;
        }
 else {
          selected.add(id);
          if (selected.size() > maxSelection) {
            return null;
          }
        }
      }
    }
  }
 else {
    if (mInverseSelection) {
      int total=getTotalCount();
      int index=0;
      while (index < total) {
        int count=Math.min(total - index,MediaSet.MEDIAITEM_BATCH_FETCH_COUNT);
        ArrayList<MediaItem> list=mSourceMediaSet.getMediaItem(index,count);
        for (        MediaItem item : list) {
          Path id=item.getPath();
          if (!mClickedSet.contains(id)) {
            selected.add(id);
            if (selected.size() > maxSelection) {
              return null;
            }
          }
        }
        index+=count;
      }
    }
 else {
      for (      Path id : mClickedSet) {
        selected.add(id);
        if (selected.size() > maxSelection) {
          return null;
        }
      }
    }
  }
  return selected;
}"
38365,"public synchronized Bitmap renderGeometryIcon(Bitmap bitmap,ImagePreset preset){
synchronized (CachingPipeline.class) {
    if (getRenderScriptContext() == null) {
      return bitmap;
    }
    setupEnvironment(preset,false);
    mEnvironment.setQuality(ImagePreset.QUALITY_PREVIEW);
    bitmap=preset.applyGeometry(bitmap,mEnvironment);
    return bitmap;
  }
}","public Bitmap renderGeometryIcon(Bitmap bitmap,ImagePreset preset){
  if (mGeometry == null) {
    mGeometry=new ImageFilterGeometry();
  }
  mGeometry.useRepresentation(preset.getGeometry());
  return mGeometry.apply(bitmap,mPreviewScaleFactor,ImagePreset.QUALITY_PREVIEW);
}"
38366,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}","@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=mTempRepresentation != null ? mTempRepresentation.clone() : null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}"
38367,"@Override public boolean handleMessage(Message msg){
  if (!mPipelineIsOn) {
    return false;
  }
switch (msg.what) {
case COMPUTE_PRESET:
{
      ImagePreset preset=(ImagePreset)msg.obj;
      TripleBufferBitmap buffer=MasterImage.getImage().getDoubleBuffer();
      mPreviewPipeline.compute(buffer,preset,COMPUTE_PRESET);
      buffer.swapProducer();
      Message uimsg=mUIHandler.obtainMessage(NEW_PRESET);
      mUIHandler.sendMessage(uimsg);
      break;
    }
case COMPUTE_RENDERING_REQUEST:
case COMPUTE_PARTIAL_RENDERING_REQUEST:
case COMPUTE_HIGHRES_RENDERING_REQUEST:
{
    if (msg.what == COMPUTE_PARTIAL_RENDERING_REQUEST || msg.what == COMPUTE_HIGHRES_RENDERING_REQUEST) {
      if (mProcessingHandler.hasMessages(msg.what)) {
        return false;
      }
    }
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + getType(msg.what));
    }
    RenderingRequest request=(RenderingRequest)msg.obj;
    mAccessoryPipeline.render(request);
    Message uimsg=mUIHandler.obtainMessage(NEW_RENDERING_REQUEST);
    uimsg.obj=request;
    mUIHandler.sendMessage(uimsg);
    break;
  }
}
return false;
}","@Override public boolean handleMessage(Message msg){
  if (!mPipelineIsOn) {
    return false;
  }
switch (msg.what) {
case COMPUTE_PRESET:
{
      ImagePreset preset=(ImagePreset)msg.obj;
      TripleBufferBitmap buffer=MasterImage.getImage().getDoubleBuffer();
      mPreviewPipeline.compute(buffer,preset,COMPUTE_PRESET);
      buffer.swapProducer();
      Message uimsg=mUIHandler.obtainMessage(NEW_PRESET);
      mUIHandler.sendMessage(uimsg);
      break;
    }
case COMPUTE_RENDERING_REQUEST:
case COMPUTE_PARTIAL_RENDERING_REQUEST:
case COMPUTE_HIGHRES_RENDERING_REQUEST:
{
    if (DEBUG) {
      Log.v(LOGTAG,""String_Node_Str"" + getType(msg.what));
    }
    RenderingRequest request=(RenderingRequest)msg.obj;
    mAccessoryPipeline.render(request);
    Message uimsg=mUIHandler.obtainMessage(NEW_RENDERING_REQUEST);
    uimsg.obj=request;
    mUIHandler.sendMessage(uimsg);
    break;
  }
}
return false;
}"
38368,"public void postRenderingRequest(RenderingRequest request){
  if (!mPipelineIsOn) {
    return;
  }
  int type=COMPUTE_RENDERING_REQUEST;
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING) {
    type=COMPUTE_PARTIAL_RENDERING_REQUEST;
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    type=COMPUTE_HIGHRES_RENDERING_REQUEST;
  }
  Message msg=mProcessingHandler.obtainMessage(type);
  msg.obj=request;
  if (type == COMPUTE_PARTIAL_RENDERING_REQUEST || type == COMPUTE_HIGHRES_RENDERING_REQUEST) {
    mProcessingHandler.sendMessageDelayed(msg,HIRES_DELAY);
  }
 else {
    mProcessingHandler.sendMessage(msg);
  }
}","public void postRenderingRequest(RenderingRequest request){
  if (!mPipelineIsOn) {
    return;
  }
  int type=COMPUTE_RENDERING_REQUEST;
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING) {
    type=COMPUTE_PARTIAL_RENDERING_REQUEST;
  }
  if (request.getType() == RenderingRequest.HIGHRES_RENDERING) {
    type=COMPUTE_HIGHRES_RENDERING_REQUEST;
  }
  Message msg=mProcessingHandler.obtainMessage(type);
  msg.obj=request;
  if (type == COMPUTE_PARTIAL_RENDERING_REQUEST || type == COMPUTE_HIGHRES_RENDERING_REQUEST) {
    if (mProcessingHandler.hasMessages(msg.what)) {
      mProcessingHandler.removeMessages(msg.what);
    }
    mProcessingHandler.sendMessageDelayed(msg,HIRES_DELAY);
  }
 else {
    mProcessingHandler.sendMessage(msg);
  }
}"
38369,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}","@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=mTempRepresentation != null ? mTempRepresentation.clone() : null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}"
38370,"@Override protected void onPostExecute(Boolean result){
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
  final View filters=findViewById(R.id.filtersPanel);
  filters.setVisibility(View.VISIBLE);
  if (PanelController.useAnimationsLayer()) {
    float y=filters.getY();
    filters.setY(y + filters.getHeight());
    filters.animate().setDuration(600).y(y).withLayer().start();
  }
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.VISIBLE);
  Bitmap largeBitmap=mImageLoader.getOriginalBitmapLarge();
  FilteringPipeline pipeline=FilteringPipeline.getPipeline();
  pipeline.setOriginal(largeBitmap);
  float previewScale=(float)largeBitmap.getWidth() / (float)mImageLoader.getOriginalBounds().width();
  pipeline.setPreviewScaleFactor(previewScale);
  MasterImage.getImage().setOriginalGeometry(largeBitmap);
  mLoadBitmapTask=null;
  if (mAction == CROP_ACTION) {
    mPanelController.showComponent(findViewById(EditorCrop.ID));
  }
 else   if (mAction == TINY_PLANET_ACTION) {
    mPanelController.showComponent(findViewById(EditorTinyPlanet.ID));
  }
  pipeline.turnOnPipeline(true);
  super.onPostExecute(result);
}","@Override protected void onPostExecute(Boolean result){
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
  final View filters=findViewById(R.id.filtersPanel);
  filters.setVisibility(View.VISIBLE);
  if (PanelController.useAnimationsLayer()) {
    float y=filters.getY();
    filters.setY(y + filters.getHeight());
    filters.animate().setDuration(600).y(y).withLayer().start();
  }
  final View imageShow=findViewById(R.id.imageShow);
  imageShow.setVisibility(View.VISIBLE);
  Bitmap largeBitmap=mImageLoader.getOriginalBitmapLarge();
  FilteringPipeline pipeline=FilteringPipeline.getPipeline();
  pipeline.setOriginal(largeBitmap);
  float previewScale=(float)largeBitmap.getWidth() / (float)mImageLoader.getOriginalBounds().width();
  pipeline.setPreviewScaleFactor(previewScale);
  pipeline.turnOnPipeline(true);
  MasterImage.getImage().setOriginalGeometry(largeBitmap);
  mLoadBitmapTask=null;
  if (mAction == CROP_ACTION) {
    mPanelController.showComponent(findViewById(EditorCrop.ID));
  }
 else   if (mAction == TINY_PLANET_ACTION) {
    mPanelController.showComponent(findViewById(EditorTinyPlanet.ID));
  }
  super.onPostExecute(result);
}"
38371,"public void postRenderingRequest(RenderingRequest request){
  if (mOriginalAllocation == null) {
    return;
  }
  int type=COMPUTE_RENDERING_REQUEST;
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING) {
    type=COMPUTE_PARTIAL_RENDERING_REQUEST;
  }
  Message msg=mProcessingHandler.obtainMessage(type);
  msg.obj=request;
  if (type == COMPUTE_PARTIAL_RENDERING_REQUEST) {
    mProcessingHandler.sendMessageDelayed(msg,HIRES_DELAY);
  }
 else {
    mProcessingHandler.sendMessage(msg);
  }
}","public void postRenderingRequest(RenderingRequest request){
  if (mOriginalAllocation == null) {
    return;
  }
  if (!mPipelineIsOn) {
    return;
  }
  int type=COMPUTE_RENDERING_REQUEST;
  if (request.getType() == RenderingRequest.PARTIAL_RENDERING) {
    type=COMPUTE_PARTIAL_RENDERING_REQUEST;
  }
  Message msg=mProcessingHandler.obtainMessage(type);
  msg.obj=request;
  if (type == COMPUTE_PARTIAL_RENDERING_REQUEST) {
    mProcessingHandler.sendMessageDelayed(msg,HIRES_DELAY);
  }
 else {
    mProcessingHandler.sendMessage(msg);
  }
}"
38372,"@Override public boolean equals(FilterRepresentation o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  GeometryMetadata d=(GeometryMetadata)o;
  return (mScaleFactor == d.mScaleFactor && mRotation == d.mRotation && mStraightenRotation == d.mStraightenRotation && mFlip == d.mFlip && mCropBounds.equals(d.mCropBounds) && mPhotoBounds.equals(d.mPhotoBounds));
}","@Override public boolean equals(FilterRepresentation o){
  if (this == o)   return true;
  if (o == null || !(o instanceof GeometryMetadata))   return false;
  GeometryMetadata d=(GeometryMetadata)o;
  return (mScaleFactor == d.mScaleFactor && mRotation == d.mRotation && mStraightenRotation == d.mStraightenRotation && mFlip == d.mFlip && compareRectF(mCropBounds,d.mCropBounds) && compareRectF(mPhotoBounds,d.mPhotoBounds));
}"
38373,"public Allocation getInPixelsAllocation(){
  return mInPixelsAllocation;
}","public synchronized Allocation getInPixelsAllocation(){
  return mInPixelsAllocation;
}"
38374,"private synchronized void destroyPixelAllocations(){
  if (mInPixelsAllocation != null) {
    mInPixelsAllocation.destroy();
    mInPixelsAllocation=null;
  }
  if (mOutPixelsAllocation != null) {
    mOutPixelsAllocation.destroy();
    mOutPixelsAllocation=null;
  }
  mWidth=0;
  mHeight=0;
}","private synchronized void destroyPixelAllocations(){
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + getName());
  }
  if (mInPixelsAllocation != null) {
    mInPixelsAllocation.destroy();
    mInPixelsAllocation=null;
  }
  if (mOutPixelsAllocation != null) {
    mOutPixelsAllocation.destroy();
    mOutPixelsAllocation=null;
  }
  mWidth=0;
  mHeight=0;
}"
38375,"public Allocation getOutPixelsAllocation(){
  return mOutPixelsAllocation;
}","public synchronized Allocation getOutPixelsAllocation(){
  return mOutPixelsAllocation;
}"
38376,"public CachingPipeline(FiltersManager filtersManager){
  mFiltersManager=filtersManager;
}","public CachingPipeline(FiltersManager filtersManager,String name){
  mFiltersManager=filtersManager;
  mName=name;
}"
38377,"public boolean prepareRenderscriptAllocations(Bitmap bitmap){
  RenderScript RS=ImageFilterRS.getRenderScriptContext();
  boolean needsUpdate=false;
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != mWidth || bitmap.getHeight() != mHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(RS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(RS,mOutPixelsAllocation.getType());
    needsUpdate=true;
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != mWidth || bitmap.getHeight() != mHeight) {
    mWidth=bitmap.getWidth();
    mHeight=bitmap.getHeight();
    needsUpdate=true;
  }
  return needsUpdate;
}","public boolean prepareRenderscriptAllocations(Bitmap bitmap){
  RenderScript RS=ImageFilterRS.getRenderScriptContext();
  boolean needsUpdate=false;
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != mWidth || bitmap.getHeight() != mHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(RS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(RS,mOutPixelsAllocation.getType());
    needsUpdate=true;
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != mWidth || bitmap.getHeight() != mHeight) {
    mWidth=bitmap.getWidth();
    mHeight=bitmap.getHeight();
    needsUpdate=true;
  }
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + needsUpdate + ""String_Node_Str""+ getName());
  }
  return needsUpdate;
}"
38378,"private FilteringPipeline(){
  mHandlerThread=new HandlerThread(""String_Node_Str"",Process.THREAD_PRIORITY_FOREGROUND);
  mHandlerThread.start();
  mProcessingHandler=new Handler(mHandlerThread.getLooper(),this);
  mAccessoryPipeline=new CachingPipeline(FiltersManager.getManager());
  mPreviewPipeline=new CachingPipeline(FiltersManager.getPreviewManager());
}","private FilteringPipeline(){
  mHandlerThread=new HandlerThread(""String_Node_Str"",Process.THREAD_PRIORITY_FOREGROUND);
  mHandlerThread.start();
  mProcessingHandler=new Handler(mHandlerThread.getLooper(),this);
  mAccessoryPipeline=new CachingPipeline(FiltersManager.getManager(),""String_Node_Str"");
  mPreviewPipeline=new CachingPipeline(FiltersManager.getPreviewManager(),""String_Node_Str"");
}"
38379,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (getParameters() == null || mResources == null) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  if (mFxBitmap == null || mFxBitmapId != getParameters().getBitmapResource()) {
    BitmapFactory.Options o=new BitmapFactory.Options();
    o.inScaled=false;
    mFxBitmapId=getParameters().getBitmapResource();
    if (mFxBitmapId != 0) {
      mFxBitmap=BitmapFactory.decodeResource(mResources,mFxBitmapId,o);
    }
 else {
      Log.w(LOGTAG,""String_Node_Str"" + mName);
    }
  }
  if (mFxBitmap == null) {
    return bitmap;
  }
  int fxw=mFxBitmap.getWidth();
  int fxh=mFxBitmap.getHeight();
  nativeApplyFilter(bitmap,w,h,mFxBitmap,fxw,fxh);
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (getParameters() == null || mResources == null) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  int bitmapResourceId=getParameters().getBitmapResource();
  if (bitmapResourceId == 0) {
    return bitmap;
  }
  if (mFxBitmap == null || mFxBitmapId != bitmapResourceId) {
    BitmapFactory.Options o=new BitmapFactory.Options();
    o.inScaled=false;
    mFxBitmapId=bitmapResourceId;
    if (mFxBitmapId != 0) {
      mFxBitmap=BitmapFactory.decodeResource(mResources,mFxBitmapId,o);
    }
 else {
      Log.w(LOGTAG,""String_Node_Str"" + mName);
    }
  }
  if (mFxBitmap == null) {
    return bitmap;
  }
  int fxw=mFxBitmap.getWidth();
  int fxh=mFxBitmap.getHeight();
  nativeApplyFilter(bitmap,w,h,mFxBitmap,fxw,fxh);
  return bitmap;
}"
38380,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0) {
    return bitmap;
  }
  try {
synchronized (ImageFilterRS.class) {
      if (sRS == null) {
        Log.w(LOGTAG,""String_Node_Str"");
        return bitmap;
      }
      CachingPipeline pipeline=getEnvironment().getCachingPipeline();
      boolean needsUpdate=pipeline.prepareRenderscriptAllocations(bitmap);
      if (needsUpdate || !isResourcesLoaded()) {
        freeResources();
        createFilter(sResources,scaleFactor,quality);
        setResourcesLoaded(true);
      }
      runFilter();
      update(bitmap);
    }
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0) {
    return bitmap;
  }
  try {
synchronized (ImageFilterRS.class) {
      if (sRS == null) {
        Log.w(LOGTAG,""String_Node_Str"");
        return bitmap;
      }
      CachingPipeline pipeline=getEnvironment().getCachingPipeline();
      if (DEBUG) {
        Log.v(LOGTAG,""String_Node_Str"" + getName() + ""String_Node_Str""+ pipeline.getName());
      }
      boolean needsUpdate=pipeline.prepareRenderscriptAllocations(bitmap);
      if (needsUpdate || !isResourcesLoaded()) {
        freeResources();
        createFilter(sResources,scaleFactor,quality);
        setResourcesLoaded(true);
      }
      runFilter();
      update(bitmap);
      if (DEBUG) {
        Log.v(LOGTAG,""String_Node_Str"" + getName() + ""String_Node_Str""+ pipeline.getName());
      }
    }
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}"
38381,"/** 
 * The task should be executed with one given bitmap to be saved.
 */
@Override protected Uri doInBackground(ImagePreset... params){
  if (params[0] == null || sourceUri == null) {
    return null;
  }
  ImagePreset preset=params[0];
  BitmapFactory.Options options=new BitmapFactory.Options();
  Uri uri=null;
  boolean noBitmap=true;
  int num_tries=0;
  while (noBitmap) {
    try {
      Bitmap bitmap=ImageLoader.loadMutableBitmap(context,sourceUri,options);
      if (bitmap == null) {
        return null;
      }
      preset.setupEnvironment();
      bitmap=preset.applyGeometry(bitmap);
      bitmap=preset.apply(bitmap);
      Object xmp=getPanoramaXMPData(sourceUri,preset);
      ExifInterface exif=getExifData(sourceUri);
      long time=System.currentTimeMillis();
      exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,time,TimeZone.getDefault());
      exif.setTag(exif.buildTag(ExifInterface.TAG_ORIENTATION,ExifInterface.Orientation.TOP_LEFT));
      if (putExifData(this.destinationFile,exif,bitmap)) {
        putPanoramaXMPData(this.destinationFile,xmp);
        uri=insertContent(context,sourceUri,this.destinationFile,saveFileName,time);
      }
      noBitmap=false;
    }
 catch (    java.lang.OutOfMemoryError e) {
      if (++num_tries >= 5) {
        throw e;
      }
      System.gc();
      options.inSampleSize*=2;
    }
  }
  return uri;
}","/** 
 * The task should be executed with one given bitmap to be saved.
 */
@Override protected Uri doInBackground(ImagePreset... params){
  if (params[0] == null || sourceUri == null) {
    return null;
  }
  ImagePreset preset=params[0];
  BitmapFactory.Options options=new BitmapFactory.Options();
  Uri uri=null;
  boolean noBitmap=true;
  int num_tries=0;
  while (noBitmap) {
    try {
      Bitmap bitmap=ImageLoader.loadMutableBitmap(context,sourceUri,options);
      if (bitmap == null) {
        return null;
      }
      CachingPipeline pipeline=new CachingPipeline(FiltersManager.getManager(),""String_Node_Str"");
      bitmap=pipeline.renderFinalImage(bitmap,preset);
      Object xmp=getPanoramaXMPData(sourceUri,preset);
      ExifInterface exif=getExifData(sourceUri);
      long time=System.currentTimeMillis();
      exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,time,TimeZone.getDefault());
      exif.setTag(exif.buildTag(ExifInterface.TAG_ORIENTATION,ExifInterface.Orientation.TOP_LEFT));
      if (putExifData(this.destinationFile,exif,bitmap)) {
        putPanoramaXMPData(this.destinationFile,xmp);
        uri=insertContent(context,sourceUri,this.destinationFile,saveFileName,time);
      }
      noBitmap=false;
    }
 catch (    java.lang.OutOfMemoryError e) {
      if (++num_tries >= 5) {
        throw e;
      }
      System.gc();
      options.inSampleSize*=2;
    }
  }
  return uri;
}"
38382,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  setDefaultValues();
  loadXML();
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mShowingImageStatePanel=true;
  }
  if (mShowingHistoryPanel) {
    toggleHistoryPanel();
  }
  if (mShowingTinyPlanet == false) {
    View tinyPlanetView=findViewById(EditorTinyPlanet.ID);
    if (tinyPlanetView != null) {
      tinyPlanetView.setVisibility(View.GONE);
    }
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  setDefaultValues();
  loadXML();
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mShowingImageStatePanel=true;
  }
 else   if (mShowingImageStatePanel) {
    toggleImageStatePanel();
  }
  if (mShowingHistoryPanel) {
    toggleHistoryPanel();
  }
  if (mShowingTinyPlanet == false) {
    View tinyPlanetView=findViewById(EditorTinyPlanet.ID);
    if (tinyPlanetView != null) {
      tinyPlanetView.setVisibility(View.GONE);
    }
  }
  final View loading=findViewById(R.id.loading);
  loading.setVisibility(View.GONE);
}"
38383,"public void prepare(Bitmap bitmap,float scaleFactor,int quality){
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(sRS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(sRS,mOutPixelsAllocation.getType());
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight || !isResourcesLoaded()) {
    freeResources();
    createFilter(sResources,scaleFactor,quality);
    sWidth=bitmap.getWidth();
    sHeight=bitmap.getHeight();
    setResourcesLoaded(true);
  }
}","protected void prepare(Bitmap bitmap,float scaleFactor,int quality){
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(sRS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(sRS,mOutPixelsAllocation.getType());
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight || !isResourcesLoaded()) {
    freeResources();
    createFilter(sResources,scaleFactor,quality);
    sWidth=bitmap.getWidth();
    sHeight=bitmap.getHeight();
    setResourcesLoaded(true);
  }
}"
38384,"abstract public void createFilter(android.content.res.Resources res,float scaleFactor,int quality);","protected abstract void createFilter(android.content.res.Resources res,float scaleFactor,int quality);"
38385,"public void update(Bitmap bitmap){
  mOutPixelsAllocation.copyTo(bitmap);
}","protected void update(Bitmap bitmap){
  mOutPixelsAllocation.copyTo(bitmap);
}"
38386,"public void freeResources(){
  if (!isResourcesLoaded()) {
    return;
  }
  resetAllocations();
  setResourcesLoaded(false);
}","public void freeResources(){
  if (!isResourcesLoaded()) {
    return;
  }
synchronized (ImageFilterRS.class) {
    resetAllocations();
    setResourcesLoaded(false);
  }
}"
38387,abstract public void runFilter();,protected abstract void runFilter();
38388,"@Override public void createFilter(android.content.res.Resources res,float scaleFactor,int quality){
  int w=mInPixelsAllocation.getType().getX();
  int h=mInPixelsAllocation.getType().getY();
  mScaleFactor=scaleFactor;
  if (mScript == null) {
    mScript=new ScriptC_convolve3x3(getRenderScriptContext(),res,R.raw.convolve3x3);
  }
  mScript.set_gWidth(w);
  mScript.set_gHeight(h);
}","@Override protected void createFilter(android.content.res.Resources res,float scaleFactor,int quality){
  int w=mInPixelsAllocation.getType().getX();
  int h=mInPixelsAllocation.getType().getY();
  mScaleFactor=scaleFactor;
  if (mScript == null) {
    mScript=new ScriptC_convolve3x3(getRenderScriptContext(),res,R.raw.convolve3x3);
  }
  mScript.set_gWidth(w);
  mScript.set_gHeight(h);
}"
38389,"@Override public void runFilter(){
  if (mParameters == null) {
    return;
  }
  computeKernel();
  mScript.set_gIn(mInPixelsAllocation);
  mScript.bind_gPixels(mInPixelsAllocation);
  mScript.forEach_root(mInPixelsAllocation,mOutPixelsAllocation);
}","@Override protected void runFilter(){
  if (mParameters == null) {
    return;
  }
  computeKernel();
  mScript.set_gIn(mInPixelsAllocation);
  mScript.bind_gPixels(mInPixelsAllocation);
  mScript.forEach_root(mInPixelsAllocation,mOutPixelsAllocation);
}"
38390,"public static void reset(){
  sInstance=null;
}","public static void reset(){
  sInstance=null;
  sPreviewInstance=null;
}"
38391,"public void prepare(Bitmap bitmap,float scaleFactor,int quality){
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(sRS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(sRS,mOutPixelsAllocation.getType());
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight || !isResourcesLoaded()) {
    freeResources();
    createFilter(sResources,scaleFactor,quality);
    sWidth=bitmap.getWidth();
    sHeight=bitmap.getHeight();
    setResourcesLoaded(true);
  }
}","protected void prepare(Bitmap bitmap,float scaleFactor,int quality){
  if (mOutPixelsAllocation == null || mInPixelsAllocation == null || bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight) {
    destroyPixelAllocations();
    Bitmap bitmapBuffer=bitmap;
    if (bitmap.getConfig() == null || bitmap.getConfig() != BITMAP_CONFIG) {
      bitmapBuffer=bitmap.copy(BITMAP_CONFIG,true);
    }
    mOutPixelsAllocation=Allocation.createFromBitmap(sRS,bitmapBuffer,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);
    mInPixelsAllocation=Allocation.createTyped(sRS,mOutPixelsAllocation.getType());
  }
  mInPixelsAllocation.copyFrom(bitmap);
  if (bitmap.getWidth() != sWidth || bitmap.getHeight() != sHeight || !isResourcesLoaded()) {
    freeResources();
    createFilter(sResources,scaleFactor,quality);
    sWidth=bitmap.getWidth();
    sHeight=bitmap.getHeight();
    setResourcesLoaded(true);
  }
}"
38392,"abstract public void createFilter(android.content.res.Resources res,float scaleFactor,int quality);","protected abstract void createFilter(android.content.res.Resources res,float scaleFactor,int quality);"
38393,"public void update(Bitmap bitmap){
  mOutPixelsAllocation.copyTo(bitmap);
}","protected void update(Bitmap bitmap){
  mOutPixelsAllocation.copyTo(bitmap);
}"
38394,"public void freeResources(){
  if (!isResourcesLoaded()) {
    return;
  }
  resetAllocations();
  setResourcesLoaded(false);
}","public void freeResources(){
  if (!isResourcesLoaded()) {
    return;
  }
synchronized (ImageFilterRS.class) {
    resetAllocations();
    setResourcesLoaded(false);
  }
}"
38395,abstract public void runFilter();,protected abstract void runFilter();
38396,"@Override public void createFilter(android.content.res.Resources res,float scaleFactor,int quality){
  int w=mInPixelsAllocation.getType().getX();
  int h=mInPixelsAllocation.getType().getY();
  mScaleFactor=scaleFactor;
  if (mScript == null) {
    mScript=new ScriptC_convolve3x3(getRenderScriptContext(),res,R.raw.convolve3x3);
  }
  mScript.set_gWidth(w);
  mScript.set_gHeight(h);
}","@Override protected void createFilter(android.content.res.Resources res,float scaleFactor,int quality){
  int w=mInPixelsAllocation.getType().getX();
  int h=mInPixelsAllocation.getType().getY();
  mScaleFactor=scaleFactor;
  if (mScript == null) {
    mScript=new ScriptC_convolve3x3(getRenderScriptContext(),res,R.raw.convolve3x3);
  }
  mScript.set_gWidth(w);
  mScript.set_gHeight(h);
}"
38397,"@Override public void runFilter(){
  if (mParameters == null) {
    return;
  }
  computeKernel();
  mScript.set_gIn(mInPixelsAllocation);
  mScript.bind_gPixels(mInPixelsAllocation);
  mScript.forEach_root(mInPixelsAllocation,mOutPixelsAllocation);
}","@Override protected void runFilter(){
  if (mParameters == null) {
    return;
  }
  computeKernel();
  mScript.set_gIn(mInPixelsAllocation);
  mScript.bind_gPixels(mInPixelsAllocation);
  mScript.forEach_root(mInPixelsAllocation,mOutPixelsAllocation);
}"
38398,"public static void reset(){
  sInstance=null;
}","public static void reset(){
  sInstance=null;
  sPreviewInstance=null;
}"
38399,"@TargetApi(16) public SelectionManager(Activity activity){
  mActivity=activity;
  if (ApiHelper.AT_LEAST_16) {
    mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity);
    mNfcAdapter.setBeamPushUrisCallback(this,mActivity);
  }
}","public SelectionManager(Activity activity){
  mActivity=activity;
  if (ApiHelper.AT_LEAST_16) {
    mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity);
    mNfcAdapter.setBeamPushUrisCallback(new CreateBeamUrisCallback(){
      @Override public Uri[] createBeamUris(      NfcEvent arg0){
        if (mCachedShareableUris == null)         return null;
        return mCachedShareableUris.toArray(new Uri[mCachedShareableUris.size()]);
      }
    }
,mActivity);
  }
}"
38400,"@Override public Uri[] createBeamUris(NfcEvent event){
  if (mCachedShareableUris == null)   return null;
  return mCachedShareableUris.toArray(new Uri[mCachedShareableUris.size()]);
}","@Override public Uri[] createBeamUris(NfcEvent arg0){
  if (mCachedShareableUris == null)   return null;
  return mCachedShareableUris.toArray(new Uri[mCachedShareableUris.size()]);
}"
38401,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  View view=mInflater.inflate(R.layout.photo_set_item,parent,false);
  LayoutParams params=view.getLayoutParams();
  int columnWidth=((GridView)parent).getColumnWidth();
  params.height=columnWidth;
  view.setLayoutParams(params);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  View view=mInflater.inflate(R.layout.photo_set_item,parent,false);
  return view;
}"
38402,"private void fillFx(LinearLayout listFilters,int buttonId){
  FilterFxRepresentation[] fxArray=new FilterFxRepresentation[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inScaled=false;
  for (int i=0; i < drawid.length; i++) {
    Bitmap b=BitmapFactory.decodeResource(getResources(),drawid[i],o);
    FilterFxRepresentation fx=new FilterFxRepresentation(getString(fxNameid[i]),drawid[i],fxNameid[i]);
    fx.setFxBitmap(b);
    fxArray[p++]=fx;
  }
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
  for (int i=0; i < p; i++) {
    setupFilterRepresentationButton(fxArray[i],listFilters,button);
  }
}","private void fillFx(LinearLayout listFilters,int buttonId){
  FilterFxRepresentation[] fxArray=new FilterFxRepresentation[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  for (int i=0; i < drawid.length; i++) {
    FilterFxRepresentation fx=new FilterFxRepresentation(getString(fxNameid[i]),drawid[i],fxNameid[i]);
    fxArray[p++]=fx;
  }
  ImageButton button=(ImageButton)findViewById(buttonId);
  FilterFxRepresentation nullFx=new FilterFxRepresentation(getString(R.string.none),0,R.string.none);
  mNullFxFilter=setupFilterRepresentationButton(nullFx,listFilters,button);
  mNullFxFilter.setSelected(true);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager.getManager().addLooks(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listFilters,button);
  }
  for (int i=0; i < p; i++) {
    setupFilterRepresentationButton(fxArray[i],listFilters,button);
  }
}"
38403,"private void setDefaultValues(){
  ImageFilter.setActivityForMemoryToasts(this);
  ImageFilterRS.setRenderScriptContext(this);
  Resources res=getResources();
  ImageFilterBorder filterBorder=(ImageFilterBorder)FiltersManager.getManager().getFilter(ImageFilterBorder.class);
  filterBorder.setResources(res);
  filterBorder=(ImageFilterBorder)FiltersManager.getPreviewManager().getFilter(ImageFilterBorder.class);
  filterBorder.setResources(res);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  ImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
}","private void setDefaultValues(){
  ImageFilter.setActivityForMemoryToasts(this);
  ImageFilterRS.setRenderScriptContext(this);
  Resources res=getResources();
  ImageFilterBorder filterBorder=(ImageFilterBorder)FiltersManager.getManager().getFilter(ImageFilterBorder.class);
  filterBorder.setResources(res);
  filterBorder=(ImageFilterBorder)FiltersManager.getPreviewManager().getFilter(ImageFilterBorder.class);
  filterBorder.setResources(res);
  ImageFilterFx filterFx=(ImageFilterFx)FiltersManager.getManager().getFilter(ImageFilterFx.class);
  filterFx.setResources(res);
  filterFx=(ImageFilterFx)FiltersManager.getPreviewManager().getFilter(ImageFilterFx.class);
  filterFx.setResources(res);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  ImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
}"
38404,"public void setupMasterImage(){
  mImageLoader=new ImageLoader(this,getApplicationContext());
  HistoryAdapter mHistoryAdapter=new HistoryAdapter(this,R.layout.filtershow_history_operation_row,R.id.rowTextView);
  ImageStateAdapter mImageStateAdapter=new ImageStateAdapter(this,R.layout.filtershow_imagestate_row);
  MasterImage.reset();
  mMasterImage=MasterImage.getImage();
  mMasterImage.setHistoryAdapter(mHistoryAdapter);
  mMasterImage.setStateAdapter(mImageStateAdapter);
  mMasterImage.setActivity(this);
}","public void setupMasterImage(){
  mImageLoader=new ImageLoader(this,getApplicationContext());
  HistoryAdapter mHistoryAdapter=new HistoryAdapter(this,R.layout.filtershow_history_operation_row,R.id.rowTextView);
  ImageStateAdapter mImageStateAdapter=new ImageStateAdapter(this,R.layout.filtershow_imagestate_row);
  MasterImage.reset();
  mMasterImage=MasterImage.getImage();
  mMasterImage.setHistoryAdapter(mHistoryAdapter);
  mMasterImage.setStateAdapter(mImageStateAdapter);
  mMasterImage.setActivity(this);
  mMasterImage.setImageLoader(mImageLoader);
}"
38405,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.filtershow_history_operation_row,null);
  }
  ImagePreset item=getItem(position);
  if (item != null) {
    TextView itemView=(TextView)view.findViewById(R.id.rowTextView);
    if (itemView != null) {
      itemView.setText(item.historyName());
    }
    ImageView preview=(ImageView)view.findViewById(R.id.preview);
    Bitmap bmp=item.getPreviewImage();
    if (bmp != null) {
      preview.setImageBitmap(bmp);
    }
    if (position == mCurrentPresetPosition) {
      view.setBackgroundColor(Color.WHITE);
    }
 else {
      view.setBackgroundResource(R.color.background_main_toolbar);
    }
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=inflater.inflate(R.layout.filtershow_history_operation_row,null);
  }
  ImagePreset item=getItem(position);
  if (item != null) {
    TextView itemView=(TextView)view.findViewById(R.id.rowTextView);
    if (itemView != null) {
      itemView.setText(item.historyName());
    }
    ImageView preview=(ImageView)view.findViewById(R.id.preview);
    Bitmap bmp=item.getPreviewImage();
    if (bmp != null) {
      preview.setImageBitmap(bmp);
    }
 else {
      preview.setImageResource(android.R.color.transparent);
    }
    if (position == mCurrentPresetPosition) {
      view.setBackgroundColor(Color.WHITE);
    }
 else {
      view.setBackgroundResource(R.color.background_main_toolbar);
    }
  }
  return view;
}"
38406,"public void useFilterRepresentation(FilterRepresentation filterRepresentation){
  if (filterRepresentation == null) {
    return;
  }
  if (MasterImage.getImage().getCurrentFilterRepresentation() == filterRepresentation) {
    return;
  }
  ImagePreset oldPreset=MasterImage.getImage().getPreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  FilterRepresentation representation=copy.getRepresentation(filterRepresentation);
  if (representation == null) {
    copy.addFilter(filterRepresentation);
  }
 else {
    if (filterRepresentation.allowsMultipleInstances()) {
      representation.updateTempParametersFrom(filterRepresentation);
      copy.setHistoryName(filterRepresentation.getName());
    }
    filterRepresentation=representation;
  }
  MasterImage.getImage().setPreset(copy,true);
  MasterImage.getImage().setCurrentFilterRepresentation(filterRepresentation);
}","public void useFilterRepresentation(FilterRepresentation filterRepresentation){
  if (filterRepresentation == null) {
    return;
  }
  if (MasterImage.getImage().getCurrentFilterRepresentation() == filterRepresentation) {
    return;
  }
  ImagePreset oldPreset=MasterImage.getImage().getPreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  FilterRepresentation representation=copy.getRepresentation(filterRepresentation);
  if (representation == null) {
    copy.addFilter(filterRepresentation);
  }
 else {
    if (filterRepresentation.allowsMultipleInstances()) {
      representation.updateTempParametersFrom(filterRepresentation);
      copy.setHistoryName(filterRepresentation.getName());
      representation.synchronizeRepresentation();
    }
    filterRepresentation=representation;
  }
  MasterImage.getImage().setPreset(copy,true);
  MasterImage.getImage().setCurrentFilterRepresentation(filterRepresentation);
}"
38407,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterFxRepresentation representation=(FilterFxRepresentation)super.clone();
  representation.setName(getName());
  representation.setBitmapResource(getBitmapResource());
  representation.setNameResource(getNameResource());
  representation.setFxBitmap(getFxBitmap());
  return representation;
}","@Override public synchronized FilterRepresentation clone() throws CloneNotSupportedException {
  FilterFxRepresentation representation=(FilterFxRepresentation)super.clone();
  representation.setName(getName());
  representation.setBitmapResource(getBitmapResource());
  representation.setNameResource(getNameResource());
  return representation;
}"
38408,"public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterFxRepresentation) {
    FilterFxRepresentation representation=(FilterFxRepresentation)a;
    setName(representation.getName());
    setBitmapResource(representation.getBitmapResource());
    setNameResource(representation.getNameResource());
    setFxBitmap(representation.getFxBitmap());
  }
}","public synchronized void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterFxRepresentation) {
    FilterFxRepresentation representation=(FilterFxRepresentation)a;
    setName(representation.getName());
    setBitmapResource(representation.getBitmapResource());
    setNameResource(representation.getNameResource());
  }
}"
38409,"public String toString(){
  return ""String_Node_Str"" + getName();
}","public String toString(){
  return ""String_Node_Str"" + hashCode() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ mBitmapResource;
}"
38410,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  return representation;
}","@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}"
38411,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (getParameters() == null || getParameters().getFxBitmap() == null) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  int fxw=getParameters().getFxBitmap().getWidth();
  int fxh=getParameters().getFxBitmap().getHeight();
  nativeApplyFilter(bitmap,w,h,getParameters().getFxBitmap(),fxw,fxh);
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (getParameters() == null || mResources == null) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  if (mFxBitmap == null || mFxBitmapId != getParameters().getBitmapResource()) {
    BitmapFactory.Options o=new BitmapFactory.Options();
    o.inScaled=false;
    mFxBitmapId=getParameters().getBitmapResource();
    mFxBitmap=BitmapFactory.decodeResource(mResources,mFxBitmapId,o);
  }
  if (mFxBitmap == null) {
    return bitmap;
  }
  int fxw=mFxBitmap.getWidth();
  int fxh=mFxBitmap.getHeight();
  nativeApplyFilter(bitmap,w,h,mFxBitmap,fxw,fxh);
  return bitmap;
}"
38412,"public ImagePreset(ImagePreset source){
  try {
    if (source.mBorder != null) {
      mBorder=source.mBorder.clone();
    }
    for (int i=0; i < source.mFilters.size(); i++) {
      FilterRepresentation representation=source.mFilters.elementAt(i).clone();
      addFilter(representation);
    }
  }
 catch (  java.lang.CloneNotSupportedException e) {
    Log.v(LOGTAG,""String_Node_Str"" + e);
  }
  mName=source.name();
  mHistoryName=source.name();
  mIsFxPreset=source.isFx();
  mImageLoader=source.getImageLoader();
  mGeoData.set(source.mGeoData);
}","public ImagePreset(ImagePreset source){
  try {
    if (source.mBorder != null) {
      mBorder=source.mBorder.clone();
    }
    for (int i=0; i < source.mFilters.size(); i++) {
      FilterRepresentation representation=source.mFilters.elementAt(i).clone();
      addFilter(representation);
    }
  }
 catch (  java.lang.CloneNotSupportedException e) {
    Log.v(LOGTAG,""String_Node_Str"" + e);
  }
  mName=source.name();
  mHistoryName=source.name();
  mIsFxPreset=source.isFx();
  mImageLoader=source.getImageLoader();
  mPreviewImage=source.getPreviewImage();
  mGeoData.set(source.mGeoData);
}"
38413,"private void buildExposureCompensation(PreferenceGroup group,IconListPreference exposure){
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (max == 0 && min == 0) {
    removePreference(group,exposure.getKey());
    return;
  }
  float step=mParameters.getExposureCompensationStep();
  int maxValue=(int)FloatMath.floor(max * step);
  int minValue=(int)FloatMath.ceil(min * step);
  CharSequence entries[]=new CharSequence[maxValue - minValue + 1];
  CharSequence entryValues[]=new CharSequence[maxValue - minValue + 1];
  int[] icons=new int[maxValue - minValue + 1];
  TypedArray iconIds=mContext.getResources().obtainTypedArray(R.array.pref_camera_exposure_icons);
  for (int i=minValue; i <= maxValue; ++i) {
    entryValues[maxValue - i]=Integer.toString(Math.round(i / step));
    StringBuilder builder=new StringBuilder();
    if (i > 0)     builder.append('+');
    entries[maxValue - i]=builder.append(i).toString();
    icons[maxValue - i]=iconIds.getResourceId(3 + i,0);
  }
  exposure.setUseSingleIcon(true);
  exposure.setEntries(entries);
  exposure.setEntryValues(entryValues);
  exposure.setLargeIconIds(icons);
}","private void buildExposureCompensation(PreferenceGroup group,IconListPreference exposure){
  int max=Math.min(3,mParameters.getMaxExposureCompensation());
  int min=Math.max(-3,mParameters.getMinExposureCompensation());
  if (max == 0 && min == 0) {
    removePreference(group,exposure.getKey());
    return;
  }
  float step=mParameters.getExposureCompensationStep();
  int maxValue=(int)FloatMath.floor(max * step);
  int minValue=(int)FloatMath.ceil(min * step);
  CharSequence entries[]=new CharSequence[maxValue - minValue + 1];
  CharSequence entryValues[]=new CharSequence[maxValue - minValue + 1];
  int[] icons=new int[maxValue - minValue + 1];
  TypedArray iconIds=mContext.getResources().obtainTypedArray(R.array.pref_camera_exposure_icons);
  for (int i=minValue; i <= maxValue; ++i) {
    entryValues[maxValue - i]=Integer.toString(Math.round(i / step));
    StringBuilder builder=new StringBuilder();
    if (i > 0)     builder.append('+');
    entries[maxValue - i]=builder.append(i).toString();
    icons[maxValue - i]=iconIds.getResourceId(3 + i,0);
  }
  exposure.setUseSingleIcon(true);
  exposure.setEntries(entries);
  exposure.setEntryValues(entryValues);
  exposure.setLargeIconIds(icons);
}"
38414,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterFxRepresentation representation=(FilterFxRepresentation)super.clone();
  representation.setName(getName());
  representation.setBitmapResource(getBitmapResource());
  representation.setNameResource(getNameResource());
  representation.setFxBitmap(getFxBitmap());
  return representation;
}","@Override public synchronized FilterRepresentation clone() throws CloneNotSupportedException {
  FilterFxRepresentation representation=(FilterFxRepresentation)super.clone();
  representation.setName(getName());
  representation.setBitmapResource(getBitmapResource());
  representation.setNameResource(getNameResource());
  return representation;
}"
38415,"public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterFxRepresentation) {
    FilterFxRepresentation representation=(FilterFxRepresentation)a;
    setName(representation.getName());
    setBitmapResource(representation.getBitmapResource());
    setNameResource(representation.getNameResource());
    setFxBitmap(representation.getFxBitmap());
  }
}","public synchronized void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterFxRepresentation) {
    FilterFxRepresentation representation=(FilterFxRepresentation)a;
    setName(representation.getName());
    setBitmapResource(representation.getBitmapResource());
    setNameResource(representation.getNameResource());
  }
}"
38416,"public String toString(){
  return ""String_Node_Str"" + getName();
}","public String toString(){
  return ""String_Node_Str"" + hashCode() + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ mBitmapResource;
}"
38417,"@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  return representation;
}","@Override public FilterRepresentation clone() throws CloneNotSupportedException {
  FilterRepresentation representation=(FilterRepresentation)super.clone();
  representation.setName(getName());
  representation.setPriority(getPriority());
  representation.setFilterClass(getFilterClass());
  representation.setSupportsPartialRendering(supportsPartialRendering());
  representation.setTextId(getTextId());
  representation.setEditorId(getEditorId());
  representation.setButtonId(getButtonId());
  representation.setOverlayId(getOverlayId());
  representation.setOverlayOnly(getOverlayOnly());
  representation.setShowEditingControls(showEditingControls());
  representation.setShowParameterValue(showParameterValue());
  representation.setShowUtilityPanel(showUtilityPanel());
  representation.mTempRepresentation=null;
  if (DEBUG) {
    Log.v(LOGTAG,""String_Node_Str"" + this + ""String_Node_Str""+ representation+ ""String_Node_Str"");
  }
  return representation;
}"
38418,"public ImagePreset(ImagePreset source){
  try {
    if (source.mBorder != null) {
      mBorder=source.mBorder.clone();
    }
    for (int i=0; i < source.mFilters.size(); i++) {
      FilterRepresentation representation=source.mFilters.elementAt(i).clone();
      addFilter(representation);
    }
  }
 catch (  java.lang.CloneNotSupportedException e) {
    Log.v(LOGTAG,""String_Node_Str"" + e);
  }
  mName=source.name();
  mHistoryName=source.name();
  mIsFxPreset=source.isFx();
  mImageLoader=source.getImageLoader();
  mGeoData.set(source.mGeoData);
}","public ImagePreset(ImagePreset source){
  try {
    if (source.mBorder != null) {
      mBorder=source.mBorder.clone();
    }
    for (int i=0; i < source.mFilters.size(); i++) {
      FilterRepresentation representation=source.mFilters.elementAt(i).clone();
      addFilter(representation);
    }
  }
 catch (  java.lang.CloneNotSupportedException e) {
    Log.v(LOGTAG,""String_Node_Str"" + e);
  }
  mName=source.name();
  mHistoryName=source.name();
  mIsFxPreset=source.isFx();
  mImageLoader=source.getImageLoader();
  mPreviewImage=source.getPreviewImage();
  mGeoData.set(source.mGeoData);
}"
38419,"private void buildExposureCompensation(PreferenceGroup group,IconListPreference exposure){
  int max=mParameters.getMaxExposureCompensation();
  int min=mParameters.getMinExposureCompensation();
  if (max == 0 && min == 0) {
    removePreference(group,exposure.getKey());
    return;
  }
  float step=mParameters.getExposureCompensationStep();
  int maxValue=(int)FloatMath.floor(max * step);
  int minValue=(int)FloatMath.ceil(min * step);
  CharSequence entries[]=new CharSequence[maxValue - minValue + 1];
  CharSequence entryValues[]=new CharSequence[maxValue - minValue + 1];
  int[] icons=new int[maxValue - minValue + 1];
  TypedArray iconIds=mContext.getResources().obtainTypedArray(R.array.pref_camera_exposure_icons);
  for (int i=minValue; i <= maxValue; ++i) {
    entryValues[maxValue - i]=Integer.toString(Math.round(i / step));
    StringBuilder builder=new StringBuilder();
    if (i > 0)     builder.append('+');
    entries[maxValue - i]=builder.append(i).toString();
    icons[maxValue - i]=iconIds.getResourceId(3 + i,0);
  }
  exposure.setUseSingleIcon(true);
  exposure.setEntries(entries);
  exposure.setEntryValues(entryValues);
  exposure.setLargeIconIds(icons);
}","private void buildExposureCompensation(PreferenceGroup group,IconListPreference exposure){
  int max=Math.min(3,mParameters.getMaxExposureCompensation());
  int min=Math.max(-3,mParameters.getMinExposureCompensation());
  if (max == 0 && min == 0) {
    removePreference(group,exposure.getKey());
    return;
  }
  float step=mParameters.getExposureCompensationStep();
  int maxValue=(int)FloatMath.floor(max * step);
  int minValue=(int)FloatMath.ceil(min * step);
  CharSequence entries[]=new CharSequence[maxValue - minValue + 1];
  CharSequence entryValues[]=new CharSequence[maxValue - minValue + 1];
  int[] icons=new int[maxValue - minValue + 1];
  TypedArray iconIds=mContext.getResources().obtainTypedArray(R.array.pref_camera_exposure_icons);
  for (int i=minValue; i <= maxValue; ++i) {
    entryValues[maxValue - i]=Integer.toString(Math.round(i / step));
    StringBuilder builder=new StringBuilder();
    if (i > 0)     builder.append('+');
    entries[maxValue - i]=builder.append(i).toString();
    icons[maxValue - i]=iconIds.getResourceId(3 + i,0);
  }
  exposure.setUseSingleIcon(true);
  exposure.setEntries(entries);
  exposure.setEntryValues(entryValues);
  exposure.setLargeIconIds(icons);
}"
38420,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      mPanelController.resetParameters();
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38421,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      mPanelController.resetParameters();
      HistoryAdapter adapter=mMasterImage.getHistory();
      int position=adapter.undo();
      mMasterImage.onHistoryItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=mMasterImage.getHistory();
    int position=adapter.redo();
    mMasterImage.onHistoryItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.resetHistoryButton:
{
  resetHistory();
  return true;
}
case R.id.showImageStateButton:
{
toggleImageStatePanel();
return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38422,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilter.setActivityForMemoryToasts(this);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}"
38423,"@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  MasterImage.reset();
  FilteringPipeline.reset();
  ImageFilter.reset();
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  super.onDestroy();
}"
38424,"public static FilteringPipeline getPipeline(){
  if (sPipeline == null) {
    sPipeline=new FilteringPipeline();
  }
  return sPipeline;
}","public static FilteringPipeline getPipeline(){
  return gPipeline;
}"
38425,"public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp=imagePreset.apply(bmp);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp);
      mLoadingLock.unlock();
      return bmp;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}","public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      Bitmap bmp2=bmp.copy(Bitmap.Config.ARGB_8888,true);
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp2=imagePreset.apply(bmp2);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp2);
      mLoadingLock.unlock();
      return bmp2;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}"
38426,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
  return bitmap;
}"
38427,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilter.setActivityForMemoryToasts(this);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}"
38428,"@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  MasterImage.reset();
  FilteringPipeline.reset();
  ImageFilter.resetStatics();
  super.onDestroy();
}"
38429,"public static FilteringPipeline getPipeline(){
  return gPipeline;
}","public static FilteringPipeline getPipeline(){
  if (sPipeline == null) {
    sPipeline=new FilteringPipeline();
  }
  return sPipeline;
}"
38430,"public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (destination != null) {
      mLoadingLock.unlock();
      return bmp;
    }
    if (bmp != null) {
      Bitmap bmp2=bmp.copy(Bitmap.Config.ARGB_8888,true);
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp2=imagePreset.apply(bmp2);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp2);
      mLoadingLock.unlock();
      return bmp2;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}","public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (destination != null) {
      mLoadingLock.unlock();
      return bmp;
    }
    if (bmp != null) {
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp=imagePreset.apply(bmp);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp);
      mLoadingLock.unlock();
      return bmp;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}"
38431,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}"
38432,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilter.setActivityForMemoryToasts(this);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}"
38433,"@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  MasterImage.reset();
  FilteringPipeline.reset();
  ImageFilter.reset();
  super.onDestroy();
}"
38434,"public static FilteringPipeline getPipeline(){
  return gPipeline;
}","public static FilteringPipeline getPipeline(){
  if (sPipeline == null) {
    sPipeline=new FilteringPipeline();
  }
  return sPipeline;
}"
38435,"public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (destination != null) {
      mLoadingLock.unlock();
      return bmp;
    }
    if (bmp != null) {
      Bitmap bmp2=bmp.copy(Bitmap.Config.ARGB_8888,true);
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp2=imagePreset.apply(bmp2);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp2);
      mLoadingLock.unlock();
      return bmp2;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}","public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (destination != null) {
      mLoadingLock.unlock();
      return bmp;
    }
    if (bmp != null) {
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp=imagePreset.apply(bmp);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp);
      mLoadingLock.unlock();
      return bmp;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}"
38436,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}"
38437,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilter.setActivityForMemoryToasts(this);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}"
38438,"@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  MasterImage.reset();
  FilteringPipeline.reset();
  ImageFilter.resetStatics();
  super.onDestroy();
}"
38439,"public static FilteringPipeline getPipeline(){
  return gPipeline;
}","public static FilteringPipeline getPipeline(){
  if (sPipeline == null) {
    sPipeline=new FilteringPipeline();
  }
  return sPipeline;
}"
38440,"public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      Bitmap bmp2=bmp.copy(Bitmap.Config.ARGB_8888,true);
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp2=imagePreset.apply(bmp2);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp2);
      mLoadingLock.unlock();
      return bmp2;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}","public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp=imagePreset.apply(bmp);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp);
      mLoadingLock.unlock();
      return bmp;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}"
38441,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}"
38442,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilter.setActivityForMemoryToasts(this);
  setResources();
  Resources res=getResources();
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(res.getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(res.getString(R.string.original_picture_text));
  mIconSeedSize=res.getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=res.getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)res.getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  mEditorPlaceHolder.addEditor(new ImageOnlyEditor());
  mEditorPlaceHolder.addEditor(new EditorTinyPlanet());
  mEditorPlaceHolder.addEditor(new EditorRedEye());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mEditorPlaceHolder.hide();
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<FilterRepresentation> filtersRepresentations=new Vector<FilterRepresentation>();
  FiltersManager filtersManager=FiltersManager.getManager();
  filtersManager.addEffects(filtersRepresentations);
  for (  FilterRepresentation representation : filtersRepresentations) {
    setupFilterRepresentationButton(representation,listColors,mColorsButton);
  }
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  LoadBordersTask loadBorders=new LoadBordersTask(listBorders);
  loadBorders.execute();
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  mAction=intent.getAction();
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  if (mAction.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
  }
}"
38443,"@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mLoadBitmapTask != null) {
    mLoadBitmapTask.cancel(false);
  }
  MasterImage.reset();
  FilteringPipeline.reset();
  ImageFilter.reset();
  super.onDestroy();
}"
38444,"public static FilteringPipeline getPipeline(){
  return gPipeline;
}","public static FilteringPipeline getPipeline(){
  if (sPipeline == null) {
    sPipeline=new FilteringPipeline();
  }
  return sPipeline;
}"
38445,"public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      Bitmap bmp2=bmp.copy(Bitmap.Config.ARGB_8888,true);
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp2=imagePreset.apply(bmp2);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp2);
      mLoadingLock.unlock();
      return bmp2;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}","public Bitmap getScaleOneImageForPreset(ImageShow caller,ImagePreset imagePreset,Rect bounds,Rect destination,boolean force){
  mLoadingLock.lock();
  Bitmap bmp=mZoomCache.getImage(imagePreset,bounds);
  if (force || bmp == null) {
    BitmapFactory.Options options=null;
    if (destination != null) {
      options=new BitmapFactory.Options();
      if (bounds.width() > destination.width()) {
        int sampleSize=1;
        int w=bounds.width();
        while (w > destination.width()) {
          sampleSize*=2;
          w/=sampleSize;
        }
        options.inSampleSize=sampleSize;
      }
    }
    bmp=loadRegionBitmap(mUri,options,bounds);
    if (bmp != null) {
      float scaleFactor=imagePreset.getScaleFactor();
      imagePreset.setScaleFactor(1.0f);
      bmp=imagePreset.apply(bmp);
      imagePreset.setScaleFactor(scaleFactor);
      mZoomCache.setImage(imagePreset,bounds,bmp);
      mLoadingLock.unlock();
      return bmp;
    }
  }
  mLoadingLock.unlock();
  return bmp;
}"
38446,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,int quality){
  if (bitmap == null) {
    return bitmap;
  }
  try {
    prepare(bitmap,scaleFactor,quality);
    runFilter();
    update(bitmap);
  }
 catch (  android.renderscript.RSIllegalArgumentException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  android.renderscript.RSRuntimeException e) {
    Log.e(LOGTAG,""String_Node_Str"" + e);
  }
catch (  java.lang.OutOfMemoryError e) {
    System.gc();
    displayLowMemoryToast();
    Log.e(LOGTAG,""String_Node_Str"" + getName(),e);
  }
  return bitmap;
}"
38447,"public void setRepresentation(FilterVignetteRepresentation vignetteRep){
  mVignetteRep=vignetteRep;
  Matrix toImg=getScreenToImageMatrix(false);
  Matrix toScr=new Matrix();
  toImg.invert(toScr);
  float[] c=new float[]{mVignetteRep.getCenterX(),mVignetteRep.getCenterY()};
  if (Float.isNaN(c[0])) {
    float cx=mImageLoader.getOriginalBounds().width() / 2;
    float cy=mImageLoader.getOriginalBounds().height() / 2;
    float rx=cx * .8f;
    float ry=cy * .8f;
    mVignetteRep.setCenter(cx,cy);
    mVignetteRep.setRadius(rx,ry);
    c[0]=cx;
    c[1]=cy;
    toScr.mapPoints(c);
    mElipse.setCenter(c[0],c[1]);
    mElipse.setRadius(c[0] * 0.8f,c[1] * 0.8f);
  }
 else {
    toScr.mapPoints(c);
    mElipse.setCenter(c[0],c[1]);
    mElipse.setRadius(toScr.mapRadius(mVignetteRep.getRadiusX()),toScr.mapRadius(mVignetteRep.getRadiusY()));
  }
}","public void setRepresentation(FilterVignetteRepresentation vignetteRep){
  mVignetteRep=vignetteRep;
  Matrix toImg=getScreenToImageMatrix(false);
  Matrix toScr=new Matrix();
  toImg.invert(toScr);
  float[] c=new float[]{mVignetteRep.getCenterX(),mVignetteRep.getCenterY()};
  if (Float.isNaN(c[0])) {
    float cx=mImageLoader.getOriginalBounds().width() / 2;
    float cy=mImageLoader.getOriginalBounds().height() / 2;
    float rx=Math.min(cx,cy) * .8f;
    float ry=rx;
    mVignetteRep.setCenter(cx,cy);
    mVignetteRep.setRadius(rx,ry);
    c[0]=cx;
    c[1]=cy;
    toScr.mapPoints(c);
    if (getWidth() != 0) {
      mElipse.setCenter(c[0],c[1]);
      mElipse.setRadius(c[0] * 0.8f,c[1] * 0.8f);
    }
  }
 else {
    toScr.mapPoints(c);
    mElipse.setCenter(c[0],c[1]);
    mElipse.setRadius(toScr.mapRadius(mVignetteRep.getRadiusX()),toScr.mapRadius(mVignetteRep.getRadiusY()));
  }
}"
38448,"@Override public void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mElipse.draw(canvas);
}","@Override public void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mElipse.isUndefined()) {
    setRepresentation(mVignetteRep);
  }
  mElipse.draw(canvas);
}"
38449,"private void showPopupMenu(LinearLayout accessoryViewList){
  final FramedTextButton button=(FramedTextButton)accessoryViewList.findViewById(R.id.drawUtilityButton);
  if (button == null) {
    return;
  }
  final PopupMenu popupMenu=new PopupMenu(mImageShow.getActivity(),button);
  popupMenu.getMenuInflater().inflate(R.menu.filtershow_menu_draw,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
      if (item.getItemId() == R.id.draw_menu_color) {
        showColorGrid(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_size) {
        showSizeDialog(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_line) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
      }
 else       if (item.getItemId() == R.id.draw_menu_clear) {
        FilterDrawRepresentation drawRep=(FilterDrawRepresentation)getLocalRepresentation();
        drawRep.clear();
        commitLocalRepresentation();
      }
      mView.invalidate();
      return true;
    }
  }
);
  popupMenu.show();
}","private void showPopupMenu(LinearLayout accessoryViewList){
  final FramedTextButton button=(FramedTextButton)accessoryViewList.findViewById(R.id.drawUtilityButton);
  if (button == null) {
    return;
  }
  final PopupMenu popupMenu=new PopupMenu(mImageShow.getActivity(),button);
  popupMenu.getMenuInflater().inflate(R.menu.filtershow_menu_draw,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
      if (item.getItemId() == R.id.draw_menu_color) {
        showColorGrid(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_size) {
        showSizeDialog(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_line) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
      }
 else       if (item.getItemId() == R.id.draw_menu_clear) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.resetParameter();
        commitLocalRepresentation();
      }
      mView.invalidate();
      return true;
    }
  }
);
  popupMenu.show();
}"
38450,"@Override public boolean onMenuItemClick(MenuItem item){
  ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
  if (item.getItemId() == R.id.draw_menu_color) {
    showColorGrid(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_size) {
    showSizeDialog(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_line) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
  }
 else   if (item.getItemId() == R.id.draw_menu_clear) {
    FilterDrawRepresentation drawRep=(FilterDrawRepresentation)getLocalRepresentation();
    drawRep.clear();
    commitLocalRepresentation();
  }
  mView.invalidate();
  return true;
}","@Override public boolean onMenuItemClick(MenuItem item){
  ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
  if (item.getItemId() == R.id.draw_menu_color) {
    showColorGrid(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_size) {
    showSizeDialog(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_line) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
  }
 else   if (item.getItemId() == R.id.draw_menu_clear) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.resetParameter();
    commitLocalRepresentation();
  }
  mView.invalidate();
  return true;
}"
38451,"@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}","@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
 else {
        mDrawing=null;
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}"
38452,"public void drawData(Canvas canvas,Matrix originalRotateToScreen,int quality){
  Paint paint=new Paint();
  if (quality == ImagePreset.QUALITY_FINAL) {
    paint.setAntiAlias(true);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(Color.RED);
  paint.setStrokeWidth(40);
  if (mParameters.getDrawing().isEmpty() && mParameters.getCurrentDrawing() == null) {
    return;
  }
  if (quality == ImagePreset.QUALITY_FINAL) {
    for (    FilterDrawRepresentation.StrokeData strokeData : mParameters.getDrawing()) {
      paint(strokeData,canvas,originalRotateToScreen,quality);
    }
    return;
  }
  if (mOverlayBitmap == null || mOverlayBitmap.getWidth() != canvas.getWidth() || mOverlayBitmap.getHeight() != canvas.getHeight()) {
    mOverlayBitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
    mCachedStrokes=0;
  }
  if (mCachedStrokes < mParameters.getDrawing().size()) {
    fillBuffer(originalRotateToScreen);
  }
  canvas.drawBitmap(mOverlayBitmap,0,0,paint);
  StrokeData stroke=mParameters.getCurrentDrawing();
  if (stroke != null) {
    paint(stroke,canvas,originalRotateToScreen,quality);
  }
}","public void drawData(Canvas canvas,Matrix originalRotateToScreen,int quality){
  Paint paint=new Paint();
  if (quality == ImagePreset.QUALITY_FINAL) {
    paint.setAntiAlias(true);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(Color.RED);
  paint.setStrokeWidth(40);
  if (mParameters.getDrawing().isEmpty() && mParameters.getCurrentDrawing() == null) {
    return;
  }
  if (quality == ImagePreset.QUALITY_FINAL) {
    for (    FilterDrawRepresentation.StrokeData strokeData : mParameters.getDrawing()) {
      paint(strokeData,canvas,originalRotateToScreen,quality);
    }
    return;
  }
  if (mOverlayBitmap == null || mOverlayBitmap.getWidth() != canvas.getWidth() || mOverlayBitmap.getHeight() != canvas.getHeight() || mParameters.getDrawing().size() < mCachedStrokes) {
    mOverlayBitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
    mCachedStrokes=0;
  }
  if (mCachedStrokes < mParameters.getDrawing().size()) {
    fillBuffer(originalRotateToScreen);
  }
  canvas.drawBitmap(mOverlayBitmap,0,0,paint);
  StrokeData stroke=mParameters.getCurrentDrawing();
  if (stroke != null) {
    paint(stroke,canvas,originalRotateToScreen,quality);
  }
}"
38453,"@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}","@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
 else {
        mDrawing=null;
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}"
38454,"private void showPopupMenu(LinearLayout accessoryViewList){
  final FramedTextButton button=(FramedTextButton)accessoryViewList.findViewById(R.id.drawUtilityButton);
  if (button == null) {
    return;
  }
  final PopupMenu popupMenu=new PopupMenu(mImageShow.getActivity(),button);
  popupMenu.getMenuInflater().inflate(R.menu.filtershow_menu_draw,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
      if (item.getItemId() == R.id.draw_menu_color) {
        showColorGrid(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_size) {
        showSizeDialog(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_line) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
      }
 else       if (item.getItemId() == R.id.draw_menu_clear) {
        FilterDrawRepresentation drawRep=(FilterDrawRepresentation)getLocalRepresentation();
        drawRep.clear();
        commitLocalRepresentation();
      }
      mView.invalidate();
      return true;
    }
  }
);
  popupMenu.show();
}","private void showPopupMenu(LinearLayout accessoryViewList){
  final FramedTextButton button=(FramedTextButton)accessoryViewList.findViewById(R.id.drawUtilityButton);
  if (button == null) {
    return;
  }
  final PopupMenu popupMenu=new PopupMenu(mImageShow.getActivity(),button);
  popupMenu.getMenuInflater().inflate(R.menu.filtershow_menu_draw,popupMenu.getMenu());
  popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
      if (item.getItemId() == R.id.draw_menu_color) {
        showColorGrid(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_size) {
        showSizeDialog(item);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
      }
 else       if (item.getItemId() == R.id.draw_menu_style_line) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
      }
 else       if (item.getItemId() == R.id.draw_menu_clear) {
        ImageDraw idraw=(ImageDraw)mImageShow;
        idraw.resetParameter();
        commitLocalRepresentation();
      }
      mView.invalidate();
      return true;
    }
  }
);
  popupMenu.show();
}"
38455,"@Override public boolean onMenuItemClick(MenuItem item){
  ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
  if (item.getItemId() == R.id.draw_menu_color) {
    showColorGrid(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_size) {
    showSizeDialog(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_line) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
  }
 else   if (item.getItemId() == R.id.draw_menu_clear) {
    FilterDrawRepresentation drawRep=(FilterDrawRepresentation)getLocalRepresentation();
    drawRep.clear();
    commitLocalRepresentation();
  }
  mView.invalidate();
  return true;
}","@Override public boolean onMenuItemClick(MenuItem item){
  ImageFilterDraw filter=(ImageFilterDraw)mImageShow.getCurrentFilter();
  if (item.getItemId() == R.id.draw_menu_color) {
    showColorGrid(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_size) {
    showSizeDialog(item);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_marker) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_MARKER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_brush_spatter) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.BRUSH_STYLE_SPATTER);
  }
 else   if (item.getItemId() == R.id.draw_menu_style_line) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.setStyle(ImageFilterDraw.SIMPLE_STYLE);
  }
 else   if (item.getItemId() == R.id.draw_menu_clear) {
    ImageDraw idraw=(ImageDraw)mImageShow;
    idraw.resetParameter();
    commitLocalRepresentation();
  }
  mView.invalidate();
  return true;
}"
38456,"@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}","@Override public void useParametersFrom(FilterRepresentation a){
  if (a instanceof FilterDrawRepresentation) {
    FilterDrawRepresentation representation=(FilterDrawRepresentation)a;
    try {
      if (representation.mCurrent != null) {
        mCurrent=(StrokeData)representation.mCurrent.clone();
      }
 else {
        mCurrent=null;
      }
      if (representation.mDrawing != null) {
        mDrawing=(Vector<StrokeData>)representation.mDrawing.clone();
      }
 else {
        mDrawing=null;
      }
    }
 catch (    CloneNotSupportedException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.v(LOGTAG,""String_Node_Str"" + a);
  }
}"
38457,"public void drawData(Canvas canvas,Matrix originalRotateToScreen,int quality){
  Paint paint=new Paint();
  if (quality == ImagePreset.QUALITY_FINAL) {
    paint.setAntiAlias(true);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(Color.RED);
  paint.setStrokeWidth(40);
  if (mParameters.getDrawing().isEmpty() && mParameters.getCurrentDrawing() == null) {
    return;
  }
  if (quality == ImagePreset.QUALITY_FINAL) {
    for (    FilterDrawRepresentation.StrokeData strokeData : mParameters.getDrawing()) {
      paint(strokeData,canvas,originalRotateToScreen,quality);
    }
    return;
  }
  if (mOverlayBitmap == null || mOverlayBitmap.getWidth() != canvas.getWidth() || mOverlayBitmap.getHeight() != canvas.getHeight()) {
    mOverlayBitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
    mCachedStrokes=0;
  }
  if (mCachedStrokes < mParameters.getDrawing().size()) {
    fillBuffer(originalRotateToScreen);
  }
  canvas.drawBitmap(mOverlayBitmap,0,0,paint);
  StrokeData stroke=mParameters.getCurrentDrawing();
  if (stroke != null) {
    paint(stroke,canvas,originalRotateToScreen,quality);
  }
}","public void drawData(Canvas canvas,Matrix originalRotateToScreen,int quality){
  Paint paint=new Paint();
  if (quality == ImagePreset.QUALITY_FINAL) {
    paint.setAntiAlias(true);
  }
  paint.setStyle(Style.STROKE);
  paint.setColor(Color.RED);
  paint.setStrokeWidth(40);
  if (mParameters.getDrawing().isEmpty() && mParameters.getCurrentDrawing() == null) {
    return;
  }
  if (quality == ImagePreset.QUALITY_FINAL) {
    for (    FilterDrawRepresentation.StrokeData strokeData : mParameters.getDrawing()) {
      paint(strokeData,canvas,originalRotateToScreen,quality);
    }
    return;
  }
  if (mOverlayBitmap == null || mOverlayBitmap.getWidth() != canvas.getWidth() || mOverlayBitmap.getHeight() != canvas.getHeight() || mParameters.getDrawing().size() < mCachedStrokes) {
    mOverlayBitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);
    mCachedStrokes=0;
  }
  if (mCachedStrokes < mParameters.getDrawing().size()) {
    fillBuffer(originalRotateToScreen);
  }
  canvas.drawBitmap(mOverlayBitmap,0,0,paint);
  StrokeData stroke=mParameters.getCurrentDrawing();
  if (stroke != null) {
    paint(stroke,canvas,originalRotateToScreen,quality);
  }
}"
38458,"@Override public boolean onTouchEvent(MotionEvent event){
  float ox=mDotX;
  float oy=mDotY;
  float x=event.getX();
  float y=event.getY();
  mDotX=x;
  if (mDotX < mBorder) {
    mDotX=mBorder;
  }
  if (mDotX > mWidth - mBorder) {
    mDotX=mWidth - mBorder;
  }
  mHSVO[3]=(mDotX - mBorder) / (mWidth - mBorder * 2);
  notifyColorListeners(mHSVO);
  setupButton();
  invalidate((int)(ox - mDotRadus),(int)(oy - mDotRadus),(int)(ox + mDotRadus),(int)(oy + mDotRadus));
  invalidate((int)(mDotX - mDotRadus),(int)(mDotY - mDotRadus),(int)(mDotX + mDotRadus),(int)(mDotY + mDotRadus));
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  float ox=mDotX;
  float oy=mDotY;
  float x=event.getX();
  float y=event.getY();
  mDotX=x;
  if (mDotX < mBorder) {
    mDotX=mBorder;
  }
  if (mDotX > mWidth - mBorder) {
    mDotX=mWidth - mBorder;
  }
  mHSVO[3]=(mDotX - mBorder) / (mWidth - mBorder * 2);
  notifyColorListeners(mHSVO);
  setupButton();
  invalidate((int)(ox - mDotRadius),(int)(oy - mDotRadius),(int)(ox + mDotRadius),(int)(oy + mDotRadius));
  invalidate((int)(mDotX - mDotRadius),(int)(mDotY - mDotRadius),(int)(mDotX + mDotRadius),(int)(mDotY + mDotRadius));
  return true;
}"
38459,"public ColorOpacityView(Context ctx,AttributeSet attrs){
  super(ctx,attrs);
  DisplayMetrics metrics=ctx.getResources().getDisplayMetrics();
  float mDpToPix=metrics.density;
  mDotRadus=DOT_SIZE * mDpToPix;
  mBorder=BORDER_SIZE * mDpToPix;
  mBarPaint1=new Paint();
  mDotPaint=new Paint();
  mDotPaint.setStyle(Paint.Style.FILL);
  mDotPaint.setColor(ctx.getResources().getColor(R.color.slider_dot_color));
  mSliderColor=ctx.getResources().getColor(R.color.slider_line_color);
  mBarPaint1.setStyle(Paint.Style.FILL);
  mLinePaint1=new Paint();
  mLinePaint1.setColor(Color.GRAY);
  mLinePaint2=new Paint();
  mLinePaint2.setColor(mSliderColor);
  mLinePaint2.setStrokeWidth(4);
  int[] colors=new int[16 * 16];
  for (int i=0; i < colors.length; i++) {
    int y=i / (16 * 8);
    int x=(i / 8) % 2;
    colors[i]=(x == y) ? 0xFFAAAAAA : 0xFF444444;
  }
  Bitmap bitmap=Bitmap.createBitmap(colors,16,16,Bitmap.Config.ARGB_8888);
  BitmapShader bs=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  mCheckPaint=new Paint();
  mCheckPaint.setShader(bs);
}","public ColorOpacityView(Context ctx,AttributeSet attrs){
  super(ctx,attrs);
  DisplayMetrics metrics=ctx.getResources().getDisplayMetrics();
  float mDpToPix=metrics.density;
  mDotRadius=DOT_SIZE * mDpToPix;
  mBorder=BORDER_SIZE * mDpToPix;
  mBarPaint1=new Paint();
  mDotPaint=new Paint();
  mDotPaint.setStyle(Paint.Style.FILL);
  mDotPaint.setColor(ctx.getResources().getColor(R.color.slider_dot_color));
  mSliderColor=ctx.getResources().getColor(R.color.slider_line_color);
  mBarPaint1.setStyle(Paint.Style.FILL);
  mLinePaint1=new Paint();
  mLinePaint1.setColor(Color.GRAY);
  mLinePaint2=new Paint();
  mLinePaint2.setColor(mSliderColor);
  mLinePaint2.setStrokeWidth(4);
  int[] colors=new int[16 * 16];
  for (int i=0; i < colors.length; i++) {
    int y=i / (16 * 8);
    int x=(i / 8) % 2;
    colors[i]=(x == y) ? 0xFFAAAAAA : 0xFF444444;
  }
  Bitmap bitmap=Bitmap.createBitmap(colors,16,16,Bitmap.Config.ARGB_8888);
  BitmapShader bs=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  mCheckPaint=new Paint();
  mCheckPaint.setShader(bs);
}"
38460,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawColor(mBgcolor);
  canvas.drawRect(mBorder,mBorder,mWidth - mBorder,mHeight - mBorder,mCheckPaint);
  canvas.drawRect(mBorder,mBorder,mWidth - mBorder,mHeight - mBorder,mBarPaint1);
  canvas.drawLine(mDotX,mDotY,mWidth - mBorder,mDotY,mLinePaint1);
  canvas.drawLine(mBorder,mDotY,mDotX,mDotY,mLinePaint2);
  if (mDotX != Float.NaN) {
    canvas.drawCircle(mDotX,mDotY,mDotRadus,mDotPaint);
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  canvas.drawColor(mBgcolor);
  canvas.drawRect(mBorder,mBorder,mWidth - mBorder,mHeight - mBorder,mCheckPaint);
  canvas.drawRect(mBorder,mBorder,mWidth - mBorder,mHeight - mBorder,mBarPaint1);
  canvas.drawLine(mDotX,mDotY,mWidth - mBorder,mDotY,mLinePaint1);
  canvas.drawLine(mBorder,mDotY,mDotX,mDotY,mLinePaint2);
  if (mDotX != Float.NaN) {
    canvas.drawCircle(mDotX,mDotY,mDotRadius,mDotPaint);
  }
}"
38461,"private void setupButton(){
  float pos=mHSVO[3] * (mWidth - mBorder * 2);
  mDotX=pos + mBorder;
  int[] colors3=new int[]{mSliderColor,mSliderColor,0x66000000,0};
  RadialGradient g=new RadialGradient(mDotX,mDotY,mDotRadus,colors3,new float[]{0,.3f,.31f,1},Shader.TileMode.CLAMP);
  mDotPaint.setShader(g);
}","private void setupButton(){
  float pos=mHSVO[3] * (mWidth - mBorder * 2);
  mDotX=pos + mBorder;
  int[] colors3=new int[]{mSliderColor,mSliderColor,0x66000000,0};
  RadialGradient g=new RadialGradient(mDotX,mDotY,mDotRadius,colors3,new float[]{0,.3f,.31f,1},Shader.TileMode.CLAMP);
  mDotPaint.setShader(g);
}"
38462,"@Override public void paintCurrentStroke(Canvas canvas,Matrix toScrMatrix,boolean highQuality){
  Path path=mCurrentPath;
  if (path == null) {
    return;
  }
  Paint paint=new Paint();
  canvas.save();
  canvas.concat(toScrMatrix);
  paint.setStyle(Style.STROKE);
  float scale=toScrMatrix.mapRadius(1);
  draw(canvas,paint,mCurrentColor,mCurrentRadius,path);
  canvas.restore();
}","@Override public void paintCurrentStroke(Canvas canvas,Matrix toScrMatrix,boolean highQuality){
  Path path=mCurrentPath;
  if (path == null) {
    return;
  }
  Paint paint=new Paint();
  paint.setStyle(Style.STROKE);
  float scale=toScrMatrix.mapRadius(1);
  Path mCacheTransPath=new Path();
  mCacheTransPath.addPath(path,toScrMatrix);
  draw(canvas,paint,mCurrentColor,toScrMatrix.mapRadius(mCurrentRadius),mCacheTransPath);
}"
38463,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(getResources().getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(getResources().getString(R.string.original_picture_text));
  mIconSeedSize=getResources().getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=getResources().getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)getResources().getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageRedEyes=(ImageRedEyes)findViewById(R.id.imageRedEyes);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mImageViews.add(mImageRedEyes);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageRedEyes.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageRedEyes));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.redEyeButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<ImageFilter> filters=new Vector<ImageFilter>();
  FiltersManager.addFilters(filters,mImageLoader);
  for (  ImageFilter filter : filters) {
    filter.setParameter(filter.getDefaultParameter());
    filter.setName(getString(filter.getTextId()));
    setupFilterButton(filter,listColors,mColorsButton);
  }
  mPanelController.addFilter(new ImageFilterRedEye());
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(SEEK_BAR_MAX);
  mImageShow.setSeekBar(seekBar);
  mImageTinyPlanet.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  String action=intent.getAction();
  if (action.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
    mPanelController.showComponent(findViewById(R.id.cropButton));
  }
 else   if (action.equalsIgnoreCase(TINY_PLANET_ACTION)) {
    mPanelController.showComponent(findViewById(R.id.tinyplanetButton));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setupMasterImage();
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(getResources().getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(getResources().getString(R.string.original_picture_text));
  mIconSeedSize=getResources().getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=getResources().getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)getResources().getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageRedEyes=(ImageRedEyes)findViewById(R.id.imageRedEyes);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mImageViews.add(mImageRedEyes);
  mEditorPlaceHolder.setContainer((FrameLayout)findViewById(R.id.editorContainer));
  mEditorPlaceHolder.addEditor(new EditorDraw());
  mEditorPlaceHolder.addEditor(new BasicEditor());
  EditorManager.addEditors(mEditorPlaceHolder);
  mEditorPlaceHolder.setOldViews(mImageViews);
  mEditorPlaceHolder.setImageLoader(mImageLoader);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageCrop.setImageLoader(mImageLoader);
  mImageRotate.setImageLoader(mImageLoader);
  mImageFlip.setImageLoader(mImageLoader);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageRedEyes.setImageLoader(mImageLoader);
  mImageDraw.setImageLoader(mImageLoader);
  mPanelController.setActivity(this);
  mPanelController.setEditorPlaceHolder(mEditorPlaceHolder);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageRedEyes));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.redEyeButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<ImageFilter> filters=new Vector<ImageFilter>();
  FiltersManager.addFilters(filters,mImageLoader);
  for (  ImageFilter filter : filters) {
    filter.setParameter(filter.getDefaultParameter());
    filter.setName(getString(filter.getTextId()));
    setupFilterButton(filter,listColors,mColorsButton);
  }
  mPanelController.addFilter(new ImageFilterRedEye());
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mMasterImage.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mMasterImage.getState());
  mImageLoader.setAdapter(mMasterImage.getHistory());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(SEEK_BAR_MAX);
  mImageShow.setSeekBar(seekBar);
  mImageTinyPlanet.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  String action=intent.getAction();
  if (action.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
    mPanelController.showComponent(findViewById(R.id.cropButton));
  }
 else   if (action.equalsIgnoreCase(TINY_PLANET_ACTION)) {
    mPanelController.showComponent(findViewById(R.id.tinyplanetButton));
  }
}"
38464,"@Override public ImageFilter clone() throws CloneNotSupportedException {
  ImageFilterCurves filter=(ImageFilterCurves)super.clone();
  for (int i=0; i < 4; i++) {
    if (mSplines[i] != null) {
      filter.setSpline(mSplines[i],i);
    }
  }
  return filter;
}","@Override public ImageFilter clone() throws CloneNotSupportedException {
  ImageFilterCurves filter=(ImageFilterCurves)super.clone();
  filter.mSplines=new Spline[4];
  for (int i=0; i < 4; i++) {
    if (mSplines[i] != null) {
      filter.setSpline(mSplines[i],i);
    }
  }
  return filter;
}"
38465,"public void reset(){
  Spline spline=new Spline();
  spline.addPoint(0.0f,1.0f);
  spline.addPoint(1.0f,0.0f);
  for (int i=0; i < 4; i++) {
    mSplines[i]=new Spline(spline);
  }
}","@Override public void reset(){
  Spline spline=new Spline();
  spline.addPoint(0.0f,1.0f);
  spline.addPoint(1.0f,0.0f);
  for (int i=0; i < 4; i++) {
    mSplines[i]=new Spline(spline);
  }
}"
38466,"public static void addEditors(EditorPlaceHolder editorPlaceHolder){
  editorPlaceHolder.addEditor(new EditorZoom());
  editorPlaceHolder.addEditor(new EditorCurves());
  editorPlaceHolder.addEditor(new BasicEditor());
  editorPlaceHolder.addEditor(new EditorDraw());
}","public static void addEditors(EditorPlaceHolder editorPlaceHolder){
  editorPlaceHolder.addEditor(new EditorZoom());
  editorPlaceHolder.addEditor(new EditorCurves());
  editorPlaceHolder.addEditor(new EditorDraw());
}"
38467,"void resetHistory(){
  mNullFxFilter.onClick(mNullFxFilter);
  mNullBorderFilter.onClick(mNullBorderFilter);
  HistoryAdapter adapter=mImageShow.getHistory();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  mPanelController.resetParameters();
  invalidateViews();
}","void resetHistory(){
  dispatchNullFilterClick();
  HistoryAdapter adapter=mImageShow.getHistory();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  mPanelController.resetParameters();
  invalidateViews();
}"
38468,"@Override protected void onPostExecute(Boolean result){
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  mLoadBitmapTask=null;
  super.onPostExecute(result);
}","@Override protected void onPostExecute(Boolean result){
  if (isCancelled()) {
    return;
  }
  if (!result) {
    cannotLoadImage();
  }
  mImageShow.requestFilteredImages();
  Bitmap bmap=mImageShow.getFilteredImage();
  if (bmap != null && bmap.getWidth() > 0 && bmap.getHeight() > 0) {
    float w=bmap.getWidth();
    float h=bmap.getHeight();
    float f=mIconSeedSize / Math.min(w,h);
    w=w * f;
    h=h * f;
    bmap=Bitmap.createScaledBitmap(bmap,(int)w,(int)h,true);
    int num_colors_buttons=listColors.getChildCount();
    for (int i=0; i < num_colors_buttons; i++) {
      FilterIconButton b=(FilterIconButton)listColors.getChildAt(i);
      b.setIcon(bmap);
    }
    int num_filters_buttons=listFilters.getChildCount();
    for (int i=0; i < num_filters_buttons; i++) {
      FilterIconButton b=(FilterIconButton)listFilters.getChildAt(i);
      b.setIcon(bmap);
    }
    int num_borders_buttons=listBorders.getChildCount();
    for (int i=0; i < num_borders_buttons; i++) {
      FilterIconButton b=(FilterIconButton)listBorders.getChildAt(i);
      b.setIcon(bmap);
    }
  }
  mLoadBitmapTask=null;
  super.onPostExecute(result);
}"
38469,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(getResources().getColor(R.color.background_screen));
  ImageSmallFilter.setDefaultBackgroundColor(getResources().getColor(R.color.background_main_toolbar));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(getResources().getString(R.string.original_picture_text));
  ImageButtonTitle.setTextSize((int)getPixelsFromDip(12));
  ImageButtonTitle.setTextPadding((int)getPixelsFromDip(10));
  ImageSmallFilter.setMargin((int)getPixelsFromDip(3));
  ImageSmallFilter.setTextMargin((int)getPixelsFromDip(4));
  Drawable curveHandle=getResources().getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)getResources().getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  LinearLayout listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageRedEyes=(ImageRedEyes)findViewById(R.id.imageRedEyes);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mImageViews.add(mImageRedEyes);
  for (  ImageShow imageShow : mImageViews) {
    mImageLoader.addCacheListener(imageShow);
  }
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageTinyPlanet.setMaster(mImageShow);
  mImageRedEyes.setImageLoader(mImageLoader);
  mImageRedEyes.setMaster(mImageShow);
  mImageDraw.setImageLoader(mImageLoader);
  mImageDraw.setMaster(mImageShow);
  mPanelController.setActivity(this);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageRedEyes));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.redEyeButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<ImageFilter> filters=new Vector<ImageFilter>();
  FiltersManager.addFilters(filters,mImageLoader);
  for (  ImageFilter filter : filters) {
    ImageSmallFilter fView=new ImageSmallFilter(this);
    filter.setParameter(filter.getPreviewParameter());
    filter.setName(getString(filter.getTextId()));
    fView.setImageFilter(filter);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(filter.getButtonId());
    if (filter.getOverlayBitmaps() != 0) {
      Bitmap bitmap=BitmapFactory.decodeResource(getResources(),filter.getOverlayBitmaps());
      fView.setOverlayBitmap(bitmap);
    }
    mPanelController.addComponent(mColorsButton,fView);
    mPanelController.addFilter(filter);
    listColors.addView(fView);
  }
  mPanelController.addFilter(new ImageFilterRedEye());
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter(mImageShow.getHistory());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(SEEK_BAR_MAX);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mImageTinyPlanet.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  String action=intent.getAction();
  if (action.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
    mPanelController.showComponent(findViewById(R.id.cropButton));
  }
 else   if (action.equalsIgnoreCase(TINY_PLANET_ACTION)) {
    mPanelController.showComponent(findViewById(R.id.tinyplanetButton));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  ImageShow.setDefaultBackgroundColor(getResources().getColor(R.color.background_screen));
  ImageZoom.setZoomedSize(getPixelsFromDip(256));
  FramedTextButton.setTextSize((int)getPixelsFromDip(14));
  FramedTextButton.setTrianglePadding((int)getPixelsFromDip(4));
  FramedTextButton.setTriangleSize((int)getPixelsFromDip(10));
  ImageShow.setTextSize((int)getPixelsFromDip(12));
  ImageShow.setTextPadding((int)getPixelsFromDip(10));
  ImageShow.setOriginalTextMargin((int)getPixelsFromDip(4));
  ImageShow.setOriginalTextSize((int)getPixelsFromDip(18));
  ImageShow.setOriginalText(getResources().getString(R.string.original_picture_text));
  mIconSeedSize=getResources().getDimensionPixelSize(R.dimen.thumbnail_size);
  Drawable curveHandle=getResources().getDrawable(R.drawable.camera_crop);
  int curveHandleSize=(int)getResources().getDimension(R.dimen.crop_indicator_size);
  Spline.setCurveHandle(curveHandle,curveHandleSize);
  Spline.setCurveWidth((int)getPixelsFromDip(3));
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  mSaveButton=actionBar.getCustomView();
  mSaveButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(this,getApplicationContext());
  listFilters=(LinearLayout)findViewById(R.id.listFilters);
  listBorders=(LinearLayout)findViewById(R.id.listBorders);
  listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageTinyPlanet=(ImageTinyPlanet)findViewById(R.id.imageTinyPlanet);
  mImageRedEyes=(ImageRedEyes)findViewById(R.id.imageRedEyes);
  mImageDraw=(ImageDraw)findViewById(R.id.imageDraw);
  mImageCrop.setAspectTextSize((int)getPixelsFromDip(18));
  ImageCrop.setTouchTolerance((int)getPixelsFromDip(25));
  ImageCrop.setMinCropSize((int)getPixelsFromDip(55));
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mImageViews.add(mImageTinyPlanet);
  mImageViews.add(mImageRedEyes);
  for (  ImageShow imageShow : mImageViews) {
    mImageLoader.addCacheListener(imageShow);
  }
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mImageTinyPlanet.setImageLoader(mImageLoader);
  mImageTinyPlanet.setMaster(mImageShow);
  mImageRedEyes.setImageLoader(mImageLoader);
  mImageRedEyes.setMaster(mImageShow);
  mImageDraw.setImageLoader(mImageLoader);
  mImageDraw.setMaster(mImageShow);
  mPanelController.setActivity(this);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addImageView(findViewById(R.id.imageTinyPlanet));
  mPanelController.addImageView(findViewById(R.id.imageRedEyes));
  mPanelController.addImageView(findViewById(R.id.imageDraw));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.redEyeButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  Vector<ImageFilter> filters=new Vector<ImageFilter>();
  FiltersManager.addFilters(filters,mImageLoader);
  for (  ImageFilter filter : filters) {
    filter.setParameter(filter.getDefaultParameter());
    filter.setName(getString(filter.getTextId()));
    setupFilterButton(filter,listColors,mColorsButton);
  }
  mPanelController.addFilter(new ImageFilterRedEye());
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistory());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter(mImageShow.getHistory());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(SEEK_BAR_MAX);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mImageTinyPlanet.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.panelAccessoryViewList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  if (intent.getBooleanExtra(LAUNCH_FULLSCREEN,false)) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  if (intent.getData() != null) {
    startLoadBitmap(intent.getData());
  }
 else {
    pickImage();
  }
  String action=intent.getAction();
  if (action.equalsIgnoreCase(CROP_ACTION)) {
    Bundle extras=intent.getExtras();
    if (extras != null) {
      mCropExtras=new CropExtras(extras.getInt(CropExtras.KEY_OUTPUT_X,0),extras.getInt(CropExtras.KEY_OUTPUT_Y,0),extras.getBoolean(CropExtras.KEY_SCALE,true) && extras.getBoolean(CropExtras.KEY_SCALE_UP_IF_NEEDED,false),extras.getInt(CropExtras.KEY_ASPECT_X,0),extras.getInt(CropExtras.KEY_ASPECT_Y,0),extras.getBoolean(CropExtras.KEY_SET_AS_WALLPAPER,false),extras.getBoolean(CropExtras.KEY_RETURN_DATA,false),(Uri)extras.getParcelable(MediaStore.EXTRA_OUTPUT),extras.getString(CropExtras.KEY_OUTPUT_FORMAT),extras.getBoolean(CropExtras.KEY_SHOW_WHEN_LOCKED,false),extras.getFloat(CropExtras.KEY_SPOTLIGHT_X),extras.getFloat(CropExtras.KEY_SPOTLIGHT_Y));
      if (mCropExtras.getShowWhenLocked()) {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
      }
      mImageShow.getImagePreset().mGeoData.setCropExtras(mCropExtras);
      mImageCrop.setExtras(mCropExtras);
      String s=getString(R.string.Fixed);
      mImageCrop.setAspectString(s);
      mImageCrop.setCropActionFlag(true);
      mPanelController.setFixedAspect(mCropExtras.getAspectX() > 0 && mCropExtras.getAspectY() > 0);
    }
    mPanelController.showComponent(findViewById(R.id.cropButton));
  }
 else   if (action.equalsIgnoreCase(TINY_PLANET_ACTION)) {
    mPanelController.showComponent(findViewById(R.id.tinyplanetButton));
  }
}"
38470,"private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[12];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd1=getResources().getDrawable(R.drawable.filtershow_border_4x5);
  borders[p++]=new ImageFilterBorder(npd1);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_brush);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_grunge);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_sumi_e);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_tape);
  borders[p++]=new ImageFilterBorder(npd5);
  borders[p++]=new ImageFilterParametricBorder(Color.BLACK,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(Color.BLACK,mImageBorderSize,mImageBorderSize);
  borders[p++]=new ImageFilterParametricBorder(Color.WHITE,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(Color.WHITE,mImageBorderSize,mImageBorderSize);
  int creamColor=Color.argb(255,237,237,227);
  borders[p++]=new ImageFilterParametricBorder(creamColor,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(creamColor,mImageBorderSize,mImageBorderSize);
  ImageSmallFilter previousFilter=null;
  for (int i=0; i < p; i++) {
    ImageSmallBorder filter=new ImageSmallBorder(this);
    if (i == 0) {
      mNullBorderFilter=filter;
    }
 else {
      filter.setNulfilter(mNullBorderFilter);
    }
    borders[i].setName(getString(R.string.borders));
    filter.setImageFilter(borders[i]);
    filter.setController(this);
    filter.setBorder(true);
    filter.setImageLoader(mImageLoader);
    filter.setShowTitle(false);
    listBorders.addView(filter);
    previousFilter=filter;
  }
}","private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[12];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd1=getResources().getDrawable(R.drawable.filtershow_border_4x5);
  borders[p++]=new ImageFilterBorder(npd1);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_brush);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_grunge);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_sumi_e);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_tape);
  borders[p++]=new ImageFilterBorder(npd5);
  borders[p++]=new ImageFilterParametricBorder(Color.BLACK,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(Color.BLACK,mImageBorderSize,mImageBorderSize);
  borders[p++]=new ImageFilterParametricBorder(Color.WHITE,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(Color.WHITE,mImageBorderSize,mImageBorderSize);
  int creamColor=Color.argb(255,237,237,227);
  borders[p++]=new ImageFilterParametricBorder(creamColor,mImageBorderSize,0);
  borders[p++]=new ImageFilterParametricBorder(creamColor,mImageBorderSize,mImageBorderSize);
  for (int i=0; i < p; i++) {
    borders[i].setName(getString(R.string.borders));
    FilterIconButton b=setupFilterButton(borders[i],listBorders,mBorderButton);
    if (i == 0) {
      mNullBorderFilter=b;
      mNullBorderFilter.setSelected(true);
    }
  }
}"
38471,"private void fillListImages(LinearLayout listFilters){
  ImageFilterFx[] fxArray=new ImageFilterFx[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  ImagePreset preset=new ImagePreset(getString(R.string.history_original));
  preset.setImageLoader(mImageLoader);
  mNullFxFilter=new ImageSmallFilter(this);
  mNullFxFilter.setSelected(true);
  mCurrentImageSmallFilter=mNullFxFilter;
  mNullFxFilter.setImageFilter(new ImageFilterFx(null,getString(R.string.none)));
  mNullFxFilter.setController(this);
  mNullFxFilter.setImageLoader(mImageLoader);
  listFilters.addView(mNullFxFilter);
  ImageSmallFilter previousFilter=mNullFxFilter;
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inScaled=false;
  for (int i=0; i < drawid.length; i++) {
    Bitmap b=BitmapFactory.decodeResource(getResources(),drawid[i],o);
    fxArray[p++]=new ImageFilterFx(b,getString(fxNameid[i]));
  }
  ImageSmallFilter filter;
  for (int i=0; i < p; i++) {
    filter=new ImageSmallFilter(this);
    filter.setImageFilter(fxArray[i]);
    filter.setController(this);
    filter.setNulfilter(mNullFxFilter);
    filter.setImageLoader(mImageLoader);
    listFilters.addView(filter);
    previousFilter=filter;
  }
  mImageShow.setImagePreset(preset);
}","private void fillListImages(LinearLayout listFilters){
  ImageFilterFx[] fxArray=new ImageFilterFx[18];
  int p=0;
  int[] drawid={R.drawable.filtershow_fx_0005_punch,R.drawable.filtershow_fx_0000_vintage,R.drawable.filtershow_fx_0004_bw_contrast,R.drawable.filtershow_fx_0002_bleach,R.drawable.filtershow_fx_0001_instant,R.drawable.filtershow_fx_0007_washout,R.drawable.filtershow_fx_0003_blue_crush,R.drawable.filtershow_fx_0008_washout_color,R.drawable.filtershow_fx_0006_x_process};
  int[] fxNameid={R.string.ffx_punch,R.string.ffx_vintage,R.string.ffx_bw_contrast,R.string.ffx_bleach,R.string.ffx_instant,R.string.ffx_washout,R.string.ffx_blue_crush,R.string.ffx_washout_color,R.string.ffx_x_process};
  ImagePreset preset=new ImagePreset(getString(R.string.history_original));
  preset.setImageLoader(mImageLoader);
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inScaled=false;
  for (int i=0; i < drawid.length; i++) {
    Bitmap b=BitmapFactory.decodeResource(getResources(),drawid[i],o);
    fxArray[p++]=new ImageFilterFx(b,getString(fxNameid[i]),fxNameid[i]);
  }
  ImageFilterFx nullFilter=new ImageFilterFx(null,getString(R.string.none),R.string.none);
  mNullFxFilter=setupFilterButton(nullFilter,listFilters,mFxButton);
  mNullFxFilter.setSelected(true);
  for (int i=0; i < p; i++) {
    setupFilterButton(fxArray[i],listFilters,mFxButton);
  }
  mImageShow.setImagePreset(preset);
}"
38472,"public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
  mUtilityPanel.hideAccessoryViews();
  if (view instanceof ImageSmallFilter) {
    ImageSmallFilter component=(ImageSmallFilter)view;
    ImageFilter filter=component.getImageFilter();
    if (filter.getEditingViewId() != 0) {
      mCurrentImage=showImageView(filter.getEditingViewId());
      mCurrentImage.setShowControls(filter.showEditingControls());
      String ename=mCurrentImage.getContext().getString(filter.getTextId());
      mUtilityPanel.setEffectName(ename);
      if (mCurrentImage.useUtilityPanel()) {
        mCurrentImage.openUtilityPanel(mUtilityPanel.mAccessoryViewList);
      }
      mUtilityPanel.setShowParameter(filter.showParameterValue());
      ensureFilter(ename);
      mCurrentImage.select();
    }
    return;
  }
switch (view.getId()) {
case R.id.tinyplanetButton:
{
      mCurrentImage=showImageView(R.id.imageTinyPlanet).setShowControls(true);
      String ename=mCurrentImage.getContext().getString(R.string.tinyplanet);
      mUtilityPanel.setEffectName(ename);
      ensureFilter(ename);
      if (!mDisableFilterButtons) {
        mActivity.disableFilterButtons();
        mDisableFilterButtons=true;
      }
      break;
    }
case R.id.straightenButton:
{
    mCurrentImage=showImageView(R.id.imageStraighten);
    String ename=mCurrentImage.getContext().getString(R.string.straighten);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.cropButton:
{
  mCurrentImage=showImageView(R.id.imageCrop);
  String ename=mCurrentImage.getContext().getString(R.string.crop);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  if (mCurrentImage instanceof ImageCrop && mUtilityPanel.firstTimeCropDisplayed) {
    ((ImageCrop)mCurrentImage).clear();
    mUtilityPanel.firstTimeCropDisplayed=false;
  }
  ((ImageCrop)mCurrentImage).setFixedAspect(mFixedAspect);
  break;
}
case R.id.rotateButton:
{
mCurrentImage=showImageView(R.id.imageRotate);
String ename=mCurrentImage.getContext().getString(R.string.rotate);
mUtilityPanel.setEffectName(ename);
break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.mirror);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageRedEyes).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.applyEffect:
{
if (mMasterImage.getCurrentFilter() instanceof ImageFilterTinyPlanet) {
mActivity.saveImage();
}
 else {
if (mCurrentImage instanceof ImageCrop) {
((ImageCrop)mCurrentImage).saveAndSetPreset();
}
showPanel(mCurrentPanel);
}
break;
}
}
if (mCurrentImage.useUtilityPanel()) {
mCurrentImage.openUtilityPanel(mUtilityPanel.mAccessoryViewList);
}
mCurrentImage.select();
}","public void showComponent(View view){
  boolean doPanelTransition=true;
  if (view instanceof FilterIconButton) {
    ImageFilter f=((FilterIconButton)view).getImageFilter();
    doPanelTransition=f.showUtilityPanel();
  }
  if (mUtilityPanel != null && !mUtilityPanel.selected() && doPanelTransition) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
  mUtilityPanel.hideAccessoryViews();
  if (view instanceof FilterIconButton) {
    FilterIconButton component=(FilterIconButton)view;
    ImageFilter filter=component.getImageFilter();
    if (filter.getEditingViewId() != 0) {
      mCurrentImage=showImageView(filter.getEditingViewId());
      mCurrentImage.setShowControls(filter.showEditingControls());
      String ename=mCurrentImage.getContext().getString(filter.getTextId());
      mUtilityPanel.setEffectName(ename);
      if (mCurrentImage.useUtilityPanel()) {
        mCurrentImage.openUtilityPanel(mUtilityPanel.mAccessoryViewList);
      }
      mUtilityPanel.setShowParameter(filter.showParameterValue());
      if (filter != null) {
        mMasterImage.setCurrentFilter(filter);
      }
      mCurrentImage.select();
    }
    return;
  }
switch (view.getId()) {
case R.id.tinyplanetButton:
{
      mCurrentImage=showImageView(R.id.imageTinyPlanet).setShowControls(true);
      String ename=mCurrentImage.getContext().getString(R.string.tinyplanet);
      mUtilityPanel.setEffectName(ename);
      ensureFilter(ename);
      if (!mDisableFilterButtons) {
        mActivity.disableFilterButtons();
        mDisableFilterButtons=true;
      }
      break;
    }
case R.id.straightenButton:
{
    mCurrentImage=showImageView(R.id.imageStraighten);
    String ename=mCurrentImage.getContext().getString(R.string.straighten);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.cropButton:
{
  mCurrentImage=showImageView(R.id.imageCrop);
  String ename=mCurrentImage.getContext().getString(R.string.crop);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  if (mCurrentImage instanceof ImageCrop && mUtilityPanel.firstTimeCropDisplayed) {
    ((ImageCrop)mCurrentImage).clear();
    mUtilityPanel.firstTimeCropDisplayed=false;
  }
  ((ImageCrop)mCurrentImage).setFixedAspect(mFixedAspect);
  break;
}
case R.id.rotateButton:
{
mCurrentImage=showImageView(R.id.imageRotate);
String ename=mCurrentImage.getContext().getString(R.string.rotate);
mUtilityPanel.setEffectName(ename);
break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.mirror);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageRedEyes).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.applyEffect:
{
if (mMasterImage.getCurrentFilter() instanceof ImageFilterTinyPlanet) {
mActivity.saveImage();
}
 else {
if (mCurrentImage instanceof ImageCrop) {
((ImageCrop)mCurrentImage).saveAndSetPreset();
}
showPanel(mCurrentPanel);
}
break;
}
}
if (mCurrentImage.useUtilityPanel()) {
mCurrentImage.openUtilityPanel(mUtilityPanel.mAccessoryViewList);
}
mCurrentImage.select();
}"
38473,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  if (mNinePatch == null) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  float scale=scaleFactor * 2.0f;
  Rect bounds=new Rect(0,0,(int)(w / scale),(int)(h / scale));
  Canvas canvas=new Canvas(bitmap);
  canvas.scale(scale,scale);
  mNinePatch.setBounds(bounds);
  mNinePatch.draw(canvas);
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  if (mNinePatch == null) {
    return bitmap;
  }
  float scale2=scaleFactor * 2.0f;
  float scale1=1 / scale2;
  return applyHelper(bitmap,scale1,scale2);
}"
38474,"public ImageFilterFx(Bitmap fxBitmap,String name){
  setFilterType(TYPE_FX);
  mName=name;
  this.fxBitmap=fxBitmap;
}","public ImageFilterFx(Bitmap fxBitmap,String name,int nameResource){
  setFilterType(TYPE_FX);
  mName=name;
  this.fxBitmap=fxBitmap;
  mNameResource=nameResource;
}"
38475,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Canvas canvas=new Canvas(bitmap);
  Path border=new Path();
  border.moveTo(0,0);
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  float bs=mBorderSize / 100.0f * bitmap.getWidth();
  float r=mBorderCornerRadius / 100.0f * bitmap.getWidth();
  border.lineTo(0,h);
  border.lineTo(w,h);
  border.lineTo(w,0);
  border.lineTo(0,0);
  border.addRoundRect(new RectF(bs,bs,w - bs,h - bs),r,r,Path.Direction.CW);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setColor(mBorderColor);
  canvas.drawPath(border,paint);
  return bitmap;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Canvas canvas=new Canvas(bitmap);
  applyHelper(canvas,bitmap.getWidth(),bitmap.getHeight());
  return bitmap;
}"
38476,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  float[] displayCenter={temp.getWidth() / 2f,temp.getHeight() / 2f};
  Matrix m1=mGeometry.buildTotalXform(bitmap.getWidth(),bitmap.getHeight(),displayCenter);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,m1,paint);
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   cropBounds=GeometryMath.roundNearest(crop);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  float[] displayCenter={temp.getWidth() / 2f,temp.getHeight() / 2f};
  Matrix m1=mGeometry.buildTotalXform(bitmap.getWidth(),bitmap.getHeight(),displayCenter);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,m1,paint);
  return temp;
}"
38477,"public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  Rect cropBounds=new Rect();
  mCropBounds.roundOut(cropBounds);
  Rect photoBounds=new Rect();
  mPhotoBounds.roundOut(photoBounds);
  if (!cropBounds.equals(photoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}","public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  Rect cropBounds=GeometryMath.roundNearest(mCropBounds);
  Rect photoBounds=GeometryMath.roundNearest(mPhotoBounds);
  if (!cropBounds.equals(photoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}"
38478,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  float[] displayCenter={temp.getWidth() / 2f,temp.getHeight() / 2f};
  Matrix m1=mGeometry.buildTotalXform(bitmap.getWidth(),bitmap.getHeight(),displayCenter);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,m1,paint);
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   cropBounds=GeometryMath.roundNearest(crop);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  float[] displayCenter={temp.getWidth() / 2f,temp.getHeight() / 2f};
  Matrix m1=mGeometry.buildTotalXform(bitmap.getWidth(),bitmap.getHeight(),displayCenter);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,m1,paint);
  return temp;
}"
38479,"public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  Rect cropBounds=new Rect();
  mCropBounds.roundOut(cropBounds);
  Rect photoBounds=new Rect();
  mPhotoBounds.roundOut(photoBounds);
  if (!cropBounds.equals(photoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}","public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  Rect cropBounds=GeometryMath.roundNearest(mCropBounds);
  Rect photoBounds=GeometryMath.roundNearest(mPhotoBounds);
  if (!cropBounds.equals(photoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}"
38480,"public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  if (!mCropBounds.equals(mPhotoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}","public boolean hasModifications(){
  if (mScaleFactor != 1.0f) {
    return true;
  }
  if (mRotation != 0) {
    return true;
  }
  if (mStraightenRotation != 0) {
    return true;
  }
  Rect cropBounds=new Rect();
  mCropBounds.roundOut(cropBounds);
  Rect photoBounds=new Rect();
  mPhotoBounds.roundOut(photoBounds);
  if (!cropBounds.equals(photoBounds)) {
    return true;
  }
  if (!mFlip.equals(FLIP.NONE)) {
    return true;
  }
  return false;
}"
38481,"protected void saveAndSetPreset(){
  ImagePreset lastHistoryItem=getHistory().getLast();
  if (lastHistoryItem != null && lastHistoryItem.historyName().equalsIgnoreCase(getName())) {
    getImagePreset().setGeometry(mLocalGeometry);
    resetImageCaches(this);
  }
 else {
    ImagePreset copy=new ImagePreset(getImagePreset());
    copy.setGeometry(mLocalGeometry);
    copy.setHistoryName(getName());
    copy.setIsFx(false);
    setImagePreset(copy,true);
  }
  invalidate();
}","public void saveAndSetPreset(){
  ImagePreset lastHistoryItem=getHistory().getLast();
  if (lastHistoryItem != null && lastHistoryItem.historyName().equalsIgnoreCase(getName())) {
    getImagePreset().setGeometry(mLocalGeometry);
    resetImageCaches(this);
  }
 else {
    ImagePreset copy=new ImagePreset(getImagePreset());
    copy.setGeometry(mLocalGeometry);
    copy.setHistoryName(getName());
    copy.setIsFx(false);
    setImagePreset(copy,true);
  }
  invalidate();
}"
38482,"public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (view.getId() == R.id.pickCurvesChannel) {
    ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
    showCurvesPopupMenu(curves,(FramedTextButton)view);
    return;
  }
  if (view.getId() == R.id.aspect) {
    showCropPopupMenu((FramedTextButton)view);
    return;
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
  mUtilityPanel.hideAspectButtons();
  mUtilityPanel.hideCurvesButtons();
switch (view.getId()) {
case R.id.tinyplanetButton:
{
      mCurrentImage=showImageView(R.id.imageTinyPlanet).setShowControls(true);
      String ename=mCurrentImage.getContext().getString(R.string.tinyplanet);
      mUtilityPanel.setEffectName(ename);
      ensureFilter(ename);
      break;
    }
case R.id.straightenButton:
{
    mCurrentImage=showImageView(R.id.imageStraighten);
    String ename=mCurrentImage.getContext().getString(R.string.straighten);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.cropButton:
{
  mCurrentImage=showImageView(R.id.imageCrop);
  String ename=mCurrentImage.getContext().getString(R.string.crop);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  if (mCurrentImage instanceof ImageCrop && mUtilityPanel.firstTimeCropDisplayed) {
    ((ImageCrop)mCurrentImage).applyOriginal();
    mUtilityPanel.firstTimeCropDisplayed=false;
  }
  mUtilityPanel.showAspectButtons();
  break;
}
case R.id.rotateButton:
{
mCurrentImage=showImageView(R.id.imageRotate);
String ename=mCurrentImage.getContext().getString(R.string.rotate);
mUtilityPanel.setEffectName(ename);
break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.mirror);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
mUtilityPanel.showCurvesButtons();
mCurrentImage=curves;
ensureFilter(ename);
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpness);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.bwfilterButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.bwfilter);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(ename);
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.aspect:
{
mUtilityPanel.showAspectButtons();
break;
}
case R.id.applyEffect:
{
if (mMasterImage.getCurrentFilter() instanceof ImageFilterTinyPlanet) {
mActivity.saveImage();
}
 else {
showPanel(mCurrentPanel);
}
break;
}
}
mCurrentImage.select();
}","public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (view.getId() == R.id.pickCurvesChannel) {
    ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
    showCurvesPopupMenu(curves,(FramedTextButton)view);
    return;
  }
  if (view.getId() == R.id.aspect) {
    showCropPopupMenu((FramedTextButton)view);
    return;
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
  mUtilityPanel.hideAspectButtons();
  mUtilityPanel.hideCurvesButtons();
switch (view.getId()) {
case R.id.tinyplanetButton:
{
      mCurrentImage=showImageView(R.id.imageTinyPlanet).setShowControls(true);
      String ename=mCurrentImage.getContext().getString(R.string.tinyplanet);
      mUtilityPanel.setEffectName(ename);
      ensureFilter(ename);
      break;
    }
case R.id.straightenButton:
{
    mCurrentImage=showImageView(R.id.imageStraighten);
    String ename=mCurrentImage.getContext().getString(R.string.straighten);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.cropButton:
{
  mCurrentImage=showImageView(R.id.imageCrop);
  String ename=mCurrentImage.getContext().getString(R.string.crop);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  if (mCurrentImage instanceof ImageCrop && mUtilityPanel.firstTimeCropDisplayed) {
    ((ImageCrop)mCurrentImage).applyOriginal();
    mUtilityPanel.firstTimeCropDisplayed=false;
  }
  mUtilityPanel.showAspectButtons();
  break;
}
case R.id.rotateButton:
{
mCurrentImage=showImageView(R.id.imageRotate);
String ename=mCurrentImage.getContext().getString(R.string.rotate);
mUtilityPanel.setEffectName(ename);
break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.mirror);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
mUtilityPanel.showCurvesButtons();
mCurrentImage=curves;
ensureFilter(ename);
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpness);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.bwfilterButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.bwfilter);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(ename);
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(ename);
break;
}
case R.id.aspect:
{
mUtilityPanel.showAspectButtons();
break;
}
case R.id.applyEffect:
{
if (mMasterImage.getCurrentFilter() instanceof ImageFilterTinyPlanet) {
mActivity.saveImage();
}
 else {
if (mCurrentImage instanceof ImageCrop) {
((ImageCrop)mCurrentImage).saveAndSetPreset();
}
showPanel(mCurrentPanel);
}
break;
}
}
mCurrentImage.select();
}"
38483,"protected void saveAndSetPreset(){
  ImagePreset lastHistoryItem=getHistory().getLast();
  if (lastHistoryItem != null && lastHistoryItem.historyName().equalsIgnoreCase(getName())) {
    getImagePreset().setGeometry(mLocalGeometry);
    resetImageCaches(this);
  }
 else {
    ImagePreset copy=new ImagePreset(getImagePreset());
    copy.setGeometry(mLocalGeometry);
    copy.setHistoryName(getName());
    copy.setIsFx(false);
    setImagePreset(copy,true);
  }
  invalidate();
}","public void saveAndSetPreset(){
  ImagePreset lastHistoryItem=getHistory().getLast();
  if (lastHistoryItem != null && lastHistoryItem.historyName().equalsIgnoreCase(getName())) {
    getImagePreset().setGeometry(mLocalGeometry);
    resetImageCaches(this);
  }
 else {
    ImagePreset copy=new ImagePreset(getImagePreset());
    copy.setGeometry(mLocalGeometry);
    copy.setHistoryName(getName());
    copy.setIsFx(false);
    setImagePreset(copy,true);
  }
  invalidate();
}"
38484,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,drawMatrix,paint);
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  RectF rp=mGeometry.getPhotoBounds();
  RectF rc=mGeometry.getPreviewCropBounds();
  Matrix drawMatrix=mGeometry.buildTotalXform(rp.width(),rp.height(),rc.width(),rc.height(),rc.left,rc.top,mGeometry.getRotation(),mGeometry.getStraightenRotation(),bitmap.getWidth() / rp.width(),null);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,drawMatrix,paint);
  return temp;
}"
38485,"public Matrix buildTotalXform(float pwidth,float pheight,float cwidth,float cheight,float cleft,float ctop,float rotation,float straighten,float scale,RectF dst){
  Matrix m=getFlipMatrix(pwidth,pheight);
  m.postRotate(rotation + straighten,pwidth / 2,pheight / 2);
  Matrix m1=new Matrix();
  m1.setRotate(rotation,pwidth / 2,pheight / 2);
  RectF crop=new RectF(cleft,ctop,cleft + cwidth,ctop + cheight);
  if (!m1.mapRect(crop))   return null;
  if (dst != null)   dst.set(crop);
  m.postTranslate(-crop.left,-crop.top);
  m.postScale(scale,scale);
  return m;
}","public Matrix buildTotalXform(float pwidth,float pheight,float cwidth,float cheight,float cleft,float ctop,float rotation,float straighten,float scale,RectF dst){
  float s_pwidth=pwidth * scale;
  float s_pheight=pheight * scale;
  Matrix m=getFlipMatrix(s_pwidth,s_pheight);
  m.postRotate(rotation + straighten,s_pwidth / 2,s_pheight / 2);
  Matrix m1=getFlipMatrix(s_pwidth,s_pheight);
  m1.postRotate(rotation,s_pwidth / 2,s_pheight / 2);
  RectF crop=new RectF(cleft * scale,ctop * scale,(cleft + cwidth) * scale,(ctop + cheight) * scale);
  if (!m1.mapRect(crop))   return null;
  if (dst != null)   dst.set(crop);
  m.postTranslate(-crop.left,-crop.top);
  return m;
}"
38486,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,drawMatrix,paint);
  return temp;
}"
38487,"@Override protected void drawShape(Canvas canvas,Bitmap image){
  gPaint.setAntiAlias(true);
  gPaint.setFilterBitmap(true);
  gPaint.setDither(true);
  gPaint.setARGB(255,255,255,255);
  if (mFirstDraw) {
    cropSetup();
    mFirstDraw=false;
  }
  float rotation=getLocalRotation();
  drawTransformedBitmap(canvas,image,gPaint,true);
  gPaint.setARGB(255,125,255,128);
  gPaint.setStrokeWidth(3);
  gPaint.setStyle(Paint.Style.STROKE);
  drawStraighten(canvas,gPaint);
  RectF scaledCrop=unrotatedCropBounds();
  int decoded_moving=decoder(movingEdges,rotation);
  canvas.save();
  canvas.rotate(rotation,mCenterX,mCenterY);
  boolean notMoving=decoded_moving == 0;
  if (((decoded_moving & MOVE_TOP) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.top);
  }
  if (((decoded_moving & MOVE_BOTTOM) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.bottom);
  }
  if (((decoded_moving & MOVE_LEFT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.left,scaledCrop.centerY());
  }
  if (((decoded_moving & MOVE_RIGHT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.right,scaledCrop.centerY());
  }
  canvas.restore();
}","@Override protected void drawShape(Canvas canvas,Bitmap image){
  gPaint.setAntiAlias(true);
  gPaint.setFilterBitmap(true);
  gPaint.setDither(true);
  gPaint.setARGB(255,255,255,255);
  if (mFirstDraw) {
    cropSetup();
    mFirstDraw=false;
  }
  float rotation=getLocalRotation();
  drawTransformedBitmap(canvas,image,gPaint,true);
  gPaint.setColor(mBorderColor);
  gPaint.setStrokeWidth(3);
  gPaint.setStyle(Paint.Style.STROKE);
  drawStraighten(canvas,gPaint);
  RectF scaledCrop=unrotatedCropBounds();
  drawRuleOfThird(canvas,scaledCrop);
  int decoded_moving=decoder(movingEdges,rotation);
  canvas.save();
  canvas.rotate(rotation,mCenterX,mCenterY);
  boolean notMoving=decoded_moving == 0;
  if (((decoded_moving & MOVE_TOP) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.top);
  }
  if (((decoded_moving & MOVE_BOTTOM) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.bottom);
  }
  if (((decoded_moving & MOVE_LEFT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.left,scaledCrop.centerY());
  }
  if (((decoded_moving & MOVE_RIGHT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.right,scaledCrop.centerY());
  }
  canvas.restore();
}"
38488,"public ImageCrop(Context context,AttributeSet attrs){
  super(context,attrs);
  Resources resources=context.getResources();
  cropIndicator=resources.getDrawable(R.drawable.camera_crop);
  indicatorSize=(int)resources.getDimension(R.dimen.crop_indicator_size);
  int borderColor=Color.argb(128,255,255,255);
  borderPaint=new Paint();
  borderPaint.setStyle(Paint.Style.STROKE);
  borderPaint.setColor(borderColor);
  borderPaint.setStrokeWidth(2f);
}","public ImageCrop(Context context,AttributeSet attrs){
  super(context,attrs);
  Resources resources=context.getResources();
  cropIndicator=resources.getDrawable(R.drawable.camera_crop);
  indicatorSize=(int)resources.getDimension(R.dimen.crop_indicator_size);
  borderPaint=new Paint();
  borderPaint.setStyle(Paint.Style.STROKE);
  borderPaint.setColor(mBorderColor);
  borderPaint.setStrokeWidth(2f);
}"
38489,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setFilterBitmap(true);
  paint.setDither(true);
  canvas.drawBitmap(bitmap,drawMatrix,paint);
  return temp;
}"
38490,"@Override protected void drawShape(Canvas canvas,Bitmap image){
  gPaint.setAntiAlias(true);
  gPaint.setFilterBitmap(true);
  gPaint.setDither(true);
  gPaint.setARGB(255,255,255,255);
  if (mFirstDraw) {
    cropSetup();
    mFirstDraw=false;
  }
  float rotation=getLocalRotation();
  drawTransformedBitmap(canvas,image,gPaint,true);
  gPaint.setARGB(255,125,255,128);
  gPaint.setStrokeWidth(3);
  gPaint.setStyle(Paint.Style.STROKE);
  drawStraighten(canvas,gPaint);
  RectF scaledCrop=unrotatedCropBounds();
  int decoded_moving=decoder(movingEdges,rotation);
  canvas.save();
  canvas.rotate(rotation,mCenterX,mCenterY);
  boolean notMoving=decoded_moving == 0;
  if (((decoded_moving & MOVE_TOP) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.top);
  }
  if (((decoded_moving & MOVE_BOTTOM) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.bottom);
  }
  if (((decoded_moving & MOVE_LEFT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.left,scaledCrop.centerY());
  }
  if (((decoded_moving & MOVE_RIGHT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.right,scaledCrop.centerY());
  }
  canvas.restore();
}","@Override protected void drawShape(Canvas canvas,Bitmap image){
  gPaint.setAntiAlias(true);
  gPaint.setFilterBitmap(true);
  gPaint.setDither(true);
  gPaint.setARGB(255,255,255,255);
  if (mFirstDraw) {
    cropSetup();
    mFirstDraw=false;
  }
  float rotation=getLocalRotation();
  drawTransformedBitmap(canvas,image,gPaint,true);
  gPaint.setColor(mBorderColor);
  gPaint.setStrokeWidth(3);
  gPaint.setStyle(Paint.Style.STROKE);
  drawStraighten(canvas,gPaint);
  RectF scaledCrop=unrotatedCropBounds();
  drawRuleOfThird(canvas,scaledCrop);
  int decoded_moving=decoder(movingEdges,rotation);
  canvas.save();
  canvas.rotate(rotation,mCenterX,mCenterY);
  boolean notMoving=decoded_moving == 0;
  if (((decoded_moving & MOVE_TOP) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.top);
  }
  if (((decoded_moving & MOVE_BOTTOM) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.centerX(),scaledCrop.bottom);
  }
  if (((decoded_moving & MOVE_LEFT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.left,scaledCrop.centerY());
  }
  if (((decoded_moving & MOVE_RIGHT) != 0) || notMoving) {
    drawIndicator(canvas,cropIndicator,scaledCrop.right,scaledCrop.centerY());
  }
  canvas.restore();
}"
38491,"public ImageCrop(Context context,AttributeSet attrs){
  super(context,attrs);
  Resources resources=context.getResources();
  cropIndicator=resources.getDrawable(R.drawable.camera_crop);
  indicatorSize=(int)resources.getDimension(R.dimen.crop_indicator_size);
  int borderColor=Color.argb(128,255,255,255);
  borderPaint=new Paint();
  borderPaint.setStyle(Paint.Style.STROKE);
  borderPaint.setColor(borderColor);
  borderPaint.setStrokeWidth(2f);
}","public ImageCrop(Context context,AttributeSet attrs){
  super(context,attrs);
  Resources resources=context.getResources();
  cropIndicator=resources.getDrawable(R.drawable.camera_crop);
  indicatorSize=(int)resources.getDimension(R.dimen.crop_indicator_size);
  borderPaint=new Paint();
  borderPaint.setStyle(Paint.Style.STROKE);
  borderPaint.setColor(mBorderColor);
  borderPaint.setStrokeWidth(2f);
}"
38492,"@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_download));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}","@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_edited_online_photos));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}"
38493,"@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_download));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}","@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_edited_online_photos));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}"
38494,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  RectF rp=mGeometry.getPhotoBounds();
  RectF rc=mGeometry.getPreviewCropBounds();
  Matrix drawMatrix=mGeometry.buildTotalXform(rp.width(),rp.height(),rc.width(),rc.height(),rc.left,rc.top,mGeometry.getRotation(),mGeometry.getStraightenRotation(),bitmap.getWidth() / rp.width(),null);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38495,"@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_download));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}","@Override protected void onStateResult(int requestCode,int resultCode,Intent data){
  mHasActivityResult=true;
switch (requestCode) {
case REQUEST_EDIT:
    setCurrentPhotoByIntent(data);
  break;
case REQUEST_CROP:
if (resultCode == Activity.RESULT_OK) {
  setCurrentPhotoByIntent(data);
}
break;
case REQUEST_CROP_PICASA:
{
if (resultCode == Activity.RESULT_OK) {
Context context=mActivity.getAndroidContext();
String message=context.getString(R.string.crop_saved,context.getString(R.string.folder_edited_online_photos));
Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}
break;
}
case REQUEST_SLIDESHOW:
{
if (data == null) break;
String path=data.getStringExtra(SlideshowPage.KEY_ITEM_PATH);
int index=data.getIntExtra(SlideshowPage.KEY_PHOTO_INDEX,0);
if (path != null) {
mModel.setCurrentPhoto(Path.fromString(path),index);
}
}
}
}"
38496,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  RectF rp=mGeometry.getPhotoBounds();
  RectF rc=mGeometry.getPreviewCropBounds();
  Matrix drawMatrix=mGeometry.buildTotalXform(rp.width(),rp.height(),rc.width(),rc.height(),rc.left,rc.top,mGeometry.getRotation(),mGeometry.getStraightenRotation(),bitmap.getWidth() / rp.width(),null);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38497,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF c=mGeometry.getCropBounds();
  if (c != null && c.width() > 0 && c.height() > 0)   c.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(c);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38498,"public RectF getCropBounds(){
  return new RectF(mCropBounds);
}","public RectF getCropBounds(Bitmap bitmap){
  float scale=1.0f;
  if (mPhotoBounds.width() > 0) {
    scale=bitmap.getWidth() / mPhotoBounds.width();
  }
  return new RectF(mCropBounds.left * scale,mCropBounds.top * scale,mCropBounds.right * scale,mCropBounds.bottom * scale);
}"
38499,"protected RectF getLocalCropBounds(){
  return mLocalGeometry.getCropBounds();
}","protected RectF getLocalCropBounds(){
  return mLocalGeometry.getPreviewCropBounds();
}"
38500,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF c=mGeometry.getCropBounds();
  if (c != null && c.width() > 0 && c.height() > 0)   c.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(c);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF crop=mGeometry.getCropBounds(bitmap);
  if (crop.width() > 0 && crop.height() > 0)   crop.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(crop);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38501,"public RectF getCropBounds(){
  return new RectF(mCropBounds);
}","public RectF getCropBounds(Bitmap bitmap){
  float scale=1.0f;
  if (mPhotoBounds.width() > 0) {
    scale=bitmap.getWidth() / mPhotoBounds.width();
  }
  return new RectF(mCropBounds.left * scale,mCropBounds.top * scale,mCropBounds.right * scale,mCropBounds.bottom * scale);
}"
38502,"protected RectF getLocalCropBounds(){
  return mLocalGeometry.getCropBounds();
}","protected RectF getLocalCropBounds(){
  return mLocalGeometry.getPreviewCropBounds();
}"
38503,"private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,R.string.fail_to_load_image,Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}","private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,R.string.fail_to_load_image,Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mBitmapScreenNail=new BitmapScreenNail(mBitmap);
  TileImageViewAdapter adapter=new TileImageViewAdapter();
  adapter.setScreenNail(mBitmapScreenNail,width,height);
  adapter.setRegionDecoder(regionDecoder);
  mCropView.setDataModel(adapter,mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}"
38504,"private void uploadScreenNail(int offset){
  int index=mCurrentIndex + offset;
  if (index < mActiveStart || index >= mActiveEnd)   return;
  MediaItem item=getItem(index);
  if (item == null)   return;
  ImageEntry e=mImageCache.get(item.getPath());
  if (e == null)   return;
  ScreenNail s=e.screenNail;
  if (s instanceof BitmapScreenNail) {
    TiledTexture t=((BitmapScreenNail)s).getTexture();
    if (t != null && !t.isReady())     mUploader.addTexture(t);
  }
}","private void uploadScreenNail(int offset){
  int index=mCurrentIndex + offset;
  if (index < mActiveStart || index >= mActiveEnd)   return;
  MediaItem item=getItem(index);
  if (item == null)   return;
  ImageEntry e=mImageCache.get(item.getPath());
  if (e == null)   return;
  ScreenNail s=e.screenNail;
  if (s instanceof TiledScreenNail) {
    TiledTexture t=((TiledScreenNail)s).getTexture();
    if (t != null && !t.isReady())     mUploader.addTexture(t);
  }
}"
38505,"private void updateCurrentIndex(int index){
  if (mCurrentIndex == index)   return;
  mCurrentIndex=index;
  updateSlidingWindow();
  MediaItem item=mData[index % DATA_CACHE_SIZE];
  mItemPath=item == null ? null : item.getPath();
  updateImageCache();
  updateImageRequests();
  updateTileProvider();
  updateScreenNailUploadQueue();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(index,mItemPath);
  }
  fireDataChange();
}","private void updateCurrentIndex(int index){
  if (mCurrentIndex == index)   return;
  mCurrentIndex=index;
  updateSlidingWindow();
  MediaItem item=mData[index % DATA_CACHE_SIZE];
  mItemPath=item == null ? null : item.getPath();
  updateImageCache();
  updateImageRequests();
  updateTileProvider();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(index,mItemPath);
  }
  fireDataChange();
}"
38506,"private ScreenNail newPlaceholderScreenNail(MediaItem item){
  int width=item.getWidth();
  int height=item.getHeight();
  return new BitmapScreenNail(width,height);
}","private ScreenNail newPlaceholderScreenNail(MediaItem item){
  int width=item.getWidth();
  int height=item.getHeight();
  return new TiledScreenNail(width,height);
}"
38507,"private void updateScreenNail(Path path,Future<ScreenNail> future){
  ImageEntry entry=mImageCache.get(path);
  ScreenNail screenNail=future.get();
  if (entry == null || entry.screenNailTask != future) {
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  if (entry.screenNail instanceof BitmapScreenNail) {
    BitmapScreenNail original=(BitmapScreenNail)entry.screenNail;
    screenNail=original.combine(screenNail);
  }
  if (screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    entry.failToLoad=false;
    entry.screenNail=screenNail;
  }
  for (int i=-SCREEN_NAIL_MAX; i <= SCREEN_NAIL_MAX; ++i) {
    if (path == getPath(mCurrentIndex + i)) {
      if (i == 0)       updateTileProvider(entry);
      mPhotoView.notifyImageChange(i);
      break;
    }
  }
  updateImageRequests();
  updateScreenNailUploadQueue();
}","private void updateScreenNail(Path path,Future<ScreenNail> future){
  ImageEntry entry=mImageCache.get(path);
  ScreenNail screenNail=future.get();
  if (entry == null || entry.screenNailTask != future) {
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  if (entry.screenNail instanceof TiledScreenNail) {
    TiledScreenNail original=(TiledScreenNail)entry.screenNail;
    screenNail=original.combine(screenNail);
  }
  if (screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    entry.failToLoad=false;
    entry.screenNail=screenNail;
  }
  for (int i=-SCREEN_NAIL_MAX; i <= SCREEN_NAIL_MAX; ++i) {
    if (path == getPath(mCurrentIndex + i)) {
      if (i == 0)       updateTileProvider(entry);
      mPhotoView.notifyImageChange(i);
      break;
    }
  }
  updateImageRequests();
  updateScreenNailUploadQueue();
}"
38508,"private void updateImageCache(){
  HashSet<Path> toBeRemoved=new HashSet<Path>(mImageCache.keySet());
  for (int i=mActiveStart; i < mActiveEnd; ++i) {
    MediaItem item=mData[i % DATA_CACHE_SIZE];
    if (item == null)     continue;
    Path path=item.getPath();
    ImageEntry entry=mImageCache.get(path);
    toBeRemoved.remove(path);
    if (entry != null) {
      if (Math.abs(i - mCurrentIndex) > 1) {
        if (entry.fullImageTask != null) {
          entry.fullImageTask.cancel();
          entry.fullImageTask=null;
        }
        entry.fullImage=null;
        entry.requestedFullImage=MediaObject.INVALID_DATA_VERSION;
      }
      if (entry.requestedScreenNail != item.getDataVersion()) {
        if (entry.screenNail instanceof BitmapScreenNail) {
          BitmapScreenNail s=(BitmapScreenNail)entry.screenNail;
          s.updatePlaceholderSize(item.getWidth(),item.getHeight());
        }
      }
    }
 else {
      entry=new ImageEntry();
      mImageCache.put(path,entry);
    }
  }
  for (  Path path : toBeRemoved) {
    ImageEntry entry=mImageCache.remove(path);
    if (entry.fullImageTask != null)     entry.fullImageTask.cancel();
    if (entry.screenNailTask != null)     entry.screenNailTask.cancel();
    if (entry.screenNail != null)     entry.screenNail.recycle();
  }
}","private void updateImageCache(){
  HashSet<Path> toBeRemoved=new HashSet<Path>(mImageCache.keySet());
  for (int i=mActiveStart; i < mActiveEnd; ++i) {
    MediaItem item=mData[i % DATA_CACHE_SIZE];
    if (item == null)     continue;
    Path path=item.getPath();
    ImageEntry entry=mImageCache.get(path);
    toBeRemoved.remove(path);
    if (entry != null) {
      if (Math.abs(i - mCurrentIndex) > 1) {
        if (entry.fullImageTask != null) {
          entry.fullImageTask.cancel();
          entry.fullImageTask=null;
        }
        entry.fullImage=null;
        entry.requestedFullImage=MediaObject.INVALID_DATA_VERSION;
      }
      if (entry.requestedScreenNail != item.getDataVersion()) {
        if (entry.screenNail instanceof TiledScreenNail) {
          TiledScreenNail s=(TiledScreenNail)entry.screenNail;
          s.updatePlaceholderSize(item.getWidth(),item.getHeight());
        }
      }
    }
 else {
      entry=new ImageEntry();
      mImageCache.put(path,entry);
    }
  }
  for (  Path path : toBeRemoved) {
    ImageEntry entry=mImageCache.remove(path);
    if (entry.fullImageTask != null)     entry.fullImageTask.cancel();
    if (entry.screenNailTask != null)     entry.screenNailTask.cancel();
    if (entry.screenNail != null)     entry.screenNail.recycle();
  }
  updateScreenNailUploadQueue();
}"
38509,"private void transitionFromAlbumPageIfNeeded(){
  TransitionStore transitions=mActivity.getTransitionStore();
  int albumPageTransition=transitions.get(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE);
  if (albumPageTransition == MSG_ALBUMPAGE_NONE && mAppBridge != null && mRecenterCameraOnResume) {
    mCurrentIndex=0;
    mPhotoView.resetToFirstPicture();
  }
 else {
    int resumeIndex=transitions.get(KEY_INDEX_HINT,-1);
    if (resumeIndex >= 0) {
      if (mInCameraRoll) {
        resumeIndex++;
      }
      if (resumeIndex < mMediaSet.getMediaItemCount()) {
        mCurrentIndex=resumeIndex;
        mModel.moveTo(mCurrentIndex);
      }
    }
  }
  if (albumPageTransition == MSG_ALBUMPAGE_RESUMED) {
    mPhotoView.setFilmMode(mStartInFilmstrip || mAppBridge != null);
  }
 else   if (albumPageTransition == MSG_ALBUMPAGE_PICKED) {
    mPhotoView.setFilmMode(false);
  }
  mFadeOutTexture=transitions.get(PreparePageFadeoutTexture.KEY_FADE_TEXTURE);
  if (mFadeOutTexture != null) {
    mBackgroundFade.start();
    BitmapScreenNail.disableDrawPlaceholder();
    mOpenAnimationRect=albumPageTransition == MSG_ALBUMPAGE_NONE ? (Rect)mData.getParcelable(KEY_OPEN_ANIMATION_RECT) : (Rect)transitions.get(KEY_OPEN_ANIMATION_RECT);
    mPhotoView.setOpenAnimationRect(mOpenAnimationRect);
    mBackgroundFade.start();
  }
}","private void transitionFromAlbumPageIfNeeded(){
  TransitionStore transitions=mActivity.getTransitionStore();
  int albumPageTransition=transitions.get(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE);
  if (albumPageTransition == MSG_ALBUMPAGE_NONE && mAppBridge != null && mRecenterCameraOnResume) {
    mCurrentIndex=0;
    mPhotoView.resetToFirstPicture();
  }
 else {
    int resumeIndex=transitions.get(KEY_INDEX_HINT,-1);
    if (resumeIndex >= 0) {
      if (mInCameraRoll) {
        resumeIndex++;
      }
      if (resumeIndex < mMediaSet.getMediaItemCount()) {
        mCurrentIndex=resumeIndex;
        mModel.moveTo(mCurrentIndex);
      }
    }
  }
  if (albumPageTransition == MSG_ALBUMPAGE_RESUMED) {
    mPhotoView.setFilmMode(mStartInFilmstrip || mAppBridge != null);
  }
 else   if (albumPageTransition == MSG_ALBUMPAGE_PICKED) {
    mPhotoView.setFilmMode(false);
  }
  mFadeOutTexture=transitions.get(PreparePageFadeoutTexture.KEY_FADE_TEXTURE);
  if (mFadeOutTexture != null) {
    mBackgroundFade.start();
    TiledScreenNail.disableDrawPlaceholder();
    mOpenAnimationRect=albumPageTransition == MSG_ALBUMPAGE_NONE ? (Rect)mData.getParcelable(KEY_OPEN_ANIMATION_RECT) : (Rect)transitions.get(KEY_OPEN_ANIMATION_RECT);
    mPhotoView.setOpenAnimationRect(mOpenAnimationRect);
    mBackgroundFade.start();
  }
}"
38510,"@Override protected void renderBackground(GLCanvas view){
  if (mFadeOutTexture != null) {
    if (mBackgroundFade.calculate(AnimationTime.get()))     invalidate();
    if (!mBackgroundFade.isActive()) {
      mFadeOutTexture=null;
      mOpenAnimationRect=null;
      BitmapScreenNail.enableDrawPlaceholder();
    }
 else {
      float fadeAlpha=mBackgroundFade.get();
      if (fadeAlpha < 1f) {
        view.clearBuffer(getBackgroundColor());
        view.setAlpha(fadeAlpha);
      }
      mFadeOutTexture.draw(view,0,0);
      view.setAlpha(1f - fadeAlpha);
      return;
    }
  }
  view.clearBuffer(getBackgroundColor());
}","@Override protected void renderBackground(GLCanvas view){
  if (mFadeOutTexture != null) {
    if (mBackgroundFade.calculate(AnimationTime.get()))     invalidate();
    if (!mBackgroundFade.isActive()) {
      mFadeOutTexture=null;
      mOpenAnimationRect=null;
      TiledScreenNail.enableDrawPlaceholder();
    }
 else {
      float fadeAlpha=mBackgroundFade.get();
      if (fadeAlpha < 1f) {
        view.clearBuffer(getBackgroundColor());
        view.setAlpha(fadeAlpha);
      }
      mFadeOutTexture.draw(view,0,0);
      view.setAlpha(1f - fadeAlpha);
      return;
    }
  }
  view.clearBuffer(getBackgroundColor());
}"
38511,"@Override public void pause(){
  Future<?> task=mTask;
  task.cancel();
  task.waitDone();
  if (task.get() == null) {
    mTask=null;
  }
}","@Override public void pause(){
  Future<?> task=mTask;
  task.cancel();
  task.waitDone();
  if (task.get() == null) {
    mTask=null;
  }
  if (mBitmapScreenNail != null) {
    mBitmapScreenNail.recycle();
    mBitmapScreenNail=null;
  }
}"
38512,"public int getSupportedOperations(boolean getAll){
  return 0;
}","public int getSupportedOperations(boolean getAll){
  return getSupportedOperations();
}"
38513,"public int getSupportedOperations(boolean getAll){
  return 0;
}","public int getSupportedOperations(boolean getAll){
  return getSupportedOperations();
}"
38514,"public int getSupportedOperations(boolean getAll){
  return 0;
}","public int getSupportedOperations(boolean getAll){
  return getSupportedOperations();
}"
38515,"private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,R.string.fail_to_load_image,Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}","private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,R.string.fail_to_load_image,Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mBitmapScreenNail=new BitmapScreenNail(mBitmap);
  TileImageViewAdapter adapter=new TileImageViewAdapter();
  adapter.setScreenNail(mBitmapScreenNail,width,height);
  adapter.setRegionDecoder(regionDecoder);
  mCropView.setDataModel(adapter,mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}"
38516,"private void uploadScreenNail(int offset){
  int index=mCurrentIndex + offset;
  if (index < mActiveStart || index >= mActiveEnd)   return;
  MediaItem item=getItem(index);
  if (item == null)   return;
  ImageEntry e=mImageCache.get(item.getPath());
  if (e == null)   return;
  ScreenNail s=e.screenNail;
  if (s instanceof BitmapScreenNail) {
    TiledTexture t=((BitmapScreenNail)s).getTexture();
    if (t != null && !t.isReady())     mUploader.addTexture(t);
  }
}","private void uploadScreenNail(int offset){
  int index=mCurrentIndex + offset;
  if (index < mActiveStart || index >= mActiveEnd)   return;
  MediaItem item=getItem(index);
  if (item == null)   return;
  ImageEntry e=mImageCache.get(item.getPath());
  if (e == null)   return;
  ScreenNail s=e.screenNail;
  if (s instanceof TiledScreenNail) {
    TiledTexture t=((TiledScreenNail)s).getTexture();
    if (t != null && !t.isReady())     mUploader.addTexture(t);
  }
}"
38517,"private void updateCurrentIndex(int index){
  if (mCurrentIndex == index)   return;
  mCurrentIndex=index;
  updateSlidingWindow();
  MediaItem item=mData[index % DATA_CACHE_SIZE];
  mItemPath=item == null ? null : item.getPath();
  updateImageCache();
  updateImageRequests();
  updateTileProvider();
  updateScreenNailUploadQueue();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(index,mItemPath);
  }
  fireDataChange();
}","private void updateCurrentIndex(int index){
  if (mCurrentIndex == index)   return;
  mCurrentIndex=index;
  updateSlidingWindow();
  MediaItem item=mData[index % DATA_CACHE_SIZE];
  mItemPath=item == null ? null : item.getPath();
  updateImageCache();
  updateImageRequests();
  updateTileProvider();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(index,mItemPath);
  }
  fireDataChange();
}"
38518,"private ScreenNail newPlaceholderScreenNail(MediaItem item){
  int width=item.getWidth();
  int height=item.getHeight();
  return new BitmapScreenNail(width,height);
}","private ScreenNail newPlaceholderScreenNail(MediaItem item){
  int width=item.getWidth();
  int height=item.getHeight();
  return new TiledScreenNail(width,height);
}"
38519,"private void updateScreenNail(Path path,Future<ScreenNail> future){
  ImageEntry entry=mImageCache.get(path);
  ScreenNail screenNail=future.get();
  if (entry == null || entry.screenNailTask != future) {
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  if (entry.screenNail instanceof BitmapScreenNail) {
    BitmapScreenNail original=(BitmapScreenNail)entry.screenNail;
    screenNail=original.combine(screenNail);
  }
  if (screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    entry.failToLoad=false;
    entry.screenNail=screenNail;
  }
  for (int i=-SCREEN_NAIL_MAX; i <= SCREEN_NAIL_MAX; ++i) {
    if (path == getPath(mCurrentIndex + i)) {
      if (i == 0)       updateTileProvider(entry);
      mPhotoView.notifyImageChange(i);
      break;
    }
  }
  updateImageRequests();
  updateScreenNailUploadQueue();
}","private void updateScreenNail(Path path,Future<ScreenNail> future){
  ImageEntry entry=mImageCache.get(path);
  ScreenNail screenNail=future.get();
  if (entry == null || entry.screenNailTask != future) {
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  if (entry.screenNail instanceof TiledScreenNail) {
    TiledScreenNail original=(TiledScreenNail)entry.screenNail;
    screenNail=original.combine(screenNail);
  }
  if (screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    entry.failToLoad=false;
    entry.screenNail=screenNail;
  }
  for (int i=-SCREEN_NAIL_MAX; i <= SCREEN_NAIL_MAX; ++i) {
    if (path == getPath(mCurrentIndex + i)) {
      if (i == 0)       updateTileProvider(entry);
      mPhotoView.notifyImageChange(i);
      break;
    }
  }
  updateImageRequests();
  updateScreenNailUploadQueue();
}"
38520,"private void updateImageCache(){
  HashSet<Path> toBeRemoved=new HashSet<Path>(mImageCache.keySet());
  for (int i=mActiveStart; i < mActiveEnd; ++i) {
    MediaItem item=mData[i % DATA_CACHE_SIZE];
    if (item == null)     continue;
    Path path=item.getPath();
    ImageEntry entry=mImageCache.get(path);
    toBeRemoved.remove(path);
    if (entry != null) {
      if (Math.abs(i - mCurrentIndex) > 1) {
        if (entry.fullImageTask != null) {
          entry.fullImageTask.cancel();
          entry.fullImageTask=null;
        }
        entry.fullImage=null;
        entry.requestedFullImage=MediaObject.INVALID_DATA_VERSION;
      }
      if (entry.requestedScreenNail != item.getDataVersion()) {
        if (entry.screenNail instanceof BitmapScreenNail) {
          BitmapScreenNail s=(BitmapScreenNail)entry.screenNail;
          s.updatePlaceholderSize(item.getWidth(),item.getHeight());
        }
      }
    }
 else {
      entry=new ImageEntry();
      mImageCache.put(path,entry);
    }
  }
  for (  Path path : toBeRemoved) {
    ImageEntry entry=mImageCache.remove(path);
    if (entry.fullImageTask != null)     entry.fullImageTask.cancel();
    if (entry.screenNailTask != null)     entry.screenNailTask.cancel();
    if (entry.screenNail != null)     entry.screenNail.recycle();
  }
}","private void updateImageCache(){
  HashSet<Path> toBeRemoved=new HashSet<Path>(mImageCache.keySet());
  for (int i=mActiveStart; i < mActiveEnd; ++i) {
    MediaItem item=mData[i % DATA_CACHE_SIZE];
    if (item == null)     continue;
    Path path=item.getPath();
    ImageEntry entry=mImageCache.get(path);
    toBeRemoved.remove(path);
    if (entry != null) {
      if (Math.abs(i - mCurrentIndex) > 1) {
        if (entry.fullImageTask != null) {
          entry.fullImageTask.cancel();
          entry.fullImageTask=null;
        }
        entry.fullImage=null;
        entry.requestedFullImage=MediaObject.INVALID_DATA_VERSION;
      }
      if (entry.requestedScreenNail != item.getDataVersion()) {
        if (entry.screenNail instanceof TiledScreenNail) {
          TiledScreenNail s=(TiledScreenNail)entry.screenNail;
          s.updatePlaceholderSize(item.getWidth(),item.getHeight());
        }
      }
    }
 else {
      entry=new ImageEntry();
      mImageCache.put(path,entry);
    }
  }
  for (  Path path : toBeRemoved) {
    ImageEntry entry=mImageCache.remove(path);
    if (entry.fullImageTask != null)     entry.fullImageTask.cancel();
    if (entry.screenNailTask != null)     entry.screenNailTask.cancel();
    if (entry.screenNail != null)     entry.screenNail.recycle();
  }
  updateScreenNailUploadQueue();
}"
38521,"private void transitionFromAlbumPageIfNeeded(){
  TransitionStore transitions=mActivity.getTransitionStore();
  int albumPageTransition=transitions.get(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE);
  if (albumPageTransition == MSG_ALBUMPAGE_NONE && mAppBridge != null && mRecenterCameraOnResume) {
    mCurrentIndex=0;
    mPhotoView.resetToFirstPicture();
  }
 else {
    int resumeIndex=transitions.get(KEY_INDEX_HINT,-1);
    if (resumeIndex >= 0) {
      if (mInCameraRoll) {
        resumeIndex++;
      }
      if (resumeIndex < mMediaSet.getMediaItemCount()) {
        mCurrentIndex=resumeIndex;
        mModel.moveTo(mCurrentIndex);
      }
    }
  }
  if (albumPageTransition == MSG_ALBUMPAGE_RESUMED) {
    mPhotoView.setFilmMode(mStartInFilmstrip || mAppBridge != null);
  }
 else   if (albumPageTransition == MSG_ALBUMPAGE_PICKED) {
    mPhotoView.setFilmMode(false);
  }
  mFadeOutTexture=transitions.get(PreparePageFadeoutTexture.KEY_FADE_TEXTURE);
  if (mFadeOutTexture != null) {
    mBackgroundFade.start();
    BitmapScreenNail.disableDrawPlaceholder();
    mOpenAnimationRect=albumPageTransition == MSG_ALBUMPAGE_NONE ? (Rect)mData.getParcelable(KEY_OPEN_ANIMATION_RECT) : (Rect)transitions.get(KEY_OPEN_ANIMATION_RECT);
    mPhotoView.setOpenAnimationRect(mOpenAnimationRect);
    mBackgroundFade.start();
  }
}","private void transitionFromAlbumPageIfNeeded(){
  TransitionStore transitions=mActivity.getTransitionStore();
  int albumPageTransition=transitions.get(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE);
  if (albumPageTransition == MSG_ALBUMPAGE_NONE && mAppBridge != null && mRecenterCameraOnResume) {
    mCurrentIndex=0;
    mPhotoView.resetToFirstPicture();
  }
 else {
    int resumeIndex=transitions.get(KEY_INDEX_HINT,-1);
    if (resumeIndex >= 0) {
      if (mInCameraRoll) {
        resumeIndex++;
      }
      if (resumeIndex < mMediaSet.getMediaItemCount()) {
        mCurrentIndex=resumeIndex;
        mModel.moveTo(mCurrentIndex);
      }
    }
  }
  if (albumPageTransition == MSG_ALBUMPAGE_RESUMED) {
    mPhotoView.setFilmMode(mStartInFilmstrip || mAppBridge != null);
  }
 else   if (albumPageTransition == MSG_ALBUMPAGE_PICKED) {
    mPhotoView.setFilmMode(false);
  }
  mFadeOutTexture=transitions.get(PreparePageFadeoutTexture.KEY_FADE_TEXTURE);
  if (mFadeOutTexture != null) {
    mBackgroundFade.start();
    TiledScreenNail.disableDrawPlaceholder();
    mOpenAnimationRect=albumPageTransition == MSG_ALBUMPAGE_NONE ? (Rect)mData.getParcelable(KEY_OPEN_ANIMATION_RECT) : (Rect)transitions.get(KEY_OPEN_ANIMATION_RECT);
    mPhotoView.setOpenAnimationRect(mOpenAnimationRect);
    mBackgroundFade.start();
  }
}"
38522,"@Override protected void renderBackground(GLCanvas view){
  if (mFadeOutTexture != null) {
    if (mBackgroundFade.calculate(AnimationTime.get()))     invalidate();
    if (!mBackgroundFade.isActive()) {
      mFadeOutTexture=null;
      mOpenAnimationRect=null;
      BitmapScreenNail.enableDrawPlaceholder();
    }
 else {
      float fadeAlpha=mBackgroundFade.get();
      if (fadeAlpha < 1f) {
        view.clearBuffer(getBackgroundColor());
        view.setAlpha(fadeAlpha);
      }
      mFadeOutTexture.draw(view,0,0);
      view.setAlpha(1f - fadeAlpha);
      return;
    }
  }
  view.clearBuffer(getBackgroundColor());
}","@Override protected void renderBackground(GLCanvas view){
  if (mFadeOutTexture != null) {
    if (mBackgroundFade.calculate(AnimationTime.get()))     invalidate();
    if (!mBackgroundFade.isActive()) {
      mFadeOutTexture=null;
      mOpenAnimationRect=null;
      TiledScreenNail.enableDrawPlaceholder();
    }
 else {
      float fadeAlpha=mBackgroundFade.get();
      if (fadeAlpha < 1f) {
        view.clearBuffer(getBackgroundColor());
        view.setAlpha(fadeAlpha);
      }
      mFadeOutTexture.draw(view,0,0);
      view.setAlpha(1f - fadeAlpha);
      return;
    }
  }
  view.clearBuffer(getBackgroundColor());
}"
38523,"@Override public void pause(){
  Future<?> task=mTask;
  task.cancel();
  task.waitDone();
  if (task.get() == null) {
    mTask=null;
  }
}","@Override public void pause(){
  Future<?> task=mTask;
  task.cancel();
  task.waitDone();
  if (task.get() == null) {
    mTask=null;
  }
  if (mBitmapScreenNail != null) {
    mBitmapScreenNail.recycle();
    mBitmapScreenNail=null;
  }
}"
38524,"public Matrix buildMatrix(Bitmap bitmap,boolean rotated){
  Matrix drawMatrix=new Matrix();
  float dx=bitmap.getWidth() / 2.0f;
  float dy=bitmap.getHeight() / 2.0f;
  Matrix flipper=mGeometry.getFlipMatrix(bitmap.getWidth(),bitmap.getHeight());
  drawMatrix.postConcat(flipper);
  drawMatrix.postTranslate(-dx,-dy);
  drawMatrix.postScale(1.0f / mGeometry.getScaleFactor(),1.0f / mGeometry.getScaleFactor());
  float angle=(mGeometry.getRotation() + mGeometry.getStraightenRotation());
  drawMatrix.postRotate(angle);
  if (rotated) {
    drawMatrix.postTranslate(dy,dx);
  }
 else {
    drawMatrix.postTranslate(dx,dy);
  }
  return drawMatrix;
}","public Matrix buildMatrix(Bitmap bitmap,boolean rotated){
  float dx=bitmap.getWidth() / 2;
  float dy=bitmap.getHeight() / 2;
  if (mGeometry.hasSwitchedWidthHeight()) {
    float temp=dx;
    dx=dy;
    dy=temp;
  }
  Matrix m=mGeometry.buildGeometryMatrix(bitmap.getWidth(),bitmap.getHeight(),1f / mGeometry.getScaleFactor(),dx,dy);
  return m;
}"
38525,"@Override public int hashCode(){
  int result=23;
  result=31 * result + Float.floatToIntBits(mRotation);
  result=31 * result + Float.floatToIntBits(mStraightenRotation);
  result=31 * result + Float.floatToIntBits(mScaleFactor);
  result=31 * result + mFlip.hashCode();
  result=31 * result + mCropBounds.hashCode();
  result=31 * result + mPhotoBounds.hashCode();
  result=31 * result + (mSafe ? 1 : 0);
  return result;
}","@Override public int hashCode(){
  int result=23;
  result=31 * result + Float.floatToIntBits(mRotation);
  result=31 * result + Float.floatToIntBits(mStraightenRotation);
  result=31 * result + Float.floatToIntBits(mScaleFactor);
  result=31 * result + mFlip.hashCode();
  result=31 * result + mCropBounds.hashCode();
  result=31 * result + mPhotoBounds.hashCode();
  return result;
}"
38526,"public void setPhotoBounds(RectF newPhotoBounds){
  mPhotoBounds.set(newPhotoBounds);
  mSafe=false;
}","public void setPhotoBounds(RectF newPhotoBounds){
  mPhotoBounds.set(newPhotoBounds);
}"
38527,"public void set(GeometryMetadata g){
  mScaleFactor=g.mScaleFactor;
  mRotation=g.mRotation;
  mStraightenRotation=g.mStraightenRotation;
  mCropBounds.set(g.mCropBounds);
  mPhotoBounds.set(g.mPhotoBounds);
  mFlip=g.mFlip;
  mSafe=g.mSafe;
  mMatrix=g.mMatrix;
  mBounds=g.mBounds;
}","public void set(GeometryMetadata g){
  mScaleFactor=g.mScaleFactor;
  mRotation=g.mRotation;
  mStraightenRotation=g.mStraightenRotation;
  mCropBounds.set(g.mCropBounds);
  mPhotoBounds.set(g.mPhotoBounds);
  mFlip=g.mFlip;
  mBounds=g.mBounds;
}"
38528,"public void setCropBounds(RectF newCropBounds){
  mCropBounds.set(newCropBounds);
  mSafe=false;
}","public void setCropBounds(RectF newCropBounds){
  mCropBounds.set(newCropBounds);
}"
38529,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  GeometryMetadata d=(GeometryMetadata)o;
  return (mScaleFactor == d.mScaleFactor && mRotation == d.mRotation && mStraightenRotation == d.mStraightenRotation && mFlip == d.mFlip && mSafe == d.mSafe && mCropBounds.equals(d.mCropBounds) && mPhotoBounds.equals(d.mPhotoBounds));
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  GeometryMetadata d=(GeometryMetadata)o;
  return (mScaleFactor == d.mScaleFactor && mRotation == d.mRotation && mStraightenRotation == d.mStraightenRotation && mFlip == d.mFlip && mCropBounds.equals(d.mCropBounds) && mPhotoBounds.equals(d.mPhotoBounds));
}"
38530,"@Override public String toString(){
  return getClass().getName() + ""String_Node_Str"" + ""String_Node_Str""+ mScaleFactor+ ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mFlip+ ""String_Node_Str""+ (mSafe ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ mStraightenRotation+ ""String_Node_Str""+ mCropBounds.toShortString()+ ""String_Node_Str""+ mPhotoBounds.toShortString()+ ""String_Node_Str"";
}","@Override public String toString(){
  return getClass().getName() + ""String_Node_Str"" + ""String_Node_Str""+ mScaleFactor+ ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mFlip+ ""String_Node_Str""+ mStraightenRotation+ ""String_Node_Str""+ mCropBounds.toShortString()+ ""String_Node_Str""+ mPhotoBounds.toShortString()+ ""String_Node_Str"";
}"
38531,"protected void syncLocalToMasterGeometry(){
  mLocalGeoMetadata=getMaster().getGeometry();
  calculateLocalScalingFactorAndOffset();
  mLocalMatrix=mLocalGeoMetadata.getMatrix();
}","protected void syncLocalToMasterGeometry(){
  mLocalGeoMetadata=getMaster().getGeometry();
  calculateLocalScalingFactorAndOffset();
}"
38532,"private void calculateLocalScalingFactorAndOffset(){
  if (mLocalGeoMetadata == null || mLocalDisplayBounds == null)   return;
  RectF imageBounds=mLocalGeoMetadata.getPhotoBounds();
  float imageWidth=imageBounds.width();
  float imageHeight=imageBounds.height();
  float displayWidth=mLocalDisplayBounds.width();
  float displayHeight=mLocalDisplayBounds.height();
  mCenterX=displayWidth / 2;
  mCenterY=displayHeight / 2;
  mYOffset=(displayHeight - imageHeight) / 2.0f;
  mXOffset=(displayWidth - imageWidth) / 2.0f;
  float zoom=computeScale(mLocalDisplayBounds.width(),mLocalDisplayBounds.height());
  mLocalGeoMetadata.setScaleFactor(zoom);
}","private void calculateLocalScalingFactorAndOffset(){
  if (mLocalGeoMetadata == null || mLocalDisplayBounds == null)   return;
  RectF imageBounds=mLocalGeoMetadata.getPhotoBounds();
  float imageWidth=imageBounds.width();
  float imageHeight=imageBounds.height();
  float displayWidth=mLocalDisplayBounds.width();
  float displayHeight=mLocalDisplayBounds.height();
  mCenterX=displayWidth / 2;
  mCenterY=displayHeight / 2;
  mYOffset=(displayHeight - imageHeight) / 2.0f;
  mXOffset=(displayWidth - imageWidth) / 2.0f;
}"
38533,"protected void gainedVisibility(){
  updateMatrix();
}","protected void gainedVisibility(){
  updateScale();
}"
38534,"@Override public boolean onTouchEvent(MotionEvent event){
switch (event.getActionMasked()) {
case (MotionEvent.ACTION_DOWN):
    setActionDown(event.getX(),event.getY());
  break;
case (MotionEvent.ACTION_UP):
setActionUp();
saveAndSetPreset();
Log.v(LOGTAG,""String_Node_Str"");
logMasterGeo();
break;
case (MotionEvent.ACTION_MOVE):
setActionMove(event.getX(),event.getY());
break;
default :
setNoAction();
}
if (getPanelController() != null) {
getPanelController().onNewValue(getLocalValue());
}
invalidate();
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
switch (event.getActionMasked()) {
case (MotionEvent.ACTION_DOWN):
    setActionDown(event.getX(),event.getY());
  break;
case (MotionEvent.ACTION_UP):
setActionUp();
saveAndSetPreset();
Log.v(LOGTAG,""String_Node_Str"");
break;
case (MotionEvent.ACTION_MOVE):
setActionMove(event.getX(),event.getY());
break;
default :
setNoAction();
}
if (getPanelController() != null) {
getPanelController().onNewValue(getLocalValue());
}
invalidate();
return true;
}"
38535,"public Matrix computeBoundsMatrix(Bitmap bitmap){
  Matrix boundsMatrix=new Matrix();
  boundsMatrix.setTranslate((getWidth() - bitmap.getWidth()) / 2.0f,(getHeight() - bitmap.getHeight()) / 2.0f);
  boundsMatrix.postRotate(getLocalRotation(),getWidth() / 2.0f,getHeight() / 2.0f);
  return boundsMatrix;
}","public Matrix computeBoundsMatrix(Bitmap bitmap){
  float w=getWidth();
  float h=getHeight();
  Matrix boundsMatrix=new Matrix();
  boundsMatrix.setTranslate((getWidth() - bitmap.getWidth()) / 2.0f,(getHeight() - bitmap.getHeight()) / 2.0f);
  boundsMatrix.postRotate(getLocalRotation(),getWidth() / 2.0f,getHeight() / 2.0f);
  float scale=computeScale(w,h);
  boundsMatrix.postScale(scale,scale,getWidth() / 2,getHeight() / 2);
  return boundsMatrix;
}"
38536,"protected void setLocalFlip(FLIP flip){
  mLocalGeoMetadata.setFlipType(flip);
  updateMatrix();
}","protected void setLocalFlip(FLIP flip){
  mLocalGeoMetadata.setFlipType(flip);
}"
38537,"protected void setLocalRotation(float r){
  mLocalGeoMetadata.setRotation(r);
  updateMatrix();
}","protected void setLocalRotation(float r){
  mLocalGeoMetadata.setRotation(r);
  updateScale();
}"
38538,"protected void setLocalStraighten(float r){
  mLocalGeoMetadata.setStraightenRotation(r);
  updateMatrix();
}","protected void setLocalStraighten(float r){
  mLocalGeoMetadata.setStraightenRotation(r);
  updateScale();
}"
38539,"protected void drawTransformedBitmap(Canvas canvas,Bitmap bitmap,Paint paint,boolean clip){
  Matrix boundsMatrix=computeBoundsMatrix(bitmap);
  RectF bounds=getUntranslatedStraightenCropBounds(getLocalPhotoBounds(),getLocalStraighten());
  RectF transformedBounds=new RectF(bounds);
  boundsMatrix.mapRect(transformedBounds);
  canvas.save();
  Matrix matrix=getLocalMatrix();
  canvas.translate((getWidth() - bitmap.getWidth()) / 2.0f,(getHeight() - bitmap.getHeight()) / 2.0f);
  paint.setARGB(255,0,0,0);
  Matrix drawMatrix=new Matrix();
  float w=bitmap.getWidth();
  drawMatrix.preScale(1.0f / w,1.0f / w);
  drawMatrix.postConcat(matrix);
  drawMatrix.postScale(w,w);
  canvas.drawBitmap(bitmap,drawMatrix,paint);
  canvas.restore();
  canvas.save();
  canvas.setMatrix(boundsMatrix);
  paint.setColor(Color.WHITE);
  paint.setStyle(Style.STROKE);
  paint.setStrokeWidth(2);
  canvas.drawRect(bounds,paint);
  canvas.restore();
  if (!clip) {
    drawShadows(canvas,transformedBounds,new RectF(0,0,getWidth(),getHeight()),paint);
  }
}","protected void drawTransformedBitmap(Canvas canvas,Bitmap bitmap,Paint paint,boolean clip){
  float w=getWidth();
  float h=getHeight();
  Matrix boundsMatrix=computeBoundsMatrix(bitmap);
  RectF bounds=getUntranslatedStraightenCropBounds(getLocalPhotoBounds(),getLocalStraighten());
  RectF transformedBounds=new RectF(bounds);
  boundsMatrix.mapRect(transformedBounds);
  canvas.save();
  paint.setARGB(255,0,0,0);
  drawImage(canvas,bitmap,paint);
  canvas.restore();
  canvas.save();
  canvas.setMatrix(boundsMatrix);
  paint.setColor(Color.WHITE);
  paint.setStyle(Style.STROKE);
  paint.setStrokeWidth(2);
  canvas.drawRect(bounds,paint);
  canvas.restore();
  if (!clip) {
    drawShadows(canvas,transformedBounds,new RectF(0,0,w,h),paint);
  }
}"
38540,"@Override protected void onVisibilityChanged(View changedView,int visibility){
  super.onVisibilityChanged(changedView,visibility);
  if (visibility == View.VISIBLE) {
    mVisibilityGained=true;
    syncLocalToMasterGeometry();
    gainedVisibility();
    logMasterGeo();
  }
 else {
    if (mVisibilityGained == true && mHasDrawn == true) {
      lostVisibility();
      logMasterGeo();
    }
    mVisibilityGained=false;
    mHasDrawn=false;
  }
}","@Override protected void onVisibilityChanged(View changedView,int visibility){
  super.onVisibilityChanged(changedView,visibility);
  if (visibility == View.VISIBLE) {
    mVisibilityGained=true;
    syncLocalToMasterGeometry();
    gainedVisibility();
  }
 else {
    if (mVisibilityGained == true && mHasDrawn == true) {
      lostVisibility();
    }
    mVisibilityGained=false;
    mHasDrawn=false;
  }
}"
38541,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  LinearLayout listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  int[] recastIDs={R.id.vignetteButton,R.id.vibranceButton,R.id.contrastButton,R.id.saturationButton,R.id.wbalanceButton,R.id.hueButton,R.id.exposureButton,R.id.shadowRecoveryButton};
  ImageFilter[] filters={new ImageFilterVignette(),new ImageFilterVibrance(),new ImageFilterContrast(),new ImageFilterSaturated(),new ImageFilterWBalance(),new ImageFilterHue(),new ImageFilterExposure(),new ImageFilterShadows()};
  for (int i=0; i < filters.length; i++) {
    ImageSmallFilter fView=new ImageSmallFilter(this);
    View v=listColors.findViewById(recastIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    filters[i].setParameter(100);
    fView.setImageFilter(filters[i]);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(recastIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  int[] overlayIDs={R.id.sharpenButton,R.id.curvesButtonRGB};
  int[] overlayBitmaps={R.drawable.filtershow_button_colors_sharpen,R.drawable.filtershow_button_colors_curve};
  int[] overlayNames={R.string.sharpen,R.string.curvesRGB};
  for (int i=0; i < overlayIDs.length; i++) {
    ImageWithIcon fView=new ImageWithIcon(this);
    View v=listColors.findViewById(overlayIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    final int sid=overlayNames[i];
    ImageFilterExposure efilter=new ImageFilterExposure(){
{
        mName=getString(sid);
      }
    }
;
    efilter.setParameter(-300);
    Bitmap bitmap=BitmapFactory.decodeResource(getResources(),overlayBitmaps[i]);
    fView.setIcon(bitmap);
    fView.setImageFilter(efilter);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(overlayIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  LinearLayout listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  int[] recastIDs={R.id.vignetteButton,R.id.vibranceButton,R.id.contrastButton,R.id.saturationButton,R.id.wbalanceButton,R.id.hueButton,R.id.exposureButton,R.id.shadowRecoveryButton};
  ImageFilter[] filters={new ImageFilterVignette(),new ImageFilterVibrance(),new ImageFilterContrast(),new ImageFilterSaturated(),new ImageFilterWBalance(),new ImageFilterHue(),new ImageFilterExposure(),new ImageFilterShadows()};
  for (int i=0; i < filters.length; i++) {
    ImageSmallFilter fView=new ImageSmallFilter(this);
    View v=listColors.findViewById(recastIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    filters[i].setParameter(100);
    fView.setImageFilter(filters[i]);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(recastIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  int[] overlayIDs={R.id.sharpenButton,R.id.curvesButtonRGB};
  int[] overlayBitmaps={R.drawable.filtershow_button_colors_sharpen,R.drawable.filtershow_button_colors_curve};
  int[] overlayNames={R.string.sharpen,R.string.curvesRGB};
  for (int i=0; i < overlayIDs.length; i++) {
    ImageWithIcon fView=new ImageWithIcon(this);
    View v=listColors.findViewById(overlayIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    final int sid=overlayNames[i];
    ImageFilterExposure efilter=new ImageFilterExposure(){
{
        mName=getString(sid);
      }
    }
;
    efilter.setParameter(-300);
    Bitmap bitmap=BitmapFactory.decodeResource(getResources(),overlayBitmaps[i]);
    fView.setIcon(bitmap);
    fView.setImageFilter(efilter);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(overlayIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}"
38542,"public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
switch (view.getId()) {
case R.id.straightenButton:
{
      mCurrentImage=showImageView(R.id.imageStraighten);
      String ename=mCurrentImage.getContext().getString(R.string.straighten);
      mUtilityPanel.setEffectName(ename);
      break;
    }
case R.id.rotateButton:
{
    mCurrentImage=showImageView(R.id.imageRotate);
    String ename=mCurrentImage.getContext().getString(R.string.rotate);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.flipButton:
{
  mCurrentImage=showImageView(R.id.imageFlip);
  String ename=mCurrentImage.getContext().getString(R.string.flip);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
curves.setUseRed(true);
curves.setUseGreen(true);
curves.setUseBlue(true);
curves.reloadCurve();
mCurrentImage=curves;
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpen);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.applyEffect:
{
showPanel(mCurrentPanel);
break;
}
}
mCurrentImage.select();
}","public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
switch (view.getId()) {
case R.id.straightenButton:
{
      mCurrentImage=showImageView(R.id.imageStraighten);
      String ename=mCurrentImage.getContext().getString(R.string.straighten);
      mUtilityPanel.setEffectName(ename);
      break;
    }
case R.id.cropButton:
{
    mCurrentImage=showImageView(R.id.imageCrop);
    String ename=mCurrentImage.getContext().getString(R.string.crop);
    mUtilityPanel.setEffectName(ename);
    mUtilityPanel.setShowParameter(false);
    break;
  }
case R.id.rotateButton:
{
  mCurrentImage=showImageView(R.id.imageRotate);
  String ename=mCurrentImage.getContext().getString(R.string.rotate);
  mUtilityPanel.setEffectName(ename);
  break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.flip);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
curves.setUseRed(true);
curves.setUseGreen(true);
curves.setUseBlue(true);
curves.reloadCurve();
mCurrentImage=curves;
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpen);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.applyEffect:
{
showPanel(mCurrentPanel);
break;
}
}
mCurrentImage.select();
}"
38543,"public Matrix buildMatrix(Bitmap bitmap,boolean rotated){
  float dx=bitmap.getWidth() / 2;
  float dy=bitmap.getHeight() / 2;
  if (mGeometry.hasSwitchedWidthHeight()) {
    float temp=dx;
    dx=dy;
    dy=temp;
  }
  Matrix m=mGeometry.buildGeometryMatrix(bitmap.getWidth(),bitmap.getHeight(),1f / mGeometry.getScaleFactor(),dx,dy);
  return m;
}","public Matrix buildMatrix(RectF r){
  float dx=r.width() / 2;
  float dy=r.height() / 2;
  if (mGeometry.hasSwitchedWidthHeight()) {
    float temp=dx;
    dx=dy;
    dy=temp;
  }
  float w=r.left * 2 + r.width();
  float h=r.top * 2 + r.height();
  Matrix m=mGeometry.buildGeometryMatrix(w,h,1f,dx,dy,false);
  return m;
}"
38544,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Bitmap temp=null;
  float rotation=mGeometry.getRotation();
  boolean rotated=false;
  if (rotation == 0 || rotation % 180 == 0) {
    temp=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(bitmap.getHeight(),bitmap.getWidth(),mConfig);
    rotated=true;
  }
  Matrix drawMatrix=buildMatrix(bitmap,rotated);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF c=mGeometry.getCropBounds();
  if (c != null && c.width() > 0 && c.height() > 0)   c.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(c);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38545,"public Matrix buildGeometryMatrix(float width,float height,float scaling,float dx,float dy){
  float dx0=width / 2;
  float dy0=height / 2;
  Matrix m=getFlipMatrix(width,height);
  m.postTranslate(-dx0,-dy0);
  float rot=mRotation % 360;
  if (rot < 0)   rot+=360;
  m.postRotate(rot + mStraightenRotation);
  m.postScale(scaling,scaling);
  m.postTranslate(dx,dy);
  return m;
}","public Matrix buildGeometryMatrix(float width,float height,float scaling,float dx,float dy,boolean onlyRotate){
  float rot=mRotation;
  if (!onlyRotate) {
    rot+=mStraightenRotation;
  }
  return buildGeometryMatrix(width,height,scaling,dx,dy,rot);
}"
38546,"public Matrix buildGeometryUIMatrix(float scaling,float dx,float dy){
  float w=mPhotoBounds.width();
  float h=mPhotoBounds.height();
  return buildGeometryMatrix(w,h,scaling,dx,dy);
}","public Matrix buildGeometryUIMatrix(float scaling,float dx,float dy){
  float w=mPhotoBounds.width();
  float h=mPhotoBounds.height();
  return buildGeometryMatrix(w,h,scaling,dx,dy,false);
}"
38547,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  LinearLayout listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  int[] recastIDs={R.id.vignetteButton,R.id.vibranceButton,R.id.contrastButton,R.id.saturationButton,R.id.wbalanceButton,R.id.hueButton,R.id.exposureButton,R.id.shadowRecoveryButton};
  ImageFilter[] filters={new ImageFilterVignette(),new ImageFilterVibrance(),new ImageFilterContrast(),new ImageFilterSaturated(),new ImageFilterWBalance(),new ImageFilterHue(),new ImageFilterExposure(),new ImageFilterShadows()};
  for (int i=0; i < filters.length; i++) {
    ImageSmallFilter fView=new ImageSmallFilter(this);
    View v=listColors.findViewById(recastIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    filters[i].setParameter(100);
    fView.setImageFilter(filters[i]);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(recastIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  int[] overlayIDs={R.id.sharpenButton,R.id.curvesButtonRGB};
  int[] overlayBitmaps={R.drawable.filtershow_button_colors_sharpen,R.drawable.filtershow_button_colors_curve};
  int[] overlayNames={R.string.sharpen,R.string.curvesRGB};
  for (int i=0; i < overlayIDs.length; i++) {
    ImageWithIcon fView=new ImageWithIcon(this);
    View v=listColors.findViewById(overlayIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    final int sid=overlayNames[i];
    ImageFilterExposure efilter=new ImageFilterExposure(){
{
        mName=getString(sid);
      }
    }
;
    efilter.setParameter(-300);
    Bitmap bitmap=BitmapFactory.decodeResource(getResources(),overlayBitmaps[i]);
    fView.setIcon(bitmap);
    fView.setImageFilter(efilter);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(overlayIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  LinearLayout listColors=(LinearLayout)findViewById(R.id.listColorsFx);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  int[] recastIDs={R.id.vignetteButton,R.id.vibranceButton,R.id.contrastButton,R.id.saturationButton,R.id.wbalanceButton,R.id.hueButton,R.id.exposureButton,R.id.shadowRecoveryButton};
  ImageFilter[] filters={new ImageFilterVignette(),new ImageFilterVibrance(),new ImageFilterContrast(),new ImageFilterSaturated(),new ImageFilterWBalance(),new ImageFilterHue(),new ImageFilterExposure(),new ImageFilterShadows()};
  for (int i=0; i < filters.length; i++) {
    ImageSmallFilter fView=new ImageSmallFilter(this);
    View v=listColors.findViewById(recastIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    filters[i].setParameter(100);
    fView.setImageFilter(filters[i]);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(recastIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  int[] overlayIDs={R.id.sharpenButton,R.id.curvesButtonRGB};
  int[] overlayBitmaps={R.drawable.filtershow_button_colors_sharpen,R.drawable.filtershow_button_colors_curve};
  int[] overlayNames={R.string.sharpen,R.string.curvesRGB};
  for (int i=0; i < overlayIDs.length; i++) {
    ImageWithIcon fView=new ImageWithIcon(this);
    View v=listColors.findViewById(overlayIDs[i]);
    int pos=listColors.indexOfChild(v);
    listColors.removeView(v);
    final int sid=overlayNames[i];
    ImageFilterExposure efilter=new ImageFilterExposure(){
{
        mName=getString(sid);
      }
    }
;
    efilter.setParameter(-300);
    Bitmap bitmap=BitmapFactory.decodeResource(getResources(),overlayBitmaps[i]);
    fView.setIcon(bitmap);
    fView.setImageFilter(efilter);
    fView.setController(this);
    fView.setImageLoader(mImageLoader);
    fView.setId(overlayIDs[i]);
    mPanelController.addComponent(mColorsButton,fView);
    listColors.addView(fView,pos);
  }
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}"
38548,"public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
switch (view.getId()) {
case R.id.straightenButton:
{
      mCurrentImage=showImageView(R.id.imageStraighten);
      String ename=mCurrentImage.getContext().getString(R.string.straighten);
      mUtilityPanel.setEffectName(ename);
      break;
    }
case R.id.rotateButton:
{
    mCurrentImage=showImageView(R.id.imageRotate);
    String ename=mCurrentImage.getContext().getString(R.string.rotate);
    mUtilityPanel.setEffectName(ename);
    break;
  }
case R.id.flipButton:
{
  mCurrentImage=showImageView(R.id.imageFlip);
  String ename=mCurrentImage.getContext().getString(R.string.flip);
  mUtilityPanel.setEffectName(ename);
  mUtilityPanel.setShowParameter(false);
  break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
curves.setUseRed(true);
curves.setUseGreen(true);
curves.setUseBlue(true);
curves.reloadCurve();
mCurrentImage=curves;
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpen);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.applyEffect:
{
showPanel(mCurrentPanel);
break;
}
}
mCurrentImage.select();
}","public void showComponent(View view){
  if (mUtilityPanel != null && !mUtilityPanel.selected()) {
    Panel current=mPanels.get(mCurrentPanel);
    ViewPropertyAnimator anim1=current.unselect(-1,VERTICAL_MOVE);
    anim1.start();
    if (mUtilityPanel != null) {
      ViewPropertyAnimator anim2=mUtilityPanel.select();
      anim2.start();
    }
  }
  if (mCurrentImage != null) {
    mCurrentImage.unselect();
  }
switch (view.getId()) {
case R.id.straightenButton:
{
      mCurrentImage=showImageView(R.id.imageStraighten);
      String ename=mCurrentImage.getContext().getString(R.string.straighten);
      mUtilityPanel.setEffectName(ename);
      break;
    }
case R.id.cropButton:
{
    mCurrentImage=showImageView(R.id.imageCrop);
    String ename=mCurrentImage.getContext().getString(R.string.crop);
    mUtilityPanel.setEffectName(ename);
    mUtilityPanel.setShowParameter(false);
    break;
  }
case R.id.rotateButton:
{
  mCurrentImage=showImageView(R.id.imageRotate);
  String ename=mCurrentImage.getContext().getString(R.string.rotate);
  mUtilityPanel.setEffectName(ename);
  break;
}
case R.id.flipButton:
{
mCurrentImage=showImageView(R.id.imageFlip);
String ename=mCurrentImage.getContext().getString(R.string.flip);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
break;
}
case R.id.vignetteButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vignette);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.curvesButtonRGB:
{
ImageCurves curves=(ImageCurves)showImageView(R.id.imageCurves);
String ename=curves.getContext().getString(R.string.curvesRGB);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
curves.setUseRed(true);
curves.setUseGreen(true);
curves.setUseBlue(true);
curves.reloadCurve();
mCurrentImage=curves;
break;
}
case R.id.sharpenButton:
{
mCurrentImage=showImageView(R.id.imageZoom).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.sharpen);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.contrastButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.contrast);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.saturationButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.saturation);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.wbalanceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(false);
String ename=mCurrentImage.getContext().getString(R.string.wbalance);
mUtilityPanel.setEffectName(ename);
mUtilityPanel.setShowParameter(false);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.hueButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.hue);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.exposureButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.exposure);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.vibranceButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.vibrance);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.shadowRecoveryButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.shadow_recovery);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.redEyeButton:
{
mCurrentImage=showImageView(R.id.imageShow).setShowControls(true);
String ename=mCurrentImage.getContext().getString(R.string.redeye);
mUtilityPanel.setEffectName(ename);
ensureFilter(""String_Node_Str"");
break;
}
case R.id.applyEffect:
{
showPanel(mCurrentPanel);
break;
}
}
mCurrentImage.select();
}"
38549,"public Matrix buildMatrix(Bitmap bitmap,boolean rotated){
  float dx=bitmap.getWidth() / 2;
  float dy=bitmap.getHeight() / 2;
  if (mGeometry.hasSwitchedWidthHeight()) {
    float temp=dx;
    dx=dy;
    dy=temp;
  }
  Matrix m=mGeometry.buildGeometryMatrix(bitmap.getWidth(),bitmap.getHeight(),1f / mGeometry.getScaleFactor(),dx,dy);
  return m;
}","public Matrix buildMatrix(RectF r){
  float dx=r.width() / 2;
  float dy=r.height() / 2;
  if (mGeometry.hasSwitchedWidthHeight()) {
    float temp=dx;
    dx=dy;
    dy=temp;
  }
  float w=r.left * 2 + r.width();
  float h=r.top * 2 + r.height();
  Matrix m=mGeometry.buildGeometryMatrix(w,h,1f,dx,dy,false);
  return m;
}"
38550,"@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Bitmap temp=null;
  float rotation=mGeometry.getRotation();
  boolean rotated=false;
  if (rotation == 0 || rotation % 180 == 0) {
    temp=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(bitmap.getHeight(),bitmap.getWidth(),mConfig);
    rotated=true;
  }
  Matrix drawMatrix=buildMatrix(bitmap,rotated);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}","@Override public Bitmap apply(Bitmap bitmap,float scaleFactor,boolean highQuality){
  Rect cropBounds=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
  RectF c=mGeometry.getCropBounds();
  if (c != null && c.width() > 0 && c.height() > 0)   c.roundOut(cropBounds);
  Bitmap temp=null;
  if (mGeometry.hasSwitchedWidthHeight()) {
    temp=Bitmap.createBitmap(cropBounds.height(),cropBounds.width(),mConfig);
  }
 else {
    temp=Bitmap.createBitmap(cropBounds.width(),cropBounds.height(),mConfig);
  }
  Matrix drawMatrix=buildMatrix(c);
  Canvas canvas=new Canvas(temp);
  canvas.drawBitmap(bitmap,drawMatrix,new Paint());
  return temp;
}"
38551,"public Matrix buildGeometryMatrix(float width,float height,float scaling,float dx,float dy){
  float dx0=width / 2;
  float dy0=height / 2;
  Matrix m=getFlipMatrix(width,height);
  m.postTranslate(-dx0,-dy0);
  float rot=mRotation % 360;
  if (rot < 0)   rot+=360;
  m.postRotate(rot + mStraightenRotation);
  m.postScale(scaling,scaling);
  m.postTranslate(dx,dy);
  return m;
}","public Matrix buildGeometryMatrix(float width,float height,float scaling,float dx,float dy,boolean onlyRotate){
  float rot=mRotation;
  if (!onlyRotate) {
    rot+=mStraightenRotation;
  }
  return buildGeometryMatrix(width,height,scaling,dx,dy,rot);
}"
38552,"public Matrix buildGeometryUIMatrix(float scaling,float dx,float dy){
  float w=mPhotoBounds.width();
  float h=mPhotoBounds.height();
  return buildGeometryMatrix(w,h,scaling,dx,dy);
}","public Matrix buildGeometryUIMatrix(float scaling,float dx,float dy){
  float w=mPhotoBounds.width();
  float h=mPhotoBounds.height();
  return buildGeometryMatrix(w,h,scaling,dx,dy,false);
}"
38553,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38554,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38555,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri);
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri,getScreenImageSize());
    }
  }
}"
38556,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}"
38557,"public void loadBitmap(Uri uri){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,320);
  updateBitmaps();
}","public void loadBitmap(Uri uri,int size){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,size);
  updateBitmaps();
}"
38558,"public ImageFilterVignette(){
  mName=""String_Node_Str"";
}","public ImageFilterVignette(){
  setFilterType(TYPE_VIGNETTE);
  mName=""String_Node_Str"";
}"
38559,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38560,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri);
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri,getScreenImageSize());
    }
  }
}"
38561,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}"
38562,"public void loadBitmap(Uri uri){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,320);
  updateBitmaps();
}","public void loadBitmap(Uri uri,int size){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,size);
  updateBitmaps();
}"
38563,"public ImageFilterVignette(){
  mName=""String_Node_Str"";
}","public ImageFilterVignette(){
  setFilterType(TYPE_VIGNETTE);
  mName=""String_Node_Str"";
}"
38564,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38565,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38566,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri);
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.v(LOGTAG,""String_Node_Str"");
  if (resultCode == RESULT_OK) {
    if (requestCode == SELECT_PICTURE) {
      Uri selectedImageUri=data.getData();
      mImageLoader.loadBitmap(selectedImageUri,getScreenImageSize());
    }
  }
}"
38567,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ImageFilterRS.setRenderScriptContext(this);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageZoom=(ImageZoom)findViewById(R.id.imageZoom);
  mImageCrop=(ImageCrop)findViewById(R.id.imageCrop);
  mImageRotate=(ImageRotate)findViewById(R.id.imageRotate);
  mImageFlip=(ImageFlip)findViewById(R.id.imageFlip);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mImageViews.add(mImageZoom);
  mImageViews.add(mImageCrop);
  mImageViews.add(mImageRotate);
  mImageViews.add(mImageFlip);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.geometryList);
  mListFilterButtons=findViewById(R.id.filterButtonsList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListFilterButtons);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  mImageZoom.setImageLoader(mImageLoader);
  mImageZoom.setMaster(mImageShow);
  mImageCrop.setImageLoader(mImageLoader);
  mImageCrop.setMaster(mImageShow);
  mImageRotate.setImageLoader(mImageLoader);
  mImageRotate.setMaster(mImageShow);
  mImageFlip.setImageLoader(mImageLoader);
  mImageFlip.setMaster(mImageShow);
  mPanelController.addImageView(findViewById(R.id.imageShow));
  mPanelController.addImageView(findViewById(R.id.imageCurves));
  mPanelController.addImageView(findViewById(R.id.imageBorder));
  mPanelController.addImageView(findViewById(R.id.imageStraighten));
  mPanelController.addImageView(findViewById(R.id.imageCrop));
  mPanelController.addImageView(findViewById(R.id.imageRotate));
  mPanelController.addImageView(findViewById(R.id.imageFlip));
  mPanelController.addImageView(findViewById(R.id.imageZoom));
  mPanelController.addPanel(mFxButton,mListFx,0);
  mPanelController.addPanel(mBorderButton,mListBorders,1);
  mPanelController.addPanel(mGeometryButton,mListGeometry,2);
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.straightenButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.cropButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.rotateButton));
  mPanelController.addComponent(mGeometryButton,findViewById(R.id.flipButton));
  mPanelController.addPanel(mColorsButton,mListColors,3);
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vignetteButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.curvesButtonRGB));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.sharpenButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.vibranceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.contrastButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.saturationButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.wbalanceButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.hueButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.exposureButton));
  mPanelController.addComponent(mColorsButton,findViewById(R.id.shadowRecoveryButton));
  mPanelController.addView(findViewById(R.id.applyEffect));
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  SeekBar seekBar=(SeekBar)findViewById(R.id.filterSeekBar);
  seekBar.setMax(200);
  mImageShow.setSeekBar(seekBar);
  mImageZoom.setSeekBar(seekBar);
  mPanelController.setRowPanel(findViewById(R.id.secondRowPanel));
  mPanelController.setUtilityPanel(this,findViewById(R.id.filterButtonsList),findViewById(R.id.applyEffect));
  mPanelController.setMasterImage(mImageShow);
  mPanelController.setCurrentPanel(mFxButton);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri,getScreenImageSize());
  }
 else {
    pickImage();
  }
}"
38568,"public void loadBitmap(Uri uri){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,320);
  updateBitmaps();
}","public void loadBitmap(Uri uri,int size){
  mUri=uri;
  mOrientation=getOrientation(uri);
  mOriginalBitmapSmall=loadScaledBitmap(uri,160);
  mOriginalBitmapLarge=loadScaledBitmap(uri,size);
  updateBitmaps();
}"
38569,"public ImageFilterVignette(){
  mName=""String_Node_Str"";
}","public ImageFilterVignette(){
  setFilterType(TYPE_VIGNETTE);
  mName=""String_Node_Str"";
}"
38570,"public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    Vector<ImageFilter> fl=mFilters;
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=fl.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          fl.remove(i);
        }
      }
 else       if (type == ImageFilter.TYPE_FX) {
        fl.remove(i);
        fl.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}","public void add(ImageFilter filter){
  if (filter.getFilterType() == ImageFilter.TYPE_BORDER) {
    setHistoryName(""String_Node_Str"");
    setBorder(filter);
  }
 else   if (filter.getFilterType() == ImageFilter.TYPE_FX) {
    boolean found=false;
    for (int i=0; i < mFilters.size(); i++) {
      byte type=mFilters.get(i).getFilterType();
      if (found) {
        if (type != ImageFilter.TYPE_VIGNETTE) {
          mFilters.remove(i);
          continue;
        }
      }
      if (type == ImageFilter.TYPE_FX) {
        mFilters.remove(i);
        mFilters.add(i,filter);
        setHistoryName(filter.getName());
        found=true;
      }
    }
    if (!found) {
      mFilters.add(filter);
      setHistoryName(filter.getName());
    }
  }
 else {
    mFilters.add(filter);
    setHistoryName(filter.getName());
  }
}"
38571,"@Override public void onPhotoChanged(int index,Path item){
  int oldIndex=mCurrentIndex;
  mCurrentIndex=index;
  if (mAppBridge != null) {
    if (mCurrentIndex > 0) {
      mSkipUpdateCurrentPhoto=false;
    }
    if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
      mPhotoView.setFilmMode(true);
    }
 else     if (oldIndex == 2 && mCurrentIndex == 1) {
      mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
      mPhotoView.stopScrolling();
    }
 else     if (oldIndex == 1 && mCurrentIndex == 0) {
      mPhotoView.setWantPictureCenterCallbacks(true);
      mSkipUpdateCurrentPhoto=true;
    }
  }
  if (!mSkipUpdateCurrentPhoto) {
    if (item != null) {
      MediaItem photo=mModel.getMediaItem(0);
      if (photo != null)       updateCurrentPhoto(photo);
    }
    updateBars();
  }
  refreshHidingMessage();
}","@Override public void onPhotoChanged(int index,Path item){
  int oldIndex=mCurrentIndex;
  mCurrentIndex=index;
  if (mAppBridge != null) {
    if (mCurrentIndex > 0) {
      mSkipUpdateCurrentPhoto=false;
    }
    if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
      mPhotoView.setFilmMode(true);
    }
 else     if (oldIndex == 2 && mCurrentIndex == 1) {
      mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
      mPhotoView.stopScrolling();
    }
 else     if (oldIndex >= 1 && mCurrentIndex == 0) {
      mPhotoView.setWantPictureCenterCallbacks(true);
      mSkipUpdateCurrentPhoto=true;
    }
  }
  if (!mSkipUpdateCurrentPhoto) {
    if (item != null) {
      MediaItem photo=mModel.getMediaItem(0);
      if (photo != null)       updateCurrentPhoto(photo);
    }
    updateBars();
  }
  refreshHidingMessage();
}"
38572,"@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
        if (mBottomControls != null)         mBottomControls.refresh();
        break;
      }
case MSG_LOCK_ORIENTATION:
{
      mOrientationManager.lockOrientation();
      break;
    }
case MSG_UNLOCK_ORIENTATION:
{
    mOrientationManager.unlockOrientation();
    break;
  }
case MSG_ON_FULL_SCREEN_CHANGED:
{
  mAppBridge.onFullScreenChanged(message.arg1 == 1);
  break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean updateNeeded=false;
if (!mPhotoView.getFilmMode()) {
lockOrientation();
updateNeeded=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
updateNeeded=true;
}
if (updateNeeded) {
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
setupNfcBeamPush();
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mInCameraRoll=data.getBoolean(KEY_IN_CAMERA_ROLL,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mSetPathString != null) {
mShowSpinner=true;
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mShowBars=false;
mInCameraRoll=true;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mShowSpinner=false;
}
if (data.getBoolean(KEY_SHOW_WHEN_LOCKED,false)) {
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
if (!mSetPathString.equals(""String_Node_Str"")) {
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
}
if (LightCycleHelper.hasLightCycleCapture(mActivity.getAndroidContext())) {
mSetPathString=LightCycleHelper.wrapGalleryPath(mSetPathString);
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
 else if (mInCameraRoll && GalleryUtils.isCameraAvailable(mActivity)) {
mSetPathString=""String_Node_Str"" + FilterSource.FILTER_CAMERA_SHORTCUT + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
mCurrentIndex++;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
if (mInCameraRoll && originalSet instanceof ComboAlbum) {
((ComboAlbum)originalSet).useNameOfChild(1);
}
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
int mediaItemCount=mMediaSet.getMediaItemCount();
if (mediaItemCount > 0) {
if (mCurrentIndex >= mediaItemCount) mCurrentIndex=0;
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
int oldIndex=mCurrentIndex;
mCurrentIndex=index;
if (mAppBridge != null) {
if (mCurrentIndex > 0) {
mSkipUpdateCurrentPhoto=false;
}
if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
mPhotoView.setFilmMode(true);
}
 else if (oldIndex == 2 && mCurrentIndex == 1) {
mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
mPhotoView.stopScrolling();
}
 else if (oldIndex == 1 && mCurrentIndex == 0) {
mPhotoView.setWantPictureCenterCallbacks(true);
mSkipUpdateCurrentPhoto=true;
}
}
if (!mSkipUpdateCurrentPhoto) {
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
refreshHidingMessage();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
mShowSpinner=false;
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
if (mSecureAlbum == null) {
RelativeLayout galleryRoot=(RelativeLayout)((Activity)mActivity).findViewById(mAppBridge != null ? R.id.content : R.id.gallery_root);
if (galleryRoot != null) {
mBottomControls=new PhotoPageBottomControls(this,mActivity,galleryRoot);
}
}
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
        if (mBottomControls != null)         mBottomControls.refresh();
        break;
      }
case MSG_LOCK_ORIENTATION:
{
      mOrientationManager.lockOrientation();
      break;
    }
case MSG_UNLOCK_ORIENTATION:
{
    mOrientationManager.unlockOrientation();
    break;
  }
case MSG_ON_FULL_SCREEN_CHANGED:
{
  mAppBridge.onFullScreenChanged(message.arg1 == 1);
  break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean stayedOnCamera=false;
if (!mPhotoView.getFilmMode()) {
stayedOnCamera=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
stayedOnCamera=true;
}
if (stayedOnCamera) {
lockOrientation();
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
setupNfcBeamPush();
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mInCameraRoll=data.getBoolean(KEY_IN_CAMERA_ROLL,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mSetPathString != null) {
mShowSpinner=true;
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mShowBars=false;
mInCameraRoll=true;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mShowSpinner=false;
}
if (data.getBoolean(KEY_SHOW_WHEN_LOCKED,false)) {
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
if (!mSetPathString.equals(""String_Node_Str"")) {
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
}
if (LightCycleHelper.hasLightCycleCapture(mActivity.getAndroidContext())) {
mSetPathString=LightCycleHelper.wrapGalleryPath(mSetPathString);
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
 else if (mInCameraRoll && GalleryUtils.isCameraAvailable(mActivity)) {
mSetPathString=""String_Node_Str"" + FilterSource.FILTER_CAMERA_SHORTCUT + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
mCurrentIndex++;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
if (mInCameraRoll && originalSet instanceof ComboAlbum) {
((ComboAlbum)originalSet).useNameOfChild(1);
}
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
int mediaItemCount=mMediaSet.getMediaItemCount();
if (mediaItemCount > 0) {
if (mCurrentIndex >= mediaItemCount) mCurrentIndex=0;
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
int oldIndex=mCurrentIndex;
mCurrentIndex=index;
if (mAppBridge != null) {
if (mCurrentIndex > 0) {
mSkipUpdateCurrentPhoto=false;
}
if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
mPhotoView.setFilmMode(true);
}
 else if (oldIndex == 2 && mCurrentIndex == 1) {
mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
mPhotoView.stopScrolling();
}
 else if (oldIndex >= 1 && mCurrentIndex == 0) {
mPhotoView.setWantPictureCenterCallbacks(true);
mSkipUpdateCurrentPhoto=true;
}
}
if (!mSkipUpdateCurrentPhoto) {
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
refreshHidingMessage();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
mShowSpinner=false;
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
if (mSecureAlbum == null) {
RelativeLayout galleryRoot=(RelativeLayout)((Activity)mActivity).findViewById(mAppBridge != null ? R.id.content : R.id.gallery_root);
if (galleryRoot != null) {
mBottomControls=new PhotoPageBottomControls(this,mActivity,galleryRoot);
}
}
}"
38573,"@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
    if (mBottomControls != null)     mBottomControls.refresh();
    break;
  }
case MSG_LOCK_ORIENTATION:
{
  mOrientationManager.lockOrientation();
  break;
}
case MSG_UNLOCK_ORIENTATION:
{
mOrientationManager.unlockOrientation();
break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean updateNeeded=false;
if (!mPhotoView.getFilmMode()) {
lockOrientation();
updateNeeded=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
updateNeeded=true;
}
if (updateNeeded) {
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
    if (mBottomControls != null)     mBottomControls.refresh();
    break;
  }
case MSG_LOCK_ORIENTATION:
{
  mOrientationManager.lockOrientation();
  break;
}
case MSG_UNLOCK_ORIENTATION:
{
mOrientationManager.unlockOrientation();
break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean stayedOnCamera=false;
if (!mPhotoView.getFilmMode()) {
stayedOnCamera=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
stayedOnCamera=true;
}
if (stayedOnCamera) {
lockOrientation();
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}"
38574,"@Override public void onPhotoChanged(int index,Path item){
  int oldIndex=mCurrentIndex;
  mCurrentIndex=index;
  if (mAppBridge != null) {
    if (mCurrentIndex > 0) {
      mSkipUpdateCurrentPhoto=false;
    }
    if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
      mPhotoView.setFilmMode(true);
    }
 else     if (oldIndex == 2 && mCurrentIndex == 1) {
      mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
      mPhotoView.stopScrolling();
    }
 else     if (oldIndex == 1 && mCurrentIndex == 0) {
      mPhotoView.setWantPictureCenterCallbacks(true);
      mSkipUpdateCurrentPhoto=true;
    }
  }
  if (!mSkipUpdateCurrentPhoto) {
    if (item != null) {
      MediaItem photo=mModel.getMediaItem(0);
      if (photo != null)       updateCurrentPhoto(photo);
    }
    updateBars();
  }
  refreshHidingMessage();
}","@Override public void onPhotoChanged(int index,Path item){
  int oldIndex=mCurrentIndex;
  mCurrentIndex=index;
  if (mAppBridge != null) {
    if (mCurrentIndex > 0) {
      mSkipUpdateCurrentPhoto=false;
    }
    if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
      mPhotoView.setFilmMode(true);
    }
 else     if (oldIndex == 2 && mCurrentIndex == 1) {
      mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
      mPhotoView.stopScrolling();
    }
 else     if (oldIndex >= 1 && mCurrentIndex == 0) {
      mPhotoView.setWantPictureCenterCallbacks(true);
      mSkipUpdateCurrentPhoto=true;
    }
  }
  if (!mSkipUpdateCurrentPhoto) {
    if (item != null) {
      MediaItem photo=mModel.getMediaItem(0);
      if (photo != null)       updateCurrentPhoto(photo);
    }
    updateBars();
  }
  refreshHidingMessage();
}"
38575,"@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
        if (mBottomControls != null)         mBottomControls.refresh();
        break;
      }
case MSG_LOCK_ORIENTATION:
{
      mOrientationManager.lockOrientation();
      break;
    }
case MSG_UNLOCK_ORIENTATION:
{
    mOrientationManager.unlockOrientation();
    break;
  }
case MSG_ON_FULL_SCREEN_CHANGED:
{
  mAppBridge.onFullScreenChanged(message.arg1 == 1);
  break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean updateNeeded=false;
if (!mPhotoView.getFilmMode()) {
lockOrientation();
updateNeeded=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
updateNeeded=true;
}
if (updateNeeded) {
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
setupNfcBeamPush();
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mInCameraRoll=data.getBoolean(KEY_IN_CAMERA_ROLL,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mSetPathString != null) {
mShowSpinner=true;
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mShowBars=false;
mInCameraRoll=true;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mShowSpinner=false;
}
if (data.getBoolean(KEY_SHOW_WHEN_LOCKED,false)) {
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
if (!mSetPathString.equals(""String_Node_Str"")) {
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
}
if (LightCycleHelper.hasLightCycleCapture(mActivity.getAndroidContext())) {
mSetPathString=LightCycleHelper.wrapGalleryPath(mSetPathString);
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
 else if (mInCameraRoll && GalleryUtils.isCameraAvailable(mActivity)) {
mSetPathString=""String_Node_Str"" + FilterSource.FILTER_CAMERA_SHORTCUT + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
mCurrentIndex++;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
if (mInCameraRoll && originalSet instanceof ComboAlbum) {
((ComboAlbum)originalSet).useNameOfChild(1);
}
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
int mediaItemCount=mMediaSet.getMediaItemCount();
if (mediaItemCount > 0) {
if (mCurrentIndex >= mediaItemCount) mCurrentIndex=0;
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
int oldIndex=mCurrentIndex;
mCurrentIndex=index;
if (mAppBridge != null) {
if (mCurrentIndex > 0) {
mSkipUpdateCurrentPhoto=false;
}
if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
mPhotoView.setFilmMode(true);
}
 else if (oldIndex == 2 && mCurrentIndex == 1) {
mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
mPhotoView.stopScrolling();
}
 else if (oldIndex == 1 && mCurrentIndex == 0) {
mPhotoView.setWantPictureCenterCallbacks(true);
mSkipUpdateCurrentPhoto=true;
}
}
if (!mSkipUpdateCurrentPhoto) {
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
refreshHidingMessage();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
mShowSpinner=false;
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
if (mSecureAlbum == null) {
RelativeLayout galleryRoot=(RelativeLayout)((Activity)mActivity).findViewById(mAppBridge != null ? R.id.content : R.id.gallery_root);
if (galleryRoot != null) {
mBottomControls=new PhotoPageBottomControls(this,mActivity,galleryRoot);
}
}
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
        if (mBottomControls != null)         mBottomControls.refresh();
        break;
      }
case MSG_LOCK_ORIENTATION:
{
      mOrientationManager.lockOrientation();
      break;
    }
case MSG_UNLOCK_ORIENTATION:
{
    mOrientationManager.unlockOrientation();
    break;
  }
case MSG_ON_FULL_SCREEN_CHANGED:
{
  mAppBridge.onFullScreenChanged(message.arg1 == 1);
  break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean stayedOnCamera=false;
if (!mPhotoView.getFilmMode()) {
stayedOnCamera=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
stayedOnCamera=true;
}
if (stayedOnCamera) {
lockOrientation();
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
setupNfcBeamPush();
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mInCameraRoll=data.getBoolean(KEY_IN_CAMERA_ROLL,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mSetPathString != null) {
mShowSpinner=true;
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mShowBars=false;
mInCameraRoll=true;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mShowSpinner=false;
}
if (data.getBoolean(KEY_SHOW_WHEN_LOCKED,false)) {
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
if (!mSetPathString.equals(""String_Node_Str"")) {
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
}
if (LightCycleHelper.hasLightCycleCapture(mActivity.getAndroidContext())) {
mSetPathString=LightCycleHelper.wrapGalleryPath(mSetPathString);
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
 else if (mInCameraRoll && GalleryUtils.isCameraAvailable(mActivity)) {
mSetPathString=""String_Node_Str"" + FilterSource.FILTER_CAMERA_SHORTCUT + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
mCurrentIndex++;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
if (mInCameraRoll && originalSet instanceof ComboAlbum) {
((ComboAlbum)originalSet).useNameOfChild(1);
}
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
int mediaItemCount=mMediaSet.getMediaItemCount();
if (mediaItemCount > 0) {
if (mCurrentIndex >= mediaItemCount) mCurrentIndex=0;
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
int oldIndex=mCurrentIndex;
mCurrentIndex=index;
if (mAppBridge != null) {
if (mCurrentIndex > 0) {
mSkipUpdateCurrentPhoto=false;
}
if (oldIndex == 0 && mCurrentIndex > 0 && !mPhotoView.getFilmMode()) {
mPhotoView.setFilmMode(true);
}
 else if (oldIndex == 2 && mCurrentIndex == 1) {
mCameraSwitchCutoff=SystemClock.uptimeMillis() + CAMERA_SWITCH_CUTOFF_THRESHOLD_MS;
mPhotoView.stopScrolling();
}
 else if (oldIndex >= 1 && mCurrentIndex == 0) {
mPhotoView.setWantPictureCenterCallbacks(true);
mSkipUpdateCurrentPhoto=true;
}
}
if (!mSkipUpdateCurrentPhoto) {
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
refreshHidingMessage();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
mShowSpinner=false;
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
if (mSecureAlbum == null) {
RelativeLayout galleryRoot=(RelativeLayout)((Activity)mActivity).findViewById(mAppBridge != null ? R.id.content : R.id.gallery_root);
if (galleryRoot != null) {
mBottomControls=new PhotoPageBottomControls(this,mActivity,galleryRoot);
}
}
}"
38576,"@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
    if (mBottomControls != null)     mBottomControls.refresh();
    break;
  }
case MSG_LOCK_ORIENTATION:
{
  mOrientationManager.lockOrientation();
  break;
}
case MSG_UNLOCK_ORIENTATION:
{
mOrientationManager.unlockOrientation();
break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean updateNeeded=false;
if (!mPhotoView.getFilmMode()) {
lockOrientation();
updateNeeded=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
updateNeeded=true;
}
if (updateNeeded) {
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_REFRESH_BOTTOM_CONTROLS:
{
    if (mBottomControls != null)     mBottomControls.refresh();
    break;
  }
case MSG_LOCK_ORIENTATION:
{
  mOrientationManager.lockOrientation();
  break;
}
case MSG_UNLOCK_ORIENTATION:
{
mOrientationManager.unlockOrientation();
break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
case MSG_ON_CAMERA_CENTER:
{
mSkipUpdateCurrentPhoto=false;
boolean stayedOnCamera=false;
if (!mPhotoView.getFilmMode()) {
stayedOnCamera=true;
}
 else if (SystemClock.uptimeMillis() < mCameraSwitchCutoff && mMediaSet.getMediaItemCount() > 1) {
mPhotoView.switchToImage(1);
}
 else {
mPhotoView.setFilmMode(false);
stayedOnCamera=true;
}
if (stayedOnCamera) {
lockOrientation();
updateBars();
updateCurrentPhoto(mModel.getMediaItem(0));
}
break;
}
case MSG_ON_PICTURE_CENTER:
{
if (mCurrentPhoto != null && (mCurrentPhoto.getSupportedOperations() & MediaObject.SUPPORT_ACTION) != 0) {
mPhotoView.setFilmMode(true);
}
break;
}
default :
throw new AssertionError(message.what);
}
}"
38577,"public LocalMergeAlbum(Path path,Comparator<MediaItem> comparator,MediaSet[] sources,int bucketId){
  super(path,INVALID_DATA_VERSION);
  mComparator=comparator;
  mSources=sources;
  mName=sources.length == 0 ? ""String_Node_Str"" : sources[0].getName();
  mBucketId=bucketId;
  for (  MediaSet set : mSources) {
    set.addContentListener(this);
  }
}","public LocalMergeAlbum(Path path,Comparator<MediaItem> comparator,MediaSet[] sources,int bucketId){
  super(path,INVALID_DATA_VERSION);
  mComparator=comparator;
  mSources=sources;
  mName=sources.length == 0 ? ""String_Node_Str"" : sources[0].getName();
  mBucketId=bucketId;
  for (  MediaSet set : mSources) {
    set.addContentListener(this);
  }
  reload();
}"
38578,"@Override public ArrayList<MediaItem> getMediaItem(int start,int count){
  SortedMap<Integer,int[]> head=mIndex.headMap(start + 1);
  int markPos;
  try {
    markPos=head.lastKey();
  }
 catch (  NoSuchElementException e) {
    Log.e(TAG,""String_Node_Str"" + start + ""String_Node_Str""+ count+ ""String_Node_Str"");
    Log.e(TAG,""String_Node_Str"");
    for (    MediaSet set : mSources) {
      Log.e(TAG,""String_Node_Str"" + set.getPath());
    }
    throw e;
  }
  int[] subPos=head.get(markPos).clone();
  MediaItem[] slot=new MediaItem[mSources.length];
  int size=mSources.length;
  for (int i=0; i < size; i++) {
    slot[i]=mFetcher[i].getItem(subPos[i]);
  }
  ArrayList<MediaItem> result=new ArrayList<MediaItem>();
  for (int i=markPos; i < start + count; i++) {
    int k=-1;
    for (int j=0; j < size; j++) {
      if (slot[j] != null) {
        if (k == -1 || mComparator.compare(slot[j],slot[k]) < 0) {
          k=j;
        }
      }
    }
    if (k == -1)     break;
    subPos[k]++;
    if (i >= start) {
      result.add(slot[k]);
    }
    slot[k]=mFetcher[k].getItem(subPos[k]);
    if ((i + 1) % PAGE_SIZE == 0) {
      mIndex.put(i + 1,subPos.clone());
    }
  }
  return result;
}","@Override public ArrayList<MediaItem> getMediaItem(int start,int count){
  SortedMap<Integer,int[]> head=mIndex.headMap(start + 1);
  int markPos=head.lastKey();
  int[] subPos=head.get(markPos).clone();
  MediaItem[] slot=new MediaItem[mSources.length];
  int size=mSources.length;
  for (int i=0; i < size; i++) {
    slot[i]=mFetcher[i].getItem(subPos[i]);
  }
  ArrayList<MediaItem> result=new ArrayList<MediaItem>();
  for (int i=markPos; i < start + count; i++) {
    int k=-1;
    for (int j=0; j < size; j++) {
      if (slot[j] != null) {
        if (k == -1 || mComparator.compare(slot[j],slot[k]) < 0) {
          k=j;
        }
      }
    }
    if (k == -1)     break;
    subPos[k]++;
    if (i >= start) {
      result.add(slot[k]);
    }
    slot[k]=mFetcher[k].getItem(subPos[k]);
    if ((i + 1) % PAGE_SIZE == 0) {
      mIndex.put(i + 1,subPos.clone());
    }
  }
  return result;
}"
38579,"@Override public void onClick(View v){
  hideImageViews();
  mImageShow.setVisibility(View.VISIBLE);
  mImageShow.setShowControls(true);
  ImagePreset preset=mImageShow.getImagePreset();
  ImageFilter filter=preset.getFilter(""String_Node_Str"");
  if (filter == null) {
    ImageFilterHue contrast=new ImageFilterHue();
    ImagePreset copy=new ImagePreset(preset);
    copy.add(contrast);
    copy.setHistoryName(contrast.name());
    copy.setIsFx(false);
    filter=copy.getFilter(""String_Node_Str"");
    mImageShow.setImagePreset(copy);
  }
  mImageShow.setCurrentFilter(filter);
  unselectPanelButtons(mColorsPanelButtons);
  mShadowRecoveryButton.setSelected(true);
  invalidateViews();
}","@Override public void onClick(View v){
  hideImageViews();
  mImageShow.setVisibility(View.VISIBLE);
  mImageShow.setShowControls(true);
  ImagePreset preset=mImageShow.getImagePreset();
  ImageFilter filter=preset.getFilter(""String_Node_Str"");
  if (filter == null) {
    ImageFilterHue contrast=new ImageFilterHue();
    ImagePreset copy=new ImagePreset(preset);
    copy.add(contrast);
    copy.setHistoryName(contrast.getName());
    copy.setIsFx(false);
    filter=copy.getFilter(""String_Node_Str"");
    mImageShow.setImagePreset(copy);
  }
  mImageShow.setCurrentFilter(filter);
  unselectPanelButtons(mColorsPanelButtons);
  mShadowRecoveryButton.setSelected(true);
  invalidateViews();
}"
38580,"public void run(){
  lp.x=0;
  view.setLayoutParams(lp);
}","public void run(){
  viewList.setAlpha(0);
  viewList.setVisibility(View.VISIBLE);
  viewList.animate().setDuration(100).alpha(1.0f).start();
}"
38581,"public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
      int position=adapter.undo();
      mImageShow.onItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
    int position=adapter.redo();
    mImageShow.onItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.operationsButton:
{
  toggleHistoryPanel();
  return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
      int position=adapter.undo();
      mImageShow.onItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
    int position=adapter.redo();
    mImageShow.onItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.showImageStateButton:
{
  toggleImageStatePanel();
  return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38582,"private void resetHistory(){
  HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  invalidateViews();
}","private void resetHistory(){
  HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  invalidateViews();
}"
38583,"private OnClickListener createOnClickSaturationButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterSaturated sat=new ImageFilterSaturated();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(sat);
        copy.setHistoryName(sat.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mSaturationButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickSaturationButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterSaturated sat=new ImageFilterSaturated();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(sat);
        copy.setHistoryName(sat.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mSaturationButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38584,"private OnClickListener createOnClickVibranceButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVibranceButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickVibranceButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVibranceButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38585,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.gemoetryList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mFxButton.setSelected(true);
  mVignetteButton=(ImageButton)findViewById(R.id.vignetteButton);
  mCurvesButtonRGB=(ImageButton)findViewById(R.id.curvesButtonRGB);
  mSharpenButton=(ImageButton)findViewById(R.id.sharpenButton);
  mVibranceButton=(ImageButton)findViewById(R.id.vibranceButton);
  mContrastButton=(ImageButton)findViewById(R.id.contrastButton);
  mSaturationButton=(ImageButton)findViewById(R.id.saturationButton);
  mTintButton=(ImageButton)findViewById(R.id.tintButton);
  mExposureButton=(ImageButton)findViewById(R.id.exposureButton);
  mShadowRecoveryButton=(ImageButton)findViewById(R.id.shadowRecoveryButton);
  mColorsPanelButtons.add(mVignetteButton);
  mColorsPanelButtons.add(mCurvesButtonRGB);
  mColorsPanelButtons.add(mSharpenButton);
  mColorsPanelButtons.add(mContrastButton);
  mColorsPanelButtons.add(mSaturationButton);
  mColorsPanelButtons.add(mTintButton);
  mColorsPanelButtons.add(mVibranceButton);
  mColorsPanelButtons.add(mExposureButton);
  mColorsPanelButtons.add(mShadowRecoveryButton);
  findViewById(R.id.showOriginalButton).setOnTouchListener(createOnTouchShowOriginalButton());
  findViewById(R.id.straightenButton).setOnClickListener(createOnClickStraightenButton());
  findViewById(R.id.cropButton).setOnClickListener(createOnClickCropButton());
  findViewById(R.id.rotateButton).setOnClickListener(createOnClickRotateButton());
  findViewById(R.id.flipButton).setOnClickListener(createOnClickFlipButton());
  mVignetteButton.setOnClickListener(createOnClickVignetteButton());
  mCurvesButtonRGB.setOnClickListener(createOnClickCurvesRGBButton());
  mSharpenButton.setOnClickListener(createOnClickSharpenButton());
  mContrastButton.setOnClickListener(createOnClickContrastButton());
  mSaturationButton.setOnClickListener(createOnClickSaturationButton());
  mTintButton.setOnClickListener(createOnClickTintButton());
  mVibranceButton.setOnClickListener(createOnClickVibranceButton());
  mExposureButton.setOnClickListener(createOnClickExposureButton());
  mShadowRecoveryButton.setOnClickListener(createOnClickShadowRecoveryButton());
  mFxButton.setOnClickListener(createOnClickFxButton());
  mBorderButton.setOnClickListener(createOnClickBorderButton());
  mGeometryButton.setOnClickListener(createOnClickGeometryButton());
  mColorsButton.setOnClickListener(createOnClickColorsButton());
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getListAdapter());
  operationsList.setOnItemClickListener(this);
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getListAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.gemoetryList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mFxButton.setSelected(true);
  mVignetteButton=(ImageButton)findViewById(R.id.vignetteButton);
  mCurvesButtonRGB=(ImageButton)findViewById(R.id.curvesButtonRGB);
  mSharpenButton=(ImageButton)findViewById(R.id.sharpenButton);
  mVibranceButton=(ImageButton)findViewById(R.id.vibranceButton);
  mContrastButton=(ImageButton)findViewById(R.id.contrastButton);
  mSaturationButton=(ImageButton)findViewById(R.id.saturationButton);
  mTintButton=(ImageButton)findViewById(R.id.tintButton);
  mExposureButton=(ImageButton)findViewById(R.id.exposureButton);
  mShadowRecoveryButton=(ImageButton)findViewById(R.id.shadowRecoveryButton);
  mColorsPanelButtons.add(mVignetteButton);
  mColorsPanelButtons.add(mCurvesButtonRGB);
  mColorsPanelButtons.add(mSharpenButton);
  mColorsPanelButtons.add(mContrastButton);
  mColorsPanelButtons.add(mSaturationButton);
  mColorsPanelButtons.add(mTintButton);
  mColorsPanelButtons.add(mVibranceButton);
  mColorsPanelButtons.add(mExposureButton);
  mColorsPanelButtons.add(mShadowRecoveryButton);
  findViewById(R.id.showOriginalButton).setOnTouchListener(createOnTouchShowOriginalButton());
  findViewById(R.id.straightenButton).setOnClickListener(createOnClickStraightenButton());
  findViewById(R.id.cropButton).setOnClickListener(createOnClickCropButton());
  findViewById(R.id.rotateButton).setOnClickListener(createOnClickRotateButton());
  findViewById(R.id.flipButton).setOnClickListener(createOnClickFlipButton());
  mVignetteButton.setOnClickListener(createOnClickVignetteButton());
  mCurvesButtonRGB.setOnClickListener(createOnClickCurvesRGBButton());
  mSharpenButton.setOnClickListener(createOnClickSharpenButton());
  mContrastButton.setOnClickListener(createOnClickContrastButton());
  mSaturationButton.setOnClickListener(createOnClickSaturationButton());
  mTintButton.setOnClickListener(createOnClickTintButton());
  mVibranceButton.setOnClickListener(createOnClickVibranceButton());
  mExposureButton.setOnClickListener(createOnClickExposureButton());
  mShadowRecoveryButton.setOnClickListener(createOnClickShadowRecoveryButton());
  mFxButton.setOnClickListener(createOnClickFxButton());
  mBorderButton.setOnClickListener(createOnClickBorderButton());
  mGeometryButton.setOnClickListener(createOnClickGeometryButton());
  mColorsButton.setOnClickListener(createOnClickColorsButton());
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}"
38586,"private OnClickListener createOnClickContrastButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterContrast contrast=new ImageFilterContrast();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mContrastButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickContrastButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterContrast contrast=new ImageFilterContrast();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mContrastButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38587,"private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[8];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_film3);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd=getResources().getDrawable(R.drawable.filtershow_border_scratch3);
  borders[p++]=new ImageFilterBorder(npd);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_black);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd6=getResources().getDrawable(R.drawable.filtershow_border_rounded_black);
  borders[p++]=new ImageFilterBorder(npd6);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_white);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_rounded_white);
  borders[p++]=new ImageFilterBorder(npd5);
  for (int i=0; i < p; i++) {
    ImageSmallFilter filter=new ImageSmallFilter(getBaseContext());
    filter.setImageFilter(borders[i]);
    filter.setController(this);
    filter.setImageLoader(mImageLoader);
    listBorders.addView(filter);
  }
}","private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[8];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_film3);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd=getResources().getDrawable(R.drawable.filtershow_border_scratch3);
  borders[p++]=new ImageFilterBorder(npd);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_black);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd6=getResources().getDrawable(R.drawable.filtershow_border_rounded_black);
  borders[p++]=new ImageFilterBorder(npd6);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_white);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_rounded_white);
  borders[p++]=new ImageFilterBorder(npd5);
  for (int i=0; i < p; i++) {
    ImageSmallFilter filter=new ImageSmallFilter(getBaseContext());
    filter.setImageFilter(borders[i]);
    filter.setController(this);
    filter.setImageLoader(mImageLoader);
    filter.setShowTitle(false);
    listBorders.addView(filter);
  }
}"
38588,"private OnClickListener createOnClickExposureButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterBrightness bright=new ImageFilterBrightness();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(bright);
        copy.setHistoryName(bright.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mExposureButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickExposureButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterBrightness bright=new ImageFilterBrightness();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(bright);
        copy.setHistoryName(bright.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mExposureButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38589,"private OnClickListener createOnClickVignetteButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterVignette vignette=new ImageFilterVignette();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(vignette);
        copy.setHistoryName(vignette.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVignetteButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickVignetteButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterVignette vignette=new ImageFilterVignette();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(vignette);
        copy.setHistoryName(vignette.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVignetteButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38590,"private OnClickListener createOnClickTintButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mTintButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickTintButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mTintButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38591,"public void useImageFilter(ImageFilter imageFilter){
  if (imageFilter == null) {
    return;
  }
  ImagePreset oldPreset=mImageShow.getImagePreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  if (imageFilter.name().equalsIgnoreCase(""String_Node_Str"")) {
    copy.remove(""String_Node_Str"");
    copy.setHistoryName(""String_Node_Str"");
  }
  copy.add(imageFilter);
  invalidateViews();
}","public void useImageFilter(ImageFilter imageFilter){
  if (imageFilter == null) {
    return;
  }
  ImagePreset oldPreset=mImageShow.getImagePreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  if (imageFilter.getName().equalsIgnoreCase(""String_Node_Str"")) {
    copy.remove(""String_Node_Str"");
    copy.setHistoryName(""String_Node_Str"");
  }
  copy.add(imageFilter);
  mImageShow.setImagePreset(copy);
  invalidateViews();
}"
38592,"private void toggleHistoryPanel(){
  final View view=findViewById(R.id.mainPanel);
  final View viewList=findViewById(R.id.historyPanel);
  View rootView=viewList.getRootView();
  final AbsoluteLayout.LayoutParams lp=(AbsoluteLayout.LayoutParams)view.getLayoutParams();
  final AbsoluteLayout.LayoutParams lph=(AbsoluteLayout.LayoutParams)viewList.getLayoutParams();
  final int positionHistoryPanel=(int)(rootView.getWidth() - viewList.getWidth());
  if (!mShowingHistoryPanel) {
    mShowingHistoryPanel=true;
    view.animate().setDuration(200).x(-viewList.getWidth()).withLayer().withEndAction(new Runnable(){
      public void run(){
        view.setLayoutParams(lp);
        lph.x=positionHistoryPanel;
        viewList.setLayoutParams(lph);
        viewList.setAlpha(0);
        viewList.setVisibility(View.VISIBLE);
        viewList.animate().setDuration(100).alpha(1.0f).start();
      }
    }
).start();
  }
 else {
    mShowingHistoryPanel=false;
    viewList.setVisibility(View.INVISIBLE);
    view.animate().setDuration(200).x(0).withLayer().withEndAction(new Runnable(){
      public void run(){
        lp.x=0;
        view.setLayoutParams(lp);
      }
    }
).start();
  }
  invalidateOptionsMenu();
}","private void toggleHistoryPanel(){
  final View view=findViewById(R.id.mainPanel);
  final View viewList=findViewById(R.id.historyPanel);
  if (mShowingImageStatePanel) {
    findViewById(R.id.imageStatePanel).setVisibility(View.INVISIBLE);
    mShowingImageStatePanel=false;
  }
  if (!mShowingHistoryPanel) {
    mShowingHistoryPanel=true;
    view.animate().setDuration(200).x(-viewList.getWidth()).withLayer().withEndAction(new Runnable(){
      public void run(){
        viewList.setAlpha(0);
        viewList.setVisibility(View.VISIBLE);
        viewList.animate().setDuration(100).alpha(1.0f).start();
      }
    }
).start();
  }
 else {
    mShowingHistoryPanel=false;
    viewList.setVisibility(View.INVISIBLE);
    view.animate().setDuration(200).x(0).withLayer().start();
  }
  invalidateOptionsMenu();
}"
38593,"private OnClickListener createOnClickShadowRecoveryButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mShadowRecoveryButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickShadowRecoveryButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mShadowRecoveryButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38594,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.filtershow_activity_menu,menu);
  MenuItem item=menu.findItem(R.id.operationsButton);
  if (mShowingHistoryPanel) {
    item.setTitle(R.string.hide_history_panel);
  }
 else {
    item.setTitle(R.string.show_history_panel);
  }
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.filtershow_activity_menu,menu);
  MenuItem showHistory=menu.findItem(R.id.operationsButton);
  if (mShowingHistoryPanel) {
    showHistory.setTitle(R.string.hide_history_panel);
  }
 else {
    showHistory.setTitle(R.string.show_history_panel);
  }
  MenuItem showState=menu.findItem(R.id.showImageStateButton);
  if (mShowingImageStatePanel) {
    showState.setTitle(R.string.hide_imagestate_panel);
  }
 else {
    showState.setTitle(R.string.show_imagestate_panel);
  }
  return true;
}"
38595,"@Override public void onClick(View v){
  hideImageViews();
  mImageShow.setVisibility(View.VISIBLE);
  mImageShow.setShowControls(true);
  ImagePreset preset=mImageShow.getImagePreset();
  ImageFilter filter=preset.getFilter(""String_Node_Str"");
  if (filter == null) {
    ImageFilterHue contrast=new ImageFilterHue();
    ImagePreset copy=new ImagePreset(preset);
    copy.add(contrast);
    copy.setHistoryName(contrast.name());
    copy.setIsFx(false);
    filter=copy.getFilter(""String_Node_Str"");
    mImageShow.setImagePreset(copy);
  }
  mImageShow.setCurrentFilter(filter);
  unselectPanelButtons(mColorsPanelButtons);
  mShadowRecoveryButton.setSelected(true);
  invalidateViews();
}","@Override public void onClick(View v){
  hideImageViews();
  mImageShow.setVisibility(View.VISIBLE);
  mImageShow.setShowControls(true);
  ImagePreset preset=mImageShow.getImagePreset();
  ImageFilter filter=preset.getFilter(""String_Node_Str"");
  if (filter == null) {
    ImageFilterHue contrast=new ImageFilterHue();
    ImagePreset copy=new ImagePreset(preset);
    copy.add(contrast);
    copy.setHistoryName(contrast.getName());
    copy.setIsFx(false);
    filter=copy.getFilter(""String_Node_Str"");
    mImageShow.setImagePreset(copy);
  }
  mImageShow.setCurrentFilter(filter);
  unselectPanelButtons(mColorsPanelButtons);
  mShadowRecoveryButton.setSelected(true);
  invalidateViews();
}"
38596,"public void run(){
  lp.x=0;
  view.setLayoutParams(lp);
}","public void run(){
  viewList.setAlpha(0);
  viewList.setVisibility(View.VISIBLE);
  viewList.animate().setDuration(100).alpha(1.0f).start();
}"
38597,"public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
      int position=adapter.undo();
      mImageShow.onItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
    int position=adapter.redo();
    mImageShow.onItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.operationsButton:
{
  toggleHistoryPanel();
  return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}","public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.undoButton:
{
      HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
      int position=adapter.undo();
      mImageShow.onItemClick(position);
      mImageShow.showToast(""String_Node_Str"");
      invalidateViews();
      return true;
    }
case R.id.redoButton:
{
    HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
    int position=adapter.redo();
    mImageShow.onItemClick(position);
    mImageShow.showToast(""String_Node_Str"");
    invalidateViews();
    return true;
  }
case R.id.showImageStateButton:
{
  toggleImageStatePanel();
  return true;
}
case R.id.operationsButton:
{
toggleHistoryPanel();
return true;
}
case android.R.id.home:
{
saveImage();
return true;
}
}
return false;
}"
38598,"private void resetHistory(){
  HistoryAdapter adapter=(HistoryAdapter)mImageShow.getListAdapter();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  invalidateViews();
}","private void resetHistory(){
  HistoryAdapter adapter=(HistoryAdapter)mImageShow.getHistoryAdapter();
  adapter.reset();
  ImagePreset original=new ImagePreset(adapter.getItem(0));
  mImageShow.setImagePreset(original);
  invalidateViews();
}"
38599,"private OnClickListener createOnClickSaturationButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterSaturated sat=new ImageFilterSaturated();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(sat);
        copy.setHistoryName(sat.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mSaturationButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickSaturationButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterSaturated sat=new ImageFilterSaturated();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(sat);
        copy.setHistoryName(sat.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mSaturationButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38600,"private OnClickListener createOnClickVibranceButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVibranceButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickVibranceButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVibranceButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38601,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.gemoetryList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mFxButton.setSelected(true);
  mVignetteButton=(ImageButton)findViewById(R.id.vignetteButton);
  mCurvesButtonRGB=(ImageButton)findViewById(R.id.curvesButtonRGB);
  mSharpenButton=(ImageButton)findViewById(R.id.sharpenButton);
  mVibranceButton=(ImageButton)findViewById(R.id.vibranceButton);
  mContrastButton=(ImageButton)findViewById(R.id.contrastButton);
  mSaturationButton=(ImageButton)findViewById(R.id.saturationButton);
  mTintButton=(ImageButton)findViewById(R.id.tintButton);
  mExposureButton=(ImageButton)findViewById(R.id.exposureButton);
  mShadowRecoveryButton=(ImageButton)findViewById(R.id.shadowRecoveryButton);
  mColorsPanelButtons.add(mVignetteButton);
  mColorsPanelButtons.add(mCurvesButtonRGB);
  mColorsPanelButtons.add(mSharpenButton);
  mColorsPanelButtons.add(mContrastButton);
  mColorsPanelButtons.add(mSaturationButton);
  mColorsPanelButtons.add(mTintButton);
  mColorsPanelButtons.add(mVibranceButton);
  mColorsPanelButtons.add(mExposureButton);
  mColorsPanelButtons.add(mShadowRecoveryButton);
  findViewById(R.id.showOriginalButton).setOnTouchListener(createOnTouchShowOriginalButton());
  findViewById(R.id.straightenButton).setOnClickListener(createOnClickStraightenButton());
  findViewById(R.id.cropButton).setOnClickListener(createOnClickCropButton());
  findViewById(R.id.rotateButton).setOnClickListener(createOnClickRotateButton());
  findViewById(R.id.flipButton).setOnClickListener(createOnClickFlipButton());
  mVignetteButton.setOnClickListener(createOnClickVignetteButton());
  mCurvesButtonRGB.setOnClickListener(createOnClickCurvesRGBButton());
  mSharpenButton.setOnClickListener(createOnClickSharpenButton());
  mContrastButton.setOnClickListener(createOnClickContrastButton());
  mSaturationButton.setOnClickListener(createOnClickSaturationButton());
  mTintButton.setOnClickListener(createOnClickTintButton());
  mVibranceButton.setOnClickListener(createOnClickVibranceButton());
  mExposureButton.setOnClickListener(createOnClickExposureButton());
  mShadowRecoveryButton.setOnClickListener(createOnClickShadowRecoveryButton());
  mFxButton.setOnClickListener(createOnClickFxButton());
  mBorderButton.setOnClickListener(createOnClickBorderButton());
  mGeometryButton.setOnClickListener(createOnClickGeometryButton());
  mColorsButton.setOnClickListener(createOnClickColorsButton());
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getListAdapter());
  operationsList.setOnItemClickListener(this);
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getListAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.filtershow_activity);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
  actionBar.setCustomView(R.layout.filtershow_actionbar);
  actionBar.getCustomView().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      saveImage();
    }
  }
);
  mImageLoader=new ImageLoader(getApplicationContext());
  LinearLayout listFilters=(LinearLayout)findViewById(R.id.listFilters);
  LinearLayout listBorders=(LinearLayout)findViewById(R.id.listBorders);
  mImageShow=(ImageShow)findViewById(R.id.imageShow);
  mImageCurves=(ImageCurves)findViewById(R.id.imageCurves);
  mImageBorders=(ImageBorder)findViewById(R.id.imageBorder);
  mImageStraighten=(ImageStraighten)findViewById(R.id.imageStraighten);
  mImageViews.add(mImageShow);
  mImageViews.add(mImageCurves);
  mImageViews.add(mImageBorders);
  mImageViews.add(mImageStraighten);
  mListFx=findViewById(R.id.fxList);
  mListBorders=findViewById(R.id.bordersList);
  mListGeometry=findViewById(R.id.gemoetryList);
  mListColors=findViewById(R.id.colorsFxList);
  mListViews.add(mListFx);
  mListViews.add(mListBorders);
  mListViews.add(mListGeometry);
  mListViews.add(mListColors);
  mFxButton=(ImageButton)findViewById(R.id.fxButton);
  mBorderButton=(ImageButton)findViewById(R.id.borderButton);
  mGeometryButton=(ImageButton)findViewById(R.id.geometryButton);
  mColorsButton=(ImageButton)findViewById(R.id.colorsButton);
  mBottomPanelButtons.add(mFxButton);
  mBottomPanelButtons.add(mBorderButton);
  mBottomPanelButtons.add(mGeometryButton);
  mBottomPanelButtons.add(mColorsButton);
  mFxButton.setSelected(true);
  mVignetteButton=(ImageButton)findViewById(R.id.vignetteButton);
  mCurvesButtonRGB=(ImageButton)findViewById(R.id.curvesButtonRGB);
  mSharpenButton=(ImageButton)findViewById(R.id.sharpenButton);
  mVibranceButton=(ImageButton)findViewById(R.id.vibranceButton);
  mContrastButton=(ImageButton)findViewById(R.id.contrastButton);
  mSaturationButton=(ImageButton)findViewById(R.id.saturationButton);
  mTintButton=(ImageButton)findViewById(R.id.tintButton);
  mExposureButton=(ImageButton)findViewById(R.id.exposureButton);
  mShadowRecoveryButton=(ImageButton)findViewById(R.id.shadowRecoveryButton);
  mColorsPanelButtons.add(mVignetteButton);
  mColorsPanelButtons.add(mCurvesButtonRGB);
  mColorsPanelButtons.add(mSharpenButton);
  mColorsPanelButtons.add(mContrastButton);
  mColorsPanelButtons.add(mSaturationButton);
  mColorsPanelButtons.add(mTintButton);
  mColorsPanelButtons.add(mVibranceButton);
  mColorsPanelButtons.add(mExposureButton);
  mColorsPanelButtons.add(mShadowRecoveryButton);
  findViewById(R.id.showOriginalButton).setOnTouchListener(createOnTouchShowOriginalButton());
  findViewById(R.id.straightenButton).setOnClickListener(createOnClickStraightenButton());
  findViewById(R.id.cropButton).setOnClickListener(createOnClickCropButton());
  findViewById(R.id.rotateButton).setOnClickListener(createOnClickRotateButton());
  findViewById(R.id.flipButton).setOnClickListener(createOnClickFlipButton());
  mVignetteButton.setOnClickListener(createOnClickVignetteButton());
  mCurvesButtonRGB.setOnClickListener(createOnClickCurvesRGBButton());
  mSharpenButton.setOnClickListener(createOnClickSharpenButton());
  mContrastButton.setOnClickListener(createOnClickContrastButton());
  mSaturationButton.setOnClickListener(createOnClickSaturationButton());
  mTintButton.setOnClickListener(createOnClickTintButton());
  mVibranceButton.setOnClickListener(createOnClickVibranceButton());
  mExposureButton.setOnClickListener(createOnClickExposureButton());
  mShadowRecoveryButton.setOnClickListener(createOnClickShadowRecoveryButton());
  mFxButton.setOnClickListener(createOnClickFxButton());
  mBorderButton.setOnClickListener(createOnClickBorderButton());
  mGeometryButton.setOnClickListener(createOnClickGeometryButton());
  mColorsButton.setOnClickListener(createOnClickColorsButton());
  findViewById(R.id.resetOperationsButton).setOnClickListener(createOnClickResetOperationsButton());
  ListView operationsList=(ListView)findViewById(R.id.operationsList);
  operationsList.setAdapter(mImageShow.getHistoryAdapter());
  operationsList.setOnItemClickListener(this);
  ListView imageStateList=(ListView)findViewById(R.id.imageStateList);
  imageStateList.setAdapter(mImageShow.getImageStateAdapter());
  mImageLoader.setAdapter((HistoryAdapter)mImageShow.getHistoryAdapter());
  fillListImages(listFilters);
  fillListBorders(listBorders);
  mImageShow.setImageLoader(mImageLoader);
  mImageCurves.setImageLoader(mImageLoader);
  mImageCurves.setMaster(mImageShow);
  mImageBorders.setImageLoader(mImageLoader);
  mImageBorders.setMaster(mImageShow);
  mImageStraighten.setImageLoader(mImageLoader);
  mImageStraighten.setMaster(mImageShow);
  Intent intent=getIntent();
  String data=intent.getDataString();
  if (data != null) {
    Uri uri=Uri.parse(data);
    mImageLoader.loadBitmap(uri);
  }
 else {
    pickImage();
  }
}"
38602,"private OnClickListener createOnClickContrastButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterContrast contrast=new ImageFilterContrast();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mContrastButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickContrastButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterContrast contrast=new ImageFilterContrast();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mContrastButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38603,"private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[8];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_film3);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd=getResources().getDrawable(R.drawable.filtershow_border_scratch3);
  borders[p++]=new ImageFilterBorder(npd);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_black);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd6=getResources().getDrawable(R.drawable.filtershow_border_rounded_black);
  borders[p++]=new ImageFilterBorder(npd6);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_white);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_rounded_white);
  borders[p++]=new ImageFilterBorder(npd5);
  for (int i=0; i < p; i++) {
    ImageSmallFilter filter=new ImageSmallFilter(getBaseContext());
    filter.setImageFilter(borders[i]);
    filter.setController(this);
    filter.setImageLoader(mImageLoader);
    listBorders.addView(filter);
  }
}","private void fillListBorders(LinearLayout listBorders){
  int p=0;
  ImageFilter[] borders=new ImageFilter[8];
  borders[p++]=new ImageFilterBorder(null);
  Drawable npd3=getResources().getDrawable(R.drawable.filtershow_border_film3);
  borders[p++]=new ImageFilterBorder(npd3);
  Drawable npd=getResources().getDrawable(R.drawable.filtershow_border_scratch3);
  borders[p++]=new ImageFilterBorder(npd);
  Drawable npd2=getResources().getDrawable(R.drawable.filtershow_border_black);
  borders[p++]=new ImageFilterBorder(npd2);
  Drawable npd6=getResources().getDrawable(R.drawable.filtershow_border_rounded_black);
  borders[p++]=new ImageFilterBorder(npd6);
  Drawable npd4=getResources().getDrawable(R.drawable.filtershow_border_white);
  borders[p++]=new ImageFilterBorder(npd4);
  Drawable npd5=getResources().getDrawable(R.drawable.filtershow_border_rounded_white);
  borders[p++]=new ImageFilterBorder(npd5);
  for (int i=0; i < p; i++) {
    ImageSmallFilter filter=new ImageSmallFilter(getBaseContext());
    filter.setImageFilter(borders[i]);
    filter.setController(this);
    filter.setImageLoader(mImageLoader);
    filter.setShowTitle(false);
    listBorders.addView(filter);
  }
}"
38604,"private OnClickListener createOnClickExposureButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterBrightness bright=new ImageFilterBrightness();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(bright);
        copy.setHistoryName(bright.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mExposureButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickExposureButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterBrightness bright=new ImageFilterBrightness();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(bright);
        copy.setHistoryName(bright.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mExposureButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38605,"private OnClickListener createOnClickVignetteButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterVignette vignette=new ImageFilterVignette();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(vignette);
        copy.setHistoryName(vignette.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVignetteButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickVignetteButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterVignette vignette=new ImageFilterVignette();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(vignette);
        copy.setHistoryName(vignette.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mVignetteButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38606,"private OnClickListener createOnClickTintButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mTintButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickTintButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mTintButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38607,"public void useImageFilter(ImageFilter imageFilter){
  if (imageFilter == null) {
    return;
  }
  ImagePreset oldPreset=mImageShow.getImagePreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  if (imageFilter.name().equalsIgnoreCase(""String_Node_Str"")) {
    copy.remove(""String_Node_Str"");
    copy.setHistoryName(""String_Node_Str"");
  }
  copy.add(imageFilter);
  invalidateViews();
}","public void useImageFilter(ImageFilter imageFilter){
  if (imageFilter == null) {
    return;
  }
  ImagePreset oldPreset=mImageShow.getImagePreset();
  ImagePreset copy=new ImagePreset(oldPreset);
  if (imageFilter.getName().equalsIgnoreCase(""String_Node_Str"")) {
    copy.remove(""String_Node_Str"");
    copy.setHistoryName(""String_Node_Str"");
  }
  copy.add(imageFilter);
  mImageShow.setImagePreset(copy);
  invalidateViews();
}"
38608,"private void toggleHistoryPanel(){
  final View view=findViewById(R.id.mainPanel);
  final View viewList=findViewById(R.id.historyPanel);
  View rootView=viewList.getRootView();
  final AbsoluteLayout.LayoutParams lp=(AbsoluteLayout.LayoutParams)view.getLayoutParams();
  final AbsoluteLayout.LayoutParams lph=(AbsoluteLayout.LayoutParams)viewList.getLayoutParams();
  final int positionHistoryPanel=(int)(rootView.getWidth() - viewList.getWidth());
  if (!mShowingHistoryPanel) {
    mShowingHistoryPanel=true;
    view.animate().setDuration(200).x(-viewList.getWidth()).withLayer().withEndAction(new Runnable(){
      public void run(){
        view.setLayoutParams(lp);
        lph.x=positionHistoryPanel;
        viewList.setLayoutParams(lph);
        viewList.setAlpha(0);
        viewList.setVisibility(View.VISIBLE);
        viewList.animate().setDuration(100).alpha(1.0f).start();
      }
    }
).start();
  }
 else {
    mShowingHistoryPanel=false;
    viewList.setVisibility(View.INVISIBLE);
    view.animate().setDuration(200).x(0).withLayer().withEndAction(new Runnable(){
      public void run(){
        lp.x=0;
        view.setLayoutParams(lp);
      }
    }
).start();
  }
  invalidateOptionsMenu();
}","private void toggleHistoryPanel(){
  final View view=findViewById(R.id.mainPanel);
  final View viewList=findViewById(R.id.historyPanel);
  if (mShowingImageStatePanel) {
    findViewById(R.id.imageStatePanel).setVisibility(View.INVISIBLE);
    mShowingImageStatePanel=false;
  }
  if (!mShowingHistoryPanel) {
    mShowingHistoryPanel=true;
    view.animate().setDuration(200).x(-viewList.getWidth()).withLayer().withEndAction(new Runnable(){
      public void run(){
        viewList.setAlpha(0);
        viewList.setVisibility(View.VISIBLE);
        viewList.animate().setDuration(100).alpha(1.0f).start();
      }
    }
).start();
  }
 else {
    mShowingHistoryPanel=false;
    viewList.setVisibility(View.INVISIBLE);
    view.animate().setDuration(200).x(0).withLayer().start();
  }
  invalidateOptionsMenu();
}"
38609,"private OnClickListener createOnClickShadowRecoveryButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.name());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mShadowRecoveryButton.setSelected(true);
      invalidateViews();
    }
  }
;
}","private OnClickListener createOnClickShadowRecoveryButton(){
  return new View.OnClickListener(){
    @Override public void onClick(    View v){
      hideImageViews();
      mImageShow.setVisibility(View.VISIBLE);
      mImageShow.setShowControls(true);
      ImagePreset preset=mImageShow.getImagePreset();
      ImageFilter filter=preset.getFilter(""String_Node_Str"");
      if (filter == null) {
        ImageFilterHue contrast=new ImageFilterHue();
        ImagePreset copy=new ImagePreset(preset);
        copy.add(contrast);
        copy.setHistoryName(contrast.getName());
        copy.setIsFx(false);
        filter=copy.getFilter(""String_Node_Str"");
        mImageShow.setImagePreset(copy);
      }
      mImageShow.setCurrentFilter(filter);
      unselectPanelButtons(mColorsPanelButtons);
      mShadowRecoveryButton.setSelected(true);
      invalidateViews();
    }
  }
;
}"
38610,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.filtershow_activity_menu,menu);
  MenuItem item=menu.findItem(R.id.operationsButton);
  if (mShowingHistoryPanel) {
    item.setTitle(R.string.hide_history_panel);
  }
 else {
    item.setTitle(R.string.show_history_panel);
  }
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.filtershow_activity_menu,menu);
  MenuItem showHistory=menu.findItem(R.id.operationsButton);
  if (mShowingHistoryPanel) {
    showHistory.setTitle(R.string.hide_history_panel);
  }
 else {
    showHistory.setTitle(R.string.show_history_panel);
  }
  MenuItem showState=menu.findItem(R.id.showImageStateButton);
  if (mShowingImageStatePanel) {
    showState.setTitle(R.string.hide_imagestate_panel);
  }
 else {
    showState.setTitle(R.string.show_imagestate_panel);
  }
  return true;
}"
38611,"@Override protected boolean onItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_cancel:
  mActivity.getStateManager().finishState(this);
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_group_by:
{
mActivity.getGalleryActionBar().showClusterDialog(this);
return true;
}
case R.id.action_slideshow:
{
Bundle data=new Bundle();
data.putString(SlideshowPage.KEY_SET_PATH,mMediaSetPath.toString());
data.putBoolean(SlideshowPage.KEY_REPEAT,true);
mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
return true;
}
case R.id.action_filmstrip:
{
int targetPhoto=mSlotView.getVisibleStart();
prepareAnimationBackToFilmstrip(targetPhoto);
if (mLaunchedFromPhotoPage) {
mActivity.getTransitionStore().put(PhotoPage.KEY_ALBUMPAGE_TRANSITION,PhotoPage.MSG_ALBUMPAGE_RESUMED);
onBackPressed();
}
 else {
pickPhoto(targetPhoto,true);
}
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_camera:
{
GalleryUtils.startCameraActivity(mActivity);
return true;
}
default :
return false;
}
}","@Override protected boolean onItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_cancel:
  mActivity.getStateManager().finishState(this);
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_group_by:
{
mActivity.getGalleryActionBar().showClusterDialog(this);
return true;
}
case R.id.action_slideshow:
{
Bundle data=new Bundle();
data.putString(SlideshowPage.KEY_SET_PATH,mMediaSetPath.toString());
data.putBoolean(SlideshowPage.KEY_REPEAT,true);
mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
return true;
}
case R.id.action_filmstrip:
{
if (mAlbumDataAdapter.size() < 1) return true;
int targetPhoto=mSlotView.getVisibleStart();
prepareAnimationBackToFilmstrip(targetPhoto);
if (mLaunchedFromPhotoPage) {
mActivity.getTransitionStore().put(PhotoPage.KEY_ALBUMPAGE_TRANSITION,PhotoPage.MSG_ALBUMPAGE_RESUMED);
onBackPressed();
}
 else {
pickPhoto(targetPhoto,true);
}
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_camera:
{
GalleryUtils.startCameraActivity(mActivity);
return true;
}
default :
return false;
}
}"
38612,"@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
setGridButtonVisibility(!mStartedFromAlbumPage);
if (mSetPathString != null) {
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
mShowBars=false;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
mMediaSet.reload();
if (mMediaSet.getMediaItemCount() > 0) {
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
mCurrentIndex=index;
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
setupEditButton();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
setGridButtonVisibility(!mStartedFromAlbumPage);
if (mSetPathString != null) {
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
mShowBars=false;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
if (mMediaSet.getMediaItemCount() > 0) {
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
mCurrentIndex=index;
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
setupEditButton();
}"
38613,"public FilterDeleteSet(Path path,MediaSet baseSet){
  super(path,INVALID_DATA_VERSION);
  mBaseSet=baseSet;
  mBaseSet.addContentListener(this);
}","public FilterDeleteSet(Path path,MediaSet baseSet){
  super(path,INVALID_DATA_VERSION);
  mBaseSet=baseSet;
  mBaseSet.addContentListener(this);
  mMediaItemCount=mBaseSet.getMediaItemCount() - mCurrent.size();
}"
38614,"@Override protected boolean onItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_cancel:
  mActivity.getStateManager().finishState(this);
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_group_by:
{
mActivity.getGalleryActionBar().showClusterDialog(this);
return true;
}
case R.id.action_slideshow:
{
Bundle data=new Bundle();
data.putString(SlideshowPage.KEY_SET_PATH,mMediaSetPath.toString());
data.putBoolean(SlideshowPage.KEY_REPEAT,true);
mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
return true;
}
case R.id.action_filmstrip:
{
int targetPhoto=mSlotView.getVisibleStart();
prepareAnimationBackToFilmstrip(targetPhoto);
if (mLaunchedFromPhotoPage) {
mActivity.getTransitionStore().put(PhotoPage.KEY_ALBUMPAGE_TRANSITION,PhotoPage.MSG_ALBUMPAGE_RESUMED);
onBackPressed();
}
 else {
pickPhoto(targetPhoto,true);
}
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_camera:
{
GalleryUtils.startCameraActivity(mActivity);
return true;
}
default :
return false;
}
}","@Override protected boolean onItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_cancel:
  mActivity.getStateManager().finishState(this);
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_group_by:
{
mActivity.getGalleryActionBar().showClusterDialog(this);
return true;
}
case R.id.action_slideshow:
{
Bundle data=new Bundle();
data.putString(SlideshowPage.KEY_SET_PATH,mMediaSetPath.toString());
data.putBoolean(SlideshowPage.KEY_REPEAT,true);
mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
return true;
}
case R.id.action_filmstrip:
{
if (mAlbumDataAdapter.size() < 1) return true;
int targetPhoto=mSlotView.getVisibleStart();
prepareAnimationBackToFilmstrip(targetPhoto);
if (mLaunchedFromPhotoPage) {
mActivity.getTransitionStore().put(PhotoPage.KEY_ALBUMPAGE_TRANSITION,PhotoPage.MSG_ALBUMPAGE_RESUMED);
onBackPressed();
}
 else {
pickPhoto(targetPhoto,true);
}
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_camera:
{
GalleryUtils.startCameraActivity(mActivity);
return true;
}
default :
return false;
}
}"
38615,"@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
setGridButtonVisibility(!mStartedFromAlbumPage);
if (mSetPathString != null) {
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
mShowBars=false;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
mMediaSet.reload();
if (mMediaSet.getMediaItemCount() > 0) {
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
mCurrentIndex=index;
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
setupEditButton();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
setGridButtonVisibility(!mStartedFromAlbumPage);
if (mSetPathString != null) {
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
mShowBars=false;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
if (mMediaSet.getMediaItemCount() > 0) {
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
mCurrentIndex=index;
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
}
mPhotoView.setFilmMode(mStartInFilmstrip && mMediaSet.getMediaItemCount() > 1);
setupEditButton();
}"
38616,"public FilterDeleteSet(Path path,MediaSet baseSet){
  super(path,INVALID_DATA_VERSION);
  mBaseSet=baseSet;
  mBaseSet.addContentListener(this);
}","public FilterDeleteSet(Path path,MediaSet baseSet){
  super(path,INVALID_DATA_VERSION);
  mBaseSet=baseSet;
  mBaseSet.addContentListener(this);
  mMediaItemCount=mBaseSet.getMediaItemCount() - mCurrent.size();
}"
38617,"private void prepareAnimationBackToFilmstrip(int slotIndex){
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}","private void prepareAnimationBackToFilmstrip(int slotIndex){
  if (!mAlbumDataAdapter.isActive(slotIndex))   return;
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}"
38618,"private void prepareAnimationBackToFilmstrip(int slotIndex){
  if (!mAlbumDataAdapter.isActive(slotIndex))   return;
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}","private void prepareAnimationBackToFilmstrip(int slotIndex){
  if (mAlbumDataAdapter == null || !mAlbumDataAdapter.isActive(slotIndex))   return;
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}"
38619,"@Override protected void onResume(){
  super.onResume();
  transitionFromAlbumPageIfNeeded();
  mActivity.getGLRoot().freeze();
  mIsActive=true;
  setContentPane(mRootPane);
  mModel.resume();
  mPhotoView.resume();
  mActionBar.setDisplayOptions(((mSecureAlbum == null) && (mSetPathString != null)),true);
  mActionBar.addOnMenuVisibilityListener(mMenuVisibilityListener);
  if (mAppBridge != null && !mHasActivityResult) {
    mPhotoView.resetToFirstPicture();
  }
  mHasActivityResult=false;
  mHandler.sendEmptyMessageDelayed(MSG_UNFREEZE_GLROOT,UNFREEZE_GLROOT_TIMEOUT);
}","@Override protected void onResume(){
  super.onResume();
  if (mModel == null) {
    mActivity.getStateManager().finishState(this);
    return;
  }
  transitionFromAlbumPageIfNeeded();
  mActivity.getGLRoot().freeze();
  mIsActive=true;
  setContentPane(mRootPane);
  mModel.resume();
  mPhotoView.resume();
  mActionBar.setDisplayOptions(((mSecureAlbum == null) && (mSetPathString != null)),true);
  mActionBar.addOnMenuVisibilityListener(mMenuVisibilityListener);
  if (mAppBridge != null && !mHasActivityResult) {
    mPhotoView.resetToFirstPicture();
  }
  mHasActivityResult=false;
  mHandler.sendEmptyMessageDelayed(MSG_UNFREEZE_GLROOT,UNFREEZE_GLROOT_TIMEOUT);
}"
38620,"@Override public void onPause(){
  super.onPause();
  mIsActive=false;
  mActivity.getGLRoot().unfreeze();
  mHandler.removeMessages(MSG_UNFREEZE_GLROOT);
  if (isFinishing())   preparePhotoFallbackView();
  DetailsHelper.pause();
  mPhotoView.pause();
  mModel.pause();
  mHandler.removeMessages(MSG_HIDE_BARS);
  mActionBar.removeOnMenuVisibilityListener(mMenuVisibilityListener);
  onCommitDeleteImage();
  mMenuExecutor.pause();
  if (mMediaSet != null)   mMediaSet.clearDeletion();
}","@Override public void onPause(){
  super.onPause();
  mIsActive=false;
  mActivity.getGLRoot().unfreeze();
  mHandler.removeMessages(MSG_UNFREEZE_GLROOT);
  DetailsHelper.pause();
  if (mModel != null) {
    if (isFinishing())     preparePhotoFallbackView();
    mModel.pause();
  }
  mPhotoView.pause();
  mHandler.removeMessages(MSG_HIDE_BARS);
  mActionBar.removeOnMenuVisibilityListener(mMenuVisibilityListener);
  onCommitDeleteImage();
  mMenuExecutor.pause();
  if (mMediaSet != null)   mMediaSet.clearDeletion();
}"
38621,"@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
  mOriginalSetPathString=mSetPathString;
  mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
  String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
  Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
  mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
  mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
  mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
  setGridButtonVisibility(!mStartedFromAlbumPage);
  if (mSetPathString != null) {
    mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
    if (mAppBridge != null) {
      mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
      mShowBars=false;
      mAppBridge.setServer(this);
      mOrientationManager.lockOrientation();
      int id=SnailSource.newId();
      Path screenNailSetPath=SnailSource.getSetPath(id);
      Path screenNailItemPath=SnailSource.getItemPath(id);
      mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
      mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
      mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
      if (SecureSource.isSecurePath(mSetPathString)) {
        mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
        mFlags|=FLAG_SHOW_WHEN_LOCKED;
      }
      mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
      itemPath=screenNailItemPath;
    }
    MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
    mSelectionManager.setSourceMediaSet(originalSet);
    mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
    mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
    mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
    if (mMediaSet == null) {
      Log.w(TAG,""String_Node_Str"" + mSetPathString);
    }
    if (itemPath == null) {
      itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
    }
    PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
    mModel=pda;
    mPhotoView.setModel(mModel);
    pda.setDataListener(new PhotoDataAdapter.DataListener(){
      @Override public void onPhotoChanged(      int index,      Path item){
        mCurrentIndex=index;
        if (item != null) {
          MediaItem photo=mModel.getMediaItem(0);
          if (photo != null)           updateCurrentPhoto(photo);
        }
        updateBars();
      }
      @Override public void onLoadingFinished(){
        if (!mModel.isEmpty()) {
          MediaItem photo=mModel.getMediaItem(0);
          if (photo != null)           updateCurrentPhoto(photo);
        }
 else         if (mIsActive) {
          if (mMediaSet.getNumberOfDeletions() == 0) {
            mActivity.getStateManager().finishState(PhotoPage.this);
          }
        }
      }
      @Override public void onLoadingStarted(){
      }
    }
);
  }
 else {
    MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
    mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
    mPhotoView.setModel(mModel);
    updateCurrentPhoto(mediaItem);
  }
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mPhotoView.setFilmMode(mStartInFilmstrip);
setupEditButton();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  super.onCreate(data,restoreState);
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mActivity.getGLRoot().setOrientationSource(mOrientationManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_REFRESH_GRID_BUTTON:
{
        setGridButtonVisibility(mPhotoView.getFilmMode());
        break;
      }
case MSG_REFRESH_EDIT_BUTTON:
{
      refreshEditButton();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
case MSG_WANT_BARS:
{
wantBars();
break;
}
case MSG_UNFREEZE_GLROOT:
{
mActivity.getGLRoot().unfreeze();
break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
mOriginalSetPathString=mSetPathString;
mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
String itemPathString=data.getString(KEY_MEDIA_ITEM_PATH);
Path itemPath=itemPathString != null ? Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH)) : null;
mTreatBackAsUp=data.getBoolean(KEY_TREAT_BACK_AS_UP,false);
mStartInFilmstrip=data.getBoolean(KEY_START_IN_FILMSTRIP,false);
mStartedFromAlbumPage=data.getInt(KEY_ALBUMPAGE_TRANSITION,MSG_ALBUMPAGE_NONE) == MSG_ALBUMPAGE_STARTED;
setGridButtonVisibility(!mStartedFromAlbumPage);
if (mSetPathString != null) {
mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
if (mAppBridge != null) {
mFlags|=FLAG_HIDE_ACTION_BAR | FLAG_HIDE_STATUS_BAR;
mShowBars=false;
mAppBridge.setServer(this);
mOrientationManager.lockOrientation();
int id=SnailSource.newId();
Path screenNailSetPath=SnailSource.getSetPath(id);
Path screenNailItemPath=SnailSource.getItemPath(id);
mScreenNailSet=(SnailAlbum)mActivity.getDataManager().getMediaObject(screenNailSetPath);
mScreenNailItem=(SnailItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
mScreenNailItem.setScreenNail(mAppBridge.attachScreenNail());
if (SecureSource.isSecurePath(mSetPathString)) {
mSecureAlbum=(SecureAlbum)mActivity.getDataManager().getMediaSet(mSetPathString);
mFlags|=FLAG_SHOW_WHEN_LOCKED;
}
mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
itemPath=screenNailItemPath;
}
MediaSet originalSet=mActivity.getDataManager().getMediaSet(mSetPathString);
mSelectionManager.setSourceMediaSet(originalSet);
mSetPathString=""String_Node_Str"" + mSetPathString + ""String_Node_Str"";
mMediaSet=(FilterDeleteSet)mActivity.getDataManager().getMediaSet(mSetPathString);
mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
if (mMediaSet == null) {
Log.w(TAG,""String_Node_Str"" + mSetPathString);
}
if (itemPath == null) {
mMediaSet.reload();
if (mMediaSet.getMediaItemCount() > 0) {
itemPath=mMediaSet.getMediaItem(mCurrentIndex,1).get(0).getPath();
}
 else {
return;
}
}
PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0,mAppBridge == null ? false : mAppBridge.isPanorama(),mAppBridge == null ? false : mAppBridge.isStaticCamera());
mModel=pda;
mPhotoView.setModel(mModel);
pda.setDataListener(new PhotoDataAdapter.DataListener(){
@Override public void onPhotoChanged(int index,Path item){
mCurrentIndex=index;
if (item != null) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
updateBars();
}
@Override public void onLoadingFinished(){
if (!mModel.isEmpty()) {
MediaItem photo=mModel.getMediaItem(0);
if (photo != null) updateCurrentPhoto(photo);
}
 else if (mIsActive) {
if (mMediaSet.getNumberOfDeletions() == 0) {
mActivity.getStateManager().finishState(PhotoPage.this);
}
}
}
@Override public void onLoadingStarted(){
}
}
);
}
 else {
MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
mPhotoView.setModel(mModel);
updateCurrentPhoto(mediaItem);
}
mPhotoView.setFilmMode(mStartInFilmstrip);
setupEditButton();
}"
38622,"@Override protected boolean onItemSelected(MenuItem item){
  refreshHidingMessage();
  MediaItem current=mModel.getMediaItem(0);
  if (current == null) {
    return true;
  }
  int currentIndex=mModel.getCurrentIndex();
  Path path=current.getPath();
  DataManager manager=mActivity.getDataManager();
  int action=item.getItemId();
  String confirmMsg=null;
switch (action) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_grid:
{
    if (mStartedFromAlbumPage) {
      onUpPressed();
    }
 else {
      preparePhotoFallbackView();
      Bundle data=new Bundle(getData());
      data.putString(AlbumPage.KEY_MEDIA_PATH,mOriginalSetPathString);
      data.putString(AlbumPage.KEY_PARENT_MEDIA_PATH,mActivity.getDataManager().getTopSetPath(DataManager.INCLUDE_ALL));
      mActivity.getTransitionStore().put(KEY_RETURN_INDEX_HINT,mCurrentIndex);
      mActivity.getStateManager().startState(AlbumPage.class,data);
    }
    return true;
  }
case R.id.action_slideshow:
{
  Bundle data=new Bundle();
  data.putString(SlideshowPage.KEY_SET_PATH,mMediaSet.getPath().toString());
  data.putString(SlideshowPage.KEY_ITEM_PATH,path.toString());
  data.putInt(SlideshowPage.KEY_PHOTO_INDEX,currentIndex);
  data.putBoolean(SlideshowPage.KEY_REPEAT,true);
  mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
  return true;
}
case R.id.action_crop:
{
Activity activity=mActivity;
Intent intent=new Intent(CropImage.CROP_ACTION);
intent.setClass(activity,CropImage.class);
intent.setData(manager.getContentUri(path));
activity.startActivityForResult(intent,PicasaSource.isPicasaImage(current) ? REQUEST_CROP_PICASA : REQUEST_CROP);
return true;
}
case R.id.action_trim:
{
Intent intent=new Intent(mActivity,TrimVideo.class);
intent.setData(manager.getContentUri(path));
mActivity.startActivityForResult(intent,REQUEST_TRIM);
return true;
}
case R.id.action_edit:
{
launchPhotoEditor();
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_delete:
confirmMsg=mActivity.getResources().getQuantityString(R.plurals.delete_selection,1);
case R.id.action_setas:
case R.id.action_rotate_ccw:
case R.id.action_rotate_cw:
case R.id.action_show_on_map:
mSelectionManager.deSelectAll();
mSelectionManager.toggle(path);
mMenuExecutor.onMenuClicked(item,confirmMsg,mConfirmDialogListener);
return true;
case R.id.action_import:
mSelectionManager.deSelectAll();
mSelectionManager.toggle(path);
mMenuExecutor.onMenuClicked(item,confirmMsg,new ImportCompleteListener(mActivity));
return true;
case R.id.action_share:
Activity activity=mActivity;
Intent intent=createShareIntent(mCurrentPhoto.getPath());
activity.startActivity(Intent.createChooser(intent,activity.getString(R.string.share)));
return true;
default :
return false;
}
}","@Override protected boolean onItemSelected(MenuItem item){
  if (mModel == null)   return true;
  refreshHidingMessage();
  MediaItem current=mModel.getMediaItem(0);
  if (current == null) {
    return true;
  }
  int currentIndex=mModel.getCurrentIndex();
  Path path=current.getPath();
  DataManager manager=mActivity.getDataManager();
  int action=item.getItemId();
  String confirmMsg=null;
switch (action) {
case android.R.id.home:
{
      onUpPressed();
      return true;
    }
case R.id.action_grid:
{
    if (mStartedFromAlbumPage) {
      onUpPressed();
    }
 else {
      preparePhotoFallbackView();
      Bundle data=new Bundle(getData());
      data.putString(AlbumPage.KEY_MEDIA_PATH,mOriginalSetPathString);
      data.putString(AlbumPage.KEY_PARENT_MEDIA_PATH,mActivity.getDataManager().getTopSetPath(DataManager.INCLUDE_ALL));
      mActivity.getTransitionStore().put(KEY_RETURN_INDEX_HINT,mCurrentIndex);
      mActivity.getStateManager().startState(AlbumPage.class,data);
    }
    return true;
  }
case R.id.action_slideshow:
{
  Bundle data=new Bundle();
  data.putString(SlideshowPage.KEY_SET_PATH,mMediaSet.getPath().toString());
  data.putString(SlideshowPage.KEY_ITEM_PATH,path.toString());
  data.putInt(SlideshowPage.KEY_PHOTO_INDEX,currentIndex);
  data.putBoolean(SlideshowPage.KEY_REPEAT,true);
  mActivity.getStateManager().startStateForResult(SlideshowPage.class,REQUEST_SLIDESHOW,data);
  return true;
}
case R.id.action_crop:
{
Activity activity=mActivity;
Intent intent=new Intent(CropImage.CROP_ACTION);
intent.setClass(activity,CropImage.class);
intent.setData(manager.getContentUri(path));
activity.startActivityForResult(intent,PicasaSource.isPicasaImage(current) ? REQUEST_CROP_PICASA : REQUEST_CROP);
return true;
}
case R.id.action_trim:
{
Intent intent=new Intent(mActivity,TrimVideo.class);
intent.setData(manager.getContentUri(path));
mActivity.startActivityForResult(intent,REQUEST_TRIM);
return true;
}
case R.id.action_edit:
{
launchPhotoEditor();
return true;
}
case R.id.action_details:
{
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
return true;
}
case R.id.action_delete:
confirmMsg=mActivity.getResources().getQuantityString(R.plurals.delete_selection,1);
case R.id.action_setas:
case R.id.action_rotate_ccw:
case R.id.action_rotate_cw:
case R.id.action_show_on_map:
mSelectionManager.deSelectAll();
mSelectionManager.toggle(path);
mMenuExecutor.onMenuClicked(item,confirmMsg,mConfirmDialogListener);
return true;
case R.id.action_import:
mSelectionManager.deSelectAll();
mSelectionManager.toggle(path);
mMenuExecutor.onMenuClicked(item,confirmMsg,new ImportCompleteListener(mActivity));
return true;
case R.id.action_share:
Activity activity=mActivity;
Intent intent=createShareIntent(mCurrentPhoto.getPath());
activity.startActivity(Intent.createChooser(intent,activity.getString(R.string.share)));
return true;
default :
return false;
}
}"
38623,"private void prepareAnimationBackToFilmstrip(int slotIndex){
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}","private void prepareAnimationBackToFilmstrip(int slotIndex){
  if (!mAlbumDataAdapter.isActive(slotIndex))   return;
  prepareFadeOutTexture();
  TransitionStore transitions=mActivity.getTransitionStore();
  transitions.put(PhotoPage.KEY_INDEX_HINT,slotIndex);
  transitions.put(PhotoPage.KEY_MEDIA_ITEM_PATH,mAlbumDataAdapter.get(slotIndex).getPath());
  transitions.put(PhotoPage.KEY_OPEN_ANIMATION_RECT,getSlotRect(slotIndex));
}"
38624,"public <T>T get(Object key,T valueIfNull){
  T value=get(key);
  return value == null ? valueIfNull : value;
}","@SuppressWarnings(""String_Node_Str"") public <T>T get(Object key,T valueIfNull){
  T value=(T)mStorage.get(key);
  return value == null ? valueIfNull : value;
}"
38625,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_ACTION_BAR);
  requestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.movie_view);
  View rootView=findViewById(R.id.movie_view_root);
  setSystemUiVisibility(rootView);
  Intent intent=getIntent();
  initializeActionBar(intent);
  mFinishOnCompletion=intent.getBooleanExtra(MediaStore.EXTRA_FINISH_ON_COMPLETION,true);
  mTreatUpAsBack=intent.getBooleanExtra(KEY_TREAT_UP_AS_BACK,false);
  mPlayer=new MoviePlayer(rootView,this,intent.getData(),savedInstanceState,!mFinishOnCompletion){
    @Override public void onCompletion(){
      if (mFinishOnCompletion) {
        finish();
      }
    }
  }
;
  if (intent.hasExtra(MediaStore.EXTRA_SCREEN_ORIENTATION)) {
    int orientation=intent.getIntExtra(MediaStore.EXTRA_SCREEN_ORIENTATION,ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    if (orientation != getRequestedOrientation()) {
      setRequestedOrientation(orientation);
    }
  }
  Window win=getWindow();
  WindowManager.LayoutParams winParams=win.getAttributes();
  winParams.buttonBrightness=WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_OFF;
  winParams.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN;
  win.setAttributes(winParams);
  win.setBackgroundDrawable(null);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getSherlock().requestFeature(Window.FEATURE_ACTION_BAR);
  getSherlock().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.movie_view);
  View rootView=findViewById(R.id.movie_view_root);
  setSystemUiVisibility(rootView);
  Intent intent=getIntent();
  initializeActionBar(intent);
  mFinishOnCompletion=intent.getBooleanExtra(MediaStore.EXTRA_FINISH_ON_COMPLETION,true);
  mTreatUpAsBack=intent.getBooleanExtra(KEY_TREAT_UP_AS_BACK,false);
  mPlayer=new MoviePlayer(rootView,this,intent.getData(),savedInstanceState,!mFinishOnCompletion){
    @Override public void onCompletion(){
      if (mFinishOnCompletion) {
        finish();
      }
    }
  }
;
  if (intent.hasExtra(MediaStore.EXTRA_SCREEN_ORIENTATION)) {
    int orientation=intent.getIntExtra(MediaStore.EXTRA_SCREEN_ORIENTATION,ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    if (orientation != getRequestedOrientation()) {
      setRequestedOrientation(orientation);
    }
  }
  Window win=getWindow();
  WindowManager.LayoutParams winParams=win.getAttributes();
  winParams.buttonBrightness=WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_OFF;
  winParams.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN;
  win.setAttributes(winParams);
  win.setBackgroundDrawable(null);
}"
38626,"private PopupWindow createPopupWindow(){
  PopupWindow popup=new PopupWindow(mContext);
  popup.setOnDismissListener(mOnDismissListener);
  popup.setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.menu_dropdown_panel_holo_dark));
  mContentList=new ListView(mContext);
  mContentList.setAdapter(new ItemDataAdapter());
  mContentList.setOnItemClickListener(mOnItemClickListener);
  popup.setContentView(mContentList);
  popup.setFocusable(true);
  popup.setOutsideTouchable(true);
  return popup;
}","private PopupWindow createPopupWindow(){
  PopupWindow popup=new PopupWindow(mContext);
  popup.setOnDismissListener(mOnDismissListener);
  popup.setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.menu_dropdown_panel_holo_dark));
  mContentList=new ListView(mContext,null,com.actionbarsherlock.R.attr.dropDownListViewStyle);
  mContentList.setAdapter(new ItemDataAdapter());
  mContentList.setOnItemClickListener(mOnItemClickListener);
  popup.setContentView(mContentList);
  popup.setFocusable(true);
  popup.setOutsideTouchable(true);
  return popup;
}"
38627,"@Override public void setHomeButtonEnabled(boolean enabled){
  mActionBar.setHomeButtonEnabled(enabled);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setHomeButtonEnabled(boolean enabled){
  if (ApiHelper.HAS_ACTION_BAR_SET_HOME_BUTTON_ENABLED) {
    mActionBar.setHomeButtonEnabled(enabled);
  }
}"
38628,"@Override public void setLogo(Drawable logo){
  mActionBar.setLogo(logo);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setLogo(Drawable logo){
  if (ApiHelper.HAS_ACTION_BAR_SET_LOGO) {
    mActionBar.setLogo(logo);
  }
}"
38629,"@Override public void setShareIntent(Intent intent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(intent != null);
  }
  if (mShareActionProvider != null) {
    mShareActionProvider.setShareIntent(intent);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setShareIntent(Intent intent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(intent != null);
    if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
      mShareActionProvider.get().setShareIntent(intent);
    }
  }
}"
38630,"public SystemActionBarWrapper(Activity activity){
  mActivity=activity;
  mActionBar=activity.getActionBar();
}","@TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public SystemActionBarWrapper(Activity activity){
  mActivity=activity;
  mActionBar=activity.getActionBar();
  if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareActionProvider.set(new ShareActionProvider(activity));
  }
}"
38631,"@Override public boolean createActionMenu(Menu menu,int menuRes){
  mActivity.getMenuInflater().inflate(menuRes,menu);
  mMenu=menu;
  mShareMenuItem=menu.findItem(R.id.action_share);
  if (mShareMenuItem != null) {
    mShareActionProvider=new ShareActionProvider(mActivity);
    mShareMenuItem.setActionProvider(mShareActionProvider);
  }
  return true;
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public boolean createActionMenu(Menu menu,int menuRes){
  mActivity.getMenuInflater().inflate(menuRes,menu);
  mMenu=menu;
  mShareMenuItem=menu.findItem(R.id.action_share);
  if (mShareMenuItem != null && ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareMenuItem.setActionProvider(mShareActionProvider.get());
  }
  return true;
}"
38632,"@Override public void inflateMenu(int menuRes){
  Utils.assertTrue(mMenu != null);
  mActionMode.getMenuInflater().inflate(menuRes,mMenu);
  mShareMenuItem=mMenu.findItem(R.id.action_share);
  if (mShareMenuItem != null) {
    mShareMenuItem.setActionProvider(mShareActionProvider);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void inflateMenu(int menuRes){
  Utils.assertTrue(mMenu != null);
  mActionMode.getMenuInflater().inflate(menuRes,mMenu);
  mShareMenuItem=mMenu.findItem(R.id.action_share);
  if (mShareMenuItem != null && ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareMenuItem.setActionProvider(mShareActionProvider.get());
  }
}"
38633,"@Override public void setOnShareTargetSelectedListener(final OnShareTargetSelectedListener listener){
  mShareActionProvider.setOnShareTargetSelectedListener(new ShareActionProvider.OnShareTargetSelectedListener(){
    @Override public boolean onShareTargetSelected(    ShareActionProvider source,    Intent intent){
      return listener.onShareTargetSelected(intent);
    }
  }
);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setOnShareTargetSelectedListener(final OnShareTargetSelectedListener listener){
  if (mShareActionProvider.get() == null)   return;
  mShareActionProvider.get().setOnShareTargetSelectedListener(new ShareActionProvider.OnShareTargetSelectedListener(){
    @Override public boolean onShareTargetSelected(    ShareActionProvider source,    Intent intent){
      return listener.onShareTargetSelected(intent);
    }
  }
);
}"
38634,"public SystemActionModeWrapper(Activity activity,ActionModeInterface.Callback callback){
  mShareActionProvider=new ShareActionProvider(activity);
  activity.startActionMode(new CallbackWrapper(callback));
}","@TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public SystemActionModeWrapper(Activity activity,ActionModeInterface.Callback callback){
  if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareActionProvider.set(new ShareActionProvider(activity));
  }
  activity.startActionMode(new CallbackWrapper(callback));
}"
38635,"@Override public void setShareIntent(Intent shareIntent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(shareIntent != null);
    mShareActionProvider.setShareIntent(shareIntent);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setShareIntent(Intent shareIntent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(shareIntent != null);
    if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
      mShareActionProvider.get().setShareIntent(shareIntent);
    }
  }
}"
38636,"public void updateSupportedOperation(){
  if (mMenuTask != null) {
    mMenuTask.cancel();
  }
  updateSelectionMenu();
  final boolean hasShareButton=mActionMode.hasShareButton();
  if (hasShareButton)   mActionMode.setShareIntent(null);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      final int operation=computeMenuOptions(jc);
      final Intent intent=hasShareButton ? computeSharingIntent(jc) : null;
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (!jc.isCancelled()) {
            MenuExecutor.updateMenuOperation(mActionMode,operation);
            if (hasShareButton) {
              mActionMode.setShareIntent(intent);
            }
          }
        }
      }
);
      return null;
    }
  }
);
}","public void updateSupportedOperation(){
  if (mMenuTask != null) {
    mMenuTask.cancel();
  }
  updateSelectionMenu();
  final boolean hasShareButton=mActionMode.hasShareButton();
  if (hasShareButton)   mActionMode.setShareIntent(null);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      final int operation=computeMenuOptions(jc);
      final Intent intent=hasShareButton ? computeSharingIntent(jc) : null;
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (!jc.isCancelled()) {
            MenuExecutor.updateMenuOperation(mActionMode,operation);
            if (hasShareButton) {
              mActionMode.setShareIntent(intent);
              mMenuExecutor.setShareIntent(intent);
            }
          }
        }
      }
);
      return null;
    }
  }
);
}"
38637,"@Override public void run(){
  mMenuTask=null;
  if (!jc.isCancelled()) {
    MenuExecutor.updateMenuOperation(mActionMode,operation);
    if (hasShareButton) {
      mActionMode.setShareIntent(intent);
    }
  }
}","@Override public void run(){
  mMenuTask=null;
  if (!jc.isCancelled()) {
    MenuExecutor.updateMenuOperation(mActionMode,operation);
    if (hasShareButton) {
      mActionMode.setShareIntent(intent);
      mMenuExecutor.setShareIntent(intent);
    }
  }
}"
38638,"@Override public void setHomeButtonEnabled(boolean enabled){
  mActionBar.setHomeButtonEnabled(enabled);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setHomeButtonEnabled(boolean enabled){
  if (ApiHelper.HAS_ACTION_BAR_SET_HOME_BUTTON_ENABLED) {
    mActionBar.setHomeButtonEnabled(enabled);
  }
}"
38639,"@Override public void setLogo(Drawable logo){
  mActionBar.setLogo(logo);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setLogo(Drawable logo){
  if (ApiHelper.HAS_ACTION_BAR_SET_LOGO) {
    mActionBar.setLogo(logo);
  }
}"
38640,"@Override public void setShareIntent(Intent intent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(intent != null);
  }
  if (mShareActionProvider != null) {
    mShareActionProvider.setShareIntent(intent);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setShareIntent(Intent intent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(intent != null);
    if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
      mShareActionProvider.get().setShareIntent(intent);
    }
  }
}"
38641,"public SystemActionBarWrapper(Activity activity){
  mActivity=activity;
  mActionBar=activity.getActionBar();
}","@TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public SystemActionBarWrapper(Activity activity){
  mActivity=activity;
  mActionBar=activity.getActionBar();
  if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareActionProvider.set(new ShareActionProvider(activity));
  }
}"
38642,"@Override public boolean createActionMenu(Menu menu,int menuRes){
  mActivity.getMenuInflater().inflate(menuRes,menu);
  mMenu=menu;
  mShareMenuItem=menu.findItem(R.id.action_share);
  if (mShareMenuItem != null) {
    mShareActionProvider=new ShareActionProvider(mActivity);
    mShareMenuItem.setActionProvider(mShareActionProvider);
  }
  return true;
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public boolean createActionMenu(Menu menu,int menuRes){
  mActivity.getMenuInflater().inflate(menuRes,menu);
  mMenu=menu;
  mShareMenuItem=menu.findItem(R.id.action_share);
  if (mShareMenuItem != null && ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareMenuItem.setActionProvider(mShareActionProvider.get());
  }
  return true;
}"
38643,"@Override public void inflateMenu(int menuRes){
  Utils.assertTrue(mMenu != null);
  mActionMode.getMenuInflater().inflate(menuRes,mMenu);
  mShareMenuItem=mMenu.findItem(R.id.action_share);
  if (mShareMenuItem != null) {
    mShareMenuItem.setActionProvider(mShareActionProvider);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void inflateMenu(int menuRes){
  Utils.assertTrue(mMenu != null);
  mActionMode.getMenuInflater().inflate(menuRes,mMenu);
  mShareMenuItem=mMenu.findItem(R.id.action_share);
  if (mShareMenuItem != null && ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareMenuItem.setActionProvider(mShareActionProvider.get());
  }
}"
38644,"@Override public void setOnShareTargetSelectedListener(final OnShareTargetSelectedListener listener){
  mShareActionProvider.setOnShareTargetSelectedListener(new ShareActionProvider.OnShareTargetSelectedListener(){
    @Override public boolean onShareTargetSelected(    ShareActionProvider source,    Intent intent){
      return listener.onShareTargetSelected(intent);
    }
  }
);
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setOnShareTargetSelectedListener(final OnShareTargetSelectedListener listener){
  if (mShareActionProvider.get() == null)   return;
  mShareActionProvider.get().setOnShareTargetSelectedListener(new ShareActionProvider.OnShareTargetSelectedListener(){
    @Override public boolean onShareTargetSelected(    ShareActionProvider source,    Intent intent){
      return listener.onShareTargetSelected(intent);
    }
  }
);
}"
38645,"public SystemActionModeWrapper(Activity activity,ActionModeInterface.Callback callback){
  mShareActionProvider=new ShareActionProvider(activity);
  activity.startActionMode(new CallbackWrapper(callback));
}","@TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public SystemActionModeWrapper(Activity activity,ActionModeInterface.Callback callback){
  if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
    mShareActionProvider.set(new ShareActionProvider(activity));
  }
  activity.startActionMode(new CallbackWrapper(callback));
}"
38646,"@Override public void setShareIntent(Intent shareIntent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(shareIntent != null);
    mShareActionProvider.setShareIntent(shareIntent);
  }
}","@Override @TargetApi(ApiHelper.VERSION_CODES.ICE_CREAM_SANDWICH) public void setShareIntent(Intent shareIntent){
  if (mShareMenuItem != null) {
    mShareMenuItem.setEnabled(shareIntent != null);
    if (ApiHelper.HAS_SHARE_ACTION_PROVIDER) {
      mShareActionProvider.get().setShareIntent(shareIntent);
    }
  }
}"
38647,"public void updateSupportedOperation(){
  if (mMenuTask != null) {
    mMenuTask.cancel();
  }
  updateSelectionMenu();
  final boolean hasShareButton=mActionMode.hasShareButton();
  if (hasShareButton)   mActionMode.setShareIntent(null);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      final int operation=computeMenuOptions(jc);
      final Intent intent=hasShareButton ? computeSharingIntent(jc) : null;
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (!jc.isCancelled()) {
            MenuExecutor.updateMenuOperation(mActionMode,operation);
            if (hasShareButton) {
              mActionMode.setShareIntent(intent);
            }
          }
        }
      }
);
      return null;
    }
  }
);
}","public void updateSupportedOperation(){
  if (mMenuTask != null) {
    mMenuTask.cancel();
  }
  updateSelectionMenu();
  final boolean hasShareButton=mActionMode.hasShareButton();
  if (hasShareButton)   mActionMode.setShareIntent(null);
  mMenuTask=mActivity.getThreadPool().submit(new Job<Void>(){
    @Override public Void run(    final JobContext jc){
      final int operation=computeMenuOptions(jc);
      final Intent intent=hasShareButton ? computeSharingIntent(jc) : null;
      mMainHandler.post(new Runnable(){
        @Override public void run(){
          mMenuTask=null;
          if (!jc.isCancelled()) {
            MenuExecutor.updateMenuOperation(mActionMode,operation);
            if (hasShareButton) {
              mActionMode.setShareIntent(intent);
              mMenuExecutor.setShareIntent(intent);
            }
          }
        }
      }
);
      return null;
    }
  }
);
}"
38648,"@Override public void run(){
  mMenuTask=null;
  if (!jc.isCancelled()) {
    MenuExecutor.updateMenuOperation(mActionMode,operation);
    if (hasShareButton) {
      mActionMode.setShareIntent(intent);
    }
  }
}","@Override public void run(){
  mMenuTask=null;
  if (!jc.isCancelled()) {
    MenuExecutor.updateMenuOperation(mActionMode,operation);
    if (hasShareButton) {
      mActionMode.setShareIntent(intent);
      mMenuExecutor.setShareIntent(intent);
    }
  }
}"
38649,"/** 
 * Try to seek the tiff data. If there is no tiff data, return false, else return true and the inputstream will be at the start of tiff data
 */
private boolean seekTiffData(InputStream inputStream) throws IOException, ExifInvalidFormatException {
  DataInputStream dataStream=new DataInputStream(inputStream);
  if (dataStream.readShort() != SOI) {
    throw new ExifInvalidFormatException(""String_Node_Str"");
  }
  if (dataStream.readShort() != APP1) {
    return false;
  }
  dataStream.readShort();
  if (dataStream.readInt() != EXIF_HEADER || dataStream.readShort() != EXIF_HEADER_TAIL) {
    return false;
  }
  return true;
}","/** 
 * Try to seek the tiff data. If there is no tiff data, return false, else return true and the inputstream will be at the start of tiff data
 */
private boolean seekTiffData(InputStream inputStream) throws IOException, ExifInvalidFormatException {
  DataInputStream dataStream=new DataInputStream(inputStream);
  if (dataStream.readShort() != SOI) {
    throw new ExifInvalidFormatException(""String_Node_Str"");
  }
  short tag=dataStream.readShort();
  if (tag == APP0) {
    int length=dataStream.readUnsignedShort();
    if ((length - 2) != dataStream.skip(length - 2)) {
      throw new EOFException();
    }
    tag=dataStream.readShort();
  }
  if (tag != APP1) {
    return false;
  }
  dataStream.readShort();
  if (dataStream.readInt() != EXIF_HEADER || dataStream.readShort() != EXIF_HEADER_TAIL) {
    return false;
  }
  return true;
}"
38650,"/** 
 * Try to seek the tiff data. If there is no tiff data, return false, else return true and the inputstream will be at the start of tiff data
 */
private boolean seekTiffData(InputStream inputStream) throws IOException, ExifInvalidFormatException {
  DataInputStream dataStream=new DataInputStream(inputStream);
  if (dataStream.readShort() != SOI) {
    throw new ExifInvalidFormatException(""String_Node_Str"");
  }
  if (dataStream.readShort() != APP1) {
    return false;
  }
  dataStream.readShort();
  if (dataStream.readInt() != EXIF_HEADER || dataStream.readShort() != EXIF_HEADER_TAIL) {
    return false;
  }
  return true;
}","/** 
 * Try to seek the tiff data. If there is no tiff data, return false, else return true and the inputstream will be at the start of tiff data
 */
private boolean seekTiffData(InputStream inputStream) throws IOException, ExifInvalidFormatException {
  DataInputStream dataStream=new DataInputStream(inputStream);
  if (dataStream.readShort() != SOI) {
    throw new ExifInvalidFormatException(""String_Node_Str"");
  }
  short tag=dataStream.readShort();
  if (tag == APP0) {
    int length=dataStream.readUnsignedShort();
    if ((length - 2) != dataStream.skip(length - 2)) {
      throw new EOFException();
    }
    tag=dataStream.readShort();
  }
  if (tag != APP1) {
    return false;
  }
  dataStream.readShort();
  if (dataStream.readInt() != EXIF_HEADER || dataStream.readShort() != EXIF_HEADER_TAIL) {
    return false;
  }
  return true;
}"
38651,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    offset=mNextOffset;
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38652,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38653,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    offset=mNextOffset;
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38654,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    mNextOffset+=TAG_SIZE;
    return TYPE_NEW_TAG;
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38655,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    mNextOffset+=TAG_SIZE;
    return TYPE_NEW_TAG;
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38656,"public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}","public int next() throws IOException {
  int offset=mTiffStream.getReadByteCount();
  if (offset < mEndOfTagOffset) {
    skipTo(mNextOffset);
    if (mNextOffset < mEndOfTagOffset) {
      mNextOffset+=TAG_SIZE;
      return TYPE_NEW_TAG;
    }
  }
  if (offset == mEndOfTagOffset) {
    mOffsetToNextIfd=mTiffStream.readInt();
  }
  if (!mCorrespondingTag.isEmpty()) {
    mCurrTag=mCorrespondingTag.pollFirst();
    skipTo(mCurrTag.getOffset());
    if (isSubIfdTag(mCurrTag.getTagId())) {
      return TYPE_SUB_IFD;
    }
 else {
      return TYPE_VALUE_OF_PREV_TAG;
    }
  }
 else {
    if (offset <= mOffsetToNextIfd) {
      skipTo(mOffsetToNextIfd);
      mOffsetToNextIfd=0;
      return TYPE_NEXT_IFD;
    }
 else {
      return TYPE_END;
    }
  }
}"
38657,"@Override public Void call() throws Exception {
  UpdateInfo info=mUpdateInfo;
  mSourceVersion=info.version;
  if (info.size != mSize) {
    mSize=info.size;
    if (mContentEnd > mSize)     mContentEnd=mSize;
    if (mActiveEnd > mSize)     mActiveEnd=mSize;
  }
  mCurrentIndex=info.indexHint;
  updateSlidingWindow();
  if (info.items != null) {
    int start=Math.max(info.contentStart,mContentStart);
    int end=Math.min(info.contentStart + info.items.size(),mContentEnd);
    int dataIndex=start % DATA_CACHE_SIZE;
    for (int i=start; i < end; ++i) {
      mData[dataIndex]=info.items.get(i - info.contentStart);
      if (++dataIndex == DATA_CACHE_SIZE)       dataIndex=0;
    }
  }
  MediaItem current=mData[mCurrentIndex % DATA_CACHE_SIZE];
  mItemPath=current == null ? null : current.getPath();
  updateImageCache();
  updateTileProvider();
  updateImageRequests();
  fireDataChange();
  return null;
}","@Override public Void call() throws Exception {
  UpdateInfo info=mUpdateInfo;
  mSourceVersion=info.version;
  if (info.size != mSize) {
    mSize=info.size;
    if (mContentEnd > mSize)     mContentEnd=mSize;
    if (mActiveEnd > mSize)     mActiveEnd=mSize;
  }
  mCurrentIndex=info.indexHint;
  updateSlidingWindow();
  if (info.items != null) {
    int start=Math.max(info.contentStart,mContentStart);
    int end=Math.min(info.contentStart + info.items.size(),mContentEnd);
    int dataIndex=start % DATA_CACHE_SIZE;
    for (int i=start; i < end; ++i) {
      mData[dataIndex]=info.items.get(i - info.contentStart);
      if (++dataIndex == DATA_CACHE_SIZE)       dataIndex=0;
    }
  }
  MediaItem current=mData[mCurrentIndex % DATA_CACHE_SIZE];
  mItemPath=current == null ? null : current.getPath();
  updateImageCache();
  updateTileProvider();
  updateImageRequests();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(mCurrentIndex,mItemPath);
  }
  fireDataChange();
  return null;
}"
38658,"@Override public Void call() throws Exception {
  UpdateInfo info=mUpdateInfo;
  mSourceVersion=info.version;
  if (info.size != mSize) {
    mSize=info.size;
    if (mContentEnd > mSize)     mContentEnd=mSize;
    if (mActiveEnd > mSize)     mActiveEnd=mSize;
  }
  mCurrentIndex=info.indexHint;
  updateSlidingWindow();
  if (info.items != null) {
    int start=Math.max(info.contentStart,mContentStart);
    int end=Math.min(info.contentStart + info.items.size(),mContentEnd);
    int dataIndex=start % DATA_CACHE_SIZE;
    for (int i=start; i < end; ++i) {
      mData[dataIndex]=info.items.get(i - info.contentStart);
      if (++dataIndex == DATA_CACHE_SIZE)       dataIndex=0;
    }
  }
  MediaItem current=mData[mCurrentIndex % DATA_CACHE_SIZE];
  mItemPath=current == null ? null : current.getPath();
  updateImageCache();
  updateTileProvider();
  updateImageRequests();
  fireDataChange();
  return null;
}","@Override public Void call() throws Exception {
  UpdateInfo info=mUpdateInfo;
  mSourceVersion=info.version;
  if (info.size != mSize) {
    mSize=info.size;
    if (mContentEnd > mSize)     mContentEnd=mSize;
    if (mActiveEnd > mSize)     mActiveEnd=mSize;
  }
  mCurrentIndex=info.indexHint;
  updateSlidingWindow();
  if (info.items != null) {
    int start=Math.max(info.contentStart,mContentStart);
    int end=Math.min(info.contentStart + info.items.size(),mContentEnd);
    int dataIndex=start % DATA_CACHE_SIZE;
    for (int i=start; i < end; ++i) {
      mData[dataIndex]=info.items.get(i - info.contentStart);
      if (++dataIndex == DATA_CACHE_SIZE)       dataIndex=0;
    }
  }
  MediaItem current=mData[mCurrentIndex % DATA_CACHE_SIZE];
  mItemPath=current == null ? null : current.getPath();
  updateImageCache();
  updateTileProvider();
  updateImageRequests();
  if (mDataListener != null) {
    mDataListener.onPhotoChanged(mCurrentIndex,mItemPath);
  }
  fireDataChange();
  return null;
}"
38659,"public boolean switchWithCaptureAnimation(int offset){
  GLRoot root=getGLRoot();
  root.lockRenderThread();
  try {
    return switchWithCaptureAnimationLocked(offset);
  }
  finally {
    root.unlockRenderThread();
  }
}","public boolean switchWithCaptureAnimation(int offset){
  GLRoot root=getGLRoot();
  if (root == null)   return false;
  root.lockRenderThread();
  try {
    return switchWithCaptureAnimationLocked(offset);
  }
  finally {
    root.unlockRenderThread();
  }
}"
38660,"private boolean canShowBars(){
  boolean atCamera=mAppBridge != null && mCurrentIndex == 0;
  return mActionBarAllowed && !atCamera;
}","private boolean canShowBars(){
  if (mAppBridge != null && mCurrentIndex == 0)   return false;
  if (!mActionBarAllowed)   return false;
  if (mOrientationManager.isOrientationLocked())   return false;
  return true;
}"
38661,"private void toggleBars(){
  if (mShowBars) {
    hideBars();
  }
 else   if (canShowBars()) {
    showBars();
  }
}","private void toggleBars(){
  mCanShowBars=canShowBars();
  if (mShowBars) {
    hideBars();
  }
 else {
    if (mCanShowBars)     showBars();
  }
}"
38662,"@Override public void onCreate(Bundle data,Bundle restoreState){
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
  mOriginalSetPathString=mSetPathString;
  mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
  Path itemPath=Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH));
  if (mSetPathString != null) {
    mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
    if (mAppBridge != null) {
      mOrientationManager.lockOrientation();
      mScreenNail=mAppBridge.attachScreenNail();
      int id=SnailSource.registerScreenNail(mScreenNail);
      Path screenNailSetPath=SnailSource.getSetPath(id);
      Path screenNailItemPath=SnailSource.getItemPath(id);
      mScreenNailItem=(MediaItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
      mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
      itemPath=screenNailItemPath;
      mFlags|=FLAG_HIDE_ACTION_BAR;
      mShowBars=false;
    }
    mMediaSet=mActivity.getDataManager().getMediaSet(mSetPathString);
    mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
    if (mMediaSet == null) {
      Log.w(TAG,""String_Node_Str"" + mSetPathString);
    }
    PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0);
    mModel=pda;
    mPhotoView.setModel(mModel);
    pda.setDataListener(new PhotoDataAdapter.DataListener(){
      @Override public void onPhotoChanged(      int index,      Path item){
        mCurrentIndex=index;
        if (item != null) {
          MediaItem photo=mModel.getCurrentMediaItem();
          if (photo != null)           updateCurrentPhoto(photo);
        }
        updateBars();
      }
      @Override public void onLoadingFinished(){
        GalleryUtils.setSpinnerVisibility((Activity)mActivity,false);
        if (!mModel.isEmpty()) {
          MediaItem photo=mModel.getCurrentMediaItem();
          if (photo != null)           updateCurrentPhoto(photo);
        }
 else         if (mIsActive) {
          mActivity.getStateManager().finishState(PhotoPage.this);
        }
      }
      @Override public void onLoadingStarted(){
        GalleryUtils.setSpinnerVisibility((Activity)mActivity,true);
      }
    }
);
  }
 else {
    MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
    mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
    mPhotoView.setModel(mModel);
    updateCurrentPhoto(mediaItem);
  }
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_LOCK_ORIENTATION:
{
        mOrientationManager.lockOrientation();
        break;
      }
case MSG_UNLOCK_ORIENTATION:
{
      mOrientationManager.unlockOrientation();
      break;
    }
case MSG_ON_FULL_SCREEN_CHANGED:
{
    mAppBridge.onFullScreenChanged(message.arg1 == 1);
    break;
  }
case MSG_UPDATE_ACTION_BAR:
{
  updateBars();
  break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
if (restoreState == null) {
mPhotoView.setOpenAnimationRect((Rect)data.getParcelable(KEY_OPEN_ANIMATION_RECT));
}
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  mActionBar=mActivity.getGalleryActionBar();
  mSelectionManager=new SelectionManager(mActivity,false);
  mMenuExecutor=new MenuExecutor(mActivity,mSelectionManager);
  mPhotoView=new PhotoView(mActivity);
  mPhotoView.setListener(this);
  mRootPane.addComponent(mPhotoView);
  mApplication=(GalleryApp)((Activity)mActivity).getApplication();
  mOrientationManager=mActivity.getOrientationManager();
  mOrientationManager.addListener(this);
  mSetPathString=data.getString(KEY_MEDIA_SET_PATH);
  mOriginalSetPathString=mSetPathString;
  mNfcAdapter=NfcAdapter.getDefaultAdapter(mActivity.getAndroidContext());
  Path itemPath=Path.fromString(data.getString(KEY_MEDIA_ITEM_PATH));
  if (mSetPathString != null) {
    mAppBridge=(AppBridge)data.getParcelable(KEY_APP_BRIDGE);
    if (mAppBridge != null) {
      mOrientationManager.lockOrientation();
      mScreenNail=mAppBridge.attachScreenNail();
      int id=SnailSource.registerScreenNail(mScreenNail);
      Path screenNailSetPath=SnailSource.getSetPath(id);
      Path screenNailItemPath=SnailSource.getItemPath(id);
      mScreenNailItem=(MediaItem)mActivity.getDataManager().getMediaObject(screenNailItemPath);
      mSetPathString=""String_Node_Str"" + screenNailSetPath + ""String_Node_Str""+ mSetPathString+ ""String_Node_Str"";
      itemPath=screenNailItemPath;
      mFlags|=FLAG_HIDE_ACTION_BAR;
      mShowBars=false;
    }
    mMediaSet=mActivity.getDataManager().getMediaSet(mSetPathString);
    mCurrentIndex=data.getInt(KEY_INDEX_HINT,0);
    if (mMediaSet == null) {
      Log.w(TAG,""String_Node_Str"" + mSetPathString);
    }
    PhotoDataAdapter pda=new PhotoDataAdapter(mActivity,mPhotoView,mMediaSet,itemPath,mCurrentIndex,mAppBridge == null ? -1 : 0);
    mModel=pda;
    mPhotoView.setModel(mModel);
    pda.setDataListener(new PhotoDataAdapter.DataListener(){
      @Override public void onPhotoChanged(      int index,      Path item){
        mCurrentIndex=index;
        if (item != null) {
          MediaItem photo=mModel.getCurrentMediaItem();
          if (photo != null)           updateCurrentPhoto(photo);
        }
        updateBars();
      }
      @Override public void onLoadingFinished(){
        GalleryUtils.setSpinnerVisibility((Activity)mActivity,false);
        if (!mModel.isEmpty()) {
          MediaItem photo=mModel.getCurrentMediaItem();
          if (photo != null)           updateCurrentPhoto(photo);
        }
 else         if (mIsActive) {
          mActivity.getStateManager().finishState(PhotoPage.this);
        }
      }
      @Override public void onLoadingStarted(){
        GalleryUtils.setSpinnerVisibility((Activity)mActivity,true);
      }
    }
);
  }
 else {
    MediaItem mediaItem=(MediaItem)mActivity.getDataManager().getMediaObject(itemPath);
    mModel=new SinglePhotoDataAdapter(mActivity,mPhotoView,mediaItem);
    mPhotoView.setModel(mModel);
    updateCurrentPhoto(mediaItem);
  }
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
          hideBars();
          break;
        }
case MSG_LOCK_ORIENTATION:
{
        mOrientationManager.lockOrientation();
        updateBars();
        break;
      }
case MSG_UNLOCK_ORIENTATION:
{
      mOrientationManager.unlockOrientation();
      updateBars();
      break;
    }
case MSG_ON_FULL_SCREEN_CHANGED:
{
    mAppBridge.onFullScreenChanged(message.arg1 == 1);
    break;
  }
case MSG_UPDATE_ACTION_BAR:
{
  updateBars();
  break;
}
default :
throw new AssertionError(message.what);
}
}
}
;
if (restoreState == null) {
mPhotoView.setOpenAnimationRect((Rect)data.getParcelable(KEY_OPEN_ANIMATION_RECT));
}
}"
38663,"@Override protected void onDestroy(){
  if (mAppBridge != null) {
    SnailSource.unregisterScreenNail(mScreenNail);
    mAppBridge.detachScreenNail();
    mAppBridge=null;
    mScreenNail=null;
  }
  mOrientationManager.removeListener(this);
  super.onDestroy();
}","@Override protected void onDestroy(){
  if (mAppBridge != null) {
    SnailSource.unregisterScreenNail(mScreenNail);
    mAppBridge.detachScreenNail();
    mAppBridge=null;
    mScreenNail=null;
  }
  mOrientationManager.removeListener(this);
  mHandler.removeCallbacksAndMessages(null);
  super.onDestroy();
}"
38664,"@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
default :
throw new AssertionError(message.what);
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_HIDE_BARS:
{
      hideBars();
      break;
    }
case MSG_LOCK_ORIENTATION:
{
    mOrientationManager.lockOrientation();
    updateBars();
    break;
  }
case MSG_UNLOCK_ORIENTATION:
{
  mOrientationManager.unlockOrientation();
  updateBars();
  break;
}
case MSG_ON_FULL_SCREEN_CHANGED:
{
mAppBridge.onFullScreenChanged(message.arg1 == 1);
break;
}
case MSG_UPDATE_ACTION_BAR:
{
updateBars();
break;
}
default :
throw new AssertionError(message.what);
}
}"
38665,"private void updateBars(){
  if (canShowBars()) {
    showBars();
  }
 else {
    hideBars();
  }
}","private void updateBars(){
  boolean v=canShowBars();
  if (mCanShowBars == v)   return;
  mCanShowBars=v;
  if (mCanShowBars) {
    showBars();
  }
 else {
    hideBars();
  }
}"
38666,"private void captureAnimationDone(int offset){
  mHolding&=~HOLD_CAPTURE_ANIMATION;
  if (offset == 1) {
    if (!mFilmMode) {
      mListener.unlockOrientation();
      mListener.onActionBarAllowed(true);
    }
  }
  snapback();
}","private void captureAnimationDone(int offset){
  mHolding&=~HOLD_CAPTURE_ANIMATION;
  if (offset == 1) {
    if (!mFilmMode) {
      mListener.onActionBarAllowed(true);
    }
  }
  snapback();
}"
38667,"@Override protected void onResume(){
  super.onResume();
  mIsActive=true;
  setContentPane(mRootPane);
  mModel.resume();
  mPhotoView.resume();
  if (mMenuVisibilityListener == null) {
    mMenuVisibilityListener=new MyMenuVisibilityListener();
  }
  mActionBar.setDisplayOptions(mSetPathString != null,true);
  mActionBar.addOnMenuVisibilityListener(mMenuVisibilityListener);
  onUserInteraction();
  if (mAppBridge != null) {
    mAppBridge.setServer(this);
    mModel.moveTo(0);
  }
}","@Override protected void onResume(){
  super.onResume();
  mIsActive=true;
  setContentPane(mRootPane);
  mModel.resume();
  mPhotoView.resume();
  if (mMenuVisibilityListener == null) {
    mMenuVisibilityListener=new MyMenuVisibilityListener();
  }
  mActionBar.setDisplayOptions(mSetPathString != null,true);
  mActionBar.addOnMenuVisibilityListener(mMenuVisibilityListener);
  onUserInteraction();
  if (mAppBridge != null) {
    mAppBridge.setServer(this);
    mPhotoView.resetToFirstPicture();
  }
}"
38668,"@Override public boolean onScaleBegin(float focusX,float focusY){
  mPositionController.beginScale(focusX,focusY);
  mCanChangeMode=mFilmMode || mPositionController.isAtMinimalScale();
  mModeChanged=false;
  return true;
}","@Override public boolean onScaleBegin(float focusX,float focusY){
  mIgnoreScalingGesture=mPictures.get(0).isCamera();
  if (mIgnoreScalingGesture) {
    return true;
  }
  mPositionController.beginScale(focusX,focusY);
  mCanChangeMode=mFilmMode || mPositionController.isAtMinimalScale();
  mModeChanged=false;
  return true;
}"
38669,"@Override public void onScaleEnd(){
  if (mModeChanged)   return;
  mPositionController.endScale();
}","@Override public void onScaleEnd(){
  if (mIgnoreScalingGesture) {
    return;
  }
  if (mModeChanged)   return;
  mPositionController.endScale();
}"
38670,"@Override public boolean onScale(float focusX,float focusY,float scale){
  if (mModeChanged)   return true;
  if (Float.isNaN(scale) || Float.isInfinite(scale))   return false;
  if (scale > 0.99f && scale < 1.01f)   return false;
  int outOfRange=mPositionController.scaleBy(scale,focusX,focusY);
  if (mCanChangeMode) {
    if ((outOfRange < 0 && !mFilmMode) || (outOfRange > 0 && mFilmMode)) {
      stopExtraScalingIfNeeded();
      mHolding&=~HOLD_TOUCH_DOWN;
      setFilmMode(!mFilmMode);
      onScaleEnd();
      mModeChanged=true;
      return true;
    }
  }
  if (outOfRange != 0) {
    startExtraScalingIfNeeded();
  }
 else {
    stopExtraScalingIfNeeded();
  }
  return true;
}","@Override public boolean onScale(float focusX,float focusY,float scale){
  if (mIgnoreScalingGesture) {
    return true;
  }
  if (mModeChanged)   return true;
  if (Float.isNaN(scale) || Float.isInfinite(scale))   return false;
  if (scale > 0.99f && scale < 1.01f)   return false;
  int outOfRange=mPositionController.scaleBy(scale,focusX,focusY);
  if (mCanChangeMode) {
    if ((outOfRange < 0 && !mFilmMode) || (outOfRange > 0 && mFilmMode)) {
      stopExtraScalingIfNeeded();
      mHolding&=~HOLD_TOUCH_DOWN;
      setFilmMode(!mFilmMode);
      onScaleEnd();
      mModeChanged=true;
      return true;
    }
  }
  if (outOfRange != 0) {
    startExtraScalingIfNeeded();
  }
 else {
    stopExtraScalingIfNeeded();
  }
  return true;
}"
38671,"private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
  }
  int n=mActiveTiles.size();
  for (int i=0; i < n; i++) {
    Tile tile=mActiveTiles.valueAt(i);
    int level=tile.mTileLevel;
    if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
      mActiveTiles.removeAt(i);
      i--;
      n--;
      recycleTile(tile);
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}","private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
    int n=mActiveTiles.size();
    for (int i=0; i < n; i++) {
      Tile tile=mActiveTiles.valueAt(i);
      int level=tile.mTileLevel;
      if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
        mActiveTiles.removeAt(i);
        i--;
        n--;
        recycleTile(tile);
      }
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}"
38672,"private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
  }
  int n=mActiveTiles.size();
  for (int i=0; i < n; i++) {
    Tile tile=mActiveTiles.valueAt(i);
    int level=tile.mTileLevel;
    if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
      mActiveTiles.removeAt(i);
      i--;
      n--;
      recycleTile(tile);
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}","private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
    int n=mActiveTiles.size();
    for (int i=0; i < n; i++) {
      Tile tile=mActiveTiles.valueAt(i);
      int level=tile.mTileLevel;
      if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
        mActiveTiles.removeAt(i);
        i--;
        n--;
        recycleTile(tile);
      }
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}"
38673,"private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
  }
  int n=mActiveTiles.size();
  for (int i=0; i < n; i++) {
    Tile tile=mActiveTiles.valueAt(i);
    int level=tile.mTileLevel;
    if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
      mActiveTiles.removeAt(i);
      i--;
      n--;
      recycleTile(tile);
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}","private void layoutTiles(int centerX,int centerY,float scale,int rotation){
  int width=getWidth();
  int height=getHeight();
  int fromLevel;
  int endLevel;
  mLevel=Utils.clamp(Utils.floorLog2(1f / scale),0,mLevelCount);
  if (mLevel != mLevelCount) {
    Rect range=mTileRange;
    getRange(range,centerX,centerY,mLevel,scale,rotation);
    mOffsetX=Math.round(width / 2f + (range.left - centerX) * scale);
    mOffsetY=Math.round(height / 2f + (range.top - centerY) * scale);
    fromLevel=scale * (1 << mLevel) > 0.75f ? mLevel - 1 : mLevel;
  }
 else {
    fromLevel=mLevel - 2;
    mOffsetX=Math.round(width / 2f - centerX * scale);
    mOffsetY=Math.round(height / 2f - centerY * scale);
  }
  fromLevel=Math.max(0,Math.min(fromLevel,mLevelCount - 2));
  endLevel=Math.min(fromLevel + 2,mLevelCount);
  Rect range[]=mActiveRange;
  for (int i=fromLevel; i < endLevel; ++i) {
    getRange(range[i - fromLevel],centerX,centerY,i,rotation);
  }
  if (rotation % 90 != 0)   return;
synchronized (this) {
    mDecodeQueue.clean();
    mUploadQueue.clean();
    mBackgroundTileUploaded=false;
    int n=mActiveTiles.size();
    for (int i=0; i < n; i++) {
      Tile tile=mActiveTiles.valueAt(i);
      int level=tile.mTileLevel;
      if (level < fromLevel || level >= endLevel || !range[level - fromLevel].contains(tile.mX,tile.mY)) {
        mActiveTiles.removeAt(i);
        i--;
        n--;
        recycleTile(tile);
      }
    }
  }
  for (int i=fromLevel; i < endLevel; ++i) {
    int size=TILE_SIZE << i;
    Rect r=range[i - fromLevel];
    for (int y=r.top, bottom=r.bottom; y < bottom; y+=size) {
      for (int x=r.left, right=r.right; x < right; x+=size) {
        activateTile(x,y,i);
      }
    }
  }
  invalidate();
}"
38674,"private float getMinimalScale(Box b){
  float wFactor=1.0f;
  float hFactor=1.0f;
  int viewW, viewH;
  if (!mFilmMode && mConstrained && b == mBoxes.get(0)) {
    viewW=mConstrainedFrame.width();
    viewH=mConstrainedFrame.height();
  }
 else {
    viewW=mViewW;
    viewH=mViewH;
  }
  if (mFilmMode) {
    if (mViewH > mViewW) {
      wFactor=FILM_MODE_PORTRAIT_WIDTH;
      hFactor=FILM_MODE_PORTRAIT_HEIGHT;
    }
 else {
      wFactor=FILM_MODE_LANDSCAPE_WIDTH;
      hFactor=FILM_MODE_LANDSCAPE_HEIGHT;
    }
  }
  float s=Math.min(wFactor * viewW / b.mImageW,hFactor * viewH / b.mImageH);
  return Math.min(SCALE_LIMIT,s);
}","private float getMinimalScale(Box b){
  float wFactor=1.0f;
  float hFactor=1.0f;
  int viewW, viewH;
  if (!mFilmMode && mConstrained && !mConstrainedFrame.isEmpty()&& b == mBoxes.get(0)) {
    viewW=mConstrainedFrame.width();
    viewH=mConstrainedFrame.height();
  }
 else {
    viewW=mViewW;
    viewH=mViewH;
  }
  if (mFilmMode) {
    if (mViewH > mViewW) {
      wFactor=FILM_MODE_PORTRAIT_WIDTH;
      hFactor=FILM_MODE_PORTRAIT_HEIGHT;
    }
 else {
      wFactor=FILM_MODE_LANDSCAPE_WIDTH;
      hFactor=FILM_MODE_LANDSCAPE_HEIGHT;
    }
  }
  float s=Math.min(wFactor * viewW / b.mImageW,hFactor * viewH / b.mImageH);
  return Math.min(SCALE_LIMIT,s);
}"
38675,"protected void drawContent(GLCanvas canvas,Texture content,int width,int height,int rotation){
  canvas.save(GLCanvas.SAVE_FLAG_MATRIX);
  if (rotation != 0) {
    canvas.rotate(rotation,0,0,1);
    if (((rotation % 90) & 1) != 0) {
      int temp=height;
      height=width;
      width=height;
    }
  }
  float scale=Math.min((float)width / content.getWidth(),(float)height / content.getHeight());
  canvas.scale(scale,scale,1);
  content.draw(canvas,0,0);
  canvas.restore();
}","protected void drawContent(GLCanvas canvas,Texture content,int width,int height,int rotation){
  canvas.save(GLCanvas.SAVE_FLAG_MATRIX);
  if (rotation != 0) {
    canvas.translate(width / 2,height / 2);
    canvas.rotate(rotation,0,0,1);
    canvas.translate(-width / 2,-height / 2);
    if (((rotation % 90) & 1) != 0) {
      int temp=height;
      height=width;
      width=height;
    }
  }
  float scale=Math.min((float)width / content.getWidth(),(float)height / content.getHeight());
  canvas.scale(scale,scale,1);
  content.draw(canvas,0,0);
  canvas.restore();
}"
38676,"@Override @SuppressWarnings(""String_Node_Str"") public ArrayList<MediaSet> run(JobContext jc){
  BucketEntry[] entries=loadBucketEntries(jc);
  if (jc.isCancelled())   return null;
  int offset=0;
  int index=findBucket(entries,MediaSetUtils.CAMERA_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  index=findBucket(entries,MediaSetUtils.DOWNLOAD_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  ArrayList<MediaSet> albums=new ArrayList<MediaSet>();
  DataManager dataManager=mApplication.getDataManager();
  for (  BucketEntry entry : entries) {
    MediaSet album=getLocalAlbum(dataManager,mType,mPath,entry.bucketId,entry.bucketName);
    album.reload();
    albums.add(album);
  }
  return albums;
}","@Override @SuppressWarnings(""String_Node_Str"") public ArrayList<MediaSet> run(JobContext jc){
  BucketEntry[] entries=loadBucketEntries(jc);
  if (jc.isCancelled())   return null;
  int offset=0;
  int index=findBucket(entries,MediaSetUtils.CAMERA_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  index=findBucket(entries,MediaSetUtils.DOWNLOAD_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  ArrayList<MediaSet> albums=new ArrayList<MediaSet>();
  DataManager dataManager=mApplication.getDataManager();
  for (  BucketEntry entry : entries) {
    MediaSet album=getLocalAlbum(dataManager,mType,mPath,entry.bucketId,entry.bucketName);
    albums.add(album);
  }
  return albums;
}"
38677,"@Override public synchronized long reload(){
  if (mNotifierImage.isDirty() | mNotifierVideo.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new AlbumsLoader(),this);
  }
  if (mLoadBuffer != null) {
    mAlbums=mLoadBuffer;
    mLoadBuffer=null;
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}","@Override public synchronized long reload(){
  if (mNotifierImage.isDirty() | mNotifierVideo.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new AlbumsLoader(),this);
  }
  if (mLoadBuffer != null) {
    mAlbums=mLoadBuffer;
    mLoadBuffer=null;
    for (    MediaSet album : mAlbums) {
      album.reload();
    }
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}"
38678,"@Override public synchronized long reload(){
  if (mNotifier.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new DevicesLoader(),this);
  }
  if (mLoadBuffer != null) {
    mDeviceSet=mLoadBuffer;
    mLoadBuffer=null;
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}","@Override public synchronized long reload(){
  if (mNotifier.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new DevicesLoader(),this);
  }
  if (mLoadBuffer != null) {
    mDeviceSet=mLoadBuffer;
    mLoadBuffer=null;
    for (    MediaSet device : mDeviceSet) {
      device.reload();
    }
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}"
38679,"@Override public ArrayList<MediaSet> run(JobContext jc){
  DataManager dataManager=mApplication.getDataManager();
  ArrayList<MediaSet> result=new ArrayList<MediaSet>();
  List<android.mtp.MtpDevice> devices=mMtpContext.getMtpClient().getDeviceList();
  Log.v(TAG,""String_Node_Str"" + devices + ""String_Node_Str""+ devices.size());
  for (  android.mtp.MtpDevice mtpDevice : devices) {
synchronized (DataManager.LOCK) {
      int deviceId=mtpDevice.getDeviceId();
      Path childPath=mPath.getChild(deviceId);
      MtpDevice device=(MtpDevice)dataManager.peekMediaObject(childPath);
      if (device == null) {
        device=new MtpDevice(childPath,mApplication,deviceId,mMtpContext);
      }
      Log.d(TAG,""String_Node_Str"" + device);
      result.add(device);
    }
  }
  Collections.sort(result,MediaSetUtils.NAME_COMPARATOR);
  for (int i=0, n=result.size(); i < n; ++i) {
    result.get(i).reload();
  }
  return result;
}","@Override public ArrayList<MediaSet> run(JobContext jc){
  DataManager dataManager=mApplication.getDataManager();
  ArrayList<MediaSet> result=new ArrayList<MediaSet>();
  List<android.mtp.MtpDevice> devices=mMtpContext.getMtpClient().getDeviceList();
  Log.v(TAG,""String_Node_Str"" + devices + ""String_Node_Str""+ devices.size());
  for (  android.mtp.MtpDevice mtpDevice : devices) {
synchronized (DataManager.LOCK) {
      int deviceId=mtpDevice.getDeviceId();
      Path childPath=mPath.getChild(deviceId);
      MtpDevice device=(MtpDevice)dataManager.peekMediaObject(childPath);
      if (device == null) {
        device=new MtpDevice(childPath,mApplication,deviceId,mMtpContext);
      }
      Log.d(TAG,""String_Node_Str"" + device);
      result.add(device);
    }
  }
  Collections.sort(result,MediaSetUtils.NAME_COMPARATOR);
  return result;
}"
38680,"protected void drawContent(GLCanvas canvas,Texture content,int width,int height,int rotation){
  canvas.save(GLCanvas.SAVE_FLAG_MATRIX);
  if (rotation != 0) {
    canvas.rotate(rotation,0,0,1);
    if (((rotation % 90) & 1) != 0) {
      int temp=height;
      height=width;
      width=height;
    }
  }
  float scale=Math.min((float)width / content.getWidth(),(float)height / content.getHeight());
  canvas.scale(scale,scale,1);
  content.draw(canvas,0,0);
  canvas.restore();
}","protected void drawContent(GLCanvas canvas,Texture content,int width,int height,int rotation){
  canvas.save(GLCanvas.SAVE_FLAG_MATRIX);
  if (rotation != 0) {
    canvas.translate(width / 2,height / 2);
    canvas.rotate(rotation,0,0,1);
    canvas.translate(-width / 2,-height / 2);
    if (((rotation % 90) & 1) != 0) {
      int temp=height;
      height=width;
      width=height;
    }
  }
  float scale=Math.min((float)width / content.getWidth(),(float)height / content.getHeight());
  canvas.scale(scale,scale,1);
  content.draw(canvas,0,0);
  canvas.restore();
}"
38681,"@Override @SuppressWarnings(""String_Node_Str"") public ArrayList<MediaSet> run(JobContext jc){
  BucketEntry[] entries=loadBucketEntries(jc);
  if (jc.isCancelled())   return null;
  int offset=0;
  int index=findBucket(entries,MediaSetUtils.CAMERA_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  index=findBucket(entries,MediaSetUtils.DOWNLOAD_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  ArrayList<MediaSet> albums=new ArrayList<MediaSet>();
  DataManager dataManager=mApplication.getDataManager();
  for (  BucketEntry entry : entries) {
    MediaSet album=getLocalAlbum(dataManager,mType,mPath,entry.bucketId,entry.bucketName);
    album.reload();
    albums.add(album);
  }
  return albums;
}","@Override @SuppressWarnings(""String_Node_Str"") public ArrayList<MediaSet> run(JobContext jc){
  BucketEntry[] entries=loadBucketEntries(jc);
  if (jc.isCancelled())   return null;
  int offset=0;
  int index=findBucket(entries,MediaSetUtils.CAMERA_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  index=findBucket(entries,MediaSetUtils.DOWNLOAD_BUCKET_ID);
  if (index != -1) {
    circularShiftRight(entries,offset++,index);
  }
  ArrayList<MediaSet> albums=new ArrayList<MediaSet>();
  DataManager dataManager=mApplication.getDataManager();
  for (  BucketEntry entry : entries) {
    MediaSet album=getLocalAlbum(dataManager,mType,mPath,entry.bucketId,entry.bucketName);
    albums.add(album);
  }
  return albums;
}"
38682,"@Override public synchronized long reload(){
  if (mNotifierImage.isDirty() | mNotifierVideo.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new AlbumsLoader(),this);
  }
  if (mLoadBuffer != null) {
    mAlbums=mLoadBuffer;
    mLoadBuffer=null;
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}","@Override public synchronized long reload(){
  if (mNotifierImage.isDirty() | mNotifierVideo.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new AlbumsLoader(),this);
  }
  if (mLoadBuffer != null) {
    mAlbums=mLoadBuffer;
    mLoadBuffer=null;
    for (    MediaSet album : mAlbums) {
      album.reload();
    }
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}"
38683,"@Override public synchronized long reload(){
  if (mNotifier.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new DevicesLoader(),this);
  }
  if (mLoadBuffer != null) {
    mDeviceSet=mLoadBuffer;
    mLoadBuffer=null;
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}","@Override public synchronized long reload(){
  if (mNotifier.isDirty()) {
    if (mLoadTask != null)     mLoadTask.cancel();
    mLoadTask=mApplication.getThreadPool().submit(new DevicesLoader(),this);
  }
  if (mLoadBuffer != null) {
    mDeviceSet=mLoadBuffer;
    mLoadBuffer=null;
    for (    MediaSet device : mDeviceSet) {
      device.reload();
    }
    mDataVersion=nextVersionNumber();
  }
  return mDataVersion;
}"
38684,"@Override public ArrayList<MediaSet> run(JobContext jc){
  DataManager dataManager=mApplication.getDataManager();
  ArrayList<MediaSet> result=new ArrayList<MediaSet>();
  List<android.mtp.MtpDevice> devices=mMtpContext.getMtpClient().getDeviceList();
  Log.v(TAG,""String_Node_Str"" + devices + ""String_Node_Str""+ devices.size());
  for (  android.mtp.MtpDevice mtpDevice : devices) {
synchronized (DataManager.LOCK) {
      int deviceId=mtpDevice.getDeviceId();
      Path childPath=mPath.getChild(deviceId);
      MtpDevice device=(MtpDevice)dataManager.peekMediaObject(childPath);
      if (device == null) {
        device=new MtpDevice(childPath,mApplication,deviceId,mMtpContext);
      }
      Log.d(TAG,""String_Node_Str"" + device);
      result.add(device);
    }
  }
  Collections.sort(result,MediaSetUtils.NAME_COMPARATOR);
  for (int i=0, n=result.size(); i < n; ++i) {
    result.get(i).reload();
  }
  return result;
}","@Override public ArrayList<MediaSet> run(JobContext jc){
  DataManager dataManager=mApplication.getDataManager();
  ArrayList<MediaSet> result=new ArrayList<MediaSet>();
  List<android.mtp.MtpDevice> devices=mMtpContext.getMtpClient().getDeviceList();
  Log.v(TAG,""String_Node_Str"" + devices + ""String_Node_Str""+ devices.size());
  for (  android.mtp.MtpDevice mtpDevice : devices) {
synchronized (DataManager.LOCK) {
      int deviceId=mtpDevice.getDeviceId();
      Path childPath=mPath.getChild(deviceId);
      MtpDevice device=(MtpDevice)dataManager.peekMediaObject(childPath);
      if (device == null) {
        device=new MtpDevice(childPath,mApplication,deviceId,mMtpContext);
      }
      Log.d(TAG,""String_Node_Str"" + device);
      result.add(device);
    }
  }
  Collections.sort(result,MediaSetUtils.NAME_COMPARATOR);
  return result;
}"
38685,"void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled((actionBar.getDisplayOptions() & ActionBar.DISPLAY_HOME_AS_UP) != 0);
    actionBar.setDisplayShowTitleEnabled(true);
  }
  activity.invalidateOptionsMenu();
  final Window win=activity.getWindow();
  final WindowManager.LayoutParams params=win.getAttributes();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
 else {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_VISIBLE;
  }
  setScreenOnFlags(params);
  win.setAttributes(params);
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  if (0 != (mFlags & FLAG_SCREEN_ON)) {
    final IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
    activity.registerReceiver(mPowerIntentReceiver,filter);
  }
  onResume();
}","void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled((actionBar.getDisplayOptions() & ActionBar.DISPLAY_HOME_AS_UP) != 0);
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
  }
  activity.invalidateOptionsMenu();
  final Window win=activity.getWindow();
  final WindowManager.LayoutParams params=win.getAttributes();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
 else {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_VISIBLE;
  }
  setScreenOnFlags(params);
  win.setAttributes(params);
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  if (0 != (mFlags & FLAG_SCREEN_ON)) {
    final IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
    activity.registerReceiver(mPowerIntentReceiver,filter);
  }
  onResume();
}"
38686,"@Override public void onPause(){
  super.onPause();
  mIsActive=false;
  mActionModeHandler.pause();
  mAlbumSetDataAdapter.pause();
  mAlbumSetView.pause();
  mEyePosition.pause();
  DetailsHelper.pause();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (actionBar != null)   actionBar.hideClusterMenu();
  if (mSyncTask != null) {
    mSyncTask.cancel();
    mSyncTask=null;
    clearLoadingBit(BIT_LOADING_SYNC);
  }
  GalleryUtils.setSpinnerVisibility((Activity)mActivity,false);
}","@Override public void onPause(){
  super.onPause();
  mIsActive=false;
  mActionModeHandler.pause();
  mAlbumSetDataAdapter.pause();
  mAlbumSetView.pause();
  mEyePosition.pause();
  DetailsHelper.pause();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (actionBar != null)   actionBar.disableClusterMenu(false);
  if (mSyncTask != null) {
    mSyncTask.cancel();
    mSyncTask=null;
    clearLoadingBit(BIT_LOADING_SYNC);
  }
  GalleryUtils.setSpinnerVisibility((Activity)mActivity,false);
}"
38687,"public void onSelectionModeChange(int mode){
switch (mode) {
case SelectionManager.ENTER_SELECTION_MODE:
{
      mActivity.getGalleryActionBar().hideClusterMenu();
      mActionMode=mActionModeHandler.startActionMode();
      mVibrator.vibrate(100);
      break;
    }
case SelectionManager.LEAVE_SELECTION_MODE:
{
    mActionMode.finish();
    if (mShowClusterMenu) {
      mActivity.getGalleryActionBar().showClusterMenu(mSelectedAction,this);
    }
    mRootPane.invalidate();
    break;
  }
case SelectionManager.SELECT_ALL_MODE:
{
  mActionModeHandler.setTitle(getSelectedString());
  mRootPane.invalidate();
  break;
}
}
}","public void onSelectionModeChange(int mode){
switch (mode) {
case SelectionManager.ENTER_SELECTION_MODE:
{
      mActivity.getGalleryActionBar().disableClusterMenu(true);
      mActionMode=mActionModeHandler.startActionMode();
      mVibrator.vibrate(100);
      break;
    }
case SelectionManager.LEAVE_SELECTION_MODE:
{
    mActionMode.finish();
    if (mShowClusterMenu) {
      mActivity.getGalleryActionBar().enableClusterMenu(mSelectedAction,this);
    }
    mRootPane.invalidate();
    break;
  }
case SelectionManager.SELECT_ALL_MODE:
{
  mActionModeHandler.setTitle(getSelectedString());
  mRootPane.invalidate();
  break;
}
}
}"
38688,"@Override public void onResume(){
  super.onResume();
  mIsActive=true;
  setContentPane(mRootPane);
  setLoadingBit(BIT_LOADING_RELOAD);
  mAlbumSetDataAdapter.resume();
  mAlbumSetView.resume();
  mEyePosition.resume();
  mActionModeHandler.resume();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (mShowClusterMenu && actionBar != null) {
    actionBar.showClusterMenu(mSelectedAction,this);
  }
  if (!mInitialSynced) {
    setLoadingBit(BIT_LOADING_SYNC);
    mSyncTask=mMediaSet.requestSync(AlbumSetPage.this);
  }
}","@Override public void onResume(){
  super.onResume();
  mIsActive=true;
  setContentPane(mRootPane);
  setLoadingBit(BIT_LOADING_RELOAD);
  mAlbumSetDataAdapter.resume();
  mAlbumSetView.resume();
  mEyePosition.resume();
  mActionModeHandler.resume();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (mShowClusterMenu && actionBar != null) {
    actionBar.enableClusterMenu(mSelectedAction,this);
  }
  if (!mInitialSynced) {
    setLoadingBit(BIT_LOADING_SYNC);
    mSyncTask=mMediaSet.requestSync(AlbumSetPage.this);
  }
}"
38689,"void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled(true);
  }
  activity.invalidateOptionsMenu();
  final Window win=activity.getWindow();
  final WindowManager.LayoutParams params=win.getAttributes();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
 else {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_VISIBLE;
  }
  setScreenOnFlags(params);
  win.setAttributes(params);
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  if (0 != (mFlags & FLAG_SCREEN_ON)) {
    final IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
    activity.registerReceiver(mPowerIntentReceiver,filter);
  }
  onResume();
}","void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled((actionBar.getDisplayOptions() & ActionBar.DISPLAY_HOME_AS_UP) != 0);
  }
  activity.invalidateOptionsMenu();
  final Window win=activity.getWindow();
  final WindowManager.LayoutParams params=win.getAttributes();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_LOW_PROFILE;
  }
 else {
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_VISIBLE;
  }
  setScreenOnFlags(params);
  win.setAttributes(params);
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  if (0 != (mFlags & FLAG_SCREEN_ON)) {
    final IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_BATTERY_CHANGED);
    activity.registerReceiver(mPowerIntentReceiver,filter);
  }
  onResume();
}"
38690,"private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}","private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}"
38691,"private Bitmap getCroppedImage(Rect rect){
  Utils.assertTrue(rect.width() > 0 && rect.height() > 0);
  Bundle extras=getIntent().getExtras();
  int outputX=rect.width();
  int outputY=rect.height();
  if (extras != null) {
    outputX=extras.getInt(KEY_OUTPUT_X,outputX);
    outputY=extras.getInt(KEY_OUTPUT_Y,outputY);
  }
  if (outputX * outputY > MAX_PIXEL_COUNT) {
    float scale=(float)Math.sqrt((double)MAX_PIXEL_COUNT / outputX / outputY);
    Log.w(TAG,""String_Node_Str"" + scale);
    outputX=Math.round(scale * outputX);
    outputY=Math.round(scale * outputY);
  }
  float scaleX=1;
  float scaleY=1;
  Rect dest=new Rect(0,0,outputX,outputY);
  if (extras == null || extras.getBoolean(KEY_SCALE,true)) {
    scaleX=(float)outputX / rect.width();
    scaleY=(float)outputY / rect.height();
    if (extras == null || !extras.getBoolean(KEY_SCALE_UP_IF_NEEDED,false)) {
      if (scaleX > 1f)       scaleX=1;
      if (scaleY > 1f)       scaleY=1;
    }
  }
  int rectWidth=Math.round(rect.width() * scaleX);
  int rectHeight=Math.round(rect.height() * scaleY);
  dest.set(Math.round((outputX - rectWidth) / 2f),Math.round((outputY - rectHeight) / 2f),Math.round((outputX + rectWidth) / 2f),Math.round((outputY + rectHeight) / 2f));
  if (mBitmapInIntent != null) {
    Bitmap source=mBitmapInIntent;
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    canvas.drawBitmap(source,rect,dest,null);
    return result;
  }
  int rotation=mMediaItem.getFullImageRotation();
  rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
  rotateRectangle(dest,outputX,outputY,360 - rotation);
  if (mUseRegionDecoder) {
    BitmapFactory.Options options=new BitmapFactory.Options();
    int sample=BitmapUtils.computeSampleSizeLarger(Math.max(scaleX,scaleY));
    options.inSampleSize=sample;
    if ((rect.width() / sample) == dest.width() && (rect.height() / sample) == dest.height() && rotation == 0) {
synchronized (mRegionDecoder) {
        return mRegionDecoder.decodeRegion(rect,options);
      }
    }
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    drawInTiles(canvas,mRegionDecoder,rect,dest,sample);
    return result;
  }
 else {
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    canvas.drawBitmap(mBitmap,rect,dest,new Paint(Paint.FILTER_BITMAP_FLAG));
    return result;
  }
}","private Bitmap getCroppedImage(Rect rect){
  Utils.assertTrue(rect.width() > 0 && rect.height() > 0);
  Bundle extras=getIntent().getExtras();
  int outputX=rect.width();
  int outputY=rect.height();
  if (extras != null) {
    outputX=extras.getInt(KEY_OUTPUT_X,outputX);
    outputY=extras.getInt(KEY_OUTPUT_Y,outputY);
  }
  if (outputX * outputY > MAX_PIXEL_COUNT) {
    float scale=(float)Math.sqrt((double)MAX_PIXEL_COUNT / outputX / outputY);
    Log.w(TAG,""String_Node_Str"" + scale);
    outputX=Math.round(scale * outputX);
    outputY=Math.round(scale * outputY);
  }
  float scaleX=1;
  float scaleY=1;
  Rect dest=new Rect(0,0,outputX,outputY);
  if (extras == null || extras.getBoolean(KEY_SCALE,true)) {
    scaleX=(float)outputX / rect.width();
    scaleY=(float)outputY / rect.height();
    if (extras == null || !extras.getBoolean(KEY_SCALE_UP_IF_NEEDED,false)) {
      if (scaleX > 1f)       scaleX=1;
      if (scaleY > 1f)       scaleY=1;
    }
  }
  int rectWidth=Math.round(rect.width() * scaleX);
  int rectHeight=Math.round(rect.height() * scaleY);
  dest.set(Math.round((outputX - rectWidth) / 2f),Math.round((outputY - rectHeight) / 2f),Math.round((outputX + rectWidth) / 2f),Math.round((outputY + rectHeight) / 2f));
  if (mBitmapInIntent != null) {
    Bitmap source=mBitmapInIntent;
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    canvas.drawBitmap(source,rect,dest,null);
    return result;
  }
  if (mUseRegionDecoder) {
    int rotation=mMediaItem.getFullImageRotation();
    rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
    rotateRectangle(dest,outputX,outputY,360 - rotation);
    BitmapFactory.Options options=new BitmapFactory.Options();
    int sample=BitmapUtils.computeSampleSizeLarger(Math.max(scaleX,scaleY));
    options.inSampleSize=sample;
    if ((rect.width() / sample) == dest.width() && (rect.height() / sample) == dest.height() && rotation == 0) {
synchronized (mRegionDecoder) {
        return mRegionDecoder.decodeRegion(rect,options);
      }
    }
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    drawInTiles(canvas,mRegionDecoder,rect,dest,sample);
    return result;
  }
 else {
    int rotation=mMediaItem.getRotation();
    rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
    rotateRectangle(dest,outputX,outputY,360 - rotation);
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    canvas.drawBitmap(mBitmap,rect,dest,new Paint(Paint.FILTER_BITMAP_FLAG));
    return result;
  }
}"
38692,"private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}","private void onBitmapRegionDecoderAvailable(BitmapRegionDecoder regionDecoder){
  if (regionDecoder == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  mRegionDecoder=regionDecoder;
  mUseRegionDecoder=true;
  mState=STATE_LOADED;
  BitmapFactory.Options options=new BitmapFactory.Options();
  int width=regionDecoder.getWidth();
  int height=regionDecoder.getHeight();
  options.inSampleSize=BitmapUtils.computeSampleSize(width,height,BitmapUtils.UNCONSTRAINED,BACKUP_PIXEL_COUNT);
  mBitmap=regionDecoder.decodeRegion(new Rect(0,0,width,height),options);
  mCropView.setDataModel(new TileImageViewAdapter(mBitmap,regionDecoder),mMediaItem.getFullImageRotation());
  if (mDoFaceDetection) {
    mCropView.detectFaces(mBitmap);
  }
 else {
    mCropView.initializeHighlightRectangle();
  }
}"
38693,"private Bitmap getCroppedImage(Rect rect){
  Utils.assertTrue(rect.width() > 0 && rect.height() > 0);
  Bundle extras=getIntent().getExtras();
  int outputX=rect.width();
  int outputY=rect.height();
  if (extras != null) {
    outputX=extras.getInt(KEY_OUTPUT_X,outputX);
    outputY=extras.getInt(KEY_OUTPUT_Y,outputY);
  }
  if (outputX * outputY > MAX_PIXEL_COUNT) {
    float scale=(float)Math.sqrt((double)MAX_PIXEL_COUNT / outputX / outputY);
    Log.w(TAG,""String_Node_Str"" + scale);
    outputX=Math.round(scale * outputX);
    outputY=Math.round(scale * outputY);
  }
  float scaleX=1;
  float scaleY=1;
  Rect dest=new Rect(0,0,outputX,outputY);
  if (extras == null || extras.getBoolean(KEY_SCALE,true)) {
    scaleX=(float)outputX / rect.width();
    scaleY=(float)outputY / rect.height();
    if (extras == null || !extras.getBoolean(KEY_SCALE_UP_IF_NEEDED,false)) {
      if (scaleX > 1f)       scaleX=1;
      if (scaleY > 1f)       scaleY=1;
    }
  }
  int rectWidth=Math.round(rect.width() * scaleX);
  int rectHeight=Math.round(rect.height() * scaleY);
  dest.set(Math.round((outputX - rectWidth) / 2f),Math.round((outputY - rectHeight) / 2f),Math.round((outputX + rectWidth) / 2f),Math.round((outputY + rectHeight) / 2f));
  if (mBitmapInIntent != null) {
    Bitmap source=mBitmapInIntent;
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    canvas.drawBitmap(source,rect,dest,null);
    return result;
  }
  int rotation=mMediaItem.getFullImageRotation();
  rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
  rotateRectangle(dest,outputX,outputY,360 - rotation);
  if (mUseRegionDecoder) {
    BitmapFactory.Options options=new BitmapFactory.Options();
    int sample=BitmapUtils.computeSampleSizeLarger(Math.max(scaleX,scaleY));
    options.inSampleSize=sample;
    if ((rect.width() / sample) == dest.width() && (rect.height() / sample) == dest.height() && rotation == 0) {
synchronized (mRegionDecoder) {
        return mRegionDecoder.decodeRegion(rect,options);
      }
    }
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    drawInTiles(canvas,mRegionDecoder,rect,dest,sample);
    return result;
  }
 else {
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    canvas.drawBitmap(mBitmap,rect,dest,new Paint(Paint.FILTER_BITMAP_FLAG));
    return result;
  }
}","private Bitmap getCroppedImage(Rect rect){
  Utils.assertTrue(rect.width() > 0 && rect.height() > 0);
  Bundle extras=getIntent().getExtras();
  int outputX=rect.width();
  int outputY=rect.height();
  if (extras != null) {
    outputX=extras.getInt(KEY_OUTPUT_X,outputX);
    outputY=extras.getInt(KEY_OUTPUT_Y,outputY);
  }
  if (outputX * outputY > MAX_PIXEL_COUNT) {
    float scale=(float)Math.sqrt((double)MAX_PIXEL_COUNT / outputX / outputY);
    Log.w(TAG,""String_Node_Str"" + scale);
    outputX=Math.round(scale * outputX);
    outputY=Math.round(scale * outputY);
  }
  float scaleX=1;
  float scaleY=1;
  Rect dest=new Rect(0,0,outputX,outputY);
  if (extras == null || extras.getBoolean(KEY_SCALE,true)) {
    scaleX=(float)outputX / rect.width();
    scaleY=(float)outputY / rect.height();
    if (extras == null || !extras.getBoolean(KEY_SCALE_UP_IF_NEEDED,false)) {
      if (scaleX > 1f)       scaleX=1;
      if (scaleY > 1f)       scaleY=1;
    }
  }
  int rectWidth=Math.round(rect.width() * scaleX);
  int rectHeight=Math.round(rect.height() * scaleY);
  dest.set(Math.round((outputX - rectWidth) / 2f),Math.round((outputY - rectHeight) / 2f),Math.round((outputX + rectWidth) / 2f),Math.round((outputY + rectHeight) / 2f));
  if (mBitmapInIntent != null) {
    Bitmap source=mBitmapInIntent;
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    canvas.drawBitmap(source,rect,dest,null);
    return result;
  }
  if (mUseRegionDecoder) {
    int rotation=mMediaItem.getFullImageRotation();
    rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
    rotateRectangle(dest,outputX,outputY,360 - rotation);
    BitmapFactory.Options options=new BitmapFactory.Options();
    int sample=BitmapUtils.computeSampleSizeLarger(Math.max(scaleX,scaleY));
    options.inSampleSize=sample;
    if ((rect.width() / sample) == dest.width() && (rect.height() / sample) == dest.height() && rotation == 0) {
synchronized (mRegionDecoder) {
        return mRegionDecoder.decodeRegion(rect,options);
      }
    }
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    drawInTiles(canvas,mRegionDecoder,rect,dest,sample);
    return result;
  }
 else {
    int rotation=mMediaItem.getRotation();
    rotateRectangle(rect,mCropView.getImageWidth(),mCropView.getImageHeight(),360 - rotation);
    rotateRectangle(dest,outputX,outputY,360 - rotation);
    Bitmap result=Bitmap.createBitmap(outputX,outputY,Config.ARGB_8888);
    Canvas canvas=new Canvas(result);
    rotateCanvas(canvas,outputX,outputY,rotation);
    canvas.drawBitmap(mBitmap,rect,dest,new Paint(Paint.FILTER_BITMAP_FLAG));
    return result;
  }
}"
38694,"public void onFutureDone(Future<Bitmap> future){
  mFuture=future;
  mMainHandler.sendMessage(mMainHandler.obtainMessage(MSG_RUN_OBJECT,this));
}","@Override public void onFutureDone(Future<Bitmap> future){
  mFuture=future;
  mMainHandler.sendMessage(mMainHandler.obtainMessage(MSG_RUN_OBJECT,this));
}"
38695,"private void updateScreenNail(long version,Future<Bitmap> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.screenNailTask == null) {
    Bitmap screenNail=future.get();
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  entry.screenNail=future.get();
  if (entry.screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,false);
    }
    for (int i=-1; i <= 1; ++i) {
      if (version == getVersion(mCurrentIndex + i)) {
        if (i == 0)         updateTileProvider(entry);
        mPhotoView.notifyImageInvalidated(i);
      }
    }
  }
  updateImageRequests();
}","private void updateScreenNail(long version,Future<Bitmap> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.screenNailTask != future) {
    Bitmap screenNail=future.get();
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  entry.screenNail=future.get();
  if (entry.screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,false);
    }
    for (int i=-1; i <= 1; ++i) {
      if (version == getVersion(mCurrentIndex + i)) {
        if (i == 0)         updateTileProvider(entry);
        mPhotoView.notifyImageInvalidated(i);
      }
    }
  }
  updateImageRequests();
}"
38696,"private void updateFullImage(long version,Future<BitmapRegionDecoder> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.fullImageTask == null) {
    BitmapRegionDecoder fullImage=future.get();
    if (fullImage != null)     fullImage.recycle();
    return;
  }
  entry.fullImageTask=null;
  entry.fullImage=future.get();
  if (entry.fullImage != null) {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,true);
    }
    if (version == getVersion(mCurrentIndex)) {
      updateTileProvider(entry);
      mPhotoView.notifyImageInvalidated(0);
    }
  }
  updateImageRequests();
}","private void updateFullImage(long version,Future<BitmapRegionDecoder> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.fullImageTask != future) {
    BitmapRegionDecoder fullImage=future.get();
    if (fullImage != null)     fullImage.recycle();
    return;
  }
  entry.fullImageTask=null;
  entry.fullImage=future.get();
  if (entry.fullImage != null) {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,true);
    }
    if (version == getVersion(mCurrentIndex)) {
      updateTileProvider(entry);
      mPhotoView.notifyImageInvalidated(0);
    }
  }
  updateImageRequests();
}"
38697,"public void startAction(int action,int title,ProgressListener listener){
  ArrayList<Path> ids=mSelectionManager.getSelected(false);
  Utils.assertTrue(mDialog == null);
  Activity activity=(Activity)mActivity;
  mDialog=showProgressDialog(activity,title,ids.size());
  MediaOperation operation=new MediaOperation(action,ids,listener);
  mTask=mActivity.getThreadPool().submit(operation,null);
}","public void startAction(int action,int title,ProgressListener listener){
  ArrayList<Path> ids=mSelectionManager.getSelected(false);
  stopTaskAndDismissDialog();
  Activity activity=(Activity)mActivity;
  mDialog=showProgressDialog(activity,title,ids.size());
  MediaOperation operation=new MediaOperation(action,ids,listener);
  mTask=mActivity.getThreadPool().submit(operation,null);
}"
38698,"@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
      if (mDialog != null) {
        mDialog.dismiss();
        mDialog=null;
        mTask=null;
      }
      if (message.obj != null) {
        ProgressListener listener=(ProgressListener)message.obj;
        listener.onProgressComplete(message.arg1);
      }
      mSelectionManager.leaveSelectionMode();
      break;
    }
case MSG_TASK_UPDATE:
{
    if (mDialog != null)     mDialog.setProgress(message.arg1);
    if (message.obj != null) {
      ProgressListener listener=(ProgressListener)message.obj;
      listener.onProgressUpdate(message.arg1);
    }
    break;
  }
case MSG_DO_SHARE:
{
  ((Activity)mActivity).startActivity((Intent)message.obj);
  break;
}
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
      stopTaskAndDismissDialog();
      if (message.obj != null) {
        ProgressListener listener=(ProgressListener)message.obj;
        listener.onProgressComplete(message.arg1);
      }
      mSelectionManager.leaveSelectionMode();
      break;
    }
case MSG_TASK_UPDATE:
{
    if (mDialog != null)     mDialog.setProgress(message.arg1);
    if (message.obj != null) {
      ProgressListener listener=(ProgressListener)message.obj;
      listener.onProgressUpdate(message.arg1);
    }
    break;
  }
case MSG_DO_SHARE:
{
  ((Activity)mActivity).startActivity((Intent)message.obj);
  break;
}
}
}"
38699,"public Void run(JobContext jc){
  int index=0;
  DataManager manager=mActivity.getDataManager();
  int result=EXECUTION_RESULT_SUCCESS;
  for (  Path id : mItems) {
    if (jc.isCancelled()) {
      result=EXECUTION_RESULT_CANCEL;
      break;
    }
    try {
      if (!execute(manager,jc,mOperation,id))       result=EXECUTION_RESULT_FAIL;
    }
 catch (    Throwable th) {
      Log.e(TAG,""String_Node_Str"" + mOperation + ""String_Node_Str""+ id,th);
    }
    onProgressUpdate(index++,mListener);
  }
  onProgressComplete(result,mListener);
  return null;
}","public Void run(JobContext jc){
  int index=0;
  DataManager manager=mActivity.getDataManager();
  int result=EXECUTION_RESULT_SUCCESS;
  try {
    for (    Path id : mItems) {
      if (jc.isCancelled()) {
        result=EXECUTION_RESULT_CANCEL;
        break;
      }
      if (!execute(manager,jc,mOperation,id)) {
        result=EXECUTION_RESULT_FAIL;
      }
      onProgressUpdate(index++,mListener);
    }
  }
 catch (  Throwable th) {
    Log.e(TAG,""String_Node_Str"" + mOperation + ""String_Node_Str""+ th);
  }
 finally {
    onProgressComplete(result,mListener);
  }
  return null;
}"
38700,"public MenuExecutor(GalleryActivity activity,SelectionManager selectionManager){
  mActivity=Utils.checkNotNull(activity);
  mSelectionManager=Utils.checkNotNull(selectionManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
          if (mDialog != null) {
            mDialog.dismiss();
            mDialog=null;
            mTask=null;
          }
          if (message.obj != null) {
            ProgressListener listener=(ProgressListener)message.obj;
            listener.onProgressComplete(message.arg1);
          }
          mSelectionManager.leaveSelectionMode();
          break;
        }
case MSG_TASK_UPDATE:
{
        if (mDialog != null)         mDialog.setProgress(message.arg1);
        if (message.obj != null) {
          ProgressListener listener=(ProgressListener)message.obj;
          listener.onProgressUpdate(message.arg1);
        }
        break;
      }
case MSG_DO_SHARE:
{
      ((Activity)mActivity).startActivity((Intent)message.obj);
      break;
    }
}
}
}
;
}","public MenuExecutor(GalleryActivity activity,SelectionManager selectionManager){
  mActivity=Utils.checkNotNull(activity);
  mSelectionManager=Utils.checkNotNull(selectionManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
          stopTaskAndDismissDialog();
          if (message.obj != null) {
            ProgressListener listener=(ProgressListener)message.obj;
            listener.onProgressComplete(message.arg1);
          }
          mSelectionManager.leaveSelectionMode();
          break;
        }
case MSG_TASK_UPDATE:
{
        if (mDialog != null)         mDialog.setProgress(message.arg1);
        if (message.obj != null) {
          ProgressListener listener=(ProgressListener)message.obj;
          listener.onProgressUpdate(message.arg1);
        }
        break;
      }
case MSG_DO_SHARE:
{
      ((Activity)mActivity).startActivity((Intent)message.obj);
      break;
    }
}
}
}
;
}"
38701,"private boolean execute(DataManager manager,JobContext jc,int cmd,Path path){
  boolean result=true;
switch (cmd) {
case R.id.action_confirm_delete:
    manager.delete(path);
  break;
case R.id.action_rotate_cw:
manager.rotate(path,90);
break;
case R.id.action_rotate_ccw:
manager.rotate(path,-90);
break;
case R.id.action_toggle_full_caching:
{
MediaObject obj=manager.getMediaObject(path);
int cacheFlag=obj.getCacheFlag();
if (cacheFlag == MediaObject.CACHE_FLAG_FULL) {
cacheFlag=MediaObject.CACHE_FLAG_SCREENNAIL;
}
 else {
cacheFlag=MediaObject.CACHE_FLAG_FULL;
}
obj.cache(cacheFlag);
break;
}
case R.id.action_show_on_map:
{
MediaItem item=(MediaItem)manager.getMediaObject(path);
double latlng[]=new double[2];
item.getLatLong(latlng);
if (GalleryUtils.isValidLocation(latlng[0],latlng[1])) {
GalleryUtils.showOnMap((Context)mActivity,latlng[0],latlng[1]);
}
break;
}
case R.id.action_import:
{
MediaObject obj=manager.getMediaObject(path);
result=obj.Import();
break;
}
case R.id.action_edit:
{
Activity activity=(Activity)mActivity;
MediaItem item=(MediaItem)manager.getMediaObject(path);
try {
activity.startActivity(Intent.createChooser(new Intent(Intent.ACTION_EDIT).setDataAndType(item.getContentUri(),item.getMimeType()).setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION),null));
}
 catch (Throwable t) {
Log.w(TAG,""String_Node_Str"",t);
Toast.makeText(activity,activity.getString(R.string.activity_not_found),Toast.LENGTH_SHORT).show();
}
break;
}
default :
throw new AssertionError();
}
return result;
}","private boolean execute(DataManager manager,JobContext jc,int cmd,Path path){
  boolean result=true;
  Log.v(TAG,""String_Node_Str"" + cmd + ""String_Node_Str""+ path);
  long startTime=System.currentTimeMillis();
switch (cmd) {
case R.id.action_confirm_delete:
    manager.delete(path);
  break;
case R.id.action_rotate_cw:
manager.rotate(path,90);
break;
case R.id.action_rotate_ccw:
manager.rotate(path,-90);
break;
case R.id.action_toggle_full_caching:
{
MediaObject obj=manager.getMediaObject(path);
int cacheFlag=obj.getCacheFlag();
if (cacheFlag == MediaObject.CACHE_FLAG_FULL) {
cacheFlag=MediaObject.CACHE_FLAG_SCREENNAIL;
}
 else {
cacheFlag=MediaObject.CACHE_FLAG_FULL;
}
obj.cache(cacheFlag);
break;
}
case R.id.action_show_on_map:
{
MediaItem item=(MediaItem)manager.getMediaObject(path);
double latlng[]=new double[2];
item.getLatLong(latlng);
if (GalleryUtils.isValidLocation(latlng[0],latlng[1])) {
GalleryUtils.showOnMap((Context)mActivity,latlng[0],latlng[1]);
}
break;
}
case R.id.action_import:
{
MediaObject obj=manager.getMediaObject(path);
result=obj.Import();
break;
}
case R.id.action_edit:
{
Activity activity=(Activity)mActivity;
MediaItem item=(MediaItem)manager.getMediaObject(path);
try {
activity.startActivity(Intent.createChooser(new Intent(Intent.ACTION_EDIT).setDataAndType(item.getContentUri(),item.getMimeType()).setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION),null));
}
 catch (Throwable t) {
Log.w(TAG,""String_Node_Str"",t);
Toast.makeText(activity,activity.getString(R.string.activity_not_found),Toast.LENGTH_SHORT).show();
}
break;
}
default :
throw new AssertionError();
}
Log.v(TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str""+ path);
return result;
}"
38702,"public void pause(){
  if (mTask != null) {
    mTask.cancel();
    mTask.waitDone();
    mDialog.dismiss();
    mDialog=null;
    mTask=null;
  }
}","public void pause(){
  stopTaskAndDismissDialog();
}"
38703,"public void prepareTextures(){
  if (mTileDecoder == null) {
    mTileDecoder=mThreadPool.submit(new TileDecoder());
  }
  if (mIsTextureFreed) {
    layoutTiles(mCenterX,mCenterY,mScale,mRotation);
    mIsTextureFreed=false;
    updateBackupTexture(mModel.getBackupImage());
  }
}","public void prepareTextures(){
  if (mTileDecoder == null) {
    mTileDecoder=mThreadPool.submit(new TileDecoder());
  }
  if (mIsTextureFreed) {
    layoutTiles(mCenterX,mCenterY,mScale,mRotation);
    mIsTextureFreed=false;
    updateBackupTexture(mModel != null ? mModel.getBackupImage() : null);
  }
}"
38704,"public void startAction(int action,int title,ProgressListener listener){
  ArrayList<Path> ids=mSelectionManager.getSelected(false);
  Utils.assertTrue(mDialog == null);
  Activity activity=(Activity)mActivity;
  mDialog=showProgressDialog(activity,title,ids.size());
  MediaOperation operation=new MediaOperation(action,ids,listener);
  mTask=mActivity.getThreadPool().submit(operation,null);
}","public void startAction(int action,int title,ProgressListener listener){
  ArrayList<Path> ids=mSelectionManager.getSelected(false);
  stopTaskAndDismissDialog();
  Activity activity=(Activity)mActivity;
  mDialog=showProgressDialog(activity,title,ids.size());
  MediaOperation operation=new MediaOperation(action,ids,listener);
  mTask=mActivity.getThreadPool().submit(operation,null);
}"
38705,"@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
      if (mDialog != null) {
        mDialog.dismiss();
        mDialog=null;
        mTask=null;
      }
      if (message.obj != null) {
        ProgressListener listener=(ProgressListener)message.obj;
        listener.onProgressComplete(message.arg1);
      }
      mSelectionManager.leaveSelectionMode();
      break;
    }
case MSG_TASK_UPDATE:
{
    if (mDialog != null)     mDialog.setProgress(message.arg1);
    if (message.obj != null) {
      ProgressListener listener=(ProgressListener)message.obj;
      listener.onProgressUpdate(message.arg1);
    }
    break;
  }
case MSG_DO_SHARE:
{
  ((Activity)mActivity).startActivity((Intent)message.obj);
  break;
}
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
      stopTaskAndDismissDialog();
      if (message.obj != null) {
        ProgressListener listener=(ProgressListener)message.obj;
        listener.onProgressComplete(message.arg1);
      }
      mSelectionManager.leaveSelectionMode();
      break;
    }
case MSG_TASK_UPDATE:
{
    if (mDialog != null)     mDialog.setProgress(message.arg1);
    if (message.obj != null) {
      ProgressListener listener=(ProgressListener)message.obj;
      listener.onProgressUpdate(message.arg1);
    }
    break;
  }
case MSG_DO_SHARE:
{
  ((Activity)mActivity).startActivity((Intent)message.obj);
  break;
}
}
}"
38706,"public Void run(JobContext jc){
  int index=0;
  DataManager manager=mActivity.getDataManager();
  int result=EXECUTION_RESULT_SUCCESS;
  for (  Path id : mItems) {
    if (jc.isCancelled()) {
      result=EXECUTION_RESULT_CANCEL;
      break;
    }
    try {
      if (!execute(manager,jc,mOperation,id))       result=EXECUTION_RESULT_FAIL;
    }
 catch (    Throwable th) {
      Log.e(TAG,""String_Node_Str"" + mOperation + ""String_Node_Str""+ id,th);
    }
    onProgressUpdate(index++,mListener);
  }
  onProgressComplete(result,mListener);
  return null;
}","public Void run(JobContext jc){
  int index=0;
  DataManager manager=mActivity.getDataManager();
  int result=EXECUTION_RESULT_SUCCESS;
  try {
    for (    Path id : mItems) {
      if (jc.isCancelled()) {
        result=EXECUTION_RESULT_CANCEL;
        break;
      }
      if (!execute(manager,jc,mOperation,id)) {
        result=EXECUTION_RESULT_FAIL;
      }
      onProgressUpdate(index++,mListener);
    }
  }
 catch (  Throwable th) {
    Log.e(TAG,""String_Node_Str"" + mOperation + ""String_Node_Str""+ th);
  }
 finally {
    onProgressComplete(result,mListener);
  }
  return null;
}"
38707,"public MenuExecutor(GalleryActivity activity,SelectionManager selectionManager){
  mActivity=Utils.checkNotNull(activity);
  mSelectionManager=Utils.checkNotNull(selectionManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
          if (mDialog != null) {
            mDialog.dismiss();
            mDialog=null;
            mTask=null;
          }
          if (message.obj != null) {
            ProgressListener listener=(ProgressListener)message.obj;
            listener.onProgressComplete(message.arg1);
          }
          mSelectionManager.leaveSelectionMode();
          break;
        }
case MSG_TASK_UPDATE:
{
        if (mDialog != null)         mDialog.setProgress(message.arg1);
        if (message.obj != null) {
          ProgressListener listener=(ProgressListener)message.obj;
          listener.onProgressUpdate(message.arg1);
        }
        break;
      }
case MSG_DO_SHARE:
{
      ((Activity)mActivity).startActivity((Intent)message.obj);
      break;
    }
}
}
}
;
}","public MenuExecutor(GalleryActivity activity,SelectionManager selectionManager){
  mActivity=Utils.checkNotNull(activity);
  mSelectionManager=Utils.checkNotNull(selectionManager);
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
switch (message.what) {
case MSG_TASK_COMPLETE:
{
          stopTaskAndDismissDialog();
          if (message.obj != null) {
            ProgressListener listener=(ProgressListener)message.obj;
            listener.onProgressComplete(message.arg1);
          }
          mSelectionManager.leaveSelectionMode();
          break;
        }
case MSG_TASK_UPDATE:
{
        if (mDialog != null)         mDialog.setProgress(message.arg1);
        if (message.obj != null) {
          ProgressListener listener=(ProgressListener)message.obj;
          listener.onProgressUpdate(message.arg1);
        }
        break;
      }
case MSG_DO_SHARE:
{
      ((Activity)mActivity).startActivity((Intent)message.obj);
      break;
    }
}
}
}
;
}"
38708,"private boolean execute(DataManager manager,JobContext jc,int cmd,Path path){
  boolean result=true;
switch (cmd) {
case R.id.action_confirm_delete:
    manager.delete(path);
  break;
case R.id.action_rotate_cw:
manager.rotate(path,90);
break;
case R.id.action_rotate_ccw:
manager.rotate(path,-90);
break;
case R.id.action_toggle_full_caching:
{
MediaObject obj=manager.getMediaObject(path);
int cacheFlag=obj.getCacheFlag();
if (cacheFlag == MediaObject.CACHE_FLAG_FULL) {
cacheFlag=MediaObject.CACHE_FLAG_SCREENNAIL;
}
 else {
cacheFlag=MediaObject.CACHE_FLAG_FULL;
}
obj.cache(cacheFlag);
break;
}
case R.id.action_show_on_map:
{
MediaItem item=(MediaItem)manager.getMediaObject(path);
double latlng[]=new double[2];
item.getLatLong(latlng);
if (GalleryUtils.isValidLocation(latlng[0],latlng[1])) {
GalleryUtils.showOnMap((Context)mActivity,latlng[0],latlng[1]);
}
break;
}
case R.id.action_import:
{
MediaObject obj=manager.getMediaObject(path);
result=obj.Import();
break;
}
case R.id.action_edit:
{
Activity activity=(Activity)mActivity;
MediaItem item=(MediaItem)manager.getMediaObject(path);
try {
activity.startActivity(Intent.createChooser(new Intent(Intent.ACTION_EDIT).setDataAndType(item.getContentUri(),item.getMimeType()).setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION),null));
}
 catch (Throwable t) {
Log.w(TAG,""String_Node_Str"",t);
Toast.makeText(activity,activity.getString(R.string.activity_not_found),Toast.LENGTH_SHORT).show();
}
break;
}
default :
throw new AssertionError();
}
return result;
}","private boolean execute(DataManager manager,JobContext jc,int cmd,Path path){
  boolean result=true;
  Log.v(TAG,""String_Node_Str"" + cmd + ""String_Node_Str""+ path);
  long startTime=System.currentTimeMillis();
switch (cmd) {
case R.id.action_confirm_delete:
    manager.delete(path);
  break;
case R.id.action_rotate_cw:
manager.rotate(path,90);
break;
case R.id.action_rotate_ccw:
manager.rotate(path,-90);
break;
case R.id.action_toggle_full_caching:
{
MediaObject obj=manager.getMediaObject(path);
int cacheFlag=obj.getCacheFlag();
if (cacheFlag == MediaObject.CACHE_FLAG_FULL) {
cacheFlag=MediaObject.CACHE_FLAG_SCREENNAIL;
}
 else {
cacheFlag=MediaObject.CACHE_FLAG_FULL;
}
obj.cache(cacheFlag);
break;
}
case R.id.action_show_on_map:
{
MediaItem item=(MediaItem)manager.getMediaObject(path);
double latlng[]=new double[2];
item.getLatLong(latlng);
if (GalleryUtils.isValidLocation(latlng[0],latlng[1])) {
GalleryUtils.showOnMap((Context)mActivity,latlng[0],latlng[1]);
}
break;
}
case R.id.action_import:
{
MediaObject obj=manager.getMediaObject(path);
result=obj.Import();
break;
}
case R.id.action_edit:
{
Activity activity=(Activity)mActivity;
MediaItem item=(MediaItem)manager.getMediaObject(path);
try {
activity.startActivity(Intent.createChooser(new Intent(Intent.ACTION_EDIT).setDataAndType(item.getContentUri(),item.getMimeType()).setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION),null));
}
 catch (Throwable t) {
Log.w(TAG,""String_Node_Str"",t);
Toast.makeText(activity,activity.getString(R.string.activity_not_found),Toast.LENGTH_SHORT).show();
}
break;
}
default :
throw new AssertionError();
}
Log.v(TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str""+ path);
return result;
}"
38709,"public void pause(){
  if (mTask != null) {
    mTask.cancel();
    mTask.waitDone();
    mDialog.dismiss();
    mDialog=null;
    mTask=null;
  }
}","public void pause(){
  stopTaskAndDismissDialog();
}"
38710,"public void prepareTextures(){
  if (mTileDecoder == null) {
    mTileDecoder=mThreadPool.submit(new TileDecoder());
  }
  if (mIsTextureFreed) {
    layoutTiles(mCenterX,mCenterY,mScale,mRotation);
    mIsTextureFreed=false;
    updateBackupTexture(mModel.getBackupImage());
  }
}","public void prepareTextures(){
  if (mTileDecoder == null) {
    mTileDecoder=mThreadPool.submit(new TileDecoder());
  }
  if (mIsTextureFreed) {
    layoutTiles(mCenterX,mCenterY,mScale,mRotation);
    mIsTextureFreed=false;
    updateBackupTexture(mModel != null ? mModel.getBackupImage() : null);
  }
}"
38711,"@Override public void onCreate(Bundle data,Bundle restoreState){
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  mActivity.getGalleryActionBar().setSelectedTab(data.getInt(AlbumSetPage.KEY_SELECTED_TAB_TYPE,FilterUtils.CLUSTER_BY_ALBUM));
  startTransition();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (actionBar != null) {
    actionBar.setSelectedTab(data.getInt(AlbumSetPage.KEY_SELECTED_TAB_TYPE,FilterUtils.CLUSTER_BY_ALBUM));
  }
  startTransition();
}"
38712,"public void onFutureDone(Future<Bitmap> future){
  mFuture=future;
  mMainHandler.sendMessage(mMainHandler.obtainMessage(MSG_RUN_OBJECT,this));
}","@Override public void onFutureDone(Future<Bitmap> future){
  mFuture=future;
  mMainHandler.sendMessage(mMainHandler.obtainMessage(MSG_RUN_OBJECT,this));
}"
38713,"private void updateScreenNail(long version,Future<Bitmap> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.screenNailTask == null) {
    Bitmap screenNail=future.get();
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  entry.screenNail=future.get();
  if (entry.screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,false);
    }
    for (int i=-1; i <= 1; ++i) {
      if (version == getVersion(mCurrentIndex + i)) {
        if (i == 0)         updateTileProvider(entry);
        mPhotoView.notifyImageInvalidated(i);
      }
    }
  }
  updateImageRequests();
}","private void updateScreenNail(long version,Future<Bitmap> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.screenNailTask != future) {
    Bitmap screenNail=future.get();
    if (screenNail != null)     screenNail.recycle();
    return;
  }
  entry.screenNailTask=null;
  entry.screenNail=future.get();
  if (entry.screenNail == null) {
    entry.failToLoad=true;
  }
 else {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,false);
    }
    for (int i=-1; i <= 1; ++i) {
      if (version == getVersion(mCurrentIndex + i)) {
        if (i == 0)         updateTileProvider(entry);
        mPhotoView.notifyImageInvalidated(i);
      }
    }
  }
  updateImageRequests();
}"
38714,"private void updateFullImage(long version,Future<BitmapRegionDecoder> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.fullImageTask == null) {
    BitmapRegionDecoder fullImage=future.get();
    if (fullImage != null)     fullImage.recycle();
    return;
  }
  entry.fullImageTask=null;
  entry.fullImage=future.get();
  if (entry.fullImage != null) {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,true);
    }
    if (version == getVersion(mCurrentIndex)) {
      updateTileProvider(entry);
      mPhotoView.notifyImageInvalidated(0);
    }
  }
  updateImageRequests();
}","private void updateFullImage(long version,Future<BitmapRegionDecoder> future){
  ImageEntry entry=mImageCache.get(version);
  if (entry == null || entry.fullImageTask != future) {
    BitmapRegionDecoder fullImage=future.get();
    if (fullImage != null)     fullImage.recycle();
    return;
  }
  entry.fullImageTask=null;
  entry.fullImage=future.get();
  if (entry.fullImage != null) {
    if (mDataListener != null) {
      mDataListener.onPhotoAvailable(version,true);
    }
    if (version == getVersion(mCurrentIndex)) {
      updateTileProvider(entry);
      mPhotoView.notifyImageInvalidated(0);
    }
  }
  updateImageRequests();
}"
38715,"@Override public void onCreate(Bundle data,Bundle restoreState){
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  mActivity.getGalleryActionBar().setSelectedTab(data.getInt(AlbumSetPage.KEY_SELECTED_TAB_TYPE,FilterUtils.CLUSTER_BY_ALBUM));
  startTransition();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  GalleryActionBar actionBar=mActivity.getGalleryActionBar();
  if (actionBar != null) {
    actionBar.setSelectedTab(data.getInt(AlbumSetPage.KEY_SELECTED_TAB_TYPE,FilterUtils.CLUSTER_BY_ALBUM));
  }
  startTransition();
}"
38716,"void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled(true);
  }
  activity.invalidateOptionsMenu();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    WindowManager.LayoutParams params=((Activity)mActivity).getWindow().getAttributes();
    params.systemUiVisibility=View.STATUS_BAR_HIDDEN;
    ((Activity)mActivity).getWindow().setAttributes(params);
  }
 else {
    WindowManager.LayoutParams params=((Activity)mActivity).getWindow().getAttributes();
    params.systemUiVisibility=View.STATUS_BAR_VISIBLE;
    ((Activity)mActivity).getWindow().setAttributes(params);
  }
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  onResume();
}","void resume(){
  Activity activity=(Activity)mActivity;
  ActionBar actionBar=activity.getActionBar();
  if (actionBar != null) {
    if ((mFlags & FLAG_HIDE_ACTION_BAR) != 0) {
      actionBar.hide();
    }
 else {
      actionBar.show();
    }
    int stateCount=mActivity.getStateManager().getStateCount();
    actionBar.setDisplayOptions(stateCount == 1 ? 0 : ActionBar.DISPLAY_HOME_AS_UP,ActionBar.DISPLAY_HOME_AS_UP);
    actionBar.setHomeButtonEnabled(true);
  }
  activity.invalidateOptionsMenu();
  if ((mFlags & FLAG_HIDE_STATUS_BAR) != 0) {
    WindowManager.LayoutParams params=((Activity)mActivity).getWindow().getAttributes();
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_LOW_PROFILE;
    ((Activity)mActivity).getWindow().setAttributes(params);
  }
 else {
    WindowManager.LayoutParams params=((Activity)mActivity).getWindow().getAttributes();
    params.systemUiVisibility=View.SYSTEM_UI_FLAG_VISIBLE;
    ((Activity)mActivity).getWindow().setAttributes(params);
  }
  ResultEntry entry=mReceivedResults;
  if (entry != null) {
    mReceivedResults=null;
    onStateResult(entry.requestCode,entry.resultCode,entry.resultData);
  }
  onResume();
}"
38717,"protected boolean onCreateActionBar(Menu menu){
  return false;
}","protected boolean onCreateActionBar(Menu menu){
  return true;
}"
38718,"@Override public void onCreate(Bundle data,Bundle restoreState){
  mHandler=new SynchronizedHandler(mActivity.getGLRoot()){
    @Override public void handleMessage(    Message message){
      Utils.assertTrue(message.what == MSG_GOTO_MANAGE_CACHE_PAGE);
      Bundle data=new Bundle();
      String mediaPath=mActivity.getDataManager().getTopSetPath(DataManager.INCLUDE_ALL);
      data.putString(AlbumSetPage.KEY_MEDIA_PATH,mediaPath);
      mActivity.getStateManager().startState(ManageCachePage.class,data);
    }
  }
;
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  startTransition();
}","@Override public void onCreate(Bundle data,Bundle restoreState){
  initializeViews();
  initializeData(data);
  mGetContent=data.getBoolean(Gallery.KEY_GET_CONTENT,false);
  mGetAlbum=data.getBoolean(Gallery.KEY_GET_ALBUM,false);
  mTitle=data.getString(AlbumSetPage.KEY_SET_TITLE);
  mSubtitle=data.getString(AlbumSetPage.KEY_SET_SUBTITLE);
  mEyePosition=new EyePosition(mActivity.getAndroidContext(),this);
  mDetailsSource=new MyDetailsSource();
  mActivity.getGalleryActionBar().setSelectedTab(data.getInt(AlbumSetPage.KEY_SELECTED_TAB_TYPE,FilterUtils.CLUSTER_BY_ALBUM));
  startTransition();
}"
38719,"@Override protected boolean onItemSelected(MenuItem item){
  Activity activity=(Activity)mActivity;
switch (item.getItemId()) {
case R.id.action_cancel:
    activity.setResult(Activity.RESULT_CANCELED);
  activity.finish();
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_details:
if (mAlbumSetDataAdapter.size() != 0) {
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
}
 else {
Toast.makeText(activity,activity.getText(R.string.no_albums_alert),Toast.LENGTH_SHORT).show();
}
return true;
case R.id.action_camera:
{
Intent intent=new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
activity.startActivity(intent);
return true;
}
case R.id.action_manage_offline:
{
mHandler.sendEmptyMessage(MSG_GOTO_MANAGE_CACHE_PAGE);
return true;
}
case R.id.action_sync_picasa_albums:
{
PicasaSource.requestSync(activity);
return true;
}
case R.id.action_settings:
{
activity.startActivity(new Intent(activity,GallerySettings.class));
return true;
}
default :
return false;
}
}","@Override protected boolean onItemSelected(MenuItem item){
  Activity activity=(Activity)mActivity;
switch (item.getItemId()) {
case R.id.action_cancel:
    activity.setResult(Activity.RESULT_CANCELED);
  activity.finish();
return true;
case R.id.action_select:
mSelectionManager.setAutoLeaveSelectionMode(false);
mSelectionManager.enterSelectionMode();
return true;
case R.id.action_details:
if (mAlbumSetDataAdapter.size() != 0) {
if (mShowDetails) {
hideDetails();
}
 else {
showDetails();
}
}
 else {
Toast.makeText(activity,activity.getText(R.string.no_albums_alert),Toast.LENGTH_SHORT).show();
}
return true;
case R.id.action_camera:
{
Intent intent=new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
activity.startActivity(intent);
return true;
}
case R.id.action_manage_offline:
{
Bundle data=new Bundle();
String mediaPath=mActivity.getDataManager().getTopSetPath(DataManager.INCLUDE_ALL);
data.putString(AlbumSetPage.KEY_MEDIA_PATH,mediaPath);
mActivity.getStateManager().startState(ManageCachePage.class,data);
return true;
}
case R.id.action_sync_picasa_albums:
{
PicasaSource.requestSync(activity);
return true;
}
case R.id.action_settings:
{
activity.startActivity(new Intent(activity,GallerySettings.class));
return true;
}
default :
return false;
}
}"
38720,"public void doCluster(int clusterType){
  String basePath=mMediaSet.getPath().toString();
  String newPath=FilterUtils.switchClusterPath(basePath,clusterType);
  Bundle data=new Bundle(getData());
  data.putString(AlbumSetPage.KEY_MEDIA_PATH,newPath);
  mAlbumSetView.savePositions(PositionRepository.getInstance(mActivity));
  mActivity.getStateManager().switchState(this,AlbumSetPage.class,data);
}","public void doCluster(int clusterType){
  String basePath=mMediaSet.getPath().toString();
  String newPath=FilterUtils.switchClusterPath(basePath,clusterType);
  Bundle data=new Bundle(getData());
  data.putString(AlbumSetPage.KEY_MEDIA_PATH,newPath);
  data.putInt(KEY_SELECTED_TAB_TYPE,clusterType);
  mAlbumSetView.savePositions(PositionRepository.getInstance(mActivity));
  mActivity.getStateManager().switchState(this,AlbumSetPage.class,data);
}"
38721,"public int getIndex(){
  return mIndex;
}","@Override public int getIndex(){
  return mIndex;
}"
38722,"public MediaDetails getDetails(){
  return mModel.getCurrentMediaItem().getDetails();
}","@Override public MediaDetails getDetails(){
  return mModel.getCurrentMediaItem().getDetails();
}"
38723,"public int findIndex(int indexHint){
  mIndex=indexHint;
  return indexHint;
}","@Override public int findIndex(int indexHint){
  mIndex=indexHint;
  return indexHint;
}"
38724,"public int size(){
  return mMediaSet != null ? mMediaSet.getMediaItemCount() : 1;
}","@Override public int size(){
  return mMediaSet != null ? mMediaSet.getMediaItemCount() : 1;
}"
38725,"private void saveData(SQLiteDatabase db,int oldVersion,ArrayList<Entry> data){
  if (oldVersion <= 2) {
    Cursor cursor=db.query(""String_Node_Str"",new String[]{FIELD_APPWIDGET_ID,FIELD_PHOTO_BLOB},null,null,null,null,null);
    if (cursor == null)     return;
    try {
      while (cursor.moveToNext()) {
        Entry entry=new Entry();
        entry.type=TYPE_SINGLE_PHOTO;
        entry.widgetId=cursor.getInt(0);
        entry.imageData=cursor.getBlob(1);
        data.add(entry);
      }
    }
  finally {
      cursor.close();
    }
  }
 else   if (oldVersion == 3) {
    Utils.debug(""String_Node_Str"",oldVersion);
    Cursor cursor=db.query(""String_Node_Str"",new String[]{FIELD_APPWIDGET_ID,FIELD_PHOTO_BLOB,FIELD_IMAGE_URI},null,null,null,null,null);
    if (cursor == null)     return;
    try {
      while (cursor.moveToNext()) {
        Entry entry=new Entry();
        entry.type=TYPE_SINGLE_PHOTO;
        entry.widgetId=cursor.getInt(0);
        entry.imageData=cursor.getBlob(1);
        entry.imageUri=cursor.getString(2);
        Utils.debug(""String_Node_Str"",entry.widgetId,entry.imageUri);
        data.add(entry);
      }
    }
  finally {
      cursor.close();
    }
  }
}","private void saveData(SQLiteDatabase db,int oldVersion,ArrayList<Entry> data){
  if (oldVersion <= 2) {
    Cursor cursor=db.query(""String_Node_Str"",new String[]{FIELD_APPWIDGET_ID,FIELD_PHOTO_BLOB},null,null,null,null,null);
    if (cursor == null)     return;
    try {
      while (cursor.moveToNext()) {
        Entry entry=new Entry();
        entry.type=TYPE_SINGLE_PHOTO;
        entry.widgetId=cursor.getInt(0);
        entry.imageData=cursor.getBlob(1);
        data.add(entry);
      }
    }
  finally {
      cursor.close();
    }
  }
 else   if (oldVersion == 3) {
    Cursor cursor=db.query(""String_Node_Str"",new String[]{FIELD_APPWIDGET_ID,FIELD_PHOTO_BLOB,FIELD_IMAGE_URI},null,null,null,null,null);
    if (cursor == null)     return;
    try {
      while (cursor.moveToNext()) {
        Entry entry=new Entry();
        entry.type=TYPE_SINGLE_PHOTO;
        entry.widgetId=cursor.getInt(0);
        entry.imageData=cursor.getBlob(1);
        entry.imageUri=cursor.getString(2);
        data.add(entry);
      }
    }
  finally {
      cursor.close();
    }
  }
}"
38726,"boolean decode(){
  int tileLength=(TILE_SIZE + 2 * TILE_BORDER);
  int borderLength=TILE_BORDER << mTileLevel;
  try {
    mDecodedTile=mModel.getTile(mTileLevel,mX - borderLength,mY - borderLength,tileLength);
    return mDecodedTile != null;
  }
 catch (  Throwable t) {
    Log.w(TAG,""String_Node_Str"",t);
    return false;
  }
}","boolean decode(){
  int tileLength=(TILE_SIZE + 2 * TILE_BORDER);
  int borderLength=TILE_BORDER << mTileLevel;
  try {
    mDecodedTile=DecodeUtils.ensureGLCompatibleBitmap(mModel.getTile(mTileLevel,mX - borderLength,mY - borderLength,tileLength));
    return mDecodedTile != null;
  }
 catch (  Throwable t) {
    Log.w(TAG,""String_Node_Str"",t);
    return false;
  }
}"
38727,"boolean decode(){
  int tileLength=(TILE_SIZE + 2 * TILE_BORDER);
  int borderLength=TILE_BORDER << mTileLevel;
  try {
    mDecodedTile=mModel.getTile(mTileLevel,mX - borderLength,mY - borderLength,tileLength);
    return mDecodedTile != null;
  }
 catch (  Throwable t) {
    Log.w(TAG,""String_Node_Str"",t);
    return false;
  }
}","boolean decode(){
  int tileLength=(TILE_SIZE + 2 * TILE_BORDER);
  int borderLength=TILE_BORDER << mTileLevel;
  try {
    mDecodedTile=DecodeUtils.ensureGLCompatibleBitmap(mModel.getTile(mTileLevel,mX - borderLength,mY - borderLength,tileLength));
    return mDecodedTile != null;
  }
 catch (  Throwable t) {
    Log.w(TAG,""String_Node_Str"",t);
    return false;
  }
}"
38728,"private Database createDatabaseIfNotExists(String dbName){
  try {
    final List<Database> dbList=documentDbFactory.getDocumentClient().queryDatabases(new SqlQuerySpec(""String_Node_Str"",new SqlParameterCollection(new SqlParameter(""String_Node_Str"",dbName))),null).getQueryIterable().toList();
    if (!dbList.isEmpty()) {
      return dbList.get(0);
    }
 else {
      final Database db=new Database();
      db.setId(dbName);
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"",dbName);
      }
      final Resource resource=documentDbFactory.getDocumentClient().createDatabase(db,null).getResource();
      if (resource instanceof Database) {
        return (Database)resource;
      }
 else {
        LOGGER.error(""String_Node_Str"" + resource.getSelfLink());
        throw new DatabaseCreationException(""String_Node_Str"" + resource.getSelfLink());
      }
    }
  }
 catch (  DocumentClientException ex) {
    throw new DocumentDBAccessException(""String_Node_Str"",ex);
  }
}","private Database createDatabaseIfNotExists(String dbName){
  try {
    final List<Database> dbList=documentDbFactory.getDocumentClient().queryDatabases(new SqlQuerySpec(""String_Node_Str"",new SqlParameterCollection(new SqlParameter(""String_Node_Str"",dbName))),null).getQueryIterable().toList();
    if (!dbList.isEmpty()) {
      return dbList.get(0);
    }
 else {
      final Database db=new Database();
      db.setId(dbName);
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"",dbName);
      }
      final Resource resource=documentDbFactory.getDocumentClient().createDatabase(db,null).getResource();
      if (resource instanceof Database) {
        return (Database)resource;
      }
 else {
        final String errorMessage=MessageFormat.format(""String_Node_Str"",dbName,resource.getSelfLink());
        LOGGER.error(errorMessage);
        throw new DatabaseCreationException(errorMessage);
      }
    }
  }
 catch (  DocumentClientException ex) {
    throw new DocumentDBAccessException(""String_Node_Str"",ex);
  }
}"
38729,"public DocumentDbQueryCreator(PartTree tree,DocumentDbParameterAccessor accessor,MappingContext<?,DocumentDbPersistentProperty> mappingContext){
  super(tree,accessor);
  this.accessor=accessor;
  this.mappingContext=mappingContext;
}","public DocumentDbQueryCreator(PartTree tree,DocumentDbParameterAccessor accessor,MappingContext<?,DocumentDbPersistentProperty> mappingContext){
  super(tree,accessor);
  this.mappingContext=mappingContext;
}"
38730,"public static ZooKeeperLocal provideZooKeeperLocal(){
  Properties zkProperties=new Properties();
  zkProperties.put(""String_Node_Str"",(String)String.valueOf(zookeeperPort));
  zkProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  zkProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  try {
    FileUtils.deleteDirectory(new File((String)zkProperties.get(""String_Node_Str"")));
    zookeeper=new ZooKeeperLocal(zkProperties);
    zookeeper.start();
    return zookeeper;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}","public static ZooKeeperLocal provideZooKeeperLocal(){
  final Properties zkProperties=new Properties();
  zkProperties.put(""String_Node_Str"",String.valueOf(zookeeperPort));
  zkProperties.put(""String_Node_Str"",""String_Node_Str"");
  zkProperties.put(""String_Node_Str"",""String_Node_Str"");
  try {
    FileUtils.deleteDirectory(new File((String)zkProperties.get(""String_Node_Str"")));
    zookeeper=new ZooKeeperLocal(zkProperties);
    zookeeper.start();
    return zookeeper;
  }
 catch (  final IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}"
38731,"public static void setZookeeper(ZooKeeperLocal zookeeper){
  KafkaServer.zookeeper=zookeeper;
}","public static void setZookeeper(final ZooKeeperLocal zookeeper){
  KafkaServer.zookeeper=zookeeper;
}"
38732,"public static void setKafkaLocal(KafkaLocal kafkaLocal){
  KafkaServer.kafkaLocal=kafkaLocal;
}","public static void setKafkaLocal(final KafkaLocal kafkaLocal){
  KafkaServer.kafkaLocal=kafkaLocal;
}"
38733,"/** 
 * Starts a local Kafka Server (inlcudes zookeper and kafka) , if it has not been started already.
 * @return The port of the zookeeper server.
 */
public static Integer startKafkaServer(String topicName){
  if (null == kafkaLocal) {
    kafkaLocal=provideKafkaServer();
    createTopicWithThreePartitions(topicName);
  }
  return zookeeperPort;
}","/** 
 * Starts a local Kafka Server (inlcudes zookeper and kafka) , if it has not been started already. FIXME: currently, application-test config assumes port 32000; if server starts on other port, tests will fail!
 * @return The port of the zookeeper server.
 */
public static Integer startKafkaServer(final String topicName){
  if (null == kafkaLocal) {
    kafkaLocal=provideKafkaServer();
    createTopicWithThreePartitions(topicName);
  }
  return zookeeperPort;
}"
38734,"public static void setZookeeperPort(Integer zookeeperPort){
  KafkaServer.zookeeperPort=zookeeperPort;
}","public static void setZookeeperPort(final Integer zookeeperPort){
  KafkaServer.zookeeperPort=zookeeperPort;
}"
38735,"public static void createTopicWithThreePartitions(String topicName){
  Integer sessionTimeoutMs=10000;
  Integer connectionTimeoutMs=10000;
  ZkConnection zkConnection=new ZkConnection(""String_Node_Str"" + String.valueOf(zookeeperPort),sessionTimeoutMs);
  ZkClient zkClient=new ZkClient(zkConnection,connectionTimeoutMs,ZKStringSerializer$.MODULE$);
  ZkUtils zkUtils=new ZkUtils(zkClient,zkConnection,false);
  Integer numPartitions=3;
  Integer replicationFactor=1;
  Properties topicConfig=new Properties();
  try {
    LOG.info(""String_Node_Str"" + topicName);
    AdminUtils.deleteTopic(zkUtils,topicName);
  }
 catch (  UnknownTopicOrPartitionException e) {
    LOG.info(""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"" + topicName);
  AdminUtils.createTopic(zkUtils,topicName,numPartitions,replicationFactor,topicConfig,null);
  zkClient.close();
}","public static void createTopicWithThreePartitions(final String topicName){
  final Integer sessionTimeoutMs=10000;
  final Integer connectionTimeoutMs=10000;
  final ZkConnection zkConnection=new ZkConnection(""String_Node_Str"" + String.valueOf(zookeeperPort),sessionTimeoutMs);
  final ZkClient zkClient=new ZkClient(zkConnection,connectionTimeoutMs,ZKStringSerializer$.MODULE$);
  final ZkUtils zkUtils=new ZkUtils(zkClient,zkConnection,false);
  final Integer numPartitions=3;
  final Integer replicationFactor=1;
  final Properties topicConfig=new Properties();
  try {
    LOG.info(""String_Node_Str"" + topicName);
    AdminUtils.deleteTopic(zkUtils,topicName);
  }
 catch (  final UnknownTopicOrPartitionException e) {
    LOG.info(""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"" + topicName);
  AdminUtils.createTopic(zkUtils,topicName,numPartitions,replicationFactor,topicConfig,null);
  zkClient.close();
}"
38736,"public static KafkaLocal provideKafkaServer(){
  Properties kafkaProperties=new Properties();
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"" + String.valueOf(zookeeperPort));
  kafkaProperties.put(""String_Node_Str"",(String)String.valueOf(kafkaPort));
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",(String)""String_Node_Str"");
  try {
    FileUtils.deleteDirectory(new File((String)kafkaProperties.get(""String_Node_Str"")));
    ZooKeeperLocal zooKeeperLocal=provideZooKeeperLocal();
    KafkaLocal kafka=new KafkaLocal(kafkaProperties,zooKeeperLocal);
    kafka.start();
    Thread.sleep(2000);
    return ((KafkaLocal)(kafka));
  }
 catch (  IOException|InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}","public static KafkaLocal provideKafkaServer(){
  final Properties kafkaProperties=new Properties();
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"" + String.valueOf(zookeeperPort));
  kafkaProperties.put(""String_Node_Str"",String.valueOf(kafkaPort));
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  kafkaProperties.put(""String_Node_Str"",""String_Node_Str"");
  try {
    FileUtils.deleteDirectory(new File((String)kafkaProperties.get(""String_Node_Str"")));
    final ZooKeeperLocal zooKeeperLocal=provideZooKeeperLocal();
    final KafkaLocal kafka=new KafkaLocal(kafkaProperties,zooKeeperLocal);
    kafka.start();
    Thread.sleep(2000);
    return ((kafka));
  }
 catch (  IOException|InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}"
38737,"public static void setKafkaPort(Integer kafkaPort){
  KafkaServer.kafkaPort=kafkaPort;
}","public static void setKafkaPort(final Integer kafkaPort){
  KafkaServer.kafkaPort=kafkaPort;
}"
38738,"public static ProductEntity of(final Product product){
}","public static ProductEntity of(final Product product){
  ProductEntity productEntity=new ProductEntity();
  productEntity.name=product.getName();
  productEntity.vendor=product.getVendor();
  productEntity.price=product.getPrice();
  productEntity.description=product.getDescription();
  productEntity.productNumber=product.getProductNumber();
  productEntity.image=product.getImage();
  productEntity.version=product.getVersion();
  return productEntity;
}"
38739,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) public Product addProduct(final Product product){
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) public Product addProduct(final Product product){
  return null;
}"
38740,"@Override public CompletionStage<Response<ByteString>> getTemplate(final RouteMatch match,final RequestContext context){
  return CompletableFuture.completedFuture(Response.of(Status.OK,ByteString.encodeUtf8(SERVICE_RESPONSE)));
}","@Override public CompletionStage<Response<ByteString>> getTemplate(final RouteMatch match,final RequestContext context){
  return CompletableFuture.completedFuture(Response.of(status,ByteString.encodeUtf8(responseBody)));
}"
38741,"private RuleRouter<Match> aRouter(){
  final Rule<Match> sampleRule=Rule.fromUri(""String_Node_Str"",""String_Node_Str"",Match.of(""String_Node_Str"",TEMPLATE));
  return RuleRouter.of(singletonList(sampleRule));
}","private RuleRouter<Match> aRouter(final String pattern,final StaticBackendRoutes.RouteType routeType){
  final Rule<Match> sampleRule=Rule.fromUri(pattern,""String_Node_Str"",Match.of(""String_Node_Str"",routeType));
  return RuleRouter.of(singletonList(sampleRule));
}"
38742,"private RequestContext aContext(){
  final Request request=mock(Request.class);
  when(request.uri()).thenReturn(""String_Node_Str"");
  when(request.service()).thenReturn(Optional.empty());
  when(request.method()).thenReturn(""String_Node_Str"");
  final RequestContext context=mock(RequestContext.class);
  when(context.request()).thenReturn(request);
  when(context.requestScopedClient()).thenReturn(mock(Client.class));
  return context;
}","private RequestContext aContext(){
  final Request request=mock(Request.class);
  when(request.uri()).thenReturn(""String_Node_Str"");
  when(request.service()).thenReturn(Optional.empty());
  when(request.method()).thenReturn(""String_Node_Str"");
  final RequestContext context=mock(RequestContext.class);
  when(context.request()).thenReturn(request);
  Client client=mock(Client.class);
  when(client.send(any())).thenThrow(new RuntimeException());
  when(context.requestScopedClient()).thenReturn(client);
  return context;
}"
38743,"private RuleRouter<Match> aRouter(){
  final Rule<Match> sampleRule=Rule.fromUri(""String_Node_Str"",""String_Node_Str"",Match.of(""String_Node_Str""));
  return RuleRouter.of(singletonList(sampleRule));
}","private RuleRouter<Match> aRouter(){
  final Rule<Match> sampleRule=Rule.fromUri(""String_Node_Str"",""String_Node_Str"",Match.of(""String_Node_Str"",RouteType.TEMPLATE));
  return RuleRouter.of(singletonList(sampleRule));
}"
38744,"@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  byte[] bytes=(byte[])msg;
  if (bytes.length == QuitPacket.QUIT.length && bytes[4] == MySQLPacket.COM_QUIT) {
    ctx.close();
    return;
  }
  AuthPacket authPacket=new AuthPacket();
  authPacket.read(bytes);
  frontendConnection.setHost(((InetSocketAddress)ctx.channel().remoteAddress()).getAddress().getHostAddress());
  frontendConnection.setPort(((InetSocketAddress)ctx.channel().remoteAddress()).getPort());
  frontendConnection.setLocalPort(((InetSocketAddress)ctx.channel().localAddress()).getPort());
  if (!checkUser(authPacket.user,frontendConnection.getHost())) {
    failure(ErrorCode.ER_ACCESS_DENIED_ERROR,""String_Node_Str"" + authPacket.user + ""String_Node_Str"");
    return;
  }
  if (!checkPassword(authPacket.password,authPacket.user)) {
    failure(ErrorCode.ER_ACCESS_DENIED_ERROR,""String_Node_Str"" + authPacket.user + ""String_Node_Str"");
    return;
  }
switch (checkSchema(authPacket.database,authPacket.user)) {
case ErrorCode.ER_BAD_DB_ERROR:
    failure(ErrorCode.ER_BAD_DB_ERROR,""String_Node_Str"" + authPacket.database + ""String_Node_Str"");
  break;
case ErrorCode.ER_DBACCESS_DENIED_ERROR:
String s=""String_Node_Str"" + authPacket.user + ""String_Node_Str""+ authPacket.database+ ""String_Node_Str"";
failure(ErrorCode.ER_DBACCESS_DENIED_ERROR,s);
break;
default :
success(authPacket,ctx);
}
super.channelRead(ctx,msg);
}","@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  byte[] bytes=(byte[])msg;
  if (bytes.length == QuitPacket.QUIT.length && bytes[4] == MySQLPacket.COM_QUIT) {
    ctx.close();
    return;
  }
  AuthPacket authPacket=new AuthPacket();
  authPacket.read(bytes);
  frontendConnection.setHost(((InetSocketAddress)ctx.channel().remoteAddress()).getAddress().getHostAddress());
  frontendConnection.setPort(((InetSocketAddress)ctx.channel().remoteAddress()).getPort());
  frontendConnection.setLocalPort(((InetSocketAddress)ctx.channel().localAddress()).getPort());
  if (!checkUser(authPacket.user,frontendConnection.getHost())) {
    failure(ErrorCode.ER_ACCESS_DENIED_ERROR,""String_Node_Str"" + authPacket.user + ""String_Node_Str"");
    return;
  }
  if (!checkPassword(authPacket.password,authPacket.user)) {
    failure(ErrorCode.ER_ACCESS_DENIED_ERROR,""String_Node_Str"" + authPacket.user + ""String_Node_Str"");
    return;
  }
switch (checkSchema(authPacket.database,authPacket.user)) {
case ErrorCode.ER_BAD_DB_ERROR:
    failure(ErrorCode.ER_BAD_DB_ERROR,""String_Node_Str"" + authPacket.database + ""String_Node_Str"");
  break;
case ErrorCode.ER_DBACCESS_DENIED_ERROR:
String s=""String_Node_Str"" + authPacket.user + ""String_Node_Str""+ authPacket.database+ ""String_Node_Str"";
failure(ErrorCode.ER_DBACCESS_DENIED_ERROR,s);
break;
default :
success(authPacket,ctx);
}
}"
38745,"public static void response(ServerConnection c){
  ByteBuf buf=c.getChannelHandlerContext().alloc().buffer();
  buf=header.writeBuf(buf);
  for (  FieldPacket field : fields) {
    buf=field.writeBuf(buf);
  }
  buf=eof.writeBuf(buf);
  byte packetId=eof.packetId;
  RowDataPacket row=new RowDataPacket(FIELD_COUNT);
  row.add(VERSION_COMMENT);
  row.packetId=++packetId;
  buf=row.writeBuf(buf);
  EOFPacket lastEof=new EOFPacket();
  lastEof.packetId=++packetId;
  buf=lastEof.writeBuf(buf);
  c.getChannelHandlerContext().writeAndFlush(buf);
}","public static void response(ServerConnection c){
  ByteBuf buf=c.getChannelHandlerContext().alloc().buffer();
  buf=header.writeBuf(buf);
  for (  FieldPacket field : fields) {
    buf=field.writeBuf(buf);
  }
  buf=eof.writeBuf(buf);
  byte packetId=eof.packetId;
  RowDataPacket row=new RowDataPacket(FIELD_COUNT);
  row.add(VERSION_COMMENT);
  row.packetId=++packetId;
  buf=row.writeBuf(buf);
  EOFPacket lastEof=new EOFPacket();
  lastEof.packetId=++packetId;
  buf=lastEof.writeBuf(buf);
  c.writeByteBuf(buf);
}"
38746,"@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  byte[] data=(byte[])msg;
  source.setChannelHandlerContext(ctx);
  source.getConfigLatch().await();
  try {
    HandshakePacket packet=this.source.getShakePacket();
    if (packet == null) {
      packet=new HandshakePacket();
      packet.read(data);
      source.setShakePacket(packet);
      source.setThreadId(packet.threadId);
      int charsetIndex=(packet.serverCharsetIndex & 0xff);
      String charset=CharsetUtil.getCharset(charsetIndex);
      if (charset != null) {
        source.setCharsetIndex(charsetIndex);
        source.setCharset(charset);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + charsetIndex);
      }
      source.authenticate();
    }
 else {
switch (data[4]) {
case OkPacket.FIELD_COUNT:
        source.setAuthenticated(true);
      ctx.pipeline().replace(BackendHandlerNameEnum.MYSQL_AUTH.getCode(),BackendHandlerNameEnum.MYSQL_CONN.getCode(),new BackendMySQLConnectionHandler(source));
    source.getHandler().connectionAcquired(source);
  break;
case ErrorPacket.FIELD_COUNT:
ErrorPacket err=new ErrorPacket();
err.read(data);
throw new RuntimeException(new String(err.message));
case EOFPacket.FIELD_COUNT:
auth323(data[3]);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Exception e) {
this.source.getHandler().connectionError(e,source);
throw e;
}
super.channelRead(ctx,msg);
}","@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  byte[] data=(byte[])msg;
  source.setChannelHandlerContext(ctx);
  source.getConfigLatch().await();
  try {
    HandshakePacket packet=this.source.getShakePacket();
    if (packet == null) {
      packet=new HandshakePacket();
      packet.read(data);
      source.setShakePacket(packet);
      source.setThreadId(packet.threadId);
      int charsetIndex=(packet.serverCharsetIndex & 0xff);
      String charset=CharsetUtil.getCharset(charsetIndex);
      if (charset != null) {
        source.setCharsetIndex(charsetIndex);
        source.setCharset(charset);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + charsetIndex);
      }
      source.authenticate();
    }
 else {
switch (data[4]) {
case OkPacket.FIELD_COUNT:
        source.setAuthenticated(true);
      ctx.pipeline().replace(BackendHandlerNameEnum.MYSQL_AUTH.getCode(),BackendHandlerNameEnum.MYSQL_CONN.getCode(),new BackendMySQLConnectionHandler(source));
    source.getHandler().connectionAcquired(source);
  break;
case ErrorPacket.FIELD_COUNT:
ErrorPacket err=new ErrorPacket();
err.read(data);
throw new RuntimeException(new String(err.message));
case EOFPacket.FIELD_COUNT:
auth323(data[3]);
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Exception e) {
this.source.getHandler().connectionError(e,source);
throw e;
}
}"
38747,"/** 
 * You should not need to care about this method. In the unlikely case where you actually want all the cells of your ListView to actually be the same one, it is left protected and not private so you can override it and avoid the warnings being spouted at you. Else, the idea is that a set of cells is created and they share the elements one after another during scrolling and JavaFX might generate more of them later so we should just not make any assumption and expect all of them to be different and not singletons.
 */
protected void ensureCorrectSpringScoping(){
synchronized (HAS_CHECKED_BEAN_DEFINITIONS) {
    if (HAS_CHECKED_BEAN_DEFINITIONS.get())     return;
    final ConfigurableListableBeanFactory beanFactory=applicationContext.getBeanFactory();
    Stream.of(ComponentCellFxmlController.class,ComponentListCell.class).map(beanFactory::getBeanNamesForType).flatMap(Arrays::stream).forEach(pBean -> {
      final String effectiveScope=beanFactory.getBeanDefinition(pBean).getScope();
      if (ConfigurableBeanFactory.SCOPE_PROTOTYPE.equals(effectiveScope)) {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",pBean);
      }
    }
);
    HAS_CHECKED_BEAN_DEFINITIONS.set(true);
  }
}","/** 
 * You should not need to care about this method. In the unlikely case where you actually want all the cells of your ListView to actually be the same one, it is left protected and not private so you can override it and avoid the warnings being spouted at you. Else, the idea is that a set of cells is created and they share the elements one after another during scrolling and JavaFX might generate more of them later so we should just not make any assumption and expect all of them to be different and not singletons.
 */
protected void ensureCorrectSpringScoping(){
synchronized (HAS_CHECKED_BEAN_DEFINITIONS) {
    if (HAS_CHECKED_BEAN_DEFINITIONS.get())     return;
    final ConfigurableListableBeanFactory beanFactory=applicationContext.getBeanFactory();
    Stream.of(ComponentCellFxmlController.class,ComponentListCell.class).map(beanFactory::getBeanNamesForType).flatMap(Arrays::stream).forEach(pBean -> {
      final String effectiveScope=beanFactory.getBeanDefinition(pBean).getScope();
      if (!ConfigurableBeanFactory.SCOPE_PROTOTYPE.equals(effectiveScope)) {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",pBean);
      }
    }
);
    HAS_CHECKED_BEAN_DEFINITIONS.set(true);
  }
}"
38748,"/** 
 * This method stores your instances in a   {@link ConcurrentHashMap} that looks like this :<br>|-- CommonInst1 --<br> |                |-- Selector1 -&gt; Instance 1 of class  {@link V}<br> |                |-- Selector2 -&gt; Instance 2 of class   {@link V}<br> |<br> |-- CommonInst2 --<br> |                |-- Selector# -&gt; Instance # of class   {@link V}<br> |                ...<br> |                |-- SelectorN -&gt; Instance N of class   {@link V}<br> ...<br> |<br> <p> The point is that ""selectors"" are anything you want them to be, whether it be the hashcode of the instance (but you won't be able to access it easily later), or some kind of related Node. Whatever fits your model in the best way. <p> Be wary of collisions (i.e. Instance 1 and 2 having the same selector) as it replaces instances in case of collision. <p> You are responsible for providing correct and non-colliding selectors.
 * @param parent   An instance, typically an enum member
 * @param selector The selector that you have to provide to recover this particular instance later
 * @param instance The instance to save.
 * @return A map entry containing the selector and the controller registered in case you need it.
 * @throws RuntimeException in case there was an error in saving the instance.
 */
public Map.Entry<Selector,V> registerMultiple(final K parent,final Selector selector,final V instance){
  final HashMap<Selector,V> newEntryMap=new HashMap<>();
  newEntryMap.put(selector,instance);
  final Optional<Map.Entry<Selector,V>> newEntry=this.prototypes.merge(parent,newEntryMap,this::mergePrototypes).entrySet().stream().filter(entry -> entry.getKey().equals(selector)).findAny();
  return newEntry.orElseThrow(RuntimeException::new);
}","/** 
 * This method stores your instances in a   {@link ConcurrentHashMap} that looks like this :<br>|-- K1 --<br> |        |-- Selector1 -&gt; Instance 1 of class  {@link V}<br> |        |-- Selector2 -&gt; Instance 2 of class   {@link V}<br> |<br> |-- K2 --<br> |        |-- Selector# -&gt; Instance # of class   {@link V}<br> |        ...<br> |        |-- SelectorN -&gt; Instance N of class   {@link V}<br> ...<br> |<br> <p> The point is that ""selectors"" are anything you want them to be, whether it be the hashcode of the instance (but you won't be able to access it easily later), or some kind of related Node. Whatever fits your model in the best way. <p> Be wary of collisions (i.e. Instance 1 and 2 having the same selector) as it replaces instances in case of collision. <p> You are responsible for providing correct and non-colliding selectors.
 * @param parent   An instance, typically an enum member
 * @param selector The selector that you have to provide to recover this particular instance later
 * @param instance The instance to save.
 * @return A map entry containing the selector and the controller registered in case you need it.
 * @throws RuntimeException in case there was an error in saving the instance.
 */
public V registerMultiple(final K parent,final Selector selector,final V instance){
  if (!this.prototypes.containsKey(parent)) {
    this.prototypes.put(parent,new ConcurrentHashMap<>());
  }
  return this.prototypes.get(parent).put(selector,instance);
}"
38749,"@Test public void getAll(){
  this.instanceManager.registerSingle(PARENT,ACTUAL_1);
  this.instanceManager.registerSingle(PARENT,ACTUAL_2);
  this.instanceManager.registerMultiple(PARENT,SEL_1,ACTUAL_1);
  this.instanceManager.registerMultiple(PARENT,SEL_2,ACTUAL_2);
  final List<Object> all=this.instanceManager.getAll(PARENT);
  assertThat(all).containsExactlyInAnyOrder(ACTUAL_1,ACTUAL_2,ACTUAL_2);
}","@Test public void getAll(){
  this.instanceManager.registerSingle(PARENT,ACTUAL_1);
  this.instanceManager.registerSingle(PARENT,ACTUAL_2);
  this.instanceManager.registerMultiple(PARENT,SEL_1,ACTUAL_1);
  this.instanceManager.registerMultiple(PARENT,SEL_2,ACTUAL_2);
  final List<String> all=this.instanceManager.getAll(PARENT);
  assertThat(all).containsExactlyInAnyOrder(ACTUAL_1,ACTUAL_2,ACTUAL_2);
}"
38750,"@Before public void setUp(){
  this.instanceManager=new AbstractInstanceManager<Object,Object,Object>(){
  }
;
}","@Before public void setUp(){
  this.instanceManager=new AbstractInstanceManager<String,String>(){
  }
;
}"
38751,"/** 
 * This method gets the   {@link Path} associated to a classpath-located file.
 * @param resourceRelativePath The path from the root of the classpath (target/classes/ in a maven project)
 * @return The path associated with resource at said relative path to classpath.
 */
@SuppressWarnings(""String_Node_Str"") public static Try<URL> getResourceURL(final String resourceRelativePath){
  final ClassLoader classLoader=Resources.class.getClassLoader();
  return Try.of(() -> classLoader).map(cl -> cl.getResource(resourceRelativePath)).map(Objects::requireNonNull).mapFailure(Case($(err -> err instanceof NullPointerException | err instanceof NoSuchFileException),err -> new IllegalArgumentException(""String_Node_Str"" + getBaseURL().toExternalForm() + resourceRelativePath,err)));
}","/** 
 * This method gets the   {@link Path} associated to a classpath-located file.
 * @param resourceRelativePath The path from the root of the classpath (target/classes/ in a maven project)
 * @return The path associated with resource at said relative path to classpath.
 */
@SuppressWarnings(""String_Node_Str"") public static Try<URL> getResourceURL(final String resourceRelativePath){
  final ClassLoader classLoader=Resources.class.getClassLoader();
  return Try.of(() -> classLoader).map(cl -> cl.getResource(resourceRelativePath)).map(Objects::requireNonNull).mapFailure(Case($(err -> err instanceof NullPointerException || err instanceof NoSuchFileException),err -> new IllegalArgumentException(""String_Node_Str"" + getBaseURL().toExternalForm() + resourceRelativePath,err)));
}"
38752,"private Resources(){
}","private Resources(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
38753,"private void pushClipboardTestData(Clipboard clipboard){
  clipboard.setContents(new Transferable(){
    private final String value=""String_Node_Str"";
    @Override public DataFlavor[] getTransferDataFlavors(){
      return new DataFlavor[]{DataFlavor.stringFlavor};
    }
    @Override public boolean isDataFlavorSupported(    DataFlavor flavor){
      return flavor.equals(DataFlavor.stringFlavor);
    }
    @Override public Object getTransferData(    DataFlavor flavor){
      return value;
    }
  }
,(t,co) -> {
  }
);
}","private void pushClipboardTestData(Clipboard clipboard){
  clipboard.setContents(new Transferable(){
    @Override public DataFlavor[] getTransferDataFlavors(){
      return new DataFlavor[]{DataFlavor.stringFlavor};
    }
    @Override public boolean isDataFlavorSupported(    DataFlavor flavor){
      return flavor.equals(DataFlavor.stringFlavor);
    }
    @Override public Object getTransferData(    DataFlavor flavor){
      return TEST_CB_VALUE;
    }
  }
,(t,co) -> {
  }
);
}"
38754,"@Override public Object getTransferData(DataFlavor flavor){
  return value;
}","@Override public Object getTransferData(DataFlavor flavor){
  return TEST_CB_VALUE;
}"
38755,"@SuppressWarnings(""String_Node_Str"") @Test public void asyncAwtRunnableWithRequirement(){
  AwtUtils.asyncAwtRunnableWithRequirement(Toolkit.getDefaultToolkit()::getSystemClipboard,this::pushClipboardTestData);
  final CompletionStage<Try<Object>> asyncCb=AwtUtils.asyncAwtCallbackWithRequirement(Toolkit.getDefaultToolkit()::getSystemClipboard,cb -> Try.of(() -> cb.getData(DataFlavor.stringFlavor)));
  final Try<Object> clipboardLoad=Try.of(asyncCb.toCompletableFuture()::get);
  assertThat(clipboardLoad.isSuccess()).isTrue();
  assertThat(((Try<Object>)clipboardLoad.get()).get()).isEqualTo(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Test public void asyncAwtRunnableWithRequirement(){
  AwtUtils.asyncAwtRunnableWithRequirement(Toolkit.getDefaultToolkit()::getSystemClipboard,this::pushClipboardTestData);
  final CompletionStage<Try<Object>> asyncCb=AwtUtils.asyncAwtCallbackWithRequirement(Toolkit.getDefaultToolkit()::getSystemClipboard,cb -> Try.of(() -> cb.getData(DataFlavor.stringFlavor)));
  final Try<Object> clipboardLoad=Try.of(asyncCb.toCompletableFuture()::get);
  assertThat(clipboardLoad.isSuccess()).isTrue();
  assertThat(((Try<Object>)clipboardLoad.get()).get()).isEqualTo(TEST_CB_VALUE);
}"
38756,"public static void main(final String... args){
  final SpringApplicationBuilder sab=new SpringApplicationBuilder(__main_stub.class).headless(false).web(WebApplicationType.NONE);
  try (ConfigurableApplicationContext ctx=sab.run(args)){
    LOG.info(""String_Node_Str"");
    ctx.close();
    throw new IllegalStateException(""String_Node_Str"");
  }
 }","public static void main(final String... args){
  final SpringApplicationBuilder sab=new SpringApplicationBuilder(__main_stub.class).headless(false).web(WebApplicationType.NONE);
  final ConfigurableApplicationContext ctx=sab.run(args);
  LOG.info(""String_Node_Str"");
  ctx.close();
  throw new IllegalStateException(""String_Node_Str"");
}"
38757,"@Test(expected=RuntimeException.class) public void main(){
  __main_stub.main();
}","@Test(expected=IllegalStateException.class) public void main(){
  __main_stub.main();
}"
38758,"@Test public void getCssContent() throws IOException {
  final FxmlStylesheet stylesheet=this.stylesheetLoading.getOrElseThrow(IOException::new);
  assertThat(stylesheet.getCssContent()).isEqualTo(TEST_STYLE_CONTENT);
}","@Test public void getCssContent() throws IOException {
  final FxmlStylesheet stylesheet=this.stylesheetLoading.getOrElseThrow(IOException::new);
  assertThat(stylesheet.getCssContent()).isEqualToIgnoringWhitespace(TEST_STYLE_CONTENT);
}"
38759,"@Autowired public BrowserSupport(Desktop desktop){
  this.desktop=desktop;
}","@Autowired public BrowserSupport(final Desktop desktop){
  this.desktop=desktop;
}"
38760,"private void browse(final URI uri){
  try {
    this.desktop.browse(uri);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private void browse(final URI uri){
  try {
    this.desktop.browse(uri);
  }
 catch (  final IOException e) {
    throw new RuntimeException(e);
  }
}"
38761,"@Autowired public SystemTraySupport(SystemTray awtSystemTray,Toolkit awtToolkit){
  this.awtSystemTray=new AtomicReference<>(awtSystemTray);
  this.awtToolkit=awtToolkit;
}","@Autowired public SystemTraySupport(final SystemTray awtSystemTray,final Toolkit awtToolkit){
  this.awtSystemTray=new AtomicReference<>(awtSystemTray);
  this.awtToolkit=awtToolkit;
}"
38762,"public static CompletableFuture<Stage> displayExceptionPane(final String title,final String readable,final Throwable exception){
  final Pane exceptionPane=new ExceptionHandler(exception).asPane(readable);
  final CompletableFuture<Stage> exceptionStage=StageUtils.stageOf(title,exceptionPane);
  return exceptionStage.thenCompose(StageUtils::scheduleDisplaying);
}","public static CompletionStage<Stage> displayExceptionPane(final String title,final String readable,final Throwable exception){
  final Pane exceptionPane=new ExceptionHandler(exception).asPane(readable);
  final CompletionStage<Stage> exceptionStage=StageUtils.stageOf(title,exceptionPane);
  return exceptionStage.thenCompose(StageUtils::scheduleDisplaying);
}"
38763,"private Option<FxmlController> makeControllerForNode(FxmlNode node){
  return node.getControllerClass().map(this.context::getBean);
}","private Option<FxmlController> makeControllerForNode(final FxmlNode node){
  return node.getControllerClass().map(this.context::getBean);
}"
38764,"/** 
 * This method acts just like   {@link #loadNode(FxmlNode)} but with noautoconfiguration of controller binding and stylesheet application.
 */
protected <T extends Node>Try<T> loadNodeImpl(final FxmlLoader fxmlLoader,final FxmlNode fxmlNode){
  final String filePath=this.filePath(fxmlNode);
  fxmlLoader.setLocation(getUrlForResource(filePath));
  Try<T> loadResult=Try.of(fxmlLoader::load);
  loadResult.onSuccess(fxmlLoader::onSuccess).onFailure(fxmlLoader::onFailure);
  return this.applyStylesheetIfNeeded(fxmlNode,loadResult);
}","/** 
 * This method acts just like   {@link #loadNode(FxmlNode)} but with noautoconfiguration of controller binding and stylesheet application.
 */
protected <T extends Node>Try<T> loadNodeImpl(final FxmlLoader fxmlLoader,final FxmlNode fxmlNode){
  final String filePath=this.filePath(fxmlNode);
  fxmlLoader.setLocation(getUrlForResource(filePath));
  final Try<T> loadResult=Try.of(fxmlLoader::load);
  loadResult.onSuccess(fxmlLoader::onSuccess).onFailure(fxmlLoader::onFailure);
  return this.applyStylesheetIfNeeded(fxmlNode,loadResult);
}"
38765,"public void setOnSuccess(Runnable onSuccess){
  this.onSuccess=onSuccess;
}","public void setOnSuccess(final Runnable onSuccess){
  this.onSuccess=onSuccess;
}"
38766,"public void onSuccess(Object loadResult){
  this.onSuccess.run();
}","public void onSuccess(final Object loadResult){
  this.onSuccess.run();
}"
38767,"public static CompletableFuture<Stage> stageOf(final String title,final Pane rootPane){
  final CompletableFuture<Stage> upcomingStage=new CompletableFuture<>();
  Platform.runLater(() -> {
    final Stage stage=new Stage(StageStyle.DECORATED);
    stage.setTitle(title);
    stage.setScene(new Scene(rootPane));
    upcomingStage.complete(stage);
  }
);
  return upcomingStage;
}","public static CompletionStage<Stage> stageOf(final String title,final Pane rootPane){
  final CompletableFuture<Stage> upcomingStage=new CompletableFuture<>();
  Platform.runLater(() -> {
    final Stage stage=new Stage(StageStyle.DECORATED);
    stage.setTitle(title);
    stage.setScene(new Scene(rootPane));
    upcomingStage.complete(stage);
  }
);
  return upcomingStage;
}"
38768,"public static CompletableFuture<Stage> scheduleHiding(final Stage stage){
  LOG.debug(""String_Node_Str"",stage,stage.getTitle());
  return asyncStageOperation(stage,Stage::hide);
}","public static CompletionStage<Stage> scheduleHiding(final Stage stage){
  LOG.debug(""String_Node_Str"",stage,stage.getTitle());
  return asyncStageOperation(stage,Stage::hide);
}"
38769,"public static CompletableFuture<Stage> scheduleDisplaying(final Stage stage){
  LOG.debug(""String_Node_Str"",stage,stage.getTitle());
  return asyncStageOperation(stage,Stage::show);
}","public static CompletionStage<Stage> scheduleDisplaying(final Stage stage){
  LOG.debug(""String_Node_Str"",stage,stage.getTitle());
  return asyncStageOperation(stage,Stage::show);
}"
38770,"public static CompletableFuture<Stage> asyncStageOperation(final Stage stage,final Consumer<Stage> asyncOp){
  final CompletableFuture<Stage> onAsyncOpDone=new CompletableFuture<>();
  Platform.runLater(() -> {
    asyncOp.accept(stage);
    onAsyncOpDone.complete(stage);
  }
);
  return onAsyncOpDone;
}","public static CompletionStage<Stage> asyncStageOperation(final Stage stage,final Consumer<Stage> asyncOp){
  final CompletableFuture<Stage> onAsyncOpDone=new CompletableFuture<>();
  Platform.runLater(() -> {
    asyncOp.accept(stage);
    onAsyncOpDone.complete(stage);
  }
);
  return onAsyncOpDone;
}"
38771,"@Before public void ensureNotCi(){
  final String envProperty=System.getProperty(""String_Node_Str"");
  if (envProperty != null) {
    assumeFalse(System.getProperty(""String_Node_Str"").equals(""String_Node_Str""));
  }
  System.out.println(""String_Node_Str"");
}","@Before public void ensureNotCi(){
  final String envProperty=System.getProperty(""String_Node_Str"");
  if (envProperty != null) {
    assumeFalse(""String_Node_Str"".equals(System.getProperty(""String_Node_Str"")));
  }
  System.out.println(""String_Node_Str"");
}"
38772,"@Override public void start(Stage stage){
  this.EXCEPTION_TEXT=""String_Node_Str"";
  this.EXCEPTION_TEXT_READABLE=""String_Node_Str"";
  this.EXCEPTION=new Exception(this.EXCEPTION_TEXT);
  this.ERR_PANE=new ExceptionHandler(this.EXCEPTION).asPane();
  this.ERR_PANE_READBLE=new ExceptionHandler(this.EXCEPTION).asPane(this.EXCEPTION_TEXT_READABLE);
}","@Override public void start(final Stage stage){
  this.EXCEPTION_TEXT=""String_Node_Str"";
  this.EXCEPTION_TEXT_READABLE=""String_Node_Str"";
  this.EXCEPTION=new Exception(this.EXCEPTION_TEXT);
  this.ERR_PANE=new ExceptionHandler(this.EXCEPTION).asPane();
  this.ERR_PANE_READBLE=new ExceptionHandler(this.EXCEPTION).asPane(this.EXCEPTION_TEXT_READABLE);
}"
38773,"@Test public void displayExceptionPane() throws ExecutionException, InterruptedException {
  final CompletableFuture<Stage> displayedStage=ExceptionHandler.displayExceptionPane(this.EXCEPTION_TEXT,this.EXCEPTION_TEXT_READABLE,this.EXCEPTION);
  final Stage stage=displayedStage.get();
  assertThat(stage.isShowing()).isTrue();
}","@Test public void displayExceptionPane(){
  final CompletionStage<Stage> displayedStage=ExceptionHandler.displayExceptionPane(this.EXCEPTION_TEXT,this.EXCEPTION_TEXT_READABLE,this.EXCEPTION);
  displayedStage.thenAccept(stage -> assertThat(stage.isShowing()));
}"
38774,"@Override public void start(Stage stage){
}","@Override public void start(final Stage stage){
}"
38775,"private Pane assertTestPaneLoadedCorrectly(Supplier<Try<Pane>> paneLoadingSupplier){
  final Try<Pane> testPaneLoadResult=paneLoadingSupplier.get();
  assertThat(testPaneLoadResult.isSuccess());
  final Pane testPane=testPaneLoadResult.get();
  assertThat(testPane.getChildren()).hasSize(1);
  assertThat(testPane.getChildren().get(0).getClass()).isEqualTo(Button.class);
  return testPane;
}","private Pane assertTestPaneLoadedCorrectly(final Supplier<Try<Pane>> paneLoadingSupplier){
  final Try<Pane> testPaneLoadResult=paneLoadingSupplier.get();
  assertThat(testPaneLoadResult.isSuccess());
  final Pane testPane=testPaneLoadResult.get();
  assertThat(testPane.getChildren()).hasSize(1);
  assertThat(testPane.getChildren().get(0).getClass()).isEqualTo(Button.class);
  return testPane;
}"
38776,"void FXMLNODES(FxmlFile fxmlFile,Option<Class<? extends FxmlController>> controllerClass,Option<FxmlStylesheet> stylesheet){
  this.fxmlFile=fxmlFile;
  this.controllerClass=controllerClass;
  this.stylesheet=stylesheet;
}","void FXMLNODES(final FxmlFile fxmlFile,final Option<Class<? extends FxmlController>> controllerClass,final Option<FxmlStylesheet> stylesheet){
  this.fxmlFile=fxmlFile;
  this.controllerClass=controllerClass;
  this.stylesheet=stylesheet;
}"
38777,"@Override public void start(Stage stage){
  this.testButton=new Button();
  this.testPane=new AnchorPane(this.testButton);
  stage.setScene(new Scene(this.testPane,200,200));
  stage.show();
}","@Override public void start(final Stage stage){
  this.testButton=new Button();
  final AnchorPane testPane=new AnchorPane(this.testButton);
  stage.setScene(new Scene(testPane,WIDTH_PANE,HEIGHT_PANE));
  stage.show();
}"
38778,"@Test public void stageOf(){
  final CompletableFuture<Stage> stageReq=StageUtils.stageOf(STAGE_TITLE,STAGE_PANE);
  stageReq.thenAccept(stage -> {
    assertThat(stage.getScene().getRoot()).isEqualTo(STAGE_PANE);
    assertThat(stage.getTitle()).isEqualTo(STAGE_TITLE);
  }
);
}","@Test public void stageOf(){
  final CompletionStage<Stage> stageReq=StageUtils.stageOf(STAGE_TITLE,STAGE_PANE);
  stageReq.thenAccept(stage -> {
    assertThat(stage.getScene().getRoot()).isEqualTo(STAGE_PANE);
    assertThat(stage.getTitle()).isEqualTo(STAGE_TITLE);
  }
);
}"
38779,"@Override public void start(Stage stage){
  Platform.setImplicitExit(false);
  STAGE_TITLE=""String_Node_Str"";
  STAGE_TITLE_2=""String_Node_Str"";
  STAGE_PANE=new Pane();
  TEST_STAGE=stage;
  stage.show();
  stage.hide();
}","@Override public void start(final Stage stage){
  Platform.setImplicitExit(false);
  STAGE_TITLE=""String_Node_Str"";
  STAGE_TITLE_2=""String_Node_Str"";
  STAGE_PANE=new Pane();
  TEST_STAGE=stage;
  stage.show();
  stage.hide();
}"
38780,"/** 
 * Import existing projects into the workspace
 * @param srcWS The source location of the project (all projects must be located in the same folder)
 * @param projectNames The names of the projects to import
 * @param copyProjects Whether project contents should be copied into the workspace or not
 * @throws CoreException
 */
public static void importProjects(IPath srcWS,String[] projectNames,boolean copyProjects) throws CoreException {
  IPath srcPath=resourceFolder.append(srcWS);
  if (!copyProjects) {
    IPath tmpPath=new Path(System.getProperty(""String_Node_Str""));
    tmpPath=tmpPath.append(""String_Node_Str"");
    try {
      ServerTestUtil.copyProjects(srcPath,projectNames,tmpPath);
    }
 catch (    IOException e) {
      throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,e.getMessage(),e));
    }
    srcPath=tmpPath;
  }
  ServerTestUtil.importProjects(srcPath,projectNames,copyProjects);
}","/** 
 * Import existing projects into the workspace
 * @param srcWS The source location of the project (all projects must be located in the same folder)
 * @param projectNames The names of the projects to import
 * @param copyProjects Whether project contents should be copied into the workspace or not
 * @throws CoreException
 */
public static void importProjects(IPath srcWS,String[] projectNames,boolean copyProjects) throws CoreException {
  IPath srcPath=resourceFolder.append(srcWS);
  if (!copyProjects) {
    IPath tmpPath=new Path(System.getProperty(""String_Node_Str""));
    tmpPath=tmpPath.append(""String_Node_Str"");
    if (tmpPath.toFile().exists()) {
      try {
        FileUtil.deleteDirectory(tmpPath.toOSString(),true);
      }
 catch (      IOException e) {
        print(""String_Node_Str"" + tmpPath.toOSString());
      }
    }
    try {
      ServerTestUtil.copyProjects(srcPath,projectNames,tmpPath);
    }
 catch (    IOException e) {
      throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,e.getMessage(),e));
    }
    srcPath=tmpPath;
  }
  ServerTestUtil.importProjects(srcPath,projectNames,copyProjects);
}"
38781,"/** 
 * Load the server extensions.
 */
public static ServerExtensionWrapper[] createServerExtensions(){
  if (Trace.ENABLED)   Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"");
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] cf=registry.getConfigurationElementsFor(Activator.PLUGIN_ID,EXTENSION_POINT);
  List<ServerExtensionWrapper> list=new ArrayList<ServerExtensionWrapper>(cf.length);
  List<String> appTypeList=new ArrayList<String>();
  List<String> genericTypeList=new ArrayList<String>();
  List<String> applicationElementList=new ArrayList<String>();
  applicationElementList.add(""String_Node_Str"");
  for (  IConfigurationElement ce : cf) {
    try {
      ServerExtensionWrapper sew=new ServerExtensionWrapper(ce);
      list.add(sew);
      for (      String s : sew.applicationTypes) {
        if (s != null)         appTypeList.add(s);
      }
      for (      String s : sew.applicationElements) {
        if (s != null)         applicationElementList.add(s);
      }
      for (      String s : sew.genericModuleTypes) {
        genericTypeList.add(s);
      }
      if (Trace.ENABLED)       Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"" + ce.getAttribute(""String_Node_Str""));
    }
 catch (    Throwable t) {
      Trace.logError(""String_Node_Str"" + ce.getAttribute(""String_Node_Str""),t);
    }
  }
  if (allApplicationTypes == null)   allApplicationTypes=appTypeList.toArray(new String[appTypeList.size()]);
  if (allApplicationElements == null)   allApplicationElements=applicationElementList.toArray(new String[applicationElementList.size()]);
  if (allGenericModuleTypes == null)   allGenericModuleTypes=genericTypeList.toArray(new String[genericTypeList.size()]);
  if (Trace.ENABLED)   Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"");
  return list.toArray(new ServerExtensionWrapper[list.size()]);
}","/** 
 * Load the server extensions.
 */
public static ServerExtensionWrapper[] createServerExtensions(){
  if (Trace.ENABLED)   Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"");
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] cf=registry.getConfigurationElementsFor(Activator.PLUGIN_ID,EXTENSION_POINT);
  List<ServerExtensionWrapper> list=new ArrayList<ServerExtensionWrapper>(cf.length);
  Set<String> appTypeList=new HashSet<String>();
  Set<String> genericTypeList=new HashSet<String>();
  Set<String> applicationElementList=new HashSet<String>();
  applicationElementList.add(""String_Node_Str"");
  for (  IConfigurationElement ce : cf) {
    try {
      ServerExtensionWrapper sew=new ServerExtensionWrapper(ce);
      list.add(sew);
      for (      String s : sew.applicationTypes) {
        if (s != null)         appTypeList.add(s);
      }
      for (      String s : sew.applicationElements) {
        if (s != null)         applicationElementList.add(s);
      }
      for (      String s : sew.genericModuleTypes) {
        genericTypeList.add(s);
      }
      if (Trace.ENABLED)       Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"" + ce.getAttribute(""String_Node_Str""));
    }
 catch (    Throwable t) {
      Trace.logError(""String_Node_Str"" + ce.getAttribute(""String_Node_Str""),t);
    }
  }
  if (allApplicationTypes == null)   allApplicationTypes=appTypeList.toArray(new String[appTypeList.size()]);
  if (allApplicationElements == null)   allApplicationElements=applicationElementList.toArray(new String[applicationElementList.size()]);
  if (allGenericModuleTypes == null)   allGenericModuleTypes=genericTypeList.toArray(new String[genericTypeList.size()]);
  if (Trace.ENABLED)   Trace.trace(Trace.EXTENSION_POINT,""String_Node_Str"");
  return list.toArray(new ServerExtensionWrapper[list.size()]);
}"
38782,"public static List<LocalAppFileSystemConfig> load(PlatformConfig platformConfig){
  List<LocalAppFileSystemConfig> configs=new ArrayList<>();
  ModuleConfig moduleConfig=platformConfig.getModuleConfigIfExists(""String_Node_Str"");
  if (moduleConfig != null) {
    if (moduleConfig.hasProperty(""String_Node_Str"") && moduleConfig.hasProperty(""String_Node_Str"")) {
      String driveName=moduleConfig.getStringProperty(""String_Node_Str"");
      boolean remotelyAccessible=moduleConfig.getBooleanProperty(""String_Node_Str"",DEFAULT_REMOTELY_ACCESSIBLE);
      Path rootDir=moduleConfig.getPathProperty(""String_Node_Str"");
      configs.add(new LocalAppFileSystemConfig(driveName,remotelyAccessible,rootDir));
    }
    int maxAdditionalDriveCount=moduleConfig.getIntProperty(""String_Node_Str"",0);
    for (int i=0; i < maxAdditionalDriveCount; i++) {
      if (moduleConfig.hasProperty(""String_Node_Str"" + i) && moduleConfig.hasProperty(""String_Node_Str"" + i)) {
        String driveName=moduleConfig.getStringProperty(""String_Node_Str"" + i);
        boolean remotelyAccessible=moduleConfig.getBooleanProperty(""String_Node_Str"" + i,DEFAULT_REMOTELY_ACCESSIBLE);
        Path rootDir=moduleConfig.getPathProperty(""String_Node_Str"" + i);
        configs.add(new LocalAppFileSystemConfig(driveName,remotelyAccessible,rootDir));
      }
    }
  }
 else {
    for (    Path rootDir : platformConfig.getFileSystem().getRootDirectories()) {
      configs.add(new LocalAppFileSystemConfig(rootDir.toString(),false,rootDir));
    }
  }
  return configs;
}","public static List<LocalAppFileSystemConfig> load(PlatformConfig platformConfig){
  List<LocalAppFileSystemConfig> configs=new ArrayList<>();
  ModuleConfig moduleConfig=platformConfig.getModuleConfigIfExists(""String_Node_Str"");
  if (moduleConfig != null) {
    load(moduleConfig,OptionalInt.empty(),configs);
    int maxAdditionalDriveCount=moduleConfig.getIntProperty(""String_Node_Str"",0);
    for (int i=0; i < maxAdditionalDriveCount; i++) {
      load(moduleConfig,OptionalInt.of(i),configs);
    }
  }
 else {
    for (    Path rootDir : platformConfig.getFileSystem().getRootDirectories()) {
      if (Files.isDirectory(rootDir)) {
        configs.add(new LocalAppFileSystemConfig(rootDir.toString(),false,rootDir));
      }
    }
  }
  return configs;
}"
38783,"private LocalFolder scanFolder(Path path,boolean useCache){
  LocalFolder folder=null;
  if (Files.isReadable(path)) {
    if (useCache && folderCache.containsKey(path)) {
      folder=folderCache.get(path);
    }
 else {
      LocalFolderScannerContext context=new LocalFolderScannerContext(rootDir,fileSystemName,computationManager);
      for (      LocalFolderScanner folderScanner : folderScanners) {
        folder=folderScanner.scanFolder(path,context);
        if (folder != null) {
          break;
        }
      }
      folderCache.put(path,folder);
    }
  }
  return folder;
}","private LocalFolder scanFolder(Path path,boolean useCache){
  LocalFolder folder=null;
  if (Files.isReadable(path) && Files.isExecutable(path)) {
    if (useCache && folderCache.containsKey(path)) {
      folder=folderCache.get(path);
    }
 else {
      LocalFolderScannerContext context=new LocalFolderScannerContext(rootDir,fileSystemName,computationManager);
      for (      LocalFolderScanner folderScanner : folderScanners) {
        folder=folderScanner.scanFolder(path,context);
        if (folder != null) {
          break;
        }
      }
      folderCache.put(path,folder);
    }
  }
  return folder;
}"
38784,"void traverse(BusTerminal terminal,VoltageLevel.TopologyTraverser traverser,Set<Terminal> traversedTerminals){
  Objects.requireNonNull(terminal);
  Objects.requireNonNull(traverser);
  Objects.requireNonNull(traversedTerminals);
  if (traversedTerminals.contains(terminal)) {
    return;
  }
  List<TerminalExt> nextTerminals=new ArrayList<>();
  if (traverser.traverse(terminal,terminal.isConnected())) {
    traversedTerminals.add(terminal);
    addNextTerminals(terminal,nextTerminals);
    int v=getVertex(terminal.getConnectableBusId(),true);
    ConfiguredBus bus=graph.getVertexObject(v);
    bus.getTerminals().stream().filter(t -> t != terminal).filter(t -> traverser.traverse(t,t.isConnected())).forEach(t -> addNextTerminals(t,nextTerminals));
    graph.traverse(v,(v1,e,v2) -> {
      SwitchImpl aSwitch=graph.getEdgeObject(e);
      ConfiguredBus otherBus=graph.getVertexObject(v2);
      if (traverser.traverse(aSwitch)) {
        for (        BusTerminal otherTerminal : otherBus.getTerminals()) {
          if (traverser.traverse(otherTerminal,otherTerminal.isConnected())) {
            traversedTerminals.add(otherTerminal);
            addNextTerminals(otherTerminal,nextTerminals);
            return TraverseResult.CONTINUE;
          }
          return TraverseResult.TERMINATE;
        }
        return TraverseResult.CONTINUE;
      }
      return TraverseResult.TERMINATE;
    }
);
    nextTerminals.forEach(t -> t.traverse(traverser,traversedTerminals));
  }
}","void traverse(BusTerminal terminal,VoltageLevel.TopologyTraverser traverser,Set<Terminal> traversedTerminals){
  Objects.requireNonNull(terminal);
  Objects.requireNonNull(traverser);
  Objects.requireNonNull(traversedTerminals);
  if (traversedTerminals.contains(terminal)) {
    return;
  }
  List<TerminalExt> nextTerminals=new ArrayList<>();
  if (traverser.traverse(terminal,terminal.isConnected())) {
    traversedTerminals.add(terminal);
    addNextTerminals(terminal,nextTerminals);
    int v=getVertex(terminal.getConnectableBusId(),true);
    ConfiguredBus bus=graph.getVertexObject(v);
    bus.getTerminals().stream().filter(t -> t != terminal).filter(t -> traverser.traverse(t,t.isConnected())).forEach(t -> addNextTerminals(t,nextTerminals));
    graph.traverse(v,(v1,e,v2) -> {
      SwitchImpl aSwitch=graph.getEdgeObject(e);
      ConfiguredBus otherBus=graph.getVertexObject(v2);
      if (traverser.traverse(aSwitch)) {
        if (otherBus.getTerminalCount() == 0) {
          return TraverseResult.CONTINUE;
        }
        BusTerminal otherTerminal=otherBus.getTerminals().get(0);
        if (traverser.traverse(otherTerminal,otherTerminal.isConnected())) {
          traversedTerminals.add(otherTerminal);
          addNextTerminals(otherTerminal,nextTerminals);
          return TraverseResult.CONTINUE;
        }
      }
      return TraverseResult.TERMINATE;
    }
);
    nextTerminals.forEach(t -> t.traverse(traverser,traversedTerminals));
  }
}"
38785,"private void updateCache(){
  if (states.get().cache != null) {
    return;
  }
  Map<String,MergedBus> mergedBuses=new LinkedHashMap<>();
  Map<ConfiguredBus,MergedBus> mapping=new IdentityHashMap<>();
  boolean[] encountered=new boolean[graph.getMaxVertex()];
  Arrays.fill(encountered,false);
  int busNum=0;
  for (  int v : graph.getVertices()) {
    if (!encountered[v]) {
      final Set<ConfiguredBus> busSet=new LinkedHashSet<>(1);
      busSet.add(graph.getVertexObject(v));
      graph.traverse(v,(v1,e,v2) -> {
        SwitchImpl aSwitch=graph.getEdgeObject(e);
        if (aSwitch.isOpen()) {
          return TraverseResult.TERMINATE;
        }
 else {
          busSet.add(graph.getVertexObject(v2));
          return TraverseResult.CONTINUE;
        }
      }
,encountered);
      if (isBusValid(busSet)) {
        String mergedBusId=BusBreakerVoltageLevel.this.id + ""String_Node_Str"" + busNum++;
        MergedBus mergedBus=new MergedBus(mergedBusId,busSet);
        mergedBuses.put(mergedBus.getId(),mergedBus);
        for (        ConfiguredBus bus : busSet) {
          mapping.put(bus,mergedBus);
        }
      }
    }
  }
  states.get().cache=new BusCache(mergedBuses,mapping);
}","private void updateCache(){
  if (states.get().cache != null) {
    return;
  }
  Map<String,MergedBus> mergedBuses=new LinkedHashMap<>();
  Map<ConfiguredBus,MergedBus> mapping=new IdentityHashMap<>();
  boolean[] encountered=new boolean[graph.getMaxVertex()];
  Arrays.fill(encountered,false);
  int busNum=0;
  for (  int v : graph.getVertices()) {
    if (!encountered[v]) {
      final Set<ConfiguredBus> busSet=new LinkedHashSet<>(1);
      busSet.add(graph.getVertexObject(v));
      graph.traverse(v,(v1,e,v2) -> {
        SwitchImpl aSwitch=graph.getEdgeObject(e);
        if (aSwitch.isOpen()) {
          return TraverseResult.TERMINATE;
        }
 else {
          busSet.add(graph.getVertexObject(v2));
          return TraverseResult.CONTINUE;
        }
      }
,encountered);
      if (isBusValid(busSet)) {
        String mergedBusId=BusBreakerVoltageLevel.this.id + ""String_Node_Str"" + busNum++;
        MergedBus mergedBus=new MergedBus(mergedBusId,busSet);
        mergedBuses.put(mergedBus.getId(),mergedBus);
        busSet.forEach(bus -> mapping.put(bus,mergedBus));
      }
    }
  }
  states.get().cache=new BusCache(mergedBuses,mapping);
}"
38786,"private StateImpl(StateImpl other){
}","private StateImpl(){
}"
38787,"void traverse(BusTerminal terminal,VoltageLevel.TopologyTraverser traverser,Set<Terminal> traversedTerminals){
  Objects.requireNonNull(terminal);
  Objects.requireNonNull(traverser);
  Objects.requireNonNull(traversedTerminals);
  if (traversedTerminals.contains(terminal)) {
    return;
  }
  List<TerminalExt> nextTerminals=new ArrayList<>();
  if (traverser.traverse(terminal,terminal.isConnected())) {
    traversedTerminals.add(terminal);
    addNextTerminals(terminal,nextTerminals);
    int v=getVertex(terminal.getConnectableBusId(),true);
    ConfiguredBus bus=graph.getVertexObject(v);
    for (    BusTerminal otherTerminal : bus.getTerminals()) {
      if (otherTerminal != terminal) {
        if (traverser.traverse(otherTerminal,otherTerminal.isConnected())) {
          addNextTerminals(otherTerminal,nextTerminals);
        }
      }
    }
    graph.traverse(v,(v1,e,v2) -> {
      SwitchImpl aSwitch=graph.getEdgeObject(e);
      ConfiguredBus otherBus=graph.getVertexObject(v2);
      if (traverser.traverse(aSwitch)) {
        for (        BusTerminal otherTerminal : otherBus.getTerminals()) {
          if (traverser.traverse(otherTerminal,otherTerminal.isConnected())) {
            traversedTerminals.add(otherTerminal);
            addNextTerminals(otherTerminal,nextTerminals);
            return TraverseResult.CONTINUE;
          }
 else {
            return TraverseResult.TERMINATE;
          }
        }
        return TraverseResult.CONTINUE;
      }
 else {
        return TraverseResult.TERMINATE;
      }
    }
);
    for (    TerminalExt nextTerminal : nextTerminals) {
      nextTerminal.traverse(traverser,traversedTerminals);
    }
  }
}","void traverse(BusTerminal terminal,VoltageLevel.TopologyTraverser traverser,Set<Terminal> traversedTerminals){
  Objects.requireNonNull(terminal);
  Objects.requireNonNull(traverser);
  Objects.requireNonNull(traversedTerminals);
  if (traversedTerminals.contains(terminal)) {
    return;
  }
  List<TerminalExt> nextTerminals=new ArrayList<>();
  if (traverser.traverse(terminal,terminal.isConnected())) {
    traversedTerminals.add(terminal);
    addNextTerminals(terminal,nextTerminals);
    int v=getVertex(terminal.getConnectableBusId(),true);
    ConfiguredBus bus=graph.getVertexObject(v);
    bus.getTerminals().stream().filter(t -> t != terminal).filter(t -> traverser.traverse(t,t.isConnected())).forEach(t -> addNextTerminals(t,nextTerminals));
    graph.traverse(v,(v1,e,v2) -> {
      SwitchImpl aSwitch=graph.getEdgeObject(e);
      ConfiguredBus otherBus=graph.getVertexObject(v2);
      if (traverser.traverse(aSwitch)) {
        for (        BusTerminal otherTerminal : otherBus.getTerminals()) {
          if (traverser.traverse(otherTerminal,otherTerminal.isConnected())) {
            traversedTerminals.add(otherTerminal);
            addNextTerminals(otherTerminal,nextTerminals);
            return TraverseResult.CONTINUE;
          }
          return TraverseResult.TERMINATE;
        }
        return TraverseResult.CONTINUE;
      }
      return TraverseResult.TERMINATE;
    }
);
    nextTerminals.forEach(t -> t.traverse(traverser,traversedTerminals));
  }
}"
38788,"@Override public StateImpl copy(){
  return new StateImpl(this);
}","@Override public StateImpl copy(){
  return new StateImpl();
}"
38789,"@Override public void add(){
  if (node1 == null) {
    throw new ValidationException(this,""String_Node_Str"");
  }
  if (node2 == null) {
    throw new ValidationException(this,""String_Node_Str"");
  }
  int e=graph.addEdge(node1,node2,null);
  invalidateCache();
}","@Override public void add(){
  if (node1 == null) {
    throw new ValidationException(this,""String_Node_Str"");
  }
  if (node2 == null) {
    throw new ValidationException(this,""String_Node_Str"");
  }
  graph.addEdge(node1,node2,null);
  invalidateCache();
}"
38790,"private Integer getEdge(String switchId,boolean throwException){
  Integer edge=switches.get(switchId);
  if (throwException && edge == null) {
    throw new PowsyblException(""String_Node_Str"" + switchId + ""String_Node_Str"");
  }
  return edge;
}","private Integer getEdge(String switchId,boolean throwException){
  Integer edge=switches.get(switchId);
  if (throwException && edge == null) {
    throw createSwitchNotFoundException(switchId);
  }
  return edge;
}"
38791,"public void exportTopology(OutputStream os) throws IOException {
  Graph g=new Graph().id(""String_Node_Str"" + NodeBreakerVoltageLevel.this.id + ""String_Node_Str"");
  Map<Integer,Node> intToNode=new HashMap<>();
  Multimap<String,Integer> busToNodes=ArrayListMultimap.create();
  for (int n=0; n < graph.getVertexCount(); n++) {
    Node node=new Node().id(Integer.toString(n));
    intToNode.put(n,node);
    Bus bus=getCalculatedBusBreakerTopology().getBus(n);
    if (bus != null) {
      busToNodes.put(bus.getId(),n);
    }
 else {
      TerminalExt terminal=graph.getVertexObject(n);
      if (terminal != null) {
        AbstractConnectable connectable=terminal.getConnectable();
        String label=n + ""String_Node_Str"" + connectable.getType().toString()+ ""String_Node_Str""+ connectable.getId();
        node.attr(""String_Node_Str"",label);
        g.node(node);
      }
    }
  }
  String[] colors=Colors.generateColorScale(busToNodes.asMap().keySet().size());
  int i=0;
  for (  String key : busToNodes.asMap().keySet()) {
    Graph newBus=new Graph().id(""String_Node_Str"" + key + ""String_Node_Str"");
    newBus.attr(""String_Node_Str"",key);
    for (    int nodeInt : busToNodes.get(key)) {
      Node node=intToNode.get(nodeInt);
      TerminalExt terminal=graph.getVertexObject(nodeInt);
      if (terminal != null) {
        AbstractConnectable connectable=terminal.getConnectable();
        String label=nodeInt + ""String_Node_Str"" + connectable.getType().toString()+ ""String_Node_Str""+ connectable.getId();
        node.attr(""String_Node_Str"",label);
      }
      node.attr(""String_Node_Str"",""String_Node_Str"").attr(""String_Node_Str"",colors[i]);
      newBus.node(node);
    }
    g.subGraph(newBus);
    i++;
  }
  boolean drawSwitchId=true;
  for (int e=0; e < graph.getEdgeCount(); e++) {
    Edge edge=new Edge(intToNode.get(graph.getEdgeVertex1(e)),intToNode.get(graph.getEdgeVertex2(e))).id(Integer.toString(e));
    SwitchImpl aSwitch=graph.getEdgeObject(e);
    if (aSwitch != null) {
      if (drawSwitchId) {
        edge.attr(""String_Node_Str"",aSwitch.getKind().toString() + ""String_Node_Str"" + aSwitch.getId()).attr(""String_Node_Str"",""String_Node_Str"");
      }
      edge.attr(""String_Node_Str"",aSwitch.isOpen() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    g.edge(edge);
  }
  g.writeTo(os);
}","public void exportTopology(OutputStream os){
  Graph g=new Graph().id(""String_Node_Str"" + NodeBreakerVoltageLevel.this.id + ""String_Node_Str"");
  Map<Integer,Node> intToNode=new HashMap<>();
  Multimap<String,Integer> busToNodes=ArrayListMultimap.create();
  for (int n=0; n < graph.getVertexCount(); n++) {
    Node node=new Node().id(Integer.toString(n));
    intToNode.put(n,node);
    Bus bus=getCalculatedBusBreakerTopology().getBus(n);
    if (bus != null) {
      busToNodes.put(bus.getId(),n);
    }
 else {
      TerminalExt terminal=graph.getVertexObject(n);
      if (terminal != null) {
        AbstractConnectable connectable=terminal.getConnectable();
        String label=n + ""String_Node_Str"" + connectable.getType().toString()+ ""String_Node_Str""+ connectable.getId();
        node.attr(LABEL_ATTRIBUTE,label);
        g.node(node);
      }
    }
  }
  exportBuses(g,busToNodes,intToNode);
  exportEdges(g,intToNode);
  g.writeTo(os);
}"
38792,"public DependencyCache(ProjectFile projectFile,String dependencyName,Class<T> dependencyClass){
  this.projectFile=Objects.requireNonNull(projectFile);
  this.dependencyName=Objects.requireNonNull(dependencyName);
  this.dependencyClass=Objects.requireNonNull(dependencyClass);
  projectFile.addListener(new DefaultProjectFileListener(){
    @Override public void dependencyChanged(    String name){
      if (dependencyName.equals(name)) {
        invalidate();
      }
    }
  }
);
}","public DependencyCache(ProjectFile projectFile,String dependencyName,Class<T> dependencyClass){
  this.projectFile=Objects.requireNonNull(projectFile);
  this.dependencyName=Objects.requireNonNull(dependencyName);
  this.dependencyClass=Objects.requireNonNull(dependencyClass);
  projectFile.addListener(l);
}"
38793,"protected ProjectFile(ProjectFileCreationContext context,int codeVersion,FileIcon icon){
  super(context,codeVersion,true);
  this.icon=Objects.requireNonNull(icon);
  storage.addListener(this,eventList -> {
    for (    NodeEvent event : eventList.getEvents()) {
      if (event.getId().equals(getId())) {
switch (event.getType()) {
case DEPENDENCY_ADDED:
case DEPENDENCY_REMOVED:
          listeners.notify(listener -> listener.dependencyChanged(((DependencyEvent)event).getDependencyName()));
        break;
case BACKWARD_DEPENDENCY_ADDED:
case BACKWARD_DEPENDENCY_REMOVED:
      listeners.notify(listener -> listener.backwardDependencyChanged(((DependencyEvent)event).getDependencyName()));
    break;
default :
  break;
}
}
}
}
);
}","protected ProjectFile(ProjectFileCreationContext context,int codeVersion,FileIcon icon){
  super(context,codeVersion,true);
  this.icon=Objects.requireNonNull(icon);
  storage.addListener(l);
}"
38794,"public void removeListener(ProjectFileListener listener){
  listeners.remove(this,listener);
}","public void removeListener(ProjectFileListener listener){
  listeners.remove(listener);
}"
38795,"public void addListener(ProjectFileListener listener){
  listeners.add(this,listener);
}","public void addListener(ProjectFileListener listener){
  listeners.add(listener);
}"
38796,"public void removeAllListeners(){
  listeners.removeAll(this);
}","public void removeAllListeners(){
  listeners.removeAll();
}"
38797,"public void removeListener(ProjectFolderListener listener){
  listeners.remove(this,listener);
}","public void removeListener(ProjectFolderListener listener){
  listeners.remove(listener);
}"
38798,"public ProjectFolder(ProjectFileCreationContext context){
  super(context,VERSION,true);
  storage.addListener(this,eventList -> {
    for (    NodeEvent event : eventList.getEvents()) {
switch (event.getType()) {
case NODE_CREATED:
        if (getId().equals(((NodeCreated)event).getParentId())) {
          listeners.notify(listener -> listener.childAdded(event.getId()));
        }
      break;
case NODE_REMOVED:
    if (getId().equals(((NodeRemoved)event).getParentId())) {
      listeners.notify(listener -> listener.childRemoved(event.getId()));
    }
  break;
default :
break;
}
}
}
);
}","public ProjectFolder(ProjectFileCreationContext context){
  super(context,VERSION,true);
  storage.addListener(l);
}"
38799,"public void addListener(ProjectFolderListener listener){
  listeners.add(this,listener);
}","public void addListener(ProjectFolderListener listener){
  listeners.add(listener);
}"
38800,"@Test public void baseTest() throws IOException {
  assertSame(afs,ad.getFileSystem(""String_Node_Str""));
  assertNull(ad.getFileSystem(""String_Node_Str""));
  assertEquals(Collections.singletonList(""String_Node_Str""),ad.getRemotelyAccessibleFileSystemNames());
  assertNotNull(ad.getRemotelyAccessibleStorage(""String_Node_Str""));
  assertEquals(""String_Node_Str"",afs.getName());
  assertEquals(1,ad.getProjectFileClasses().size());
  Folder root=afs.getRootFolder();
  assertNotNull(root);
  Folder dir1=root.createFolder(""String_Node_Str"");
  assertNotNull(dir1);
  dir1.createFolder(""String_Node_Str"");
  dir1.createFolder(""String_Node_Str"");
  dir1=root.getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(dir1);
  assertTrue(dir1.isFolder());
  assertTrue(dir1.isWritable());
  assertEquals(""String_Node_Str"",dir1.getName());
  assertNotNull(dir1.getCreationDate());
  assertNotNull(dir1.getModificationDate());
  assertEquals(0,dir1.getVersion());
  assertFalse(dir1.isAheadOfVersion());
  assertEquals(dir1.getName(),dir1.toString());
  assertEquals(""String_Node_Str"",dir1.getParent().orElseThrow(AssertionError::new).getName());
  Folder dir2=dir1.getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(dir2);
  assertNotNull(dir2.getParent());
  assertEquals(""String_Node_Str"",dir2.getParent().orElseThrow(AssertionError::new).getPath().toString());
  assertEquals(2,dir1.getChildren().size());
  Folder dir3=root.getFolder(""String_Node_Str"").orElse(null);
  assertNull(dir3);
  String str=dir2.getPath().toString();
  assertEquals(""String_Node_Str"",str);
  Folder mayBeDir2=afs.getRootFolder().getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(mayBeDir2);
  assertEquals(""String_Node_Str"",mayBeDir2.getName());
  Folder mayBeDir2otherWay=afs.getRootFolder().getChild(Folder.class,""String_Node_Str"",""String_Node_Str"").orElse(null);
  assertNotNull(mayBeDir2otherWay);
  assertEquals(""String_Node_Str"",mayBeDir2otherWay.getName());
  Project project1=dir2.createProject(""String_Node_Str"");
  project1.setDescription(""String_Node_Str"");
  assertNotNull(project1);
  assertEquals(""String_Node_Str"",project1.getName());
  assertEquals(""String_Node_Str"",project1.getDescription());
  assertNotNull(project1.getIcon());
  assertNotNull(project1.getParent());
  assertEquals(""String_Node_Str"",project1.getParent().orElseThrow(AssertionError::new).getPath().toString());
  assertTrue(project1.getRootFolder().getChildren().isEmpty());
  assertTrue(project1.getFileSystem() == afs);
  List<String> added=new ArrayList<>();
  List<String> removed=new ArrayList<>();
  project1.getRootFolder().addListener(new ProjectFolderListener(){
    @Override public void childAdded(    String nodeId){
      added.add(nodeId);
    }
    @Override public void childRemoved(    String nodeId){
      removed.add(nodeId);
    }
  }
);
  ProjectFolder dir4=project1.getRootFolder().createFolder(""String_Node_Str"");
  assertTrue(dir4.isFolder());
  assertEquals(""String_Node_Str"",dir4.getName());
  assertNotNull(dir4.getParent());
  assertTrue(dir4.getChildren().isEmpty());
  assertEquals(1,project1.getRootFolder().getChildren().size());
  dir4.delete();
  assertTrue(project1.getRootFolder().getChildren().isEmpty());
  try {
    dir4.getChildren();
    fail();
  }
 catch (  Exception ignored) {
  }
  ProjectFolder dir5=project1.getRootFolder().createFolder(""String_Node_Str"");
  ProjectFolder dir6=dir5.createFolder(""String_Node_Str"");
  assertEquals(ImmutableList.of(""String_Node_Str"",""String_Node_Str""),dir6.getPath().toList().subList(1,3));
  assertEquals(""String_Node_Str"",dir6.getPath().toString());
  assertEquals(""String_Node_Str"",project1.getRootFolder().getChild(""String_Node_Str"").orElseThrow(AssertionError::new).getName());
  assertEquals(Arrays.asList(dir4.getId(),dir5.getId()),added);
  assertEquals(Collections.singletonList(dir4.getId()),removed);
}","@Test public void baseTest() throws IOException {
  assertSame(afs,ad.getFileSystem(""String_Node_Str""));
  assertNull(ad.getFileSystem(""String_Node_Str""));
  assertEquals(Collections.singletonList(""String_Node_Str""),ad.getRemotelyAccessibleFileSystemNames());
  assertNotNull(ad.getRemotelyAccessibleStorage(""String_Node_Str""));
  assertEquals(""String_Node_Str"",afs.getName());
  assertEquals(1,ad.getProjectFileClasses().size());
  Folder root=afs.getRootFolder();
  assertNotNull(root);
  Folder dir1=root.createFolder(""String_Node_Str"");
  assertNotNull(dir1);
  dir1.createFolder(""String_Node_Str"");
  dir1.createFolder(""String_Node_Str"");
  dir1=root.getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(dir1);
  assertTrue(dir1.isFolder());
  assertTrue(dir1.isWritable());
  assertEquals(""String_Node_Str"",dir1.getName());
  assertNotNull(dir1.getCreationDate());
  assertNotNull(dir1.getModificationDate());
  assertEquals(0,dir1.getVersion());
  assertFalse(dir1.isAheadOfVersion());
  assertEquals(dir1.getName(),dir1.toString());
  assertEquals(""String_Node_Str"",dir1.getParent().orElseThrow(AssertionError::new).getName());
  Folder dir2=dir1.getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(dir2);
  assertNotNull(dir2.getParent());
  assertEquals(""String_Node_Str"",dir2.getParent().orElseThrow(AssertionError::new).getPath().toString());
  assertEquals(2,dir1.getChildren().size());
  Folder dir3=root.getFolder(""String_Node_Str"").orElse(null);
  assertNull(dir3);
  String str=dir2.getPath().toString();
  assertEquals(""String_Node_Str"",str);
  Folder mayBeDir2=afs.getRootFolder().getFolder(""String_Node_Str"").orElse(null);
  assertNotNull(mayBeDir2);
  assertEquals(""String_Node_Str"",mayBeDir2.getName());
  Folder mayBeDir2otherWay=afs.getRootFolder().getChild(Folder.class,""String_Node_Str"",""String_Node_Str"").orElse(null);
  assertNotNull(mayBeDir2otherWay);
  assertEquals(""String_Node_Str"",mayBeDir2otherWay.getName());
  Project project1=dir2.createProject(""String_Node_Str"");
  project1.setDescription(""String_Node_Str"");
  assertNotNull(project1);
  assertEquals(""String_Node_Str"",project1.getName());
  assertEquals(""String_Node_Str"",project1.getDescription());
  assertNotNull(project1.getIcon());
  assertNotNull(project1.getParent());
  assertEquals(""String_Node_Str"",project1.getParent().orElseThrow(AssertionError::new).getPath().toString());
  assertTrue(project1.getRootFolder().getChildren().isEmpty());
  assertTrue(project1.getFileSystem() == afs);
  List<String> added=new ArrayList<>();
  List<String> removed=new ArrayList<>();
  ProjectFolderListener l=new ProjectFolderListener(){
    @Override public void childAdded(    String nodeId){
      added.add(nodeId);
    }
    @Override public void childRemoved(    String nodeId){
      removed.add(nodeId);
    }
  }
;
  project1.getRootFolder().addListener(l);
  ProjectFolder dir4=project1.getRootFolder().createFolder(""String_Node_Str"");
  assertTrue(dir4.isFolder());
  assertEquals(""String_Node_Str"",dir4.getName());
  assertNotNull(dir4.getParent());
  assertTrue(dir4.getChildren().isEmpty());
  assertEquals(1,project1.getRootFolder().getChildren().size());
  dir4.delete();
  assertTrue(project1.getRootFolder().getChildren().isEmpty());
  try {
    dir4.getChildren();
    fail();
  }
 catch (  Exception ignored) {
  }
  ProjectFolder dir5=project1.getRootFolder().createFolder(""String_Node_Str"");
  ProjectFolder dir6=dir5.createFolder(""String_Node_Str"");
  assertEquals(ImmutableList.of(""String_Node_Str"",""String_Node_Str""),dir6.getPath().toList().subList(1,3));
  assertEquals(""String_Node_Str"",dir6.getPath().toString());
  assertEquals(""String_Node_Str"",project1.getRootFolder().getChild(""String_Node_Str"").orElseThrow(AssertionError::new).getName());
  assertEquals(Arrays.asList(dir4.getId(),dir5.getId()),added);
  assertEquals(Collections.singletonList(dir4.getId()),removed);
}"
38801,"public AbstractModificationScript(ProjectFileCreationContext context,int codeVersion,FileIcon icon,String scriptContentName){
  super(context,codeVersion,icon);
  this.scriptContentName=Objects.requireNonNull(scriptContentName);
  storage.addListener(this,eventList -> processEvents(eventList.getEvents(),info.getId(),listeners));
}","public AbstractModificationScript(ProjectFileCreationContext context,int codeVersion,FileIcon icon,String scriptContentName){
  super(context,codeVersion,icon);
  this.scriptContentName=Objects.requireNonNull(scriptContentName);
  storage.addListener(l);
}"
38802,"@Override public void removeListeners(Object target){
  listeners.removeAll(target);
}","@Override public void removeListeners(){
  listeners.removeAll();
}"
38803,"@Override public void flush(){
  super.flush();
  lock.lock();
  try {
    listeners.notify(l -> l.onEvents(eventList));
    eventList=new NodeEventList();
  }
  finally {
    lock.unlock();
  }
}","@Override public void flush(){
  super.flush();
  lock.lock();
  try {
    listeners.log();
    listeners.notify(l -> l.onEvents(eventList));
    eventList=new NodeEventList();
  }
  finally {
    lock.unlock();
  }
}"
38804,"@Override public void addListener(Object target,AppStorageListener l){
  listeners.add(target,l);
}","@Override public void addListener(AppStorageListener l){
  listeners.add(l);
}"
38805,void removeListeners(Object target);,void removeListeners();
38806,"void addListener(Object target,AppStorageListener l);",void addListener(AppStorageListener l);
38807,"@Before public void setUp() throws Exception {
  eventStack=new LinkedBlockingQueue<>();
  AppStorage storage=createStorage();
  if (storage instanceof ListenableAppStorage) {
    this.storage=(ListenableAppStorage)storage;
  }
 else {
    this.storage=new DefaultListenableAppStorage(storage);
  }
  this.storage.addListener(this,eventList -> eventStack.addAll(eventList.getEvents()));
}","@Before public void setUp() throws Exception {
  eventStack=new LinkedBlockingQueue<>();
  AppStorage storage=createStorage();
  if (storage instanceof ListenableAppStorage) {
    this.storage=(ListenableAppStorage)storage;
  }
 else {
    this.storage=new DefaultListenableAppStorage(storage);
  }
  this.storage.addListener(l);
}"
38808,"@Before public void setUp(){
  AppStorage storage=Mockito.mock(AppStorage.class);
  Mockito.when(storage.createNode(Mockito.anyString(),Mockito.anyString(),Mockito.anyString(),Mockito.anyString(),Mockito.anyInt(),Mockito.any(NodeGenericMetadata.class))).thenReturn(new NodeInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,0,0,new NodeGenericMetadata()));
  Mockito.when(storage.deleteNode(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  Mockito.when(storage.writeBinaryData(Mockito.anyString(),Mockito.anyString())).thenReturn(new ByteArrayOutputStream());
  listenableStorage=new DefaultListenableAppStorage(storage);
  listenableStorage.addListener(this,eventList -> lastEventList=eventList);
}","@Before public void setUp(){
  AppStorage storage=Mockito.mock(AppStorage.class);
  Mockito.when(storage.createNode(Mockito.anyString(),Mockito.anyString(),Mockito.anyString(),Mockito.anyString(),Mockito.anyInt(),Mockito.any(NodeGenericMetadata.class))).thenReturn(new NodeInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,0,0,new NodeGenericMetadata()));
  Mockito.when(storage.deleteNode(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  Mockito.when(storage.writeBinaryData(Mockito.anyString(),Mockito.anyString())).thenReturn(new ByteArrayOutputStream());
  listenableStorage=new DefaultListenableAppStorage(storage);
  listenableStorage.addListener(l);
}"
38809,"@After public void tearDown(){
  listenableStorage.removeListeners(this);
}","@After public void tearDown(){
  listenableStorage.removeListeners();
}"
38810,"private UUID deleteNode(UUID nodeUuid){
  checkNodeExists(nodeUuid);
  if (nodeUuid.toString().equals(rootNodeVar.get().getId())) {
    throw new AfsStorageException(""String_Node_Str"");
  }
  for (  UUID childNodeUuid : childNodesMap.get(nodeUuid)) {
    deleteNode(childNodeUuid);
  }
  NodeInfo nodeInfo=nodeInfoMap.remove(nodeUuid);
  for (  String dataName : dataNamesMap.get(nodeUuid)) {
    dataMap.remove(new NamedLink(nodeUuid,dataName));
  }
  dataNamesMap.remove(nodeUuid);
  childNodesMap.remove(nodeUuid);
  UUID parentNodeUuid=parentNodeMap.remove(nodeUuid);
  removeFromList(childNodesMap,parentNodeUuid,nodeUuid);
  childNodeMap.remove(new NamedLink(parentNodeUuid,nodeInfo.getName()));
  for (  NamedLink link : dependencyNodesMap.get(nodeUuid)) {
    dependencyNodesByNameMap.remove(new NamedLink(nodeUuid,link.getName()));
    removeFromList(backwardDependencyNodesMap,link.getNodeUuid(),nodeUuid);
  }
  dependencyNodesMap.remove(nodeUuid);
  return parentNodeUuid;
}","private UUID deleteNode(UUID nodeUuid){
  checkNodeExists(nodeUuid);
  if (nodeUuid.toString().equals(rootNodeVar.get().getId())) {
    throw new AfsStorageException(""String_Node_Str"");
  }
  for (  UUID childNodeUuid : childNodesMap.get(nodeUuid)) {
    deleteNode(childNodeUuid);
  }
  NodeInfo nodeInfo=nodeInfoMap.remove(nodeUuid);
  for (  String dataName : dataNamesMap.get(nodeUuid)) {
    dataMap.remove(new NamedLink(nodeUuid,dataName));
  }
  dataNamesMap.remove(nodeUuid);
  childNodesMap.remove(nodeUuid);
  UUID parentNodeUuid=parentNodeMap.remove(nodeUuid);
  removeFromList(childNodesMap,parentNodeUuid,nodeUuid);
  childNodeMap.remove(new NamedLink(parentNodeUuid,nodeInfo.getName()));
  for (  UUID otherNodeUuid : backwardDependencyNodesMap.get(nodeUuid)) {
    List<NamedLink> linksToRemove=new ArrayList<>();
    for (    NamedLink link : dependencyNodesMap.get(otherNodeUuid)) {
      if (link.getNodeUuid().equals(nodeUuid)) {
        linksToRemove.add(link);
      }
    }
    for (    NamedLink linkToRemove : linksToRemove) {
      removeFromList(dependencyNodesMap,otherNodeUuid,linkToRemove);
      dependencyNodesByNameMap.remove(new NamedLink(otherNodeUuid,linkToRemove.getName()));
    }
  }
  for (  NamedLink link : dependencyNodesMap.get(nodeUuid)) {
    dependencyNodesByNameMap.remove(new NamedLink(nodeUuid,link.getName()));
    removeFromList(backwardDependencyNodesMap,link.getNodeUuid(),nodeUuid);
  }
  dependencyNodesMap.remove(nodeUuid);
  return parentNodeUuid;
}"
38811,"@Test public void parentChangeTest() throws IOException, InterruptedException {
  NodeInfo rootFolderInfo=storage.createRootNodeIfNotExists(storage.getFileSystemName(),FOLDER_PSEUDO_CLASS);
  NodeInfo folder1Info=storage.createNode(rootFolderInfo.getId(),""String_Node_Str"",FOLDER_PSEUDO_CLASS,""String_Node_Str"",0,new NodeGenericMetadata());
  NodeInfo folder2Info=storage.createNode(rootFolderInfo.getId(),""String_Node_Str"",FOLDER_PSEUDO_CLASS,""String_Node_Str"",0,new NodeGenericMetadata());
  storage.flush();
  eventStack.take();
  eventStack.take();
  eventStack.take();
  NodeInfo fileInfo=storage.createNode(folder1Info.getId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,new NodeGenericMetadata());
  storage.flush();
  eventStack.take();
  assertEquals(folder1Info,storage.getParentNode(fileInfo.getId()).orElseThrow(AssertionError::new));
  storage.setParentNode(fileInfo.getId(),folder2Info.getId());
  storage.flush();
  assertEquals(new ParentChanged(fileInfo.getId()),eventStack.take());
  assertEquals(folder2Info,storage.getParentNode(fileInfo.getId()).orElseThrow(AssertionError::new));
  assertTrue(eventStack.isEmpty());
}","@Test public void parentChangeTest() throws InterruptedException {
  NodeInfo rootFolderInfo=storage.createRootNodeIfNotExists(storage.getFileSystemName(),FOLDER_PSEUDO_CLASS);
  NodeInfo folder1Info=storage.createNode(rootFolderInfo.getId(),""String_Node_Str"",FOLDER_PSEUDO_CLASS,""String_Node_Str"",0,new NodeGenericMetadata());
  NodeInfo folder2Info=storage.createNode(rootFolderInfo.getId(),""String_Node_Str"",FOLDER_PSEUDO_CLASS,""String_Node_Str"",0,new NodeGenericMetadata());
  storage.flush();
  eventStack.take();
  eventStack.take();
  eventStack.take();
  NodeInfo fileInfo=storage.createNode(folder1Info.getId(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,new NodeGenericMetadata());
  storage.flush();
  eventStack.take();
  assertEquals(folder1Info,storage.getParentNode(fileInfo.getId()).orElseThrow(AssertionError::new));
  storage.setParentNode(fileInfo.getId(),folder2Info.getId());
  storage.flush();
  assertEquals(new ParentChanged(fileInfo.getId()),eventStack.take());
  assertEquals(folder2Info,storage.getParentNode(fileInfo.getId()).orElseThrow(AssertionError::new));
  assertTrue(eventStack.isEmpty());
}"
38812,"@After public void tearDown() throws Exception {
  storage.close();
}","@After public void tearDown(){
  storage.close();
}"
38813,"private AtomicInteger getRuleMatchCountInternal(String ruleId){
  AtomicInteger count=rulesMatchCount.get(ruleId);
  if (count == null) {
    count=new AtomicInteger();
    rulesMatchCount.put(ruleId,count);
  }
  return count;
}","private AtomicInteger getRuleMatchCountInternal(String ruleId){
  return rulesMatchCount.computeIfAbsent(ruleId,k -> new AtomicInteger());
}"
38814,"private ModifiedNetwork loadNetworkFromVirtualCase(VirtualCase virtualCase){
  ProjectCase baseCase=virtualCase.getCase().orElseThrow(() -> new AfsException(""String_Node_Str""));
  ModifiedNetwork modifiedNetwork=loadNetworkFromProjectCase(baseCase);
  if (modifiedNetwork.getScriptError() != null) {
    return modifiedNetwork;
  }
  ModificationScript script=virtualCase.getScript().orElseThrow(VirtualCase::createScriptLinkIsDeadException);
  LOGGER.info(""String_Node_Str"" + virtualCase.getId());
  return applyScript(modifiedNetwork.getNetwork(),modifiedNetwork.getScriptOutput(),script);
}","private ModifiedNetwork loadNetworkFromVirtualCase(VirtualCase virtualCase){
  ProjectCase baseCase=virtualCase.getCase().orElseThrow(() -> new AfsException(""String_Node_Str""));
  ModifiedNetwork modifiedNetwork=loadNetworkFromProjectCase(baseCase);
  if (modifiedNetwork.getScriptError() != null) {
    return modifiedNetwork;
  }
  ModificationScript script=virtualCase.getScript().orElseThrow(VirtualCase::createScriptLinkIsDeadException);
  LOGGER.info(""String_Node_Str"",virtualCase.getId());
  return applyScript(modifiedNetwork.getNetwork(),modifiedNetwork.getScriptOutput(),script);
}"
38815,@Deprecated Integer getOptionalIntProperty(String name);,"/** 
 * @deprecated Use getOptionalIntegerProperty(String) instead.
 */
@Deprecated Integer getOptionalIntProperty(String name);"
38816,@Deprecated Boolean getOptinalBooleanProperty(String name);,"/** 
 * @deprecated Use getOptionalBooleanProperty(String) instead.
 */
@Deprecated Boolean getOptinalBooleanProperty(String name);"
38817,"GzMemDataSource(String fileName,InputStream content){
  super(DataSourceUtil.getBaseName(fileName));
  String zipped=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
  putData(zipped,content);
}","GzMemDataSource(String fileName,InputStream content){
  super(DataSourceUtil.getBaseName(fileName));
  String zipped=fileName.substring(0,fileName.lastIndexOf('.'));
  putData(zipped,content);
}"
38818,"public String anonymize(String str){
  if (str == null) {
    return null;
  }
  String str2=mapping.get(str);
  if (str2 == null) {
    str2=getAlpha(mapping.size() + 1);
    mapping.put(str,str2);
  }
  return str2;
}","public String anonymize(String str){
  if (str == null) {
    return null;
  }
  return mapping.computeIfAbsent(str,k -> getAlpha(mapping.size() + 1));
}"
38819,"@Override public void onTaskEnd(StatisticsReader.TaskExecution task,StatisticsReader.JobExecution job){
  if (task.workingDataSize != null) {
    String slaveId=task.slaveRank + ""String_Node_Str"" + task.slaveThread;
    AtomicLong workingDataSize=workingDataSizePerSlave.get(slaveId);
    if (workingDataSize == null) {
      workingDataSize=new AtomicLong();
      workingDataSizePerSlave.put(slaveId,workingDataSize);
    }
    workingDataSize.addAndGet(task.workingDataSize);
    totalWorkingDataSize[0]+=task.workingDataSize;
  }
}","@Override public void onTaskEnd(StatisticsReader.TaskExecution task,StatisticsReader.JobExecution job){
  if (task.workingDataSize != null) {
    String slaveId=task.slaveRank + ""String_Node_Str"" + task.slaveThread;
    AtomicLong workingDataSize=workingDataSizePerSlave.computeIfAbsent(slaveId,k -> new AtomicLong());
    workingDataSize.addAndGet(task.workingDataSize);
    totalWorkingDataSize[0]+=task.workingDataSize;
  }
}"
38820,"public static void exportWorkingDataSize(Path dbDir,String dbName) throws IOException {
  Objects.requireNonNull(dbDir);
  Objects.requireNonNull(dbName);
  Path csv=dbDir.resolve(dbName + ""String_Node_Str"");
  Path workingDataSizeCsv=dbDir.resolve(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"",workingDataSizeCsv);
  final Map<String,AtomicLong> workingDataSizePerSlave=new HashMap<>();
  final long[] totalWorkingDataSize=new long[1];
  try (StatisticsReader reader=new StatisticsReader(csv)){
    reader.read(new StatisticsReader.AbstractHandler(){
      @Override public void onTaskEnd(      StatisticsReader.TaskExecution task,      StatisticsReader.JobExecution job){
        if (task.workingDataSize != null) {
          String slaveId=task.slaveRank + ""String_Node_Str"" + task.slaveThread;
          AtomicLong workingDataSize=workingDataSizePerSlave.get(slaveId);
          if (workingDataSize == null) {
            workingDataSize=new AtomicLong();
            workingDataSizePerSlave.put(slaveId,workingDataSize);
          }
          workingDataSize.addAndGet(task.workingDataSize);
          totalWorkingDataSize[0]+=task.workingDataSize;
        }
      }
    }
);
  }
   try (BufferedWriter writer=Files.newBufferedWriter(workingDataSizeCsv,StandardCharsets.UTF_8)){
    writer.write(""String_Node_Str"" + CSV_SEPARATOR + ""String_Node_Str"");
    writer.newLine();
    for (    Map.Entry<String,AtomicLong> entry : workingDataSizePerSlave.entrySet()) {
      String slaveId=entry.getKey();
      long workingDataSize=entry.getValue().get();
      writer.write(slaveId + CSV_SEPARATOR + workingDataSize);
      writer.newLine();
    }
    writer.write(""String_Node_Str"" + CSV_SEPARATOR + totalWorkingDataSize[0]);
    writer.newLine();
  }
 }","public static void exportWorkingDataSize(Path dbDir,String dbName) throws IOException {
  Objects.requireNonNull(dbDir);
  Objects.requireNonNull(dbName);
  Path csv=dbDir.resolve(dbName + ""String_Node_Str"");
  Path workingDataSizeCsv=dbDir.resolve(""String_Node_Str"");
  LOGGER.info(""String_Node_Str"",workingDataSizeCsv);
  final Map<String,AtomicLong> workingDataSizePerSlave=new HashMap<>();
  final long[] totalWorkingDataSize=new long[1];
  try (StatisticsReader reader=new StatisticsReader(csv)){
    reader.read(new StatisticsReader.AbstractHandler(){
      @Override public void onTaskEnd(      StatisticsReader.TaskExecution task,      StatisticsReader.JobExecution job){
        if (task.workingDataSize != null) {
          String slaveId=task.slaveRank + ""String_Node_Str"" + task.slaveThread;
          AtomicLong workingDataSize=workingDataSizePerSlave.computeIfAbsent(slaveId,k -> new AtomicLong());
          workingDataSize.addAndGet(task.workingDataSize);
          totalWorkingDataSize[0]+=task.workingDataSize;
        }
      }
    }
);
  }
   try (BufferedWriter writer=Files.newBufferedWriter(workingDataSizeCsv,StandardCharsets.UTF_8)){
    writer.write(""String_Node_Str"" + CSV_SEPARATOR + ""String_Node_Str"");
    writer.newLine();
    for (    Map.Entry<String,AtomicLong> entry : workingDataSizePerSlave.entrySet()) {
      String slaveId=entry.getKey();
      long workingDataSize=entry.getValue().get();
      writer.write(slaveId + CSV_SEPARATOR + workingDataSize);
      writer.newLine();
    }
    writer.write(""String_Node_Str"" + CSV_SEPARATOR + totalWorkingDataSize[0]);
    writer.newLine();
  }
 }"
38821,"@Override @Deprecated public void onProgress(CommandExecution execution,int executionIndex){
}","/** 
 * @deprecated Use onExecutionCompletion(CommandExecution, int) instead.
 */
@Override @Deprecated public void onProgress(CommandExecution execution,int executionIndex){
}"
38822,"@Deprecated CommandExecutor newCommandExecutor(Map<String,String> env,String workingDirPrefix,boolean debug) throws Exception ;","/** 
 * @deprecated Use execute(ExecutionEnvironment, ExecutionHandler<R>) instead.
 */
@Deprecated CommandExecutor newCommandExecutor(Map<String,String> env,String workingDirPrefix,boolean debug) throws Exception ;"
38823,"@Deprecated void onProgress(CommandExecution execution,int executionIndex);","/** 
 * @deprecated Use onExecutionCompletion(CommandExecution, int) instead.
 */
@Deprecated void onProgress(CommandExecution execution,int executionIndex);"
38824,"public InputFile(Function<Integer,String> nameFunc,FilePreProcessor preProcessor){
  this.name=new FunctionFileName(nameFunc,name -> checkName(name,preProcessor));
  this.preProcessor=preProcessor;
}","public InputFile(Function<Integer,String> nameFunc,FilePreProcessor preProcessor){
  this.name=new FunctionFileName(nameFunc,fileName -> checkName(fileName,preProcessor));
  this.preProcessor=preProcessor;
}"
38825,"@Deprecated public static DataSource createReadOnly(Path file){
  return createDataSource(file);
}","/** 
 * @deprecated Use createDataSource(Path) instead.
 */
@Deprecated public static DataSource createReadOnly(Path file){
  return createDataSource(file);
}"
38826,"@Override protected String getTypeDescription(){
  return ""String_Node_Str"";
}","@Override protected String getTypeDescription(){
  return TYPE_DESCRIPTION;
}"
38827,"void update(){
  if (components != null) {
    return;
  }
  long startTime=System.currentTimeMillis();
  for (  Bus b : network.getBusBreakerView().getBuses()) {
    setComponentNumber((BusExt)b,-1);
  }
  int num=0;
  Map<String,Integer> id2num=new HashMap<>();
  List<BusExt> num2bus=new ArrayList<>();
  for (  Bus bus : network.getBusView().getBuses()) {
    num2bus.add((BusExt)bus);
    id2num.put(bus.getId(),num);
    num++;
  }
  TIntArrayList[] adjacencyList=new TIntArrayList[num];
  for (int i=0; i < adjacencyList.length; i++) {
    adjacencyList[i]=new TIntArrayList(3);
  }
  fillAdjacencyList(id2num,adjacencyList);
  ConnectedComponentsComputationResult result=GraphUtil.computeConnectedComponents(adjacencyList);
  components=new ArrayList<>(result.getComponentSize().length);
  for (int i=0; i < result.getComponentSize().length; i++) {
    components.add(createComponent(i,result.getComponentSize()[i]));
  }
  for (int i=0; i < result.getComponentNumber().length; i++) {
    BusExt bus=num2bus.get(i);
    setComponentNumber(bus,result.getComponentNumber()[i]);
  }
  LOGGER.debug(getComponentLabel() + ""String_Node_Str"",System.currentTimeMillis() - startTime);
}","void update(){
  if (components != null) {
    return;
  }
  long startTime=System.currentTimeMillis();
  for (  Bus b : network.getBusBreakerView().getBuses()) {
    setComponentNumber((BusExt)b,-1);
  }
  int num=0;
  Map<String,Integer> id2num=new HashMap<>();
  List<BusExt> num2bus=new ArrayList<>();
  for (  Bus bus : network.getBusView().getBuses()) {
    num2bus.add((BusExt)bus);
    id2num.put(bus.getId(),num);
    num++;
  }
  TIntArrayList[] adjacencyList=new TIntArrayList[num];
  for (int i=0; i < adjacencyList.length; i++) {
    adjacencyList[i]=new TIntArrayList(3);
  }
  fillAdjacencyList(id2num,adjacencyList);
  ConnectedComponentsComputationResult result=GraphUtil.computeConnectedComponents(adjacencyList);
  components=new ArrayList<>(result.getComponentSize().length);
  for (int i=0; i < result.getComponentSize().length; i++) {
    components.add(createComponent(i,result.getComponentSize()[i]));
  }
  for (int i=0; i < result.getComponentNumber().length; i++) {
    BusExt bus=num2bus.get(i);
    setComponentNumber(bus,result.getComponentNumber()[i]);
  }
  LOGGER.debug(""String_Node_Str"",getComponentLabel(),System.currentTimeMillis() - startTime);
}"
38828,"@Override public String getName(VoltageLevel voltageLevel,TIntArrayList nodes){
  AtomicInteger i;
  lock.lock();
  try {
    i=counter.get(voltageLevel);
    if (i == null) {
      i=new AtomicInteger();
      counter.put(voltageLevel,i);
    }
  }
  finally {
    lock.unlock();
  }
  return voltageLevel.getId() + ""String_Node_Str"" + i.getAndIncrement();
}","@Override public String getName(VoltageLevel voltageLevel,TIntArrayList nodes){
  AtomicInteger i;
  lock.lock();
  try {
    i=counter.computeIfAbsent(voltageLevel,k -> new AtomicInteger());
  }
  finally {
    lock.unlock();
  }
  return voltageLevel.getId() + ""String_Node_Str"" + i.getAndIncrement();
}"
38829,"protected BusChecker getBusChecker(){
  return CALCULATED_BUS_BREAKER_CHECKER;
}","@Override protected BusChecker getBusChecker(){
  return CALCULATED_BUS_BREAKER_CHECKER;
}"
38830,"@Deprecated static void checkTargetP(Validable validable,float targetP){
  checkActivePowerSetpoint(validable,targetP);
}","/** 
 * @deprecated Use checkActivePowerSetpoint(Validable, float) instead.
 */
@Deprecated static void checkTargetP(Validable validable,float targetP){
  checkActivePowerSetpoint(validable,targetP);
}"
38831,"@Deprecated public boolean isComputationOk(){
  return limitViolationsResult.isComputationOk();
}","/** 
 * @deprecated Use getLimitViolationsResult().isComputationOk() instead.
 */
@Deprecated public boolean isComputationOk(){
  return limitViolationsResult.isComputationOk();
}"
38832,"@Deprecated public List<String> getActionsTaken(){
  return limitViolationsResult.getActionsTaken();
}","/** 
 * @deprecated Use getLimitViolationsResult().getActionsTaken() instead.
 */
@Deprecated public List<String> getActionsTaken(){
  return limitViolationsResult.getActionsTaken();
}"
38833,"@Deprecated public List<LimitViolation> getLimitViolations(){
  return limitViolationsResult.getLimitViolations();
}","/** 
 * @deprecated Use getLimitViolationsResult().getLimitViolations() instead.
 */
@Deprecated public List<LimitViolation> getLimitViolations(){
  return limitViolationsResult.getLimitViolations();
}"
38834,"private int printUsage(PrintStream err){
  HelpFormatter formatter=new HelpFormatter();
  PrintWriter usage=new PrintWriter(err);
  formatter.printUsage(usage,80,""String_Node_Str"");
  usage.append(System.lineSeparator()).append(""String_Node_Str"").append(System.lineSeparator());
  formatter.printOptions(usage,80,getScriptOptions(),formatter.getLeftPadding(),formatter.getDescPadding());
  usage.append(System.lineSeparator()).append(""String_Node_Str"").append(System.lineSeparator()).append(System.lineSeparator());
  List<Tool> allTools=Lists.newArrayList(tools).stream().filter(t -> !t.getCommand().isHidden()).collect(Collectors.toList());
  Map<String,Collection<Tool>> toolsByTheme=new TreeMap<>(Multimaps.index(allTools,tool -> tool.getCommand().getTheme()).asMap());
  for (  Map.Entry<String,Collection<Tool>> entry : toolsByTheme.entrySet()) {
    String theme=entry.getKey();
    List<Tool> tools=new ArrayList<>(entry.getValue());
    Collections.sort(tools,Comparator.comparing(t -> t.getCommand().getName()));
    usage.append(theme != null ? theme : ""String_Node_Str"").append(""String_Node_Str"").append(System.lineSeparator());
    for (    Tool tool : tools) {
      usage.append(String.format(""String_Node_Str"",tool.getCommand().getName(),tool.getCommand().getDescription())).append(System.lineSeparator());
    }
    usage.append(System.lineSeparator());
  }
  usage.flush();
  return COMMAND_NOT_FOUND_STATUS;
}","private int printUsage(PrintStream err){
  HelpFormatter formatter=new HelpFormatter();
  PrintWriter usage=new PrintWriter(err);
  formatter.printUsage(usage,80,""String_Node_Str"");
  usage.append(System.lineSeparator()).append(""String_Node_Str"").append(System.lineSeparator());
  formatter.printOptions(usage,80,getScriptOptions(),formatter.getLeftPadding(),formatter.getDescPadding());
  usage.append(System.lineSeparator()).append(""String_Node_Str"").append(System.lineSeparator()).append(System.lineSeparator());
  List<Tool> allTools=Lists.newArrayList(tools).stream().filter(t -> !t.getCommand().isHidden()).collect(Collectors.toList());
  Map<String,Collection<Tool>> toolsByTheme=new TreeMap<>(Multimaps.index(allTools,tool -> tool.getCommand().getTheme()).asMap());
  for (  Map.Entry<String,Collection<Tool>> entry : toolsByTheme.entrySet()) {
    String theme=entry.getKey();
    usage.append(theme != null ? theme : ""String_Node_Str"").append(""String_Node_Str"").append(System.lineSeparator());
    entry.getValue().stream().sorted(Comparator.comparing(t -> t.getCommand().getName())).forEach(tool -> usage.append(String.format(""String_Node_Str"",tool.getCommand().getName(),tool.getCommand().getDescription())).append(System.lineSeparator()));
    usage.append(System.lineSeparator());
  }
  usage.flush();
  return COMMAND_NOT_FOUND_STATUS;
}"
38835,"@Deprecated default void run(CommandLine line) throws Exception {
}","/** 
 * @deprecated Use run(CommandLine, ToolRunningContext) instead.
 */
@Deprecated default void run(CommandLine line) throws Exception {
}"
38836,"private static void createXnodeCoupler(UcteNetworkExt ucteNetwork,UcteLine ucteLine,UcteNodeCode ucteXnodeCode,UcteVoltageLevel ucteXvoltageLevel,UcteNodeCode ucteOtherNodeCode,Network network){
  String xNodeName=ucteXnodeCode.toString();
  String yNodeName=""String_Node_Str"" + xNodeName.substring(1);
  VoltageLevel xNodeVoltageLevel=network.getVoltageLevel(ucteXvoltageLevel.getName());
  xNodeVoltageLevel.getBusBreakerView().newBus().setId(yNodeName).add();
  UcteNode ucteXnode=ucteNetwork.getNode(ucteXnodeCode);
  LOGGER.warn(""String_Node_Str"",xNodeName + yNodeName,ucteXnode.getCode());
  float p0=0;
  if (isValueValid(ucteXnode.getActiveLoad())) {
    p0+=ucteXnode.getActiveLoad();
  }
  if (isValueValid(ucteXnode.getActivePowerGeneration())) {
    p0+=ucteXnode.getActivePowerGeneration();
  }
  float q0=0;
  if (isValueValid(ucteXnode.getReactiveLoad())) {
    q0+=ucteXnode.getReactiveLoad();
  }
  if (isValueValid(ucteXnode.getReactivePowerGeneration())) {
    q0+=ucteXnode.getReactivePowerGeneration();
  }
  xNodeVoltageLevel.newDanglingLine().setId(xNodeName + yNodeName).setBus(yNodeName).setConnectableBus(yNodeName).setR(0.0f).setX(LINE_MIN_Z).setG(0f).setB(0f).setP0(p0).setQ0(q0).setUcteXnodeCode(ucteXnode.getCode().toString()).add();
  xNodeVoltageLevel.getBusBreakerView().newSwitch().setId(ucteLine.getId().toString()).setBus1(yNodeName).setBus2(ucteOtherNodeCode.toString()).setOpen(ucteLine.getStatus() == UcteElementStatus.BUSBAR_COUPLER_OUT_OF_OPERATION).add();
}","private static void createXnodeCoupler(UcteNetworkExt ucteNetwork,UcteLine ucteLine,UcteNodeCode ucteXnodeCode,UcteVoltageLevel ucteXvoltageLevel,UcteNodeCode ucteOtherNodeCode,Network network){
  String xNodeName=ucteXnodeCode.toString();
  String yNodeName=""String_Node_Str"" + xNodeName.substring(1);
  VoltageLevel xNodeVoltageLevel=network.getVoltageLevel(ucteXvoltageLevel.getName());
  xNodeVoltageLevel.getBusBreakerView().newBus().setId(yNodeName).add();
  UcteNode ucteXnode=ucteNetwork.getNode(ucteXnodeCode);
  LOGGER.warn(""String_Node_Str"",xNodeName,yNodeName,ucteXnode.getCode());
  float p0=0;
  if (isValueValid(ucteXnode.getActiveLoad())) {
    p0+=ucteXnode.getActiveLoad();
  }
  if (isValueValid(ucteXnode.getActivePowerGeneration())) {
    p0+=ucteXnode.getActivePowerGeneration();
  }
  float q0=0;
  if (isValueValid(ucteXnode.getReactiveLoad())) {
    q0+=ucteXnode.getReactiveLoad();
  }
  if (isValueValid(ucteXnode.getReactivePowerGeneration())) {
    q0+=ucteXnode.getReactivePowerGeneration();
  }
  xNodeVoltageLevel.newDanglingLine().setId(xNodeName + yNodeName).setBus(yNodeName).setConnectableBus(yNodeName).setR(0.0f).setX(LINE_MIN_Z).setG(0f).setB(0f).setP0(p0).setQ0(q0).setUcteXnodeCode(ucteXnode.getCode().toString()).add();
  xNodeVoltageLevel.getBusBreakerView().newSwitch().setId(ucteLine.getId().toString()).setBus1(yNodeName).setBus2(ucteOtherNodeCode.toString()).setOpen(ucteLine.getStatus() == UcteElementStatus.BUSBAR_COUPLER_OUT_OF_OPERATION).add();
}"
38837,"private static TwoWindingsTransformer createXnodeTransfo(UcteNetworkExt ucteNetwork,UcteTransformer ucteTransfo,boolean connected,UcteNodeCode xNodeCode,UcteNodeCode ucteOtherNodeCode,UcteVoltageLevel ucteOtherVoltageLevel,Substation substation,EntsoeFileName ucteFileName){
  String xNodeName=xNodeCode.toString();
  String yNodeName=ucteFileName.getCountry() != null ? ucteFileName.getCountry() + ""String_Node_Str"" + xNodeName : ""String_Node_Str"" + xNodeName;
  VoltageLevel yVoltageLevel=substation.newVoltageLevel().setId(yNodeName + ""String_Node_Str"").setNominalV(xNodeCode.getVoltageLevelCode().getVoltageLevel()).setTopologyKind(TopologyKind.BUS_BREAKER).add();
  yVoltageLevel.getBusBreakerView().newBus().setId(yNodeName).add();
  UcteNode ucteXnode=ucteNetwork.getNode(xNodeCode);
  LOGGER.warn(""String_Node_Str"",xNodeName + yNodeName,ucteXnode.getCode());
  float p0=0;
  if (isValueValid(ucteXnode.getActiveLoad())) {
    p0+=ucteXnode.getActiveLoad();
  }
  if (isValueValid(ucteXnode.getActivePowerGeneration())) {
    p0+=ucteXnode.getActivePowerGeneration();
  }
  float q0=0;
  if (isValueValid(ucteXnode.getReactiveLoad())) {
    q0+=ucteXnode.getReactiveLoad();
  }
  if (isValueValid(ucteXnode.getReactivePowerGeneration())) {
    q0+=ucteXnode.getReactivePowerGeneration();
  }
  yVoltageLevel.newDanglingLine().setId(xNodeName + ""String_Node_Str"" + yNodeName).setBus(yNodeName).setConnectableBus(yNodeName).setR(0.0f).setX(LINE_MIN_Z).setG(0f).setB(0f).setP0(p0).setQ0(q0).setUcteXnodeCode(ucteXnode.getCode().toString()).add();
  String voltageLevelId1;
  String voltageLevelId2;
  String busId1;
  String busId2;
  if (ucteXnode.getCode().equals(ucteTransfo.getId().getNodeCode1())) {
    voltageLevelId1=ucteOtherVoltageLevel.getName();
    voltageLevelId2=yVoltageLevel.getName();
    busId1=ucteOtherNodeCode.toString();
    busId2=yNodeName;
  }
 else {
    voltageLevelId1=yVoltageLevel.getName();
    voltageLevelId2=ucteOtherVoltageLevel.getName();
    busId1=yNodeName;
    busId2=ucteOtherNodeCode.toString();
  }
  return substation.newTwoWindingsTransformer().setId(ucteTransfo.getId().toString()).setVoltageLevel1(voltageLevelId1).setVoltageLevel2(voltageLevelId2).setBus1(connected ? busId1 : null).setBus2(connected ? busId2 : null).setConnectableBus1(busId1).setConnectableBus2(busId2).setRatedU1(ucteTransfo.getRatedVoltage2()).setRatedU2(ucteTransfo.getRatedVoltage1()).setR(ucteTransfo.getResistance()).setX(ucteTransfo.getReactance()).setG(getConductance(ucteTransfo)).setB(getSusceptance(ucteTransfo)).add();
}","private static TwoWindingsTransformer createXnodeTransfo(UcteNetworkExt ucteNetwork,UcteTransformer ucteTransfo,boolean connected,UcteNodeCode xNodeCode,UcteNodeCode ucteOtherNodeCode,UcteVoltageLevel ucteOtherVoltageLevel,Substation substation,EntsoeFileName ucteFileName){
  String xNodeName=xNodeCode.toString();
  String yNodeName=ucteFileName.getCountry() != null ? ucteFileName.getCountry() + ""String_Node_Str"" + xNodeName : ""String_Node_Str"" + xNodeName;
  VoltageLevel yVoltageLevel=substation.newVoltageLevel().setId(yNodeName + ""String_Node_Str"").setNominalV(xNodeCode.getVoltageLevelCode().getVoltageLevel()).setTopologyKind(TopologyKind.BUS_BREAKER).add();
  yVoltageLevel.getBusBreakerView().newBus().setId(yNodeName).add();
  UcteNode ucteXnode=ucteNetwork.getNode(xNodeCode);
  LOGGER.warn(""String_Node_Str"",xNodeName,yNodeName,ucteXnode.getCode());
  float p0=0;
  if (isValueValid(ucteXnode.getActiveLoad())) {
    p0+=ucteXnode.getActiveLoad();
  }
  if (isValueValid(ucteXnode.getActivePowerGeneration())) {
    p0+=ucteXnode.getActivePowerGeneration();
  }
  float q0=0;
  if (isValueValid(ucteXnode.getReactiveLoad())) {
    q0+=ucteXnode.getReactiveLoad();
  }
  if (isValueValid(ucteXnode.getReactivePowerGeneration())) {
    q0+=ucteXnode.getReactivePowerGeneration();
  }
  yVoltageLevel.newDanglingLine().setId(xNodeName + ""String_Node_Str"" + yNodeName).setBus(yNodeName).setConnectableBus(yNodeName).setR(0.0f).setX(LINE_MIN_Z).setG(0f).setB(0f).setP0(p0).setQ0(q0).setUcteXnodeCode(ucteXnode.getCode().toString()).add();
  String voltageLevelId1;
  String voltageLevelId2;
  String busId1;
  String busId2;
  if (ucteXnode.getCode().equals(ucteTransfo.getId().getNodeCode1())) {
    voltageLevelId1=ucteOtherVoltageLevel.getName();
    voltageLevelId2=yVoltageLevel.getName();
    busId1=ucteOtherNodeCode.toString();
    busId2=yNodeName;
  }
 else {
    voltageLevelId1=yVoltageLevel.getName();
    voltageLevelId2=ucteOtherVoltageLevel.getName();
    busId1=yNodeName;
    busId2=ucteOtherNodeCode.toString();
  }
  return substation.newTwoWindingsTransformer().setId(ucteTransfo.getId().toString()).setVoltageLevel1(voltageLevelId1).setVoltageLevel2(voltageLevelId2).setBus1(connected ? busId1 : null).setBus2(connected ? busId2 : null).setConnectableBus1(busId1).setConnectableBus2(busId2).setRatedU1(ucteTransfo.getRatedVoltage2()).setRatedU2(ucteTransfo.getRatedVoltage1()).setR(ucteTransfo.getResistance()).setX(ucteTransfo.getReactance()).setG(getConductance(ucteTransfo)).setB(getSusceptance(ucteTransfo)).add();
}"
38838,"private String alignAndTruncate(String str,int strLen,Alignment alignment){
  String formattedStr=String.format(java.util.Locale.US,""String_Node_Str"" + (alignment.equals(Alignment.LEFT) ? ""String_Node_Str"" : ""String_Node_Str"") + strLen+ ""String_Node_Str"",str);
  return formattedStr.substring(0,strLen);
}","private String alignAndTruncate(String str,int strLen,Alignment alignment){
  String format=String.format(Locale.US,alignment.equals(Alignment.LEFT) ? ""String_Node_Str"" : ""String_Node_Str"",strLen);
  String formattedStr=String.format(Locale.US,format,str);
  return formattedStr.substring(0,strLen);
}"
38839,"public void load(int version,List<TimeSeries> timeSeriesList){
  checkVersion(version);
  Objects.requireNonNull(timeSeriesList);
  if (timeSeriesList.isEmpty()) {
    throw new TimeSeriesException(""String_Node_Str"");
  }
  Stopwatch stopWatch=Stopwatch.createStarted();
  List<DoubleTimeSeries> doubleTimeSeries=new ArrayList<>();
  List<StringTimeSeries> stringTimeSeries=new ArrayList<>();
  for (  TimeSeries timeSeries : timeSeriesList) {
    Objects.requireNonNull(timeSeries);
    if (timeSeries instanceof DoubleTimeSeries) {
      doubleTimeSeries.add((DoubleTimeSeries)timeSeries);
    }
 else     if (timeSeries instanceof StringTimeSeries) {
      stringTimeSeries.add((StringTimeSeries)timeSeries);
    }
 else {
      throw new AssertionError(""String_Node_Str"" + timeSeries.getClass());
    }
  }
  initTable(doubleTimeSeries,stringTimeSeries);
  for (  DoubleTimeSeries timeSeries : doubleTimeSeries) {
    loadDouble(version,timeSeries);
  }
  for (  StringTimeSeries timeSeries : stringTimeSeries) {
    loadString(version,timeSeries);
  }
  LOGGER.info(""String_Node_Str"",timeSeriesList.size(),version,stopWatch.elapsed(TimeUnit.MILLISECONDS));
}","public void load(int version,List<TimeSeries> timeSeriesList){
  checkVersion(version);
  Objects.requireNonNull(timeSeriesList);
  if (timeSeriesList.isEmpty()) {
    throw new TimeSeriesException(""String_Node_Str"");
  }
  Stopwatch stopWatch=Stopwatch.createStarted();
  List<DoubleTimeSeries> doubleTimeSeries=new ArrayList<>();
  List<StringTimeSeries> stringTimeSeries=new ArrayList<>();
  for (  TimeSeries timeSeries : timeSeriesList) {
    Objects.requireNonNull(timeSeries);
    if (timeSeries instanceof DoubleTimeSeries) {
      doubleTimeSeries.add((DoubleTimeSeries)timeSeries);
    }
 else     if (timeSeries instanceof StringTimeSeries) {
      stringTimeSeries.add((StringTimeSeries)timeSeries);
    }
 else {
      throw new AssertionError(""String_Node_Str"" + timeSeries.getClass());
    }
  }
  initTable(doubleTimeSeries,stringTimeSeries);
  for (  DoubleTimeSeries timeSeries : doubleTimeSeries) {
    timeSeries.synchronize(tableIndex);
    loadDouble(version,timeSeries);
  }
  for (  StringTimeSeries timeSeries : stringTimeSeries) {
    timeSeries.synchronize(tableIndex);
    loadString(version,timeSeries);
  }
  LOGGER.info(""String_Node_Str"",timeSeriesList.size(),version,stopWatch.elapsed(TimeUnit.MILLISECONDS));
}"
38840,"private void initTable(List<DoubleTimeSeries> doubleTimeSeries,List<StringTimeSeries> stringTimeSeries){
  initLock.lock();
  try {
    if (timeSeriesMetadata != null) {
      return;
    }
    timeSeriesMetadata=new ArrayList<>(doubleTimeSeries.size() + stringTimeSeries.size());
    for (    DoubleTimeSeries timeSeries : doubleTimeSeries.stream().sorted(Comparator.comparing(ts -> ts.getMetadata().getName())).collect(Collectors.toList())) {
      timeSeries.synchronize(tableIndex);
      timeSeriesMetadata.add(timeSeries.getMetadata());
      int i=doubleTimeSeriesNames.add(timeSeries.getMetadata().getName());
      timeSeriesIndexDoubleOrString.add(i);
    }
    for (    StringTimeSeries timeSeries : stringTimeSeries.stream().sorted(Comparator.comparing(ts -> ts.getMetadata().getName())).collect(Collectors.toList())) {
      timeSeries.synchronize(tableIndex);
      timeSeriesMetadata.add(timeSeries.getMetadata());
      int i=stringTimeSeriesNames.add(timeSeries.getMetadata().getName());
      timeSeriesIndexDoubleOrString.add(i);
    }
    if (tableIndex == null) {
      throw new TimeSeriesException(""String_Node_Str"");
    }
    int versionCount=toVersion - fromVersion + 1;
    int doubleBufferSize=versionCount * doubleTimeSeriesNames.size() * tableIndex.getPointCount();
    doubleBuffer=createDoubleBuffer(doubleBufferSize,Double.NaN);
    int stringBufferSize=versionCount * stringTimeSeriesNames.size() * tableIndex.getPointCount();
    stringBuffer=new CompactStringBuffer(stringBufferSize);
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"",FileUtils.byteCountToDisplaySize((long)doubleBuffer.capacity() * Double.BYTES + stringBuffer.capacity() * Integer.BYTES));
    }
    means=new double[doubleTimeSeriesNames.size() * versionCount];
    Arrays.fill(means,Double.NaN);
    stdDevs=new double[doubleTimeSeriesNames.size() * versionCount];
    Arrays.fill(stdDevs,Double.NaN);
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
    timeSeriesMetadata=null;
    doubleTimeSeriesNames.clear();
    stringTimeSeriesNames.clear();
    timeSeriesIndexDoubleOrString.clear();
    doubleBuffer=null;
    stringBuffer=null;
    means=null;
    stdDevs=null;
  }
 finally {
    initLock.unlock();
  }
}","private void initTable(List<DoubleTimeSeries> doubleTimeSeries,List<StringTimeSeries> stringTimeSeries){
  initLock.lock();
  try {
    if (timeSeriesMetadata != null) {
      return;
    }
    timeSeriesMetadata=new ArrayList<>(doubleTimeSeries.size() + stringTimeSeries.size());
    for (    DoubleTimeSeries timeSeries : doubleTimeSeries.stream().sorted(Comparator.comparing(ts -> ts.getMetadata().getName())).collect(Collectors.toList())) {
      timeSeriesMetadata.add(timeSeries.getMetadata());
      int i=doubleTimeSeriesNames.add(timeSeries.getMetadata().getName());
      timeSeriesIndexDoubleOrString.add(i);
    }
    for (    StringTimeSeries timeSeries : stringTimeSeries.stream().sorted(Comparator.comparing(ts -> ts.getMetadata().getName())).collect(Collectors.toList())) {
      timeSeriesMetadata.add(timeSeries.getMetadata());
      int i=stringTimeSeriesNames.add(timeSeries.getMetadata().getName());
      timeSeriesIndexDoubleOrString.add(i);
    }
    if (tableIndex == null) {
      throw new TimeSeriesException(""String_Node_Str"");
    }
    int versionCount=toVersion - fromVersion + 1;
    int doubleBufferSize=versionCount * doubleTimeSeriesNames.size() * tableIndex.getPointCount();
    doubleBuffer=createDoubleBuffer(doubleBufferSize,Double.NaN);
    int stringBufferSize=versionCount * stringTimeSeriesNames.size() * tableIndex.getPointCount();
    stringBuffer=new CompactStringBuffer(stringBufferSize);
    if (LOGGER.isInfoEnabled()) {
      LOGGER.info(""String_Node_Str"",FileUtils.byteCountToDisplaySize((long)doubleBuffer.capacity() * Double.BYTES + stringBuffer.capacity() * Integer.BYTES));
    }
    means=new double[doubleTimeSeriesNames.size() * versionCount];
    Arrays.fill(means,Double.NaN);
    stdDevs=new double[doubleTimeSeriesNames.size() * versionCount];
    Arrays.fill(stdDevs,Double.NaN);
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
    timeSeriesMetadata=null;
    doubleTimeSeriesNames.clear();
    stringTimeSeriesNames.clear();
    timeSeriesIndexDoubleOrString.clear();
    doubleBuffer=null;
    stringBuffer=null;
    means=null;
    stdDevs=null;
  }
 finally {
    initLock.unlock();
  }
}"
38841,"public int add(E e){
  Objects.requireNonNull(e);
  int i=list.size();
  list.add(e);
  reverse.put(e,i);
  return i;
}","public int add(E e){
  Objects.requireNonNull(e);
  lock.lock();
  try {
    int i=list.size();
    list.add(e);
    reverse.put(e,i);
    return i;
  }
  finally {
    lock.unlock();
  }
}"
38842,"int size(){
  return list.size();
}","int size(){
  lock.lock();
  try {
    return list.size();
  }
  finally {
    lock.unlock();
  }
}"
38843,"public E get(int index){
  return list.get(index);
}","public E get(int index){
  lock.lock();
  try {
    return list.get(index);
  }
  finally {
    lock.unlock();
  }
}"
38844,"void clear(){
  list.clear();
  reverse.clear();
}","void clear(){
  lock.lock();
  try {
    list.clear();
    reverse.clear();
  }
  finally {
    lock.unlock();
  }
}"
38845,"public int indexOf(E e){
  Objects.requireNonNull(e);
  if (!reverse.containsKey(e)) {
    return -1;
  }
  return reverse.get(e);
}","public int indexOf(E e){
  Objects.requireNonNull(e);
  lock.lock();
  try {
    if (!reverse.containsKey(e)) {
      return -1;
    }
    return reverse.get(e);
  }
  finally {
    lock.unlock();
  }
}"
38846,"public void putString(int index,String value){
  int num;
  if (value == null) {
    num=-1;
  }
 else {
    num=dict.indexOf(value);
    if (num == -1) {
      num=dict.add(value);
    }
  }
  buffer.put(index,num);
}","public void putString(int index,String value){
  int num;
  if (value == null) {
    num=-1;
  }
 else {
    num=dict.addIfNotAlreadyExist(value);
  }
  buffer.put(index,num);
}"
38847,"@Test public void test() throws IOException {
  NodeInfo info=new NodeInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000000,1000001,0,new NodeGenericMetadata());
  NodeDependency dependency=new NodeDependency(""String_Node_Str"",info);
  assertEquals(""String_Node_Str"",dependency.getName());
  assertEquals(info,dependency.getNodeInfo());
  assertEquals(""String_Node_Str"",dependency.toString());
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new AppStorageJsonModule());
  NodeDependency dependency2=objectMapper.readValue(objectMapper.writeValueAsString(dependency),NodeDependency.class);
  assertEquals(dependency,dependency2);
}","@Test public void test() throws IOException {
  NodeInfo info=new NodeInfo(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000000,1000001,0,new NodeGenericMetadata());
  NodeDependency dependency=new NodeDependency(""String_Node_Str"",info);
  assertEquals(""String_Node_Str"",dependency.getName());
  assertEquals(info,dependency.getNodeInfo());
  assertEquals(""String_Node_Str"",dependency.toString());
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new AppStorageJsonModule());
  NodeDependency dependency2=objectMapper.readValue(objectMapper.writeValueAsString(dependency),NodeDependency.class);
  assertEquals(dependency,dependency2);
}"
38848,"@Before public void setUp() throws Exception {
  objectMapper=new ObjectMapper().registerModule(new AppStorageJsonModule());
}","@Before public void setUp() throws Exception {
  objectMapper=JsonUtil.createObjectMapper().registerModule(new AppStorageJsonModule());
}"
38849,"@Before public void setUp() throws Exception {
  objectMapper=new ObjectMapper().registerModule(new AppStorageJsonModule());
}","@Before public void setUp() throws Exception {
  objectMapper=JsonUtil.createObjectMapper().registerModule(new AppStorageJsonModule());
}"
38850,"@Before public void setUp() throws Exception {
  objectMapper=new ObjectMapper();
}","@Before public void setUp() throws Exception {
  objectMapper=JsonUtil.createObjectMapper();
}"
38851,"public static <T>T parseJson(Reader reader,Function<JsonParser,T> function){
  Objects.requireNonNull(reader);
  Objects.requireNonNull(function);
  JsonFactory factory=new JsonFactory();
  try (JsonParser parser=factory.createParser(reader)){
    return function.apply(parser);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","public static <T>T parseJson(Reader reader,Function<JsonParser,T> function){
  Objects.requireNonNull(reader);
  Objects.requireNonNull(function);
  JsonFactory factory=createJsonFactory();
  try (JsonParser parser=factory.createParser(reader)){
    return function.apply(parser);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38852,"static Foo read(InputStream stream) throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  SimpleModule module=new SimpleModule();
  module.addDeserializer(Foo.class,new FooDeserializer());
  mapper.registerModule(module);
  return mapper.readValue(stream,Foo.class);
}","static Foo read(InputStream stream) throws IOException {
  ObjectMapper mapper=JsonUtil.createObjectMapper();
  SimpleModule module=new SimpleModule();
  module.addDeserializer(Foo.class,new FooDeserializer());
  mapper.registerModule(module);
  return mapper.readValue(stream,Foo.class);
}"
38853,"private static Contingency read(Path jsonFile){
  Objects.requireNonNull(jsonFile);
  try (InputStream is=Files.newInputStream(jsonFile)){
    ObjectMapper objectMapper=new ObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addDeserializer(Contingency.class,new ContingencyDeserializer());
    module.addDeserializer(ContingencyElement.class,new ContingencyElementDeserializer());
    objectMapper.registerModule(module);
    return objectMapper.readValue(is,Contingency.class);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","private static Contingency read(Path jsonFile){
  Objects.requireNonNull(jsonFile);
  try (InputStream is=Files.newInputStream(jsonFile)){
    ObjectMapper objectMapper=JsonUtil.createObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addDeserializer(Contingency.class,new ContingencyDeserializer());
    module.addDeserializer(ContingencyElement.class,new ContingencyElementDeserializer());
    objectMapper.registerModule(module);
    return objectMapper.readValue(is,Contingency.class);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38854,"private static void write(Contingency object,Path jsonFile){
  Objects.requireNonNull(object);
  Objects.requireNonNull(jsonFile);
  try (OutputStream os=Files.newOutputStream(jsonFile)){
    ObjectMapper mapper=new ObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addSerializer(ContingencyElement.class,new ContingencyElementSerializer());
    mapper.registerModule(module);
    ObjectWriter writer=mapper.writerWithDefaultPrettyPrinter();
    writer.writeValue(os,object);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","private static void write(Contingency object,Path jsonFile){
  Objects.requireNonNull(object);
  Objects.requireNonNull(jsonFile);
  try (OutputStream os=Files.newOutputStream(jsonFile)){
    ObjectMapper mapper=JsonUtil.createObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addSerializer(ContingencyElement.class,new ContingencyElementSerializer());
    mapper.registerModule(module);
    ObjectWriter writer=mapper.writerWithDefaultPrettyPrinter();
    writer.writeValue(os,object);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38855,"public static void write(LoadFlowResult result,Path jsonFile){
  Objects.requireNonNull(result);
  Objects.requireNonNull(jsonFile);
  try (OutputStream os=Files.newOutputStream(jsonFile)){
    ObjectMapper objectMapper=new ObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addSerializer(LoadFlowResult.class,new LoadFlowResultSerializer());
    objectMapper.registerModule(module);
    ObjectWriter writer=objectMapper.writerWithDefaultPrettyPrinter();
    writer.writeValue(os,result);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","public static void write(LoadFlowResult result,Path jsonFile){
  Objects.requireNonNull(result);
  Objects.requireNonNull(jsonFile);
  try (OutputStream os=Files.newOutputStream(jsonFile)){
    ObjectMapper objectMapper=JsonUtil.createObjectMapper();
    SimpleModule module=new SimpleModule();
    module.addSerializer(LoadFlowResult.class,new LoadFlowResultSerializer());
    objectMapper.registerModule(module);
    ObjectWriter writer=objectMapper.writerWithDefaultPrettyPrinter();
    writer.writeValue(os,result);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38856,"static void parseJson(JsonParser parser,List<DoubleArrayChunk> doubleChunks,List<StringArrayChunk> stringChunks,boolean single){
  Objects.requireNonNull(parser);
  try {
    JsonParsingContext context=new JsonParsingContext(doubleChunks,stringChunks);
    JsonToken token;
    while ((token=parser.nextToken()) != null) {
switch (token) {
case FIELD_NAME:
        parseFieldName(parser,context);
      break;
case END_OBJECT:
    parseEndObject(context);
  if (single) {
    return;
  }
 else {
    break;
  }
case END_ARRAY:
if (context.valuesOrLengthArray) {
  context.valuesOrLengthArray=false;
}
 else {
  return;
}
break;
case VALUE_NUMBER_FLOAT:
context.addDoubleValue(parser.getDoubleValue());
break;
case VALUE_NUMBER_INT:
parseValueNumberInt(parser,context);
break;
case VALUE_STRING:
context.addStringValue(parser.getValueAsString());
break;
default :
break;
}
}
}
 catch (IOException e) {
throw new UncheckedIOException(e);
}
}","static void parseJson(JsonParser parser,List<DoubleArrayChunk> doubleChunks,List<StringArrayChunk> stringChunks,boolean single){
  Objects.requireNonNull(parser);
  try {
    JsonParsingContext context=new JsonParsingContext(doubleChunks,stringChunks);
    JsonToken token;
    while ((token=parser.nextToken()) != null) {
switch (token) {
case FIELD_NAME:
        parseFieldName(parser,context);
      break;
case END_OBJECT:
    parseEndObject(context);
  if (single) {
    return;
  }
 else {
    break;
  }
case END_ARRAY:
if (context.valuesOrLengthArray) {
  context.valuesOrLengthArray=false;
}
 else {
  return;
}
break;
case VALUE_NUMBER_FLOAT:
context.addDoubleValue(parser.getDoubleValue());
break;
case VALUE_NUMBER_INT:
parseValueNumberInt(parser,context);
break;
case VALUE_STRING:
context.addStringValue(parser.getValueAsString());
break;
case VALUE_NULL:
context.addStringValue(null);
break;
default :
break;
}
}
}
 catch (IOException e) {
throw new UncheckedIOException(e);
}
}"
38857,"static void addCompressedChunk(JsonParsingContext context){
  if (context.doubleValues != null) {
    context.doubleChunks.add(new CompressedDoubleArrayChunk(context.offset,context.uncompressedLength,context.doubleValues.toArray(),context.stepLengths.toArray()));
    context.doubleValues=null;
    context.stepLengths=null;
    context.uncompressedLength=-1;
  }
 else   if (context.stringValues != null) {
    context.stringChunks.add(new CompressedStringArrayChunk(context.offset,context.uncompressedLength,context.stringValues.toArray(new String[context.stringValues.size()]),context.stepLengths.toArray()));
    context.stringValues=null;
    context.stepLengths=null;
    context.uncompressedLength=-1;
  }
 else {
    throw new AssertionError(""String_Node_Str"");
  }
}","static void addCompressedChunk(JsonParsingContext context){
  if (context.doubleValues != null && context.stringValues == null) {
    context.doubleChunks.add(new CompressedDoubleArrayChunk(context.offset,context.uncompressedLength,context.doubleValues.toArray(),context.stepLengths.toArray()));
    context.doubleValues=null;
    context.stepLengths=null;
    context.uncompressedLength=-1;
  }
 else   if (context.stringValues != null && context.doubleValues == null) {
    context.stringChunks.add(new CompressedStringArrayChunk(context.offset,context.uncompressedLength,context.stringValues.toArray(new String[context.stringValues.size()]),context.stepLengths.toArray()));
    context.stringValues=null;
    context.stepLengths=null;
    context.uncompressedLength=-1;
  }
 else   if (context.stringValues != null && context.doubleValues != null) {
    throw new AssertionError(""String_Node_Str"");
  }
 else {
    throw new AssertionError(""String_Node_Str"");
  }
}"
38858,"static void addUncompressedChunk(JsonParsingContext context){
  if (context.doubleValues != null) {
    context.doubleChunks.add(new UncompressedDoubleArrayChunk(context.offset,context.doubleValues.toArray()));
  }
 else   if (context.stringValues != null) {
    context.stringChunks.add(new UncompressedStringArrayChunk(context.offset,context.stringValues.toArray(new String[context.stringValues.size()])));
  }
 else {
    throw new AssertionError(""String_Node_Str"");
  }
}","static void addUncompressedChunk(JsonParsingContext context){
  if (context.doubleValues != null && context.stringValues == null) {
    context.doubleChunks.add(new UncompressedDoubleArrayChunk(context.offset,context.doubleValues.toArray()));
  }
 else   if (context.stringValues != null && context.doubleValues == null) {
    context.stringChunks.add(new UncompressedStringArrayChunk(context.offset,context.stringValues.toArray(new String[context.stringValues.size()])));
  }
 else   if (context.stringValues != null && context.doubleValues != null) {
    throw new AssertionError(""String_Node_Str"");
  }
 else {
    throw new AssertionError(""String_Node_Str"");
  }
}"
38859,"@Test public void compressTest() throws IOException {
  UncompressedDoubleArrayChunk chunk=new UncompressedDoubleArrayChunk(1,new double[]{1d,2d,2d,2d,2d,3d});
  DoubleArrayChunk maybeCompressedChunk=chunk.tryToCompress();
  assertTrue(maybeCompressedChunk instanceof CompressedDoubleArrayChunk);
  CompressedDoubleArrayChunk compressedChunk=(CompressedDoubleArrayChunk)maybeCompressedChunk;
  assertEquals(1,compressedChunk.getOffset());
  assertEquals(6,compressedChunk.getLength());
  assertTrue(compressedChunk.isCompressed());
  assertEquals(36,compressedChunk.getEstimatedSize());
  assertEquals(36d / 48,compressedChunk.getCompressionFactor(),0d);
  assertArrayEquals(new double[]{1d,2d,3d},compressedChunk.getStepValues(),0d);
  assertArrayEquals(new int[]{1,4,1},compressedChunk.getStepLengths());
  DoubleBuffer buffer=DoubleBuffer.allocate(7);
  for (int i=0; i < 7; i++) {
    buffer.put(i,Double.NaN);
  }
  compressedChunk.fillBuffer(buffer,0);
  assertArrayEquals(new double[]{Double.NaN,1d,2d,2d,2d,2d,3d},buffer.array(),0d);
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(jsonRef,JsonUtil.toJson(compressedChunk::writeJson));
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new TimeSeriesJsonModule());
  List<DoubleArrayChunk> chunks=objectMapper.readValue(objectMapper.writeValueAsString(Arrays.asList(chunk,compressedChunk)),TypeFactory.defaultInstance().constructCollectionType(List.class,DoubleArrayChunk.class));
  assertEquals(2,chunks.size());
  assertEquals(chunk,chunks.get(0));
  assertEquals(compressedChunk,chunks.get(1));
  assertTrue(objectMapper.readValue(objectMapper.writeValueAsString(chunk),ArrayChunk.class) instanceof DoubleArrayChunk);
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  assertEquals(ImmutableList.of(new DoublePoint(1,Instant.parse(""String_Node_Str"").toEpochMilli(),1d),new DoublePoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),2d),new DoublePoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),3d)),compressedChunk.stream(index).collect(Collectors.toList()));
}","@Test public void compressTest() throws IOException {
  UncompressedDoubleArrayChunk chunk=new UncompressedDoubleArrayChunk(1,new double[]{1d,2d,2d,2d,2d,3d});
  DoubleArrayChunk maybeCompressedChunk=chunk.tryToCompress();
  assertTrue(maybeCompressedChunk instanceof CompressedDoubleArrayChunk);
  CompressedDoubleArrayChunk compressedChunk=(CompressedDoubleArrayChunk)maybeCompressedChunk;
  assertEquals(1,compressedChunk.getOffset());
  assertEquals(6,compressedChunk.getLength());
  assertTrue(compressedChunk.isCompressed());
  assertEquals(36,compressedChunk.getEstimatedSize());
  assertEquals(36d / 48,compressedChunk.getCompressionFactor(),0d);
  assertArrayEquals(new double[]{1d,2d,3d},compressedChunk.getStepValues(),0d);
  assertArrayEquals(new int[]{1,4,1},compressedChunk.getStepLengths());
  DoubleBuffer buffer=DoubleBuffer.allocate(7);
  for (int i=0; i < 7; i++) {
    buffer.put(i,Double.NaN);
  }
  compressedChunk.fillBuffer(buffer,0);
  assertArrayEquals(new double[]{Double.NaN,1d,2d,2d,2d,2d,3d},buffer.array(),0d);
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(jsonRef,JsonUtil.toJson(compressedChunk::writeJson));
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new TimeSeriesJsonModule());
  List<DoubleArrayChunk> chunks=objectMapper.readValue(objectMapper.writeValueAsString(Arrays.asList(chunk,compressedChunk)),TypeFactory.defaultInstance().constructCollectionType(List.class,DoubleArrayChunk.class));
  assertEquals(2,chunks.size());
  assertEquals(chunk,chunks.get(0));
  assertEquals(compressedChunk,chunks.get(1));
  assertTrue(objectMapper.readValue(objectMapper.writeValueAsString(chunk),ArrayChunk.class) instanceof DoubleArrayChunk);
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  assertEquals(ImmutableList.of(new DoublePoint(1,Instant.parse(""String_Node_Str"").toEpochMilli(),1d),new DoublePoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),2d),new DoublePoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),3d)),compressedChunk.stream(index).collect(Collectors.toList()));
}"
38860,"@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.DOUBLE,Collections.emptyMap(),index);
  UncompressedDoubleArrayChunk chunk=new UncompressedDoubleArrayChunk(2,new double[]{1d,2d});
  CompressedDoubleArrayChunk chunk2=new CompressedDoubleArrayChunk(5,3,new double[]{3d,4d},new int[]{1,2});
  assertEquals(TimeSeriesDataType.DOUBLE,chunk.getDataType());
  StoredDoubleTimeSeries timeSeries=new StoredDoubleTimeSeries(metadata,chunk,chunk2);
  assertSame(metadata,timeSeries.getMetadata());
  assertEquals(Arrays.asList(chunk,chunk2),timeSeries.getChunks());
  assertArrayEquals(new double[]{Double.NaN,Double.NaN,1d,2d,Double.NaN,3d,4d,4d},timeSeries.toArray(),0d);
  DoublePoint[] pointsRef={new DoublePoint(0,Instant.parse(""String_Node_Str"").toEpochMilli(),Double.NaN),new DoublePoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),1d),new DoublePoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),2d),new DoublePoint(4,Instant.parse(""String_Node_Str"").toEpochMilli(),Double.NaN),new DoublePoint(5,Instant.parse(""String_Node_Str"").toEpochMilli(),3d),new DoublePoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),4d)};
  assertArrayEquals(pointsRef,timeSeries.stream().toArray());
  assertArrayEquals(pointsRef,Iterators.toArray(timeSeries.iterator(),DoublePoint.class));
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(timeSeries::writeJson);
  assertEquals(jsonRef,json);
  List<TimeSeries> timeSeriesList=TimeSeries.parseJson(json);
  assertEquals(1,timeSeriesList.size());
  String json2=JsonUtil.toJson(timeSeriesList.get(0)::writeJson);
  assertEquals(json,json2);
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(timeSeries,objectMapper.readValue(objectMapper.writeValueAsString(timeSeries),DoubleTimeSeries.class));
}","@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.DOUBLE,Collections.emptyMap(),index);
  UncompressedDoubleArrayChunk chunk=new UncompressedDoubleArrayChunk(2,new double[]{1d,2d});
  CompressedDoubleArrayChunk chunk2=new CompressedDoubleArrayChunk(5,3,new double[]{3d,4d},new int[]{1,2});
  assertEquals(TimeSeriesDataType.DOUBLE,chunk.getDataType());
  StoredDoubleTimeSeries timeSeries=new StoredDoubleTimeSeries(metadata,chunk,chunk2);
  assertSame(metadata,timeSeries.getMetadata());
  assertEquals(Arrays.asList(chunk,chunk2),timeSeries.getChunks());
  assertArrayEquals(new double[]{Double.NaN,Double.NaN,1d,2d,Double.NaN,3d,4d,4d},timeSeries.toArray(),0d);
  DoublePoint[] pointsRef={new DoublePoint(0,Instant.parse(""String_Node_Str"").toEpochMilli(),Double.NaN),new DoublePoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),1d),new DoublePoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),2d),new DoublePoint(4,Instant.parse(""String_Node_Str"").toEpochMilli(),Double.NaN),new DoublePoint(5,Instant.parse(""String_Node_Str"").toEpochMilli(),3d),new DoublePoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),4d)};
  assertArrayEquals(pointsRef,timeSeries.stream().toArray());
  assertArrayEquals(pointsRef,Iterators.toArray(timeSeries.iterator(),DoublePoint.class));
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(timeSeries::writeJson);
  assertEquals(jsonRef,json);
  List<TimeSeries> timeSeriesList=TimeSeries.parseJson(json);
  assertEquals(1,timeSeriesList.size());
  String json2=JsonUtil.toJson(timeSeriesList.get(0)::writeJson);
  assertEquals(json,json2);
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(timeSeries,objectMapper.readValue(objectMapper.writeValueAsString(timeSeries),DoubleTimeSeries.class));
}"
38861,"@Test public void baseTest() throws IOException {
  UncompressedStringArrayChunk chunk=new UncompressedStringArrayChunk(1,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertEquals(1,chunk.getOffset());
  assertEquals(3,chunk.getLength());
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},chunk.getValues());
  assertEquals(6,chunk.getEstimatedSize());
  assertFalse(chunk.isCompressed());
  assertEquals(1d,chunk.getCompressionFactor(),0d);
  CompactStringBuffer buffer=new CompactStringBuffer(4);
  chunk.fillBuffer(buffer,0);
  assertArrayEquals(new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},buffer.toArray());
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(jsonRef,JsonUtil.toJson(chunk::writeJson));
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new TimeSeriesJsonModule());
  List<StringArrayChunk> chunks=objectMapper.readValue(objectMapper.writeValueAsString(Arrays.asList(chunk)),TypeFactory.defaultInstance().constructCollectionType(List.class,StringArrayChunk.class));
  assertEquals(1,chunks.size());
  assertEquals(chunk,chunks.get(0));
  assertTrue(objectMapper.readValue(objectMapper.writeValueAsString(chunk),ArrayChunk.class) instanceof StringArrayChunk);
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  assertEquals(ImmutableList.of(new StringPoint(1,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str"")),chunk.stream(index).collect(Collectors.toList()));
}","@Test public void baseTest() throws IOException {
  UncompressedStringArrayChunk chunk=new UncompressedStringArrayChunk(1,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  assertEquals(1,chunk.getOffset());
  assertEquals(3,chunk.getLength());
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},chunk.getValues());
  assertEquals(6,chunk.getEstimatedSize());
  assertFalse(chunk.isCompressed());
  assertEquals(1d,chunk.getCompressionFactor(),0d);
  CompactStringBuffer buffer=new CompactStringBuffer(4);
  chunk.fillBuffer(buffer,0);
  assertArrayEquals(new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},buffer.toArray());
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(jsonRef,JsonUtil.toJson(chunk::writeJson));
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new TimeSeriesJsonModule());
  List<StringArrayChunk> chunks=objectMapper.readValue(objectMapper.writeValueAsString(Arrays.asList(chunk)),TypeFactory.defaultInstance().constructCollectionType(List.class,StringArrayChunk.class));
  assertEquals(1,chunks.size());
  assertEquals(chunk,chunks.get(0));
  assertTrue(objectMapper.readValue(objectMapper.writeValueAsString(chunk),ArrayChunk.class) instanceof StringArrayChunk);
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  assertEquals(ImmutableList.of(new StringPoint(1,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str"")),chunk.stream(index).collect(Collectors.toList()));
}"
38862,"@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.STRING,Collections.emptyMap(),index);
  UncompressedStringArrayChunk chunk=new UncompressedStringArrayChunk(2,new String[]{""String_Node_Str"",""String_Node_Str""});
  CompressedStringArrayChunk chunk2=new CompressedStringArrayChunk(5,3,new String[]{""String_Node_Str"",""String_Node_Str""},new int[]{1,2});
  assertEquals(TimeSeriesDataType.STRING,chunk.getDataType());
  StringTimeSeries timeSeries=new StringTimeSeries(metadata,chunk,chunk2);
  assertSame(metadata,timeSeries.getMetadata());
  assertEquals(Arrays.asList(chunk,chunk2),timeSeries.getChunks());
  assertArrayEquals(new String[]{null,null,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},timeSeries.toArray());
  StringPoint[] pointsRef={new StringPoint(0,Instant.parse(""String_Node_Str"").toEpochMilli(),null),new StringPoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(4,Instant.parse(""String_Node_Str"").toEpochMilli(),null),new StringPoint(5,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str"")};
  assertArrayEquals(pointsRef,timeSeries.stream().toArray());
  assertArrayEquals(pointsRef,Iterators.toArray(timeSeries.iterator(),StringPoint.class));
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(timeSeries::writeJson);
  assertEquals(jsonRef,json);
  List<TimeSeries> timeSeriesList=TimeSeries.parseJson(json);
  assertEquals(1,timeSeriesList.size());
  String json2=JsonUtil.toJson(timeSeriesList.get(0)::writeJson);
  assertEquals(json,json2);
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(timeSeries,objectMapper.readValue(objectMapper.writeValueAsString(timeSeries),StringTimeSeries.class));
}","@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.STRING,Collections.emptyMap(),index);
  UncompressedStringArrayChunk chunk=new UncompressedStringArrayChunk(2,new String[]{""String_Node_Str"",""String_Node_Str""});
  CompressedStringArrayChunk chunk2=new CompressedStringArrayChunk(5,3,new String[]{""String_Node_Str"",""String_Node_Str""},new int[]{1,2});
  assertEquals(TimeSeriesDataType.STRING,chunk.getDataType());
  StringTimeSeries timeSeries=new StringTimeSeries(metadata,chunk,chunk2);
  assertSame(metadata,timeSeries.getMetadata());
  assertEquals(Arrays.asList(chunk,chunk2),timeSeries.getChunks());
  assertArrayEquals(new String[]{null,null,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},timeSeries.toArray());
  StringPoint[] pointsRef={new StringPoint(0,Instant.parse(""String_Node_Str"").toEpochMilli(),null),new StringPoint(2,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(3,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(4,Instant.parse(""String_Node_Str"").toEpochMilli(),null),new StringPoint(5,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str""),new StringPoint(6,Instant.parse(""String_Node_Str"").toEpochMilli(),""String_Node_Str"")};
  assertArrayEquals(pointsRef,timeSeries.stream().toArray());
  assertArrayEquals(pointsRef,Iterators.toArray(timeSeries.iterator(),StringPoint.class));
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(timeSeries::writeJson);
  assertEquals(jsonRef,json);
  List<TimeSeries> timeSeriesList=TimeSeries.parseJson(json);
  assertEquals(1,timeSeriesList.size());
  String json2=JsonUtil.toJson(timeSeriesList.get(0)::writeJson);
  assertEquals(json,json2);
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(timeSeries,objectMapper.readValue(objectMapper.writeValueAsString(timeSeries),StringTimeSeries.class));
}"
38863,"@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  ImmutableMap<String,String> tags=ImmutableMap.of(""String_Node_Str"",""String_Node_Str"");
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.DOUBLE,tags,index);
  assertEquals(""String_Node_Str"",metadata.getName());
  assertEquals(TimeSeriesDataType.DOUBLE,metadata.getDataType());
  assertEquals(tags,metadata.getTags());
  assertSame(index,metadata.getIndex());
  assertEquals(""String_Node_Str"",metadata.toString());
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(metadata::writeJson);
  assertEquals(jsonRef,json);
  TimeSeriesMetadata metadata2=JsonUtil.parseJson(json,TimeSeriesMetadata::parseJson);
  assertNotNull(metadata2);
  assertEquals(metadata,metadata2);
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(metadata,objectMapper.readValue(objectMapper.writeValueAsString(metadata),TimeSeriesMetadata.class));
  List<TimeSeriesMetadata> metadataList=objectMapper.readValue(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(Arrays.asList(metadata,metadata)),TypeFactory.defaultInstance().constructCollectionType(List.class,TimeSeriesMetadata.class));
  assertEquals(2,metadataList.size());
  assertEquals(metadata,metadataList.get(0));
  assertEquals(metadata,metadataList.get(1));
}","@Test public void test() throws IOException {
  RegularTimeSeriesIndex index=RegularTimeSeriesIndex.create(Interval.parse(""String_Node_Str""),Duration.ofMinutes(15));
  ImmutableMap<String,String> tags=ImmutableMap.of(""String_Node_Str"",""String_Node_Str"");
  TimeSeriesMetadata metadata=new TimeSeriesMetadata(""String_Node_Str"",TimeSeriesDataType.DOUBLE,tags,index);
  assertEquals(""String_Node_Str"",metadata.getName());
  assertEquals(TimeSeriesDataType.DOUBLE,metadata.getDataType());
  assertEquals(tags,metadata.getTags());
  assertSame(index,metadata.getIndex());
  assertEquals(""String_Node_Str"",metadata.toString());
  String jsonRef=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String json=JsonUtil.toJson(metadata::writeJson);
  assertEquals(jsonRef,json);
  TimeSeriesMetadata metadata2=JsonUtil.parseJson(json,TimeSeriesMetadata::parseJson);
  assertNotNull(metadata2);
  assertEquals(metadata,metadata2);
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new TimeSeriesJsonModule());
  assertEquals(metadata,objectMapper.readValue(objectMapper.writeValueAsString(metadata),TimeSeriesMetadata.class));
  List<TimeSeriesMetadata> metadataList=objectMapper.readValue(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(Arrays.asList(metadata,metadata)),TypeFactory.defaultInstance().constructCollectionType(List.class,TimeSeriesMetadata.class));
  assertEquals(2,metadataList.size());
  assertEquals(metadata,metadataList.get(0));
  assertEquals(metadata,metadataList.get(1));
}"
38864,"public static SecurityAnalysisResult read(Path jsonFile){
  Objects.requireNonNull(jsonFile);
  try (InputStream is=Files.newInputStream(jsonFile)){
    ObjectMapper objectMapper=new ObjectMapper().enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING).registerModule(new SecurityAnalysisJsonModule());
    return objectMapper.readValue(is,SecurityAnalysisResult.class);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","public static SecurityAnalysisResult read(Path jsonFile){
  Objects.requireNonNull(jsonFile);
  try (InputStream is=Files.newInputStream(jsonFile)){
    ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new SecurityAnalysisJsonModule());
    return objectMapper.readValue(is,SecurityAnalysisResult.class);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38865,"public static void write(SecurityAnalysisResult result,Writer writer) throws IOException {
  Objects.requireNonNull(result);
  Objects.requireNonNull(writer);
  ObjectMapper objectMapper=new ObjectMapper().registerModule(new SecurityAnalysisJsonModule());
  ObjectWriter objectWriter=objectMapper.writerWithDefaultPrettyPrinter();
  objectWriter.writeValue(writer,result);
}","public static void write(SecurityAnalysisResult result,Writer writer) throws IOException {
  Objects.requireNonNull(result);
  Objects.requireNonNull(writer);
  ObjectMapper objectMapper=JsonUtil.createObjectMapper().registerModule(new SecurityAnalysisJsonModule());
  ObjectWriter objectWriter=objectMapper.writerWithDefaultPrettyPrinter();
  objectWriter.writeValue(writer,result);
}"
38866,"@Override public MpiStatistics create(Path dbDir,String dbName){
  try {
    return new CsvMpiStatistics(dbDir,dbName);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}","@Override public MpiStatistics create(Path dbDir,String dbName){
  if (dbDir == null || dbName == null) {
    return new NoMpiStatistics();
  }
  try {
    return new CsvMpiStatistics(dbDir,dbName);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38867,"public MpiComputationManager(Path localDir,MpiJobScheduler scheduler,MpiStatistics statistics,MpiExecutorContext executorContext){
  this.localDir=Objects.requireNonNull(localDir);
  this.statistics=Objects.requireNonNull(statistics);
  this.executorContext=Objects.requireNonNull(executorContext);
  this.scheduler=scheduler;
  if (executorContext.getMonitorExecutor() != null) {
    busyCoresPrintTask=executorContext.getMonitorExecutor().scheduleAtFixedRate(() -> LOGGER.info(""String_Node_Str"",scheduler.getResources().getBusyCores(),scheduler.getResources().getAvailableCores(),((float)scheduler.getStartedTasksAndReset()) / LOG_DELAY),0,LOG_DELAY,TimeUnit.SECONDS);
  }
}","public MpiComputationManager(Path localDir,MpiJobScheduler scheduler,MpiExecutorContext executorContext){
  this.localDir=Objects.requireNonNull(localDir);
  this.executorContext=Objects.requireNonNull(executorContext);
  this.scheduler=scheduler;
  if (executorContext.getMonitorExecutor() != null) {
    busyCoresPrintTask=executorContext.getMonitorExecutor().scheduleAtFixedRate(() -> LOGGER.info(""String_Node_Str"",scheduler.getResources().getBusyCores(),scheduler.getResources().getAvailableCores(),((float)scheduler.getStartedTasksAndReset()) / LOG_DELAY),0,LOG_DELAY,TimeUnit.SECONDS);
  }
}"
38868,"@Override public void close(){
  try {
    scheduler.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  try {
    statistics.close();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  if (busyCoresPrintTask != null) {
    busyCoresPrintTask.cancel(true);
  }
  try {
    executorContext.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
}","@Override public void close(){
  try {
    scheduler.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  if (busyCoresPrintTask != null) {
    busyCoresPrintTask.cancel(true);
  }
  try {
    executorContext.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
}"
38869,"MpiJobSchedulerImpl(MpiNativeServices nativeServices,MpiStatistics statistics,final int coresPerRank,boolean verbose,ExecutorService executor,Path stdOutArchive) throws InterruptedException, IOException {
  this.nativeServices=Objects.requireNonNull(nativeServices);
  this.statistics=Objects.requireNonNull(statistics);
  if (stdOutArchive != null) {
    if (Files.exists(stdOutArchive)) {
      if (!Files.isRegularFile(stdOutArchive)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Files.deleteIfExists(stdOutArchive);
    }
    LOGGER.info(""String_Node_Str"",stdOutArchive);
  }
  this.stdOutArchive=stdOutArchive;
  final CountDownLatch initialized=new CountDownLatch(1);
  future=executor.submit(new Runnable(){
    @Override public void run(){
      LOGGER.trace(""String_Node_Str"");
      try {
        nativeServices.initMpi(coresPerRank,verbose);
        mpiVersion=nativeServices.getMpiVersion();
        resources=new MpiResources(nativeServices.getMpiCommSize(),coresPerRank);
        initialized.countDown();
        long time=System.currentTimeMillis();
        List<MpiTask> completedTasks=new ArrayList<>();
        while (!stopRequested || !jobs.isEmpty()) {
          boolean sleep=true;
          long oldTime=time;
          time=System.currentTimeMillis();
          long diff=time - oldTime;
          if (diff > 1000) {
            LOGGER.warn(""String_Node_Str"",diff,startTasksTime,startTasksJniTime,processCompletedTasksTime,checkTaskCompletionTime);
          }
          startTasksTime=0;
          startTasksJniTime=0;
          processCompletedTasksTime=0;
          checkTaskCompletionTime=0;
          newCommonFileLock.lock();
          try {
            for (            CommonFile commonFile : newCommonFiles) {
              LOGGER.info(""String_Node_Str"",commonFile.getChunk(),commonFile.getName(),commonFile.isLast());
              List<Core> allCores=resources.reserveAllCoresOrFail();
              try {
                try (ByteArrayInputStream is=new ByteArrayInputStream(commonFile.getData())){
                  Messages.CommonFile message=Messages.CommonFile.newBuilder().setName(commonFile.getName()).setChunk(commonFile.getChunk()).setLast(commonFile.isLast()).setData(ByteString.readFrom(is)).build();
                  long t1=System.currentTimeMillis();
                  nativeServices.sendCommonFile(message.toByteArray());
                  long t2=System.currentTimeMillis();
                  commonFiles.add(commonFile.getName());
                  MpiJobSchedulerImpl.this.statistics.logCommonFileTransfer(commonFile.getName(),commonFile.getChunk(),commonFile.getData().length,t2 - t1);
                }
               }
  finally {
                resources.releaseCores(allCores);
              }
            }
            newCommonFiles.clear();
          }
  finally {
            newCommonFileLock.unlock();
          }
          newJobsLock.lock();
          try {
            jobs.addAll(newJobs);
            newJobs.clear();
          }
  finally {
            newJobsLock.unlock();
          }
          for (Iterator<MpiJob> it=jobs.iterator(); it.hasNext(); ) {
            MpiJob job=it.next();
            sleep=startTasks(job);
            long t0=System.currentTimeMillis();
            try {
              nativeServices.checkTasksCompletion(job.getRunningTasks(),completedTasks);
            }
  finally {
              checkTaskCompletionTime+=System.currentTimeMillis() - t0;
            }
            if (!completedTasks.isEmpty()) {
              DateTime endTime=DateTime.now();
              for (              MpiTask tasks : completedTasks) {
                MpiJobSchedulerImpl.this.resources.releaseCore(tasks.getCore());
                tasks.setEndTime(endTime);
              }
              startTasks(job);
              processCompletedTasks(job,completedTasks);
              if (job.isCompleted()) {
                it.remove();
                ExecutionReport report=new ExecutionReport(job.getErrors());
                try {
                  job.getListener().onEnd(report);
                }
 catch (                Exception e) {
                  LOGGER.error(e.toString(),e);
                }
                job.getFuture().complete(report);
                MpiJobSchedulerImpl.this.statistics.logJobEnd(job.getId());
              }
              sleep=false;
            }
          }
          if (sleep) {
            TimeUnit.MILLISECONDS.sleep(TIMEOUT);
          }
        }
        nativeServices.terminateMpi();
      }
 catch (      Throwable t) {
        LOGGER.error(t.toString(),t);
        System.exit(-1);
      }
      LOGGER.trace(""String_Node_Str"");
    }
  }
);
  initialized.await();
}","MpiJobSchedulerImpl(MpiNativeServices nativeServices,MpiStatisticsFactory statisticsFactory,Path statisticsDbDir,String statisticsDbName,int coresPerRank,boolean verbose,ExecutorService executor,Path stdOutArchive) throws InterruptedException, IOException {
  this.nativeServices=Objects.requireNonNull(nativeServices);
  this.statistics=Objects.requireNonNull(statisticsFactory).create(statisticsDbDir,statisticsDbName);
  if (stdOutArchive != null) {
    if (Files.exists(stdOutArchive)) {
      if (!Files.isRegularFile(stdOutArchive)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Files.deleteIfExists(stdOutArchive);
    }
    LOGGER.info(""String_Node_Str"",stdOutArchive);
  }
  this.stdOutArchive=stdOutArchive;
  final CountDownLatch initialized=new CountDownLatch(1);
  future=executor.submit(new Runnable(){
    @Override public void run(){
      LOGGER.trace(""String_Node_Str"");
      try {
        nativeServices.initMpi(coresPerRank,verbose);
        mpiVersion=nativeServices.getMpiVersion();
        resources=new MpiResources(nativeServices.getMpiCommSize(),coresPerRank);
        initialized.countDown();
        long time=System.currentTimeMillis();
        List<MpiTask> completedTasks=new ArrayList<>();
        while (!stopRequested || !jobs.isEmpty()) {
          boolean sleep=true;
          long oldTime=time;
          time=System.currentTimeMillis();
          long diff=time - oldTime;
          if (diff > 1000) {
            LOGGER.warn(""String_Node_Str"",diff,startTasksTime,startTasksJniTime,processCompletedTasksTime,checkTaskCompletionTime);
          }
          startTasksTime=0;
          startTasksJniTime=0;
          processCompletedTasksTime=0;
          checkTaskCompletionTime=0;
          newCommonFileLock.lock();
          try {
            for (            CommonFile commonFile : newCommonFiles) {
              LOGGER.info(""String_Node_Str"",commonFile.getChunk(),commonFile.getName(),commonFile.isLast());
              List<Core> allCores=resources.reserveAllCoresOrFail();
              try {
                try (ByteArrayInputStream is=new ByteArrayInputStream(commonFile.getData())){
                  Messages.CommonFile message=Messages.CommonFile.newBuilder().setName(commonFile.getName()).setChunk(commonFile.getChunk()).setLast(commonFile.isLast()).setData(ByteString.readFrom(is)).build();
                  long t1=System.currentTimeMillis();
                  nativeServices.sendCommonFile(message.toByteArray());
                  long t2=System.currentTimeMillis();
                  commonFiles.add(commonFile.getName());
                  MpiJobSchedulerImpl.this.statistics.logCommonFileTransfer(commonFile.getName(),commonFile.getChunk(),commonFile.getData().length,t2 - t1);
                }
               }
  finally {
                resources.releaseCores(allCores);
              }
            }
            newCommonFiles.clear();
          }
  finally {
            newCommonFileLock.unlock();
          }
          newJobsLock.lock();
          try {
            jobs.addAll(newJobs);
            newJobs.clear();
          }
  finally {
            newJobsLock.unlock();
          }
          for (Iterator<MpiJob> it=jobs.iterator(); it.hasNext(); ) {
            MpiJob job=it.next();
            sleep=startTasks(job);
            long t0=System.currentTimeMillis();
            try {
              nativeServices.checkTasksCompletion(job.getRunningTasks(),completedTasks);
            }
  finally {
              checkTaskCompletionTime+=System.currentTimeMillis() - t0;
            }
            if (!completedTasks.isEmpty()) {
              DateTime endTime=DateTime.now();
              for (              MpiTask tasks : completedTasks) {
                MpiJobSchedulerImpl.this.resources.releaseCore(tasks.getCore());
                tasks.setEndTime(endTime);
              }
              startTasks(job);
              processCompletedTasks(job,completedTasks);
              if (job.isCompleted()) {
                it.remove();
                ExecutionReport report=new ExecutionReport(job.getErrors());
                try {
                  job.getListener().onEnd(report);
                }
 catch (                Exception e) {
                  LOGGER.error(e.toString(),e);
                }
                job.getFuture().complete(report);
                MpiJobSchedulerImpl.this.statistics.logJobEnd(job.getId());
              }
              sleep=false;
            }
          }
          if (sleep) {
            TimeUnit.MILLISECONDS.sleep(TIMEOUT);
          }
        }
        nativeServices.terminateMpi();
      }
 catch (      Throwable t) {
        LOGGER.error(t.toString(),t);
        System.exit(-1);
      }
      LOGGER.trace(""String_Node_Str"");
    }
  }
);
  initialized.await();
}"
38870,"@Override public void shutdown() throws Exception {
  stopRequested=true;
  future.get();
}","@Override public void shutdown() throws Exception {
  try {
    statistics.close();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  stopRequested=true;
  future.get();
}"
38871,"public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(TMP_DIR) ? line.getOptionValue(TMP_DIR) : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(STATISTICS_DB_DIR) ? fileSystem.getPath(line.getOptionValue(STATISTICS_DB_DIR)) : null;
  String statisticsDbName=line.hasOption(STATISTICS_DB_NAME) ? line.getOptionValue(STATISTICS_DB_NAME) : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(CORES));
  boolean verbose=line.hasOption(VERBOSE);
  Path stdOutArchive=line.hasOption(STDOUT_ARCHIVE) ? fileSystem.getPath(line.getOptionValue(STDOUT_ARCHIVE)) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiStatisticsFactory statisticsFactory=createMpiStatisticsFactory(config,statisticsDbDir,statisticsDbName);
  try {
    return new MpiComputationManager(tmpDir,statisticsFactory.create(statisticsDbDir,statisticsDbName),new MpiExecutorContext(),coresPerRank,verbose,stdOutArchive);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new UncheckedInterruptedException(e);
  }
}","public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(TMP_DIR) ? line.getOptionValue(TMP_DIR) : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(STATISTICS_DB_DIR) ? fileSystem.getPath(line.getOptionValue(STATISTICS_DB_DIR)) : null;
  String statisticsDbName=line.hasOption(STATISTICS_DB_NAME) ? line.getOptionValue(STATISTICS_DB_NAME) : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(CORES));
  boolean verbose=line.hasOption(VERBOSE);
  Path stdOutArchive=line.hasOption(STDOUT_ARCHIVE) ? fileSystem.getPath(line.getOptionValue(STDOUT_ARCHIVE)) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiStatisticsFactory statisticsFactory=config.newFactoryImpl(MpiStatisticsFactory.class,NoMpiStatisticsFactory.class);
  try {
    return new MpiComputationManager(tmpDir,statisticsFactory,statisticsDbDir,statisticsDbName,new MpiExecutorContext(),coresPerRank,verbose,stdOutArchive);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new UncheckedInterruptedException(e);
  }
}"
38872,"static void parseFieldName(JsonParser parser,JsonParsingContext context) throws IOException {
  String fieldName=parser.getCurrentName();
switch (fieldName) {
case ""String_Node_Str"":
    break;
case ""String_Node_Str"":
  context.name=parser.nextTextValue();
break;
case ""String_Node_Str"":
context.dataType=TimeSeriesDataType.valueOf(parser.nextTextValue());
break;
case ""String_Node_Str"":
context.insideTags=true;
break;
case RegularTimeSeriesIndex.TYPE:
context.index=RegularTimeSeriesIndex.parseJson(parser);
break;
default :
if (context.insideTags) {
context.tags.put(fieldName,parser.nextTextValue());
}
 else {
throw new IllegalStateException(""String_Node_Str"" + fieldName);
}
}
}","static void parseFieldName(JsonParser parser,JsonParsingContext context) throws IOException {
  String fieldName=parser.getCurrentName();
  if (context.insideTags) {
    context.tags.put(fieldName,parser.nextTextValue());
  }
 else {
switch (fieldName) {
case ""String_Node_Str"":
      break;
case ""String_Node_Str"":
    context.name=parser.nextTextValue();
  break;
case ""String_Node_Str"":
context.dataType=TimeSeriesDataType.valueOf(parser.nextTextValue());
break;
case ""String_Node_Str"":
context.insideTags=true;
break;
case RegularTimeSeriesIndex.TYPE:
context.index=RegularTimeSeriesIndex.parseJson(parser);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + fieldName);
}
}
}"
38873,"TerminalExt build(){
  String connectionBus=getConnectionBus();
  if (node != null && connectionBus != null) {
    throw new ValidationException(validable,""String_Node_Str"");
  }
  return node != null ? new NodeTerminal(network,node) : new BusTerminal(network,connectionBus,bus != null);
}","TerminalExt build(){
  String connectionBus=getConnectionBus();
  if (node != null && connectionBus != null) {
    throw new ValidationException(validable,""String_Node_Str"");
  }
  if (node == null) {
    if (connectionBus == null) {
      throw new ValidationException(validable,""String_Node_Str"");
    }
    return new BusTerminal(network,connectionBus,bus != null);
  }
 else {
    return new NodeTerminal(network,node);
  }
}"
38874,"@Override public InputStream newInputStream(String fileName) throws IOException {
  Objects.requireNonNull(fileName);
  Path zipFilePath=getZipFilePath();
  if (Files.exists(zipFilePath)) {
    ZipFile zipFile=new ZipFile(zipFilePath);
    InputStream is=zipFile.getInputStream(fileName);
    if (is != null) {
      InputStream fis=new ForwardingInputStream<InputStream>(is){
        @Override public void close() throws IOException {
          zipFile.close();
        }
      }
;
      return observer != null ? new ObservableInputStream(fis,zipFilePath + ""String_Node_Str"" + fileName,observer) : fis;
    }
 else {
      zipFile.close();
    }
  }
  return null;
}","@Override public InputStream newInputStream(String fileName) throws IOException {
  Objects.requireNonNull(fileName);
  Path zipFilePath=getZipFilePath();
  if (entryExists(zipFilePath,fileName)) {
    InputStream is=new ZipEntryInputStream(new ZipFile(zipFilePath),fileName);
    return observer != null ? new ObservableInputStream(is,zipFilePath + ""String_Node_Str"" + fileName,observer) : is;
  }
  return null;
}"
38875,"@Override public boolean exists(String fileName) throws IOException {
  Objects.requireNonNull(fileName);
  Path zipFilePath=getZipFilePath();
  if (Files.exists(zipFilePath)) {
    try (ZipFile zipFile=new ZipFile(zipFilePath)){
      return zipFile.entry(fileName) != null;
    }
   }
  return false;
}","@Override public boolean exists(String fileName) throws IOException {
  Objects.requireNonNull(fileName);
  Path zipFilePath=getZipFilePath();
  return entryExists(zipFilePath,fileName);
}"
38876,"public CacheEntry build(){
  Path baseDir=cacheDir.resolve(name);
  if (keys.size() > 0) {
    HashFunction hf=Hashing.md5();
    Hasher h=hf.newHasher();
    for (    String key : keys) {
      h.putString(key,Charsets.UTF_8);
    }
    HashCode hc=h.hash();
    baseDir=baseDir.resolve(hc.toString());
  }
  cacheEntriesLock.lock();
  try {
    CacheEntry cacheEntry=cacheEntries.get(baseDir.toString());
    if (cacheEntry != null) {
      if (!cacheEntry.getKeys().equals(keys)) {
        throw new PowsyblException(""String_Node_Str"");
      }
    }
 else {
      cacheEntry=new CacheEntry(baseDir,keys);
      cacheEntries.put(baseDir.toString(),cacheEntry);
    }
    return cacheEntry;
  }
  finally {
    cacheEntriesLock.unlock();
  }
}","public CacheEntry build(){
  Path baseDir=cacheDir.resolve(name);
  if (!keys.isEmpty()) {
    HashFunction hf=Hashing.md5();
    Hasher h=hf.newHasher();
    for (    String key : keys) {
      h.putString(key,Charsets.UTF_8);
    }
    HashCode hc=h.hash();
    baseDir=baseDir.resolve(hc.toString());
  }
  cacheEntriesLock.lock();
  try {
    CacheEntry cacheEntry=cacheEntries.get(baseDir.toString());
    if (cacheEntry != null) {
      if (!cacheEntry.getKeys().equals(keys)) {
        throw new PowsyblException(""String_Node_Str"");
      }
    }
 else {
      cacheEntry=new CacheEntry(baseDir,keys);
      cacheEntries.put(baseDir.toString(),cacheEntry);
    }
    return cacheEntry;
  }
  finally {
    cacheEntriesLock.unlock();
  }
}"
38877,"public void lock(){
  try {
    semaphore.acquire();
  }
 catch (  InterruptedException e) {
    throw new UncheckedInterruptedException(e);
  }
}","public void lock(){
  try {
    semaphore.acquire();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new UncheckedInterruptedException(e);
  }
}"
38878,"public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  String statisticsDbName=line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(""String_Node_Str""));
  boolean verbose=line.hasOption(""String_Node_Str"");
  Path stdOutArchive=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiStatisticsFactory statisticsFactory=createMpiStatisticsFactory(config,statisticsDbDir,statisticsDbName);
  try {
    return new MpiComputationManager(tmpDir,statisticsFactory.create(statisticsDbDir,statisticsDbName),new MpiExecutorContext(),coresPerRank,verbose,stdOutArchive);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    throw new UncheckedInterruptedException(e);
  }
}","public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  String statisticsDbName=line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(""String_Node_Str""));
  boolean verbose=line.hasOption(""String_Node_Str"");
  Path stdOutArchive=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiStatisticsFactory statisticsFactory=createMpiStatisticsFactory(config,statisticsDbDir,statisticsDbName);
  try {
    return new MpiComputationManager(tmpDir,statisticsFactory.create(statisticsDbDir,statisticsDbName),new MpiExecutorContext(),coresPerRank,verbose,stdOutArchive);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new UncheckedInterruptedException(e);
  }
}"
38879,"@Override public Expression transform(Expression exp){
  if (exp instanceof BinaryExpression) {
    BinaryExpression binExpr=(BinaryExpression)exp;
    String op=binExpr.getOperation().getText();
switch (op) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression()),new ConstantExpression(op)));
case ""String_Node_Str"":
    return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression())));
case ""String_Node_Str"":
  return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression())));
}
}
 else if (exp instanceof NotExpression) {
return new MethodCallExpression(transform(((NotExpression)exp).getExpression()),""String_Node_Str"",new ArgumentListExpression());
}
Expression newExpr=super.transform(exp);
if (newExpr != null) {
newExpr.visit(this);
}
return newExpr;
}","@Override public Expression transform(Expression exp){
  if (exp instanceof BinaryExpression) {
    BinaryExpression binExpr=(BinaryExpression)exp;
    String op=binExpr.getOperation().getText();
switch (op) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
      return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression()),new ConstantExpression(op)));
case ""String_Node_Str"":
    return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression())));
case ""String_Node_Str"":
  return new MethodCallExpression(transform(binExpr.getLeftExpression()),""String_Node_Str"",new ArgumentListExpression(transform(binExpr.getRightExpression())));
default :
break;
}
}
 else if (exp instanceof NotExpression) {
return new MethodCallExpression(transform(((NotExpression)exp).getExpression()),""String_Node_Str"",new ArgumentListExpression());
}
Expression newExpr=super.transform(exp);
if (newExpr != null) {
newExpr.visit(this);
}
return newExpr;
}"
38880,"private static int compare(BranchAndSide branchAndSide1,BranchAndSide branchAndSide2){
  Branch.Overload overload1=branchAndSide1.getBranch().checkTemporaryLimits(branchAndSide1.getSide());
  Branch.Overload overload2=branchAndSide2.getBranch().checkTemporaryLimits(branchAndSide2.getSide());
  float i1=branchAndSide1.getBranch().getTerminal(branchAndSide1.getSide()).getI();
  float i2=branchAndSide2.getBranch().getTerminal(branchAndSide2.getSide()).getI();
  float permanentLimit1=getPermanentLimit(branchAndSide1.getBranch(),branchAndSide1.getSide());
  float permanentLimit2=getPermanentLimit(branchAndSide2.getBranch(),branchAndSide2.getSide());
  int c;
  if (overload1 == null && overload2 == null) {
    c=compare(i1 / permanentLimit1,i2 / permanentLimit2);
  }
 else   if (overload1 == null && overload2 != null) {
    c=-1;
  }
 else   if (overload1 != null && overload2 == null) {
    c=1;
  }
 else {
    c=-Integer.compare(overload1.getTemporaryLimit().getAcceptableDuration(),overload2.getTemporaryLimit().getAcceptableDuration());
    if (c == 0) {
      c=compare(i1 / overload1.getTemporaryLimit().getValue(),i2 / overload2.getTemporaryLimit().getValue());
    }
  }
  return c;
}","private static int compare(BranchAndSide branchAndSide1,BranchAndSide branchAndSide2){
  Branch.Overload overload1=branchAndSide1.getBranch().checkTemporaryLimits(branchAndSide1.getSide());
  Branch.Overload overload2=branchAndSide2.getBranch().checkTemporaryLimits(branchAndSide2.getSide());
  float i1=branchAndSide1.getBranch().getTerminal(branchAndSide1.getSide()).getI();
  float i2=branchAndSide2.getBranch().getTerminal(branchAndSide2.getSide()).getI();
  float permanentLimit1=getPermanentLimit(branchAndSide1.getBranch(),branchAndSide1.getSide());
  float permanentLimit2=getPermanentLimit(branchAndSide2.getBranch(),branchAndSide2.getSide());
  int c;
  if (overload1 == null) {
    if (overload2 == null) {
      c=compare(i1 / permanentLimit1,i2 / permanentLimit2);
    }
 else {
      c=-1;
    }
  }
 else {
    if (overload2 == null) {
      c=1;
    }
 else {
      c=-Integer.compare(overload1.getTemporaryLimit().getAcceptableDuration(),overload2.getTemporaryLimit().getAcceptableDuration());
      if (c == 0) {
        c=compare(i1 / overload1.getTemporaryLimit().getValue(),i2 / overload2.getTemporaryLimit().getValue());
      }
    }
  }
  return c;
}"
38881,"private List<String> sortBranches(List<String> branchIds){
  List<String> sortedBranchIds=branchIds.stream().map(id -> context.getNetwork().getBranch(id)).map(branch -> {
    BranchAndSide branchAndSide1=new BranchAndSide(branch,Branch.Side.ONE);
    BranchAndSide branchAndSide2=new BranchAndSide(branch,Branch.Side.TWO);
    int c=branchAndSide1.compareTo(branchAndSide2);
    return c >= 0 ? branchAndSide1 : branchAndSide2;
  }
).sorted().map(branchAndSide -> branchAndSide.getBranch().getId()).collect(Collectors.toList());
  return sortedBranchIds;
}","private List<String> sortBranches(List<String> branchIds){
  return branchIds.stream().map(id -> context.getNetwork().getBranch(id)).map(branch -> {
    BranchAndSide branchAndSide1=new BranchAndSide(branch,Branch.Side.ONE);
    BranchAndSide branchAndSide2=new BranchAndSide(branch,Branch.Side.TWO);
    int c=branchAndSide1.compareTo(branchAndSide2);
    return c >= 0 ? branchAndSide1 : branchAndSide2;
  }
).sorted().map(branchAndSide -> branchAndSide.getBranch().getId()).collect(Collectors.toList());
}"
38882,"@Override public Object visitLoadingRank(LoadingRankNode node,Void arg){
  List<String> branchIds=new ArrayList<>();
  node.getBranchIds().forEach(e -> branchIds.add((String)e.accept(this,arg)));
  String branchIdToRank=(String)node.getBranchIdToRankNode().accept(this,arg);
  if (!branchIds.contains(branchIdToRank)) {
    throw new PowsyblException(""String_Node_Str"");
  }
  List<String> sortedBranchIds=sortBranches(branchIds);
  int i=sortedBranchIds.indexOf(branchIdToRank);
  if (i == -1) {
    throw new AssertionError();
  }
  int rank=sortedBranchIds.size() - i;
  return rank;
}","@Override public Object visitLoadingRank(LoadingRankNode node,Void arg){
  List<String> branchIds=new ArrayList<>();
  node.getBranchIds().forEach(e -> branchIds.add((String)e.accept(this,arg)));
  String branchIdToRank=(String)node.getBranchIdToRankNode().accept(this,arg);
  if (!branchIds.contains(branchIdToRank)) {
    throw new PowsyblException(""String_Node_Str"");
  }
  List<String> sortedBranchIds=sortBranches(branchIds);
  int i=sortedBranchIds.indexOf(branchIdToRank);
  if (i == -1) {
    throw new AssertionError();
  }
  return sortedBranchIds.size() - i;
}"
38883,public abstract FOLDER getParent();,public abstract F getParent();
38884,"FOLDER getFolder(String name,String... more);","F getFolder(String name,String... more);"
38885,List<NODE> getChildren();,List<N> getChildren();
38886,"<T extends NODE>T getChild(Class<T> clazz,String name,String... more);","<T extends N>T getChild(Class<T> clazz,String name,String... more);"
38887,FOLDER createFolder(String name);,F createFolder(String name);
38888,"public static <FOLDER extends NODE,NODE extends AbstractNodeBase<FOLDER>>NodePath find(NODE node,Function<List<String>,String> toStringFct){
  Objects.requireNonNull(node);
  List<String> path=new ArrayList<>(1);
  addPath(node,path);
  return new NodePath(path,toStringFct);
}","public static <F extends N,N extends AbstractNodeBase<F>>NodePath find(N node,Function<List<String>,String> toStringFct){
  Objects.requireNonNull(node);
  List<String> path=new ArrayList<>(1);
  addPath(node,path);
  return new NodePath(path,toStringFct);
}"
38889,"private static <FOLDER extends NODE,NODE extends AbstractNodeBase<FOLDER>>void addPath(NODE node,List<String> path){
  if (node.getParent() != null) {
    addPath(node.getParent(),path);
  }
  path.add(node.getName());
}","private static <F extends N,N extends AbstractNodeBase<F>>void addPath(N node,List<String> path){
  if (node.getParent() != null) {
    addPath(node.getParent(),path);
  }
  path.add(node.getName());
}"
38890,"@Override public List<NodeId> getChildNodes(NodeId nodeId){
  Objects.requireNonNull(nodeId);
  Path path=((PathNodeId)nodeId).getPath();
  List<NodeId> childNodesIds=new ArrayList<>();
  LocalFolder folder=scanFolder(path,false);
  if (folder != null) {
    childNodesIds.addAll(folder.getChildPaths().stream().filter(childPath -> isLocalNode(childPath)).map(childPath -> new PathNodeId(childPath)).collect(Collectors.toList()));
  }
 else {
    throw new AssertionError();
  }
  return childNodesIds;
}","@Override public List<NodeId> getChildNodes(NodeId nodeId){
  Objects.requireNonNull(nodeId);
  Path path=((PathNodeId)nodeId).getPath();
  List<NodeId> childNodesIds=new ArrayList<>();
  LocalFolder folder=scanFolder(path,false);
  if (folder != null) {
    childNodesIds.addAll(folder.getChildPaths().stream().filter(this::isLocalNode).map(PathNodeId::new).collect(Collectors.toList()));
  }
 else {
    throw new AssertionError();
  }
  return childNodesIds;
}"
38891,"@Override public void close() throws IOException {
  os.closeEntry();
  if (Files.exists(zipFilePath)) {
    try (ZipFile zipFile=new ZipFile(zipFilePath)){
      Enumeration<? extends ZipEntry> e=zipFile.entries();
      while (e.hasMoreElements()) {
        ZipEntry zipEntry=e.nextElement();
        if (!zipEntry.getName().equals(fileName)) {
          zos.putNextEntry(zipEntry);
          try (InputStream zis=zipFile.getInputStream(zipEntry.getName())){
            ByteStreams.copy(zis,zos);
          }
           zos.closeEntry();
        }
      }
    }
   }
  zos.close();
  Files.copy(tmpZipFilePath,zipFilePath,StandardCopyOption.REPLACE_EXISTING);
  Files.delete(tmpZipFilePath);
}","@Override public void close() throws IOException {
  os.closeEntry();
  if (Files.exists(zipFilePath)) {
    try (ZipFile zipFile=new ZipFile(zipFilePath)){
      Enumeration<? extends ZipEntry> e=zipFile.entries();
      while (e.hasMoreElements()) {
        ZipEntry zipEntry=e.nextElement();
        if (!zipEntry.getName().equals(fileName)) {
          os.putNextEntry(zipEntry);
          try (InputStream zis=zipFile.getInputStream(zipEntry.getName())){
            ByteStreams.copy(zis,os);
          }
           os.closeEntry();
        }
      }
    }
   }
  super.close();
  Path tmpZipFilePath=getTmpZipFilePath(zipFilePath);
  Files.copy(tmpZipFilePath,zipFilePath,StandardCopyOption.REPLACE_EXISTING);
  Files.delete(tmpZipFilePath);
}"
38892,"public synchronized int getInt(SUBSET subset,String id){
  if (subset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer num=id2num.get(subset).get(id);
  if (num == null) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  return num;
}","public synchronized int getInt(S subset,String id){
  if (subset == null) {
    throw createSubsetIsNullException();
  }
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer num=id2num.get(subset).get(id);
  if (num == null) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  return num;
}"
38893,"public synchronized int newInt(SUBSET subset,String id){
  if (subset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer num=id2num.get(subset).get(id);
  if (num == null) {
    num=counter.get(subset);
    counter.put(subset,num + 1);
    id2num.get(subset).put(id,num);
    modified=true;
  }
  return num;
}","public synchronized int newInt(S subset,String id){
  if (subset == null) {
    throw createSubsetIsNullException();
  }
  if (id == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer num=id2num.get(subset).get(id);
  if (num == null) {
    num=counter.get(subset);
    counter.put(subset,num + 1);
    id2num.get(subset).put(id,num);
    modified=true;
  }
  return num;
}"
38894,"public synchronized boolean isMapped(SUBSET subset,String id){
  Map<String,Integer> numbers=id2num.get(subset);
  return numbers.containsKey(id);
}","public synchronized boolean isMapped(S subset,String id){
  Map<String,Integer> numbers=id2num.get(subset);
  return numbers.containsKey(id);
}"
38895,"public synchronized void reset(SUBSET subset){
  if (subset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  id2num.put(subset,HashBiMap.<String,Integer>create());
  counter.put(subset,subset.getInitialValue());
}","public synchronized void reset(S subset){
  if (subset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  id2num.put(subset,HashBiMap.<String,Integer>create());
  counter.put(subset,subset.getInitialValue());
}"
38896,"public synchronized String getId(SUBSET subset,int num){
  if (subset == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (num < subset.getInitialValue() || num >= counter.get(subset)) {
    throw new IllegalArgumentException(""String_Node_Str"" + num);
  }
  return id2num.get(subset).inverse().get(num);
}","public synchronized String getId(S subset,int num){
  if (subset == null) {
    throw createSubsetIsNullException();
  }
  if (num < subset.getInitialValue() || num >= counter.get(subset)) {
    throw new IllegalArgumentException(""String_Node_Str"" + num);
  }
  return id2num.get(subset).inverse().get(num);
}"
38897,"public StringToIntMapper(Class<SUBSET> clazz){
  this.clazz=clazz;
  id2num=new EnumMap<>(clazz);
  counter=new EnumMap<>(clazz);
  for (  SUBSET s : clazz.getEnumConstants()) {
    id2num.put(s,HashBiMap.<String,Integer>create());
    counter.put(s,s.getInitialValue());
  }
}","public StringToIntMapper(Class<S> clazz){
  this.clazz=clazz;
  id2num=new EnumMap<>(clazz);
  counter=new EnumMap<>(clazz);
  for (  S s : clazz.getEnumConstants()) {
    id2num.put(s,HashBiMap.<String,Integer>create());
    counter.put(s,s.getInitialValue());
  }
}"
38898,"@Override public void close() throws Exception {
  internalWriter.close();
}","@Override public void close(){
  try {
    internalWriter.close();
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}"
38899,"private void checkSize(boolean last) throws IOException {
  if (last || buffer.size() > CHUNK_MAX_SIZE) {
    scheduler.sendCommonFile(new CommonFile(fileName,buffer.toByteArray(),chunk++,last));
    buffer.reset();
  }
}","private void checkSize(boolean last){
  if (last || buffer.size() > CHUNK_MAX_SIZE) {
    scheduler.sendCommonFile(new CommonFile(fileName,buffer.toByteArray(),chunk++,last));
    buffer.reset();
  }
}"
38900,"@Override public <R>CompletableFuture<R> execute(final ExecutionEnvironment environment,final ExecutionHandler<R> handler){
  Objects.requireNonNull(environment);
  Objects.requireNonNull(handler);
class AsyncContext {
    WorkingDirectory workingDir;
    List<CommandExecution> parametersList;
    ExecutionReport report;
  }
  return CompletableFuture.completedFuture(new AsyncContext()).thenApplyAsync(ctxt -> {
    try {
      ctxt.workingDir=new WorkingDirectory(localDir,environment.getWorkingDirPrefix(),environment.isDebug());
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
    try {
      ctxt.parametersList=handler.before(ctxt.workingDir.toPath());
    }
 catch (    Throwable t) {
      try {
        ctxt.workingDir.close();
      }
 catch (      IOException e2) {
        throw new UncheckedIOException(e2);
      }
      throw new RuntimeException(t);
    }
    return ctxt;
  }
,executorContext.getComputationExecutor()).thenComposeAsync(ctxt -> {
    if (ctxt.parametersList.isEmpty()) {
      ctxt.report=new ExecutionReport(Collections.emptyList());
      return CompletableFuture.completedFuture(ctxt);
    }
 else {
      CompletableFuture<ExecutionReport> last=null;
      for (      CommandExecution execution : ctxt.parametersList) {
        ExecutionListener l=new DefaultExecutionListener(){
          @Override public void onExecutionStart(          int fromExecutionIndex,          int toExecutionIndex){
            try {
              for (int executionIndex=fromExecutionIndex; executionIndex <= toExecutionIndex; executionIndex++) {
                handler.onExecutionStart(execution,executionIndex);
              }
            }
 catch (            Exception e) {
              LOGGER.error(e.toString(),e);
            }
          }
          @Override public void onExecutionCompletion(          int executionIndex){
            try {
              handler.onExecutionCompletion(execution,executionIndex);
            }
 catch (            Exception e) {
              LOGGER.error(e.toString(),e);
            }
          }
        }
;
        if (last == null) {
          last=scheduler.execute(execution,ctxt.workingDir.toPath(),environment.getVariables(),l);
        }
 else {
          last=last.thenCompose(report -> {
            if (report.getErrors().isEmpty()) {
              return scheduler.execute(execution,ctxt.workingDir.toPath(),environment.getVariables(),l);
            }
 else {
              return CompletableFuture.completedFuture(report);
            }
          }
);
        }
      }
      return last.thenApply(report -> {
        ctxt.report=report;
        return ctxt;
      }
);
    }
  }
,executorContext.getComputationExecutor()).thenApplyAsync(ctxt -> {
    try {
      return handler.after(ctxt.workingDir.toPath(),ctxt.report);
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
 finally {
      try {
        ctxt.workingDir.close();
      }
 catch (      IOException e2) {
        throw new UncheckedIOException(e2);
      }
    }
  }
,executorContext.getComputationExecutor());
}","@Override public <R>CompletableFuture<R> execute(final ExecutionEnvironment environment,final ExecutionHandler<R> handler){
  Objects.requireNonNull(environment);
  Objects.requireNonNull(handler);
class AsyncContext {
    WorkingDirectory workingDir;
    List<CommandExecution> parametersList;
    ExecutionReport report;
  }
  return CompletableFuture.completedFuture(new AsyncContext()).thenApplyAsync(ctxt -> {
    try {
      ctxt.workingDir=new WorkingDirectory(localDir,environment.getWorkingDirPrefix(),environment.isDebug());
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
    try {
      ctxt.parametersList=handler.before(ctxt.workingDir.toPath());
    }
 catch (    Throwable t) {
      try {
        ctxt.workingDir.close();
      }
 catch (      IOException e2) {
        LOGGER.error(e2.toString(),e2);
      }
      throw new RuntimeException(t);
    }
    return ctxt;
  }
,executorContext.getComputationExecutor()).thenComposeAsync(ctxt -> {
    if (ctxt.parametersList.isEmpty()) {
      ctxt.report=new ExecutionReport(Collections.emptyList());
      return CompletableFuture.completedFuture(ctxt);
    }
 else {
      CompletableFuture<ExecutionReport> last=null;
      for (      CommandExecution execution : ctxt.parametersList) {
        ExecutionListener l=new DefaultExecutionListener(){
          @Override public void onExecutionStart(          int fromExecutionIndex,          int toExecutionIndex){
            try {
              for (int executionIndex=fromExecutionIndex; executionIndex <= toExecutionIndex; executionIndex++) {
                handler.onExecutionStart(execution,executionIndex);
              }
            }
 catch (            Exception e) {
              LOGGER.error(e.toString(),e);
            }
          }
          @Override public void onExecutionCompletion(          int executionIndex){
            try {
              handler.onExecutionCompletion(execution,executionIndex);
            }
 catch (            Exception e) {
              LOGGER.error(e.toString(),e);
            }
          }
        }
;
        if (last == null) {
          last=scheduler.execute(execution,ctxt.workingDir.toPath(),environment.getVariables(),l);
        }
 else {
          last=last.thenCompose(report -> {
            if (report.getErrors().isEmpty()) {
              return scheduler.execute(execution,ctxt.workingDir.toPath(),environment.getVariables(),l);
            }
 else {
              return CompletableFuture.completedFuture(report);
            }
          }
);
        }
      }
      return last.thenApply(report -> {
        ctxt.report=report;
        return ctxt;
      }
);
    }
  }
,executorContext.getComputationExecutor()).thenApplyAsync(ctxt -> {
    try {
      return handler.after(ctxt.workingDir.toPath(),ctxt.report);
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
 finally {
      try {
        ctxt.workingDir.close();
      }
 catch (      IOException e2) {
        LOGGER.error(e2.toString(),e2);
      }
    }
  }
,executorContext.getComputationExecutor());
}"
38901,"public MpiComputationManager(Path localDir,MpiJobScheduler scheduler,MpiStatistics statistics,MpiExecutorContext executorContext) throws IOException, InterruptedException {
  this.localDir=Objects.requireNonNull(localDir);
  this.statistics=Objects.requireNonNull(statistics);
  this.executorContext=Objects.requireNonNull(executorContext);
  this.scheduler=scheduler;
  if (executorContext.getMonitorExecutor() != null) {
    busyCoresPrintTask=executorContext.getMonitorExecutor().scheduleAtFixedRate(new Runnable(){
      @Override public void run(){
        LOGGER.info(""String_Node_Str"",scheduler.getResources().getBusyCores(),scheduler.getResources().getAvailableCores(),((float)scheduler.getStartedTasksAndReset()) / LOG_DELAY);
      }
    }
,0,LOG_DELAY,TimeUnit.SECONDS);
  }
}","public MpiComputationManager(Path localDir,MpiJobScheduler scheduler,MpiStatistics statistics,MpiExecutorContext executorContext){
  this.localDir=Objects.requireNonNull(localDir);
  this.statistics=Objects.requireNonNull(statistics);
  this.executorContext=Objects.requireNonNull(executorContext);
  this.scheduler=scheduler;
  if (executorContext.getMonitorExecutor() != null) {
    busyCoresPrintTask=executorContext.getMonitorExecutor().scheduleAtFixedRate(() -> LOGGER.info(""String_Node_Str"",scheduler.getResources().getBusyCores(),scheduler.getResources().getAvailableCores(),((float)scheduler.getStartedTasksAndReset()) / LOG_DELAY),0,LOG_DELAY,TimeUnit.SECONDS);
  }
}"
38902,"@Override public OutputStream newCommonFile(final String fileName) throws IOException {
  return new OutputStream(){
    private final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    private int chunk=0;
    private void checkSize(    boolean last) throws IOException {
      if (last || buffer.size() > CHUNK_MAX_SIZE) {
        scheduler.sendCommonFile(new CommonFile(fileName,buffer.toByteArray(),chunk++,last));
        buffer.reset();
      }
    }
    @Override public void write(    int b) throws IOException {
      buffer.write(b);
      checkSize(false);
    }
    @Override public void write(    byte[] b) throws IOException {
      buffer.write(b);
      checkSize(false);
    }
    @Override public void write(    byte[] b,    int off,    int len) throws IOException {
      buffer.write(b,off,len);
      checkSize(false);
    }
    @Override public void flush() throws IOException {
      buffer.flush();
    }
    @Override public void close() throws IOException {
      buffer.close();
      checkSize(true);
    }
  }
;
}","@Override public OutputStream newCommonFile(final String fileName) throws IOException {
  return new OutputStream(){
    private final ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    private int chunk=0;
    private void checkSize(    boolean last){
      if (last || buffer.size() > CHUNK_MAX_SIZE) {
        scheduler.sendCommonFile(new CommonFile(fileName,buffer.toByteArray(),chunk++,last));
        buffer.reset();
      }
    }
    @Override public void write(    int b) throws IOException {
      buffer.write(b);
      checkSize(false);
    }
    @Override public void write(    byte[] b) throws IOException {
      buffer.write(b);
      checkSize(false);
    }
    @Override public void write(    byte[] b,    int off,    int len) throws IOException {
      buffer.write(b,off,len);
      checkSize(false);
    }
    @Override public void flush() throws IOException {
      buffer.flush();
    }
    @Override public void close() throws IOException {
      buffer.close();
      checkSize(true);
    }
  }
;
}"
38903,"@Override public void close() throws Exception {
  scheduler.shutdown();
  statistics.close();
  if (busyCoresPrintTask != null) {
    busyCoresPrintTask.cancel(true);
  }
}","@Override public void close(){
  try {
    scheduler.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  try {
    statistics.close();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
  if (busyCoresPrintTask != null) {
    busyCoresPrintTask.cancel(true);
  }
  try {
    executorContext.shutdown();
  }
 catch (  Exception e) {
    LOGGER.error(e.toString(),e);
  }
}"
38904,"public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  String statisticsDbName=line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(""String_Node_Str""));
  boolean verbose=line.hasOption(""String_Node_Str"");
  Path stdOutArchive=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiExecutorContext mpiExecutorContext=new MpiExecutorContext();
  MpiStatisticsFactory statisticsFactory=createMpiStatisticsFactory(config,statisticsDbDir,statisticsDbName);
  try {
    MpiStatistics statistics=statisticsFactory.create(statisticsDbDir,statisticsDbName);
    return new MpiComputationManager(tmpDir,statistics,mpiExecutorContext,coresPerRank,verbose,stdOutArchive){
      @Override public void close() throws Exception {
        try {
          super.close();
        }
 catch (        Exception e) {
          LOGGER.error(e.toString(),e);
        }
        try {
          statistics.close();
        }
 catch (        Exception e) {
          LOGGER.error(e.toString(),e);
        }
        try {
          mpiExecutorContext.shutdown();
        }
 catch (        Exception e) {
          LOGGER.error(e.toString(),e);
        }
      }
    }
;
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    throw new UncheckedInterruptedException(e);
  }
}","public static ComputationManager createMpiComputationManager(CommandLine line,FileSystem fileSystem){
  Path tmpDir=fileSystem.getPath(line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : System.getProperty(""String_Node_Str""));
  Path statisticsDbDir=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  String statisticsDbName=line.hasOption(""String_Node_Str"") ? line.getOptionValue(""String_Node_Str"") : null;
  int coresPerRank=Integer.parseInt(line.getOptionValue(""String_Node_Str""));
  boolean verbose=line.hasOption(""String_Node_Str"");
  Path stdOutArchive=line.hasOption(""String_Node_Str"") ? fileSystem.getPath(line.getOptionValue(""String_Node_Str"")) : null;
  ComponentDefaultConfig config=ComponentDefaultConfig.load();
  MpiStatisticsFactory statisticsFactory=createMpiStatisticsFactory(config,statisticsDbDir,statisticsDbName);
  try {
    return new MpiComputationManager(tmpDir,statisticsFactory.create(statisticsDbDir,statisticsDbName),new MpiExecutorContext(),coresPerRank,verbose,stdOutArchive);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
catch (  InterruptedException e) {
    throw new UncheckedInterruptedException(e);
  }
}"
38905,"@Override public void close() throws Exception {
}","@Override public void close(){
}"
38906,"public static TsoGeneratorSpeedAutomaton fromXml(String contingencyId,XMLStreamReader xmlsr) throws XMLStreamException {
  boolean under=false;
  boolean over=false;
  String text=null;
  List<String> onUnderSpeedDiconnectedGenerators=new ArrayList<>();
  List<String> onOverSpeedDiconnectedGenerators=new ArrayList<>();
  while (xmlsr.hasNext()) {
    int eventType=xmlsr.next();
switch (eventType) {
case XMLEvent.CHARACTERS:
      text=xmlsr.getText();
    break;
case XMLEvent.START_ELEMENT:
switch (xmlsr.getLocalName()) {
case ""String_Node_Str"":
    under=true;
  break;
case ""String_Node_Str"":
over=true;
break;
}
break;
case XMLEvent.END_ELEMENT:
switch (xmlsr.getLocalName()) {
case ""String_Node_Str"":
under=false;
break;
case ""String_Node_Str"":
over=false;
break;
case ""String_Node_Str"":
if (under) {
onUnderSpeedDiconnectedGenerators.add(text);
}
 else if (over) {
onOverSpeedDiconnectedGenerators.add(text);
}
 else {
throw new AssertionError();
}
break;
case ""String_Node_Str"":
return new TsoGeneratorSpeedAutomaton(contingencyId,onUnderSpeedDiconnectedGenerators,onOverSpeedDiconnectedGenerators);
}
break;
}
}
throw new AssertionError(""String_Node_Str"");
}","public static TsoGeneratorSpeedAutomaton fromXml(String contingencyId,XMLStreamReader xmlsr) throws XMLStreamException {
  LimitsXmlParsingState state=null;
  String text=null;
  List<String> onUnderSpeedDiconnectedGenerators=new ArrayList<>();
  List<String> onOverSpeedDiconnectedGenerators=new ArrayList<>();
  while (xmlsr.hasNext()) {
    int eventType=xmlsr.next();
switch (eventType) {
case XMLEvent.CHARACTERS:
      text=xmlsr.getText();
    break;
case XMLEvent.START_ELEMENT:
switch (xmlsr.getLocalName()) {
case ON_UNDER_SPEED_DISCONNECTED_GENERATORS:
    state=LimitsXmlParsingState.UNDER;
  break;
case ON_OVER_SPEED_DISCONNECTED_GENERATORS:
state=LimitsXmlParsingState.OVER;
break;
}
break;
case XMLEvent.END_ELEMENT:
switch (xmlsr.getLocalName()) {
case ON_UNDER_SPEED_DISCONNECTED_GENERATORS:
case ON_OVER_SPEED_DISCONNECTED_GENERATORS:
state=null;
break;
case ""String_Node_Str"":
LimitsXmlParsingState.addGenerator(state,text,onUnderSpeedDiconnectedGenerators,onOverSpeedDiconnectedGenerators);
break;
case ""String_Node_Str"":
return new TsoGeneratorSpeedAutomaton(contingencyId,onUnderSpeedDiconnectedGenerators,onOverSpeedDiconnectedGenerators);
}
break;
}
}
throw new AssertionError(""String_Node_Str"");
}"
38907,"public static TsoGeneratorVoltageAutomaton fromXml(String contingencyId,XMLStreamReader xmlsr) throws XMLStreamException {
  boolean under=false;
  boolean over=false;
  String text=null;
  List<String> onUnderVoltageDiconnectedGenerators=new ArrayList<>();
  List<String> onOverVoltageDiconnectedGenerators=new ArrayList<>();
  while (xmlsr.hasNext()) {
    int eventType=xmlsr.next();
switch (eventType) {
case XMLEvent.CHARACTERS:
      text=xmlsr.getText();
    break;
case XMLEvent.START_ELEMENT:
switch (xmlsr.getLocalName()) {
case ""String_Node_Str"":
    under=true;
  break;
case ""String_Node_Str"":
over=true;
break;
}
break;
case XMLEvent.END_ELEMENT:
switch (xmlsr.getLocalName()) {
case ""String_Node_Str"":
under=false;
break;
case ""String_Node_Str"":
over=false;
break;
case ""String_Node_Str"":
if (under) {
onUnderVoltageDiconnectedGenerators.add(text);
}
 else if (over) {
onOverVoltageDiconnectedGenerators.add(text);
}
 else {
throw new AssertionError();
}
break;
case ""String_Node_Str"":
return new TsoGeneratorVoltageAutomaton(contingencyId,onUnderVoltageDiconnectedGenerators,onOverVoltageDiconnectedGenerators);
}
break;
}
}
throw new AssertionError(""String_Node_Str"");
}","public static TsoGeneratorVoltageAutomaton fromXml(String contingencyId,XMLStreamReader xmlsr) throws XMLStreamException {
  LimitsXmlParsingState state=null;
  String text=null;
  List<String> onUnderVoltageDiconnectedGenerators=new ArrayList<>();
  List<String> onOverVoltageDiconnectedGenerators=new ArrayList<>();
  while (xmlsr.hasNext()) {
    int eventType=xmlsr.next();
switch (eventType) {
case XMLEvent.CHARACTERS:
      text=xmlsr.getText();
    break;
case XMLEvent.START_ELEMENT:
switch (xmlsr.getLocalName()) {
case ON_UNDER_VOLTAGE_DISCONNECTED_GENERATORS:
    state=LimitsXmlParsingState.UNDER;
  break;
case ON_OVER_VOLTAGE_DISCONNECTED_GENERATORS:
state=LimitsXmlParsingState.OVER;
break;
}
break;
case XMLEvent.END_ELEMENT:
switch (xmlsr.getLocalName()) {
case ON_UNDER_VOLTAGE_DISCONNECTED_GENERATORS:
case ON_OVER_VOLTAGE_DISCONNECTED_GENERATORS:
state=null;
break;
case ""String_Node_Str"":
LimitsXmlParsingState.addGenerator(state,text,onUnderVoltageDiconnectedGenerators,onOverVoltageDiconnectedGenerators);
break;
case ""String_Node_Str"":
return new TsoGeneratorVoltageAutomaton(contingencyId,onUnderVoltageDiconnectedGenerators,onOverVoltageDiconnectedGenerators);
}
break;
}
}
throw new AssertionError(""String_Node_Str"");
}"
38908,"private UndirectedGraph<UcteNodeCode,Object> createSubstationGraph(UcteNetwork network){
  UndirectedGraph<UcteNodeCode,Object> graph=new Pseudograph<>(Object.class);
  for (  UcteNode node : network.getNodes()) {
    graph.addVertex(node.getCode());
  }
  Multimap<String,UcteNode> nodesByGeographicalSpot=Multimaps.index(network.getNodes(),new Function<UcteNode,String>(){
    @Override public String apply(    UcteNode node){
      return node.getCode().getGeographicalSpot();
    }
  }
);
  for (  Map.Entry<String,Collection<UcteNode>> entry : nodesByGeographicalSpot.asMap().entrySet()) {
    for (    UcteNode n1 : entry.getValue()) {
      for (      UcteNode n2 : entry.getValue()) {
        if (n1 != n2) {
          graph.addEdge(n1.getCode(),n2.getCode());
        }
      }
    }
  }
  for (  UcteTransformer tfo : network.getTransformers()) {
    UcteNodeCode nodeCode1=tfo.getId().getNodeCode1();
    UcteNodeCode nodeCode2=tfo.getId().getNodeCode2();
    graph.addEdge(nodeCode1,nodeCode2);
  }
  for (  UcteLine l : network.getLines()) {
    UcteNodeCode nodeCode1=l.getId().getNodeCode1();
    UcteNodeCode nodeCode2=l.getId().getNodeCode2();
    if (l.getStatus() == UcteElementStatus.BUSBAR_COUPLER_IN_OPERATION || l.getStatus() == UcteElementStatus.BUSBAR_COUPLER_OUT_OF_OPERATION) {
      graph.addEdge(nodeCode1,nodeCode2);
    }
 else {
      double z=Math.hypot(l.getResistance(),l.getReactance());
      if (z < lineMinZ) {
        graph.addEdge(nodeCode1,nodeCode2);
      }
    }
  }
  return graph;
}","private UndirectedGraph<UcteNodeCode,Object> createSubstationGraph(UcteNetwork network){
  UndirectedGraph<UcteNodeCode,Object> graph=new Pseudograph<>(Object.class);
  for (  UcteNode node : network.getNodes()) {
    graph.addVertex(node.getCode());
  }
  Multimap<String,UcteNode> nodesByGeographicalSpot=Multimaps.index(network.getNodes(),node -> node.getCode().getGeographicalSpot());
  for (  Map.Entry<String,Collection<UcteNode>> entry : nodesByGeographicalSpot.asMap().entrySet()) {
    for (    UcteNode n1 : entry.getValue()) {
      for (      UcteNode n2 : entry.getValue()) {
        if (n1 != n2) {
          graph.addEdge(n1.getCode(),n2.getCode());
        }
      }
    }
  }
  for (  UcteTransformer tfo : network.getTransformers()) {
    UcteNodeCode nodeCode1=tfo.getId().getNodeCode1();
    UcteNodeCode nodeCode2=tfo.getId().getNodeCode2();
    graph.addEdge(nodeCode1,nodeCode2);
  }
  for (  UcteLine l : network.getLines()) {
    UcteNodeCode nodeCode1=l.getId().getNodeCode1();
    UcteNodeCode nodeCode2=l.getId().getNodeCode2();
    if (l.getStatus() == UcteElementStatus.BUSBAR_COUPLER_IN_OPERATION || l.getStatus() == UcteElementStatus.BUSBAR_COUPLER_OUT_OF_OPERATION) {
      graph.addEdge(nodeCode1,nodeCode2);
    }
 else {
      double z=Math.hypot(l.getResistance(),l.getReactance());
      if (z < lineMinZ) {
        graph.addEdge(nodeCode1,nodeCode2);
      }
    }
  }
  return graph;
}"
38909,"private void updateSubstation(){
  if (substations == null) {
    LOGGER.trace(""String_Node_Str"");
    substations=new ArrayList<>();
    node2voltageLevel=new HashMap<>();
    UndirectedGraph<UcteNodeCode,Object> graph=createSubstationGraph(network);
    for (    Set<UcteNodeCode> substationNodes : new ConnectivityInspector<>(graph).connectedSets()) {
      UcteNodeCode mainNode=substationNodes.stream().sorted((nodeCode1,nodeCode2) -> {
        if (nodeCode1.getUcteCountryCode() == UcteCountryCode.XX && nodeCode2.getUcteCountryCode() != UcteCountryCode.XX) {
          return 1;
        }
 else         if (nodeCode1.getUcteCountryCode() != UcteCountryCode.XX && nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {
          return -1;
        }
 else {
          int c=Float.compare(nodeCode2.getVoltageLevelCode().getVoltageLevel(),nodeCode1.getVoltageLevelCode().getVoltageLevel());
          if (c == 0) {
            c=nodeCode2.getBusbar().compareTo(nodeCode1.getBusbar());
          }
          return c;
        }
      }
).findFirst().get();
      Multimap<UcteVoltageLevelCode,UcteNodeCode> nodesByVoltageLevel=Multimaps.index(substationNodes,nodeCode -> {
        return nodeCode.getVoltageLevelCode();
      }
);
      String substationName=mainNode.getUcteCountryCode().getUcteCode() + mainNode.getGeographicalSpot();
      List<UcteVoltageLevel> voltageLevels=new ArrayList<>();
      UcteSubstation substation=new UcteSubstation(substationName,voltageLevels);
      substations.add(substation);
      LOGGER.trace(""String_Node_Str"",substationName);
      for (      Map.Entry<UcteVoltageLevelCode,Collection<UcteNodeCode>> entry : nodesByVoltageLevel.asMap().entrySet()) {
        UcteVoltageLevelCode vlc=entry.getKey();
        Collection<UcteNodeCode> voltageLevelNodes=entry.getValue();
        String voltageLevelName=mainNode.getUcteCountryCode().getUcteCode() + mainNode.getGeographicalSpot() + vlc.ordinal();
        UcteVoltageLevel voltageLevel=new UcteVoltageLevel(voltageLevelName,substation,voltageLevelNodes);
        voltageLevels.add(voltageLevel);
        for (        UcteNodeCode voltageLevelNode : voltageLevelNodes) {
          node2voltageLevel.put(voltageLevelNode,voltageLevel);
        }
        LOGGER.trace(""String_Node_Str"",voltageLevelName,voltageLevelNodes);
      }
    }
  }
}","private void updateSubstation(){
  if (substations == null) {
    LOGGER.trace(""String_Node_Str"");
    substations=new ArrayList<>();
    node2voltageLevel=new HashMap<>();
    UndirectedGraph<UcteNodeCode,Object> graph=createSubstationGraph(network);
    for (    Set<UcteNodeCode> substationNodes : new ConnectivityInspector<>(graph).connectedSets()) {
      UcteNodeCode mainNode=substationNodes.stream().sorted((nodeCode1,nodeCode2) -> {
        if (nodeCode1.getUcteCountryCode() == UcteCountryCode.XX && nodeCode2.getUcteCountryCode() != UcteCountryCode.XX) {
          return 1;
        }
 else         if (nodeCode1.getUcteCountryCode() != UcteCountryCode.XX && nodeCode2.getUcteCountryCode() == UcteCountryCode.XX) {
          return -1;
        }
 else {
          int c=Float.compare(nodeCode2.getVoltageLevelCode().getVoltageLevel(),nodeCode1.getVoltageLevelCode().getVoltageLevel());
          if (c == 0) {
            c=nodeCode2.getBusbar().compareTo(nodeCode1.getBusbar());
          }
          return c;
        }
      }
).findFirst().orElseThrow(() -> new AssertionError());
      Multimap<UcteVoltageLevelCode,UcteNodeCode> nodesByVoltageLevel=Multimaps.index(substationNodes,UcteNodeCode::getVoltageLevelCode);
      String substationName=mainNode.getUcteCountryCode().getUcteCode() + mainNode.getGeographicalSpot();
      List<UcteVoltageLevel> voltageLevels=new ArrayList<>();
      UcteSubstation substation=new UcteSubstation(substationName,voltageLevels);
      substations.add(substation);
      LOGGER.trace(""String_Node_Str"",substationName);
      for (      Map.Entry<UcteVoltageLevelCode,Collection<UcteNodeCode>> entry : nodesByVoltageLevel.asMap().entrySet()) {
        UcteVoltageLevelCode vlc=entry.getKey();
        Collection<UcteNodeCode> voltageLevelNodes=entry.getValue();
        String voltageLevelName=mainNode.getUcteCountryCode().getUcteCode() + mainNode.getGeographicalSpot() + vlc.ordinal();
        UcteVoltageLevel voltageLevel=new UcteVoltageLevel(voltageLevelName,substation,voltageLevelNodes);
        voltageLevels.add(voltageLevel);
        for (        UcteNodeCode voltageLevelNode : voltageLevelNodes) {
          node2voltageLevel.put(voltageLevelNode,voltageLevel);
        }
        LOGGER.trace(""String_Node_Str"",voltageLevelName,voltageLevelNodes);
      }
    }
  }
}"
38910,"@Override public void findMaximalFlowTap(Network network,String phaseShifterId){
  TwoWindingsTransformer phaseShifter=network.getTwoWindingsTransformer(phaseShifterId);
  if (phaseShifter == null) {
    throw new RuntimeException(""String_Node_Str"" + phaseShifterId + ""String_Node_Str"");
  }
  if (phaseShifter.getPhaseTapChanger() == null) {
    throw new RuntimeException(""String_Node_Str"" + phaseShifterId + ""String_Node_Str"");
  }
  int optimalTap;
  String stateId=network.getStateManager().getWorkingStateId();
  String tmpStateId=""String_Node_Str"" + UUID.randomUUID();
  network.getStateManager().cloneState(stateId,tmpStateId);
  try {
    network.getStateManager().setWorkingState(tmpStateId);
    LoadFlowFactory loadFlowFactory=config.getLoadFlowFactoryClass().newInstance();
    LoadFlow loadFlow=loadFlowFactory.create(network,computationManager,0);
    runLoadFlow(loadFlow);
    if (phaseShifter.getTerminal1().getP() >= phaseShifter.getCurrentLimits1().getPermanentLimit()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    int tapPosInc=1;
    float i;
    float limit=getLimit(phaseShifter);
    int tapPos=phaseShifter.getPhaseTapChanger().getTapPosition();
    int maxTap=phaseShifter.getPhaseTapChanger().getHighTapPosition();
    while ((i=getI(phaseShifter)) < limit && tapPos < maxTap) {
      tapPos+=tapPosInc;
      phaseShifter.getPhaseTapChanger().setTapPosition(tapPos);
      runLoadFlow(loadFlow);
      if (getI(phaseShifter) < i) {
        tapPosInc*=-1;
      }
    }
    if (i < limit) {
      optimalTap=phaseShifter.getPhaseTapChanger().getTapPosition();
    }
 else {
      optimalTap=phaseShifter.getPhaseTapChanger().getTapPosition() - tapPosInc;
      phaseShifter.getPhaseTapChanger().setTapPosition(optimalTap);
      runLoadFlow(loadFlow);
      if (getI(phaseShifter) >= limit) {
        throw new AssertionError(""String_Node_Str"");
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new UncheckedIllegalAccessException(e);
  }
catch (  InstantiationException e) {
    throw new UncheckedInstantiationException(e);
  }
 finally {
    network.getStateManager().removeState(tmpStateId);
    network.getStateManager().setWorkingState(stateId);
  }
  LOGGER.debug(""String_Node_Str"",phaseShifter,optimalTap,phaseShifter.getPhaseTapChanger().getTapPosition());
  phaseShifter.getPhaseTapChanger().setTapPosition(optimalTap);
}","@Override public void findMaximalFlowTap(Network network,String phaseShifterId){
  TwoWindingsTransformer phaseShifter=network.getTwoWindingsTransformer(phaseShifterId);
  if (phaseShifter == null) {
    throw new RuntimeException(""String_Node_Str"" + phaseShifterId + ""String_Node_Str"");
  }
  if (phaseShifter.getPhaseTapChanger() == null) {
    throw new RuntimeException(""String_Node_Str"" + phaseShifterId + ""String_Node_Str"");
  }
  int optimalTap;
  String stateId=network.getStateManager().getWorkingStateId();
  String tmpStateId=""String_Node_Str"" + UUID.randomUUID();
  network.getStateManager().cloneState(stateId,tmpStateId);
  try {
    network.getStateManager().setWorkingState(tmpStateId);
    LoadFlowFactory loadFlowFactory=config.getLoadFlowFactoryClass().newInstance();
    LoadFlow loadFlow=loadFlowFactory.create(network,computationManager,0);
    runLoadFlow(loadFlow);
    if (phaseShifter.getTerminal1().getI() >= phaseShifter.getCurrentLimits1().getPermanentLimit()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    int tapPosInc=1;
    float i;
    float limit=getLimit(phaseShifter);
    int tapPos=phaseShifter.getPhaseTapChanger().getTapPosition();
    int maxTap=phaseShifter.getPhaseTapChanger().getHighTapPosition();
    while ((i=getI(phaseShifter)) < limit && tapPos < maxTap) {
      tapPos+=tapPosInc;
      phaseShifter.getPhaseTapChanger().setTapPosition(tapPos);
      runLoadFlow(loadFlow);
      if (getI(phaseShifter) < i) {
        tapPosInc*=-1;
      }
    }
    if (i < limit) {
      optimalTap=phaseShifter.getPhaseTapChanger().getTapPosition();
    }
 else {
      optimalTap=phaseShifter.getPhaseTapChanger().getTapPosition() - tapPosInc;
      phaseShifter.getPhaseTapChanger().setTapPosition(optimalTap);
      runLoadFlow(loadFlow);
      if (getI(phaseShifter) >= limit) {
        throw new AssertionError(""String_Node_Str"");
      }
    }
  }
 catch (  IllegalAccessException e) {
    throw new UncheckedIllegalAccessException(e);
  }
catch (  InstantiationException e) {
    throw new UncheckedInstantiationException(e);
  }
 finally {
    network.getStateManager().removeState(tmpStateId);
    network.getStateManager().setWorkingState(stateId);
  }
  LOGGER.debug(""String_Node_Str"",phaseShifter,optimalTap,phaseShifter.getPhaseTapChanger().getTapPosition());
  phaseShifter.getPhaseTapChanger().setTapPosition(optimalTap);
}"
38911,"@Override public HalfLineImpl setXnodeQ(float xnodeQ){
  this.xnodeQ=xnodeQ;
  return null;
}","@Override public HalfLineImpl setXnodeQ(float xnodeQ){
  this.xnodeQ=xnodeQ;
  return this;
}"
38912,"public void readCsv(BufferedReader reader,char separator){
  try {
    String strSep=Character.toString(separator);
    String line;
    while ((line=reader.readLine()) != null) {
      String trimmedLine=line.trim();
      if (trimmedLine.isEmpty()) {
        continue;
      }
      String[] tokens=trimmedLine.split(strSep);
      if (tokens.length != 2) {
        LOGGER.warn(""String_Node_Str"",trimmedLine);
        continue;
      }
      mapping.put(tokens[0],tokens[1]);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void readCsv(BufferedReader reader,char separator){
  CsvListReader csvReader=new CsvListReader(reader,createPreference(separator));
  List<String> nextLine;
  try {
    while ((nextLine=csvReader.read()) != null) {
      if (nextLine.size() != 2) {
        throw new RuntimeException(""String_Node_Str"" + nextLine + ""String_Node_Str"");
      }
      mapping.put(nextLine.get(0),nextLine.get(1));
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
38913,"public void writeCsv(BufferedWriter writer,char separator){
  mapping.forEach((s,s2) -> {
    try {
      writer.write(s);
      writer.write(separator);
      writer.write(s2);
      writer.newLine();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
);
}","public void writeCsv(BufferedWriter writer,char separator){
  CsvListWriter csvWriter=new CsvListWriter(writer,createPreference(separator));
  String[] nextLine=new String[2];
  try {
    try {
      for (      Map.Entry<String,String> e : mapping.entrySet()) {
        nextLine[0]=e.getKey();
        nextLine[1]=e.getValue();
        csvWriter.write(nextLine);
      }
    }
  finally {
      csvWriter.flush();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
38914,"@Test public void invalidFileTest() throws IOException {
  String csv=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  StringAnonymizer anonymizer=fromCsv(csv);
  assertEquals(1,anonymizer.getStringCount());
}","@Test public void invalidFileTest() throws IOException {
  String csv=String.join(System.lineSeparator(),""String_Node_Str"",""String_Node_Str"");
  StringAnonymizer anonymizer=fromCsv(csv);
  assertEquals(1,anonymizer.getStringCount());
}"
38915,"public void readCsv(BufferedReader reader,char separator){
  try {
    String strSep=Character.toString(separator);
    String line;
    while ((line=reader.readLine()) != null) {
      String[] tokens=line.split(strSep);
      mapping.put(tokens[0],tokens[1]);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void readCsv(BufferedReader reader,char separator){
  try {
    String strSep=Character.toString(separator);
    String line;
    while ((line=reader.readLine()) != null) {
      String trimmedLine=line.trim();
      if (trimmedLine.isEmpty()) {
        continue;
      }
      String[] tokens=trimmedLine.split(strSep);
      if (tokens.length != 2) {
        LOGGER.warn(""String_Node_Str"",trimmedLine);
        continue;
      }
      mapping.put(tokens[0],tokens[1]);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
38916,Integer getOptionalIntProperty(String name);,@Deprecated Integer getOptionalIntProperty(String name);
38917,Boolean getOptinalBooleanProperty(String name);,@Deprecated Boolean getOptinalBooleanProperty(String name);
38918,"public static Table<String,String,Float> parseMatrix(Reader reader) throws IOException {
  Table<String,String,Float> table=HashBasedTable.create();
  try (ICsvListReader csvReader=new CsvListReader(reader,CsvPreference.STANDARD_PREFERENCE)){
    List<String> columnHeaders=csvReader.read();
    List<String> row;
    while ((row=csvReader.read()) != null) {
      String rowHeader=row.get(0);
      for (int i=1; i < row.size(); i++) {
        String columnHeader=columnHeaders.get(i);
        String value=row.get(i);
        table.put(rowHeader,columnHeader,value == null ? Float.NaN : Float.valueOf(value));
      }
    }
  }
   return table;
}","public static Table<String,String,Float> parseMatrix(Reader reader) throws IOException {
  Table<String,String,Float> table=HashBasedTable.create();
  try (ICsvListReader csvReader=new CsvListReader(reader,CsvPreference.STANDARD_PREFERENCE)){
    List<String> columnHeaders=csvReader.read();
    List<String> row;
    while ((row=csvReader.read()) != null) {
      String rowHeader=row.get(0);
      for (int i=1; i < row.size(); i++) {
        String columnHeader=columnHeaders.get(i);
        String value=row.get(i);
        table.put(rowHeader,columnHeader,value == null ? Float.NaN : Float.parseFloat(value));
      }
    }
  }
   return table;
}"
38919,"public AsciiTableFormatter(String title,Column... columns){
  this(new OutputStreamWriter(System.out),title,TableFormatterConfig.load(),columns);
}","public AsciiTableFormatter(String title,Column... columns){
  this(new OutputStreamWriter(System.out,StandardCharsets.UTF_8),title,TableFormatterConfig.load(),columns);
}"
38920,"@Test public void moduleConfigTest() throws IOException, XMLStreamException, SAXException, ParserConfigurationException {
  try (FileSystem fileSystem=Jimfs.newFileSystem(Configuration.unix())){
    Path cfgDir=Files.createDirectory(fileSystem.getPath(""String_Node_Str""));
    Properties prop1=new Properties();
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",Integer.toString(3));
    prop1.setProperty(""String_Node_Str"",Boolean.FALSE.toString());
    prop1.setProperty(""String_Node_Str"",Double.toString(2.3));
    prop1.setProperty(""String_Node_Str"",ArrayList.class.getName());
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",StandardOpenOption.APPEND.name());
    prop1.setProperty(""String_Node_Str"",StandardOpenOption.APPEND + ""String_Node_Str"" + StandardOpenOption.CREATE);
    Path p=fileSystem.getPath(""String_Node_Str"");
    Path p2=fileSystem.getPath(""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",p.toString());
    prop1.setProperty(""String_Node_Str"",p.toString() + ""String_Node_Str"" + p2.toString());
    prop1.setProperty(""String_Node_Str"",p.toString() + ""String_Node_Str"" + p2.toString());
    try (Writer w=Files.newBufferedWriter(cfgDir.resolve(""String_Node_Str""),StandardCharsets.UTF_8)){
      prop1.store(w,null);
    }
     PropertiesPlatformConfig propsConfig=new PropertiesPlatformConfig(cfgDir,fileSystem);
    ModuleConfig modConfig=propsConfig.getModuleConfig(""String_Node_Str"");
    Assert.assertTrue(modConfig.getStringProperty(""String_Node_Str"").equals(""String_Node_Str""));
    Assert.assertTrue(modConfig.getStringProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""));
    try {
      modConfig.getStringProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getIntProperty(""String_Node_Str"") == 3);
    try {
      modConfig.getIntProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getOptionalIntProperty(""String_Node_Str"") == null);
    Assert.assertTrue(modConfig.getIntProperty(""String_Node_Str"",4) == 4);
    Assert.assertFalse(modConfig.getBooleanProperty(""String_Node_Str""));
    try {
      modConfig.getBooleanProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getBooleanProperty(""String_Node_Str"",true));
    Assert.assertTrue(modConfig.getDoubleProperty(""String_Node_Str"") == 2.3);
    try {
      modConfig.getDoubleProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getDoubleProperty(""String_Node_Str"",4.5) == 4.5);
    Assert.assertTrue(modConfig.getClassProperty(""String_Node_Str"",List.class) == ArrayList.class);
    Assert.assertTrue(modConfig.getStringListProperty(""String_Node_Str"").equals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    Assert.assertTrue(modConfig.getStringListProperty(""String_Node_Str"").equals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    try {
      modConfig.getStringListProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getEnumProperty(""String_Node_Str"",StandardOpenOption.class) == StandardOpenOption.APPEND);
    try {
      modConfig.getEnumProperty(""String_Node_Str"",StandardOpenOption.class);
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getEnumSetProperty(""String_Node_Str"",StandardOpenOption.class).equals(EnumSet.of(StandardOpenOption.APPEND,StandardOpenOption.CREATE)));
    try {
      modConfig.getEnumSetProperty(""String_Node_Str"",StandardOpenOption.class);
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getPathProperty(""String_Node_Str"").equals(p));
    try {
      modConfig.getPathProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getPathListProperty(""String_Node_Str"").equals(Arrays.asList(p,p2)));
    Assert.assertTrue(modConfig.getPathListProperty(""String_Node_Str"").equals(Arrays.asList(p,p2)));
    try {
      modConfig.getPathListProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
  }
 }","@Test public void moduleConfigTest() throws IOException, XMLStreamException, SAXException, ParserConfigurationException {
  try (FileSystem fileSystem=Jimfs.newFileSystem(Configuration.unix())){
    Path cfgDir=Files.createDirectory(fileSystem.getPath(""String_Node_Str""));
    Properties prop1=new Properties();
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",Integer.toString(3));
    prop1.setProperty(""String_Node_Str"",Boolean.FALSE.toString());
    prop1.setProperty(""String_Node_Str"",Double.toString(2.3));
    prop1.setProperty(""String_Node_Str"",ArrayList.class.getName());
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",StandardOpenOption.APPEND.name());
    prop1.setProperty(""String_Node_Str"",StandardOpenOption.APPEND + ""String_Node_Str"" + StandardOpenOption.CREATE);
    Path p=fileSystem.getPath(""String_Node_Str"");
    Path p2=fileSystem.getPath(""String_Node_Str"");
    prop1.setProperty(""String_Node_Str"",p.toString());
    prop1.setProperty(""String_Node_Str"",p.toString() + ""String_Node_Str"" + p2.toString());
    prop1.setProperty(""String_Node_Str"",p.toString() + ""String_Node_Str"" + p2.toString());
    try (Writer w=Files.newBufferedWriter(cfgDir.resolve(""String_Node_Str""),StandardCharsets.UTF_8)){
      prop1.store(w,null);
    }
     PropertiesPlatformConfig propsConfig=new PropertiesPlatformConfig(cfgDir,fileSystem);
    ModuleConfig modConfig=propsConfig.getModuleConfig(""String_Node_Str"");
    Assert.assertTrue(modConfig.getStringProperty(""String_Node_Str"").equals(""String_Node_Str""));
    Assert.assertTrue(modConfig.getStringProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""));
    try {
      modConfig.getStringProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getIntProperty(""String_Node_Str"") == 3);
    try {
      modConfig.getIntProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertNull(modConfig.getOptionalIntProperty(""String_Node_Str""));
    Assert.assertFalse(modConfig.getOptionalIntegerProperty(""String_Node_Str"").isPresent());
    Assert.assertTrue(modConfig.getIntProperty(""String_Node_Str"",4) == 4);
    Assert.assertFalse(modConfig.getBooleanProperty(""String_Node_Str""));
    try {
      modConfig.getBooleanProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertNull(modConfig.getOptinalBooleanProperty(""String_Node_Str""));
    Assert.assertFalse(modConfig.getOptionalBooleanProperty(""String_Node_Str"").isPresent());
    Assert.assertTrue(modConfig.getBooleanProperty(""String_Node_Str"",true));
    Assert.assertTrue(modConfig.getDoubleProperty(""String_Node_Str"") == 2.3);
    try {
      modConfig.getDoubleProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getDoubleProperty(""String_Node_Str"",4.5) == 4.5);
    Assert.assertTrue(modConfig.getClassProperty(""String_Node_Str"",List.class) == ArrayList.class);
    Assert.assertTrue(modConfig.getStringListProperty(""String_Node_Str"").equals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    Assert.assertTrue(modConfig.getStringListProperty(""String_Node_Str"").equals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
    try {
      modConfig.getStringListProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getEnumProperty(""String_Node_Str"",StandardOpenOption.class) == StandardOpenOption.APPEND);
    try {
      modConfig.getEnumProperty(""String_Node_Str"",StandardOpenOption.class);
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getEnumSetProperty(""String_Node_Str"",StandardOpenOption.class).equals(EnumSet.of(StandardOpenOption.APPEND,StandardOpenOption.CREATE)));
    try {
      modConfig.getEnumSetProperty(""String_Node_Str"",StandardOpenOption.class);
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getPathProperty(""String_Node_Str"").equals(p));
    try {
      modConfig.getPathProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
    Assert.assertTrue(modConfig.getPathListProperty(""String_Node_Str"").equals(Arrays.asList(p,p2)));
    Assert.assertTrue(modConfig.getPathListProperty(""String_Node_Str"").equals(Arrays.asList(p,p2)));
    try {
      modConfig.getPathListProperty(""String_Node_Str"");
      Assert.fail();
    }
 catch (    Exception e) {
    }
  }
 }"
38921,"@Test public void testCsv() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  TableFormatterConfig config=new TableFormatterConfig(Locale.US,';',""String_Node_Str"",true,true);
  CsvTableFormatterFactory factory=new CsvTableFormatterFactory();
  try (TableFormatter formatter=factory.create(new OutputStreamWriter(bos),""String_Node_Str"",config,COLUMNS)){
    write(formatter);
  }
   assertEquals(new String(bos.toByteArray(),StandardCharsets.UTF_8),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void testCsv() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  TableFormatterConfig config=new TableFormatterConfig(Locale.US,';',""String_Node_Str"",true,true);
  CsvTableFormatterFactory factory=new CsvTableFormatterFactory();
  try (TableFormatter formatter=factory.create(new OutputStreamWriter(bos,StandardCharsets.UTF_8),""String_Node_Str"",config,COLUMNS)){
    write(formatter);
  }
   assertEquals(new String(bos.toByteArray(),StandardCharsets.UTF_8),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}"
38922,"@Test public void testAcsii() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  TableFormatterConfig config=new TableFormatterConfig(Locale.US,""String_Node_Str"");
  AsciiTableFormatterFactory factory=new AsciiTableFormatterFactory();
  try (TableFormatter formatter=factory.create(new OutputStreamWriter(bos),""String_Node_Str"",config,COLUMNS)){
    write(formatter);
  }
   assertEquals(new String(bos.toByteArray(),StandardCharsets.UTF_8),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test public void testAcsii() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  TableFormatterConfig config=new TableFormatterConfig(Locale.US,""String_Node_Str"");
  AsciiTableFormatterFactory factory=new AsciiTableFormatterFactory();
  try (TableFormatter formatter=factory.create(new OutputStreamWriter(bos,StandardCharsets.UTF_8),""String_Node_Str"",config,COLUMNS)){
    write(formatter);
  }
   assertEquals(new String(bos.toByteArray(),StandardCharsets.UTF_8),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}"
38923,"public static Object readParameter(String format,Properties parameters,Parameter configuredParameter,ParameterDefaultValueConfig defaultValueConfig){
  Object value=null;
  if (parameters != null) {
    MapModuleConfig moduleConfig=new MapModuleConfig(parameters);
switch (configuredParameter.getType()) {
case BOOLEAN:
      value=moduleConfig.getOptinalBooleanProperty(configuredParameter.getName());
    break;
case STRING:
  value=moduleConfig.getStringProperty(configuredParameter.getName(),null);
break;
case STRING_LIST:
value=moduleConfig.getStringListProperty(configuredParameter.getName(),null);
break;
default :
throw new AssertionError();
}
}
if (value == null) {
value=defaultValueConfig.getValue(format,configuredParameter);
}
return value;
}","public static Object readParameter(String format,Properties parameters,Parameter configuredParameter,ParameterDefaultValueConfig defaultValueConfig){
  Object value=null;
  if (parameters != null) {
    MapModuleConfig moduleConfig=new MapModuleConfig(parameters);
switch (configuredParameter.getType()) {
case BOOLEAN:
      value=moduleConfig.getOptionalBooleanProperty(configuredParameter.getName()).get();
    break;
case STRING:
  value=moduleConfig.getStringProperty(configuredParameter.getName(),null);
break;
case STRING_LIST:
value=moduleConfig.getStringListProperty(configuredParameter.getName(),null);
break;
default :
throw new AssertionError();
}
}
if (value == null) {
value=defaultValueConfig.getValue(format,configuredParameter);
}
return value;
}"
38924,"public Terminal getTerminal(String voltageLevelId){
  Objects.requireNonNull(voltageLevelId);
  boolean side1=getTerminal1().getVoltageLevel().getId().equals(voltageLevelId);
  boolean side2=getTerminal2().getVoltageLevel().getId().equals(voltageLevelId);
  if (side1) {
    return getTerminal1();
  }
 else   if (side2) {
    return getTerminal2();
  }
 else   if (side1 && side2) {
    throw new RuntimeException(""String_Node_Str"" + voltageLevelId);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + voltageLevelId);
  }
}","public Terminal getTerminal(String voltageLevelId){
  Objects.requireNonNull(voltageLevelId);
  boolean side1=getTerminal1().getVoltageLevel().getId().equals(voltageLevelId);
  boolean side2=getTerminal2().getVoltageLevel().getId().equals(voltageLevelId);
  if (side1 && side2) {
    throw new RuntimeException(""String_Node_Str"" + voltageLevelId);
  }
 else   if (side1) {
    return getTerminal1();
  }
 else   if (side2) {
    return getTerminal2();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + voltageLevelId);
  }
}"
38925,"@Override public void export(Network network,Properties parameters,DataSource dataSource){
  if (network == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  XMLExportOptions options=new XMLExportOptions();
  if (parameters != null) {
    options.setIndent(!""String_Node_Str"".equals(parameters.getProperty(INDENT_PROPERTY))).setWithBranchSV(""String_Node_Str"".equals(parameters.getProperty(WITH_BRANCH_STATE_VARIABLES_PROPERTY))).setForceBusBranchTopo(""String_Node_Str"".equals(parameters.getProperty(FORCE_BUS_BRANCH_TOPO_PROPERTY,""String_Node_Str""))).setOnlyMainCc(""String_Node_Str"".equals(parameters.getProperty(ONLY_MAIN_CC_PROPERTIES))).setAnonymized(""String_Node_Str"".equals(parameters.getProperty(ANONYMISED_PROPERTIES))).setSkipExtensions(""String_Node_Str"".equals(parameters.getProperty(SKIP_EXTENSIONS_PROPERTIES)));
  }
  try {
    long startTime=System.currentTimeMillis();
    try (OutputStream os=dataSource.newOutputStream(null,""String_Node_Str"",false);BufferedOutputStream bos=new BufferedOutputStream(os)){
      Anonymizer anonymizer=NetworkXml.write(network,options,bos);
      if (anonymizer != null) {
        try (BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(""String_Node_Str"",""String_Node_Str"",false)))){
          anonymizer.write(writer);
        }
       }
    }
     LOGGER.debug(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void export(Network network,Properties parameters,DataSource dataSource){
  if (network == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  XMLExportOptions options=new XMLExportOptions();
  if (parameters != null) {
    options.setIndent(!""String_Node_Str"".equals(parameters.getProperty(INDENT_PROPERTY))).setWithBranchSV(""String_Node_Str"".equals(parameters.getProperty(WITH_BRANCH_STATE_VARIABLES_PROPERTY))).setForceBusBranchTopo(""String_Node_Str"".equals(parameters.getProperty(FORCE_BUS_BRANCH_TOPO_PROPERTY,""String_Node_Str""))).setOnlyMainCc(""String_Node_Str"".equals(parameters.getProperty(ONLY_MAIN_CC_PROPERTIES))).setAnonymized(""String_Node_Str"".equals(parameters.getProperty(ANONYMISED_PROPERTIES))).setSkipExtensions(""String_Node_Str"".equals(parameters.getProperty(SKIP_EXTENSIONS_PROPERTIES)));
  }
  try {
    long startTime=System.currentTimeMillis();
    try (OutputStream os=dataSource.newOutputStream(null,""String_Node_Str"",false);BufferedOutputStream bos=new BufferedOutputStream(os)){
      Anonymizer anonymizer=NetworkXml.write(network,options,bos);
      if (anonymizer != null) {
        try (BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(dataSource.newOutputStream(""String_Node_Str"",""String_Node_Str"",false),StandardCharsets.UTF_8))){
          anonymizer.write(writer);
        }
       }
    }
     LOGGER.debug(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
38926,"@Override public Network import_(ReadOnlyDataSource dataSource,Properties parameters){
  Objects.requireNonNull(dataSource);
  Network network;
  long startTime=System.currentTimeMillis();
  try {
    String ext=findExtension(dataSource);
    if (ext == null) {
      throw new RuntimeException(""String_Node_Str"" + dataSource.getBaseName() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(EXTENSIONS)+ ""String_Node_Str"");
    }
    boolean throwExceptionIfExtensionNotFound=(Boolean)Importers.readParameter(getFormat(),parameters,THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND,defaultValueConfig);
    Anonymizer anonymizer=null;
    if (dataSource.exists(""String_Node_Str"",""String_Node_Str"")) {
      anonymizer=new SimpleAnonymizer();
      try (BufferedReader reader=new BufferedReader(new InputStreamReader(dataSource.newInputStream(""String_Node_Str"",""String_Node_Str"")))){
        anonymizer.read(reader);
      }
     }
    try (InputStream is=dataSource.newInputStream(null,ext)){
      network=NetworkXml.read(is,new XmlImportConfig(throwExceptionIfExtensionNotFound),anonymizer);
    }
     LOGGER.debug(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  }
 catch (  IOException e) {
    throw new ITeslaException(e);
  }
  return network;
}","@Override public Network import_(ReadOnlyDataSource dataSource,Properties parameters){
  Objects.requireNonNull(dataSource);
  Network network;
  long startTime=System.currentTimeMillis();
  try {
    String ext=findExtension(dataSource);
    if (ext == null) {
      throw new RuntimeException(""String_Node_Str"" + dataSource.getBaseName() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(EXTENSIONS)+ ""String_Node_Str"");
    }
    boolean throwExceptionIfExtensionNotFound=(Boolean)Importers.readParameter(getFormat(),parameters,THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND,defaultValueConfig);
    Anonymizer anonymizer=null;
    if (dataSource.exists(""String_Node_Str"",""String_Node_Str"")) {
      anonymizer=new SimpleAnonymizer();
      try (BufferedReader reader=new BufferedReader(new InputStreamReader(dataSource.newInputStream(""String_Node_Str"",""String_Node_Str""),StandardCharsets.UTF_8))){
        anonymizer.read(reader);
      }
     }
    try (InputStream is=dataSource.newInputStream(null,ext)){
      network=NetworkXml.read(is,new XmlImportConfig(throwExceptionIfExtensionNotFound),anonymizer);
    }
     LOGGER.debug(""String_Node_Str"",(System.currentTimeMillis() - startTime));
  }
 catch (  IOException e) {
    throw new ITeslaException(e);
  }
  return network;
}"
38927,"public static int readOptionalIntegerAttribute(XMLStreamReader reader,String attributeName,int defaultValue){
  String attributeValue=reader.getAttributeValue(null,attributeName);
  return attributeValue != null ? Integer.valueOf(attributeValue) : defaultValue;
}","public static int readOptionalIntegerAttribute(XMLStreamReader reader,String attributeName,int defaultValue){
  String attributeValue=reader.getAttributeValue(null,attributeName);
  return attributeValue != null ? Integer.parseInt(attributeValue) : defaultValue;
}"
38928,"public static int readIntAttribute(XMLStreamReader reader,String attributeName){
  return Integer.valueOf(reader.getAttributeValue(null,attributeName));
}","public static int readIntAttribute(XMLStreamReader reader,String attributeName){
  return Integer.parseInt(reader.getAttributeValue(null,attributeName));
}"
38929,"@Before public void setUp() throws Exception {
  fileSystem=Jimfs.newFileSystem(Configuration.unix());
  configDir=Files.createDirectory(fileSystem.getPath(""String_Node_Str""));
  platformConfig=new InMemoryPlatformConfig(fileSystem);
  moduleConfig=platformConfig.createModuleConfig(""String_Node_Str"");
  moduleConfig.setStringListProperty(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  moduleConfig.setStringProperty(""String_Node_Str"",""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  fileSystem=Jimfs.newFileSystem(Configuration.unix());
  platformConfig=new InMemoryPlatformConfig(fileSystem);
  moduleConfig=platformConfig.createModuleConfig(""String_Node_Str"");
  moduleConfig.setStringListProperty(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  moduleConfig.setStringProperty(""String_Node_Str"",""String_Node_Str"");
}"
38930,"@Deprecated default void run(CommandLine line) throws Exception {
  run(line,new ToolRunningContext());
}","@Deprecated default void run(CommandLine line) throws Exception {
}"
38931,"@Override public void createRecord(ModExportContext modContext,DDBManager ddbManager,SimulatorInst simulator){
  if (!Float.isNaN(this.busInfo.getBus().getV()) && this.busInfo.isConnected()) {
    if (super.isCorrect()) {
      if (!busInfo.isConnected()) {
        this.addValue(StaticData.COMMENT);
      }
      if (super.getModelicaType() != null) {
        this.addValue(super.getModelicaType() + StaticData.WHITE_SPACE);
      }
 else {
        if (!isInyection) {
          this.addValue(DEFAULT_GEN_TYPE + StaticData.WHITE_SPACE);
        }
 else {
          this.addValue(DEFAULT_GEN_LOAD_TYPE + StaticData.WHITE_SPACE);
        }
      }
      this.addValue(super.getModelicaName());
      this.addValue(""String_Node_Str"");
      this.addValue(StaticData.NEW_LINE);
      if ((iidmgenParameters != null) && (!iidmgenParameters.isEmpty())) {
        for (int i=0; i < iidmgenParameters.size() - 1; i++) {
          if (!busInfo.isConnected()) {
            this.addValue(StaticData.COMMENT);
          }
          if (iidmgenParameters.get(i).getName().equals(PsseFixedData.Mbase) && this.changedMbse) {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(i).getName() + ""String_Node_Str""+ iidmgenParameters.get(i).getValue()+ ""String_Node_Str"");
          }
 else {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(i).getName() + ""String_Node_Str""+ iidmgenParameters.get(i).getValue()+ ""String_Node_Str"");
          }
          this.addValue(StaticData.NEW_LINE);
        }
        if (!busInfo.isConnected()) {
          this.addValue(StaticData.COMMENT);
        }
        if (isInyection) {
          this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue());
        }
 else         if ((genParameters != null) && (!genParameters.isEmpty())) {
          if (iidmgenParameters.get(iidmgenParameters.size() - 1).getName().equals(PsseFixedData.Mbase) && this.changedMbse) {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue()+ ""String_Node_Str"");
          }
 else {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue()+ ""String_Node_Str"");
          }
        }
        this.addValue(StaticData.NEW_LINE);
      }
      if (!isInyection) {
        if ((genParameters != null) && (!genParameters.isEmpty())) {
          for (int i=0; i < genParameters.size() - 1; i++) {
            if (!busInfo.isConnected()) {
              this.addValue(StaticData.COMMENT);
            }
            this.addValue(""String_Node_Str"" + genParameters.get(i).getName() + ""String_Node_Str""+ genParameters.get(i).getValue()+ ""String_Node_Str"");
            this.addValue(StaticData.NEW_LINE);
          }
          if (!busInfo.isConnected()) {
            this.addValue(StaticData.COMMENT);
          }
          this.addValue(""String_Node_Str"" + genParameters.get(genParameters.size() - 1).getName() + ""String_Node_Str""+ genParameters.get(genParameters.size() - 1).getValue());
          this.addValue(StaticData.NEW_LINE);
        }
      }
      if (!this.busInfo.isConnected()) {
        his.addValue(StaticData.COMMENT);
      }
      this.addValue(""String_Node_Str"" + EurostagFixedData.ANNOT);
      genParameters=null;
      iidmgenParameters=null;
    }
 else {
      _log.error(this.getModelicaName() + ""String_Node_Str"");
    }
  }
 else {
    _log.warn(""String_Node_Str"" + this.getModelicaName() + ""String_Node_Str"");
    this.addValue(StaticData.COMMENT + ""String_Node_Str"" + this.getModelicaName()+ ""String_Node_Str"");
  }
}","@Override public void createRecord(ModExportContext modContext,DDBManager ddbManager,SimulatorInst simulator){
  if (!Float.isNaN(this.busInfo.getBus().getV()) && this.busInfo.isConnected()) {
    if (super.isCorrect()) {
      if (!busInfo.isConnected()) {
        this.addValue(StaticData.COMMENT);
      }
      if (super.getModelicaType() != null) {
        this.addValue(super.getModelicaType() + StaticData.WHITE_SPACE);
      }
 else {
        if (!isInyection) {
          this.addValue(DEFAULT_GEN_TYPE + StaticData.WHITE_SPACE);
        }
 else {
          this.addValue(DEFAULT_GEN_LOAD_TYPE + StaticData.WHITE_SPACE);
        }
      }
      this.addValue(super.getModelicaName());
      this.addValue(""String_Node_Str"");
      this.addValue(StaticData.NEW_LINE);
      if ((iidmgenParameters != null) && (!iidmgenParameters.isEmpty())) {
        for (int i=0; i < iidmgenParameters.size() - 1; i++) {
          if (!busInfo.isConnected()) {
            this.addValue(StaticData.COMMENT);
          }
          if (iidmgenParameters.get(i).getName().equals(PsseFixedData.Mbase) && this.changedMbse) {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(i).getName() + ""String_Node_Str""+ iidmgenParameters.get(i).getValue()+ ""String_Node_Str"");
          }
 else {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(i).getName() + ""String_Node_Str""+ iidmgenParameters.get(i).getValue()+ ""String_Node_Str"");
          }
          this.addValue(StaticData.NEW_LINE);
        }
        if (!busInfo.isConnected()) {
          this.addValue(StaticData.COMMENT);
        }
        if (isInyection) {
          this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue());
        }
 else         if ((genParameters != null) && (!genParameters.isEmpty())) {
          if (iidmgenParameters.get(iidmgenParameters.size() - 1).getName().equals(PsseFixedData.Mbase) && this.changedMbse) {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue()+ ""String_Node_Str"");
          }
 else {
            this.addValue(""String_Node_Str"" + iidmgenParameters.get(iidmgenParameters.size() - 1).getName() + ""String_Node_Str""+ iidmgenParameters.get(iidmgenParameters.size() - 1).getValue()+ ""String_Node_Str"");
          }
        }
        this.addValue(StaticData.NEW_LINE);
      }
      if (!isInyection) {
        if ((genParameters != null) && (!genParameters.isEmpty())) {
          for (int i=0; i < genParameters.size() - 1; i++) {
            if (!busInfo.isConnected()) {
              this.addValue(StaticData.COMMENT);
            }
            this.addValue(""String_Node_Str"" + genParameters.get(i).getName() + ""String_Node_Str""+ genParameters.get(i).getValue()+ ""String_Node_Str"");
            this.addValue(StaticData.NEW_LINE);
          }
          if (!busInfo.isConnected()) {
            this.addValue(StaticData.COMMENT);
          }
          this.addValue(""String_Node_Str"" + genParameters.get(genParameters.size() - 1).getName() + ""String_Node_Str""+ genParameters.get(genParameters.size() - 1).getValue());
          this.addValue(StaticData.NEW_LINE);
        }
      }
      if (!this.busInfo.isConnected()) {
        this.addValue(StaticData.COMMENT);
      }
      this.addValue(""String_Node_Str"" + EurostagFixedData.ANNOT);
      genParameters=null;
      iidmgenParameters=null;
    }
 else {
      _log.error(this.getModelicaName() + ""String_Node_Str"");
    }
  }
 else {
    _log.warn(""String_Node_Str"" + this.getModelicaName() + ""String_Node_Str"");
    this.addValue(StaticData.COMMENT + ""String_Node_Str"" + this.getModelicaName()+ ""String_Node_Str"");
  }
}"
38932,"public static Network read(InputStream is) throws XMLStreamException {
  XMLStreamReader reader=XML_INPUT_FACTORY_SUPPLIER.get().createXMLStreamReader(is);
  reader.next();
  String id=reader.getAttributeValue(null,""String_Node_Str"");
  DateTime date=ISODateTimeFormat.dateTime().parseDateTime(reader.getAttributeValue(null,""String_Node_Str""));
  String sourceFormat=reader.getAttributeValue(null,""String_Node_Str"");
  Network network=NetworkFactory.create(id,sourceFormat);
  network.setDate(date);
  List<Runnable> endTasks=new ArrayList<>();
  XmlUtil.readUntilEndElement(NETWORK_ROOT_ELEMENT_NAME,reader,() -> {
switch (reader.getLocalName()) {
case SubstationXml.ROOT_ELEMENT_NAME:
      SubstationXml.INSTANCE.read(reader,network,endTasks);
    break;
case LineXml.ROOT_ELEMENT_NAME:
  LineXml.INSTANCE.read(reader,network,endTasks);
break;
case TieLineXml.ROOT_ELEMENT_NAME:
TieLineXml.INSTANCE.read(reader,network,endTasks);
break;
default :
throw new AssertionError();
}
}
);
endTasks.forEach(Runnable::run);
return network;
}","public static Network read(InputStream is) throws XMLStreamException {
  XMLStreamReader reader=XML_INPUT_FACTORY_SUPPLIER.get().createXMLStreamReader(is);
  reader.next();
  String id=reader.getAttributeValue(null,""String_Node_Str"");
  DateTime date=DateTime.parse(reader.getAttributeValue(null,""String_Node_Str""));
  String sourceFormat=reader.getAttributeValue(null,""String_Node_Str"");
  Network network=NetworkFactory.create(id,sourceFormat);
  network.setDate(date);
  List<Runnable> endTasks=new ArrayList<>();
  XmlUtil.readUntilEndElement(NETWORK_ROOT_ELEMENT_NAME,reader,() -> {
switch (reader.getLocalName()) {
case SubstationXml.ROOT_ELEMENT_NAME:
      SubstationXml.INSTANCE.read(reader,network,endTasks);
    break;
case LineXml.ROOT_ELEMENT_NAME:
  LineXml.INSTANCE.read(reader,network,endTasks);
break;
case TieLineXml.ROOT_ELEMENT_NAME:
TieLineXml.INSTANCE.read(reader,network,endTasks);
break;
default :
throw new AssertionError();
}
}
);
endTasks.forEach(Runnable::run);
return network;
}"
38933,"public static void write(Network n,XMLExportOptions options,OutputStream os) throws XMLStreamException {
  XMLStreamWriter writer=XML_OUTPUT_FACTORY_SUPPLIER.get().createXMLStreamWriter(os,StandardCharsets.UTF_8.toString());
  if (options.isIndent()) {
    IndentingXMLStreamWriter indentingWriter=new IndentingXMLStreamWriter(writer);
    indentingWriter.setIndent(INDENT);
    writer=indentingWriter;
  }
  writer.writeStartDocument(StandardCharsets.UTF_8.toString(),""String_Node_Str"");
  writer.setPrefix(IIDM_PREFIX,IIDM_URI);
  writer.writeStartElement(IIDM_URI,NETWORK_ROOT_ELEMENT_NAME);
  writer.writeNamespace(IIDM_PREFIX,IIDM_URI);
  writer.writeAttribute(""String_Node_Str"",n.getId());
  writer.writeAttribute(""String_Node_Str"",n.getDate().toString(ISODateTimeFormat.dateTime()));
  writer.writeAttribute(""String_Node_Str"",n.getSourceFormat());
  BusFilter filter=BusFilter.create(n,options);
  XmlWriterContext context=new XmlWriterContext(writer,options,filter);
  for (  Substation s : n.getSubstations()) {
    SubstationXml.INSTANCE.write(s,null,context);
  }
  for (  Line l : n.getLines()) {
    if (!filter.test(l)) {
      continue;
    }
    if (l.isTieLine()) {
      TieLineXml.INSTANCE.write((TieLine)l,n,context);
    }
 else {
      LineXml.INSTANCE.write(l,n,context);
    }
  }
  writer.writeEndElement();
  writer.writeEndDocument();
}","public static void write(Network n,XMLExportOptions options,OutputStream os) throws XMLStreamException {
  XMLStreamWriter writer=XML_OUTPUT_FACTORY_SUPPLIER.get().createXMLStreamWriter(os,StandardCharsets.UTF_8.toString());
  if (options.isIndent()) {
    IndentingXMLStreamWriter indentingWriter=new IndentingXMLStreamWriter(writer);
    indentingWriter.setIndent(INDENT);
    writer=indentingWriter;
  }
  writer.writeStartDocument(StandardCharsets.UTF_8.toString(),""String_Node_Str"");
  writer.setPrefix(IIDM_PREFIX,IIDM_URI);
  writer.writeStartElement(IIDM_URI,NETWORK_ROOT_ELEMENT_NAME);
  writer.writeNamespace(IIDM_PREFIX,IIDM_URI);
  writer.writeAttribute(""String_Node_Str"",n.getId());
  writer.writeAttribute(""String_Node_Str"",n.getDate().toString());
  writer.writeAttribute(""String_Node_Str"",n.getSourceFormat());
  BusFilter filter=BusFilter.create(n,options);
  XmlWriterContext context=new XmlWriterContext(writer,options,filter);
  for (  Substation s : n.getSubstations()) {
    SubstationXml.INSTANCE.write(s,null,context);
  }
  for (  Line l : n.getLines()) {
    if (!filter.test(l)) {
      continue;
    }
    if (l.isTieLine()) {
      TieLineXml.INSTANCE.write((TieLine)l,n,context);
    }
 else {
      LineXml.INSTANCE.write(l,n,context);
    }
  }
  writer.writeEndElement();
  writer.writeEndDocument();
}"
38934,"@Override protected void writeRootElementAttributes(VoltageLevel vl,Substation s,XmlWriterContext context) throws XMLStreamException {
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getDate().toString(ISODateTimeFormat.dateTime()));
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getHorizon().name());
  context.getWriter().writeAttribute(""String_Node_Str"",Integer.toString(vl.getForecastDistance()));
  writeFloat(""String_Node_Str"",vl.getNominalV(),context.getWriter());
  writeFloat(""String_Node_Str"",vl.getLowVoltageLimit(),context.getWriter());
  writeFloat(""String_Node_Str"",vl.getHighVoltageLimit(),context.getWriter());
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getTopologyKind().name());
}","@Override protected void writeRootElementAttributes(VoltageLevel vl,Substation s,XmlWriterContext context) throws XMLStreamException {
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getDate().toString());
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getHorizon().name());
  context.getWriter().writeAttribute(""String_Node_Str"",Integer.toString(vl.getForecastDistance()));
  writeFloat(""String_Node_Str"",vl.getNominalV(),context.getWriter());
  writeFloat(""String_Node_Str"",vl.getLowVoltageLimit(),context.getWriter());
  writeFloat(""String_Node_Str"",vl.getHighVoltageLimit(),context.getWriter());
  context.getWriter().writeAttribute(""String_Node_Str"",vl.getTopologyKind().name());
}"
38935,"@Override protected VoltageLevel readRootElementAttributes(VoltageLevelAdder adder,XMLStreamReader reader,List<Runnable> endTasks){
  DateTime date=ISODateTimeFormat.dateTime().parseDateTime(reader.getAttributeValue(null,""String_Node_Str""));
  Horizon horizon=Horizon.valueOf(reader.getAttributeValue(null,""String_Node_Str""));
  int forecastDistance=readIntAttribute(reader,""String_Node_Str"");
  float nominalV=readFloatAttribute(reader,""String_Node_Str"");
  float lowVoltageLimit=readOptionalFloatAttribute(reader,""String_Node_Str"");
  float highVoltageLimit=readOptionalFloatAttribute(reader,""String_Node_Str"");
  TopologyKind topologyKind=TopologyKind.valueOf(reader.getAttributeValue(null,""String_Node_Str""));
  return adder.setDate(date).setHorizon(horizon).setForecastDistance(forecastDistance).setNominalV(nominalV).setLowVoltageLimit(lowVoltageLimit).setHighVoltageLimit(highVoltageLimit).setTopologyKind(topologyKind).add();
}","@Override protected VoltageLevel readRootElementAttributes(VoltageLevelAdder adder,XMLStreamReader reader,List<Runnable> endTasks){
  DateTime date=DateTime.parse(reader.getAttributeValue(null,""String_Node_Str""));
  Horizon horizon=Horizon.valueOf(reader.getAttributeValue(null,""String_Node_Str""));
  int forecastDistance=readIntAttribute(reader,""String_Node_Str"");
  float nominalV=readFloatAttribute(reader,""String_Node_Str"");
  float lowVoltageLimit=readOptionalFloatAttribute(reader,""String_Node_Str"");
  float highVoltageLimit=readOptionalFloatAttribute(reader,""String_Node_Str"");
  TopologyKind topologyKind=TopologyKind.valueOf(reader.getAttributeValue(null,""String_Node_Str""));
  return adder.setDate(date).setHorizon(horizon).setForecastDistance(forecastDistance).setNominalV(nominalV).setLowVoltageLimit(lowVoltageLimit).setHighVoltageLimit(highVoltageLimit).setTopologyKind(topologyKind).add();
}"
38936,"@Override public void onDetached(){
  super.onDetached();
  RemotePreferenceManager.get(mContext).detach(getKey());
}","@Override public void onDetached(){
  super.onDetached();
  RemotePreferenceManager.get(mContext).detach(getKey(),this);
}"
38937,"public synchronized static RemotePreferenceManager get(Context context){
  if (sInstance == null) {
    sInstance=new RemotePreferenceManager(context);
  }
  return sInstance;
}","public synchronized static RemotePreferenceManager get(Context context){
  if (sInstance == null) {
    sInstance=new RemotePreferenceManager(context.getApplicationContext());
  }
  return sInstance;
}"
38938,"public void detach(String key){
synchronized (mCallbacks) {
    if (mCallbacks.remove(key) != null && mCallbacks.size() == 0) {
      mContext.unregisterReceiver(mListener);
      if (mThread != null) {
        mThread.quit();
      }
    }
  }
}","public void detach(String key,OnRemoteUpdateListener pref){
synchronized (mCallbacks) {
    Set<OnRemoteUpdateListener> cbs=mCallbacks.get(key);
    if (cbs != null && cbs.remove(pref) && cbs.isEmpty() && mCallbacks.remove(key) != null && mCallbacks.isEmpty()) {
      mContext.unregisterReceiver(mListener);
      if (mThread != null) {
        mThread.quit();
        mThread=null;
      }
      mHandler=null;
    }
  }
}"
38939,"@Override public void run(){
synchronized (mCallbacks) {
    if (mCallbacks.containsKey(key)) {
      mCallbacks.get(key).onRemoteUpdated(bundle);
    }
  }
}","@Override public void run(){
synchronized (mCallbacks) {
    if (mCallbacks.containsKey(key)) {
      Set<OnRemoteUpdateListener> cbs=mCallbacks.get(key);
      if (cbs != null) {
        for (        OnRemoteUpdateListener cb : cbs) {
          cb.onRemoteUpdated(bundle);
        }
      }
    }
  }
}"
38940,"public void attach(String key,OnRemoteUpdateListener pref){
  Intent i;
synchronized (mCache) {
    i=mCache.get(key);
    if (i == null && !mCache.containsKey(key)) {
      i=pref.getReceiverIntent();
      mCache.put(key,i);
    }
  }
synchronized (mCallbacks) {
    if (i != null) {
      mCallbacks.put(key,pref);
      if (mCallbacks.size() == 1) {
        mThread=new HandlerThread(""String_Node_Str"");
        mThread.start();
        mHandler=new Handler(mThread.getLooper());
        mContext.registerReceiver(mListener,new IntentFilter(ACTION_REFRESH_PREFERENCE),Manifest.permission.MANAGE_REMOTE_PREFERENCES,mHandler);
      }
      requestUpdate(key);
    }
  }
}","public void attach(String key,OnRemoteUpdateListener pref){
  Intent i;
synchronized (mCache) {
    i=mCache.get(key);
    if (i == null && !mCache.containsKey(key)) {
      i=pref.getReceiverIntent();
      mCache.put(key,i);
    }
  }
synchronized (mCallbacks) {
    if (i != null) {
      Set<OnRemoteUpdateListener> cbs=mCallbacks.get(key);
      if (cbs == null) {
        cbs=new HashSet<>();
        mCallbacks.put(key,cbs);
        if (mCallbacks.size() == 1) {
          mThread=new HandlerThread(""String_Node_Str"");
          mThread.start();
          mHandler=new Handler(mThread.getLooper());
          mContext.registerReceiver(mListener,new IntentFilter(ACTION_REFRESH_PREFERENCE),Manifest.permission.MANAGE_REMOTE_PREFERENCES,mHandler);
        }
      }
      cbs.add(pref);
      requestUpdate(key);
    }
  }
}"
38941,"@Override public void onReceive(Context context,Intent intent){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Objects.toString(intent));
  if (ACTION_REFRESH_PREFERENCE.equals(intent.getAction())) {
    final String key=intent.getStringExtra(EXTRA_KEY);
synchronized (mCallbacks) {
      if (key != null && mCallbacks.containsKey(key)) {
        requestUpdate(key);
      }
    }
  }
 else   if (ACTION_UPDATE_PREFERENCE.equals(intent.getAction())) {
    if (getAbortBroadcast()) {
      Log.e(TAG,""String_Node_Str"" + getResultCode());
      return;
    }
    final Bundle bundle=getResultExtras(true);
    final String key=bundle.getString(EXTRA_KEY);
synchronized (mCallbacks) {
      if (key != null && mCallbacks.containsKey(key)) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
synchronized (mCallbacks) {
              if (mCallbacks.containsKey(key)) {
                mCallbacks.get(key).onRemoteUpdated(bundle);
              }
            }
          }
        }
);
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Objects.toString(intent));
  if (ACTION_REFRESH_PREFERENCE.equals(intent.getAction())) {
    final String key=intent.getStringExtra(EXTRA_KEY);
synchronized (mCallbacks) {
      if (key != null && mCallbacks.containsKey(key)) {
        requestUpdate(key);
      }
    }
  }
 else   if (ACTION_UPDATE_PREFERENCE.equals(intent.getAction())) {
    if (getAbortBroadcast()) {
      Log.e(TAG,""String_Node_Str"" + getResultCode());
      return;
    }
    final Bundle bundle=getResultExtras(true);
    final String key=bundle.getString(EXTRA_KEY);
synchronized (mCallbacks) {
      if (key != null && mCallbacks.containsKey(key)) {
        mMainHandler.post(new Runnable(){
          @Override public void run(){
synchronized (mCallbacks) {
              if (mCallbacks.containsKey(key)) {
                Set<OnRemoteUpdateListener> cbs=mCallbacks.get(key);
                if (cbs != null) {
                  for (                  OnRemoteUpdateListener cb : cbs) {
                    cb.onRemoteUpdated(bundle);
                  }
                }
              }
            }
          }
        }
);
      }
    }
  }
}"
38942,"@Override protected void onTwilightUpdated(){
  mHandler.post(mTransitionRunnable);
}","@Override protected void onTwilightUpdated(){
  updateColorTemperature();
}"
38943,"@Override protected void onScreenStateChanged(){
  if (isTransitioning()) {
    if (isScreenOn()) {
      mHandler.post(mTransitionRunnable);
    }
 else {
      mHandler.removeCallbacks(mTransitionRunnable);
    }
  }
}","@Override protected void onScreenStateChanged(){
  updateColorTemperature();
}"
38944,"private void enableLightSensor(boolean enable){
  if (enable && !mLightSensorEnabled) {
    mAmbientLux=0.0f;
    mState=LOW;
    mLightSensorEnabled=true;
    mRingBuffer.clear();
    mSensorManager.registerListener(mListener,mLightSensor,mLightSensorRate * 1000,mLuxHandler);
  }
 else   if (!enable && mLightSensorEnabled) {
    mLightSensorEnabled=false;
    mSensorManager.unregisterListener(mListener);
    mLuxHandler.clear();
  }
}","private void enableLightSensor(boolean enable){
  if (enable && !mLightSensorEnabled) {
    mLightSensorEnabled=true;
    mSensorManager.registerListener(mListener,mLightSensor,mLightSensorRate * 1000,mLuxHandler);
  }
 else   if (!enable && mLightSensorEnabled) {
    mSensorManager.unregisterListener(mListener);
    mLuxHandler.clear();
    mAmbientLux=0.0f;
    mState=LOW;
    mLightSensorEnabled=false;
    mRingBuffer.clear();
  }
}"
38945,"@Override public void onTwilightUpdated(TwilightState twilight){
  super.onTwilightUpdated(twilight);
  mHandler.post(mTransitionRunnable);
}","@Override protected void onTwilightUpdated(){
  mHandler.post(mTransitionRunnable);
}"
38946,"/** 
 * Where is the sun anyway? This calculation determines day or night, and scales the value around sunset/sunrise for a smooth transition.
 * @param now
 * @param sunset
 * @param sunrise
 * @return float between 0 and 1
 */
private static float adj(long now,long sunset,long sunrise){
  if (sunset < 0 || sunrise < 0 || now < sunset || now > sunrise) {
    return 1.0f;
  }
  if (now < sunset + TWILIGHT_ADJUSTMENT_TIME) {
    return MathUtils.lerp(1.0f,0.0f,(float)(now - sunset) / TWILIGHT_ADJUSTMENT_TIME);
  }
  if (now > sunrise - TWILIGHT_ADJUSTMENT_TIME) {
    return MathUtils.lerp(1.0f,0.0f,(float)(sunrise - now) / TWILIGHT_ADJUSTMENT_TIME);
  }
  return 0.0f;
}","/** 
 * Where is the sun anyway? This calculation determines day or night, and scales the value around sunset/sunrise for a smooth transition.
 * @param now
 * @param sunset
 * @param sunrise
 * @return float between 0 and 1
 */
private static float adj(long now,long sunset,long sunrise){
  if (sunset < 0 || sunrise < 0 || now < sunset || now > (sunrise + TWILIGHT_ADJUSTMENT_TIME)) {
    return 1.0f;
  }
  if (now <= (sunset + TWILIGHT_ADJUSTMENT_TIME)) {
    return MathUtils.lerp(1.0f,0.0f,(float)(now - sunset) / TWILIGHT_ADJUSTMENT_TIME);
  }
  if (now >= sunrise) {
    return MathUtils.lerp(1.0f,0.0f,(float)((sunrise + TWILIGHT_ADJUSTMENT_TIME) - now) / TWILIGHT_ADJUSTMENT_TIME);
  }
  return 0.0f;
}"
38947,"private void updateColorTemperature(){
  mHandler.removeCallbacks(mTransitionRunnable);
  int temperature=mDayTemperature;
  int mode=getMode();
  if (mode == MODE_OFF || isLowPowerMode()) {
    temperature=OFF_TEMPERATURE;
  }
 else   if (mode == MODE_NIGHT) {
    temperature=mNightTemperature;
  }
 else   if (mode == MODE_AUTO) {
    temperature=getTwilightK();
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + mode + ""String_Node_Str""+ temperature+ ""String_Node_Str""+ mColorTemperature);
  }
  if (mAnimator != null) {
    mAnimator.cancel();
    mAnimator.removeAllUpdateListeners();
  }
  mAnimator=ValueAnimator.ofInt(mColorTemperature,temperature);
  mAnimator.setDuration(Math.abs(mColorTemperature - temperature) / 2);
  mAnimator.addUpdateListener(new AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    final ValueAnimator animation){
      mHandler.post(new Runnable(){
        @Override public void run(){
          setDisplayTemperature((Integer)animation.getAnimatedValue());
        }
      }
);
    }
  }
);
  mAnimator.start();
}","private synchronized void updateColorTemperature(){
  if (!mUseTemperatureAdjustment || !isScreenOn()) {
    return;
  }
  int temperature=mDayTemperature;
  int mode=getMode();
  if (mode == MODE_OFF || isLowPowerMode()) {
    temperature=mDefaultDayTemperature;
  }
 else   if (mode == MODE_NIGHT) {
    temperature=mNightTemperature;
  }
 else   if (mode == MODE_AUTO) {
    temperature=getTwilightK();
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + mode + ""String_Node_Str""+ temperature+ ""String_Node_Str""+ mColorTemperature);
  }
  setDisplayTemperature(temperature);
}"
38948,"@Override public void run(){
  setDisplayTemperature((Integer)animation.getAnimatedValue());
}","@Override public void run(){
synchronized (ColorTemperatureController.this) {
    updateColorTemperature();
    mTransitioning=getMode() == MODE_AUTO && mColorTemperature != mDayTemperature && mColorTemperature != mNightTemperature;
    if (mTransitioning) {
      mHandler.postDelayed(mTransitionRunnable,DateUtils.MINUTE_IN_MILLIS);
    }
  }
}"
38949,"void getCapabilities(final BitSet caps){
  if (mUseTemperatureAdjustment) {
    caps.set(MODE_AUTO);
    caps.set(MODE_DAY);
    caps.set(MODE_NIGHT);
  }
}","@Override public boolean getCapabilities(final BitSet caps){
  if (mUseTemperatureAdjustment) {
    caps.set(MODE_AUTO);
    caps.set(MODE_DAY);
    caps.set(MODE_NIGHT);
  }
  return mUseTemperatureAdjustment;
}"
38950,"private synchronized void setDisplayTemperature(int temperature){
  mColorTemperature=temperature;
  final float[] rgb=ColorUtils.temperatureToRGB(temperature);
  mDisplayHardware.setAdditionalAdjustment(rgb);
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + temperature + ""String_Node_Str"");
  }
}","private synchronized void setDisplayTemperature(int temperature){
  mColorTemperature=temperature;
  final float[] rgb=ColorUtils.temperatureToRGB(temperature);
  if (mDisplayHardware.setAdditionalAdjustment(rgb)) {
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + temperature + ""String_Node_Str"");
    }
  }
}"
38951,"@Override public boolean onStart(){
  if (!mDisplayHardware.hasColorAdjustment()) {
    return false;
  }
  mUseTemperatureAdjustment=true;
  mDefaultDayTemperature=mContext.getResources().getInteger(org.cyanogenmod.platform.internal.R.integer.config_dayColorTemperature);
  mDefaultNightTemperature=mContext.getResources().getInteger(org.cyanogenmod.platform.internal.R.integer.config_nightColorTemperature);
  registerSettings(CMSettings.System.getUriFor(CMSettings.System.DISPLAY_TEMPERATURE_DAY),CMSettings.System.getUriFor(CMSettings.System.DISPLAY_TEMPERATURE_NIGHT));
  return true;
}","@Override public void onStart(){
  if (!mUseTemperatureAdjustment) {
    return;
  }
  mDayTemperature=getDayColorTemperature();
  mNightTemperature=getNightColorTemperature();
  registerSettings(DISPLAY_TEMPERATURE_DAY,DISPLAY_TEMPERATURE_NIGHT);
}"
38952,"@Override public synchronized void onSettingsChanged(Uri uri){
  mDayTemperature=getDayColorTemperature();
  mNightTemperature=getNightColorTemperature();
  updateColorTemperature();
}","@Override protected synchronized void onSettingsChanged(Uri uri){
  if (uri == null || uri.equals(DISPLAY_TEMPERATURE_DAY)) {
    mDayTemperature=getDayColorTemperature();
  }
  if (uri == null || uri.equals(DISPLAY_TEMPERATURE_NIGHT)) {
    mNightTemperature=getNightColorTemperature();
  }
  updateColorTemperature();
}"
38953,"public ColorTemperatureController(Context context,Handler handler,DisplayHardwareController displayHardware){
  super(context,handler);
  mDisplayHardware=displayHardware;
}","public ColorTemperatureController(Context context,Handler handler,DisplayHardwareController displayHardware){
  super(context,handler);
  mDisplayHardware=displayHardware;
  mUseTemperatureAdjustment=mDisplayHardware.hasColorAdjustment();
  mDefaultDayTemperature=mContext.getResources().getInteger(org.cyanogenmod.platform.internal.R.integer.config_dayColorTemperature);
  mDefaultNightTemperature=mContext.getResources().getInteger(org.cyanogenmod.platform.internal.R.integer.config_nightColorTemperature);
}"
38954,"@Override public void dump(PrintWriter pw){
  pw.println();
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + mDayTemperature);
  pw.println(""String_Node_Str"" + mNightTemperature);
  pw.println();
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + mColorTemperature);
  if (getTwilight() != null) {
    pw.println(""String_Node_Str"" + getTwilight().toString());
  }
  pw.println(""String_Node_Str"" + mHandler.hasCallbacks(mTransitionRunnable));
}","@Override public void dump(PrintWriter pw){
  pw.println();
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + mDayTemperature);
  pw.println(""String_Node_Str"" + mNightTemperature);
  pw.println();
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + mColorTemperature);
  pw.println(""String_Node_Str"" + mTransitioning);
}"
38955,"/** 
 * @hide to prevent subclassing from outside of the framework
 */
private LiveDisplayManager(Context context){
  Context appContext=context.getApplicationContext();
  if (appContext != null) {
    mContext=appContext;
  }
 else {
    mContext=context;
  }
  sService=getService();
  if (context.getPackageManager().hasSystemFeature(CMContextConstants.Features.LIVEDISPLAY) && !checkService()) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    mConfig=sService.getConfig();
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * @hide to prevent subclassing from outside of the framework
 */
private LiveDisplayManager(Context context){
  Context appContext=context.getApplicationContext();
  if (appContext != null) {
    mContext=appContext;
  }
 else {
    mContext=context;
  }
  sService=getService();
  if (!context.getPackageManager().hasSystemFeature(CMContextConstants.Features.LIVEDISPLAY) || !checkService()) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    mConfig=sService.getConfig();
    if (mConfig == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
38956,"private synchronized void updateColorAdjustment(){
  if (!mUseColorAdjustment) {
    return;
  }
  final float[] rgb=getDefaultAdjustment();
  if (!isLowPowerMode()) {
    System.arraycopy(mAdditionalAdjustment,0,rgb,0,3);
    rgb[0]*=mColorAdjustment[0];
    rgb[1]*=mColorAdjustment[1];
    rgb[2]*=mColorAdjustment[2];
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(rgb));
  }
  if (validateColors(rgb)) {
    animateDisplayColor(rgb);
  }
}","private synchronized void updateColorAdjustment(){
  if (!mUseColorAdjustment) {
    return;
  }
  final float[] rgb=getDefaultAdjustment();
  if (!isLowPowerMode()) {
    copyColors(mColorAdjustment,rgb);
    rgb[0]*=mAdditionalAdjustment[0];
    rgb[1]*=mAdditionalAdjustment[1];
    rgb[2]*=mAdditionalAdjustment[2];
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(rgb));
  }
  if (validateColors(rgb)) {
    animateDisplayColor(rgb);
  }
}"
38957,"@Override public synchronized void onSettingsChanged(Uri uri){
  if (uri == null || uri.equals(DISPLAY_CABC)) {
    updateCABCMode();
  }
  if (uri == null || uri.equals(DISPLAY_AUTO_CONTRAST)) {
    updateAutoContrast();
  }
  if (uri == null || uri.equals(DISPLAY_COLOR_ENHANCE)) {
    updateColorEnhancement();
  }
  if (uri == null || uri.equals(DISPLAY_COLOR_ADJUSTMENT) && parseColorAdjustment(getString(CMSettings.System.DISPLAY_COLOR_ADJUSTMENT),mColorAdjustment)) {
    updateColorAdjustment();
  }
}","@Override public synchronized void onSettingsChanged(Uri uri){
  if (uri == null || uri.equals(DISPLAY_CABC)) {
    updateCABCMode();
  }
  if (uri == null || uri.equals(DISPLAY_AUTO_CONTRAST)) {
    updateAutoContrast();
  }
  if (uri == null || uri.equals(DISPLAY_COLOR_ENHANCE)) {
    updateColorEnhancement();
  }
  if (uri == null || uri.equals(DISPLAY_COLOR_ADJUSTMENT)) {
    copyColors(getColorAdjustment(),mColorAdjustment);
    updateColorAdjustment();
  }
}"
38958,"/** 
 * Ensure all values are within range
 * @param colors
 * @return true if valid
 */
private boolean validateColors(float[] colors){
  if (colors != null && colors.length == 3 && !(colors[0] <= 0.0f && colors[1] <= 0.0f && colors[2] <= 0.0f)) {
    for (int i=0; i < 3; i++) {
      if (colors[i] > 1.0f) {
        colors[i]=1.0f;
      }
    }
    return true;
  }
  colors[0]=1.0f;
  colors[1]=1.0f;
  colors[2]=1.0f;
  return false;
}","/** 
 * Ensure all values are within range
 * @param colors
 * @return true if valid
 */
private boolean validateColors(float[] colors){
  if (colors == null || colors.length != 3) {
    return false;
  }
  for (int i=0; i < 3; i++) {
    colors[i]=MathUtils.constrain(colors[i],0.0f,1.0f);
  }
  return true;
}"
38959,"/** 
 * Additional adjustments provided by night mode
 * @param adj
 */
synchronized boolean setAdditionalAdjustment(float[] adj){
  if (!mUseColorAdjustment) {
    return false;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(adj));
  }
  if (validateColors(adj)) {
    System.arraycopy(adj,0,mAdditionalAdjustment,0,3);
    updateColorAdjustment();
    return true;
  }
  return false;
}","/** 
 * Additional adjustments provided by night mode
 * @param adj
 */
synchronized boolean setAdditionalAdjustment(float[] adj){
  if (!mUseColorAdjustment) {
    return false;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(adj));
  }
  if (validateColors(adj)) {
    copyColors(adj,mAdditionalAdjustment);
    updateColorAdjustment();
    return true;
  }
  return false;
}"
38960,"/** 
 * Smoothly animate the current display colors to the new value.
 */
private synchronized void animateDisplayColor(float[] targetColors){
  int[] currentInts=mHardware.getDisplayColorCalibration();
  float[] currentColors=new float[]{(float)currentInts[0] / (float)mMaxColor,(float)currentInts[1] / (float)mMaxColor,(float)currentInts[2] / (float)mMaxColor};
  if (currentColors[0] == targetColors[0] && currentColors[1] == targetColors[1] && currentColors[2] == targetColors[2]) {
    return;
  }
  long duration=(long)(750 * (Math.max(Math.max(Math.abs(currentColors[0] - targetColors[0]),Math.abs(currentColors[1] - targetColors[1])),Math.abs(currentColors[2] - targetColors[2]))));
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(currentColors) + ""String_Node_Str""+ Arrays.toString(targetColors)+ ""String_Node_Str""+ duration);
  }
  if (mAnimator != null) {
    mAnimator.cancel();
    mAnimator.removeAllUpdateListeners();
  }
  mAnimator=ValueAnimator.ofObject(new FloatArrayEvaluator(new float[3]),currentColors,targetColors);
  mAnimator.setDuration(duration);
  mAnimator.setInterpolator(new LinearInterpolator());
  mAnimator.addUpdateListener(new AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    final ValueAnimator animation){
synchronized (DisplayHardwareController.this) {
        float[] value=(float[])animation.getAnimatedValue();
        mHardware.setDisplayColorCalibration(new int[]{(int)(value[0] * mMaxColor),(int)(value[1] * mMaxColor),(int)(value[2] * mMaxColor)});
        screenRefresh();
      }
    }
  }
);
  mAnimator.start();
}","/** 
 * Smoothly animate the current display colors to the new value.
 */
private synchronized void animateDisplayColor(float[] targetColors){
  int[] currentInts=mHardware.getDisplayColorCalibration();
  float[] currentColors=new float[]{(float)currentInts[0] / (float)mMaxColor,(float)currentInts[1] / (float)mMaxColor,(float)currentInts[2] / (float)mMaxColor};
  if (currentColors[0] == targetColors[0] && currentColors[1] == targetColors[1] && currentColors[2] == targetColors[2]) {
    return;
  }
  long duration=(long)(750 * (Math.max(Math.max(Math.abs(currentColors[0] - targetColors[0]),Math.abs(currentColors[1] - targetColors[1])),Math.abs(currentColors[2] - targetColors[2]))));
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(currentColors) + ""String_Node_Str""+ Arrays.toString(targetColors)+ ""String_Node_Str""+ duration);
  }
  if (mAnimator != null) {
    mAnimator.cancel();
    mAnimator.removeAllUpdateListeners();
  }
  mAnimator=ValueAnimator.ofObject(new FloatArrayEvaluator(new float[3]),currentColors,targetColors);
  mAnimator.setDuration(duration);
  mAnimator.setInterpolator(new LinearInterpolator());
  mAnimator.addUpdateListener(new AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    final ValueAnimator animation){
synchronized (DisplayHardwareController.this) {
        if (isScreenOn()) {
          float[] value=(float[])animation.getAnimatedValue();
          mHardware.setDisplayColorCalibration(new int[]{(int)(value[0] * mMaxColor),(int)(value[1] * mMaxColor),(int)(value[2] * mMaxColor)});
          screenRefresh();
        }
      }
    }
  }
);
  mAnimator.start();
}"
38961,"@Override public void onAnimationUpdate(final ValueAnimator animation){
synchronized (DisplayHardwareController.this) {
    float[] value=(float[])animation.getAnimatedValue();
    mHardware.setDisplayColorCalibration(new int[]{(int)(value[0] * mMaxColor),(int)(value[1] * mMaxColor),(int)(value[2] * mMaxColor)});
    screenRefresh();
  }
}","@Override public void onAnimationUpdate(final ValueAnimator animation){
synchronized (DisplayHardwareController.this) {
    if (isScreenOn()) {
      float[] value=(float[])animation.getAnimatedValue();
      mHardware.setDisplayColorCalibration(new int[]{(int)(value[0] * mMaxColor),(int)(value[1] * mMaxColor),(int)(value[2] * mMaxColor)});
      screenRefresh();
    }
  }
}"
38962,"public DisplayHardwareController(Context context,Handler handler){
  super(context,handler);
  mHardware=CMHardwareManager.getInstance(mContext);
  mUseCABC=mHardware.isSupported(CMHardwareManager.FEATURE_ADAPTIVE_BACKLIGHT);
  mDefaultCABC=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultCABC);
  mUseColorEnhancement=mHardware.isSupported(CMHardwareManager.FEATURE_COLOR_ENHANCEMENT);
  mDefaultColorEnhancement=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultColorEnhancement);
  mUseAutoContrast=mHardware.isSupported(CMHardwareManager.FEATURE_AUTO_CONTRAST);
  mDefaultAutoContrast=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultAutoContrast);
  mUseColorAdjustment=mHardware.isSupported(CMHardwareManager.FEATURE_DISPLAY_COLOR_CALIBRATION);
  mMaxColor=mHardware.getDisplayColorCalibrationMax();
}","public DisplayHardwareController(Context context,Handler handler){
  super(context,handler);
  mHardware=CMHardwareManager.getInstance(mContext);
  mUseCABC=mHardware.isSupported(CMHardwareManager.FEATURE_ADAPTIVE_BACKLIGHT);
  mDefaultCABC=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultCABC);
  mUseColorEnhancement=mHardware.isSupported(CMHardwareManager.FEATURE_COLOR_ENHANCEMENT);
  mDefaultColorEnhancement=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultColorEnhancement);
  mUseAutoContrast=mHardware.isSupported(CMHardwareManager.FEATURE_AUTO_CONTRAST);
  mDefaultAutoContrast=mContext.getResources().getBoolean(org.cyanogenmod.platform.internal.R.bool.config_defaultAutoContrast);
  mUseColorAdjustment=mHardware.isSupported(CMHardwareManager.FEATURE_DISPLAY_COLOR_CALIBRATION);
  if (mUseColorAdjustment) {
    mMaxColor=mHardware.getDisplayColorCalibrationMax();
    copyColors(getColorAdjustment(),mColorAdjustment);
  }
 else {
    mMaxColor=0;
  }
}"
38963,"@Override protected synchronized void onScreenStateChanged(){
  if (mUseColorAdjustment) {
    if (mAnimator != null && mAnimator.isRunning() && !isScreenOn()) {
      mAnimator.cancel();
      mDirty=true;
    }
 else     if (mDirty && isScreenOn()) {
      updateColorAdjustment();
      mDirty=false;
    }
  }
}","@Override protected synchronized void onScreenStateChanged(){
  if (mUseColorAdjustment) {
    if (mAnimator != null && mAnimator.isRunning() && !isScreenOn()) {
      mAnimator.cancel();
    }
 else     if (isScreenOn()) {
      updateColorAdjustment();
    }
  }
}"
38964,"private synchronized boolean setPowerProfileInternal(int profile,boolean fromUser){
  if (profile == mCurrentProfile) {
    return false;
  }
  if (profile < 0 || profile > mNumProfiles) {
    Slog.e(TAG,""String_Node_Str"" + profile);
    return false;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
  long token=Binder.clearCallingIdentity();
  if (fromUser) {
    CMSettings.Secure.putInt(mContext.getContentResolver(),CMSettings.Secure.PERFORMANCE_PROFILE,profile);
  }
  mCurrentProfile=profile;
  mHandler.removeMessages(MSG_CPU_BOOST);
  mHandler.removeMessages(MSG_LAUNCH_BOOST);
  mHandler.sendMessage(Message.obtain(mHandler,MSG_SET_PROFILE,profile,(fromUser ? 1 : 0)));
  Binder.restoreCallingIdentity(token);
  return true;
}","/** 
 * Apply a power profile and persist if fromUser = true
 * @param profile  power profile
 * @param fromUser true to persist the profile
 * @return          true if the active profile changed
 */
private synchronized boolean setPowerProfileInternal(int profile,boolean fromUser){
  if (DEBUG) {
    Slog.v(TAG,String.format(""String_Node_Str"",profile,fromUser));
  }
  if (profile < 0 || profile > mNumProfiles) {
    Slog.e(TAG,""String_Node_Str"" + profile);
    return false;
  }
  if (fromUser) {
    CMSettings.Secure.putInt(mContext.getContentResolver(),CMSettings.Secure.PERFORMANCE_PROFILE,profile);
  }
  if (profile == mCurrentProfile) {
    return false;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
  long token=Binder.clearCallingIdentity();
  mCurrentProfile=profile;
  mHandler.removeMessages(MSG_CPU_BOOST);
  mHandler.removeMessages(MSG_LAUNCH_BOOST);
  mHandler.sendMessage(Message.obtain(mHandler,MSG_SET_PROFILE,profile,(fromUser ? 1 : 0)));
  Binder.restoreCallingIdentity(token);
  return true;
}"
38965,"@Override public void activityResumed(Intent intent){
  if (!hasAppProfiles() || intent == null || mProfileSetByUser) {
    return;
  }
  final ComponentName cn=intent.getComponent();
  if (cn == null) {
    return;
  }
  int forApp=getProfileForActivity(cn.flattenToString());
  if (forApp == mCurrentProfile) {
    return;
  }
  setPowerProfileInternal(forApp,false);
}","@Override public void activityResumed(Intent intent){
  String activityName=null;
  if (intent != null) {
    final ComponentName cn=intent.getComponent();
    if (cn != null) {
      activityName=cn.flattenToString();
    }
  }
  mCurrentActivityName=activityName;
  applyProfile();
}"
38966,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mPm=getLocalService(PowerManagerInternal.class);
      mNumProfiles=mPm.getFeature(POWER_FEATURE_SUPPORTED_PROFILES);
      Slog.d(TAG,""String_Node_Str"" + mNumProfiles);
      if (mNumProfiles > 0) {
        int profile=CMSettings.Secure.getInt(mContext.getContentResolver(),CMSettings.Secure.PERFORMANCE_PROFILE,PerformanceManager.PROFILE_BALANCED);
        if (profile == PerformanceManager.PROFILE_HIGH_PERFORMANCE) {
          profile=PerformanceManager.PROFILE_BALANCED;
        }
        setPowerProfileInternal(profile,true);
        mPm.registerLowPowerModeObserver(mLowPowerModeListener);
      }
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mPm=getLocalService(PowerManagerInternal.class);
      mNumProfiles=mPm.getFeature(POWER_FEATURE_SUPPORTED_PROFILES);
      if (mNumProfiles > 0) {
        int profile=getUserProfile();
        if (profile == PerformanceManager.PROFILE_HIGH_PERFORMANCE) {
          Slog.i(TAG,String.format(""String_Node_Str"",profile,PerformanceManager.PROFILE_BALANCED));
          setPowerProfileInternal(PerformanceManager.PROFILE_BALANCED,true);
        }
 else {
          setPowerProfileInternal(profile,false);
        }
        mPm.registerLowPowerModeObserver(mLowPowerModeListener);
      }
    }
  }
}"
38967,"@Override public int getPowerProfile(){
  return CMSettings.Secure.getInt(mContext.getContentResolver(),CMSettings.Secure.PERFORMANCE_PROFILE,PerformanceManager.PROFILE_BALANCED);
}","@Override public int getPowerProfile(){
  return getUserProfile();
}"
38968,"@Override public void onLowPowerModeChanged(boolean enabled){
  if (mNumProfiles < 1) {
    return;
  }
  if (enabled == mLowPowerModeEnabled) {
    return;
  }
  if (enabled && mCurrentProfile != PerformanceManager.PROFILE_POWER_SAVE) {
    setPowerProfileInternal(PerformanceManager.PROFILE_POWER_SAVE,true);
  }
 else   if (!enabled && mCurrentProfile == PerformanceManager.PROFILE_POWER_SAVE) {
    setPowerProfileInternal(PerformanceManager.PROFILE_BALANCED,true);
  }
}","@Override public void onLowPowerModeChanged(boolean enabled){
  if (enabled == mLowPowerModeEnabled) {
    return;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + enabled);
  }
  mLowPowerModeEnabled=enabled;
  applyProfile();
}"
38969,"public PerformanceManagerService(Context context){
  super(context);
  mContext=context;
  String[] activities=context.getResources().getStringArray(R.array.config_auto_perf_activities);
  if (activities != null && activities.length > 0) {
    mPatterns=new Pattern[activities.length];
    mProfiles=new int[activities.length];
    for (int i=0; i < activities.length; i++) {
      String[] info=activities[i].split(""String_Node_Str"");
      if (info.length == 2) {
        mPatterns[i]=Pattern.compile(info[0]);
        mProfiles[i]=Integer.valueOf(info[1]);
      }
    }
  }
  mHandlerThread=new ServiceThread(TAG,Process.THREAD_PRIORITY_URGENT_DISPLAY + 1,false);
  mHandlerThread.start();
  mHandler=new PerformanceManagerHandler(mHandlerThread.getLooper());
}","public PerformanceManagerService(Context context){
  super(context);
  mContext=context;
  String[] activities=context.getResources().getStringArray(R.array.config_auto_perf_activities);
  if (activities != null && activities.length > 0) {
    mPatterns=new Pattern[activities.length];
    mProfiles=new int[activities.length];
    for (int i=0; i < activities.length; i++) {
      String[] info=activities[i].split(""String_Node_Str"");
      if (info.length == 2) {
        mPatterns[i]=Pattern.compile(info[0]);
        mProfiles[i]=Integer.valueOf(info[1]);
        if (DEBUG) {
          Slog.d(TAG,String.format(""String_Node_Str"",i,info[0],info[1]));
        }
      }
    }
  }
  mHandlerThread=new ServiceThread(TAG,Process.THREAD_PRIORITY_URGENT_DISPLAY + 1,false);
  mHandlerThread.start();
  mHandler=new PerformanceManagerHandler(mHandlerThread.getLooper());
}"
38970,"private void testMigrateSettingsForUser(int userId){
  Bundle arg=new Bundle();
  arg.putInt(CMSettings.CALL_METHOD_USER_KEY,userId);
  IContentProvider contentProvider=mContentResolver.acquireProvider(CMSettings.AUTHORITY);
  try {
    contentProvider.call(mContentResolver.getPackageName(),CMSettings.CALL_METHOD_MIGRATE_SETTINGS_FOR_USER,null,arg);
  }
 catch (  RemoteException ex) {
    fail(""String_Node_Str"");
  }
  final String actualPullDownValue=CMSettings.System.getStringForUser(mContentResolver,CMSettings.System.QS_QUICK_PULLDOWN,userId);
  assertEquals(expectedPullDownValue,actualPullDownValue);
  final int actualKeyboardBrightness=CMSettings.Secure.getIntForUser(mContentResolver,CMSettings.Secure.KEYBOARD_BRIGHTNESS,-1,userId);
  assertEquals(expectedKeyboardBrightness,actualKeyboardBrightness);
}","private void testMigrateSettingsForUser(int userId){
}"
38971,"/** 
 * Set the display gamma calibration for a specific control
 * @param idx the control to set
 * @param rgb RGB color calibration.  Each value must be between{@link getDisplayGammaCalibrationMin()} and {@link getDisplayGammaCalibrationMax()}, inclusive.
 * @return true on success, false otherwise.
 */
@Deprecated public boolean setDisplayGammaCalibration(int idx,int[] rgb){
  try {
    return getService().setDisplayGammaCalibration(idx,rgb);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * Set the display gamma calibration for a specific control
 * @param idx the control to set
 * @param rgb RGB color calibration.  Each value must be between{@link getDisplayGammaCalibrationMin()} and {@link getDisplayGammaCalibrationMax()}, inclusive.
 * @return true on success, false otherwise.
 */
@Deprecated public boolean setDisplayGammaCalibration(int idx,int[] rgb){
  try {
    if (checkService()) {
      return sService.setDisplayGammaCalibration(idx,rgb);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38972,"private int[] getDisplayColorCalibrationArray(){
  try {
    return getService().getDisplayColorCalibration();
  }
 catch (  RemoteException e) {
  }
  return null;
}","private int[] getDisplayColorCalibrationArray(){
  try {
    if (checkService()) {
      return sService.getDisplayColorCalibration();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38973,"private int[] getDisplayGammaCalibrationArray(int idx){
  try {
    return getService().getDisplayGammaCalibration(idx);
  }
 catch (  RemoteException e) {
  }
  return null;
}","private int[] getDisplayGammaCalibrationArray(int idx){
  try {
    if (checkService()) {
      return sService.getDisplayGammaCalibration(idx);
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38974,"/** 
 * @return the number of RGB controls the device supports
 */
@Deprecated public int getNumGammaControls(){
  try {
    return getService().getNumGammaControls();
  }
 catch (  RemoteException e) {
  }
  return 0;
}","/** 
 * @return the number of RGB controls the device supports
 */
@Deprecated public int getNumGammaControls(){
  try {
    if (checkService()) {
      return sService.getNumGammaControls();
    }
  }
 catch (  RemoteException e) {
  }
  return 0;
}"
38975,"/** 
 * Determine if the given feature is enabled or disabled. Only used for features which have simple enable/disable controls.
 * @param feature the CM Hardware feature to query
 * @return true if the feature is enabled, false otherwise.
 */
public boolean get(int feature){
  if (!BOOLEAN_FEATURES.contains(feature)) {
    throw new IllegalArgumentException(feature + ""String_Node_Str"");
  }
  try {
    return getService().get(feature);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * Determine if the given feature is enabled or disabled. Only used for features which have simple enable/disable controls.
 * @param feature the CM Hardware feature to query
 * @return true if the feature is enabled, false otherwise.
 */
public boolean get(int feature){
  if (!BOOLEAN_FEATURES.contains(feature)) {
    throw new IllegalArgumentException(feature + ""String_Node_Str"");
  }
  try {
    if (checkService()) {
      return sService.get(feature);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38976,"/** 
 * @return the interval, in milliseconds, to trigger LTO data download
 */
public long getLtoDownloadInterval(){
  try {
    return getService().getLtoDownloadInterval();
  }
 catch (  RemoteException e) {
  }
  return 0;
}","/** 
 * @return the interval, in milliseconds, to trigger LTO data download
 */
public long getLtoDownloadInterval(){
  try {
    if (checkService()) {
      return sService.getLtoDownloadInterval();
    }
  }
 catch (  RemoteException e) {
  }
  return 0;
}"
38977,"/** 
 * @return the serial number to display instead of ro.serialno, or null on failure
 */
public String getSerialNumber(){
  try {
    return getService().getSerialNumber();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return the serial number to display instead of ro.serialno, or null on failure
 */
public String getSerialNumber(){
  try {
    if (checkService()) {
      return sService.getSerialNumber();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38978,"/** 
 * Enable or disable the given feature Only used for features which have simple enable/disable controls.
 * @param feature the CM Hardware feature to set
 * @param enable true to enable, false to disale
 * @return true if the feature is enabled, false otherwise.
 */
public boolean set(int feature,boolean enable){
  if (!BOOLEAN_FEATURES.contains(feature)) {
    throw new IllegalArgumentException(feature + ""String_Node_Str"");
  }
  try {
    return getService().set(feature,enable);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * Enable or disable the given feature Only used for features which have simple enable/disable controls.
 * @param feature the CM Hardware feature to set
 * @param enable true to enable, false to disale
 * @return true if the feature is enabled, false otherwise.
 */
public boolean set(int feature,boolean enable){
  if (!BOOLEAN_FEATURES.contains(feature)) {
    throw new IllegalArgumentException(feature + ""String_Node_Str"");
  }
  try {
    if (checkService()) {
      return sService.set(feature,enable);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38979,"/** 
 * @return the destination location of LTO data, or null on failure
 */
public String getLtoDestination(){
  try {
    return getService().getLtoDestination();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return the destination location of LTO data, or null on failure
 */
public String getLtoDestination(){
  try {
    if (checkService()) {
      return sService.getLtoDestination();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38980,"/** 
 * @return true if adaptive backlight should be enabled when sunlight enhancementis enabled.
 */
public boolean requireAdaptiveBacklightForSunlightEnhancement(){
  try {
    return getService().requireAdaptiveBacklightForSunlightEnhancement();
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * @return true if adaptive backlight should be enabled when sunlight enhancementis enabled.
 */
public boolean requireAdaptiveBacklightForSunlightEnhancement(){
  try {
    if (checkService()) {
      return sService.requireAdaptiveBacklightForSunlightEnhancement();
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38981,"/** 
 * @return true if setting the mode was successful
 */
public boolean setDisplayMode(DisplayMode mode,boolean makeDefault){
  try {
    return getService().setDisplayMode(mode,makeDefault);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * @return true if setting the mode was successful
 */
public boolean setDisplayMode(DisplayMode mode,boolean makeDefault){
  try {
    if (checkService()) {
      return sService.setDisplayMode(mode,makeDefault);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38982,"/** 
 * @return the supported features bitmask
 */
public int getSupportedFeatures(){
  try {
    return getService().getSupportedFeatures();
  }
 catch (  RemoteException e) {
  }
  return 0;
}","/** 
 * @return the supported features bitmask
 */
public int getSupportedFeatures(){
  try {
    if (checkService()) {
      return sService.getSupportedFeatures();
    }
  }
 catch (  RemoteException e) {
  }
  return 0;
}"
38983,"/** 
 * Set the display color calibration to the given rgb triplet
 * @param rgb RGB color calibration.  Each value must be between{@link getDisplayColorCalibrationMin()} and {@link getDisplayColorCalibrationMax()}, inclusive.
 * @return true on success, false otherwise.
 */
public boolean setDisplayColorCalibration(int[] rgb){
  try {
    return getService().setDisplayColorCalibration(rgb);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * Set the display color calibration to the given rgb triplet
 * @param rgb RGB color calibration.  Each value must be between{@link getDisplayColorCalibrationMin()} and {@link getDisplayColorCalibrationMax()}, inclusive.
 * @return true on success, false otherwise.
 */
public boolean setDisplayColorCalibration(int[] rgb){
  try {
    if (checkService()) {
      return sService.setDisplayColorCalibration(rgb);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38984,"private int[] getVibratorIntensityArray(){
  try {
    return getService().getVibratorIntensity();
  }
 catch (  RemoteException e) {
  }
  return null;
}","private int[] getVibratorIntensityArray(){
  try {
    if (checkService()) {
      return sService.getVibratorIntensity();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38985,"/** 
 * @return the default display mode to be set on boot
 */
public DisplayMode getDefaultDisplayMode(){
  try {
    return getService().getDefaultDisplayMode();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return the default display mode to be set on boot
 */
public DisplayMode getDefaultDisplayMode(){
  try {
    if (checkService()) {
      return sService.getDefaultDisplayMode();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38986,"/** 
 * @return the source location of LTO data, or null on failure
 */
public String getLtoSource(){
  try {
    return getService().getLtoSource();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return the source location of LTO data, or null on failure
 */
public String getLtoSource(){
  try {
    if (checkService()) {
      return sService.getLtoSource();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38987,"/** 
 * @return the currently active display mode
 */
public DisplayMode getCurrentDisplayMode(){
  try {
    return getService().getCurrentDisplayMode();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return the currently active display mode
 */
public DisplayMode getCurrentDisplayMode(){
  try {
    if (checkService()) {
      return sService.getCurrentDisplayMode();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38988,"/** 
 * Set the current vibrator intensity
 * @param intensity the intensity to set, between {@link #getVibratorMinIntensity()} and{@link #getVibratorMaxIntensity()} inclusive.
 * @return true on success, false otherwise.
 */
public boolean setVibratorIntensity(int intensity){
  try {
    return getService().setVibratorIntensity(intensity);
  }
 catch (  RemoteException e) {
  }
  return false;
}","/** 
 * Set the current vibrator intensity
 * @param intensity the intensity to set, between {@link #getVibratorMinIntensity()} and{@link #getVibratorMaxIntensity()} inclusive.
 * @return true on success, false otherwise.
 */
public boolean setVibratorIntensity(int intensity){
  try {
    if (checkService()) {
      return sService.setVibratorIntensity(intensity);
    }
  }
 catch (  RemoteException e) {
  }
  return false;
}"
38989,"/** 
 * @return a list of available display modes on the devices
 */
public DisplayMode[] getDisplayModes(){
  try {
    return getService().getDisplayModes();
  }
 catch (  RemoteException e) {
  }
  return null;
}","/** 
 * @return a list of available display modes on the devices
 */
public DisplayMode[] getDisplayModes(){
  try {
    if (checkService()) {
      return sService.getDisplayModes();
    }
  }
 catch (  RemoteException e) {
  }
  return null;
}"
38990,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  init();
  testSetColor();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  init();
}"
38991,"@Override public String secureCloneUrl(Configuration configuration){
  if (configuration.isUseHttpsTransport()) {
    String username=configuration.getGithubUsername();
    String password=configuration.getGithubPassword();
    if (Strings.empty(username)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (Strings.empty(password)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    URL url=repository.getHtmlUrl();
    String host=username + ""String_Node_Str"" + password+ ""String_Node_Str""+ url.getHost();
    String file=url.getFile();
    if (!file.startsWith(""String_Node_Str"")) {
      file=""String_Node_Str"" + file;
    }
    String answer=""String_Node_Str"" + host + file;
    if (!answer.endsWith(""String_Node_Str"")) {
      answer+=""String_Node_Str"";
    }
    return answer;
  }
  return getCloneUrl();
}","@Override public String secureCloneUrl(Configuration configuration){
  if (configuration.isUseHttpsTransport()) {
    String username=configuration.getGithubUsername();
    String password=configuration.getGithubPassword();
    if (Strings.empty(username)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
 else     if (Strings.empty(password)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    URL url=repository.getHtmlUrl();
    String host=username + ""String_Node_Str"" + password+ ""String_Node_Str""+ url.getHost();
    String file=url.getFile();
    if (!file.startsWith(""String_Node_Str"")) {
      file=""String_Node_Str"" + file;
    }
    String answer=""String_Node_Str"" + host + file;
    if (!answer.endsWith(""String_Node_Str"")) {
      answer+=""String_Node_Str"";
    }
    return answer;
  }
 else {
    return repository.getSshUrl();
  }
}"
38992,"protected static void logOutput(Configuration configuration,Logger log,String output,boolean error){
  if (Strings.notEmpty(output)) {
    String[] lines=output.split(""String_Node_Str"");
    for (    String line : lines) {
      if (error) {
        configuration.info(log,line);
      }
 else {
        configuration.warn(log,line);
      }
    }
  }
}","protected static void logOutput(Configuration configuration,Logger log,String output,boolean error){
  if (Strings.notEmpty(output)) {
    String[] lines=output.split(""String_Node_Str"");
    for (    String line : lines) {
      if (error) {
        configuration.info(log,line);
      }
 else {
        configuration.error(log,line);
      }
    }
  }
}"
38993,"public static boolean runCommandAndLogOutput(Configuration configuration,Logger log,File dir,String... commands){
  File outputFile=new File(dir,""String_Node_Str"");
  File errorFile=new File(dir,""String_Node_Str"");
  try (FileDeleter ignored=new FileDeleter(outputFile,errorFile)){
    outputFile.getParentFile().mkdirs();
    boolean answer=true;
    if (runCommand(dir,outputFile,errorFile,commands) != 0) {
      LOG.warn(""String_Node_Str"" + String.join(""String_Node_Str"",commands));
      answer=false;
    }
    logOutput(configuration,log,outputFile,false);
    logOutput(configuration,log,errorFile,true);
    return answer;
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + e,e);
    return false;
  }
}","public static boolean runCommandAndLogOutput(Configuration configuration,Logger log,File dir,String... commands){
  File outputFile=new File(dir,""String_Node_Str"");
  File errorFile=new File(dir,""String_Node_Str"");
  try (FileDeleter ignored=new FileDeleter(outputFile,errorFile)){
    outputFile.getParentFile().mkdirs();
    boolean answer=true;
    if (runCommand(dir,outputFile,errorFile,commands) != 0) {
      LOG.error(""String_Node_Str"" + String.join(""String_Node_Str"",commands));
      answer=false;
    }
    logOutput(configuration,log,outputFile,false);
    logOutput(configuration,log,errorFile,true);
    return answer;
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"" + e,e);
    return false;
  }
}"
38994,"public RFResult getMatchesFromContentSteam(Reader reader,int start,int rows,List<Query> filters,int flags,Sort lsort,Query mainQuery) throws IOException, SyntaxError {
  RFResult RFResult=rf.like(reader);
  rawRFQuery=RFResult.rawRFQuery;
  boostedRFQuery=getBoostedFunctionQuery(rawRFQuery);
  Query finalQuery=null;
  if (mainQuery != null) {
    BooleanQuery tmpQuery=new BooleanQuery();
    tmpQuery.add(mainQuery,BooleanClause.Occur.MUST);
    tmpQuery.add(boostedRFQuery,BooleanClause.Occur.SHOULD);
    finalQuery=tmpQuery;
  }
 else {
    finalQuery=boostedRFQuery;
  }
  RFResult.setFinalQuery(finalQuery);
  DocListAndSet results=new DocListAndSet();
  if (this.needDocSet) {
    results=searcher.getDocListAndSet(finalQuery,filters,lsort,start,rows,flags);
  }
 else {
    results.docList=searcher.getDocList(finalQuery,filters,lsort,start,rows,flags);
  }
  RFResult.setDoclist(results);
  return RFResult;
}","public RFResult getMatchesFromContentSteam(Reader reader,int start,int rows,List<Query> filters,int flags,Sort lsort,Query userQuery) throws IOException, SyntaxError {
  RFResult RFResult=rf.like(reader);
  rawRFQuery=RFResult.rawRFQuery;
  boostedRFQuery=getBoostedFunctionQuery(rawRFQuery);
  Query finalQuery=null;
  if (userQuery != null) {
    BooleanQuery tmpQuery=new BooleanQuery();
    tmpQuery.add(userQuery,BooleanClause.Occur.MUST);
    tmpQuery.add(boostedRFQuery,BooleanClause.Occur.SHOULD);
    finalQuery=tmpQuery;
  }
 else {
    finalQuery=boostedRFQuery;
  }
  RFResult.setFinalQuery(finalQuery);
  DocListAndSet results=new DocListAndSet();
  if (this.needDocSet) {
    results=searcher.getDocListAndSet(finalQuery,filters,lsort,start,rows,flags);
  }
 else {
    results.docList=searcher.getDocList(finalQuery,filters,lsort,start,rows,flags);
  }
  RFResult.setDoclist(results);
  return RFResult;
}"
38995,"public RFResult getMatchesFromDocs(DocIterator iterator,int start,int rows,List<Query> filters,int flags,Sort lsort,Query mainQuery) throws IOException, SyntaxError {
  realRFQuery=new BooleanQuery();
  List<Integer> ids=new ArrayList<Integer>();
  while (iterator.hasNext()) {
    int id=iterator.nextDoc();
    Document doc=reader.document(id);
    ids.add(id);
    TermQuery tq=new TermQuery(new Term(uniqueKeyField.getName(),uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName()))));
    realRFQuery.add(tq,BooleanClause.Occur.MUST_NOT);
  }
  RFResult RFResult=rf.like(ids);
  rawRFQuery=RFResult.rawRFQuery;
  if (RFResult.getMustMatchQuery() != null) {
    filters.add(RFResult.getMustMatchQuery());
  }
  if (RFResult.getMustNOTMatchQuery() != null) {
    filters.add(RFResult.getMustNOTMatchQuery());
  }
  boostedRFQuery=getBoostedFunctionQuery(rawRFQuery);
  realRFQuery.add(boostedRFQuery,BooleanClause.Occur.MUST);
  BooleanQuery finalQuery=null;
  if (mainQuery != null) {
    finalQuery=new BooleanQuery();
    finalQuery.add(mainQuery,BooleanClause.Occur.MUST);
    finalQuery.add(realRFQuery,BooleanClause.Occur.SHOULD);
  }
 else {
    finalQuery=realRFQuery;
  }
  RFResult.setFinalQuery(finalQuery);
  DocListAndSet results=new DocListAndSet();
  if (this.needDocSet) {
    results=searcher.getDocListAndSet(finalQuery,filters,lsort,start,rows,flags);
  }
 else {
    results.docList=searcher.getDocList(finalQuery,filters,lsort,start,rows,flags);
  }
  RFResult.setDoclist(results);
  return RFResult;
}","public RFResult getMatchesFromDocs(DocIterator iterator,int start,int rows,List<Query> filters,int flags,Sort lsort,Query userQuery) throws IOException, SyntaxError {
  realRFQuery=new BooleanQuery();
  List<Integer> ids=new ArrayList<Integer>();
  while (iterator.hasNext()) {
    int id=iterator.nextDoc();
    Document doc=reader.document(id);
    ids.add(id);
    TermQuery tq=new TermQuery(new Term(uniqueKeyField.getName(),uniqueKeyField.getType().storedToIndexed(doc.getField(uniqueKeyField.getName()))));
    realRFQuery.add(tq,BooleanClause.Occur.MUST_NOT);
  }
  RFResult RFResult=rf.like(ids);
  rawRFQuery=RFResult.rawRFQuery;
  if (RFResult.getMustMatchQuery() != null) {
    filters.add(RFResult.getMustMatchQuery());
  }
  if (RFResult.getMustNOTMatchQuery() != null) {
    filters.add(RFResult.getMustNOTMatchQuery());
  }
  boostedRFQuery=getBoostedFunctionQuery(rawRFQuery);
  realRFQuery.add(boostedRFQuery,BooleanClause.Occur.MUST);
  BooleanQuery finalQuery=null;
  if (userQuery != null) {
    finalQuery=new BooleanQuery();
    finalQuery.add(userQuery,BooleanClause.Occur.MUST);
    finalQuery.add(realRFQuery,BooleanClause.Occur.SHOULD);
  }
 else {
    finalQuery=realRFQuery;
  }
  RFResult.setFinalQuery(finalQuery);
  DocListAndSet results=new DocListAndSet();
  if (this.needDocSet) {
    results=searcher.getDocListAndSet(finalQuery,filters,lsort,start,rows,flags);
  }
 else {
    results.docList=searcher.getDocList(finalQuery,filters,lsort,start,rows,flags);
  }
  RFResult.setDoclist(results);
  return RFResult;
}"
38996,"@Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws Exception {
  SolrIndexSearcher searcher=req.getSearcher();
  SchemaField uniqueKeyField=searcher.getSchema().getUniqueKeyField();
  ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());
  configureSolrParameters(req,params,uniqueKeyField.getName());
  ReturnFields returnFields=new SolrReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  String defType=params.get(QueryParsing.DEFTYPE,EDISMAX);
  String mainQueryDefType=params.get(RFParams.RF_DEFTYPE,EDISMAX);
  String q=params.get(CommonParams.Q);
  String mainQ=params.get(RFParams.RF_QUERY);
  Query query=null;
  Query mainQuery=null;
  SortSpec sortSpec=null;
  QParser parser=null;
  QParser mainQueryParser=null;
  List<Query> targetFqFilters=null;
  List<Query> rfFqFilters=null;
  try {
    if (q != null) {
      parser=QParser.getParser(q,defType,req);
      query=parser.getQuery();
      sortSpec=parser.getSort(true);
    }
 else {
      parser=QParser.getParser(null,defType,req);
      sortSpec=parser.getSort(true);
    }
    targetFqFilters=getFilters(req,CommonParams.FQ);
    rfFqFilters=getFilters(req,RFParams.FQ);
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  try {
    if (mainQ != null) {
      mainQueryParser=QParser.getParser(mainQ,mainQueryDefType,req);
      mainQuery=mainQueryParser.getQuery();
    }
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  RFHelper rfhelper=new RFHelper(params,searcher,uniqueKeyField,parser);
  RFParams.TermStyle termStyle=RFParams.TermStyle.get(params.get(RFParams.INTERESTING_TERMS));
  RFResult RFResult=null;
  DocListAndSet rfDocs=null;
  Reader reader=null;
  try {
    int start=params.getInt(CommonParams.START,0);
    int rows=params.getInt(CommonParams.ROWS,10);
    if (q == null || q.trim().length() < 1) {
      reader=getContentStreamReader(req,reader);
      q=""String_Node_Str"";
    }
    if (reader != null) {
      RFResult=rfhelper.getMatchesFromContentSteam(reader,start,rows,rfFqFilters,flags,sortSpec.getSort(),mainQuery);
    }
 else     if (q != null) {
      RFResult=getMoreLikeTheseFromQuery(rsp,params,flags,q,query,mainQuery,sortSpec,targetFqFilters,rfFqFilters,searcher,rfhelper,start,rows);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"");
    }
    if (RFResult != null) {
      rfDocs=RFResult.getDoclist();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  if (rfDocs == null) {
    rfDocs=new DocListAndSet();
  }
  rsp.add(""String_Node_Str"",rfDocs.docList);
  if (RFResult != null && RFResult.rawRFQuery != null) {
    rsp.add(RFParams.PREFIX + ""String_Node_Str"",RFResult.rawRFQuery.toString());
  }
  if (RFResult != null && termStyle != RFParams.TermStyle.NONE) {
    addInterestingTerms(rsp,termStyle,RFResult);
  }
  if (params.getBool(FacetParams.FACET,false)) {
    addFacet(req,rsp,params,rfDocs);
  }
  addDebugInfo(req,rsp,q,rfFqFilters,rfhelper,RFResult,rfDocs);
}","@Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws Exception {
  SolrIndexSearcher searcher=req.getSearcher();
  SchemaField uniqueKeyField=searcher.getSchema().getUniqueKeyField();
  ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());
  configureSolrParameters(req,params,uniqueKeyField.getName());
  ReturnFields returnFields=new SolrReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  String defType=params.get(QueryParsing.DEFTYPE,EDISMAX);
  String mainQueryDefType=params.get(RFParams.RF_DEFTYPE,EDISMAX);
  String userQ=params.get(CommonParams.Q);
  String rfQ=params.get(RFParams.RF_QUERY);
  Query rfQuery=null;
  Query userQuery=null;
  SortSpec sortSpec=null;
  QParser rfQueryParser=null;
  QParser userQueryParser=null;
  List<Query> targetFqFilters=null;
  List<Query> rfFqFilters=null;
  try {
    if (rfQ != null) {
      rfQueryParser=QParser.getParser(rfQ,defType,req);
      rfQuery=rfQueryParser.getQuery();
      sortSpec=rfQueryParser.getSort(true);
    }
 else {
      rfQueryParser=QParser.getParser(null,defType,req);
      sortSpec=rfQueryParser.getSort(true);
    }
    targetFqFilters=getFilters(req,CommonParams.FQ);
    rfFqFilters=getFilters(req,RFParams.FQ);
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  try {
    if (userQ != null) {
      userQueryParser=QParser.getParser(userQ,mainQueryDefType,req);
      userQuery=userQueryParser.getQuery();
    }
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  RFHelper rfhelper=new RFHelper(params,searcher,uniqueKeyField,rfQueryParser);
  RFParams.TermStyle termStyle=RFParams.TermStyle.get(params.get(RFParams.INTERESTING_TERMS));
  RFResult RFResult=null;
  DocListAndSet rfDocs=null;
  Reader reader=null;
  try {
    int start=params.getInt(CommonParams.START,0);
    int rows=params.getInt(CommonParams.ROWS,10);
    if (rfQ == null || rfQ.trim().length() < 1) {
      reader=getContentStreamReader(req,reader);
    }
    if (reader != null) {
      rfQ=""String_Node_Str"";
      RFResult=rfhelper.getMatchesFromContentSteam(reader,start,rows,rfFqFilters,flags,sortSpec.getSort(),userQuery);
    }
 else     if (rfQ != null) {
      RFResult=getMoreLikeTheseFromQuery(rsp,params,flags,rfQ,rfQuery,userQuery,sortSpec,targetFqFilters,rfFqFilters,searcher,rfhelper,start,rows);
    }
 else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"");
    }
    if (RFResult != null) {
      rfDocs=RFResult.getDoclist();
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  if (rfDocs == null) {
    rfDocs=new DocListAndSet();
  }
  rsp.add(""String_Node_Str"",rfDocs.docList);
  if (RFResult != null && RFResult.rawRFQuery != null) {
    rsp.add(RFParams.PREFIX + ""String_Node_Str"",RFResult.rawRFQuery.toString());
  }
  if (RFResult != null && termStyle != RFParams.TermStyle.NONE) {
    addInterestingTerms(rsp,termStyle,RFResult);
  }
  if (params.getBool(FacetParams.FACET,false)) {
    addFacet(req,rsp,params,rfDocs);
  }
  addDebugInfo(req,rsp,rfQ,rfFqFilters,rfhelper,RFResult,rfDocs);
}"
38997,"private RFResult getMoreLikeTheseFromQuery(SolrQueryResponse rsp,SolrParams params,int flags,String q,Query query,Query mainQuery,SortSpec sortSpec,List<Query> targetFqFilters,List<Query> rfFqFilters,SolrIndexSearcher searcher,RFHelper rfhelper,int start,int rows) throws IOException, SyntaxError {
  boolean includeMatch=params.getBool(RFParams.MATCH_INCLUDE,true);
  int matchOffset=params.getInt(RFParams.MATCH_OFFSET,0);
  DocList match=searcher.getDocList(query,targetFqFilters,null,matchOffset,10000,flags);
  if (match.matches() == 0 && mainQuery == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format(""String_Node_Str"",q));
  }
  if (includeMatch) {
    rsp.add(""String_Node_Str"",match);
  }
  DocIterator iterator=match.iterator();
  if (iterator.hasNext() || mainQuery != null) {
    return rfhelper.getMatchesFromDocs(iterator,start,rows,rfFqFilters,flags,sortSpec.getSort(),mainQuery);
  }
  return null;
}","private RFResult getMoreLikeTheseFromQuery(SolrQueryResponse rsp,SolrParams params,int flags,String q,Query query,Query userQuery,SortSpec sortSpec,List<Query> targetFqFilters,List<Query> rfFqFilters,SolrIndexSearcher searcher,RFHelper rfhelper,int start,int rows) throws IOException, SyntaxError {
  boolean includeMatch=params.getBool(RFParams.MATCH_INCLUDE,true);
  int matchOffset=params.getInt(RFParams.MATCH_OFFSET,0);
  DocList match=searcher.getDocList(query,targetFqFilters,null,matchOffset,10000,flags);
  if (match.matches() == 0 && userQuery == null) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,String.format(""String_Node_Str"",q));
  }
  if (includeMatch) {
    rsp.add(""String_Node_Str"",match);
  }
  DocIterator iterator=match.iterator();
  if (iterator.hasNext() || userQuery != null) {
    return rfhelper.getMatchesFromDocs(iterator,start,rows,rfFqFilters,flags,sortSpec.getSort(),userQuery);
  }
  return null;
}"
38998,"@Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws Exception {
  SolrIndexSearcher searcher=req.getSearcher();
  SchemaField uniqueKeyField=searcher.getSchema().getUniqueKeyField();
  ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());
  configureSolrParameters(req,params,uniqueKeyField.getName());
  ReturnFields returnFields=new SolrReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  String defType=params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
  int maxDocumentsToMatch=params.getInt(UnsupervisedFeedbackParams.MAX_DOCUMENTS_TO_PROCESS,DEFAULT_MAX_NUM_DOCUMENTS_TO_PROCESS);
  String q=params.get(CommonParams.Q);
  Query query=null;
  SortSpec sortSpec=null;
  QParser parser=null;
  List<Query> targetFqFilters=null;
  List<Query> ufFqFilters=null;
  try {
    parser=QParser.getParser(q,defType,req);
    query=parser.getQuery();
    sortSpec=parser.getSort(true);
    targetFqFilters=getFilters(req,CommonParams.FQ);
    ufFqFilters=getFilters(req,UnsupervisedFeedbackParams.FQ);
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  UnsupervisedFeedbackHelper usfdbkHelper=new UnsupervisedFeedbackHelper(params,searcher,uniqueKeyField,parser);
  UnsupervisedFeedbackParams.TermStyle termStyle=UnsupervisedFeedbackParams.TermStyle.get(params.get(UnsupervisedFeedbackParams.INTERESTING_TERMS));
  List<InterestingTerm> interesting=(termStyle == UnsupervisedFeedbackParams.TermStyle.NONE) ? null : new ArrayList<InterestingTerm>(usfdbkHelper.relevancyFeedback.getMaxQueryTermsPerField());
  RFResult usfdbkResult=null;
  Reader reader=null;
  try {
    int start=params.getInt(CommonParams.START,0);
    int rows=params.getInt(CommonParams.ROWS,10);
    if (q == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"");
    }
 else {
      usfdbkResult=expandQueryAndReExecute(rsp,params,maxDocumentsToMatch,flags,q,query,sortSpec,targetFqFilters,ufFqFilters,searcher,usfdbkHelper,start,rows);
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  DocListAndSet results=new DocListAndSet();
  if (usfdbkResult != null) {
    results=usfdbkResult.getResults();
  }
  rsp.add(""String_Node_Str"",results);
  if (usfdbkResult != null && termStyle != UnsupervisedFeedbackParams.TermStyle.NONE) {
    addInterestingTerms(rsp,termStyle,usfdbkResult);
  }
  if (params.getBool(FacetParams.FACET,false)) {
    addFacet(req,rsp,params,results);
  }
  addDebugInfo(req,rsp,q,ufFqFilters,usfdbkResult);
}","@Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws Exception {
  SolrIndexSearcher searcher=req.getSearcher();
  SchemaField uniqueKeyField=searcher.getSchema().getUniqueKeyField();
  ModifiableSolrParams params=new ModifiableSolrParams(req.getParams());
  configureSolrParameters(req,params,uniqueKeyField.getName());
  ReturnFields returnFields=new SolrReturnFields(req);
  rsp.setReturnFields(returnFields);
  int flags=0;
  if (returnFields.wantsScore()) {
    flags|=SolrIndexSearcher.GET_SCORES;
  }
  String defType=params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
  int maxDocumentsToMatch=params.getInt(UnsupervisedFeedbackParams.MAX_DOCUMENTS_TO_PROCESS,DEFAULT_MAX_NUM_DOCUMENTS_TO_PROCESS);
  String q=params.get(CommonParams.Q);
  Query query=null;
  SortSpec sortSpec=null;
  QParser parser=null;
  List<Query> targetFqFilters=null;
  List<Query> ufFqFilters=null;
  try {
    parser=QParser.getParser(q,defType,req);
    query=parser.getQuery();
    sortSpec=parser.getSort(true);
    targetFqFilters=getFilters(req,CommonParams.FQ);
    ufFqFilters=getFilters(req,UnsupervisedFeedbackParams.FQ);
  }
 catch (  SyntaxError e) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);
  }
  UnsupervisedFeedbackHelper usfdbkHelper=new UnsupervisedFeedbackHelper(params,searcher,uniqueKeyField,parser);
  UnsupervisedFeedbackParams.TermStyle termStyle=UnsupervisedFeedbackParams.TermStyle.get(params.get(UnsupervisedFeedbackParams.INTERESTING_TERMS));
  List<InterestingTerm> interesting=(termStyle == UnsupervisedFeedbackParams.TermStyle.NONE) ? null : new ArrayList<InterestingTerm>(usfdbkHelper.relevancyFeedback.getMaxQueryTermsPerField());
  RFResult usfdbkResult=null;
  Reader reader=null;
  try {
    int start=params.getInt(CommonParams.START,0);
    int rows=params.getInt(CommonParams.ROWS,10);
    if (q == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"");
    }
 else {
      usfdbkResult=expandQueryAndReExecute(rsp,params,maxDocumentsToMatch,flags,q,query,sortSpec,targetFqFilters,ufFqFilters,searcher,usfdbkHelper,start,rows);
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  DocListAndSet results=new DocListAndSet();
  if (usfdbkResult != null) {
    results=usfdbkResult.getResults();
  }
  rsp.add(""String_Node_Str"",results.docList);
  if (usfdbkResult != null && termStyle != UnsupervisedFeedbackParams.TermStyle.NONE) {
    addInterestingTerms(rsp,termStyle,usfdbkResult);
  }
  if (params.getBool(FacetParams.FACET,false)) {
    addFacet(req,rsp,params,results);
  }
  addDebugInfo(req,rsp,q,ufFqFilters,usfdbkResult);
}"
38999,"public UnsupervisedFeedbackHelper(SolrParams params,SolrIndexSearcher searcher,SchemaField uniqueKeyField,QParser qParser){
  this.searcher=searcher;
  this.qParser=qParser;
  this.reader=searcher.getIndexReader();
  this.uniqueKeyField=uniqueKeyField;
  this.needDocSet=params.getBool(FacetParams.FACET,false);
  SolrParams required=params.required();
  String[] fields=splitList.split(required.get(UnsupervisedFeedbackParams.SIMILARITY_FIELDS));
  if (fields.length < 1) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"" + UnsupervisedFeedbackParams.SIMILARITY_FIELDS);
  }
  this.relevancyFeedback=new RelevancyFeedback(reader);
  relevancyFeedback.setFieldNames(fields);
  final String sPayloadFieldList=params.get(UnsupervisedFeedbackParams.PAYLOAD_FIELDS);
  if (sPayloadFieldList != null && sPayloadFieldList.trim().length() > 0) {
    String[] payloadFields=splitList.split(sPayloadFieldList);
    relevancyFeedback.setPayloadFields(payloadFields);
  }
  relevancyFeedback.setAnalyzer(searcher.getSchema().getIndexAnalyzer());
  relevancyFeedback.setMinTermFreq(params.getInt(UnsupervisedFeedbackParams.MIN_TERM_FREQ,RelevancyFeedback.DEFAULT_MIN_TERM_FREQ));
  relevancyFeedback.setMinDocFreq(params.getInt(UnsupervisedFeedbackParams.MIN_DOC_FREQ,RelevancyFeedback.DEFAULT_MIN_DOC_FREQ));
  relevancyFeedback.setMaxDocFreq(params.getInt(UnsupervisedFeedbackParams.MAX_DOC_FREQ,RelevancyFeedback.DEFAULT_MAX_DOC_FREQ));
  relevancyFeedback.setMinWordLen(params.getInt(UnsupervisedFeedbackParams.MIN_WORD_LEN,RelevancyFeedback.DEFAULT_MIN_WORD_LENGTH));
  relevancyFeedback.setMaxWordLen(params.getInt(UnsupervisedFeedbackParams.MAX_WORD_LEN,RelevancyFeedback.DEFAULT_MAX_WORD_LENGTH));
  relevancyFeedback.setBoostFn(params.get(UnsupervisedFeedbackParams.BOOST_FN));
  relevancyFeedback.setNormalizeFieldBoosts(params.getBool(UnsupervisedFeedbackParams.NORMALIZE_FIELD_BOOSTS,RelevancyFeedback.DEFAULT_NORMALIZE_FIELD_BOOSTS));
  relevancyFeedback.setMaxQueryTermsPerField(params.getInt(UnsupervisedFeedbackParams.MAX_QUERY_TERMS_PER_FIELD,RelevancyFeedback.DEFAULT_MAX_QUERY_TERMS_PER_FIELD));
  relevancyFeedback.setMaxNumTokensParsedPerField(params.getInt(UnsupervisedFeedbackParams.MAX_NUM_TOKENS_PARSED_PER_FIELD,RelevancyFeedback.DEFAULT_MAX_NUM_TOKENS_PARSED_PER_FIELD));
  relevancyFeedback.setLogTf(params.getBool(UnsupervisedFeedbackParams.IS_LOG_TF,RelevancyFeedback.DEFAULT_IS_LOG_TF));
  relevancyFeedback.setBoostFields(SolrPluginUtils.parseFieldBoosts(params.getParams(UnsupervisedFeedbackParams.QF)));
}","public UnsupervisedFeedbackHelper(SolrParams params,SolrIndexSearcher searcher,SchemaField uniqueKeyField,QParser qParser){
  this.searcher=searcher;
  this.qParser=qParser;
  this.reader=searcher.getIndexReader();
  this.uniqueKeyField=uniqueKeyField;
  this.needDocSet=params.getBool(FacetParams.FACET,false);
  SolrParams required=params.required();
  String[] fields=splitList.split(required.get(UnsupervisedFeedbackParams.SIMILARITY_FIELDS));
  if (fields.length < 1) {
    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""String_Node_Str"" + UnsupervisedFeedbackParams.SIMILARITY_FIELDS);
  }
  this.relevancyFeedback=new RelevancyFeedback(reader);
  relevancyFeedback.setFieldNames(fields);
  final String sPayloadFieldList=params.get(UnsupervisedFeedbackParams.PAYLOAD_FIELDS);
  if (sPayloadFieldList != null && sPayloadFieldList.trim().length() > 0) {
    String[] payloadFields=splitList.split(sPayloadFieldList);
    relevancyFeedback.setPayloadFields(payloadFields);
  }
  relevancyFeedback.setAnalyzer(searcher.getSchema().getIndexAnalyzer());
  relevancyFeedback.setMm(params.get(UnsupervisedFeedbackParams.MM,RelevancyFeedback.DEFAULT_MM));
  relevancyFeedback.setMinTermFreq(params.getInt(UnsupervisedFeedbackParams.MIN_TERM_FREQ,RelevancyFeedback.DEFAULT_MIN_TERM_FREQ));
  relevancyFeedback.setMinDocFreq(params.getInt(UnsupervisedFeedbackParams.MIN_DOC_FREQ,RelevancyFeedback.DEFAULT_MIN_DOC_FREQ));
  relevancyFeedback.setMaxDocFreq(params.getInt(UnsupervisedFeedbackParams.MAX_DOC_FREQ,RelevancyFeedback.DEFAULT_MAX_DOC_FREQ));
  relevancyFeedback.setMinWordLen(params.getInt(UnsupervisedFeedbackParams.MIN_WORD_LEN,RelevancyFeedback.DEFAULT_MIN_WORD_LENGTH));
  relevancyFeedback.setMaxWordLen(params.getInt(UnsupervisedFeedbackParams.MAX_WORD_LEN,RelevancyFeedback.DEFAULT_MAX_WORD_LENGTH));
  relevancyFeedback.setBoostFn(params.get(UnsupervisedFeedbackParams.BOOST_FN));
  relevancyFeedback.setNormalizeFieldBoosts(params.getBool(UnsupervisedFeedbackParams.NORMALIZE_FIELD_BOOSTS,RelevancyFeedback.DEFAULT_NORMALIZE_FIELD_BOOSTS));
  relevancyFeedback.setMaxQueryTermsPerField(params.getInt(UnsupervisedFeedbackParams.MAX_QUERY_TERMS_PER_FIELD,RelevancyFeedback.DEFAULT_MAX_QUERY_TERMS_PER_FIELD));
  relevancyFeedback.setMaxNumTokensParsedPerField(params.getInt(UnsupervisedFeedbackParams.MAX_NUM_TOKENS_PARSED_PER_FIELD,RelevancyFeedback.DEFAULT_MAX_NUM_TOKENS_PARSED_PER_FIELD));
  relevancyFeedback.setLogTf(params.getBool(UnsupervisedFeedbackParams.IS_LOG_TF,RelevancyFeedback.DEFAULT_IS_LOG_TF));
  relevancyFeedback.setBoostFields(SolrPluginUtils.parseFieldBoosts(params.getParams(UnsupervisedFeedbackParams.QF)));
}"
39000,"private RobotDashboard(Context ctx){
  prefs=ctx.getSharedPreferences(CONFIG_PREFS,Context.MODE_PRIVATE);
  sockets=new ArrayList<>();
  fieldOverlay=new Canvas();
  configuration=new Configuration();
  telemetry=new DashboardTelemetry(this);
  ClasspathScanner scanner=new ClasspathScanner(new ClassFilter(){
    @Override public boolean shouldProcessClass(    String className){
      return className.startsWith(""String_Node_Str"");
    }
    @Override public void processClass(    Class clazz){
      if (clazz.isAnnotationPresent(Config.class)) {
        Log.i(TAG,String.format(""String_Node_Str"",clazz.getCanonicalName()));
        configuration.addOptionsFromClass(clazz);
      }
    }
  }
);
  scanner.scanClasspath();
  server=new RobotWebSocketServer(this);
  try {
    server.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private RobotDashboard(Context ctx){
  prefs=ctx.getSharedPreferences(CONFIG_PREFS,Context.MODE_PRIVATE);
  sockets=new ArrayList<>();
  fieldOverlay=new Canvas();
  configuration=new Configuration();
  telemetry=new DashboardTelemetry(this);
  ClasspathScanner scanner=new ClasspathScanner(new ClassFilter(){
    @Override public boolean shouldProcessClass(    String className){
      return className.startsWith(""String_Node_Str"");
    }
    @Override public void processClass(    Class klass){
      if (klass.isAnnotationPresent(Config.class)) {
        Log.i(TAG,String.format(""String_Node_Str"",klass.getCanonicalName()));
        configuration.addOptionsFromClass(klass);
      }
    }
  }
);
  scanner.scanClasspath();
  server=new RobotWebSocketServer(this);
  try {
    server.start();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
