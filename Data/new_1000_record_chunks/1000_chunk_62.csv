record_number,buggy_code,fixed_code
61001,"public void setSpecification(final SyncPolicy specification){
  this.specification=specification;
}","public void setSpecification(final SyncPolicySpec specification){
  this.specification=specification;
}"
61002,"public SyncPolicy getSpecification(){
  return specification;
}","public SyncPolicySpec getSpecification(){
  return specification;
}"
61003,"public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  propagationMode=PropagationMode.ASYNC;
  propagationPriority=0;
  createTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
}","public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  propagationMode=PropagationMode.ASYNC;
  propagationPriority=0;
  createTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
  syncTraceLevel=TraceLevel.ALL;
}"
61004,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(syncTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
61005,"public GenericTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<SchedTaskTO>> columns=new ArrayList<IColumn<SchedTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new GTaskModalPage(window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId());
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SchedTaskTO> table=new AjaxFallbackDefaultDataTable<SchedTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),SchedTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new GTaskModalPage(window,new SchedTaskTO());
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}","public GenericTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<SchedTaskTO>> columns=new ArrayList<IColumn<SchedTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new GTaskModalPage(window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SchedTaskTO> table=new AjaxFallbackDefaultDataTable<SchedTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),SchedTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new GTaskModalPage(window,new SchedTaskTO());
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}"
61006,"public PropagationTasks(final String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId());
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public PropagationTasks(final String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
61007,"public SyncTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<SyncTaskTO>> columns=new ArrayList<IColumn<SyncTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new STaskModalPage(window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId());
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SyncTaskTO> table=new AjaxFallbackDefaultDataTable<SyncTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,id,SyncTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new STaskModalPage(window,new SyncTaskTO());
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}","public SyncTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<SyncTaskTO>> columns=new ArrayList<IColumn<SyncTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new STaskModalPage(window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SyncTaskTO> table=new AjaxFallbackDefaultDataTable<SyncTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,id,SyncTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new STaskModalPage(window,new SyncTaskTO());
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}"
61008,"/** 
 * Start execution for the specified TaskTO.
 * @param taskId task id
 */
public void startExecution(final Long taskId){
  restTemplate.getForObject(baseURL + ""String_Node_Str"",TaskExecTO.class,taskId);
}","/** 
 * Start execution for the specified TaskTO.
 * @param taskId task id
 */
public void startExecution(final Long taskId,boolean dryRun){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",null,TaskExecTO.class,taskId,dryRun);
}"
61009,"public ResourceOperations update(SyncopeUser user,UserMod userMod) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (userMod.getPassword() != null) {
    int passwordHistorySize=0;
    try {
      Policy policy=policyDAO.getGlobalPasswordPolicy();
      PasswordPolicy passwordPolicy=policy.getSpecification();
      passwordHistorySize=passwordPolicy.getHistoryLength();
    }
 catch (    Throwable ignore) {
    }
    user.setPassword(userMod.getPassword(),getCipherAlgoritm(),passwordHistorySize);
  }
  ResourceOperations resourceOperations=fill(user,userMod,AttributableUtil.USER,scce);
  Set<Long> membershipToBeAddedRoleIds=new HashSet<Long>();
  for (  MembershipMod membershipToBeAdded : userMod.getMembershipsToBeAdded()) {
    membershipToBeAddedRoleIds.add(membershipToBeAdded.getRole());
  }
  Membership membership=null;
  for (  Long membershipToBeRemovedId : userMod.getMembershipsToBeRemoved()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + membershipToBeRemovedId);
    }
    membership=membershipDAO.find(membershipToBeRemovedId);
    if (membership == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + membershipToBeRemovedId);
      }
    }
 else {
      for (      TargetResource resource : membership.getSyncopeRole().getTargetResources()) {
        if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
          resourceOperations.add(ResourceOperationType.DELETE,resource);
        }
      }
      membership=user.getMembership(membership.getSyncopeRole().getId());
      if (membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
        Set<Long> attributeIds=new HashSet<Long>(membership.getAttributes().size());
        for (        AbstractAttr attribute : membership.getAttributes()) {
          attributeIds.add(attribute.getId());
        }
        for (        Long attributeId : attributeIds) {
          attributeDAO.delete(attributeId,MAttr.class);
        }
        attributeIds.clear();
        for (        AbstractDerAttr derivedAttribute : membership.getDerivedAttributes()) {
          attributeIds.add(derivedAttribute.getId());
        }
        for (        Long derivedAttributeId : attributeIds) {
          derivedAttributeDAO.delete(derivedAttributeId,MDerAttr.class);
        }
        attributeIds.clear();
        for (        AbstractVirAttr virtulaAttribute : membership.getVirtualAttributes()) {
          attributeIds.add(virtulaAttribute.getId());
        }
        for (        Long virtualAttributeId : attributeIds) {
          virtualAttributeDAO.delete(virtualAttributeId,MVirAttr.class);
        }
      }
 else {
        user.removeMembership(membership);
        membershipDAO.delete(membershipToBeRemovedId);
      }
    }
  }
  SyncopeRole role=null;
  for (  MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + membershipMod.getRole() + ""String_Node_Str"");
    }
    role=roleDAO.find(membershipMod.getRole());
    if (role == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + membershipMod.getRole());
      }
    }
 else {
      membership=user.getMembership(role.getId());
      if (membership == null) {
        membership=new Membership();
        membership.setSyncopeRole(role);
        membership.setSyncopeUser(user);
        user.addMembership(membership);
        resourceOperations.addAll(ResourceOperationType.UPDATE,role.getTargetResources());
      }
      resourceOperations.merge(fill(membership,membershipMod,AttributableUtil.MEMBERSHIP,scce));
    }
  }
  return resourceOperations;
}","public ResourceOperations update(SyncopeUser user,UserMod userMod) throws SyncopeClientCompositeErrorException {
  ResourceOperations resOps=new ResourceOperations();
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (userMod.getPassword() != null) {
    int passwordHistorySize=0;
    try {
      Policy policy=policyDAO.getGlobalPasswordPolicy();
      PasswordPolicy passwordPolicy=policy.getSpecification();
      passwordHistorySize=passwordPolicy.getHistoryLength();
    }
 catch (    Throwable ignore) {
    }
    user.setPassword(userMod.getPassword(),getCipherAlgoritm(),passwordHistorySize);
    resOps.addAll(ResourceOperationType.UPDATE,user.getTargetResources());
  }
  resOps.merge(fill(user,userMod,AttributableUtil.USER,scce));
  Set<Long> membershipToBeAddedRoleIds=new HashSet<Long>();
  for (  MembershipMod membershipToBeAdded : userMod.getMembershipsToBeAdded()) {
    membershipToBeAddedRoleIds.add(membershipToBeAdded.getRole());
  }
  Membership membership=null;
  for (  Long membershipId : userMod.getMembershipsToBeRemoved()) {
    LOG.debug(""String_Node_Str"",membershipId);
    membership=membershipDAO.find(membershipId);
    if (membership == null) {
      LOG.debug(""String_Node_Str"",membershipId);
    }
 else {
      for (      TargetResource resource : membership.getSyncopeRole().getTargetResources()) {
        if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
          resOps.add(ResourceOperationType.DELETE,resource);
        }
      }
      membership=user.getMembership(membership.getSyncopeRole().getId());
      if (membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
        Set<Long> attributeIds=new HashSet<Long>(membership.getAttributes().size());
        for (        AbstractAttr attribute : membership.getAttributes()) {
          attributeIds.add(attribute.getId());
        }
        for (        Long attributeId : attributeIds) {
          attributeDAO.delete(attributeId,MAttr.class);
        }
        attributeIds.clear();
        for (        AbstractDerAttr derAttr : membership.getDerivedAttributes()) {
          attributeIds.add(derAttr.getId());
        }
        for (        Long derAttrId : attributeIds) {
          derAttrDAO.delete(derAttrId,MDerAttr.class);
        }
        attributeIds.clear();
        for (        AbstractVirAttr virAttr : membership.getVirtualAttributes()) {
          attributeIds.add(virAttr.getId());
        }
        for (        Long virAttrId : attributeIds) {
          virAttrDAO.delete(virAttrId,MVirAttr.class);
        }
        attributeIds.clear();
      }
 else {
        user.removeMembership(membership);
        membershipDAO.delete(membershipId);
      }
    }
  }
  SyncopeRole role=null;
  for (  MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {
    LOG.debug(""String_Node_Str"",membershipMod.getRole());
    role=roleDAO.find(membershipMod.getRole());
    if (role == null) {
      LOG.debug(""String_Node_Str"",membershipMod.getRole());
    }
 else {
      membership=user.getMembership(role.getId());
      if (membership == null) {
        membership=new Membership();
        membership.setSyncopeRole(role);
        membership.setSyncopeUser(user);
        user.addMembership(membership);
        resOps.addAll(ResourceOperationType.UPDATE,role.getTargetResources());
      }
      resOps.merge(fill(membership,membershipMod,AttributableUtil.MEMBERSHIP,scce));
    }
  }
  return resOps;
}"
61010,"@Test public final void update(){
  PolicyTO policyTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PasswordPolicyTO.class,2L);
  assertNotNull(""String_Node_Str"",policyTO);
  PasswordPolicy policy=((PasswordPolicyTO)policyTO).getSpecification();
  policy.setMaxLength(22);
  PasswordPolicyMod policyMod=new PasswordPolicyMod();
  policyMod.setId(policyTO.getId());
  policyMod.setType(PolicyType.GLOBAL_PASSWORD);
  policyMod.setSpecification(policy);
  policyMod.setDescription(policyTO.getDescription());
  policyTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",policyMod,PasswordPolicyTO.class);
  assertNotNull(policyTO);
  assertEquals(PolicyType.GLOBAL_PASSWORD,policyTO.getType());
  assertEquals(22,((PasswordPolicyTO)policyTO).getSpecification().getMaxLength());
  assertEquals(8,((PasswordPolicyTO)policyTO).getSpecification().getMinLength());
}","@Test public final void update(){
  PasswordPolicyTO policyTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PasswordPolicyTO.class,2L);
  policyTO.setType(PolicyType.PASSWORD);
  policyTO.setId(0);
  policyTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",policyTO,PasswordPolicyTO.class);
  policyTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PasswordPolicyTO.class,policyTO.getId());
  assertNotNull(""String_Node_Str"",policyTO);
  PasswordPolicy policy=((PasswordPolicyTO)policyTO).getSpecification();
  policy.setMaxLength(22);
  PasswordPolicyMod policyMod=new PasswordPolicyMod();
  policyMod.setId(policyTO.getId());
  policyMod.setType(PolicyType.PASSWORD);
  policyMod.setSpecification(policy);
  policyMod.setDescription(policyTO.getDescription());
  policyTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",policyMod,PasswordPolicyTO.class);
  assertNotNull(policyTO);
  assertEquals(PolicyType.PASSWORD,policyTO.getType());
  assertEquals(22,((PasswordPolicyTO)policyTO).getSpecification().getMaxLength());
  assertEquals(8,((PasswordPolicyTO)policyTO).getSpecification().getMinLength());
}"
61011,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  try {
    final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
    for (    String entitlement : entitlementsPalette.getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    if (createFlag) {
      roleRestClient.createRole(roleTO);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        roleRestClient.updateRole(roleMod);
      }
    }
    ((Roles)callerPageRef.getPage()).setOperationResult(true);
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  try {
    final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
    for (    String entitlement : entitlementsPalette.getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    if (createFlag) {
      roleRestClient.createRole(roleTO);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        roleRestClient.updateRole(roleMod);
      }
    }
    ((Roles)callerPageRef.getPage()).setOperationResult(true);
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
61012,"/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inheritAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inheritAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritDerivedAttributes=new CheckBox(""String_Node_Str"");
  inheritDerivedAttributes.setOutputMarkupId(true);
  form.add(inheritDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritVirtualAttributes=new CheckBox(""String_Node_Str"");
  inheritVirtualAttributes.setOutputMarkupId(true);
  form.add(inheritVirtualAttributes);
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inheritAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inheritAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritDerivedAttributes=new CheckBox(""String_Node_Str"");
  inheritDerivedAttributes.setOutputMarkupId(true);
  form.add(inheritDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritVirtualAttributes=new CheckBox(""String_Node_Str"");
  inheritVirtualAttributes.setOutputMarkupId(true);
  form.add(inheritVirtualAttributes);
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
61013,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  final PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(userTO.getId() == 0);
  password.setResetPassword(true);
  form.add(password);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  form.add(mandatoryPassword);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  final PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(userTO.getId() == 0);
  password.setResetPassword(true);
  form.add(password);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  form.add(mandatoryPassword);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}"
61014,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((Users)callerPageRef.getPage()).setModalResult(true);
    ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((Users)callerPageRef.getPage()).setModalResult(true);
    ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
61015,"public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
      schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        AjaxRequestTarget art){
          mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
        }
      }
);
      schemaAttrChoice.setOutputMarkupId(true);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          schemaAttrChoice.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      schemaAttrChoice.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new ResourceModel(""String_Node_Str""));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
form.add(addSchemaMappingBtn);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  updateResourceSchemaNames(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel sourceAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      sourceAttrNames.setChoices(resourceSchemaNames);
      sourceAttrNames.setRequired(true);
      sourceAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getSourceMappingType() == null) {
        sourceAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          sourceAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      sourceAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  sourceAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(sourceAttrNames);
final SourceMappingTypesDropDownChoice mappingTypesPanel=new SourceMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(sourceMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel destAttrName;
if (resourceSchemaNames.isEmpty()) {
destAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
destAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)destAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
destAttrName.setRequired(required);
destAttrName.setEnabled(required);
destAttrName.setStyleShet(""String_Node_Str"");
item.add(destAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
destAttrName.setModelObject(null);
destAttrName.setRequired(!accountId.getModelObject());
target.addComponent(destAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
destAttrName.setModelObject(null);
destAttrName.setRequired(!password.getModelObject());
target.addComponent(destAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO.getConnectorId());
target.addComponent(mappingContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
61016,"public SourceMappingTypesDropDownChoice(final String id,final PropertyModel<SourceMappingType> model,final IModel imodel,final DropDownChoice<String> chooserToPopulate){
  super(id,model,imodel);
  add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
        private static final long serialVersionUID=5275935387613157437L;
        @Override protected List<String> load(){
          List<String> result;
switch (model.getObject()) {
case UserSchema:
            result=uSchemaAttrNames;
          break;
case UserDerivedSchema:
        result=uDerSchemaAttrNames;
      break;
case UserVirtualSchema:
    result=uVirSchemaAttrNames;
  break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}
}
);
}","public SourceMappingTypesDropDownChoice(final String id,final String name,final PropertyModel<SourceMappingType> model,final AjaxDropDownChoicePanel<String> chooserToPopulate){
  super(id,name,model,false);
  field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setRequired(true);
      chooserToPopulate.setEnabled(true);
      final List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.addComponent(chooserToPopulate);
}
}
);
}"
61017,"@Override protected List<String> load(){
  List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}","@Override protected List<SourceMappingType> load(){
  return Arrays.asList(SourceMappingType.values());
}"
61018,"@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
  schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
      mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
    }
  }
);
  schemaAttrChoice.setOutputMarkupId(true);
  if (mappingTO.getSourceMappingType() == null) {
    schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      schemaAttrChoice.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  schemaAttrChoice.setChoices(uDerSchemaAttrNames);
break;
case UserVirtualSchema:
schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new ResourceModel(""String_Node_Str""));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}","@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final AjaxDropDownChoicePanel sourceAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
  sourceAttrNames.setChoices(resourceSchemaNames);
  sourceAttrNames.setRequired(true);
  sourceAttrNames.setStyleShet(""String_Node_Str"");
  if (mappingTO.getSourceMappingType() == null) {
    sourceAttrNames.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      sourceAttrNames.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  sourceAttrNames.setChoices(uDerSchemaAttrNames);
break;
case UserVirtualSchema:
sourceAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(sourceAttrNames);
final SourceMappingTypesDropDownChoice mappingTypesPanel=new SourceMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(sourceMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel destAttrName;
if (resourceSchemaNames.isEmpty()) {
destAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
destAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)destAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
destAttrName.setRequired(required);
destAttrName.setEnabled(required);
destAttrName.setStyleShet(""String_Node_Str"");
item.add(destAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
destAttrName.setModelObject(null);
destAttrName.setRequired(!accountId.getModelObject());
target.addComponent(destAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
destAttrName.setModelObject(null);
destAttrName.setRequired(!password.getModelObject());
target.addComponent(destAttrName);
}
}
);
item.add(password);
}"
61019,"@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setRequired(true);
  chooserToPopulate.setEnabled(true);
  final List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.addComponent(chooserToPopulate);
}"
61020,"public AjaxTextFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new TextField(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      AjaxRequestTarget art){
      }
    }
);
  }
}","public AjaxTextFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new AutoCompleteTextField<String>(""String_Node_Str"",model){
    private static final long serialVersionUID=-6648767303091874219L;
    @Override protected Iterator<String> getChoices(    String input){
      final Pattern pattern=Pattern.compile(Pattern.quote(input) + ""String_Node_Str"",Pattern.CASE_INSENSITIVE);
      final List<String> result=new ArrayList<String>();
      for (      String choice : choices) {
        if (pattern.matcher(choice).matches()) {
          result.add(choice);
        }
      }
      return result.iterator();
    }
  }
;
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      AjaxRequestTarget art){
      }
    }
);
  }
}"
61021,"@Override @Before public void setUp() throws Exception {
  super.setUp();
  selenium=new DefaultSelenium(""String_Node_Str"",4444,""String_Node_Str"",""String_Node_Str"");
  selenium.start();
  selenium.open(""String_Node_Str"");
  selenium.type(""String_Node_Str"",ADMIN);
  selenium.type(""String_Node_Str"",PASSWORD);
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
}","@Override @Before public void setUp() throws Exception {
  super.setUp(BASE_URL,""String_Node_Str"");
  selenium.open(""String_Node_Str"");
  selenium.type(""String_Node_Str"",ADMIN);
  selenium.type(""String_Node_Str"",PASSWORD);
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
}"
61022,"public void setPropagationOperation(PropagationOperation resourceOperationType){
  this.propagationOperation=resourceOperationType;
}","public void setPropagationOperation(PropagationOperation propagationOperation){
  this.propagationOperation=propagationOperation;
}"
61023,"public String get(final WebRequest request,final String key){
  String result=null;
  Cookie prefCookie=request.getCookie(Constants.PREFS_COOKIE_NAME);
  if (prefCookie != null) {
    Map<String,String> prefs;
    try {
      prefs=getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"" + prefCookie.getValue(),e);
      prefs=new HashMap<String,String>();
    }
    result=prefs.get(key);
  }
 else {
    LOG.warn(""String_Node_Str"" + Constants.PREFS_COOKIE_NAME);
  }
  return result;
}","public String get(final WebRequest request,final String key){
  String result=null;
  Cookie prefCookie=request.getCookie(Constants.PREFS_COOKIE_NAME);
  if (prefCookie != null) {
    Map<String,String> prefs;
    try {
      prefs=getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",prefCookie.getValue(),e);
      prefs=new HashMap<String,String>();
    }
    result=prefs.get(key);
  }
 else {
    LOG.debug(""String_Node_Str"",Constants.PREFS_COOKIE_NAME);
  }
  return result;
}"
61024,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
61025,"@Override public void onClick(AjaxRequestTarget target){
  createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
    public Page createPage(){
      ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
      return form;
    }
  }
);
  createConnectorWin.show(target);
}","@Override public void onClick(AjaxRequestTarget target){
  createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
    private static final long serialVersionUID=-7834632442532690940L;
    @Override public Page createPage(){
      ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
      return form;
    }
  }
);
  createConnectorWin.show(target);
}"
61026,"/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param current window
 * @param container to refresh
 */
public void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}","/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param current window
 * @param container to refresh
 */
private void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}"
61027,"public Connectors(PageParameters parameters){
  super(parameters);
  add(createConnectorWin=new ModalWindow(""String_Node_Str""));
  add(editConnectorWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConnInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConnInstanceTO>> cellItem,    final String componentId,    final IModel<ConnInstanceTO> model){
      final ConnInstanceTO connectorTO=model.getObject();
      final AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          editConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
            @Override public Page createPage(){
              return new ConnectorModalPage(Connectors.this,editConnectorWin,connectorTO,false);
            }
          }
);
          editConnectorWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConnInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConnInstanceTO>> cellItem,    final String componentId,    final IModel<ConnInstanceTO> model){
      final ConnInstanceTO connectorTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            if (!checkDeleteIsForbidden(connectorTO)) {
              restClient.delete(connectorTO.getId());
              info(getString(""String_Node_Str""));
            }
 else {
              error(getString(""String_Node_Str""));
            }
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"" + connectorTO.getId(),e);
          }
          target.addComponent(container);
          target.addComponent(feedbackPanel);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConnectorsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createConnectorWin,container);
  setWindowClosedCallback(editConnectorWin,container);
  createConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConnectorWin.setInitialHeight(WIN_HEIGHT);
  createConnectorWin.setInitialWidth(WIN_WIDTH);
  createConnectorWin.setPageMapName(""String_Node_Str"");
  createConnectorWin.setCookieName(""String_Node_Str"");
  editConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConnectorWin.setInitialHeight(WIN_HEIGHT);
  editConnectorWin.setInitialWidth(WIN_WIDTH);
  editConnectorWin.setPageMapName(""String_Node_Str"");
  editConnectorWin.setCookieName(""String_Node_Str"");
  AjaxLink createConnectorLink=new IndicatingAjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
          return form;
        }
      }
);
      createConnectorWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConnectorLink,ENABLE,allowedRoles);
  add(createConnectorLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public Connectors(PageParameters parameters){
  super(parameters);
  add(createConnectorWin=new ModalWindow(""String_Node_Str""));
  add(editConnectorWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConnInstanceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConnInstanceTO>> cellItem,    final String componentId,    final IModel<ConnInstanceTO> model){
      final ConnInstanceTO connectorTO=model.getObject();
      final AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConnectorModalPage(Connectors.this,editConnectorWin,connectorTO,false);
            }
          }
);
          editConnectorWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConnInstanceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConnInstanceTO>> cellItem,    final String componentId,    final IModel<ConnInstanceTO> model){
      final ConnInstanceTO connectorTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            if (!checkDeleteIsForbidden(connectorTO)) {
              restClient.delete(connectorTO.getId());
              info(getString(""String_Node_Str""));
            }
 else {
              error(getString(""String_Node_Str""));
            }
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"" + connectorTO.getId(),e);
          }
          target.addComponent(container);
          target.addComponent(feedbackPanel);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConnectorsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createConnectorWin,container);
  setWindowClosedCallback(editConnectorWin,container);
  createConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConnectorWin.setInitialHeight(WIN_HEIGHT);
  createConnectorWin.setInitialWidth(WIN_WIDTH);
  createConnectorWin.setPageMapName(""String_Node_Str"");
  createConnectorWin.setCookieName(""String_Node_Str"");
  editConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConnectorWin.setInitialHeight(WIN_HEIGHT);
  editConnectorWin.setInitialWidth(WIN_WIDTH);
  editConnectorWin.setPageMapName(""String_Node_Str"");
  editConnectorWin.setCookieName(""String_Node_Str"");
  AjaxLink createConnectorLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    AjaxRequestTarget target){
      createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
          return form;
        }
      }
);
      createConnectorWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConnectorLink,ENABLE,allowedRoles);
  add(createConnectorLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
61028,"public Page createPage(){
  ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
  return form;
}","@Override public Page createPage(){
  ConnectorModalPage form=new ConnectorModalPage(Connectors.this,editConnectorWin,new ConnInstanceTO(),true);
  return form;
}"
61029,"public void onClose(AjaxRequestTarget target){
  target.addComponent(container);
  if (operationResult) {
    info(getString(""String_Node_Str""));
    target.addComponent(feedbackPanel);
    operationResult=false;
  }
}","@Override public void onClose(AjaxRequestTarget target){
  target.addComponent(container);
  if (operationResult) {
    info(getString(""String_Node_Str""));
    target.addComponent(feedbackPanel);
    operationResult=false;
  }
}"
61030,"@Override public void populateItem(final Item<ICellPopulator<ConnInstanceTO>> cellItem,final String componentId,final IModel<ConnInstanceTO> model){
  final ConnInstanceTO connectorTO=model.getObject();
  AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    @Override public void onClick(    final AjaxRequestTarget target){
      try {
        if (!checkDeleteIsForbidden(connectorTO)) {
          restClient.delete(connectorTO.getId());
          info(getString(""String_Node_Str""));
        }
 else {
          error(getString(""String_Node_Str""));
        }
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str""));
        LOG.error(""String_Node_Str"" + connectorTO.getId(),e);
      }
      target.addComponent(container);
      target.addComponent(feedbackPanel);
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  cellItem.add(panel);
}","@Override public void populateItem(final Item<ICellPopulator<ConnInstanceTO>> cellItem,final String componentId,final IModel<ConnInstanceTO> model){
  final ConnInstanceTO connectorTO=model.getObject();
  AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      try {
        if (!checkDeleteIsForbidden(connectorTO)) {
          restClient.delete(connectorTO.getId());
          info(getString(""String_Node_Str""));
        }
 else {
          error(getString(""String_Node_Str""));
        }
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str""));
        LOG.error(""String_Node_Str"" + connectorTO.getId(),e);
      }
      target.addComponent(container);
      target.addComponent(feedbackPanel);
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  cellItem.add(panel);
}"
61031,"@Override public IModel<ConnInstanceTO> model(final ConnInstanceTO connector){
  return new AbstractReadOnlyModel<ConnInstanceTO>(){
    @Override public ConnInstanceTO getObject(){
      return connector;
    }
  }
;
}","@Override public IModel<ConnInstanceTO> model(final ConnInstanceTO connector){
  return new AbstractReadOnlyModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-6033068018293569398L;
    @Override public ConnInstanceTO getObject(){
      return connector;
    }
  }
;
}"
61032,"protected void onUpdate(AjaxRequestTarget target){
  prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table.setRowsPerPage(paginatorRows);
  target.addComponent(container);
}","@Override protected void onUpdate(AjaxRequestTarget target){
  prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONNECTORS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table.setRowsPerPage(paginatorRows);
  target.addComponent(container);
}"
61033,"@Override public void setSchemaModalPage(final BasePage basePage,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new DerivedSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  final AjaxTextFieldPanel expression=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  expression.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      if (createFlag) {
        restClient.createDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
 else {
        restClient.updateDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
      Schema callerPage=(Schema)basePage;
      callerPage.setOperationResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(expression);
  schemaForm.add(submit);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final BasePage basePage,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new DerivedSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  final AjaxTextFieldPanel expression=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  expression.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      if (createFlag) {
        restClient.createDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
 else {
        restClient.updateDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
      Schema callerPage=(Schema)basePage;
      callerPage.setOperationResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(expression);
  schemaForm.add(submit);
  add(schemaForm);
}"
61034,"public DisplayAttributesModalPage(final Users basePage,final IModel<List<String>> schemaNames,final ModalWindow window){
  super();
  Form userAttributesForm=new Form(""String_Node_Str"");
  userAttributesForm.setModel(new CompoundPropertyModel(this));
  selectedSchemas=prefMan.getList(getWebRequestCycle().getWebRequest(),Constants.PREF_USERS_ATTRIBUTES_VIEW);
  userAttributesForm.add(new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),schemaNames));
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      prefMan.setList(getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_USERS_ATTRIBUTES_VIEW,selectedSchemas);
      basePage.setModalResult(true);
      window.close(target);
    }
  }
;
  userAttributesForm.add(submit);
  add(userAttributesForm);
}","public DisplayAttributesModalPage(final Users basePage,final IModel<List<String>> schemaNames,final ModalWindow window){
  super();
  Form userAttributesForm=new Form(""String_Node_Str"");
  userAttributesForm.setModel(new CompoundPropertyModel(this));
  selectedSchemas=prefMan.getList(getWebRequestCycle().getWebRequest(),Constants.PREF_USERS_ATTRIBUTES_VIEW);
  userAttributesForm.add(new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),schemaNames));
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      prefMan.setList(getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_USERS_ATTRIBUTES_VIEW,selectedSchemas);
      basePage.setModalResult(true);
      window.close(target);
    }
  }
;
  userAttributesForm.add(submit);
  add(userAttributesForm);
}"
61035,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public GTaskModalPage(final BasePage basePage,final ModalWindow window,final SchedTaskTO taskTO){
  super(basePage,window,taskTO);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobClasses());
      return classes;
    }
  }
;
  final DropDownChoice<String> className=new DropDownChoice(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),classNames);
  profile.add(className);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public GTaskModalPage(final BasePage basePage,final ModalWindow window,final SchedTaskTO taskTO){
  super(basePage,window,taskTO);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> className=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  className.setChoices(classNames.getObject());
  className.addRequiredLabel();
  className.setEnabled(taskTO.getId() == 0);
  className.setStyleShet(""String_Node_Str"");
  profile.add(className);
}"
61036,"public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final UserTO userTO){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      userTO.removeMembership(membershipTO);
      userTO.addMembership(membershipTO);
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO));
  add(form);
}","public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final UserTO userTO){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      userTO.removeMembership(membershipTO);
      userTO.addMembership(membershipTO);
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO));
  add(form);
}"
61037,"public PasswordPolicyModalPage(final PasswordPoliciesPanel basePage,final ModalWindow window,final PasswordPolicyTO policyTO){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setOutputMarkupId(true);
  add(form);
  final AjaxTextFieldPanel policyid=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  policyid.setEnabled(false);
  policyid.setStyleShet(""String_Node_Str"");
  form.add(policyid);
  final AjaxTextFieldPanel description=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  description.addRequiredLabel();
  description.setStyleShet(""String_Node_Str"");
  form.add(description);
  final AjaxDropDownChoicePanel<PolicyType> type=new AjaxDropDownChoicePanel<PolicyType>(""String_Node_Str"",""String_Node_Str"",new PropertyModel<PolicyType>(policyTO,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_PASSWORD,PolicyType.PASSWORD}));
  type.addRequiredLabel();
  form.add(type);
  final PasswordPolicy policy=policyTO.getSpecification() != null ? policyTO.getSpecification() : new PasswordPolicy();
  form.add(new PolicyBeanPanel(""String_Node_Str"",policy));
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      policyTO.setSpecification(policy);
      try {
        if (policyTO.getId() > 0) {
          final PasswordPolicyMod policyMod=new PasswordPolicyMod();
          policyMod.setId(policyTO.getId());
          policyMod.setType(policyTO.getType());
          policyMod.setSpecification(policyTO.getSpecification());
          policyMod.setDescription(policyTO.getDescription());
          policyRestClient.updatePasswordPolicy(policyMod);
        }
 else {
          policyRestClient.createPasswordPolicy(policyTO);
        }
        window.close(target);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str""));
        target.addComponent(getPage().get(""String_Node_Str""));
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(getPage().get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
}","public PasswordPolicyModalPage(final PasswordPoliciesPanel basePage,final ModalWindow window,final PasswordPolicyTO policyTO){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setOutputMarkupId(true);
  add(form);
  final AjaxTextFieldPanel policyid=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  policyid.setEnabled(false);
  policyid.setStyleShet(""String_Node_Str"");
  form.add(policyid);
  final AjaxTextFieldPanel description=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  description.addRequiredLabel();
  description.setStyleShet(""String_Node_Str"");
  form.add(description);
  final AjaxDropDownChoicePanel<PolicyType> type=new AjaxDropDownChoicePanel<PolicyType>(""String_Node_Str"",""String_Node_Str"",new PropertyModel<PolicyType>(policyTO,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_PASSWORD,PolicyType.PASSWORD}));
  type.addRequiredLabel();
  form.add(type);
  final PasswordPolicy policy=policyTO.getSpecification() != null ? policyTO.getSpecification() : new PasswordPolicy();
  form.add(new PolicyBeanPanel(""String_Node_Str"",policy));
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      policyTO.setSpecification(policy);
      try {
        if (policyTO.getId() > 0) {
          final PasswordPolicyMod policyMod=new PasswordPolicyMod();
          policyMod.setId(policyTO.getId());
          policyMod.setType(policyTO.getType());
          policyMod.setSpecification(policyTO.getSpecification());
          policyMod.setDescription(policyTO.getDescription());
          policyRestClient.updatePasswordPolicy(policyMod);
        }
 else {
          policyRestClient.createPasswordPolicy(policyTO);
        }
        window.close(target);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str""));
        target.addComponent(getPage().get(""String_Node_Str""));
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(getPage().get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
}"
61038,"public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
      schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        AjaxRequestTarget art){
          mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
        }
      }
);
      schemaAttrChoice.setOutputMarkupId(true);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          schemaAttrChoice.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      schemaAttrChoice.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new Model(getString(""String_Node_Str"")));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
form.add(addSchemaMappingBtn);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
      schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        AjaxRequestTarget art){
          mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
        }
      }
);
      schemaAttrChoice.setOutputMarkupId(true);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          schemaAttrChoice.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      schemaAttrChoice.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new ResourceModel(""String_Node_Str""));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
form.add(addSchemaMappingBtn);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
61039,"@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
  schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
      mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
    }
  }
);
  schemaAttrChoice.setOutputMarkupId(true);
  if (mappingTO.getSourceMappingType() == null) {
    schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      schemaAttrChoice.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  schemaAttrChoice.setChoices(uDerSchemaAttrNames);
break;
case UserVirtualSchema:
schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new Model(getString(""String_Node_Str"")));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}","@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
  schemaAttrChoice.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
      mappingTO.setSourceAttrName(schemaAttrChoice.getModelObject());
    }
  }
);
  schemaAttrChoice.setOutputMarkupId(true);
  if (mappingTO.getSourceMappingType() == null) {
    schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      schemaAttrChoice.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  schemaAttrChoice.setChoices(uDerSchemaAttrNames);
break;
case UserVirtualSchema:
schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
final TextField<String> destAttrName=new TextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
destAttrName.setRequired(true);
destAttrName.setLabel(new ResourceModel(""String_Node_Str""));
destAttrName.setOutputMarkupId(true);
destAttrName.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setDestAttrName(destAttrName.getModelObject());
}
}
);
item.add(destAttrName);
final AutoCompleteTextField<String> mandatoryCondirion=new AutoCompleteTextField<String>(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
private static final long serialVersionUID=-6648767303091874219L;
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
;
mandatoryCondirion.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setMandatoryCondition(mandatoryCondirion.getModelObject());
}
}
);
item.add(mandatoryCondirion);
final CheckBox accountId=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
accountId.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setAccountid(accountId.getModelObject());
}
}
);
item.add(accountId);
final CheckBox password=new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""));
password.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget art){
mappingTO.setPassword(password.getModelObject());
}
}
);
item.add(password);
}"
61040,"@Override public ConnInstance save(final ConnInstance connector){
  return entityManager.merge(connector);
}","@Override public ConnInstance save(final ConnInstance connector){
  final ConnInstance merged=entityManager.merge(connector);
  final List<TargetResource> resources=findTargetResources(merged);
  for (  TargetResource resource : resources) {
    try {
      connInstanceLoader.registerConnector(resource);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return merged;
}"
61041,"public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      if (property.getSchema().isRequired()) {
        field.addRequiredLabel();
      }
      item.add(field);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      if (property.getSchema().isRequired()) {
        field.addRequiredLabel();
      }
      item.add(field);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}"
61042,"@Test public void browseEditModal(){
  selenium.setSpeed(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  for (int second=0; ; second++) {
    if (second >= 60) {
      fail(""String_Node_Str"");
    }
    try {
      if (selenium.isElementPresent(""String_Node_Str"")) {
        break;
      }
    }
 catch (    Exception e) {
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  assertEquals(""String_Node_Str"",selenium.getAttribute(""String_Node_Str""));
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
}","@Test public void browseEditModal(){
  selenium.setSpeed(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  for (int second=0; ; second++) {
    if (second >= 60) {
      fail(""String_Node_Str"");
    }
    try {
      if (selenium.isElementPresent(""String_Node_Str"")) {
        break;
      }
    }
 catch (    Exception e) {
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  assertEquals(""String_Node_Str"",selenium.getAttribute(""String_Node_Str""));
  assertEquals(""String_Node_Str"",selenium.getSelectedValue(""String_Node_Str""));
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
}"
61043,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPolicyPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
61044,"/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param window
 * @param container
 */
public void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}","/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param window
 * @param container
 */
private void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}"
61045,"@Override protected void populateItem(final ListItem<LoggerTO> item){
  item.add(new Label(""String_Node_Str""));
  DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
  level.setModel(new IModel<LoggerLevel>(){
    @Override public LoggerLevel getObject(){
      return LoggerLevel.valueOf(item.getModelObject().getLevel());
    }
    @Override public void setObject(    final LoggerLevel object){
      item.getModelObject().setLevel(object.toString());
    }
    @Override public void detach(){
    }
  }
);
  level.setChoices(Arrays.asList(LoggerLevel.values()));
  level.setOutputMarkupId(true);
  level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      boolean result=getId().equals(""String_Node_Str"") ? restClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel()) : consoleLoggerController.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel());
      if (result) {
        info(getString(""String_Node_Str""));
      }
 else {
        info(getString(""String_Node_Str""));
      }
      target.addComponent(feedbackPanel);
    }
  }
);
  item.add(level);
}","@Override protected void populateItem(final ListItem<LoggerTO> item){
  item.add(new Label(""String_Node_Str""));
  DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
  level.setModel(new IModel<LoggerLevel>(){
    private static final long serialVersionUID=-2350428186089596562L;
    @Override public LoggerLevel getObject(){
      return LoggerLevel.valueOf(item.getModelObject().getLevel());
    }
    @Override public void setObject(    final LoggerLevel object){
      item.getModelObject().setLevel(object.toString());
    }
    @Override public void detach(){
    }
  }
);
  level.setChoices(Arrays.asList(LoggerLevel.values()));
  level.setOutputMarkupId(true);
  level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      boolean result=getId().equals(""String_Node_Str"") ? restClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel()) : consoleLoggerController.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel());
      if (result) {
        info(getString(""String_Node_Str""));
      }
 else {
        info(getString(""String_Node_Str""));
      }
      target.addComponent(feedbackPanel);
    }
  }
);
  item.add(level);
}"
61046,"/** 
 * ConfigurationModalPage constructor.
 * @param basePage base
 * @param modalWindow modal-window
 * @param configurationTO
 * @param createFlag true for CREATE and false for UPDATE operation
 */
public ConfigurationModalPage(final BasePage basePage,final ModalWindow window,final ConfigurationTO configurationTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"",new CompoundPropertyModel(configurationTO));
  form.add(key=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  key.setEnabled(createFlag);
  key.setRequired(true);
  form.add(value=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  value.setRequired(true);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      boolean res=false;
      if (createFlag) {
        res=configurationsRestClient.createConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
 else {
        res=configurationsRestClient.updateConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
      if (res) {
        Configuration callerPage=(Configuration)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * ConfigurationModalPage constructor.
 * @param basePage base
 * @param modalWindow modal-window
 * @param configurationTO
 * @param createFlag true for CREATE and false for UPDATE operation
 */
public ConfigurationModalPage(final BasePage basePage,final ModalWindow window,final ConfigurationTO configurationTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"",new CompoundPropertyModel(configurationTO));
  final AjaxTextFieldPanel key=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str""),false);
  form.add(key);
  key.setEnabled(createFlag);
  key.addRequiredLabel();
  final AjaxTextFieldPanel value=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str""),false);
  form.add(value);
  value.setEnabled(createFlag);
  value.addRequiredLabel();
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      boolean res=false;
      if (createFlag) {
        res=configurationsRestClient.createConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
 else {
        res=configurationsRestClient.updateConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
      if (res) {
        Configuration callerPage=(Configuration)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
61047,"private void doExecuteAction(final SyncopeUser user,final String action,final Map<String,Object> moreVariables) throws WorkflowException {
  final Map<String,Object> variables=new HashMap<String,Object>();
  variables.put(SYNCOPE_USER,user);
  variables.put(ACTION,action);
  if (moreVariables != null && !moreVariables.isEmpty()) {
    variables.putAll(moreVariables);
  }
  if (StringUtils.isBlank(user.getWorkflowId())) {
    throw new WorkflowException(new NotFoundException(""String_Node_Str""));
  }
  List<Task> tasks=taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();
  if (tasks.isEmpty() || tasks.size() > 1) {
    throw new WorkflowException(new RuntimeException(""String_Node_Str"" + tasks.size()));
  }
  try {
    taskService.complete(tasks.get(0).getId(),variables);
  }
 catch (  ActivitiException e) {
    throw new WorkflowException(e);
  }
}","private void doExecuteAction(final SyncopeUser user,final String action,final Map<String,Object> moreVariables) throws WorkflowException {
  final Map<String,Object> variables=new HashMap<String,Object>();
  variables.put(SYNCOPE_USER,user);
  variables.put(ACTION,action);
  if (moreVariables != null && !moreVariables.isEmpty()) {
    variables.putAll(moreVariables);
  }
  if (StringUtils.isBlank(user.getWorkflowId())) {
    throw new WorkflowException(new NotFoundException(""String_Node_Str""));
  }
  List<Task> tasks=taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();
  if (tasks.size() != 1) {
    LOG.warn(""String_Node_Str"",tasks.size());
  }
 else {
    try {
      taskService.complete(tasks.get(0).getId(),variables);
    }
 catch (    ActivitiException e) {
      throw new WorkflowException(e);
    }
  }
}"
61048,"@Test public final void read(){
  PropagationTaskTO taskTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO.class,1);
  assertNotNull(taskTO);
  assertNotNull(taskTO.getExecutions());
  assertFalse(taskTO.getExecutions().isEmpty());
}","@Test public final void read(){
  PropagationTaskTO taskTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO.class,3);
  assertNotNull(taskTO);
  assertNotNull(taskTO.getExecutions());
  assertTrue(taskTO.getExecutions().isEmpty());
}"
61049,"@Test public final void create(){
  List<PropagationTaskTO> tasks=Arrays.asList(restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO[].class));
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
  long maxId=Long.MIN_VALUE;
  for (  PropagationTaskTO task : tasks) {
    if (task.getId() > maxId) {
      maxId=task.getId();
    }
  }
  UserTO userTO=getSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(8L);
  userTO.addMembership(membershipTO);
  AttributeTO nullValueAttributeTO=new AttributeTO();
  nullValueAttributeTO.setSchema(""String_Node_Str"");
  nullValueAttributeTO.setValues(null);
  membershipTO.addAttribute(nullValueAttributeTO);
  AttributeTO attrWithInvalidSchemaTO=new AttributeTO();
  attrWithInvalidSchemaTO.setSchema(""String_Node_Str"");
  attrWithInvalidSchemaTO.addValue(""String_Node_Str"");
  userTO.addAttribute(attrWithInvalidSchemaTO);
  nullValueAttributeTO=new AttributeTO();
  nullValueAttributeTO.setSchema(""String_Node_Str"");
  nullValueAttributeTO.addValue(null);
  userTO.addAttribute(nullValueAttributeTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(newUserTO);
  assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));
  WorkflowActionsTO workflowActions=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",WorkflowActionsTO.class,newUserTO.getId());
  assertTrue(workflowActions.getActions().equals(Collections.singleton(Constants.ACTION_ACTIVATE)));
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  newUserTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",UserTO.class,newUserTO.getId());
  assertNotNull(newUserTO);
  assertNotNull(newUserTO.getVirtualAttributeMap());
  assertNotNull(newUserTO.getVirtualAttributeMap().get(""String_Node_Str""));
  assertFalse(newUserTO.getVirtualAttributeMap().get(""String_Node_Str"").isEmpty());
  assertEquals(newUserTO.getVirtualAttributeMap().get(""String_Node_Str"").get(0),""String_Node_Str"");
  tasks=Arrays.asList(restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO[].class));
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
  long newMaxId=Long.MIN_VALUE;
  for (  PropagationTaskTO task : tasks) {
    if (task.getId() > newMaxId) {
      newMaxId=task.getId();
    }
  }
  assertEquals(newMaxId,maxId);
  PropagationTaskTO taskTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO.class,newMaxId);
  assertNotNull(taskTO);
  assertTrue(taskTO.getExecutions().isEmpty());
  Boolean verify=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Boolean.class,newUserTO.getId());
  assertTrue(verify);
  verify=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Boolean.class,newUserTO.getId());
  assertFalse(verify);
  userTO=getSampleTO(""String_Node_Str"");
  for (  AttributeTO attr : userTO.getAttributes()) {
    if (""String_Node_Str"".equals(attr.getSchema())) {
      attr.getValues().clear();
      attr.addValue(""String_Node_Str"");
    }
  }
  SyncopeClientException sce=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    sce=e.getException(SyncopeClientExceptionType.DuplicateUniqueValue);
  }
  assertNotNull(sce);
}","@Test public final void create(){
  List<PropagationTaskTO> tasks=Arrays.asList(restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO[].class));
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
  long maxId=Long.MIN_VALUE;
  for (  PropagationTaskTO task : tasks) {
    if (task.getId() > maxId) {
      maxId=task.getId();
    }
  }
  PropagationTaskTO taskTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO.class,maxId);
  assertNotNull(taskTO);
  int maxTaskExecutions=taskTO.getExecutions().size();
  UserTO userTO=getSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(8L);
  userTO.addMembership(membershipTO);
  AttributeTO nullValueAttributeTO=new AttributeTO();
  nullValueAttributeTO.setSchema(""String_Node_Str"");
  nullValueAttributeTO.setValues(null);
  membershipTO.addAttribute(nullValueAttributeTO);
  AttributeTO attrWithInvalidSchemaTO=new AttributeTO();
  attrWithInvalidSchemaTO.setSchema(""String_Node_Str"");
  attrWithInvalidSchemaTO.addValue(""String_Node_Str"");
  userTO.addAttribute(attrWithInvalidSchemaTO);
  nullValueAttributeTO=new AttributeTO();
  nullValueAttributeTO.setSchema(""String_Node_Str"");
  nullValueAttributeTO.addValue(null);
  userTO.addAttribute(nullValueAttributeTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(newUserTO);
  assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));
  WorkflowActionsTO workflowActions=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",WorkflowActionsTO.class,newUserTO.getId());
  assertTrue(workflowActions.getActions().equals(Collections.singleton(Constants.ACTION_ACTIVATE)));
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  newUserTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",UserTO.class,newUserTO.getId());
  assertNotNull(newUserTO);
  assertNotNull(newUserTO.getVirtualAttributeMap());
  assertNotNull(newUserTO.getVirtualAttributeMap().get(""String_Node_Str""));
  assertFalse(newUserTO.getVirtualAttributeMap().get(""String_Node_Str"").isEmpty());
  assertEquals(newUserTO.getVirtualAttributeMap().get(""String_Node_Str"").get(0),""String_Node_Str"");
  tasks=Arrays.asList(restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO[].class));
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
  long newMaxId=Long.MIN_VALUE;
  for (  PropagationTaskTO task : tasks) {
    if (task.getId() > newMaxId) {
      newMaxId=task.getId();
    }
  }
  assertEquals(newMaxId,maxId);
  taskTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",PropagationTaskTO.class,newMaxId);
  assertNotNull(taskTO);
  assertEquals(maxTaskExecutions,taskTO.getExecutions().size());
  Boolean verify=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Boolean.class,newUserTO.getId());
  assertTrue(verify);
  verify=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Boolean.class,newUserTO.getId());
  assertFalse(verify);
  userTO=getSampleTO(""String_Node_Str"");
  for (  AttributeTO attr : userTO.getAttributes()) {
    if (""String_Node_Str"".equals(attr.getSchema())) {
      attr.getValues().clear();
      attr.addValue(""String_Node_Str"");
    }
  }
  SyncopeClientException sce=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    sce=e.getException(SyncopeClientExceptionType.DuplicateUniqueValue);
  }
  assertNotNull(sce);
}"
61050,"public MembershipModalPage(final ModalWindow window,final MembershipTO membershipTO,final UserTO userTO){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      userTO.removeMembership(membershipTO);
      userTO.addMembership(membershipTO);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO));
  add(form);
}","public MembershipModalPage(final PageReference pageRef,final ModalWindow window,final MembershipTO membershipTO){
  final Form form=new Form(""String_Node_Str"");
  final AbstractBaseBean bean=((BaseModalPage)pageRef.getPage()).getBean();
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ((UserTO)bean).removeMembership(membershipTO);
      ((UserTO)bean).addMembership(membershipTO);
      ((BaseModalPage)pageRef.getPage()).setBean(bean);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (((UserTO)bean).getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO));
  add(form);
}"
61051,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  userTO.removeMembership(membershipTO);
  userTO.addMembership(membershipTO);
  window.close(target);
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ((UserTO)bean).removeMembership(membershipTO);
  ((UserTO)bean).addMembership(membershipTO);
  ((BaseModalPage)pageRef.getPage()).setBean(bean);
  window.close(target);
}"
61052,"private void setupRoleMod(final RoleTO roleTO){
  roleMod=new RoleMod();
  LOG.error(""String_Node_Str"",roleTO);
  LOG.error(""String_Node_Str"",oldRole);
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod.setName(roleTO.getName());
  }
  final List<AttributeTO> newDerivedAttributes=roleTO.getDerivedAttributes();
  final List<AttributeTO> oldDerivedAttributes=oldRole.getDerivedAttributes();
  for (  AttributeTO oldDerivedAttribute : oldDerivedAttributes) {
    roleMod.addDerivedAttributeToBeRemoved(oldDerivedAttribute.getSchema());
  }
  for (  AttributeTO newDerivedAttribute : newDerivedAttributes) {
    roleMod.addDerivedAttributeToBeAdded(newDerivedAttribute.getSchema());
  }
  final List<AttributeTO> newVirtualAttributes=roleTO.getVirtualAttributes();
  final List<AttributeTO> oldVirtualAttributes=oldRole.getVirtualAttributes();
  for (  AttributeTO oldVirtualAttribute : oldVirtualAttributes) {
    roleMod.addVirtualAttributeToBeRemoved(oldVirtualAttribute.getSchema());
  }
  for (  AttributeTO newVirtualAttribute : newVirtualAttributes) {
    roleMod.addVirtualAttributeToBeAdded(newVirtualAttribute.getSchema());
  }
  LOG.error(""String_Node_Str"",roleMod);
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
    roleMod.setEntitlements(roleTO.getEntitlements());
  }
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else {
      roleMod.setEntitlements(oldRole.getEntitlements());
    }
  }
}","private void setupRoleMod(final RoleTO roleTO){
  roleMod=new RoleMod();
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod.setName(roleTO.getName());
  }
  final List<AttributeTO> newDerivedAttributes=roleTO.getDerivedAttributes();
  final List<AttributeTO> oldDerivedAttributes=oldRole.getDerivedAttributes();
  for (  AttributeTO oldDerivedAttribute : oldDerivedAttributes) {
    roleMod.addDerivedAttributeToBeRemoved(oldDerivedAttribute.getSchema());
  }
  for (  AttributeTO newDerivedAttribute : newDerivedAttributes) {
    roleMod.addDerivedAttributeToBeAdded(newDerivedAttribute.getSchema());
  }
  final List<AttributeTO> newVirtualAttributes=roleTO.getVirtualAttributes();
  final List<AttributeTO> oldVirtualAttributes=oldRole.getVirtualAttributes();
  for (  AttributeTO oldVirtualAttribute : oldVirtualAttributes) {
    roleMod.addVirtualAttributeToBeRemoved(oldVirtualAttribute.getSchema());
  }
  for (  AttributeTO newVirtualAttribute : newVirtualAttributes) {
    roleMod.addVirtualAttributeToBeAdded(newVirtualAttribute.getSchema());
  }
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
    roleMod.setEntitlements(roleTO.getEntitlements());
  }
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else {
      roleMod.setEntitlements(oldRole.getEntitlements());
    }
  }
}"
61053,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  final PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(userTO.getId() == 0);
  password.setResetPassword(true);
  form.add(password);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  form.add(mandatoryPassword);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  final PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(userTO.getId() == 0);
  password.setResetPassword(true);
  form.add(password);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  form.add(mandatoryPassword);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}"
61054,"@Override public Page createPage(){
  MembershipModalPage window=new MembershipModalPage(membershipWin,membershipTO,userTO);
  return window;
}","@Override public Page createPage(){
  return new MembershipModalPage(getPage().getPageReference(),membershipWin,membershipTO);
}"
61055,"@Override public void onClose(final AjaxRequestTarget target){
  target.add(container);
}","@Override public void onClose(final AjaxRequestTarget target){
  final AbstractBaseBean bean=((UserModalPage)getPage()).getBean();
  userTO.setMemberships(((UserTO)bean).getMemberships());
  target.add(container);
}"
61056,"@Override protected void populateItem(final ListItem item){
  final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
  item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
  item.add(new Label(""String_Node_Str"",new Model(getRoleName(membershipTO.getRoleId(),roles))));
  AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      membershipWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          MembershipModalPage window=new MembershipModalPage(membershipWin,membershipTO,userTO);
          return window;
        }
      }
);
      membershipWin.show(target);
    }
  }
;
  item.add(editLink);
  AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    @Override public void onClick(    final AjaxRequestTarget target){
      userTO.removeMembership(membershipTO);
      target.add(membershipsContainer);
    }
  }
;
  item.add(deleteLink);
}","@Override protected void populateItem(final ListItem item){
  final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
  item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
  item.add(new Label(""String_Node_Str"",new Model(getRoleName(membershipTO.getRoleId(),roles))));
  AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    AjaxRequestTarget target){
      membershipWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new MembershipModalPage(getPage().getPageReference(),membershipWin,membershipTO);
        }
      }
);
      membershipWin.show(target);
    }
  }
;
  item.add(editLink);
  AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      userTO.removeMembership(membershipTO);
      target.add(membershipsContainer);
    }
  }
;
  item.add(deleteLink);
}"
61057,"@Override protected void onNodeLinkClicked(final Object node,final BaseTree tree,final AjaxRequestTarget target){
  final RoleTO roleTO=(RoleTO)((DefaultMutableTreeNode)node).getUserObject();
  membershipWin.setPageCreator(new ModalWindow.PageCreator(){
    private MembershipTO membershipTO;
    @Override public Page createPage(){
      membershipTO=new MembershipTO();
      membershipTO.setRoleId(roleTO.getId());
      return new MembershipModalPage(membershipWin,membershipTO,userTO);
    }
  }
);
  membershipWin.show(target);
}","@Override protected void onNodeLinkClicked(final Object node,final BaseTree tree,final AjaxRequestTarget target){
  final RoleTO roleTO=(RoleTO)((DefaultMutableTreeNode)node).getUserObject();
  membershipWin.setPageCreator(new ModalWindow.PageCreator(){
    private static final long serialVersionUID=7661763358801821185L;
    private MembershipTO membershipTO;
    @Override public Page createPage(){
      membershipTO=new MembershipTO();
      membershipTO.setRoleId(roleTO.getId());
      return new MembershipModalPage(getPage().getPageReference(),membershipWin,membershipTO);
    }
  }
);
  membershipWin.show(target);
}"
61058,"private void setWindowClosedCallback(final ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
    }
  }
);
}","private void setWindowClosedCallback(final ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final AbstractBaseBean bean=((UserModalPage)getPage()).getBean();
      userTO.setMemberships(((UserTO)bean).getMemberships());
      target.add(container);
    }
  }
);
}"
61059,"public RolesPanel(final String id,final UserTO userTO){
  super(id);
  final ModalWindow membershipWin=new ModalWindow(""String_Node_Str"");
  membershipWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  membershipWin.setCookieName(""String_Node_Str"");
  add(membershipWin);
  final List<RoleTO> roles=roleRestClient.getAllRoles();
  BaseTree tree=new LinkTree(""String_Node_Str"",roleTreeBuilder.build()){
    @Override protected IModel getNodeTextModel(    final IModel model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      final RoleTO roleTO=(RoleTO)((DefaultMutableTreeNode)node).getUserObject();
      membershipWin.setPageCreator(new ModalWindow.PageCreator(){
        private MembershipTO membershipTO;
        @Override public Page createPage(){
          membershipTO=new MembershipTO();
          membershipTO.setRoleId(roleTO.getId());
          return new MembershipModalPage(membershipWin,membershipTO,userTO);
        }
      }
);
      membershipWin.show(target);
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  add(tree);
  ListView<MembershipTO> membershipsView=new ListView<MembershipTO>(""String_Node_Str"",new PropertyModel<List<? extends MembershipTO>>(userTO,""String_Node_Str"")){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model(getRoleName(membershipTO.getRoleId(),roles))));
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          membershipWin.setPageCreator(new ModalWindow.PageCreator(){
            @Override public Page createPage(){
              MembershipModalPage window=new MembershipModalPage(membershipWin,membershipTO,userTO);
              return window;
            }
          }
);
          membershipWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          userTO.removeMembership(membershipTO);
          target.add(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  add(membershipsContainer);
  setWindowClosedCallback(membershipWin,membershipsContainer);
}","public RolesPanel(final String id,final UserTO userTO){
  super(id);
  this.userTO=userTO;
  final WebMarkupContainer membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.setOutputMarkupId(true);
  add(membershipsContainer);
  final ModalWindow membershipWin=new ModalWindow(""String_Node_Str"");
  membershipWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  membershipWin.setCookieName(""String_Node_Str"");
  add(membershipWin);
  final List<RoleTO> roles=roleRestClient.getAllRoles();
  BaseTree tree=new LinkTree(""String_Node_Str"",roleTreeBuilder.build()){
    private static final long serialVersionUID=-5514696922119256101L;
    @Override protected IModel getNodeTextModel(    final IModel model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      final RoleTO roleTO=(RoleTO)((DefaultMutableTreeNode)node).getUserObject();
      membershipWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=7661763358801821185L;
        private MembershipTO membershipTO;
        @Override public Page createPage(){
          membershipTO=new MembershipTO();
          membershipTO.setRoleId(roleTO.getId());
          return new MembershipModalPage(getPage().getPageReference(),membershipWin,membershipTO);
        }
      }
);
      membershipWin.show(target);
    }
  }
;
  tree.setOutputMarkupId(true);
  tree.getTreeState().expandAll();
  add(tree);
  ListView<MembershipTO> membershipsView=new ListView<MembershipTO>(""String_Node_Str"",new PropertyModel<List<? extends MembershipTO>>(userTO,""String_Node_Str"")){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model(getRoleName(membershipTO.getRoleId(),roles))));
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        AjaxRequestTarget target){
          membershipWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new MembershipModalPage(getPage().getPageReference(),membershipWin,membershipTO);
            }
          }
);
          membershipWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          userTO.removeMembership(membershipTO);
          target.add(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer.add(membershipsView);
  setWindowClosedCallback(membershipWin,membershipsContainer);
}"
61060,"@Test public final void create(){
  SchedTaskTO task=new SchedTaskTO();
  task.setJobClassName(SampleJob.class.getName());
  SchedTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",task,SchedTaskTO.class);
  assertNotNull(actual);
  task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SchedTaskTO.class,actual.getId());
  assertNotNull(task);
  assertEquals(actual.getId(),task.getId());
  assertEquals(actual.getJobClassName(),task.getJobClassName());
}","@Test public final void create(){
  SyncTaskTO task=new SyncTaskTO();
  task.setResource(""String_Node_Str"");
  task.addDefaultResource(""String_Node_Str"");
  task.addDefaultRole(8L);
  SyncTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",task,SyncTaskTO.class);
  assertNotNull(actual);
  task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SyncTaskTO.class,actual.getId());
  assertNotNull(task);
  assertEquals(actual.getId(),task.getId());
  assertEquals(actual.getJobClassName(),task.getJobClassName());
}"
61061,"@Test public final void update(){
  SchedTaskTO task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SchedTaskTO.class,4);
  assertNotNull(task);
  SchedTaskMod taskMod=new SchedTaskMod();
  taskMod.setId(4);
  taskMod.setCronExpression(null);
  SchedTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",taskMod,SchedTaskTO.class);
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertNull(actual.getCronExpression());
}","@Test public final void update(){
  SchedTaskTO task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SchedTaskTO.class,5);
  assertNotNull(task);
  SchedTaskMod taskMod=new SchedTaskMod();
  taskMod.setId(5);
  taskMod.setCronExpression(null);
  SchedTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",taskMod,SchedTaskTO.class);
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertNull(actual.getCronExpression());
}"
61062,"protected TaskUtil getTaskUtil(final TaskTO taskTO){
  TaskUtil result=(taskTO instanceof PropagationTaskTO) ? TaskUtil.PROPAGATION : (taskTO instanceof SchedTaskTO) ? TaskUtil.SCHED : (taskTO instanceof SyncTaskTO) ? TaskUtil.SYNC : null;
  if (result == null) {
    LOG.error(""String_Node_Str"" + taskTO.getClass().getName());
    throw new TypeMismatchException(taskTO.getClass().getName(),TaskUtil.class);
  }
  return result;
}","protected TaskUtil getTaskUtil(final TaskTO taskTO){
  TaskUtil result=(taskTO instanceof PropagationTaskTO) ? TaskUtil.PROPAGATION : (taskTO instanceof SyncTaskTO) ? TaskUtil.SYNC : (taskTO instanceof SchedTaskTO) ? TaskUtil.SCHED : null;
  if (result == null) {
    LOG.error(""String_Node_Str"" + taskTO.getClass().getName());
    throw new TypeMismatchException(taskTO.getClass().getName(),TaskUtil.class);
  }
  return result;
}"
61063,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(bundle.getModelValue());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    basePage.setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    basePage.setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(bundle.getModelValue().substring(0,bundle.getModelValue().lastIndexOf('#')));
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    basePage.setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    basePage.setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}"
61064,"public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final TextField connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  TextField displayName=new TextField(""String_Node_Str"");
  displayName.setOutputMarkupId(true);
  displayName.setRequired(true);
  final TextField version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  final DropDownChoice<ConnBundleTO> bundle=new DropDownChoice<ConnBundleTO>(""String_Node_Str"",bundles,new ChoiceRenderer<ConnBundleTO>(""String_Node_Str"",""String_Node_Str""));
  bundle.setModel(new IModel<ConnBundleTO>(){
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      ConnConfProperty property=item.getModelObject();
      item.add(new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName()));
      item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired(),property.getSchema().getHelpMessage()));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final CheckBox resetToken=new CheckBox(""String_Node_Str"",new Model(getString(""String_Node_Str"")));
  resetToken.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final TextField connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  TextField displayName=new TextField(""String_Node_Str"");
  displayName.setOutputMarkupId(true);
  displayName.setRequired(true);
  final TextField version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final DropDownChoice<ConnBundleTO> bundle=new DropDownChoice<ConnBundleTO>(""String_Node_Str"",bundles,new ChoiceRenderer<ConnBundleTO>(){
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  bundle.setModel(new IModel<ConnBundleTO>(){
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      ConnConfProperty property=item.getModelObject();
      item.add(new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName()));
      item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired(),property.getSchema().getHelpMessage()));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue().substring(0,bundle.getModelValue().lastIndexOf('#')));
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final CheckBox resetToken=new CheckBox(""String_Node_Str"",new Model(getString(""String_Node_Str"")));
  resetToken.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}"
61065,"@Override protected void onUpdate(AjaxRequestTarget art){
  if (resetToken.getModelObject()) {
    connectorTO.setSyncToken(null);
  }
}","@Override protected void onUpdate(final AjaxRequestTarget art){
  if (resetToken.getModelObject()) {
    connectorTO.setSyncToken(null);
  }
}"
61066,"public final boolean checkValidity(){
  return name != null;
}","public final boolean checkValidity(){
  return resourceName != null;
}"
61067,"private NodeCond buildSearchCond(final List<SearchConditionWrapper> conditions){
  SearchConditionWrapper searchConditionWrapper=conditions.get(conditions.size() - 1);
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{searchConditionWrapper.getFilterName(),searchConditionWrapper.getFilterType(),searchConditionWrapper.getFilterValue(),searchConditionWrapper.getOperationType(),searchConditionWrapper.getType(),searchConditionWrapper.isNotOperator()});
  NodeCond nodeCond=null;
switch (searchConditionWrapper.getFilterType()) {
case ATTRIBUTE:
    final AttributeCond attributeCond=new AttributeCond();
  attributeCond.setSchema(searchConditionWrapper.getFilterName());
attributeCond.setType(searchConditionWrapper.getType());
attributeCond.setExpression(searchConditionWrapper.getFilterValue());
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(attributeCond);
}
 else {
nodeCond=NodeCond.getLeafCond(attributeCond);
}
break;
case MEMBERSHIP:
final MembershipCond membershipCond=new MembershipCond();
membershipCond.setRoleId(RoleTO.fromDisplayName(searchConditionWrapper.getFilterName()));
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(membershipCond);
}
 else {
nodeCond=NodeCond.getLeafCond(membershipCond);
}
break;
case RESOURCE:
final ResourceCond resourceCond=new ResourceCond();
resourceCond.setName(searchConditionWrapper.getFilterName());
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(resourceCond);
}
 else {
nodeCond=NodeCond.getLeafCond(resourceCond);
}
break;
default :
}
LOG.debug(""String_Node_Str"",nodeCond);
if (conditions.size() > 1) {
List<SearchConditionWrapper> subList=conditions.subList(0,conditions.size() - 1);
if (OperationType.OR.equals(searchConditionWrapper.getOperationType())) {
nodeCond=NodeCond.getOrCond(nodeCond,buildSearchCond(subList));
}
 else {
nodeCond=NodeCond.getAndCond(nodeCond,buildSearchCond(subList));
}
}
return nodeCond;
}","private NodeCond buildSearchCond(final List<SearchConditionWrapper> conditions){
  SearchConditionWrapper searchConditionWrapper=conditions.get(conditions.size() - 1);
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",new Object[]{searchConditionWrapper.getFilterName(),searchConditionWrapper.getFilterType(),searchConditionWrapper.getFilterValue(),searchConditionWrapper.getOperationType(),searchConditionWrapper.getType(),searchConditionWrapper.isNotOperator()});
  NodeCond nodeCond=null;
switch (searchConditionWrapper.getFilterType()) {
case ATTRIBUTE:
    final AttributeCond attributeCond=new AttributeCond();
  attributeCond.setSchema(searchConditionWrapper.getFilterName());
attributeCond.setType(searchConditionWrapper.getType());
attributeCond.setExpression(searchConditionWrapper.getFilterValue());
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(attributeCond);
}
 else {
nodeCond=NodeCond.getLeafCond(attributeCond);
}
break;
case MEMBERSHIP:
final MembershipCond membershipCond=new MembershipCond();
membershipCond.setRoleId(RoleTO.fromDisplayName(searchConditionWrapper.getFilterName()));
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(membershipCond);
}
 else {
nodeCond=NodeCond.getLeafCond(membershipCond);
}
break;
case RESOURCE:
final ResourceCond resourceCond=new ResourceCond();
resourceCond.setResourceName(searchConditionWrapper.getFilterName());
if (searchConditionWrapper.isNotOperator()) {
nodeCond=NodeCond.getNotLeafCond(resourceCond);
}
 else {
nodeCond=NodeCond.getLeafCond(resourceCond);
}
break;
default :
}
LOG.debug(""String_Node_Str"",nodeCond);
if (conditions.size() > 1) {
List<SearchConditionWrapper> subList=conditions.subList(0,conditions.size() - 1);
if (OperationType.OR.equals(searchConditionWrapper.getOperationType())) {
nodeCond=NodeCond.getOrCond(nodeCond,buildSearchCond(subList));
}
 else {
nodeCond=NodeCond.getAndCond(nodeCond,buildSearchCond(subList));
}
}
return nodeCond;
}"
61068,"@Override public <T extends Task>T find(final Long id){
  return (T)entityManager.find(Task.class,id);
}","@Override @Transactional(readOnly=true) public <T extends Task>T find(final Long id){
  return (T)entityManager.find(Task.class,id);
}"
61069,"/** 
 * Constructor.
 * @param basePage
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final IModel<List<String>> virtualSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    final ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  form.add((new DerivedAttributesForm(""String_Node_Str"")).build(this,roleTO,derivedSchemaNames));
  form.add((new VirtualAttributesForm(""String_Node_Str"")).build(this,roleTO,virtualSchemaNames));
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""),8,false);
  form.add(resourcesPalette);
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new StringChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
        for (        ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
          resourcesSet.add(resourceTO.getName());
        }
        roleTO.setResources(resourcesSet);
        List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)basePage).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param basePage
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final IModel<List<String>> virtualSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    final ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  final CheckBox inheritAttributes=new CheckBox(""String_Node_Str"");
  inheritAttributes.setOutputMarkupId(true);
  form.add(inheritAttributes);
  form.add((new DerivedAttributesForm(""String_Node_Str"")).build(this,roleTO,derivedSchemaNames));
  final CheckBox inheritDerivedAttributes=new CheckBox(""String_Node_Str"");
  inheritDerivedAttributes.setOutputMarkupId(true);
  form.add(inheritDerivedAttributes);
  form.add((new VirtualAttributesForm(""String_Node_Str"")).build(this,roleTO,virtualSchemaNames));
  final CheckBox inheritVirtualAttributes=new CheckBox(""String_Node_Str"");
  inheritVirtualAttributes.setOutputMarkupId(true);
  form.add(inheritVirtualAttributes);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""),8,false);
  form.add(resourcesPalette);
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new StringChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
        for (        ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
          resourcesSet.add(resourceTO.getName());
        }
        roleTO.setResources(resourcesSet);
        List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)basePage).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
61070,"public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.String) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      if (createFlag) {
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
 else {
        ((UserModalPage)basePage).getMembershipTOs().remove(membershipTO);
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  add(form);
}","public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final IModel<List<String>> virtualSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.String) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      if (createFlag) {
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
 else {
        ((UserModalPage)basePage).getMembershipTOs().remove(membershipTO);
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  form.add((new DerivedAttributesForm(""String_Node_Str"")).build(this,membershipTO,derivedSchemaNames));
  form.add((new VirtualAttributesForm(""String_Node_Str"")).build(this,membershipTO,virtualSchemaNames));
  add(form);
}"
61071,"@Override protected List<String> load(){
  return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
}","@Override protected List<String> load(){
  return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
}"
61072,"public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  rSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  rDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  mSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  mDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  Form resourceForm=new Form(""String_Node_Str"");
  resourceForm.setModel(new CompoundPropertyModel(resourceTO));
  TextField resourceName=new TextField(""String_Node_Str"");
  resourceName.setEnabled(createFlag);
  resourceName.setRequired(true);
  resourceName.setOutputMarkupId(true);
  resourceForm.add(resourceName);
  TextField accountLink=new TextField(""String_Node_Str"");
  accountLink.setOutputMarkupId(true);
  resourceForm.add(accountLink);
  CheckBox forceMandatoryConstraint=new CheckBox(""String_Node_Str"");
  forceMandatoryConstraint.setOutputMarkupId(true);
  resourceForm.add(forceMandatoryConstraint);
  DropDownChoice<PropagationMode> optionalPropagationMode=new DropDownChoice<PropagationMode>(""String_Node_Str"");
  optionalPropagationMode.setModel(new IModel<PropagationMode>(){
    @Override public PropagationMode getObject(){
      return resourceTO.getOptionalPropagationMode();
    }
    @Override public void setObject(    final PropagationMode object){
      resourceTO.setOptionalPropagationMode(object);
    }
    @Override public void detach(){
    }
  }
);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  optionalPropagationMode.setOutputMarkupId(true);
  resourceForm.add(optionalPropagationMode);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  DropDownChoice<ConnInstanceTO> connector=new DropDownChoice<ConnInstanceTO>(""String_Node_Str"",new Model<ConnInstanceTO>(connectorTO),connectors,renderer);
  connector.setEnabled(createFlag);
  connector.setModel(new IModel<ConnInstanceTO>(){
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.setRequired(true);
  connector.setEnabled(createFlag);
  resourceForm.add(connector);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  resourceForm.add(mappingContainer);
  ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
      schemaAttrChoice.setOutputMarkupId(true);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          schemaAttrChoice.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      schemaAttrChoice.setChoices(uDerSchemaAttrNames);
    break;
case RoleSchema:
  schemaAttrChoice.setChoices(rSchemaAttrNames);
break;
case RoleDerivedSchema:
schemaAttrChoice.setChoices(rDerSchemaAttrNames);
break;
case MembershipSchema:
schemaAttrChoice.setChoices(mSchemaAttrNames);
break;
case MembershipDerivedSchema:
schemaAttrChoice.setChoices(mDerSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))).setOutputMarkupId(true));
item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
);
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
resourceForm.add(addSchemaMappingBtn);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"" + resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
resourceForm.add(submit);
add(resourceForm);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final Resources basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  rSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  rDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  rVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  mSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  mDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  mVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  Form resourceForm=new Form(""String_Node_Str"");
  resourceForm.setModel(new CompoundPropertyModel(resourceTO));
  TextField resourceName=new TextField(""String_Node_Str"");
  resourceName.setEnabled(createFlag);
  resourceName.setRequired(true);
  resourceName.setOutputMarkupId(true);
  resourceForm.add(resourceName);
  TextField accountLink=new TextField(""String_Node_Str"");
  accountLink.setOutputMarkupId(true);
  resourceForm.add(accountLink);
  CheckBox forceMandatoryConstraint=new CheckBox(""String_Node_Str"");
  forceMandatoryConstraint.setOutputMarkupId(true);
  resourceForm.add(forceMandatoryConstraint);
  DropDownChoice<PropagationMode> optionalPropagationMode=new DropDownChoice<PropagationMode>(""String_Node_Str"");
  optionalPropagationMode.setModel(new IModel<PropagationMode>(){
    @Override public PropagationMode getObject(){
      return resourceTO.getOptionalPropagationMode();
    }
    @Override public void setObject(    final PropagationMode object){
      resourceTO.setOptionalPropagationMode(object);
    }
    @Override public void detach(){
    }
  }
);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  optionalPropagationMode.setOutputMarkupId(true);
  resourceForm.add(optionalPropagationMode);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  DropDownChoice<ConnInstanceTO> connector=new DropDownChoice<ConnInstanceTO>(""String_Node_Str"",new Model<ConnInstanceTO>(connectorTO),connectors,renderer);
  connector.setEnabled(createFlag);
  connector.setModel(new IModel<ConnInstanceTO>(){
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.setRequired(true);
  connector.setEnabled(createFlag);
  resourceForm.add(connector);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  resourceForm.add(mappingContainer);
  ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.addComponent(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
      schemaAttrChoice.setOutputMarkupId(true);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          schemaAttrChoice.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      schemaAttrChoice.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case RoleSchema:
schemaAttrChoice.setChoices(rSchemaAttrNames);
break;
case RoleDerivedSchema:
schemaAttrChoice.setChoices(rDerSchemaAttrNames);
break;
case RoleVirtualSchema:
schemaAttrChoice.setChoices(rVirSchemaAttrNames);
break;
case MembershipSchema:
schemaAttrChoice.setChoices(mSchemaAttrNames);
break;
case MembershipDerivedSchema:
schemaAttrChoice.setChoices(mDerSchemaAttrNames);
break;
case MembershipVirtualSchema:
schemaAttrChoice.setChoices(mVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))).setOutputMarkupId(true));
item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
);
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.addComponent(mappingContainer);
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
resourceForm.add(addSchemaMappingBtn);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
basePage.setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
basePage.setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
basePage.setOperationResult(false);
LOG.error(""String_Node_Str"" + resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.addComponent(feedbackPanel);
}
}
;
resourceForm.add(submit);
add(resourceForm);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
61073,"public SourceMappingTypesDropDownChoice(final String id,final PropertyModel<SourceMappingType> model,final IModel imodel,final DropDownChoice<String> chooserToPopulate){
  super(id,model,imodel);
  add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
        @Override protected List<String> load(){
          List<String> result;
switch (model.getObject()) {
case UserSchema:
            result=uSchemaAttrNames;
          break;
case UserDerivedSchema:
        result=uDerSchemaAttrNames;
      break;
case RoleSchema:
    result=rSchemaAttrNames;
  break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}
}
);
}","public SourceMappingTypesDropDownChoice(final String id,final PropertyModel<SourceMappingType> model,final IModel imodel,final DropDownChoice<String> chooserToPopulate){
  super(id,model,imodel);
  add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
        @Override protected List<String> load(){
          List<String> result;
switch (model.getObject()) {
case UserSchema:
            result=uSchemaAttrNames;
          break;
case UserDerivedSchema:
        result=uDerSchemaAttrNames;
      break;
case UserVirtualSchema:
    result=uVirSchemaAttrNames;
  break;
case RoleSchema:
result=rSchemaAttrNames;
break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case RoleVirtualSchema:
result=rVirSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case MembershipVirtualSchema:
result=mVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}
}
);
}"
61074,"@Override protected List<String> load(){
  List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case RoleSchema:
result=rSchemaAttrNames;
break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}","@Override protected List<String> load(){
  List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case RoleSchema:
result=rSchemaAttrNames;
break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case RoleVirtualSchema:
result=rVirSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case MembershipVirtualSchema:
result=mVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}"
61075,"@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
  schemaAttrChoice.setOutputMarkupId(true);
  if (mappingTO.getSourceMappingType() == null) {
    schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      schemaAttrChoice.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  schemaAttrChoice.setChoices(uDerSchemaAttrNames);
break;
case RoleSchema:
schemaAttrChoice.setChoices(rSchemaAttrNames);
break;
case RoleDerivedSchema:
schemaAttrChoice.setChoices(rDerSchemaAttrNames);
break;
case MembershipSchema:
schemaAttrChoice.setChoices(mSchemaAttrNames);
break;
case MembershipDerivedSchema:
schemaAttrChoice.setChoices(mDerSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))).setOutputMarkupId(true));
item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
);
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
}","@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.addComponent(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  DropDownChoice<String> schemaAttrChoice=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(mappingTO,""String_Node_Str""),(IModel)null);
  schemaAttrChoice.setOutputMarkupId(true);
  if (mappingTO.getSourceMappingType() == null) {
    schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
      schemaAttrChoice.setChoices(uSchemaAttrNames);
    break;
case UserDerivedSchema:
  schemaAttrChoice.setChoices(uDerSchemaAttrNames);
break;
case UserVirtualSchema:
schemaAttrChoice.setChoices(uVirSchemaAttrNames);
break;
case RoleSchema:
schemaAttrChoice.setChoices(rSchemaAttrNames);
break;
case RoleDerivedSchema:
schemaAttrChoice.setChoices(rDerSchemaAttrNames);
break;
case RoleVirtualSchema:
schemaAttrChoice.setChoices(rVirSchemaAttrNames);
break;
case MembershipSchema:
schemaAttrChoice.setChoices(mSchemaAttrNames);
break;
case MembershipDerivedSchema:
schemaAttrChoice.setChoices(mDerSchemaAttrNames);
break;
case MembershipVirtualSchema:
schemaAttrChoice.setChoices(mVirSchemaAttrNames);
break;
case SyncopeUserId:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
schemaAttrChoice.setEnabled(false);
schemaAttrChoice.setRequired(false);
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
schemaAttrChoice.setChoices(Collections.EMPTY_LIST);
}
}
item.add(schemaAttrChoice);
item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttrChoice).setRequired(true).setOutputMarkupId(true));
item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))).setOutputMarkupId(true));
item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
@Override protected Iterator getChoices(final String input){
List<String> choices;
if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else if (""String_Node_Str"".startsWith(input.toLowerCase())) {
choices=Collections.singletonList(""String_Node_Str"");
}
 else {
choices=Collections.EMPTY_LIST;
}
return choices.iterator();
}
}
);
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
}"
61076,"@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case RoleSchema:
result=rSchemaAttrNames;
break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setChoices(new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case RoleSchema:
result=rSchemaAttrNames;
break;
case RoleDerivedSchema:
result=rDerSchemaAttrNames;
break;
case RoleVirtualSchema:
result=rVirSchemaAttrNames;
break;
case MembershipSchema:
result=mSchemaAttrNames;
break;
case MembershipDerivedSchema:
result=mDerSchemaAttrNames;
break;
case MembershipVirtualSchema:
result=mVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
result=Collections.EMPTY_LIST;
}
return result;
}
}
);
target.addComponent(chooserToPopulate);
target.addComponent(mappingContainer);
}"
61077,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  ConnConfProperty property=item.getModelObject();
  item.add(new Label(""String_Node_Str"",property.getSchema().getName()));
  item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired()));
  connectorTO.getConfiguration().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  ConnConfProperty property=item.getModelObject();
  item.add(new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName()));
  item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired(),property.getSchema().getHelpMessage()));
  connectorTO.getConfiguration().add(property);
}"
61078,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(bundle.getModelValue());
  connector.setCapabilities(new HashSet<ConnectorCapability>(selectedCapabilities));
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    basePage.setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    basePage.setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(bundle.getModelValue());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    basePage.setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    basePage.setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}"
61079,"public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final TextField connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  TextField displayName=new TextField(""String_Node_Str"");
  displayName.setOutputMarkupId(true);
  displayName.setRequired(true);
  final TextField version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  final DropDownChoice<ConnBundleTO> bundle=new DropDownChoice<ConnBundleTO>(""String_Node_Str"",bundles,new ChoiceRenderer<ConnBundleTO>(""String_Node_Str"",""String_Node_Str""));
  bundle.setModel(new IModel<ConnBundleTO>(){
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      ConnConfProperty property=item.getModelObject();
      item.add(new Label(""String_Node_Str"",property.getSchema().getName()));
      item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired()));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue());
      connector.setCapabilities(new HashSet<ConnectorCapability>(selectedCapabilities));
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final Connectors basePage,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        result=new ArrayList(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final TextField connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  TextField displayName=new TextField(""String_Node_Str"");
  displayName.setOutputMarkupId(true);
  displayName.setRequired(true);
  final TextField version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  final DropDownChoice<ConnBundleTO> bundle=new DropDownChoice<ConnBundleTO>(""String_Node_Str"",bundles,new ChoiceRenderer<ConnBundleTO>(""String_Node_Str"",""String_Node_Str""));
  bundle.setModel(new IModel<ConnBundleTO>(){
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      ConnConfProperty property=item.getModelObject();
      item.add(new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName()));
      item.add(new AjaxTextFieldPanel(""String_Node_Str"",property.getSchema().getName(),new PropertyModel<String>(property,""String_Node_Str""),property.getSchema().isRequired(),property.getSchema().getHelpMessage()));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        basePage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        basePage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
61080,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=connInstanceLoader.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=bundle.createDefaultAPIConfiguration().getConfigurationProperties();
      ConnConfPropSchema connConfPropSchema;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        connConfPropSchema.setName(propName);
        connConfPropSchema.setRequired(properties.getProperty(propName).isRequired());
        connConfPropSchema.setType(properties.getProperty(propName).getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=connInstanceLoader.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=bundle.createDefaultAPIConfiguration().getConfigurationProperties();
      ConnConfPropSchema connConfPropSchema;
      ConfigurationProperty configurationProperty;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        configurationProperty=properties.getProperty(propName);
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}"
61081,"public ConnectorInfoManager getConnectorManager() throws NotFoundException {
  SyncopeConf connectorBundleDir=null;
  try {
    connectorBundleDir=confDAO.find(""String_Node_Str"");
  }
 catch (  MissingConfKeyException e) {
    LOG.error(""String_Node_Str"",e);
  }
  File bundleDirectory=new File(connectorBundleDir.getValue());
  String[] bundleFiles=bundleDirectory.list();
  if (bundleFiles == null) {
    throw new NotFoundException(""String_Node_Str"" + connectorBundleDir.getValue());
  }
  List<URL> bundleFileURLs=new ArrayList<URL>();
  for (  String file : bundleFiles) {
    try {
      bundleFileURLs.add(IOUtil.makeURL(bundleDirectory,file));
    }
 catch (    Exception ignore) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(bundleDirectory.toString() + ""String_Node_Str"" + file+ ""String_Node_Str""+ ""String_Node_Str"",ignore);
      }
    }
  }
  if (bundleFileURLs.isEmpty()) {
    throw new NotFoundException(""String_Node_Str"" + connectorBundleDir.getValue());
  }
  LOG.debug(""String_Node_Str"",bundleFileURLs);
  ConnectorInfoManager manager=ConnectorInfoManagerFactory.getInstance().getLocalManager(bundleFileURLs.toArray(new URL[0]));
  if (manager == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
  return manager;
}","public ConnectorInfoManager getConnectorManager() throws NotFoundException, MissingConfKeyException {
  SyncopeConf connectorBundleDir=confDAO.find(""String_Node_Str"");
  File bundleDirectory=new File(connectorBundleDir.getValue());
  String[] bundleFiles=bundleDirectory.list();
  if (bundleFiles == null) {
    throw new NotFoundException(""String_Node_Str"" + connectorBundleDir.getValue());
  }
  List<URL> bundleFileURLs=new ArrayList<URL>();
  for (  String file : bundleFiles) {
    try {
      bundleFileURLs.add(IOUtil.makeURL(bundleDirectory,file));
    }
 catch (    Exception ignore) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(bundleDirectory.toString() + ""String_Node_Str"" + file+ ""String_Node_Str""+ ""String_Node_Str"",ignore);
      }
    }
  }
  if (bundleFileURLs.isEmpty()) {
    throw new NotFoundException(""String_Node_Str"" + connectorBundleDir.getValue());
  }
  LOG.debug(""String_Node_Str"",bundleFileURLs);
  ConnectorInfoManager manager=ConnectorInfoManagerFactory.getInstance().getLocalManager(bundleFileURLs.toArray(new URL[0]));
  if (manager == null) {
    throw new NotFoundException(""String_Node_Str"");
  }
  return manager;
}"
61082,"/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @param attributes the set of attributes against which evaluate thisderived attribute
 * @return the value of this derived attribute
 */
public String getValue(final Collection<? extends AbstractAttr> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  JexlUtil jexlUtil=(JexlUtil)context.getBean(""String_Node_Str"");
  JexlContext jexlContext=new MapContext();
  jexlContext=jexlUtil.addAttributesToContext(attributes,jexlContext);
  return jexlUtil.evaluateWithAttributes(getDerivedSchema().getExpression(),jexlContext);
}","/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @param attributes the set of attributes against which evaluate thisderived attribute
 * @return the value of this derived attribute
 */
public String getValue(final Collection<? extends AbstractAttr> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  JexlUtil jexlUtil=context.getBean(JexlUtil.class);
  JexlContext jexlContext=jexlUtil.addAttributesToContext(attributes,null);
  return jexlUtil.evaluate(getDerivedSchema().getExpression(),jexlContext);
}"
61083,"/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @return the value of this virtual attribute
 */
public List<String> getValues(){
  LOG.debug(""String_Node_Str"",new Object[]{getOwner(),getVirtualSchema().getName()});
  if (values != null) {
    return values;
  }
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  PropagationManager propagationManager=(PropagationManager)context.getBean(""String_Node_Str"");
  final Set<String> retrievedValues=propagationManager.getObjectAttributeValue(getOwner(),getVirtualSchema().getName(),SourceMappingType.UserVirtualSchema);
  LOG.debug(""String_Node_Str"",retrievedValues);
  try {
    return new ArrayList<String>(retrievedValues);
  }
 catch (  Throwable t) {
    return null;
  }
}",public abstract List<String> getValues();
61084,"public Set<Attribute> getAttributes(){
  Set<Attribute> result=Collections.EMPTY_SET;
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  XStream xStream=(XStream)context.getBean(""String_Node_Str"");
  try {
    result=(Set<Attribute>)xStream.fromXML(URLDecoder.decode(xmlAttributes,""String_Node_Str""));
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
  return result;
}","public Set<Attribute> getAttributes(){
  Set<Attribute> result=Collections.EMPTY_SET;
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  XStream xStream=context.getBean(XStream.class);
  try {
    result=(Set<Attribute>)xStream.fromXML(URLDecoder.decode(xmlAttributes,""String_Node_Str""));
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
  return result;
}"
61085,"public void setAttributes(final Set<Attribute> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  XStream xStream=(XStream)context.getBean(""String_Node_Str"");
  try {
    xmlAttributes=URLEncoder.encode(xStream.toXML(attributes),""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
}","public void setAttributes(final Set<Attribute> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  XStream xStream=context.getBean(XStream.class);
  try {
    xmlAttributes=URLEncoder.encode(xStream.toXML(attributes),""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
}"
61086,"public Membership(){
  attributes=new ArrayList<MAttr>();
  derivedAttributes=new ArrayList<MDerAttr>();
  virtualAttributes=new ArrayList<MVirAttr>();
  targetResources=Collections.EMPTY_SET;
}","public Membership(){
  super();
  attributes=new ArrayList<MAttr>();
  derivedAttributes=new ArrayList<MDerAttr>();
  virtualAttributes=new ArrayList<MVirAttr>();
  targetResources=Collections.EMPTY_SET;
}"
61087,"public Date getNextExec(){
  return nextExec;
}","public Date getNextExec(){
  return new Date(nextExec.getTime());
}"
61088,"public void setNextExec(Date nextExec){
  this.nextExec=nextExec;
}","public void setNextExec(Date nextExec){
  this.nextExec=new Date(nextExec.getTime());
}"
61089,"public void setLastExec(Date lastExec){
  this.lastExec=lastExec;
}","public void setLastExec(Date lastExec){
  this.lastExec=new Date(lastExec.getTime());
}"
61090,"public Date getLastExec(){
  return lastExec;
}","public Date getLastExec(){
  return new Date(lastExec.getTime());
}"
61091,"@Override public <T extends Task>List<T> findAll(final int page,final int itemsPerPage,final Class<T> reference){
  final Query query=entityManager.createQuery(""String_Node_Str"" + reference.getSimpleName() + ""String_Node_Str"");
  query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));
  if (itemsPerPage > 0) {
    query.setMaxResults(itemsPerPage);
  }
  return query.getResultList();
}","@Override public <T extends Task>List<T> findAll(final int page,final int itemsPerPage,final Class<T> reference){
  final Query query=entityManager.createQuery(buildfindAllQuery(reference).toString());
  query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));
  if (itemsPerPage > 0) {
    query.setMaxResults(itemsPerPage);
  }
  return query.getResultList();
}"
61092,"@Test public final void findAll(){
  List<PropagationTask> list=taskDAO.findAll(PropagationTask.class);
  assertEquals(3,list.size());
}","@Test public final void findAll(){
  List<PropagationTask> plist=taskDAO.findAll(PropagationTask.class);
  assertEquals(3,plist.size());
  List<SchedTask> sclist=taskDAO.findAll(SchedTask.class);
  assertEquals(1,sclist.size());
  List<SyncTask> sylist=taskDAO.findAll(SyncTask.class);
  assertEquals(1,sylist.size());
}"
61093,"@Test public final void saveSyncTask(){
  TargetResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncTask task=new SyncTask();
  task.addDefaultResource(resource);
  task.setCronExpression(""String_Node_Str"");
  InvalidEntityException exception=null;
  try {
    taskDAO.save(task);
  }
 catch (  InvalidEntityException e) {
    exception=e;
  }
  assertNotNull(exception);
  task.setCronExpression(null);
  task=taskDAO.save(task);
  assertNotNull(task);
  SyncTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
}","@Test public final void saveSyncTask(){
  TargetResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncTask task=new SyncTask();
  task.addDefaultResource(resource);
  task.setCronExpression(""String_Node_Str"");
  InvalidEntityException exception=null;
  try {
    taskDAO.save(task);
  }
 catch (  InvalidEntityException e) {
    exception=e;
  }
  assertNotNull(exception);
  task.setCronExpression(null);
  exception=null;
  try {
    taskDAO.save(task);
  }
 catch (  InvalidEntityException e) {
    exception=e;
  }
  assertNotNull(exception);
  task.setResource(resource);
  task=taskDAO.save(task);
  assertNotNull(task);
  SyncTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
}"
61094,"/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @param attributes the set of attributes against which evaluate thisderived attribute
 * @return the value of this derived attribute
 */
public String getValue(final Collection<? extends AbstractAttr> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  JexlUtil jexlUtil=(JexlUtil)context.getBean(""String_Node_Str"");
  return jexlUtil.evaluateWithAttributes(getDerivedSchema().getExpression(),attributes);
}","/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @param attributes the set of attributes against which evaluate thisderived attribute
 * @return the value of this derived attribute
 */
public String getValue(final Collection<? extends AbstractAttr> attributes){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  JexlUtil jexlUtil=(JexlUtil)context.getBean(""String_Node_Str"");
  JexlContext jexlContext=new MapContext();
  jexlContext=jexlUtil.addAttributesToContext(attributes,jexlContext);
  return jexlUtil.evaluateWithAttributes(getDerivedSchema().getExpression(),jexlContext);
}"
61095,"public <T extends AbstractAttributable>Set<String> getObjectAttributeValue(final T attributable,final String attributeName,final SourceMappingType sourceMappingType){
  List values=new ArrayList();
  Set<String> attributeNames;
  ConnInstance connectorInstance;
  ConnectorFacadeProxy connector;
  Set<Attribute> attributes;
  String accountLink;
  String accountId=null;
  LOG.debug(""String_Node_Str"",new Object[]{attributable,attributeName});
  for (  TargetResource resource : attributable.getInheritedTargetResources()) {
    LOG.debug(""String_Node_Str"",resource);
    attributeNames=new HashSet<String>();
    accountLink=resource.getAccountLink();
    for (    SchemaMapping mapping : resource.getMappings()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getId() + ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getDestAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType()+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword());
      }
      if (mapping.getSourceAttrName().equals(attributeName) && mapping.getSourceMappingType() == sourceMappingType) {
        attributeNames.add(mapping.getDestAttrName());
      }
      if (mapping.isAccountid()) {
        try {
          accountId=attributable.getAttribute(mapping.getSourceAttrName()).getValuesAsStrings().get(0);
        }
 catch (        NullPointerException e) {
          LOG.debug(""String_Node_Str"",e);
        }
      }
    }
    if (accountId == null && accountLink != null) {
      accountId=jexlUtil.evaluateWithAttributes(resource.getAccountLink(),attributable.getAttributes());
    }
    if (attributeNames != null && accountId != null) {
      LOG.debug(""String_Node_Str"",accountId);
      connectorInstance=resource.getConnector();
      connector=connInstanceLoader.getConnector(connectorInstance.getId().toString());
      try {
        attributes=connector.getObjectAttributes(ObjectClass.ACCOUNT,new Uid(accountId),null,attributeNames);
        LOG.debug(""String_Node_Str"",attributes);
        for (        Attribute attribute : attributes) {
          values.addAll(attribute.getValue());
        }
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",resource.getName(),e);
      }
    }
  }
  return new HashSet<String>(values);
}","public <T extends AbstractAttributable>Set<String> getObjectAttributeValue(final T attributable,final String attributeName,final SourceMappingType sourceMappingType){
  List values=new ArrayList();
  Set<String> attributeNames;
  ConnInstance connectorInstance;
  ConnectorFacadeProxy connector;
  Set<Attribute> attributes;
  String accountLink;
  String accountId=null;
  LOG.debug(""String_Node_Str"",new Object[]{attributable,attributeName});
  for (  TargetResource resource : attributable.getInheritedTargetResources()) {
    LOG.debug(""String_Node_Str"",resource);
    attributeNames=new HashSet<String>();
    accountLink=resource.getAccountLink();
    for (    SchemaMapping mapping : resource.getMappings()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getId() + ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getDestAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType()+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword());
      }
      if (mapping.getSourceAttrName().equals(attributeName) && mapping.getSourceMappingType() == sourceMappingType) {
        attributeNames.add(mapping.getDestAttrName());
      }
      if (mapping.isAccountid()) {
        try {
          accountId=attributable.getAttribute(mapping.getSourceAttrName()).getValuesAsStrings().get(0);
        }
 catch (        NullPointerException e) {
          LOG.debug(""String_Node_Str"",e);
        }
      }
    }
    if (accountId == null && accountLink != null) {
      accountId=evaluateAccountLink(attributable,accountLink);
    }
    if (attributeNames != null && accountId != null) {
      LOG.debug(""String_Node_Str"",accountId);
      connectorInstance=resource.getConnector();
      connector=connInstanceLoader.getConnector(connectorInstance.getId().toString());
      try {
        attributes=connector.getObjectAttributes(ObjectClass.ACCOUNT,new Uid(accountId),null,attributeNames);
        LOG.debug(""String_Node_Str"",attributes);
        for (        Attribute attribute : attributes) {
          values.addAll(attribute.getValue());
        }
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",resource.getName(),e);
      }
    }
  }
  return new HashSet<String>(values);
}"
61096,"private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,String password,TargetResource resource) throws PropagationException {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{user,resource,user.getAttributes()});
  Set<Attribute> accountAttributes=new HashSet<Attribute>();
  Class castToBeApplied;
  Map<String,Attribute> accountId=new HashMap<String,Attribute>();
  Set objValues;
  UAttr attr;
  UDerAttr derAttr;
  UVirAttr virAttr;
  AbstractSchema schema;
  AbstractDerSchema derSchema;
  AbstractVirSchema virSchema;
  SchemaType schemaType=null;
  List<AbstractAttrValue> values;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getSourceAttrName());
    schema=null;
    derSchema=null;
    virSchema=null;
    values=null;
    try {
switch (mapping.getSourceMappingType()) {
case UserSchema:
        schema=schemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
      schemaType=schema.getType();
    attr=user.getAttribute(mapping.getSourceAttrName());
  values=attr != null ? (schema.isUniqueConstraint() ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues()) : Collections.EMPTY_LIST;
LOG.debug(""String_Node_Str"",attr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case UserVirtualSchema:
virSchema=virSchemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
schemaType=SchemaType.String;
virAttr=user.getVirtualAttribute(mapping.getSourceAttrName());
values=new ArrayList<AbstractAttrValue>();
AbstractAttrValue abstractValue;
if (virAttr != null && virAttr.getValues() != null) {
for (String value : virAttr.getValues()) {
abstractValue=new UAttrValue();
abstractValue.setStringValue(value);
values.add(abstractValue);
}
}
LOG.debug(""String_Node_Str"",virAttr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case UserDerivedSchema:
derSchema=derSchemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
schemaType=SchemaType.String;
derAttr=user.getDerivedAttribute(mapping.getSourceAttrName());
if (derAttr != null) {
AbstractAttrValue value=new UAttrValue();
value.setStringValue(derAttr.getValue(user.getAttributes()));
values=Collections.singletonList(value);
}
 else {
values=Collections.EMPTY_LIST;
}
LOG.debug(""String_Node_Str"",derAttr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case SyncopeUserId:
case Password:
schema=null;
schemaType=SchemaType.String;
AbstractAttrValue uAttrValue=new UAttrValue();
if (SourceMappingType.SyncopeUserId == mapping.getSourceMappingType()) {
uAttrValue.setStringValue(user.getId().toString());
}
if (SourceMappingType.Password == mapping.getSourceMappingType() && password != null) {
uAttrValue.setStringValue(password);
}
values=Collections.singletonList(uAttrValue);
break;
default :
break;
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getDestAttrName() + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || mapping.getSourceMappingType().equals(SourceMappingType.Password))+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType().toString()+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
}
objValues=new HashSet();
for (AbstractAttrValue value : values) {
castToBeApplied=Class.forName(schemaType.getClassName());
if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
castToBeApplied=String.class;
objValues.add(value.getValueAsString());
}
 else {
objValues.add(value.getValue());
}
}
if (mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
accountId.put(objValues.iterator().next().toString(),AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
accountId.put(objValues.iterator().next().toString(),objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
if (mapping.isPassword()) {
accountAttributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
}
if (!mapping.isPassword() && !mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
accountAttributes.add(AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
accountAttributes.add(objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
}
 catch (Throwable t) {
LOG.debug(""String_Node_Str"",mapping.getSourceAttrName(),t);
}
}
if (accountId.isEmpty()) {
throw new PropagationException(resource.getName(),""String_Node_Str"");
}
final String key=accountId.keySet().iterator().next();
String evaluatedAccountLink=jexlUtil.evaluateWithAttributes(resource.getAccountLink(),user.getAttributes());
if (evaluatedAccountLink.isEmpty()) {
LOG.debug(""String_Node_Str"",key);
accountAttributes.add(new Name(key));
}
 else {
LOG.debug(""String_Node_Str"",evaluatedAccountLink);
accountAttributes.add(new Name(evaluatedAccountLink));
LOG.debug(""String_Node_Str"");
}
return Collections.singletonMap(key,accountAttributes);
}","private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,String password,TargetResource resource) throws PropagationException {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{user,resource,user.getAttributes()});
  Set<Attribute> accountAttributes=new HashSet<Attribute>();
  Class castToBeApplied;
  Map<String,Attribute> accountId=new HashMap<String,Attribute>();
  Set objValues;
  UAttr attr;
  UDerAttr derAttr;
  UVirAttr virAttr;
  AbstractSchema schema;
  AbstractDerSchema derSchema;
  AbstractVirSchema virSchema;
  SchemaType schemaType=null;
  List<AbstractAttrValue> values;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getSourceAttrName());
    schema=null;
    derSchema=null;
    virSchema=null;
    values=null;
    try {
switch (mapping.getSourceMappingType()) {
case UserSchema:
        schema=schemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
      schemaType=schema.getType();
    attr=user.getAttribute(mapping.getSourceAttrName());
  values=attr != null ? (schema.isUniqueConstraint() ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues()) : Collections.EMPTY_LIST;
LOG.debug(""String_Node_Str"",attr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case UserVirtualSchema:
virSchema=virSchemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
schemaType=SchemaType.String;
virAttr=user.getVirtualAttribute(mapping.getSourceAttrName());
values=new ArrayList<AbstractAttrValue>();
AbstractAttrValue abstractValue;
if (virAttr != null && virAttr.getValues() != null) {
for (String value : virAttr.getValues()) {
abstractValue=new UAttrValue();
abstractValue.setStringValue(value);
values.add(abstractValue);
}
}
LOG.debug(""String_Node_Str"",virAttr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case UserDerivedSchema:
derSchema=derSchemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
schemaType=SchemaType.String;
derAttr=user.getDerivedAttribute(mapping.getSourceAttrName());
if (derAttr != null) {
AbstractAttrValue value=new UAttrValue();
value.setStringValue(derAttr.getValue(user.getAttributes()));
values=Collections.singletonList(value);
}
 else {
values=Collections.EMPTY_LIST;
}
LOG.debug(""String_Node_Str"",derAttr + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case SyncopeUserId:
case Password:
schema=null;
schemaType=SchemaType.String;
AbstractAttrValue uAttrValue=new UAttrValue();
if (SourceMappingType.SyncopeUserId == mapping.getSourceMappingType()) {
uAttrValue.setStringValue(user.getId().toString());
}
if (SourceMappingType.Password == mapping.getSourceMappingType() && password != null) {
uAttrValue.setStringValue(password);
}
values=Collections.singletonList(uAttrValue);
break;
default :
break;
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getDestAttrName() + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || mapping.getSourceMappingType().equals(SourceMappingType.Password))+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType().toString()+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
}
objValues=new HashSet();
for (AbstractAttrValue value : values) {
castToBeApplied=Class.forName(schemaType.getClassName());
if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
castToBeApplied=String.class;
objValues.add(value.getValueAsString());
}
 else {
objValues.add(value.getValue());
}
}
if (mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
accountId.put(objValues.iterator().next().toString(),AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
accountId.put(objValues.iterator().next().toString(),objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
if (mapping.isPassword()) {
accountAttributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
}
if (!mapping.isPassword() && !mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
accountAttributes.add(AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
accountAttributes.add(objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
}
 catch (Throwable t) {
LOG.debug(""String_Node_Str"",mapping.getSourceAttrName(),t);
}
}
if (accountId.isEmpty()) {
throw new PropagationException(resource.getName(),""String_Node_Str"");
}
final String key=accountId.keySet().iterator().next();
String evaluatedAccountLink=evaluateAccountLink(user,resource.getAccountLink());
if (evaluatedAccountLink.isEmpty()) {
LOG.debug(""String_Node_Str"",key);
accountAttributes.add(new Name(key));
}
 else {
LOG.debug(""String_Node_Str"",evaluatedAccountLink);
accountAttributes.add(new Name(evaluatedAccountLink));
LOG.debug(""String_Node_Str"");
}
return Collections.singletonMap(key,accountAttributes);
}"
61097,"public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final IModel<List<String>> virtualSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.String) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      if (createFlag) {
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
 else {
        ((UserModalPage)basePage).getMembershipTOs().remove(membershipTO);
        ((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  form.add((new DerivedAttributesForm(""String_Node_Str"")).build(this,membershipTO,derivedSchemaNames));
  form.add((new VirtualAttributesForm(""String_Node_Str"")).build(this,membershipTO,virtualSchemaNames));
  add(form);
}","public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final IModel<List<String>> derivedSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
    }
  }
;
  final IModel<List<String>> virtualSchemaNames=new LoadableDetachableModel<List<String>>(){
    @Override protected List<String> load(){
      return schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
    }
  }
;
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
switch (schemaTO.getType()) {
case Boolean:
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          break;
case Date:
        panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
          @Override public Serializable getObject(){
            DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
            Date date=new Date();
            try {
              String dateValue=(String)item.getModelObject();
              formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
              if (!dateValue.equals(""String_Node_Str"")) {
                date=formatter.parse(dateValue);
              }
 else {
                date=null;
              }
            }
 catch (            ParseException e) {
              LOG.error(""String_Node_Str"",e);
            }
            return date;
          }
          @Override public void setObject(          Serializable object){
            Date date=(Date)object;
            Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
            String val=formatter.format(date);
            item.setModelObject(val);
          }
        }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
      break;
case Enum:
    panel=new AjaxDropDownChoicePanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)),new ChoiceRenderer(),required);
  break;
default :
panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
  @Override public Serializable getObject(){
    return (String)item.getModelObject();
  }
  @Override public void setObject(  Serializable object){
    item.setModelObject((String)object);
  }
}
,required);
}
item.add(panel);
}
}
);
AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(AjaxRequestTarget target,Form form){
schemaWrapper.getValues().add(""String_Node_Str"");
target.addComponent(container);
}
}
;
AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(AjaxRequestTarget target,Form form){
schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
target.addComponent(container);
}
}
;
if (schemaTO.getType() == SchemaType.Boolean) {
addButton.setVisible(false);
dropButton.setVisible(false);
}
addButton.setDefaultFormProcessing(false);
addButton.setVisible(schemaTO.isMultivalue());
dropButton.setDefaultFormProcessing(false);
dropButton.setVisible(schemaTO.isMultivalue());
if (schemaWrapper.getValues().size() == 1) {
dropButton.setVisible(false);
}
item.add(addButton);
item.add(dropButton);
}
}
;
submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
@Override protected void onSubmit(AjaxRequestTarget target,Form form){
MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
membershipTO.setAttributes(getMembershipAttributes());
if (createFlag) {
((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
}
 else {
((UserModalPage)basePage).getMembershipTOs().remove(membershipTO);
((UserModalPage)basePage).getMembershipTOs().add(membershipTO);
}
window.close(target);
}
@Override protected void onError(AjaxRequestTarget target,Form form){
target.addComponent(feedbackPanel);
}
}
;
String allowedRoles=null;
if (createFlag) {
allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
}
 else {
allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
}
MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
form.add(submit);
container=new WebMarkupContainer(""String_Node_Str"");
container.add(userAttributesView);
container.setOutputMarkupId(true);
form.add(container);
form.add((new DerivedAttributesForm(""String_Node_Str"")).build(this,membershipTO,derivedSchemaNames));
form.add((new VirtualAttributesForm(""String_Node_Str"")).build(this,membershipTO,virtualSchemaNames));
add(form);
}"
61098,"@Override public Serializable getObject(){
  DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
  Date date=new Date();
  try {
    String dateValue=(String)item.getModelObject();
    formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
    if (!dateValue.equals(""String_Node_Str"")) {
      date=formatter.parse(dateValue);
    }
 else {
      date=null;
    }
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return date;
}","@Override public Serializable getObject(){
  return (String)item.getModelObject();
}"
61099,"@Override public void setObject(Serializable object){
  Date date=(Date)object;
  Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
  String val=formatter.format(date);
  item.setModelObject(val);
}","@Override public void setObject(Serializable object){
  item.setModelObject((String)object);
}"
61100,"@Transactional(readOnly=true) public void loadAllConnInstances(){
  CurrentLocale.set(Locale.ENGLISH);
  List<ConnInstance> instances=connInstanceDAO.findAll();
  for (  ConnInstance instance : instances) {
    try {
      LOG.info(""String_Node_Str"",instance);
      registerConnector(instance);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"" + instance,e);
    }
  }
}","@Transactional(readOnly=true) public void loadAllConnInstances(){
  CurrentLocale.set(Locale.ENGLISH);
  List<ConnInstance> instances=connInstanceDAO.findAll();
  for (  ConnInstance instance : instances) {
    try {
      LOG.info(""String_Node_Str"",instance);
      registerConnector(instance);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"" + instance,e);
    }
catch (    RuntimeException e) {
      LOG.error(""String_Node_Str"" + instance,e);
    }
  }
}"
61101,"@Override public void onClick(AjaxRequestTarget target){
  boolean res=false;
  try {
    res=taskRestClient.deleteTaskExecution(taskExecutionTO.getId());
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    error(scce.getMessage());
  }
  if (res) {
    info(getString(""String_Node_Str""));
  }
  target.addComponent(feedbackPanel);
  target.addComponent(container);
}","@Override public void onClick(final AjaxRequestTarget target){
  try {
    taskRestClient.deleteTaskExecution(taskExecutionTO.getId());
    info(getString(""String_Node_Str""));
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    error(scce.getMessage());
  }
  target.addComponent(feedbackPanel);
  target.addComponent(container);
}"
61102,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public TaskModalPage(final BasePage basePage,final ModalWindow window,final TaskTO taskTO){
  dialogContent=new Label(""String_Node_Str"",new Model<String>(""String_Node_Str""));
  add(dialogContent.setOutputMarkupId(true));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(taskTO));
  id=new TextField(""String_Node_Str"");
  id.setEnabled(false);
  form.add(id);
  accountId=new TextField(""String_Node_Str"");
  accountId.setEnabled(false);
  form.add(accountId);
  resource=new TextField(""String_Node_Str"");
  resource.setEnabled(false);
  form.add(resource);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskExecutionTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<TaskExecutionTO>> cellItem,    String componentId,    IModel<TaskExecutionTO> model){
      final TaskExecutionTO taskExecutionTO=model.getObject();
      AjaxLink messageLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          dialogContent.setDefaultModelObject(taskExecutionTO.getMessage());
          target.addComponent(dialogContent);
          target.appendJavascript(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
;
      messageLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(messageLink);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskExecutionTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<TaskExecutionTO>> cellItem,    String componentId,    IModel<TaskExecutionTO> model){
      final TaskExecutionTO taskExecutionTO=model.getObject();
      AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          boolean res=false;
          try {
            res=taskRestClient.deleteTaskExecution(taskExecutionTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          if (res) {
            info(getString(""String_Node_Str""));
          }
          target.addComponent(feedbackPanel);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=null;
      allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new TaskExecutionsProvider(taskTO),10);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  form.add(container);
  add(form);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public TaskModalPage(final BasePage basePage,final ModalWindow window,final TaskTO taskTO){
  dialogContent=new Label(""String_Node_Str"",new Model<String>(""String_Node_Str""));
  add(dialogContent.setOutputMarkupId(true));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(taskTO));
  id=new TextField(""String_Node_Str"");
  id.setEnabled(false);
  form.add(id);
  accountId=new TextField(""String_Node_Str"");
  accountId.setEnabled(false);
  form.add(accountId);
  resource=new TextField(""String_Node_Str"");
  resource.setEnabled(false);
  form.add(resource);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new DatePropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str"",null));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskExecutionTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<TaskExecutionTO>> cellItem,    String componentId,    IModel<TaskExecutionTO> model){
      final TaskExecutionTO taskExecutionTO=model.getObject();
      AjaxLink messageLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          dialogContent.setDefaultModelObject(taskExecutionTO.getMessage());
          target.addComponent(dialogContent);
          target.appendJavascript(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
;
      messageLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(messageLink);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskExecutionTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<TaskExecutionTO>> cellItem,    String componentId,    IModel<TaskExecutionTO> model){
      final TaskExecutionTO taskExecutionTO=model.getObject();
      AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            taskRestClient.deleteTaskExecution(taskExecutionTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.addComponent(feedbackPanel);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=null;
      allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new TaskExecutionsProvider(taskTO),10);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  form.add(container);
  add(form);
}"
61103,"public int compare(final TaskTO o1,final TaskTO o2){
  PropertyModel<Comparable> model1=new PropertyModel<Comparable>(o1,getSort().getProperty());
  PropertyModel<Comparable> model2=new PropertyModel<Comparable>(o2,getSort().getProperty());
  int result=1;
  if (model1.getObject() == null && model2.getObject() == null) {
    result=0;
  }
 else   if (model1.getObject() == null) {
    result=1;
  }
 else   if (model2.getObject() == null) {
    result=-1;
  }
 else {
    result=((Comparable)model1.getObject()).compareTo(model2.getObject());
  }
  result=getSort().isAscending() ? result : -result;
  return result;
}","@Override public int compare(final TaskTO o1,final TaskTO o2){
  PropertyModel<Comparable> model1=new PropertyModel<Comparable>(o1,getSort().getProperty());
  PropertyModel<Comparable> model2=new PropertyModel<Comparable>(o2,getSort().getProperty());
  int result=1;
  if (model1.getObject() == null && model2.getObject() == null) {
    result=0;
  }
 else   if (model1.getObject() == null) {
    result=1;
  }
 else   if (model2.getObject() == null) {
    result=-1;
  }
 else {
    result=((Comparable)model1.getObject()).compareTo(model2.getObject());
  }
  result=getSort().isAscending() ? result : -result;
  return result;
}"
61104,"public Tasks(final PageParameters parameters){
  super(parameters);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            @Override public Page createPage(){
              return new TaskModalPage(Tasks.this,window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          boolean res=false;
          try {
            res=restClient.startTaskExecution(taskTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          if (res) {
            getSession().info(getString(""String_Node_Str""));
          }
          target.addComponent(getPage().get(""String_Node_Str""));
          target.addComponent(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteTask(taskTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new TasksProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setPageMapName(""String_Node_Str"");
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public Tasks(final PageParameters parameters){
  super(parameters);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            @Override public Page createPage(){
              return new TaskModalPage(Tasks.this,window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startTaskExecution(taskTO.getId());
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.addComponent(getPage().get(""String_Node_Str""));
          target.addComponent(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteTask(taskTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setPageMapName(""String_Node_Str"");
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
61105,"@Override public Iterator<TaskTO> iterator(int first,int count){
  List<TaskTO> list=getTasksListDB();
  Collections.sort(list,comparator);
  return list.subList(first,first + count).iterator();
}","@Override public Iterator<TaskTO> iterator(int first,int count){
  List<TaskTO> tasks=restClient.list(first,count);
  Collections.sort(tasks,comparator);
  return tasks.iterator();
}"
61106,"public void populateItem(final Item<ICellPopulator<TaskTO>> cellItem,final String componentId,final IModel<TaskTO> model){
  final TaskTO taskTO=model.getObject();
  AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        restClient.deleteTask(taskTO.getId());
      }
 catch (      SyncopeClientCompositeErrorException scce) {
        error(scce.getMessage());
      }
      target.addComponent(container);
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
        }
      }
;
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
  cellItem.add(panel);
}","@Override public void populateItem(final Item<ICellPopulator<TaskTO>> cellItem,final String componentId,final IModel<TaskTO> model){
  final TaskTO taskTO=model.getObject();
  AjaxLink deleteLink=new IndicatingAjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        restClient.deleteTask(taskTO.getId());
      }
 catch (      SyncopeClientCompositeErrorException scce) {
        error(scce.getMessage());
      }
      target.addComponent(container);
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
        }
      }
;
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
  cellItem.add(panel);
}"
61107,"@Override public int size(){
  return getTasksListDB().size();
}","@Override public int size(){
  return restClient.count();
}"
61108,"@Override public IModel<TaskTO> model(final TaskTO task){
  return new AbstractReadOnlyModel<TaskTO>(){
    @Override public TaskTO getObject(){
      return task;
    }
  }
;
}","@Override public IModel<TaskTO> model(final TaskTO object){
  return new CompoundPropertyModel<TaskTO>(object);
}"
61109,"public SchemaTO(){
  mandatoryCondition=""String_Node_Str"";
  derivedSchemas=new HashSet<String>();
}","public SchemaTO(){
  mandatoryCondition=""String_Node_Str"";
}"
61110,"@Override public void onClick(AjaxRequestTarget target){
  createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
      return window;
    }
  }
);
  createConfigWin.show(target);
}","@Override public void onClick(AjaxRequestTarget target){
  createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new KeyValueTO(),true);
      return window;
    }
  }
);
  createConfigWin.show(target);
}"
61111,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<KeyValueTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<KeyValueTO>> cellItem,    final String componentId,    final IModel<KeyValueTO> model){
      final KeyValueTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<KeyValueTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<KeyValueTO>> cellItem,    final String componentId,    IModel<KeyValueTO> model){
      final KeyValueTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new KeyValueTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
61112,"private List<ConfigurationTO> getAllConfigurations(){
  List<ConfigurationTO> list=null;
  try {
    list=restClient.getAllConfigurations();
  }
 catch (  RestClientException rce) {
    throw rce;
  }
  return list;
}","private List<KeyValueTO> getAllConfigurations(){
  List<KeyValueTO> list=null;
  try {
    list=restClient.getAllConfigurations();
  }
 catch (  RestClientException rce) {
    throw rce;
  }
  return list;
}"
61113,"@Override public Page createPage(){
  ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
  return window;
}","@Override public Page createPage(){
  ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new KeyValueTO(),true);
  return window;
}"
61114,"@Override public Iterator<ConfigurationTO> iterator(int first,int count){
  List<ConfigurationTO> list=getAllConfigurations();
  Collections.sort(list,comparator);
  return list.subList(first,first + count).iterator();
}","@Override public Iterator<KeyValueTO> iterator(int first,int count){
  List<KeyValueTO> list=getAllConfigurations();
  Collections.sort(list,comparator);
  return list.subList(first,first + count).iterator();
}"
61115,"public SyncopeConfProvider(){
  setSort(""String_Node_Str"",true);
  comparator=new SortableDataProviderComparator<ConfigurationTO>(this);
}","public SyncopeConfProvider(){
  setSort(""String_Node_Str"",true);
  comparator=new SortableDataProviderComparator<KeyValueTO>(this);
}"
61116,"@Override public IModel<ConfigurationTO> model(final ConfigurationTO configuration){
  return new AbstractReadOnlyModel<ConfigurationTO>(){
    @Override public ConfigurationTO getObject(){
      return configuration;
    }
  }
;
}","@Override public IModel<KeyValueTO> model(final KeyValueTO configuration){
  return new AbstractReadOnlyModel<KeyValueTO>(){
    @Override public KeyValueTO getObject(){
      return configuration;
    }
  }
;
}"
61117,"/** 
 * ConfigurationModalPage constructor.
 * @param basePage base
 * @param modalWindow modal-window
 * @param configurationTO
 * @param createFlag true for CREATE and false for UPDATE operation
 */
public ConfigurationModalPage(final BasePage basePage,final ModalWindow window,final ConfigurationTO configurationTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"",new CompoundPropertyModel(configurationTO));
  form.add(key=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  key.setEnabled(createFlag);
  key.setRequired(true);
  form.add(value=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  value.setRequired(true);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      boolean res=false;
      if (createFlag) {
        res=configurationsRestClient.createConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
 else {
        res=configurationsRestClient.updateConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
      if (res) {
        Configuration callerPage=(Configuration)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * ConfigurationModalPage constructor.
 * @param basePage base
 * @param modalWindow modal-window
 * @param configurationTO
 * @param createFlag true for CREATE and false for UPDATE operation
 */
public ConfigurationModalPage(final BasePage basePage,final ModalWindow window,final KeyValueTO configurationTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"",new CompoundPropertyModel(configurationTO));
  form.add(key=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  key.setEnabled(createFlag);
  key.setRequired(true);
  form.add(value=new TextField(""String_Node_Str"",new PropertyModel(configurationTO,""String_Node_Str"")));
  value.setRequired(true);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      boolean res=false;
      if (createFlag) {
        res=configurationsRestClient.createConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
 else {
        res=configurationsRestClient.updateConfiguration(configurationTO);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
      }
      if (res) {
        Configuration callerPage=(Configuration)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
61118,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public ResourceModalPage(final BasePage basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  this.resource=resourceTO;
  setupChoiceListsPopulators();
  Form resourceForm=new Form(""String_Node_Str"");
  resourceForm.setModel(new CompoundPropertyModel(resourceTO));
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  IModel connectors=new LoadableDetachableModel(){
    @Override protected Object load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel sourceMappingTypes=new LoadableDetachableModel(){
    @Override protected Object load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  resourceName=new TextField(""String_Node_Str"");
  resourceName.setEnabled(createFlag);
  resourceName.setRequired(true);
  resourceName.setOutputMarkupId(true);
  resourceForm.add(resourceName);
  forceMandatoryConstraint=new CheckBox(""String_Node_Str"");
  forceMandatoryConstraint.setOutputMarkupId(true);
  resourceForm.add(forceMandatoryConstraint);
  optionalPropagationMode=new DropDownChoice<PropagationMode>(""String_Node_Str"");
  optionalPropagationMode.setModel(new IModel<PropagationMode>(){
    @Override public PropagationMode getObject(){
      return resourceTO.getOptionalPropagationMode();
    }
    @Override public void setObject(    final PropagationMode object){
      resourceTO.setOptionalPropagationMode(object);
    }
    @Override public void detach(){
    }
  }
);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  optionalPropagationMode.setOutputMarkupId(true);
  resourceForm.add(optionalPropagationMode);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  connector=new DropDownChoice(""String_Node_Str"",new Model(connectorTO),connectors,renderer);
  connector.setEnabled(createFlag);
  connector.setModel(new IModel(){
    @Override public Object getObject(){
      return connectorTO;
    }
    @Override public void setObject(    Object object){
      ConnInstanceTO connector=(ConnInstanceTO)object;
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.setRequired(true);
  connector.setEnabled(createFlag);
  resourceForm.add(connector);
  mappingUserSchemaView=new ListView(""String_Node_Str"",resourceTO.getMappings()){
    SchemaMappingTO mappingTO=null;
    DropDownChoice schemaAttributeChoice=null;
    @Override protected void populateItem(    final ListItem item){
      mappingTO=(SchemaMappingTO)item.getDefaultModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(new Boolean(""String_Node_Str""))){
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int id=new Integer(getParent().getId());
          resourceTO.getMappings().remove(id);
          target.addComponent(mappingUserSchemaContainer);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))));
      schemaAttributeChoice=new DropDownChoice(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""),(IModel)null);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttributeChoice.setChoices(Collections.emptyList());
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.UserSchema)) {
        schemaAttributeChoice.setChoices(userSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.RoleSchema)) {
        schemaAttributeChoice.setChoices(roleSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.MembershipSchema)) {
        schemaAttributeChoice.setChoices(membershipSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.SyncopeUserId)) {
        schemaAttributeChoice.setEnabled(false);
        schemaAttributeChoice.setRequired(false);
        schemaAttributeChoice.setChoices(Collections.emptyList());
        mappingTO.setSourceAttrName(""String_Node_Str"");
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.Password)) {
        schemaAttributeChoice.setEnabled(false);
        schemaAttributeChoice.setRequired(false);
        schemaAttributeChoice.setChoices(Collections.emptyList());
        mappingTO.setSourceAttrName(""String_Node_Str"");
      }
      schemaAttributeChoice.setOutputMarkupId(true);
      item.add(schemaAttributeChoice);
      item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttributeChoice).setRequired(true).setOutputMarkupId(true));
      item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
        @Override protected Iterator getChoices(        String input){
          List<String> choices=new ArrayList<String>();
          if (Strings.isEmpty(input)) {
            choices=Collections.emptyList();
            return choices.iterator();
          }
          if (""String_Node_Str"".startsWith(input.toLowerCase())) {
            choices.add(""String_Node_Str"");
          }
 else           if (""String_Node_Str"".startsWith(input.toLowerCase())) {
            choices.add(""String_Node_Str"");
          }
          return choices.iterator();
        }
      }
);
      item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
      item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
    }
  }
;
  mappingUserSchemaContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingUserSchemaContainer.add(mappingUserSchemaView);
  mappingUserSchemaContainer.setOutputMarkupId(true);
  resourceForm.add(mappingUserSchemaContainer);
  addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      resourceTO.getMappings().add(new SchemaMappingTO());
      target.addComponent(mappingUserSchemaContainer);
    }
  }
;
  addSchemaMappingBtn.setDefaultFormProcessing(false);
  resourceForm.add(addSchemaMappingBtn);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
      try {
        resourceFormCustomValidation();
      }
 catch (      IllegalArgumentException e) {
        for (        String error : errors.values()) {
          error(error);
        }
        errors.clear();
        return;
      }
      Resources callerPage=(Resources)basePage;
      try {
        if (createFlag) {
          restClient.createResource(resourceTO);
        }
 else {
          restClient.updateResource(resourceTO);
        }
        callerPage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        callerPage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + resourceTO);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  resourceForm.add(submit);
  add(resourceForm);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public ResourceModalPage(final BasePage basePage,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  this.resource=resourceTO;
  setupChoiceListsPopulators();
  Form resourceForm=new Form(""String_Node_Str"");
  resourceForm.setModel(new CompoundPropertyModel(resourceTO));
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  IModel connectors=new LoadableDetachableModel(){
    @Override protected Object load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel sourceMappingTypes=new LoadableDetachableModel(){
    @Override protected Object load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  resourceName=new TextField(""String_Node_Str"");
  resourceName.setEnabled(createFlag);
  resourceName.setRequired(true);
  resourceName.setOutputMarkupId(true);
  resourceForm.add(resourceName);
  TextField accountLink=new TextField(""String_Node_Str"");
  accountLink.setOutputMarkupId(true);
  resourceForm.add(accountLink);
  forceMandatoryConstraint=new CheckBox(""String_Node_Str"");
  forceMandatoryConstraint.setOutputMarkupId(true);
  resourceForm.add(forceMandatoryConstraint);
  optionalPropagationMode=new DropDownChoice<PropagationMode>(""String_Node_Str"");
  optionalPropagationMode.setModel(new IModel<PropagationMode>(){
    @Override public PropagationMode getObject(){
      return resourceTO.getOptionalPropagationMode();
    }
    @Override public void setObject(    final PropagationMode object){
      resourceTO.setOptionalPropagationMode(object);
    }
    @Override public void detach(){
    }
  }
);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  optionalPropagationMode.setOutputMarkupId(true);
  resourceForm.add(optionalPropagationMode);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  connector=new DropDownChoice(""String_Node_Str"",new Model(connectorTO),connectors,renderer);
  connector.setEnabled(createFlag);
  connector.setModel(new IModel(){
    @Override public Object getObject(){
      return connectorTO;
    }
    @Override public void setObject(    Object object){
      ConnInstanceTO connector=(ConnInstanceTO)object;
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.setRequired(true);
  connector.setEnabled(createFlag);
  resourceForm.add(connector);
  mappingUserSchemaView=new ListView(""String_Node_Str"",resourceTO.getMappings()){
    SchemaMappingTO mappingTO=null;
    DropDownChoice schemaAttributeChoice=null;
    @Override protected void populateItem(    final ListItem item){
      mappingTO=(SchemaMappingTO)item.getDefaultModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(new Boolean(""String_Node_Str""))){
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int id=new Integer(getParent().getId());
          resourceTO.getMappings().remove(id);
          target.addComponent(mappingUserSchemaContainer);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      item.add(new TextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")).setRequired(true).setLabel(new Model(getString(""String_Node_Str""))));
      schemaAttributeChoice=new DropDownChoice(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""),(IModel)null);
      if (mappingTO.getSourceMappingType() == null) {
        schemaAttributeChoice.setChoices(Collections.emptyList());
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.UserSchema)) {
        schemaAttributeChoice.setChoices(userSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.RoleSchema)) {
        schemaAttributeChoice.setChoices(roleSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.MembershipSchema)) {
        schemaAttributeChoice.setChoices(membershipSchemaAttributesNames);
        schemaAttributeChoice.setRequired(true);
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.SyncopeUserId)) {
        schemaAttributeChoice.setEnabled(false);
        schemaAttributeChoice.setRequired(false);
        schemaAttributeChoice.setChoices(Collections.emptyList());
        mappingTO.setSourceAttrName(""String_Node_Str"");
      }
 else       if (mappingTO.getSourceMappingType().equals(SourceMappingType.Password)) {
        schemaAttributeChoice.setEnabled(false);
        schemaAttributeChoice.setRequired(false);
        schemaAttributeChoice.setChoices(Collections.emptyList());
        mappingTO.setSourceAttrName(""String_Node_Str"");
      }
      schemaAttributeChoice.setOutputMarkupId(true);
      item.add(schemaAttributeChoice);
      item.add(new SourceMappingTypesDropDownChoice(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str""),sourceMappingTypes,schemaAttributeChoice).setRequired(true).setOutputMarkupId(true));
      item.add(new AutoCompleteTextField(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")){
        @Override protected Iterator getChoices(        String input){
          List<String> choices=new ArrayList<String>();
          if (Strings.isEmpty(input)) {
            choices=Collections.emptyList();
            return choices.iterator();
          }
          if (""String_Node_Str"".startsWith(input.toLowerCase())) {
            choices.add(""String_Node_Str"");
          }
 else           if (""String_Node_Str"".startsWith(input.toLowerCase())) {
            choices.add(""String_Node_Str"");
          }
          return choices.iterator();
        }
      }
);
      item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
      item.add(new CheckBox(""String_Node_Str"",new PropertyModel(mappingTO,""String_Node_Str"")));
    }
  }
;
  mappingUserSchemaContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingUserSchemaContainer.add(mappingUserSchemaView);
  mappingUserSchemaContainer.setOutputMarkupId(true);
  resourceForm.add(mappingUserSchemaContainer);
  addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      resourceTO.getMappings().add(new SchemaMappingTO());
      target.addComponent(mappingUserSchemaContainer);
    }
  }
;
  addSchemaMappingBtn.setDefaultFormProcessing(false);
  resourceForm.add(addSchemaMappingBtn);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
      try {
        resourceFormCustomValidation();
      }
 catch (      IllegalArgumentException e) {
        for (        String error : errors.values()) {
          error(error);
        }
        errors.clear();
        return;
      }
      Resources callerPage=(Resources)basePage;
      try {
        if (createFlag) {
          restClient.createResource(resourceTO);
        }
 else {
          restClient.updateResource(resourceTO);
        }
        callerPage.setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        callerPage.setOperationResult(false);
        LOG.error(""String_Node_Str"" + resourceTO);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  resourceForm.add(submit);
  add(resourceForm);
}"
61119,"/** 
 * Get all stored configurations.
 * @return ConfigurationTOs
 */
public List<ConfigurationTO> getAllConfigurations() throws SyncopeClientCompositeErrorException {
  List<ConfigurationTO> configurations=null;
  configurations=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO[].class));
  return configurations;
}","/** 
 * Get all stored configurations.
 * @return ConfigurationTOs
 */
public List<KeyValueTO> getAllConfigurations() throws SyncopeClientCompositeErrorException {
  List<KeyValueTO> configurations=null;
  configurations=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",KeyValueTO[].class));
  return configurations;
}"
61120,"/** 
 * Create a new configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean createConfiguration(ConfigurationTO configurationTO){
  ConfigurationTO newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,ConfigurationTO.class);
  return (configurationTO.equals(newConfigurationTO)) ? true : false;
}","/** 
 * Create a new configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean createConfiguration(KeyValueTO configurationTO){
  KeyValueTO newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,KeyValueTO.class);
  return (configurationTO.equals(newConfigurationTO)) ? true : false;
}"
61121,"/** 
 * Load an existent configuration.
 * @return ConfigurationTO object if the configuration exists,null otherwise
 */
public ConfigurationTO readConfiguration(String confKey) throws SyncopeClientCompositeErrorException {
  ConfigurationTO configurationTO=restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO.class,confKey);
  return configurationTO;
}","/** 
 * Load an existent configuration.
 * @return ConfigurationTO object if the configuration exists,null otherwise
 */
public KeyValueTO readConfiguration(String confKey) throws SyncopeClientCompositeErrorException {
  KeyValueTO configurationTO=restTemplate.getForObject(baseURL + ""String_Node_Str"",KeyValueTO.class,confKey);
  return configurationTO;
}"
61122,"/** 
 * Update an existent configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean updateConfiguration(ConfigurationTO configurationTO){
  ConfigurationTO newConfigurationTO=null;
  try {
    newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,ConfigurationTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  return (configurationTO.equals(newConfigurationTO)) ? true : false;
}","/** 
 * Update an existent configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean updateConfiguration(KeyValueTO configurationTO){
  KeyValueTO newConfigurationTO=null;
  try {
    newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,KeyValueTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  return (configurationTO.equals(newConfigurationTO)) ? true : false;
}"
61123,"public Configuration(PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConfigurationsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  createConfigWin.setInitialWidth(WIN_USER_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  editConfigWin.setInitialWidth(WIN_USER_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,container);
  setWindowClosedCallback(editConfigWin,container);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  createConfigWin.setInitialWidth(WIN_USER_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  editConfigWin.setInitialWidth(WIN_USER_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PropertyListView<LoggerTO>(""String_Node_Str"",restClient.getAllLoggers()){
    @Override protected void populateItem(    final ListItem<LoggerTO> item){
      item.add(new Label(""String_Node_Str""));
      DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
      level.setModel(new IModel<LoggerLevel>(){
        @Override public LoggerLevel getObject(){
          return LoggerLevel.valueOf(item.getModelObject().getLevel());
        }
        @Override public void setObject(        final LoggerLevel object){
          item.getModelObject().setLevel(object.toString());
        }
        @Override public void detach(){
        }
      }
);
      level.setChoices(Arrays.asList(LoggerLevel.values()));
      level.setOutputMarkupId(true);
      level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          if (restClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel())) {
            info(getString(""String_Node_Str""));
          }
 else {
            info(getString(""String_Node_Str""));
          }
          target.addComponent(feedbackPanel);
        }
      }
);
      item.add(level);
    }
  }
);
}"
61124,"@Override public Iterator<ConfigurationTO> iterator(int first,int count){
  List<ConfigurationTO> list=getConfigurationsListDB();
  Collections.sort(list,comparator);
  return list.subList(first,first + count).iterator();
}","@Override public Iterator<ConfigurationTO> iterator(int first,int count){
  List<ConfigurationTO> list=getAllConfigurations();
  Collections.sort(list,comparator);
  return list.subList(first,first + count).iterator();
}"
61125,"public void populateItem(Item<ICellPopulator<ConfigurationTO>> cellItem,String componentId,IModel<ConfigurationTO> model){
  final ConfigurationTO configurationTO=model.getObject();
  AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        restClient.deleteConfiguration(configurationTO.getConfKey());
      }
 catch (      UnsupportedEncodingException e) {
        LOG.error(""String_Node_Str"",e);
        error(e.getMessage());
        return;
      }
      info(getString(""String_Node_Str""));
      target.addComponent(feedbackPanel);
      target.addComponent(container);
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=1L;
        @Override public CharSequence preDecorateScript(        CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
        }
      }
;
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
  cellItem.add(panel);
}","@Override protected void populateItem(final ListItem<LoggerTO> item){
  item.add(new Label(""String_Node_Str""));
  DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
  level.setModel(new IModel<LoggerLevel>(){
    @Override public LoggerLevel getObject(){
      return LoggerLevel.valueOf(item.getModelObject().getLevel());
    }
    @Override public void setObject(    final LoggerLevel object){
      item.getModelObject().setLevel(object.toString());
    }
    @Override public void detach(){
    }
  }
);
  level.setChoices(Arrays.asList(LoggerLevel.values()));
  level.setOutputMarkupId(true);
  level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (restClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel())) {
        info(getString(""String_Node_Str""));
      }
 else {
        info(getString(""String_Node_Str""));
      }
      target.addComponent(feedbackPanel);
    }
  }
);
  item.add(level);
}"
61126,"@Override public int size(){
  return getConfigurationsListDB().size();
}","@Override public int size(){
  return getAllConfigurations().size();
}"
61127,"protected void onUpdate(AjaxRequestTarget target){
  utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
  table.setRowsPerPage(paginatorRows);
  target.addComponent(container);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  if (restClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel())) {
    info(getString(""String_Node_Str""));
  }
 else {
    info(getString(""String_Node_Str""));
  }
  target.addComponent(feedbackPanel);
}"
61128,"public Uid create(final PropagationMode propagationMode,final ObjectClass oclass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> triedPropagationRequests){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE)) {
    if (triedPropagationRequests != null) {
      triedPropagationRequests.add(""String_Node_Str"");
    }
    result=connector.create(oclass,attrs,options);
  }
  return result;
}","public Uid create(final PropagationMode propagationMode,final ObjectClass oclass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> triedPropagationRequests){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE)) {
    triedPropagationRequests.add(""String_Node_Str"");
    result=connector.create(oclass,attrs,options);
  }
  return result;
}"
61129,"public Uid update(final PropagationMode propagationMode,final ObjectClass objclass,final Uid uid,final Set<Attribute> replaceAttributes,final OperationOptions options,final Set<String> triedPropagationRequests){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE)) {
    if (triedPropagationRequests != null) {
      triedPropagationRequests.add(""String_Node_Str"");
    }
    result=connector.update(objclass,uid,replaceAttributes,options);
  }
  return result;
}","public Uid update(final PropagationMode propagationMode,final ObjectClass objclass,final Uid uid,final Set<Attribute> replaceAttributes,final OperationOptions options,final Set<String> triedPropagationRequests){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE)) {
    triedPropagationRequests.add(""String_Node_Str"");
    result=connector.update(objclass,uid,replaceAttributes,options);
  }
  return result;
}"
61130,"public void delete(final PropagationMode propagationMode,final ObjectClass objClass,final Uid uid,final OperationOptions options,final Set<String> triedPropagationRequests){
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_DELETE) : capabitilies.contains(ConnectorCapability.ASYNC_DELETE)) {
    if (triedPropagationRequests != null) {
      triedPropagationRequests.add(""String_Node_Str"");
    }
    connector.delete(objClass,uid,options);
  }
}","public void delete(final PropagationMode propagationMode,final ObjectClass objClass,final Uid uid,final OperationOptions options,final Set<String> triedPropagationRequests){
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_DELETE) : capabitilies.contains(ConnectorCapability.ASYNC_DELETE)) {
    triedPropagationRequests.add(""String_Node_Str"");
    connector.delete(objClass,uid,options);
  }
}"
61131,"private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,String password,TargetResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ resource+ ""String_Node_Str""+ user.getAttributes());
  }
  Set<Attribute> attributes=new HashSet<Attribute>();
  Class castToBeApplied;
  String accountId=null;
  Set objValues;
  UAttr attr;
  AbstractSchema schema;
  SchemaType schemaType=null;
  List<AbstractAttrValue> values;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getSourceAttrName());
    try {
switch (mapping.getSourceMappingType()) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
        schema=schemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
      schemaType=schema.getType();
    attr=user.getAttribute(mapping.getSourceAttrName());
  values=attr != null ? (schema.isUniqueConstraint() ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues()) : Collections.EMPTY_LIST;
if (LOG.isDebugEnabled()) {
  LOG.debug(""String_Node_Str"" + attr + ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType()+ ""String_Node_Str""+ values);
}
break;
case SyncopeUserId:
case Password:
schema=null;
schemaType=SchemaType.String;
AbstractAttrValue uAttrValue=new UAttrValue();
if (SourceMappingType.SyncopeUserId == mapping.getSourceMappingType()) {
uAttrValue.setStringValue(user.getId().toString());
}
if (SourceMappingType.Password == mapping.getSourceMappingType() && password != null) {
uAttrValue.setStringValue(password);
}
values=Collections.singletonList(uAttrValue);
break;
default :
schema=null;
values=null;
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getDestAttrName() + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || mapping.getSourceMappingType().equals(SourceMappingType.Password))+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType().toString()+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
}
objValues=new HashSet();
for (AbstractAttrValue value : values) {
castToBeApplied=Class.forName(schemaType.getClassName());
if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
castToBeApplied=String.class;
objValues.add(value.getValueAsString());
}
 else {
objValues.add(value.getValue());
}
}
if (mapping.isAccountid()) {
accountId=objValues.iterator().next().toString();
attributes.add(new Name(accountId));
}
if (mapping.isPassword()) {
attributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
}
if (!mapping.isPassword() && !mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
attributes.add(AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
attributes.add(objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
}
 catch (Throwable t) {
LOG.debug(""String_Node_Str"",mapping.getSourceAttrName(),t);
}
}
return Collections.singletonMap(accountId,attributes);
}","private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,String password,TargetResource resource){
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{user,resource,user.getAttributes()});
  Set<Attribute> attributes=new HashSet<Attribute>();
  Class castToBeApplied;
  String accountId=null;
  Set objValues;
  UAttr attr;
  AbstractSchema schema;
  SchemaType schemaType=null;
  List<AbstractAttrValue> values;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getSourceAttrName());
    try {
switch (mapping.getSourceMappingType()) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
        schema=schemaDAO.find(mapping.getSourceAttrName(),getSourceMappingTypeClass(mapping.getSourceMappingType()));
      schemaType=schema.getType();
    attr=user.getAttribute(mapping.getSourceAttrName());
  values=attr != null ? (schema.isUniqueConstraint() ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues()) : Collections.EMPTY_LIST;
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{attr,mapping.getSourceAttrName(),mapping.getSourceMappingType(),values});
break;
case SyncopeUserId:
case Password:
schema=null;
schemaType=SchemaType.String;
AbstractAttrValue uAttrValue=new UAttrValue();
if (SourceMappingType.SyncopeUserId == mapping.getSourceMappingType()) {
uAttrValue.setStringValue(user.getId().toString());
}
if (SourceMappingType.Password == mapping.getSourceMappingType() && password != null) {
uAttrValue.setStringValue(password);
}
values=Collections.singletonList(uAttrValue);
break;
default :
schema=null;
values=null;
}
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getDestAttrName() + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || mapping.getSourceMappingType().equals(SourceMappingType.Password))+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.getSourceAttrName()+ ""String_Node_Str""+ mapping.getSourceMappingType().toString()+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
}
objValues=new HashSet();
for (AbstractAttrValue value : values) {
castToBeApplied=Class.forName(schemaType.getClassName());
if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
castToBeApplied=String.class;
objValues.add(value.getValueAsString());
}
 else {
objValues.add(value.getValue());
}
}
if (mapping.isAccountid()) {
accountId=objValues.iterator().next().toString();
attributes.add(new Name(accountId));
}
if (mapping.isPassword()) {
attributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
}
if (!mapping.isPassword() && !mapping.isAccountid()) {
if (schema != null && schema.isMultivalue()) {
attributes.add(AttributeBuilder.build(mapping.getDestAttrName(),objValues));
}
 else {
attributes.add(objValues.isEmpty() ? AttributeBuilder.build(mapping.getDestAttrName()) : AttributeBuilder.build(mapping.getDestAttrName(),objValues.iterator().next()));
}
}
}
 catch (Throwable t) {
LOG.debug(""String_Node_Str"",mapping.getSourceAttrName(),t);
}
}
return Collections.singletonMap(accountId,attributes);
}"
61132,"/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param mandatoryResourceNames
 * @param merge
 * @throws PropagationException
 */
private void provision(final SyncopeUser user,final String password,final ResourceOperations resourceOperations,final Set<String> mandatoryResourceNames) throws PropagationException {
  LOG.debug(""String_Node_Str"",user,resourceOperations);
  resourceOperations.purge();
  LOG.debug(""String_Node_Str"",resourceOperations);
  Task task;
  TaskExecution execution;
  Long workflowId;
  for (  ResourceOperationType type : ResourceOperationType.values()) {
    for (    TargetResource resource : resourceOperations.get(type)) {
      Map<String,Set<Attribute>> preparedAttributes=prepareAttributes(user,password,resource);
      String accountId=preparedAttributes.keySet().iterator().next();
      task=new Task();
      task.setResource(resource);
      task.setResourceOperationType(type);
      task.setPropagationMode(mandatoryResourceNames.contains(resource.getName()) ? PropagationMode.SYNC : resource.getOptionalPropagationMode());
      task.setAccountId(accountId);
      task.setOldAccountId(resourceOperations.getOldAccountId());
      task.setAttributes(preparedAttributes.values().iterator().next());
      LOG.debug(""String_Node_Str"",task);
      task=taskDAO.save(task);
      execution=new TaskExecution();
      execution.setTask(task);
      try {
        workflowId=workflow.initialize(Constants.TASKEXECUTION_WORKFLOW,0,null);
        execution.setWorkflowId(workflowId);
      }
 catch (      WorkflowException e) {
        LOG.error(""String_Node_Str"",execution,e);
      }
      propagate(execution);
      LOG.debug(""String_Node_Str"",task);
      if (mandatoryResourceNames.contains(resource.getName()) && WFUtils.getTaskExecutionStatus(workflow,execution) != TaskExecutionStatus.SUCCESS) {
        throw new PropagationException(resource.getName(),execution.getMessage());
      }
    }
  }
}","/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param mandatoryResourceNames
 * @param merge
 * @throws PropagationException
 */
private void provision(final SyncopeUser user,final String password,final ResourceOperations resourceOperations,final Set<String> mandatoryResourceNames) throws PropagationException {
  LOG.debug(""String_Node_Str"",user,resourceOperations);
  resourceOperations.purge();
  LOG.debug(""String_Node_Str"",resourceOperations);
  Task task;
  TaskExecution execution;
  Long workflowId;
  for (  ResourceOperationType type : ResourceOperationType.values()) {
    for (    TargetResource resource : resourceOperations.get(type)) {
      Map<String,Set<Attribute>> preparedAttributes=prepareAttributes(user,password,resource);
      String accountId=preparedAttributes.keySet().iterator().next();
      task=new Task();
      task.setResource(resource);
      task.setResourceOperationType(type);
      task.setPropagationMode(mandatoryResourceNames.contains(resource.getName()) ? PropagationMode.SYNC : resource.getOptionalPropagationMode());
      task.setAccountId(accountId);
      task.setOldAccountId(resourceOperations.getOldAccountId(resource.getName()));
      task.setAttributes(preparedAttributes.values().iterator().next());
      LOG.debug(""String_Node_Str"",task);
      task=taskDAO.save(task);
      execution=new TaskExecution();
      execution.setTask(task);
      try {
        workflowId=workflow.initialize(Constants.TASKEXECUTION_WORKFLOW,0,null);
        execution.setWorkflowId(workflowId);
      }
 catch (      WorkflowException e) {
        LOG.error(""String_Node_Str"",execution,e);
      }
      propagate(execution);
      LOG.debug(""String_Node_Str"",task);
      if (mandatoryResourceNames.contains(resource.getName()) && WFUtils.getTaskExecutionStatus(workflow,execution) != TaskExecutionStatus.SUCCESS) {
        throw new PropagationException(resource.getName(),execution.getMessage());
      }
    }
  }
}"
61133,"public ResourceOperations(){
  toBeCreated=new HashSet<TargetResource>();
  toBeUpdated=new HashSet<TargetResource>();
  toBeDeleted=new HashSet<TargetResource>();
}","public ResourceOperations(){
  toBeCreated=new HashSet<TargetResource>();
  toBeUpdated=new HashSet<TargetResource>();
  toBeDeleted=new HashSet<TargetResource>();
  oldAccountIds=new HashMap<String,String>();
}"
61134,"public String getOldAccountId(){
  return oldAccountId;
}","public String getOldAccountId(final String resourceName){
  return oldAccountIds.get(resourceName);
}"
61135,"@Override public String toString(){
  return ""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ ""String_Node_Str""+ toBeUpdated+ ""String_Node_Str""+ ""String_Node_Str""+ toBeDeleted+ ""String_Node_Str""+ ""String_Node_Str""+ oldAccountId;
}","@Override public String toString(){
  return ""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ ""String_Node_Str""+ toBeUpdated+ ""String_Node_Str""+ ""String_Node_Str""+ toBeDeleted+ ""String_Node_Str""+ ""String_Node_Str""+ oldAccountIds;
}"
61136,"/** 
 * Create a copy of old RoleTO
 * @param roleTO
 */
public void cloneOldRoleTO(RoleTO roleTO){
  oldRole=new RoleTO();
  oldRole.setId(roleTO.getId());
  oldRole.setName(new String(roleTO.getName()));
  oldRole.setParent(new Long(roleTO.getParent()));
  List<AttributeTO> attributes=new ArrayList<AttributeTO>();
  AttributeTO attributeTO;
  List<String> values;
  for (  AttributeTO attribute : roleTO.getAttributes()) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(new String(attribute.getSchema()));
    values=new ArrayList<String>();
    for (    String val : attribute.getValues()) {
      values.add(val);
    }
    attributeTO.setValues(values);
    attributes.add(attributeTO);
  }
  oldRole.setAttributes(attributes);
  oldRole.setResources(roleTO.getResources());
  List<String> entList=new ArrayList<String>();
  for (  String entitlement : roleTO.getEntitlements())   entList.add(entitlement);
  oldRole.setEntitlements(entList);
}","/** 
 * Create a copy of old RoleTO
 * @param roleTO
 */
public void cloneOldRoleTO(RoleTO roleTO){
  oldRole=new RoleTO();
  oldRole.setId(roleTO.getId());
  oldRole.setName(new String(roleTO.getName()));
  oldRole.setParent(new Long(roleTO.getParent()));
  List<AttributeTO> attributes=new ArrayList<AttributeTO>();
  AttributeTO attributeTO;
  List<String> values;
  for (  AttributeTO attribute : roleTO.getAttributes()) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(new String(attribute.getSchema()));
    values=new ArrayList<String>();
    for (    String val : attribute.getValues()) {
      values.add(val);
    }
    attributeTO.setValues(values);
    attributes.add(attributeTO);
  }
  oldRole.setAttributes(attributes);
  oldRole.setResources(roleTO.getResources());
  List<String> entList=new ArrayList<String>();
  for (  String entitlement : roleTO.getEntitlements()) {
    entList.add(entitlement);
  }
  oldRole.setEntitlements(entList);
}"
61137,"@Override protected void onError(AjaxRequestTarget target,Form form){
  target.addComponent(feedbackPanel);
}","@Override protected void onError(final AjaxRequestTarget target,final Form form){
  target.addComponent(feedbackPanel);
}"
61138,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
    for (    ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
      resourcesSet.add(resourceTO.getName());
    }
    roleTO.setResources(resourcesSet);
    List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
    for (    String entitlement : entitlementsPalette.getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    roleTO.setAttributes(getRoleAttributes());
    if (createFlag) {
      roleRestClient.createRole(roleTO);
      Roles callerPage=(Roles)basePage;
      callerPage.setOperationResult(true);
      window.close(target);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        LOG.debug(""String_Node_Str"",roleMod);
        res=roleRestClient.updateRole(roleMod);
        if (!res) {
          error(getString(""String_Node_Str""));
        }
 else {
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
        }
      }
      window.close(target);
    }
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
    for (    ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
      resourcesSet.add(resourceTO.getName());
    }
    roleTO.setResources(resourcesSet);
    List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
    for (    String entitlement : entitlementsPalette.getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    roleTO.setAttributes(getRoleAttributes());
    if (createFlag) {
      roleRestClient.createRole(roleTO);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        roleRestClient.updateRole(roleMod);
      }
    }
    ((Roles)basePage).setOperationResult(true);
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}"
61139,"public void setupRoleMod(final RoleTO roleTO){
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod=new RoleMod();
    roleMod.setName(roleTO.getName());
  }
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements()))   roleMod.setEntitlements(roleTO.getEntitlements());
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else     roleMod.setEntitlements(oldRole.getEntitlements());
  }
}","public void setupRoleMod(final RoleTO roleTO){
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod=new RoleMod();
    roleMod.setName(roleTO.getName());
  }
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
    roleMod.setEntitlements(roleTO.getEntitlements());
  }
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else {
      roleMod.setEntitlements(oldRole.getEntitlements());
    }
  }
}"
61140,"/** 
 * Constructor.
 * @param basePage
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    final ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""),8,false);
  form.add(resourcesPalette);
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new StringChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
        for (        ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
          resourcesSet.add(resourceTO.getName());
        }
        roleTO.setResources(resourcesSet);
        List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          roleRestClient.createRole(roleTO);
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
          window.close(target);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            LOG.debug(""String_Node_Str"",roleMod);
            res=roleRestClient.updateRole(roleMod);
            if (!res) {
              error(getString(""String_Node_Str""));
            }
 else {
              Roles callerPage=(Roles)basePage;
              callerPage.setOperationResult(true);
            }
          }
          window.close(target);
        }
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param basePage
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    final ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType() == SchemaType.Boolean) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType() == SchemaType.Date) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse(dateValue);
                  }
 else {
                    date=null;
                  }
                }
 catch (                ParseException e) {
                  LOG.error(""String_Node_Str"",e);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        final AjaxRequestTarget target,        final Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType() == SchemaType.Boolean) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""),8,false);
  form.add(resourcesPalette);
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new StringChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        Set<String> resourcesSet=new HashSet<String>(resourcesPalette.getModelCollection().size());
        for (        ResourceTO resourceTO : resourcesPalette.getModelCollection()) {
          resourcesSet.add(resourceTO.getName());
        }
        roleTO.setResources(resourcesSet);
        List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)basePage).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.addComponent(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
61141,"/** 
 * @see BaseTreePage#getTree()
 */
protected AbstractTree getTree(){
  return tree;
}","protected AbstractTree getTree(){
  return tree;
}"
61142,"public void onClose(AjaxRequestTarget target){
  target.addComponent(container);
  if (operationResult) {
    getSession().info(getString(""String_Node_Str""));
  }
  setResponsePage(new Roles(null));
}","@Override public void onClose(final AjaxRequestTarget target){
  target.addComponent(container);
  if (operationResult) {
    getSession().info(getString(""String_Node_Str""));
  }
  setResponsePage(new Roles(null));
}"
61143,"public Roles(PageParameters parameters){
  super(parameters);
  add(createRoleWin=new ModalWindow(""String_Node_Str""));
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_USER_HEIGHT);
  createRoleWin.setInitialWidth(WIN_USER_WIDTH);
  createRoleWin.setPageMapName(""String_Node_Str"");
  createRoleWin.setCookieName(""String_Node_Str"");
  container=new WebMarkupContainer(""String_Node_Str"");
  IColumn columns[]=new IColumn[]{new PropertyTreeColumn(new ColumnLocation(Alignment.LEFT,30,Unit.EM),getString(""String_Node_Str""),""String_Node_Str""),new PropertyEditableColumn(new ColumnLocation(Alignment.LEFT,20,Unit.EM),getString(""String_Node_Str""),""String_Node_Str"",createRoleWin,Roles.this)};
  Form form=new Form(""String_Node_Str"");
  add(form);
  SyncopeRoleTree roleTree=new SyncopeRoleTree(restClient);
  tree=new TreeTable(""String_Node_Str"",roleTree.createTreeModel(),columns);
  form.add(tree);
  tree.getTreeState().expandAll();
  tree.updateTree();
  container.add(tree);
  container.setOutputMarkupId(true);
  form.add(container);
  setWindowClosedCallback(createRoleWin,container);
}","public Roles(final PageParameters parameters){
  super(parameters);
  add(createRoleWin=new ModalWindow(""String_Node_Str""));
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_USER_HEIGHT);
  createRoleWin.setInitialWidth(WIN_USER_WIDTH);
  createRoleWin.setPageMapName(""String_Node_Str"");
  createRoleWin.setCookieName(""String_Node_Str"");
  container=new WebMarkupContainer(""String_Node_Str"");
  IColumn[] columns=new IColumn[]{new PropertyTreeColumn(new ColumnLocation(Alignment.LEFT,30,Unit.EM),getString(""String_Node_Str""),""String_Node_Str""),new PropertyEditableColumn(new ColumnLocation(Alignment.LEFT,20,Unit.EM),getString(""String_Node_Str""),""String_Node_Str"",createRoleWin,Roles.this)};
  Form form=new Form(""String_Node_Str"");
  add(form);
  tree=new TreeTable(""String_Node_Str"",roleTreeBuilder.build(),columns);
  form.add(tree);
  tree.getTreeState().expandAll();
  tree.updateTree();
  container.add(tree);
  container.setOutputMarkupId(true);
  form.add(container);
  createRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        getSession().info(getString(""String_Node_Str""));
      }
      setResponsePage(new Roles(null));
    }
  }
);
}"
61144,"@Override public void onClick(AjaxRequestTarget target){
  createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
    public Page createPage(){
      ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
      return window;
    }
  }
);
  createConfigWin.show(target);
}","@Override public void onClick(AjaxRequestTarget target){
  createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
      return window;
    }
  }
);
  createConfigWin.show(target);
}"
61145,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequestCycle().getWebRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(confContainer);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        @Override public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequestCycle().getWebRequest(),getWebRequestCycle().getWebResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setRowsPerPage(paginatorRows);
      target.addComponent(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
61146,"public Page createPage(){
  ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
  return window;
}","@Override public Page createPage(){
  ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
  return window;
}"
61147,"public <T extends AbstractAttrValue>List<String> getValuesAsStrings(){
  List<String> result;
  if (getUniqueValue() != null) {
    result=Collections.singletonList(getUniqueValue().getValueAsString());
  }
 else {
    result=new ArrayList<String>(getValues().size());
    for (    AbstractAttrValue attributeValue : getValues()) {
      result.add(attributeValue.getValueAsString());
    }
    if (getUniqueValue() != null) {
      result.add(getUniqueValue().getValueAsString());
    }
  }
  return result;
}","public <T extends AbstractAttrValue>List<String> getValuesAsStrings(){
  List<String> result;
  if (getUniqueValue() != null) {
    result=Collections.singletonList(getUniqueValue().getValueAsString());
  }
 else {
    result=new ArrayList<String>(getValues().size());
    for (    AbstractAttrValue attributeValue : getValues()) {
      result.add(attributeValue.getValueAsString());
    }
  }
  return result;
}"
61148,"@Override public boolean isValid(final AbstractAttr object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    if (object.getSchema().isUniqueConstraint()) {
      isValid=object.getValues().isEmpty() && object.getUniqueValue() != null;
    }
 else {
      isValid=!object.getValues().isEmpty() && object.getUniqueValue() == null;
      if (!object.getSchema().isMultivalue()) {
        isValid&=object.getValues().size() == 1;
      }
    }
    if (!isValid) {
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidValueList.toString()).addConstraintViolation();
    }
  }
  return isValid;
}","@Override public boolean isValid(final AbstractAttr object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    if (object.getSchema().isUniqueConstraint()) {
      isValid=object.getValues().isEmpty() && object.getUniqueValue() != null;
    }
 else {
      isValid=!object.getValues().isEmpty() && object.getUniqueValue() == null;
      if (!object.getSchema().isMultivalue()) {
        isValid&=object.getValues().size() == 1;
      }
    }
    if (!isValid) {
      LOG.error(""String_Node_Str"" + ""String_Node_Str"" + object.getSchema().getName() + ""String_Node_Str""+ ""String_Node_Str"",object.getValuesAsStrings());
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidValueList.toString()).addConstraintViolation();
    }
  }
  return isValid;
}"
61149,"public Connectors(PageParameters parameters){
  super(parameters);
  add(createConnectorWin=new ModalWindow(""String_Node_Str""));
  add(editConnectorWin=new ModalWindow(""String_Node_Str""));
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONNECTORS_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConnectorInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConnectorInstanceTO>> cellItem,    String componentId,    IModel<ConnectorInstanceTO> model){
      final ConnectorInstanceTO connectorTO=model.getObject();
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConnectorsModalPage form=new ConnectorsModalPage(Connectors.this,editConnectorWin,connectorTO,false);
              return form;
            }
          }
);
          editConnectorWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConnectorInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConnectorInstanceTO>> cellItem,    String componentId,    IModel<ConnectorInstanceTO> model){
      final ConnectorInstanceTO connectorTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          if (!checkDeleteIsForbidden(connectorTO)) {
            restClient.deleteConnector(connectorTO.getId());
            info(getString(""String_Node_Str""));
          }
 else           error(getString(""String_Node_Str""));
          target.addComponent(container);
          target.addComponent(feedbackPanel);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConnectorsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createConnectorWin,container);
  setWindowClosedCallback(editConnectorWin,container);
  createConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConnectorWin.setPageMapName(""String_Node_Str"");
  createConnectorWin.setCookieName(""String_Node_Str"");
  editConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConnectorWin.setPageMapName(""String_Node_Str"");
  editConnectorWin.setCookieName(""String_Node_Str"");
  AjaxLink createConnectorLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConnectorsModalPage form=new ConnectorsModalPage(Connectors.this,editConnectorWin,new ConnectorInstanceTO(),true);
          return form;
        }
      }
);
      createConnectorWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConnectorLink,ENABLE,allowedRoles);
  add(createConnectorLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONNECTORS_PAGINATOR_ROWS,paginatorRows);
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public Connectors(PageParameters parameters){
  super(parameters);
  add(createConnectorWin=new ModalWindow(""String_Node_Str""));
  add(editConnectorWin=new ModalWindow(""String_Node_Str""));
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONNECTORS_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConnectorInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConnectorInstanceTO>> cellItem,    String componentId,    IModel<ConnectorInstanceTO> model){
      final ConnectorInstanceTO connectorTO=model.getObject();
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConnectorsModalPage form=new ConnectorsModalPage(Connectors.this,editConnectorWin,connectorTO,false);
              return form;
            }
          }
);
          editConnectorWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConnectorInstanceTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConnectorInstanceTO>> cellItem,    String componentId,    IModel<ConnectorInstanceTO> model){
      final ConnectorInstanceTO connectorTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          if (!checkDeleteIsForbidden(connectorTO)) {
            restClient.deleteConnector(connectorTO.getId());
            info(getString(""String_Node_Str""));
          }
 else           error(getString(""String_Node_Str""));
          target.addComponent(container);
          target.addComponent(feedbackPanel);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,allowedRoles);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConnectorsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createConnectorWin,container);
  setWindowClosedCallback(editConnectorWin,container);
  createConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConnectorWin.setPageMapName(""String_Node_Str"");
  createConnectorWin.setCookieName(""String_Node_Str"");
  editConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConnectorWin.setPageMapName(""String_Node_Str"");
  editConnectorWin.setCookieName(""String_Node_Str"");
  AjaxLink createConnectorLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConnectorWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConnectorsModalPage form=new ConnectorsModalPage(Connectors.this,editConnectorWin,new ConnectorInstanceTO(),true);
          return form;
        }
      }
);
      createConnectorWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConnectorLink,ENABLE,allowedRoles);
  add(createConnectorLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONNECTORS_PAGINATOR_ROWS,paginatorRows);
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
61150,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public ConnectorsModalPage(final BasePage basePage,final ModalWindow window,final ConnectorInstanceTO connectorTO,final boolean createFlag){
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  if (!createFlag)   setupSelections(connectorTO);
  IModel bundles=new LoadableDetachableModel(){
    protected Object load(){
      return restClient.getAllBundles();
    }
  }
;
  IModel selectedBundleProperties=new LoadableDetachableModel(){
    protected Object load(){
      List<PropertyTO> list;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        list=new ArrayList<PropertyTO>();
        PropertyTO propertyTO;
        for (        String key : selectedBundleTO.getProperties()) {
          propertyTO=new PropertyTO();
          propertyTO.setKey(key);
          list.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        list=hashSetToList(connectorTO.getConfiguration());
      }
      return list;
    }
  }
;
  connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  bundle=new DropDownChoice(""String_Node_Str"",bundles,renderer);
  bundle.setModel(new IModel(){
    public Object getObject(){
      return selectedBundleTO;
    }
    public void setObject(    Object object){
      selectedBundleTO=(ConnectorBundleTO)object;
    }
    public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<PropertyTO>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView propertiesView=(new ListView(""String_Node_Str"",selectedBundleProperties){
    PropertyTO propertyTO;
    @Override protected void populateItem(    ListItem item){
      propertyTO=(PropertyTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",propertyTO.getKey()));
      item.add(new TextField(""String_Node_Str"",new PropertyModel(propertyTO,""String_Node_Str"")));
      connectorTO.getConfiguration().add(propertyTO);
    }
  }
);
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propertiesView);
  connectorForm.add(propertiesContainer);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      ConnectorInstanceTO connector=(ConnectorInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue());
      connector.setCapabilities(getResourcesSet(selections));
      try {
        if (createFlag)         restClient.createConnector(connector);
 else         restClient.updateConnector(connector);
        Connectors callerPage=(Connectors)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  String allowedRoles;
  if (createFlag)   allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
 else   allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  connectorForm.add(connectorName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel capabilities=new LoadableDetachableModel(){
    @Override protected Object load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public ConnectorsModalPage(final BasePage basePage,final ModalWindow window,final ConnectorInstanceTO connectorTO,final boolean createFlag){
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  if (!createFlag)   setupSelections(connectorTO);
  IModel bundles=new LoadableDetachableModel(){
    protected Object load(){
      return restClient.getAllBundles();
    }
  }
;
  IModel selectedBundleProperties=new LoadableDetachableModel(){
    protected Object load(){
      List<PropertyTO> list;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        list=new ArrayList<PropertyTO>();
        PropertyTO propertyTO;
        for (        String key : selectedBundleTO.getProperties()) {
          propertyTO=new PropertyTO();
          propertyTO.setKey(key);
          list.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        list=hashSetToList(connectorTO.getConfiguration());
      }
      return list;
    }
  }
;
  connectorName=new TextField(""String_Node_Str"");
  connectorName.setEnabled(false);
  connectorName.setOutputMarkupId(true);
  displayName=new TextField(""String_Node_Str"");
  displayName.setOutputMarkupId(true);
  version=new TextField(""String_Node_Str"");
  version.setEnabled(false);
  version.setOutputMarkupId(true);
  ChoiceRenderer renderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  bundle=new DropDownChoice(""String_Node_Str"",bundles,renderer);
  bundle.setModel(new IModel(){
    public Object getObject(){
      return selectedBundleTO;
    }
    public void setObject(    Object object){
      selectedBundleTO=(ConnectorBundleTO)object;
    }
    public void detach(){
    }
  }
);
  bundle.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<PropertyTO>());
      target.addComponent(propertiesContainer);
      target.addComponent(connectorName);
      target.addComponent(version);
    }
  }
);
  bundle.setRequired(true);
  bundle.setEnabled(createFlag);
  ListView propertiesView=(new ListView(""String_Node_Str"",selectedBundleProperties){
    PropertyTO propertyTO;
    @Override protected void populateItem(    ListItem item){
      propertyTO=(PropertyTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",propertyTO.getKey()));
      item.add(new TextField(""String_Node_Str"",new PropertyModel(propertyTO,""String_Node_Str"")));
      connectorTO.getConfiguration().add(propertyTO);
    }
  }
);
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propertiesView);
  connectorForm.add(propertiesContainer);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      ConnectorInstanceTO connector=(ConnectorInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(bundle.getModelValue());
      connector.setCapabilities(getResourcesSet(selections));
      try {
        if (createFlag)         restClient.createConnector(connector);
 else         restClient.updateConnector(connector);
        Connectors callerPage=(Connectors)basePage;
        callerPage.setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  String allowedRoles;
  if (createFlag)   allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
 else   allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel capabilities=new LoadableDetachableModel(){
    @Override protected Object load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
61151,"/** 
 * @param username
 * @param password
 * @return
 */
public SyncopeUser authenticate(String username,String password){
  SyncopeUser user=null;
  String roles=""String_Node_Str"";
  if (""String_Node_Str"".equals(username) && ""String_Node_Str"".equals(password)) {
    List<String> rolesList=getAdminRoles();
    for (int i=0; i < rolesList.size(); i++) {
      String role=rolesList.get(i);
      roles+=role;
      if (i != rolesList.size())       roles+=""String_Node_Str"";
    }
    user=new SyncopeUser(username,roles);
    return user;
  }
 else   if (""String_Node_Str"".equals(username) && ""String_Node_Str"".equals(password)) {
    List<String> rolesList=getManagerRoles();
    for (int i=0; i < rolesList.size(); i++) {
      String role=rolesList.get(i);
      roles+=role;
      if (i != rolesList.size())       roles+=""String_Node_Str"";
    }
    user=new SyncopeUser(username,roles);
    return user;
  }
 else   return null;
}","/** 
 * Authenticate the user.
 * @param username
 * @param password
 * @return SyncopeUser object if the authorization succedes, null valueotherwise.
 */
public SyncopeUser authenticate(String username,String password){
  SyncopeUser user=null;
  String roles=""String_Node_Str"";
  ((CommonsClientHttpRequestFactory)restClient.getRestTemplate().getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(username,password));
  List<String> auths;
  try {
    auths=Arrays.asList(restClient.getRestTemplate().getForObject(restClient.getBaseURL() + ""String_Node_Str"",String[].class));
  }
 catch (  HttpClientErrorException e) {
    ((CommonsClientHttpRequestFactory)restClient.getRestTemplate().getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,null);
    getSession().error(e.getMessage());
    return null;
  }
  if (auths != null && auths.size() > 0) {
    for (int i=0; i < auths.size(); i++) {
      String role=auths.get(i);
      roles+=role;
      if (i != auths.size())       roles+=""String_Node_Str"";
    }
    user=new SyncopeUser(username,roles);
    return user;
  }
 else {
    ((CommonsClientHttpRequestFactory)restClient.getRestTemplate().getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,null);
    getSession().error(getString(""String_Node_Str""));
    return null;
  }
}"
61152,"@Override public void onSubmit(){
  SyncopeUser user=authenticate(usernameField.getRawInput(),passwordField.getRawInput());
  if (user != null) {
    ((SyncopeSession)Session.get()).setUser(user);
    setResponsePage(new WelcomePage(null));
  }
 else   error(getString(""String_Node_Str""));
}","@Override public void onSubmit(){
  SyncopeUser user=authenticate(usernameField.getRawInput(),passwordField.getRawInput());
  if (user != null) {
    ((SyncopeSession)Session.get()).setUser(user);
    setResponsePage(new WelcomePage(null));
  }
}"
61153,"public Login(PageParameters parameters){
  super(parameters);
  form=new Form(""String_Node_Str"");
  usernameField=new TextField(""String_Node_Str"",new Model());
  usernameField.setMarkupId(""String_Node_Str"");
  form.add(usernameField);
  passwordField=new PasswordTextField(""String_Node_Str"",new Model());
  passwordField.setMarkupId(""String_Node_Str"");
  form.add(passwordField);
  languageSelect=new LocaleDropDown(""String_Node_Str"",Arrays.asList(new Locale[]{Locale.ENGLISH,Locale.ITALIAN}));
  form.add(languageSelect);
  Button submitButton=new Button(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override public void onSubmit(){
      SyncopeUser user=authenticate(usernameField.getRawInput(),passwordField.getRawInput());
      if (user != null) {
        ((SyncopeSession)Session.get()).setUser(user);
        setResponsePage(new WelcomePage(null));
      }
 else       error(getString(""String_Node_Str""));
    }
  }
;
  submitButton.setDefaultFormProcessing(false);
  form.add(submitButton);
  add(form);
  add(new FeedbackPanel(""String_Node_Str""));
}","public Login(PageParameters parameters){
  super(parameters);
  form=new Form(""String_Node_Str"");
  usernameField=new TextField(""String_Node_Str"",new Model());
  usernameField.setMarkupId(""String_Node_Str"");
  form.add(usernameField);
  passwordField=new PasswordTextField(""String_Node_Str"",new Model());
  passwordField.setMarkupId(""String_Node_Str"");
  form.add(passwordField);
  languageSelect=new LocaleDropDown(""String_Node_Str"",Arrays.asList(new Locale[]{Locale.ENGLISH,Locale.ITALIAN}));
  form.add(languageSelect);
  Button submitButton=new Button(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override public void onSubmit(){
      SyncopeUser user=authenticate(usernameField.getRawInput(),passwordField.getRawInput());
      if (user != null) {
        ((SyncopeSession)Session.get()).setUser(user);
        setResponsePage(new WelcomePage(null));
      }
    }
  }
;
  submitButton.setDefaultFormProcessing(false);
  form.add(submitButton);
  add(form);
  add(new FeedbackPanel(""String_Node_Str""));
}"
61154,"@Override public void handleError(ClientHttpResponse response) throws IOException {
  if (!ArrayUtils.contains(managedStatuses,response.getStatusCode())) {
    super.handleError(response);
  }
  SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(response.getStatusCode());
  List<String> exceptionTypesInHeaders=response.getHeaders().get(EXCEPTION_TYPE_HEADER);
  if (exceptionTypesInHeaders == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str"");
    }
    return;
  }
  SyncopeClientExceptionType exceptionType=null;
  SyncopeClientException clientException=null;
  Set<String> handledExceptions=new HashSet<String>();
  for (  String exceptionTypeAsString : exceptionTypesInHeaders) {
    try {
      exceptionType=SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);
    }
 catch (    IllegalArgumentException e) {
      log.error(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str""+ exceptionTypeAsString,e);
    }
    if (exceptionType != null) {
      handledExceptions.add(exceptionTypeAsString);
      clientException=new SyncopeClientException();
      clientException.setType(exceptionType);
      if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {
        clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));
      }
      compositeException.addException(clientException);
    }
  }
  exceptionTypesInHeaders.removeAll(handledExceptions);
  if (!exceptionTypesInHeaders.isEmpty()) {
    log.error(""String_Node_Str"" + exceptionTypesInHeaders);
  }
  if (compositeException.hasExceptions()) {
    throw compositeException;
  }
}","@Override public void handleError(final ClientHttpResponse response) throws IOException {
  if (!ArrayUtils.contains(MANAGED_STATUSES,response.getStatusCode())) {
    super.handleError(response);
  }
  List<String> exceptionTypesInHeaders=response.getHeaders().get(EXCEPTION_TYPE_HEADER);
  if (exceptionTypesInHeaders == null) {
    LOG.debug(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str"");
    return;
  }
  SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(response.getStatusCode());
  SyncopeClientExceptionType exceptionType=null;
  SyncopeClientException clientException=null;
  Set<String> handledExceptions=new HashSet<String>();
  for (  String exceptionTypeAsString : exceptionTypesInHeaders) {
    try {
      exceptionType=SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);
    }
 catch (    IllegalArgumentException e) {
      LOG.error(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str""+ exceptionTypeAsString,e);
    }
    if (exceptionType != null) {
      handledExceptions.add(exceptionTypeAsString);
      clientException=new SyncopeClientException();
      clientException.setType(exceptionType);
      if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {
        clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));
      }
      compositeException.addException(clientException);
    }
  }
  exceptionTypesInHeaders.removeAll(handledExceptions);
  if (!exceptionTypesInHeaders.isEmpty()) {
    LOG.error(""String_Node_Str"" + exceptionTypesInHeaders);
  }
  if (compositeException.hasExceptions()) {
    throw compositeException;
  }
}"
61155,"@Override public void delete(final Long id){
  JPAWorkflowEntry entry=find(id);
  if (entry == null) {
    return;
  }
  List<JPAPropertySetItem> properties=propertySetItemDAO.findAll(entry.getId());
  if (properties != null) {
    for (    JPAPropertySetItem property : properties) {
      propertySetItemDAO.delete(property.getId());
    }
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",entry);
  query.getResultList();
  query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",entry);
  query.getResultList();
  entityManager.remove(entry);
}","@Override public void delete(final Long id){
  JPAWorkflowEntry entry=find(id);
  if (entry == null) {
    return;
  }
  List<JPAPropertySetItem> properties=propertySetItemDAO.findAll(entry.getId());
  if (properties != null) {
    for (    JPAPropertySetItem property : properties) {
      propertySetItemDAO.delete(property.getId());
    }
  }
  entityManager.remove(entry);
}"
61156,"/** 
 * @see com.opensymphony.workflow.spi.WorkflowStore#query(com.opensymphony.workflow.query.WorkflowExpressionQuery)
 */
@Override @Transactional(readOnly=true) public List query(final WorkflowExpressionQuery query) throws StoreException {
  Class entityClass=getQueryClass(query.getExpression(),null);
  Criterion expr;
  if (query.getExpression().isNested()) {
    expr=buildNested((NestedExpression)query.getExpression());
  }
 else {
    expr=queryComparison((FieldExpression)query.getExpression());
  }
  Session hibernateSess=(Session)entityManager.getDelegate();
  Criteria criteria=hibernateSess.createCriteria(entityClass);
  criteria.add(expr);
  List<Long> results=new ArrayList<Long>();
  Object next;
  Long item;
  for (Iterator iter=criteria.list().iterator(); iter.hasNext(); ) {
    next=iter.next();
    if (next instanceof AbstractJPAStep) {
      AbstractJPAStep step=(AbstractJPAStep)next;
      item=new Long(step.getEntryId());
    }
 else {
      WorkflowEntry entry=(WorkflowEntry)next;
      item=new Long(entry.getId());
    }
    results.add(item);
  }
  return results;
}","/** 
 * @see com.opensymphony.workflow.spi.WorkflowStore#query(com.opensymphony.workflow.query.WorkflowExpressionQuery)
 */
@Override public List query(final WorkflowExpressionQuery query) throws StoreException {
  Class entityClass=getQueryClass(query.getExpression(),null);
  Criterion expr;
  if (query.getExpression().isNested()) {
    expr=buildNested((NestedExpression)query.getExpression());
  }
 else {
    expr=queryComparison((FieldExpression)query.getExpression());
  }
  Session hibernateSess=(Session)entityManager.getDelegate();
  Criteria criteria=hibernateSess.createCriteria(entityClass);
  criteria.add(expr);
  List<Long> results=new ArrayList<Long>();
  Object next;
  Long item;
  for (Iterator iter=criteria.list().iterator(); iter.hasNext(); ) {
    next=iter.next();
    if (next instanceof AbstractJPAStep) {
      AbstractJPAStep step=(AbstractJPAStep)next;
      item=new Long(step.getEntryId());
    }
 else {
      WorkflowEntry entry=(WorkflowEntry)next;
      item=new Long(entry.getId());
    }
    results.add(item);
  }
  return results;
}"
61157,"@Override @Transactional(readOnly=true) public WorkflowEntry findEntry(final long entryId) throws StoreException {
  JPAWorkflowEntry entry=workflowEntryDAO.find(entryId);
  if (entry == null) {
    throw new StoreException(""String_Node_Str"" + entryId);
  }
  return entry;
}","@Override public WorkflowEntry findEntry(final long entryId) throws StoreException {
  JPAWorkflowEntry entry=workflowEntryDAO.find(entryId);
  if (entry == null) {
    throw new StoreException(""String_Node_Str"" + entryId);
  }
  return entry;
}"
61158,"@Override @Transactional(readOnly=true) public List findHistorySteps(final long entryId) throws StoreException {
  final JPAWorkflowEntry entry=getEntry(entryId);
  return entry.getHistorySteps();
}","@Override public List findHistorySteps(final long entryId) throws StoreException {
  final JPAWorkflowEntry entry=getEntry(entryId);
  return entry.getHistorySteps();
}"
61159,"@Override @Transactional(readOnly=true) public List findCurrentSteps(final long entryId) throws StoreException {
  JPAWorkflowEntry entry=getEntry(entryId);
  return entry.getCurrentSteps();
}","@Override public List findCurrentSteps(final long entryId) throws StoreException {
  JPAWorkflowEntry entry=getEntry(entryId);
  return entry.getCurrentSteps();
}"
61160,"@Override @Transactional(readOnly=true) public PropertySet getPropertySet(final long entryId) throws StoreException {
  if (propertySetDelegate == null) {
    throw new StoreException(""String_Node_Str"");
  }
  return propertySetDelegate.getPropertySet(entryId);
}","@Override public PropertySet getPropertySet(final long entryId) throws StoreException {
  if (propertySetDelegate == null) {
    throw new StoreException(""String_Node_Str"");
  }
  return propertySetDelegate.getPropertySet(entryId);
}"
61161,"public MAttr(){
  values=new ArrayList<MAttrValue>();
}","public MAttr(){
  super();
  values=new ArrayList<MAttrValue>();
}"
61162,"public RAttr(){
  values=new ArrayList<RAttrValue>();
}","public RAttr(){
  super();
  values=new ArrayList<RAttrValue>();
}"
61163,"@Override public boolean isValid(final AbstractAttr object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    if (object.getSchema().isUniqueConstraint()) {
      isValid=object.getValues().isEmpty() && object.getUniqueValue() != null;
    }
 else {
      isValid=!object.getValues().isEmpty() && object.getUniqueValue() == null;
      if (!object.getSchema().isMultivalue()) {
        isValid&=object.getValues().size() == 1 && object.getUniqueValue() == null;
      }
    }
    if (!isValid) {
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidValueList.toString()).addConstraintViolation();
    }
  }
  return isValid;
}","@Override public boolean isValid(final AbstractAttr object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    if (object.getSchema().isUniqueConstraint()) {
      isValid=object.getValues().isEmpty() && object.getUniqueValue() != null;
    }
 else {
      isValid=!object.getValues().isEmpty() && object.getUniqueValue() == null;
      if (!object.getSchema().isMultivalue()) {
        isValid&=object.getValues().size() == 1;
      }
    }
    if (!isValid) {
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidValueList.toString()).addConstraintViolation();
    }
  }
  return isValid;
}"
61164,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaMappingTO> getRoleResourcesMapping(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId) throws SyncopeClientCompositeErrorException {
  SyncopeRole role=null;
  if (roleId != null) {
    role=syncopeRoleDAO.find(roleId);
  }
  if (role == null) {
    LOG.error(""String_Node_Str"" + roleId + ""String_Node_Str"");
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
    ex.addElement(""String_Node_Str"");
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  List<SchemaMappingTO> roleMappings=new ArrayList<SchemaMappingTO>();
  Set<TargetResource> resources=role.getTargetResources();
  List<SchemaMappingTO> resourceMappings=null;
  for (  TargetResource resource : resources) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
    List<SchemaMapping> schemaMappings=resource.getMappings();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ schemaMappings+ ""String_Node_Str"");
    }
    resourceMappings=binder.getSchemaMappingTOs(schemaMappings);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ resourceMappings+ ""String_Node_Str"");
    }
    roleMappings.addAll(resourceMappings);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + roleMappings);
  }
  return roleMappings;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaMappingTO> getRoleResourcesMapping(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId) throws SyncopeClientCompositeErrorException {
  SyncopeRole role=null;
  if (roleId != null) {
    role=syncopeRoleDAO.find(roleId);
  }
  if (role == null) {
    LOG.error(""String_Node_Str"" + roleId + ""String_Node_Str"");
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
    ex.addElement(""String_Node_Str"");
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  List<SchemaMappingTO> roleMappings=new ArrayList<SchemaMappingTO>();
  Set<TargetResource> resources=role.getTargetResources();
  List<SchemaMappingTO> resourceMappings=null;
  for (  TargetResource resource : resources) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
    List<SchemaMapping> schemaMappings=resource.getMappings();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ schemaMappings+ ""String_Node_Str"");
    }
    resourceMappings=binder.getSchemaMappingTOs(schemaMappings);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ resourceMappings+ ""String_Node_Str"");
    }
    roleMappings.addAll(resourceMappings);
  }
  LOG.debug(""String_Node_Str"",roleMappings);
  return roleMappings;
}"
61165,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (resourceTO == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  if (resourceDAO.find(resourceTO.getName()) != null) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.DuplicateUniqueValue);
    ex.addElement(resourceTO.getName());
    scce.addException(ex);
    throw scce;
  }
  TargetResource resource=binder.getResource(resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  try {
    resource=resourceDAO.save(resource);
  }
 catch (  InvalidEntityException e) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemaMapping);
    scce.addException(ex);
    throw scce;
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(resource);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (resourceTO == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  LOG.debug(""String_Node_Str"");
  if (resourceDAO.find(resourceTO.getName()) != null) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.DuplicateUniqueValue);
    ex.addElement(resourceTO.getName());
    scce.addException(ex);
    throw scce;
  }
  TargetResource resource=binder.getResource(resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  try {
    resource=resourceDAO.save(resource);
  }
 catch (  InvalidEntityException e) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemaMapping);
    scce.addException(ex);
    throw scce;
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(resource);
}"
61166,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"" + resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  LOG.debug(""String_Node_Str"");
  resourceDAO.deleteAllMappings(resource);
  resource=binder.getResource(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  try {
    resource=resourceDAO.save(resource);
  }
 catch (  InvalidEntityException e) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemaMapping);
    scce.addException(ex);
    throw scce;
  }
  return binder.getResourceTO(resource);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"" + resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  LOG.debug(""String_Node_Str"");
  resourceDAO.deleteAllMappings(resource);
  resource=binder.getResource(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  try {
    resource=resourceDAO.save(resource);
  }
 catch (  InvalidEntityException e) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemaMapping);
    scce.addException(ex);
    throw scce;
  }
  return binder.getResourceTO(resource);
}"
61167,"private void fillAttribute(final List<String> values,final AttributableUtil attributableUtil,final AbstractSchema schema,final AbstractAttr attribute,final SyncopeClientException invalidValues){
  List<String> valuesProvided=schema.isMultivalue() ? values : (values.isEmpty() ? Collections.EMPTY_LIST : Collections.singletonList(values.iterator().next()));
  for (  String value : valuesProvided) {
    if (value == null || value.isEmpty()) {
      LOG.debug(""String_Node_Str"",schema.getName());
    }
 else {
      try {
        attribute.addValue(value,attributableUtil);
      }
 catch (      ValidationException e) {
        LOG.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ value,e);
        invalidValues.addElement(schema.getName() + ""String_Node_Str"" + value);
      }
    }
  }
}","protected void fillAttribute(final List<String> values,final AttributableUtil attributableUtil,final AbstractSchema schema,final AbstractAttr attribute,final SyncopeClientException invalidValues){
  List<String> valuesProvided=schema.isMultivalue() ? values : (values.isEmpty() ? Collections.EMPTY_LIST : Collections.singletonList(values.iterator().next()));
  for (  String value : valuesProvided) {
    if (value == null || value.isEmpty()) {
      LOG.debug(""String_Node_Str"",schema.getName());
    }
 else {
      try {
        attribute.addValue(value,attributableUtil);
      }
 catch (      ValidationException e) {
        LOG.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ value,e);
        invalidValues.addElement(schema.getName() + ""String_Node_Str"" + value);
      }
    }
  }
}"
61168,"public CheckInResult checkIn(final UserTO userTO){
  return new CheckInResult(CheckinResultAction.CREATE,null,null);
}","public CheckInResult checkIn(final UserTO userTO){
  CheckInResult result=new CheckInResult();
  result.setAction(CheckinResultAction.CREATE);
  return result;
}"
61169,"@Override public void delete(final Long id){
  JPAWorkflowEntry entry=find(id);
  if (entry == null) {
    return;
  }
  List<JPAPropertySetItem> properties=propertySetItemDAO.findAll(entry.getId());
  if (properties != null) {
    for (    JPAPropertySetItem property : properties) {
      propertySetItemDAO.delete(property.getId());
    }
  }
  entityManager.remove(entry);
}","@Override public void delete(final Long id){
  JPAWorkflowEntry entry=find(id);
  if (entry == null) {
    return;
  }
  List<JPAPropertySetItem> properties=propertySetItemDAO.findAll(entry.getId());
  if (properties != null) {
    for (    JPAPropertySetItem property : properties) {
      propertySetItemDAO.delete(property.getId());
    }
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",entry);
  query.getResultList();
  query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",entry);
  query.getResultList();
  entityManager.remove(entry);
}"
61170,"@Override public <T extends AbstractAttribute>void setAttribute(T attribute){
  this.attribute=(UserAttribute)attribute;
}","@Override public <T extends AbstractAttribute>void setAttribute(final T attribute){
  this.attribute=(UserAttribute)attribute;
}"
61171,"public Configuration(PageParameters parameters){
  super(parameters);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  final IModel configurations=new LoadableDetachableModel(){
    protected Object load(){
      return restClient.getAllConfigurations().getConfigurations();
    }
  }
;
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);
  final PageableListView configurationsView=new PageableListView(""String_Node_Str"",configurations,paginatorRows){
    @Override protected void populateItem(    final ListItem item){
      final ConfigurationTO configurationTO=(ConfigurationTO)item.getModelObject();
      item.add(new Label(""String_Node_Str"",configurationTO.getConfKey()));
      item.add(new Label(""String_Node_Str"",configurationTO.getConfValue()));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException ex) {
            Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE,null,ex);
            error(ex.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(configContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  add(new AjaxPagingNavigator(""String_Node_Str"",configurationsView).setOutputMarkupId(true));
  configContainer=new WebMarkupContainer(""String_Node_Str"");
  configContainer.add(configurationsView);
  configContainer.setOutputMarkupId(true);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  createConfigWin.setInitialWidth(WIN_USER_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  editConfigWin.setInitialWidth(WIN_USER_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,configContainer);
  setWindowClosedCallback(editConfigWin,configContainer);
  add(configContainer);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
      configurationsView.setRowsPerPage(paginatorRows);
      target.addComponent(configContainer);
      target.addComponent(getPage().get(""String_Node_Str""));
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
}","public Configuration(PageParameters parameters){
  super(parameters);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=utility.getPaginatorRowsToDisplay(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new Model(getString(""String_Node_Str"")),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
              return window;
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(getString(""String_Node_Str""))){
    public void populateItem(    Item<ICellPopulator<ConfigurationTO>> cellItem,    String componentId,    IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getConfKey());
          }
 catch (          UnsupportedEncodingException ex) {
            Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE,null,ex);
            error(ex.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.addComponent(feedbackPanel);
          target.addComponent(container);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ConfigurationsProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  createConfigWin.setInitialWidth(WIN_USER_WIDTH);
  createConfigWin.setPageMapName(""String_Node_Str"");
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_USER_HEIGHT);
  editConfigWin.setInitialWidth(WIN_USER_HEIGHT);
  editConfigWin.setPageMapName(""String_Node_Str"");
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,container);
  setWindowClosedCallback(editConfigWin,container);
  add(new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,createConfigWin,new ConfigurationTO(),true);
          return window;
        }
      }
);
      createConfigWin.show(target);
    }
  }
);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),utility.paginatorRowsChooser());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    protected void onUpdate(    AjaxRequestTarget target){
      utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
      table.setRowsPerPage(paginatorRows);
      target.addComponent(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
}"
61172,"@Override protected void populateItem(final ListItem item){
  final ConfigurationTO configurationTO=(ConfigurationTO)item.getModelObject();
  item.add(new Label(""String_Node_Str"",configurationTO.getConfKey()));
  item.add(new Label(""String_Node_Str"",configurationTO.getConfValue()));
  AjaxLink editLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          ConfigurationModalPage window=new ConfigurationModalPage(Configuration.this,editConfigWin,configurationTO,false);
          return window;
        }
      }
);
      editConfigWin.show(target);
    }
  }
;
  item.add(editLink);
  AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        restClient.deleteConfiguration(configurationTO.getConfKey());
      }
 catch (      UnsupportedEncodingException ex) {
        Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE,null,ex);
        error(ex.getMessage());
        return;
      }
      info(getString(""String_Node_Str""));
      target.addComponent(feedbackPanel);
      target.addComponent(configContainer);
    }
  }
;
  item.add(deleteLink);
}","public void populateItem(Item<ICellPopulator<ConfigurationTO>> cellItem,String componentId,IModel<ConfigurationTO> model){
  final ConfigurationTO configurationTO=model.getObject();
  AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      try {
        restClient.deleteConfiguration(configurationTO.getConfKey());
      }
 catch (      UnsupportedEncodingException ex) {
        Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE,null,ex);
        error(ex.getMessage());
        return;
      }
      info(getString(""String_Node_Str""));
      target.addComponent(feedbackPanel);
      target.addComponent(container);
    }
  }
;
  DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
  panel.add(deleteLink);
  cellItem.add(panel);
}"
61173,"/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param window
 * @param configContainer
 */
public void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}","/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param window
 * @param container
 */
public void setWindowClosedCallback(ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    public void onClose(    AjaxRequestTarget target){
      target.addComponent(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.addComponent(feedbackPanel);
        operationResult=false;
      }
    }
  }
);
}"
61174,"protected void onUpdate(AjaxRequestTarget target){
  utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
  configurationsView.setRowsPerPage(paginatorRows);
  target.addComponent(configContainer);
  target.addComponent(getPage().get(""String_Node_Str""));
}","protected void onUpdate(AjaxRequestTarget target){
  utility.updatePaginatorRows(Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,paginatorRows);
  table.setRowsPerPage(paginatorRows);
  target.addComponent(container);
}"
61175,"/** 
 * {@inheritDoc}
 */
@Override public Uid update(ObjectClass objclass,Uid uid,Set<Attribute> replaceAttributes,OperationOptions options){
  if (objclass == null || (!objclass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (uid == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (replaceAttributes == null || replaceAttributes.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final List<WSAttributeValue> attributes=new ArrayList<WSAttributeValue>();
  WSAttributeValue wsAttributeValue;
  WSAttribute wsAttribute;
  for (  Attribute attr : replaceAttributes) {
    wsAttribute=new WSAttribute(attr.getName());
    if (attr.is(Name.NAME)) {
      wsAttribute.setKey(true);
      wsAttribute.setNullable(false);
    }
    if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {
      wsAttribute.setName(OperationalAttributeInfos.PASSWORD.getName());
      wsAttribute.setPassword(true);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + wsAttribute.getName() + ""String_Node_Str""+ wsAttribute.isKey()+ ""String_Node_Str""+ wsAttribute.isPassword());
    }
    wsAttributeValue=new WSAttributeValue(wsAttribute);
    Object value=AttributeUtil.getSingleValue(attr);
    if (value instanceof GuardedString || value instanceof GuardedByteArray) {
      wsAttributeValue.setValue(value.toString());
    }
 else {
      wsAttributeValue.setValue(value);
    }
    attributes.add(wsAttributeValue);
  }
  Uid uuid=null;
  try {
    uuid=new Uid(provisioning.update(uid.getUidValue(),attributes));
  }
 catch (  ProvisioningException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return uuid;
}","/** 
 * {@inheritDoc}
 */
@Override public Uid update(ObjectClass objclass,Uid uid,Set<Attribute> replaceAttributes,OperationOptions options){
  if (objclass == null || (!objclass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (uid == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (replaceAttributes == null || replaceAttributes.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final List<WSAttributeValue> attributes=new ArrayList<WSAttributeValue>();
  WSAttributeValue wsAttributeValue;
  WSAttribute wsAttribute;
  for (  Attribute attr : replaceAttributes) {
    wsAttribute=new WSAttribute(attr.getName());
    if (attr.is(Name.NAME)) {
      wsAttribute.setKey(true);
      wsAttribute.setNullable(false);
    }
    if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {
      wsAttribute.setName(OperationalAttributeInfos.PASSWORD.getName());
      wsAttribute.setPassword(true);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + wsAttribute.getName() + ""String_Node_Str""+ wsAttribute.isKey()+ ""String_Node_Str""+ wsAttribute.isPassword());
    }
    wsAttributeValue=new WSAttributeValue(wsAttribute);
    attributes.add(wsAttributeValue);
    List value=attr.getValue();
    if (value != null && value.size() == 1 && (value.get(0) instanceof GuardedString || value.get(0) instanceof GuardedByteArray)) {
      wsAttributeValue.setValues(Collections.singletonList(value.toString()));
    }
 else {
      wsAttributeValue.setValues(value);
    }
  }
  Uid uuid=null;
  try {
    uuid=new Uid(provisioning.update(uid.getUidValue(),attributes));
  }
 catch (  ProvisioningException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return uuid;
}"
61176,"private ConnectorObjectBuilder buildConnectorObject(Set<WSAttributeValue> attributes){
  ConnectorObjectBuilder bld=new ConnectorObjectBuilder();
  String uid=null;
  for (  WSAttributeValue attribute : attributes) {
    if (attribute.isKey()) {
      uid=attribute.getStringValue();
      bld.setName(uid);
      bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValue()));
    }
    if (!attribute.isKey() && !attribute.isPassword()) {
      if (attribute.getValue() == null) {
        bld.addAttribute(AttributeBuilder.build(attribute.getName()));
      }
 else {
        bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValue()));
      }
    }
  }
  if (uid == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  bld.setUid(new Uid(uid));
  bld.setObjectClass(ObjectClass.ACCOUNT);
  return bld;
}","private ConnectorObjectBuilder buildConnectorObject(Set<WSAttributeValue> attributes){
  ConnectorObjectBuilder bld=new ConnectorObjectBuilder();
  String uid=null;
  for (  WSAttributeValue attribute : attributes) {
    if (attribute.isKey()) {
      uid=attribute.getStringValue();
      bld.setName(uid);
      bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValues()));
    }
    if (!attribute.isKey() && !attribute.isPassword()) {
      if (attribute.getValues() == null) {
        bld.addAttribute(AttributeBuilder.build(attribute.getName()));
      }
 else {
        bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValues()));
      }
    }
  }
  if (uid == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  bld.setUid(new Uid(uid));
  bld.setObjectClass(ObjectClass.ACCOUNT);
  return bld;
}"
61177,"/** 
 * {@inheritDoc}
 */
@Override public Uid create(final ObjectClass objClass,final Set<Attribute> attrs,final OperationOptions options){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (attrs == null || attrs.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Name name=AttributeUtil.getNameFromAttributes(attrs);
  if (name == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String accountName=name.getNameValue();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accountName);
  }
  final List<WSAttributeValue> attributes=new ArrayList<WSAttributeValue>();
  WSAttributeValue wsAttributeValue;
  WSAttribute wsAttribute;
  for (  Attribute attr : attrs) {
    wsAttribute=new WSAttribute(attr.getName());
    if (attr.is(Name.NAME)) {
      wsAttribute.setKey(true);
      wsAttribute.setNullable(false);
    }
    if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {
      wsAttribute.setName(OperationalAttributeInfos.PASSWORD.getName());
      wsAttribute.setPassword(true);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + wsAttribute.getName() + ""String_Node_Str""+ wsAttribute.isKey()+ ""String_Node_Str""+ wsAttribute.isPassword());
    }
    wsAttributeValue=new WSAttributeValue(wsAttribute);
    Object value=AttributeUtil.getSingleValue(attr);
    if (value instanceof GuardedString || value instanceof GuardedByteArray) {
      wsAttributeValue.setValue(value.toString());
    }
 else {
      wsAttributeValue.setValue(value);
    }
    attributes.add(wsAttributeValue);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accountName + ""String_Node_Str""+ attributes.size());
  }
  try {
    provisioning.create(attributes);
  }
 catch (  ProvisioningException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return new Uid(accountName);
}","/** 
 * {@inheritDoc}
 */
@Override public Uid create(final ObjectClass objClass,final Set<Attribute> attrs,final OperationOptions options){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (attrs == null || attrs.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Name name=AttributeUtil.getNameFromAttributes(attrs);
  if (name == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String accountName=name.getNameValue();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accountName);
  }
  final List<WSAttributeValue> attributes=new ArrayList<WSAttributeValue>();
  WSAttributeValue wsAttributeValue;
  WSAttribute wsAttribute;
  for (  Attribute attr : attrs) {
    wsAttribute=new WSAttribute(attr.getName());
    if (attr.is(Name.NAME)) {
      wsAttribute.setKey(true);
      wsAttribute.setNullable(false);
    }
    if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {
      wsAttribute.setName(OperationalAttributeInfos.PASSWORD.getName());
      wsAttribute.setPassword(true);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + wsAttribute.getName() + ""String_Node_Str""+ wsAttribute.isKey()+ ""String_Node_Str""+ wsAttribute.isPassword());
    }
    wsAttributeValue=new WSAttributeValue(wsAttribute);
    attributes.add(wsAttributeValue);
    List value=attr.getValue();
    if (value != null && value.size() == 1 && (value.get(0) instanceof GuardedString || value.get(0) instanceof GuardedByteArray)) {
      wsAttributeValue.setValues(Collections.singletonList(value.toString()));
    }
 else {
      wsAttributeValue.setValues(value);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + accountName + ""String_Node_Str""+ attributes.size());
  }
  try {
    provisioning.create(attributes);
  }
 catch (  ProvisioningException e) {
    if (LOG.isErrorEnabled()) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return new Uid(accountName);
}"
61178,"public String getStringValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (String)value;
}","public String getStringValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=values.iterator().next().toString();
  }
  return res;
}"
61179,"public URI getURIValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (URI)value;
}","public URI getURIValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  URI res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(URI)values.iterator().next();
  }
  return res;
}"
61180,"public Character getCharacterValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Character)value;
}","public Character getCharacterValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Character res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Character)values.iterator().next();
  }
  return res;
}"
61181,"public Double getDoubleValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Double)value;
}","public Double getDoubleValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Double res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Double)values.iterator().next();
  }
  return res;
}"
61182,"public File getFileValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (File)value;
}","public File getFileValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  File res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(File)values.iterator().next();
  }
  return res;
}"
61183,"public Integer getIntegerValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Integer)value;
}","public Integer getIntegerValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Integer res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Integer)values.iterator().next();
  }
  return res;
}"
61184,"public Float getFloadValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Float)value;
}","public Float getFloadValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Float res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Float)values.iterator().next();
  }
  return res;
}"
61185,"public Long getLongValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Long)value;
}","public Long getLongValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Long res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Long)values.iterator().next();
  }
  return res;
}"
61186,"public Boolean getBooleanValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Boolean)value;
}","public Boolean getBooleanValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Boolean res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Boolean)values.iterator().next();
  }
  return res;
}"
61187,"public Date getDateValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (Date)value;
}","public Date getDateValue(){
  if (getType() == null || !""String_Node_Str"".equals(getType())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Date res;
  if (values == null && values.isEmpty()) {
    res=null;
  }
 else {
    res=(Date)values.iterator().next();
  }
  return res;
}"
61188,"@Test public void create(){
  Throwable t=null;
  try {
    WSAttributeValue uid=new WSAttributeValue();
    uid.setName(""String_Node_Str"");
    uid.setValue(""String_Node_Str"");
    uid.setKey(true);
    WSAttributeValue password=new WSAttributeValue();
    password.setName(""String_Node_Str"");
    password.setValue(""String_Node_Str"");
    password.setPassword(true);
    WSAttributeValue type=new WSAttributeValue();
    type.setName(""String_Node_Str"");
    type.setValue(""String_Node_Str"");
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValue(""String_Node_Str"");
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValue(""String_Node_Str"");
    WSAttributeValue birthdate=new WSAttributeValue();
    birthdate.setName(""String_Node_Str"");
    birthdate.setValue(""String_Node_Str"");
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(uid);
    attrs.add(password);
    attrs.add(type);
    attrs.add(name);
    attrs.add(surname);
    attrs.add(birthdate);
    String accountId=provisioning.create(attrs);
    assertNotNull(accountId);
    assertEquals(accountId,""String_Node_Str"");
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}","@Test public void create(){
  Throwable t=null;
  try {
    WSAttributeValue uid=new WSAttributeValue();
    uid.setName(""String_Node_Str"");
    uid.setValues(Collections.singletonList(""String_Node_Str""));
    uid.setKey(true);
    WSAttributeValue password=new WSAttributeValue();
    password.setName(""String_Node_Str"");
    password.setValues(Collections.singletonList(""String_Node_Str""));
    password.setPassword(true);
    WSAttributeValue type=new WSAttributeValue();
    type.setName(""String_Node_Str"");
    type.setValues(Collections.singletonList(""String_Node_Str""));
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValues(Collections.singletonList(""String_Node_Str""));
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValues(Collections.singletonList(""String_Node_Str""));
    WSAttributeValue birthdate=new WSAttributeValue();
    birthdate.setName(""String_Node_Str"");
    birthdate.setValues(Collections.singletonList(""String_Node_Str""));
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(uid);
    attrs.add(password);
    attrs.add(type);
    attrs.add(name);
    attrs.add(surname);
    attrs.add(birthdate);
    String accountId=provisioning.create(attrs);
    assertNotNull(accountId);
    assertEquals(accountId,""String_Node_Str"");
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}"
61189,"@Test public void update(){
  Throwable t=null;
  try {
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValue(""String_Node_Str"");
    surname.setKey(true);
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValue(""String_Node_Str"");
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(surname);
    attrs.add(name);
    String uid=provisioning.update(""String_Node_Str"",attrs);
    assertNotNull(uid);
    assertEquals(""String_Node_Str"",uid);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}","@Test public void update(){
  Throwable t=null;
  try {
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValues(Collections.singletonList(""String_Node_Str""));
    surname.setKey(true);
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValues(Collections.singletonList(""String_Node_Str""));
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(surname);
    attrs.add(name);
    String uid=provisioning.update(""String_Node_Str"",attrs);
    assertNotNull(uid);
    assertEquals(""String_Node_Str"",uid);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}"
61190,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ConfigurationTOs list(HttpServletRequest request){
  List<SyncopeConfiguration> configurations=syncopeConfigurationDAO.findAll();
  List<ConfigurationTO> configurationTOs=new ArrayList<ConfigurationTO>(configurations.size());
  for (  SyncopeConfiguration configuration : configurations) {
    configurationTOs.add(configurationDataBinder.getConfigurationTO(configuration));
  }
  ConfigurationTOs result=new ConfigurationTOs();
  result.setConfigurations(configurationTOs);
  return result;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConfigurationTO> list(HttpServletRequest request){
  List<SyncopeConfiguration> configurations=syncopeConfigurationDAO.findAll();
  List<ConfigurationTO> configurationTOs=new ArrayList<ConfigurationTO>(configurations.size());
  for (  SyncopeConfiguration configuration : configurations) {
    configurationTOs.add(configurationDataBinder.getConfigurationTO(configuration));
  }
  return configurationTOs;
}"
61191,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ConnectorInstanceTO update(HttpServletResponse response,@RequestBody ConnectorInstanceTO connectorTO) throws SyncopeClientCompositeErrorException, NotFoundException, MissingConfKeyException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + connectorTO);
  }
  ConnectorInstance connectorInstance=null;
  try {
    connectorInstance=binder.updateConnectorInstance(connectorTO.getId(),connectorTO);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"" + connectorTO,e);
    throw e;
  }
  connectorInstance=connectorInstanceDAO.save(connectorInstance);
  return binder.getConnectorInstanceTO(connectorInstance);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ConnectorInstanceTO update(HttpServletResponse response,@RequestBody ConnectorInstanceTO connectorTO) throws SyncopeClientCompositeErrorException, NotFoundException, MissingConfKeyException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + connectorTO);
  }
  ConnectorInstance connectorInstance;
  try {
    connectorInstance=binder.updateConnectorInstance(connectorTO.getId(),connectorTO);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"" + connectorTO,e);
    throw e;
  }
  connectorInstance=connectorInstanceDAO.save(connectorInstance);
  return binder.getConnectorInstanceTO(connectorInstance);
}"
61192,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(){
  List<ConnectorInstance> connectorInstances=connectorInstanceDAO.findAll();
  List<ConnectorInstanceTO> connectorInstanceTOs=new ArrayList<ConnectorInstanceTO>();
  for (  ConnectorInstance connector : connectorInstances) {
    connectorInstanceTOs.add(binder.getConnectorInstanceTO(connector));
  }
  return new ModelAndView().addObject(connectorInstanceTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnectorInstanceTO> list(){
  List<ConnectorInstance> connectorInstances=connectorInstanceDAO.findAll();
  List<ConnectorInstanceTO> connectorInstanceTOs=new ArrayList<ConnectorInstanceTO>();
  for (  ConnectorInstance connector : connectorInstances) {
    connectorInstanceTOs.add(binder.getConnectorInstanceTO(connector));
  }
  return connectorInstanceTOs;
}"
61193,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=ConnectorInstanceLoader.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"" + bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"" + bundle.getConnectorDisplayName());
    }
  }
  ConnectorBundleTO connectorBundleTO=null;
  ConnectorKey key=null;
  ConfigurationProperties properties=null;
  List<ConnectorBundleTO> connectorBundleTOs=new ArrayList<ConnectorBundleTO>();
  for (  ConnectorInfo bundle : bundles) {
    connectorBundleTO=new ConnectorBundleTO();
    connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
    key=bundle.getConnectorKey();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + key.getBundleName() + ""String_Node_Str""+ key.getBundleVersion()+ ""String_Node_Str""+ key.getConnectorName());
    }
    connectorBundleTO.setBundleName(key.getBundleName());
    connectorBundleTO.setConnectorName(key.getConnectorName());
    connectorBundleTO.setVersion(key.getBundleVersion());
    properties=bundle.createDefaultAPIConfiguration().getConfigurationProperties();
    connectorBundleTO.setProperties(properties.getPropertyNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + connectorBundleTO.getProperties());
    }
    connectorBundleTOs.add(connectorBundleTO);
  }
  return new ModelAndView().addObject(connectorBundleTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnectorBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=ConnectorInstanceLoader.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"" + bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"" + bundle.getConnectorDisplayName());
    }
  }
  ConnectorBundleTO connectorBundleTO=null;
  ConnectorKey key=null;
  ConfigurationProperties properties=null;
  List<ConnectorBundleTO> connectorBundleTOs=new ArrayList<ConnectorBundleTO>();
  for (  ConnectorInfo bundle : bundles) {
    connectorBundleTO=new ConnectorBundleTO();
    connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
    key=bundle.getConnectorKey();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + key.getBundleName() + ""String_Node_Str""+ key.getBundleVersion()+ ""String_Node_Str""+ key.getConnectorName());
    }
    connectorBundleTO.setBundleName(key.getBundleName());
    connectorBundleTO.setConnectorName(key.getConnectorName());
    connectorBundleTO.setVersion(key.getBundleVersion());
    properties=bundle.createDefaultAPIConfiguration().getConfigurationProperties();
    connectorBundleTO.setProperties(properties.getPropertyNames());
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + connectorBundleTO.getProperties());
    }
    connectorBundleTOs.add(connectorBundleTO);
  }
  return connectorBundleTOs;
}"
61194,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(@PathVariable(""String_Node_Str"") final String kind){
  Class reference=getAttributableUtil(kind).getDerivedSchemaClass();
  List<AbstractDerivedSchema> derivedAttributeSchemas=derivedSchemaDAO.findAll(reference);
  List<DerivedSchemaTO> derivedSchemaTOs=new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());
  for (  AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {
    derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema));
  }
  return new ModelAndView().addObject(derivedSchemaTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<DerivedSchemaTO> list(@PathVariable(""String_Node_Str"") final String kind){
  Class reference=getAttributableUtil(kind).getDerivedSchemaClass();
  List<AbstractDerivedSchema> derivedAttributeSchemas=derivedSchemaDAO.findAll(reference);
  List<DerivedSchemaTO> derivedSchemaTOs=new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());
  for (  AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {
    derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema));
  }
  return derivedSchemaTOs;
}"
61195,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView getRoleResourcesMapping(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId) throws SyncopeClientCompositeErrorException {
  SyncopeRole role=null;
  if (roleId != null) {
    role=syncopeRoleDAO.find(roleId);
  }
  if (role == null) {
    LOG.error(""String_Node_Str"" + roleId + ""String_Node_Str"");
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
    ex.addElement(""String_Node_Str"");
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  List<SchemaMappingTO> roleMappings=new ArrayList<SchemaMappingTO>();
  Set<TargetResource> resources=role.getTargetResources();
  List<SchemaMappingTO> resourceMappings=null;
  for (  TargetResource resource : resources) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
    List<SchemaMapping> schemaMappings=resource.getMappings();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ schemaMappings+ ""String_Node_Str"");
    }
    resourceMappings=binder.getSchemaMappingTOs(schemaMappings);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ resourceMappings+ ""String_Node_Str"");
    }
    roleMappings.addAll(resourceMappings);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + roleMappings);
  }
  return new ModelAndView().addObject(roleMappings);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaMappingTO> getRoleResourcesMapping(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId) throws SyncopeClientCompositeErrorException {
  SyncopeRole role=null;
  if (roleId != null) {
    role=syncopeRoleDAO.find(roleId);
  }
  if (role == null) {
    LOG.error(""String_Node_Str"" + roleId + ""String_Node_Str"");
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
    ex.addElement(""String_Node_Str"");
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  List<SchemaMappingTO> roleMappings=new ArrayList<SchemaMappingTO>();
  Set<TargetResource> resources=role.getTargetResources();
  List<SchemaMappingTO> resourceMappings=null;
  for (  TargetResource resource : resources) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str"");
    }
    List<SchemaMapping> schemaMappings=resource.getMappings();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ schemaMappings+ ""String_Node_Str"");
    }
    resourceMappings=binder.getSchemaMappingTOs(schemaMappings);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + resource + ""String_Node_Str""+ resourceMappings+ ""String_Node_Str"");
    }
    roleMappings.addAll(resourceMappings);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + roleMappings);
  }
  return roleMappings;
}"
61196,"@Transactional(readOnly=true) @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(HttpServletResponse response) throws NotFoundException {
  List<TargetResource> resources=resourceDAO.findAll();
  if (resources == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  return new ModelAndView().addObject(binder.getResourceTOs(resources));
}","@Transactional(readOnly=true) @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ResourceTO> list(HttpServletResponse response) throws NotFoundException {
  List<TargetResource> resources=resourceDAO.findAll();
  if (resources == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  return binder.getResourceTOs(resources);
}"
61197,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView children(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId){
  List<SyncopeRole> roles=syncopeRoleDAO.findChildren(roleId);
  List<RoleTO> roleTOs=new ArrayList<RoleTO>(roles.size());
  for (  SyncopeRole role : roles) {
    roleTOs.add(roleDataBinder.getRoleTO(role));
  }
  return new ModelAndView().addObject(roleTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<RoleTO> children(HttpServletResponse response,@PathVariable(""String_Node_Str"") Long roleId){
  List<SyncopeRole> roles=syncopeRoleDAO.findChildren(roleId);
  List<RoleTO> roleTOs=new ArrayList<RoleTO>(roles.size());
  for (  SyncopeRole role : roles) {
    roleTOs.add(roleDataBinder.getRoleTO(role));
  }
  return roleTOs;
}"
61198,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(HttpServletRequest request){
  List<SyncopeRole> roles=syncopeRoleDAO.findAll();
  List<RoleTO> roleTOs=new ArrayList<RoleTO>(roles.size());
  for (  SyncopeRole role : roles) {
    roleTOs.add(roleDataBinder.getRoleTO(role));
  }
  return new ModelAndView().addObject(roleTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<RoleTO> list(HttpServletRequest request){
  List<SyncopeRole> roles=syncopeRoleDAO.findAll();
  List<RoleTO> roleTOs=new ArrayList<RoleTO>(roles.size());
  for (  SyncopeRole role : roles) {
    roleTOs.add(roleDataBinder.getRoleTO(role));
  }
  return roleTOs;
}"
61199,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(@PathVariable(""String_Node_Str"") final String kind){
  Class reference=getAttributableUtil(kind).getSchemaClass();
  List<AbstractSchema> schemas=schemaDAO.findAll(reference);
  List<SchemaTO> schemaTOs=new ArrayList<SchemaTO>(schemas.size());
  for (  AbstractSchema schema : schemas) {
    schemaTOs.add(schemaDataBinder.getSchemaTO(schema));
  }
  return new ModelAndView().addObject(schemaTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaTO> list(@PathVariable(""String_Node_Str"") final String kind){
  Class reference=getAttributableUtil(kind).getSchemaClass();
  List<AbstractSchema> schemas=schemaDAO.findAll(reference);
  List<SchemaTO> schemaTOs=new ArrayList<SchemaTO>(schemas.size());
  for (  AbstractSchema schema : schemas) {
    schemaTOs.add(schemaDataBinder.getSchemaTO(schema));
  }
  return schemaTOs;
}"
61200,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView list(){
  List<SyncopeUser> users=syncopeUserDAO.findAll();
  List<UserTO> userTOs=new ArrayList<UserTO>(users.size());
  for (  SyncopeUser user : users) {
    userTOs.add(userDataBinder.getUserTO(user,userWorkflow));
  }
  return new ModelAndView().addObject(userTOs);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<UserTO> list(){
  List<SyncopeUser> users=syncopeUserDAO.findAll();
  List<UserTO> userTOs=new ArrayList<UserTO>(users.size());
  for (  SyncopeUser user : users) {
    userTOs.add(userDataBinder.getUserTO(user,userWorkflow));
  }
  return userTOs;
}"
61201,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ModelAndView search(@RequestBody NodeCond searchCondition) throws InvalidSearchConditionException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + searchCondition);
  }
  if (!searchCondition.checkValidity()) {
    LOG.error(""String_Node_Str"" + searchCondition);
    throw new InvalidSearchConditionException();
  }
  List<SyncopeUser> matchingUsers=syncopeUserDAO.search(searchCondition);
  List<UserTO> result=new ArrayList<UserTO>(matchingUsers.size());
  for (  SyncopeUser user : matchingUsers) {
    result.add(userDataBinder.getUserTO(user,userWorkflow));
  }
  return new ModelAndView().addObject(result);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public List<UserTO> search(@RequestBody NodeCond searchCondition) throws InvalidSearchConditionException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + searchCondition);
  }
  if (!searchCondition.checkValidity()) {
    LOG.error(""String_Node_Str"" + searchCondition);
    throw new InvalidSearchConditionException();
  }
  List<SyncopeUser> matchingUsers=syncopeUserDAO.search(searchCondition);
  List<UserTO> result=new ArrayList<UserTO>(matchingUsers.size());
  for (  SyncopeUser user : matchingUsers) {
    result.add(userDataBinder.getUserTO(user,userWorkflow));
  }
  return result;
}"
61202,"/** 
 * Search an user by its schema values.
 * @param userTO
 * @return UserTOs
 */
public List<UserTO> searchUsers(NodeCond nodeSearchCondition) throws HttpServerErrorException {
  List<UserTO> matchedUsers=null;
  matchedUsers=restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",nodeSearchCondition,List.class);
  return matchedUsers;
}","/** 
 * Search an user by its schema values.
 * @param userTO
 * @return UserTOs
 */
public List<UserTO> searchUsers(NodeCond nodeSearchCondition) throws HttpServerErrorException {
  List<UserTO> matchedUsers=null;
  matchedUsers=Arrays.asList(restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",nodeSearchCondition,UserTO[].class));
  return matchedUsers;
}"
61203,"@Override @Transactional(readOnly=true) public final List<SyncopeUser> search(final NodeCond searchCondition){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + searchCondition);
  }
  List<SyncopeUser> result=Collections.EMPTY_LIST;
  try {
    result=doSearch(searchCondition);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
  return result;
}","@Override @Transactional(readOnly=true) public final List<SyncopeUser> search(final NodeCond searchCondition){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + searchCondition);
  }
  List<SyncopeUser> result;
  try {
    result=doSearch(searchCondition);
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
    result=Collections.EMPTY_LIST;
  }
  return result;
}"
61204,"@Transactional(readOnly=true) private Criterion getCriterion(final AttributeCond.Type type,final AbstractAttributeValue example){
  Criterion result=null;
switch (type) {
case EQ:
    result=Restrictions.disjunction().add(Restrictions.eq(""String_Node_Str"",example.getStringValue())).add(Restrictions.eq(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.eq(""String_Node_Str"",example.getLongValue())).add(Restrictions.eq(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.eq(""String_Node_Str"",example.getDateValue()));
  break;
case GE:
result=Restrictions.disjunction().add(Restrictions.ge(""String_Node_Str"",example.getStringValue())).add(Restrictions.ge(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.ge(""String_Node_Str"",example.getLongValue())).add(Restrictions.ge(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.ge(""String_Node_Str"",example.getDateValue()));
break;
case GT:
result=Restrictions.disjunction().add(Restrictions.gt(""String_Node_Str"",example.getStringValue())).add(Restrictions.gt(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.gt(""String_Node_Str"",example.getLongValue())).add(Restrictions.gt(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.gt(""String_Node_Str"",example.getDateValue()));
break;
case ISNOTNULL:
result=Restrictions.disjunction().add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str""));
break;
case LE:
result=Restrictions.disjunction().add(Restrictions.le(""String_Node_Str"",example.getStringValue())).add(Restrictions.le(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.le(""String_Node_Str"",example.getLongValue())).add(Restrictions.le(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.le(""String_Node_Str"",example.getDateValue()));
break;
case LIKE:
result=Restrictions.disjunction().add(Restrictions.like(""String_Node_Str"",example.getStringValue()));
break;
case LT:
result=Restrictions.disjunction().add(Restrictions.lt(""String_Node_Str"",example.getStringValue())).add(Restrictions.lt(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.lt(""String_Node_Str"",example.getLongValue())).add(Restrictions.lt(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.lt(""String_Node_Str"",example.getDateValue()));
break;
default :
}
return result;
}","@Transactional(readOnly=true) private Criterion getCriterion(final AttributeCond.Type type,final AbstractAttributeValue example){
  Criterion result=null;
switch (type) {
case EQ:
    result=Restrictions.disjunction().add(Restrictions.eq(""String_Node_Str"",example.getStringValue())).add(Restrictions.eq(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.eq(""String_Node_Str"",example.getLongValue())).add(Restrictions.eq(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.eq(""String_Node_Str"",example.getDateValue()));
  break;
case GE:
result=Restrictions.disjunction().add(Restrictions.ge(""String_Node_Str"",example.getStringValue())).add(Restrictions.ge(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.ge(""String_Node_Str"",example.getLongValue())).add(Restrictions.ge(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.ge(""String_Node_Str"",example.getDateValue()));
break;
case GT:
result=Restrictions.disjunction().add(Restrictions.gt(""String_Node_Str"",example.getStringValue())).add(Restrictions.gt(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.gt(""String_Node_Str"",example.getLongValue())).add(Restrictions.gt(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.gt(""String_Node_Str"",example.getDateValue()));
break;
case ISNOTNULL:
result=Restrictions.disjunction().add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str"")).add(Restrictions.isNotNull(""String_Node_Str""));
break;
case LE:
result=Restrictions.disjunction().add(Restrictions.le(""String_Node_Str"",example.getStringValue())).add(Restrictions.le(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.le(""String_Node_Str"",example.getLongValue())).add(Restrictions.le(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.le(""String_Node_Str"",example.getDateValue()));
break;
case LIKE:
result=Restrictions.like(""String_Node_Str"",example.getStringValue());
break;
case LT:
result=Restrictions.disjunction().add(Restrictions.lt(""String_Node_Str"",example.getStringValue())).add(Restrictions.lt(""String_Node_Str"",example.getBooleanValue())).add(Restrictions.lt(""String_Node_Str"",example.getLongValue())).add(Restrictions.lt(""String_Node_Str"",example.getDoubleValue())).add(Restrictions.lt(""String_Node_Str"",example.getDateValue()));
break;
default :
}
return result;
}"
61205,"@Transactional(readOnly=true) private List<SyncopeUser> doSearch(final NodeCond nodeCond){
  List<SyncopeUser> result=null;
  List<SyncopeUser> rightResult=null;
switch (nodeCond.getType()) {
case LEAF:
case NOT_LEAF:
    Criteria criteria=getBaseCriteria().add(getCriterion(nodeCond));
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + criteria);
  }
result=criteria.list();
if (LOG.isDebugEnabled()) {
LOG.debug(""String_Node_Str"" + result);
}
break;
case AND:
result=doSearch(nodeCond.getLeftNodeCond());
rightResult=doSearch(nodeCond.getRightNodeCond());
result.retainAll(rightResult);
break;
case OR:
result=doSearch(nodeCond.getLeftNodeCond());
rightResult=doSearch(nodeCond.getRightNodeCond());
result.addAll(rightResult);
break;
default :
}
return result;
}","@Transactional(readOnly=true) private List<SyncopeUser> doSearch(final NodeCond nodeCond){
  List<SyncopeUser> result;
  List<SyncopeUser> rightResult;
switch (nodeCond.getType()) {
case LEAF:
case NOT_LEAF:
    if (nodeCond.getAttributeCond() != null && nodeCond.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {
      if (nodeCond.getType() == NodeCond.Type.NOT_LEAF) {
        nodeCond.setType(NodeCond.Type.LEAF);
        nodeCond.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);
        result=doSearch(nodeCond);
      }
 else {
        Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
        query.setParameter(""String_Node_Str"",nodeCond.getAttributeCond().getSchema());
        LOG.debug(""String_Node_Str"",query);
        result=query.getResultList();
      }
    }
 else {
      Criteria criteria=getBaseCriteria().add(getCriterion(nodeCond));
      LOG.debug(""String_Node_Str"",criteria);
      result=criteria.list();
    }
  LOG.debug(""String_Node_Str"",result);
break;
case AND:
result=doSearch(nodeCond.getLeftNodeCond());
rightResult=doSearch(nodeCond.getRightNodeCond());
result.retainAll(rightResult);
break;
case OR:
result=doSearch(nodeCond.getLeftNodeCond());
rightResult=doSearch(nodeCond.getRightNodeCond());
result.addAll(rightResult);
break;
default :
result=Collections.EMPTY_LIST;
}
return result;
}"
61206,"public List<ConfigurationTO> getConfigurationsListDB(){
  List<ConfigurationTO> list=restClient.getAllConfigurations();
  return list;
}","public List<ConfigurationTO> getConfigurationsListDB(){
  List<ConfigurationTO> list=null;
  try {
    list=restClient.getAllConfigurations();
  }
 catch (  RestClientException rce) {
    throw rce;
  }
  return list;
}"
61207,"@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  UserTO userTO=(UserTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
    userTO.setAttributes(getUserAttributesList());
    userTO.setMemberships(getMembershipsSet());
    if (createFlag) {
      usersRestClient.createUser(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        res=usersRestClient.updateUser(userMod);
        if (!res)         error(getString(""String_Node_Str""));
        Users callerPage=(Users)basePage;
        callerPage.setOperationResult(true);
      }
    }
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  UserTO userTO=(UserTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
    userTO.setAttributes(getUserAttributesList());
    userTO.setMemberships(getMembershipsSet());
    if (createFlag) {
      usersRestClient.createUser(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        res=usersRestClient.updateUser(userMod);
        if (!res)         error(getString(""String_Node_Str""));
        Users callerPage=(Users)basePage;
        callerPage.setOperationResult(true);
      }
    }
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    e.printStackTrace();
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}"
61208,"public Page createPage(){
  MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
  return form;
}","public Page createPage(){
  MembershipModalPage window=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
  return window;
}"
61209,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly());
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesList());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return form;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly());
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesList());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        e.printStackTrace();
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage window=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return window;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}"
61210,"@Override protected void populateItem(final ListItem item){
  final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
  item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
  item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
  AjaxLink editLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createUserWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
          return form;
        }
      }
);
      createUserWin.show(target);
    }
  }
;
  item.add(editLink);
  AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      int componentId=new Integer(getParent().getId());
      membershipTOs.remove(componentId);
      target.addComponent(membershipsContainer);
    }
  }
;
  item.add(deleteLink);
}","@Override protected void populateItem(final ListItem item){
  final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
  item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
  item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
  AjaxLink editLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      createUserWin.setPageCreator(new ModalWindow.PageCreator(){
        public Page createPage(){
          MembershipModalPage window=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
          return window;
        }
      }
);
      createUserWin.show(target);
    }
  }
;
  item.add(editLink);
  AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    AjaxRequestTarget target){
      int componentId=new Integer(getParent().getId());
      membershipTOs.remove(componentId);
      target.addComponent(membershipsContainer);
    }
  }
;
  item.add(deleteLink);
}"
61211,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"" + resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  resource.getMappings().clear();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  resource=binder.getResource(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  resource=resourceDAO.save(resource);
  return binder.getResourceTO(resource);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"" + resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  resourceDAO.deleteAllMappings(resource);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  resource=binder.getResource(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  resource=resourceDAO.save(resource);
  return binder.getResourceTO(resource);
}"
61212,"public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse((String)item.getModelObject());
                }
 catch (                ParseException ex) {
                  Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      UserModalPage userModalPage=(UserModalPage)basePage;
      if (createFlag)       userModalPage.getMembershipTOs().add(membershipTO);
 else {
        userModalPage.getMembershipTOs().remove(membershipTO);
        userModalPage.getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  form.add(container);
  add(form);
}","public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
                }
 catch (                ParseException ex) {
                  Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      UserModalPage userModalPage=(UserModalPage)basePage;
      if (createFlag)       userModalPage.getMembershipTOs().add(membershipTO);
 else {
        userModalPage.getMembershipTOs().remove(membershipTO);
        userModalPage.getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  form.add(container);
  add(form);
}"
61213,"@Override public Serializable getObject(){
  DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
  Date date=new Date();
  try {
    String dateValue=(String)item.getModelObject();
    formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
    if (!dateValue.equals(""String_Node_Str""))     date=formatter.parse((String)item.getModelObject());
  }
 catch (  ParseException ex) {
    Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
  }
  return date;
}","@Override public Serializable getObject(){
  DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
  Date date=new Date();
  try {
    String dateValue=(String)item.getModelObject();
    formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
    if (!dateValue.equals(""String_Node_Str""))     date=formatter.parse(dateValue);
  }
 catch (  ParseException ex) {
    Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
  }
  return date;
}"
61214,"@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))   required=true;
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return ""String_Node_Str"";
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse((String)item.getModelObject());
        }
 catch (        ParseException ex) {
          Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,required);
  }
  item.add(panel);
}","@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))   required=true;
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return ""String_Node_Str"";
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
        }
 catch (        ParseException ex) {
          Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required);
  }
  item.add(panel);
}"
61215,"@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
    required=true;
  }
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse((String)item.getModelObject());
        }
 catch (        ParseException ex) {
          Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,required);
  }
 else {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
  item.add(panel);
}","@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
    required=true;
  }
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
        }
 catch (        ParseException ex) {
          Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required);
  }
 else {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
  item.add(panel);
}"
61216,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  if (!createFlag)   cloneOldRoleTO(roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse((String)item.getModelObject());
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,required);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  form.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        roleTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          restClient.createRole(roleTO);
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
          window.close(target);
        }
 else {
          setupRoleMod(roleTO);
          res=restClient.updateRole(roleMod);
          if (!res) {
            error(getString(""String_Node_Str""));
          }
 else {
            Roles callerPage=(Roles)basePage;
            callerPage.setOperationResult(true);
            window.close(target);
          }
        }
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  add(form);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  if (!createFlag)   cloneOldRoleTO(roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  form.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        roleTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          restClient.createRole(roleTO);
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
          window.close(target);
        }
 else {
          setupRoleMod(roleTO);
          res=restClient.updateRole(roleMod);
          if (!res) {
            error(getString(""String_Node_Str""));
          }
 else {
            Roles callerPage=(Roles)basePage;
            callerPage.setOperationResult(true);
            window.close(target);
          }
        }
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  add(form);
}"
61217,"@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  UserTO userTO=(UserTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
    userTO.setAttributes(getUserAttributesSet());
    userTO.setMemberships(getMembershipsSet());
    if (createFlag) {
      usersRestClient.createUser(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        res=usersRestClient.updateUser(userMod);
        if (!res)         error(getString(""String_Node_Str""));
        Users callerPage=(Users)basePage;
        callerPage.setOperationResult(true);
      }
    }
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  UserTO userTO=(UserTO)form.getDefaultModelObject();
  boolean res=false;
  try {
    userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
    userTO.setAttributes(getUserAttributesList());
    userTO.setMemberships(getMembershipsSet());
    if (createFlag) {
      usersRestClient.createUser(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        res=usersRestClient.updateUser(userMod);
        if (!res)         error(getString(""String_Node_Str""));
        Users callerPage=(Users)basePage;
        callerPage.setOperationResult(true);
      }
    }
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}"
61218,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str"")) {
                    date=formatter.parse((String)item.getModelObject());
                  }
                }
 catch (                ParseException ex) {
                  Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,required,schemaTO.isReadonly());
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesSet());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return form;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly());
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesList());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return form;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}"
61219,"/** 
 * Build a DateFieldPanel.
 * @param component id
 * @param label name
 * @param IModel<?> object
 * @param required flag
 * @param readonly flag
 */
public DateFieldPanel(String id,String name,IModel<?> model,boolean required,boolean readonly){
  super(id,model);
  if (required) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
  UpdatingTextField dateField=new UpdatingTextField(""String_Node_Str"",model,Date.class);
  dateField.setRequired(required);
  dateField.setEnabled(!readonly);
  dateField.setLabel(new Model(name));
  dateField.add(new DatePicker());
  add(dateField);
}","/** 
 * Build a DateFieldPanel.
 * @param component id
 * @param label name
 * @param IModel<Date> date object
 * @param schema attribute's date pattern
 * @param required flag
 * @param readonly flag
 */
public DateFieldPanel(String id,String name,IModel<Date> model,final String datePattern,boolean required,boolean readonly){
  super(id,model);
  if (required) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
  Fragment datePanel=null;
  if (!datePattern.contains(""String_Node_Str"")) {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTextField field=new DateTextField(""String_Node_Str"",model,datePattern);
    field.add(getDatePicker());
    field.setRequired(required);
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
  }
 else {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTimeField field=new DateTimeField(""String_Node_Str"",model);
    field.setRequired(required);
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
  }
  add(datePanel);
}"
61220,"public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      UserModalPage userModalPage=(UserModalPage)basePage;
      if (createFlag)       userModalPage.getMembershipTOs().add(membershipTO);
 else {
        userModalPage.getMembershipTOs().remove(membershipTO);
        userModalPage.getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  form.add(container);
  add(form);
}","public MembershipModalPage(final Page basePage,final ModalWindow window,final MembershipTO membershipTO,final boolean createFlag){
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(membershipTO));
  setupSchemaWrappers(createFlag,membershipTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return ""String_Node_Str"";
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      MembershipTO membershipTO=(MembershipTO)form.getDefaultModelObject();
      membershipTO.setAttributes(getMembershipAttributes());
      UserModalPage userModalPage=(UserModalPage)basePage;
      if (createFlag)       userModalPage.getMembershipTOs().add(membershipTO);
 else {
        userModalPage.getMembershipTOs().remove(membershipTO);
        userModalPage.getMembershipTOs().add(membershipTO);
      }
      window.close(target);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  container.setOutputMarkupId(true);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  form.add(container);
  add(form);
}"
61221,"@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))   required=true;
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return ""String_Node_Str"";
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
 else           date=null;
        }
 catch (        ParseException ex) {
          Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required);
  }
  item.add(panel);
}","@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))   required=true;
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return ""String_Node_Str"";
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
 else           date=null;
        }
 catch (        ParseException ex) {
          Logger.getLogger(UserModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
  }
  item.add(panel);
}"
61222,"@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
    required=true;
  }
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
 else           date=null;
        }
 catch (        ParseException ex) {
          Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required);
  }
 else {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
  item.add(panel);
}","@Override protected void populateItem(final ListItem item){
  String mandatoryCondition=schemaTO.getMandatoryCondition();
  boolean required=false;
  if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
    required=true;
  }
  if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        Boolean val=(Boolean)object;
        item.setModelObject(val.toString());
      }
    }
,required);
  }
 else   if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
    panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        Date date=new Date();
        try {
          String dateValue=(String)item.getModelObject();
          if (!dateValue.equals(""String_Node_Str""))           date=formatter.parse(dateValue);
 else           date=null;
        }
 catch (        ParseException ex) {
          Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
        }
        return date;
      }
      @Override public void setObject(      Serializable object){
        Date date=(Date)object;
        Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
        String val=formatter.format(date);
        item.setModelObject(val);
      }
    }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
  }
 else {
    panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
      @Override public Serializable getObject(){
        return (String)item.getModelObject();
      }
      @Override public void setObject(      Serializable object){
        item.setModelObject((String)object);
      }
    }
,required);
  }
  item.add(panel);
}"
61223,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  if (!createFlag)   cloneOldRoleTO(roleTO);
  Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  form.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        roleTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          restClient.createRole(roleTO);
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
          window.close(target);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            res=restClient.updateRole(roleMod);
            if (!res)             error(getString(""String_Node_Str""));
 else {
              Roles callerPage=(Roles)basePage;
              callerPage.setOperationResult(true);
            }
          }
          window.close(target);
        }
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  add(form);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public RoleModalPage(final BasePage basePage,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  if (!createFlag)   cloneOldRoleTO(roleTO);
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(roleTO));
  setupSchemaWrappers(createFlag,roleTO);
  final ListView roleAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str"")) {
            required=true;
          }
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required);
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),form);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required);
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=1L;
            @Override public CharSequence preDecorateScript(            CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"";
            }
          }
;
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  form.add(roleAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(roleTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(roleTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette<ResourceTO> resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  form.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(roleAttributesView);
  container.setOutputMarkupId(true);
  form.add(container);
  TextField name=new TextField(""String_Node_Str"");
  name.setRequired(true);
  container.add(name);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        roleTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        roleTO.setAttributes(getRoleAttributes());
        if (createFlag) {
          restClient.createRole(roleTO);
          Roles callerPage=(Roles)basePage;
          callerPage.setOperationResult(true);
          window.close(target);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            res=restClient.updateRole(roleMod);
            if (!res)             error(getString(""String_Node_Str""));
 else {
              Roles callerPage=(Roles)basePage;
              callerPage.setOperationResult(true);
            }
          }
          window.close(target);
        }
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  form.add(submit);
  form.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  add(form);
}"
61224,"/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly());
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesList());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        e.printStackTrace();
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage window=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return window;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}","/** 
 * @param basePage base
 * @param modalWindow modal window
 * @param connectorTO
 * @param create : set to true only if a CREATE operation is required
 */
public UserModalPage(final BasePage basePage,final ModalWindow window,final UserTO userTO,final boolean createFlag){
  if (!createFlag) {
    cloneOldUserTO(userTO);
  }
  setupRolesMap();
  add(createUserWin=new ModalWindow(""String_Node_Str""));
  createUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createUserWin.setPageMapName(""String_Node_Str"");
  createUserWin.setCookieName(""String_Node_Str"");
  final Form userForm=new Form(""String_Node_Str"");
  userForm.setModel(new CompoundPropertyModel(userTO));
  setupSchemaWrappers(createFlag,userTO);
  setupMemberships(createFlag,userTO);
  final ListView userAttributesView=new ListView(""String_Node_Str"",schemaWrappers){
    @Override protected void populateItem(    ListItem item){
      final SchemaWrapper schemaWrapper=(SchemaWrapper)item.getDefaultModelObject();
      final SchemaTO schemaTO=schemaWrapper.getSchemaTO();
      item.add(new Label(""String_Node_Str"",schemaWrapper.getSchemaTO().getName()));
      item.add(new ListView(""String_Node_Str"",schemaWrapper.getValues()){
        Panel panel;
        @Override protected void populateItem(        final ListItem item){
          String mandatoryCondition=schemaTO.getMandatoryCondition();
          boolean required=false;
          if (mandatoryCondition.equalsIgnoreCase(""String_Node_Str""))           required=true;
          if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                Boolean val=(Boolean)object;
                item.setModelObject(val.toString());
              }
            }
,required,schemaTO.isReadonly());
          }
 else           if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
            panel=new DateFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                DateFormat formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                Date date=new Date();
                try {
                  String dateValue=(String)item.getModelObject();
                  if (!dateValue.equals(""String_Node_Str""))                   date=formatter.parse(dateValue);
 else                   date=null;
                }
 catch (                ParseException ex) {
                  Logger.getLogger(RoleModalPage.class.getName()).log(Level.SEVERE,null,ex);
                }
                return date;
              }
              @Override public void setObject(              Serializable object){
                Date date=(Date)object;
                Format formatter=new SimpleDateFormat(schemaTO.getConversionPattern());
                String val=formatter.format(date);
                item.setModelObject(val);
              }
            }
,schemaTO.getConversionPattern(),required,schemaTO.isReadonly(),userForm);
          }
 else {
            panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(){
              @Override public Serializable getObject(){
                return (String)item.getModelObject();
              }
              @Override public void setObject(              Serializable object){
                item.setModelObject((String)object);
              }
            }
,required,schemaTO.isReadonly());
          }
          item.add(panel);
        }
      }
);
      AjaxButton addButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().add(""String_Node_Str"");
          target.addComponent(container);
        }
      }
;
      AjaxButton dropButton=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
        @Override protected void onSubmit(        AjaxRequestTarget target,        Form form){
          schemaWrapper.getValues().remove(schemaWrapper.getValues().size() - 1);
          target.addComponent(container);
        }
      }
;
      if (schemaTO.getType().getClassName().equals(""String_Node_Str"")) {
        addButton.setVisible(false);
        dropButton.setVisible(false);
      }
      addButton.setDefaultFormProcessing(false);
      addButton.setVisible(schemaTO.isMultivalue());
      dropButton.setDefaultFormProcessing(false);
      dropButton.setVisible(schemaTO.isMultivalue());
      if (schemaWrapper.getValues().size() == 1) {
        dropButton.setVisible(false);
      }
      if (schemaTO.isReadonly()) {
        addButton.setEnabled(false);
        dropButton.setEnabled(false);
      }
      item.add(addButton);
      item.add(dropButton);
    }
  }
;
  userForm.add(userAttributesView);
  ListModel<ResourceTO> selectedResources=new ListModel<ResourceTO>();
  selectedResources.setObject(getSelectedResources(userTO));
  ListModel<ResourceTO> availableResources=new ListModel<ResourceTO>();
  availableResources.setObject(getAvailableResources(userTO));
  ChoiceRenderer paletteRenderer=new ChoiceRenderer(""String_Node_Str"",""String_Node_Str"");
  final Palette resourcesPalette=new Palette(""String_Node_Str"",selectedResources,availableResources,paletteRenderer,8,false);
  userForm.add(resourcesPalette);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(userAttributesView);
  PasswordTextField password=new PasswordTextField(""String_Node_Str"");
  password.setRequired(createFlag);
  password.setResetPassword(false);
  container.add(password);
  container.setOutputMarkupId(true);
  userForm.add(container);
  submit=new AjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      UserTO userTO=(UserTO)form.getDefaultModelObject();
      boolean res=false;
      try {
        userTO.setResources(getResourcesSet(resourcesPalette.getModelCollection()));
        userTO.setAttributes(getUserAttributesList());
        userTO.setMemberships(getMembershipsSet());
        if (createFlag) {
          usersRestClient.createUser(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            res=usersRestClient.updateUser(userMod);
            if (!res)             error(getString(""String_Node_Str""));
            Users callerPage=(Users)basePage;
            callerPage.setOperationResult(true);
          }
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        e.printStackTrace();
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.addComponent(form.get(""String_Node_Str""));
    }
  }
;
  userForm.add(submit);
  userForm.add(new FeedbackPanel(""String_Node_Str"").setOutputMarkupId(true));
  SyncopeRoleTree roleTree=new SyncopeRoleTree(rolesRestClient);
  BaseTree tree;
  tree=new LinkTree(""String_Node_Str"",roleTree.createTreeModel()){
    @Override protected IModel<Object> getNodeTextModel(    IModel<Object> model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode syncopeTreeNode=(DefaultMutableTreeNode)node;
      final TreeModelBean treeModel=(TreeModelBean)syncopeTreeNode.getUserObject();
      if (treeModel.getTreeNode() != null) {
        createUserWin.setPageCreator(new ModalWindow.PageCreator(){
          MembershipTO membershipTO;
          @Override public Page createPage(){
            membershipTO=new MembershipTO();
            membershipTO.setRoleId(treeModel.getTreeNode().getId());
            String title=treeModel.getTreeNode().getName();
            MembershipModalPage form=new MembershipModalPage(getPage(),createUserWin,membershipTO,true);
            return form;
          }
        }
);
        createUserWin.show(target);
      }
    }
  }
;
  tree.getTreeState().expandAll();
  tree.updateTree();
  userForm.add(tree);
  ListView membershipsView=new ListView(""String_Node_Str"",membershipTOs){
    @Override protected void populateItem(    final ListItem item){
      final MembershipTO membershipTO=(MembershipTO)item.getDefaultModelObject();
      item.add(new Label(""String_Node_Str"",new Model(membershipTO.getRoleId())));
      item.add(new Label(""String_Node_Str"",new Model((String)rolesMap.get(membershipTO.getRoleId()))));
      AjaxLink editLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          createUserWin.setPageCreator(new ModalWindow.PageCreator(){
            public Page createPage(){
              MembershipModalPage window=new MembershipModalPage(getPage(),createUserWin,membershipTO,false);
              return window;
            }
          }
);
          createUserWin.show(target);
        }
      }
;
      item.add(editLink);
      AjaxLink deleteLink=new AjaxLink(""String_Node_Str""){
        @Override public void onClick(        AjaxRequestTarget target){
          int componentId=new Integer(getParent().getId());
          membershipTOs.remove(componentId);
          target.addComponent(membershipsContainer);
        }
      }
;
      item.add(deleteLink);
    }
  }
;
  membershipsContainer=new WebMarkupContainer(""String_Node_Str"");
  membershipsContainer.add(membershipsView);
  membershipsContainer.setOutputMarkupId(true);
  setWindowClosedCallback(createUserWin,membershipsContainer);
  userForm.add(membershipsContainer);
  add(userForm);
}"
61225,"/** 
 * Build a DateFieldPanel.
 * @param component id
 * @param label name
 * @param IModel<Date> date object
 * @param schema attribute's date pattern
 * @param required flag
 * @param readonly flag
 */
public DateFieldPanel(String id,String name,IModel<Date> model,final String datePattern,boolean required,boolean readonly){
  super(id,model);
  if (required) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
  Fragment datePanel=null;
  if (!datePattern.contains(""String_Node_Str"")) {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTextField field=new DateTextField(""String_Node_Str"",model,datePattern);
    field.add(getDatePicker());
    field.setRequired(required);
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
  }
 else {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTimeField field=new DateTimeField(""String_Node_Str"",model);
    field.setRequired(required);
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
  }
  add(datePanel);
}","/** 
 * @param id wicket id
 * @param name component name
 * @param model model object
 * @param datePattern schema attribute date pattern defined for it
 * @param required TRUE if it is required, FALSE otherwise
 * @param readonly TRUE if it can't be valued, FALSE otherwise
 * @param form form where it will be included
 */
public DateFieldPanel(String id,String name,IModel<Date> model,final String datePattern,boolean required,boolean readonly,Form form){
  super(id,model);
  if (required) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
  Fragment datePanel=null;
  if (!datePattern.contains(""String_Node_Str"")) {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTextField field=new DateTextField(""String_Node_Str"",model,datePattern);
    field.add(getDatePicker());
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
  }
 else {
    datePanel=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    DateTimeField field=new DateTimeField(""String_Node_Str"",model);
    field.setEnabled(!readonly);
    field.setLabel(new Model(name));
    datePanel.add(field);
    if (required)     form.add(new DateTimeFormValidator(field));
  }
  add(datePanel);
}"
61226,"public SchemaTO(){
  derivedSchemas=new HashSet<String>();
}","public SchemaTO(){
  mandatoryCondition=""String_Node_Str"";
  derivedSchemas=new HashSet<String>();
}"
61227,"/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @return
 */
public String getValue(Collection<? extends AbstractAttribute> attributes){
  Expression jexlExpression=jexlEngine.createExpression(getDerivedSchema().getExpression());
  JexlContext jexlContext=new MapContext();
  List<? extends AbstractAttributeValue> attributeValues=null;
  String expressionValue=null;
  AbstractAttribute attribute=null;
  AbstractAttributeValue attributeValue=null;
  for (Iterator<? extends AbstractAttribute> itor=attributes.iterator(); itor.hasNext(); ) {
    attribute=itor.next();
    attributeValues=attribute.getValues();
    if (attributeValues.isEmpty() || !getDerivedSchema().getSchemas().contains(attribute.getSchema())) {
      expressionValue=""String_Node_Str"";
    }
 else {
      attributeValue=attributeValues.iterator().next();
      expressionValue=attributeValue.getValueAsString();
    }
    jexlContext.set(attribute.getSchema().getName(),expressionValue);
  }
  return jexlExpression.evaluate(jexlContext).toString();
}","/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @param attributes the set of attributes against which evaluate thisderived attribute
 * @return the value of this derived attribute
 */
public String getValue(final Collection<? extends AbstractAttribute> attributes){
  JexlContext jexlContext=new MapContext();
  List<? extends AbstractAttributeValue> attributeValues=null;
  String expressionValue=null;
  AbstractAttribute attribute=null;
  AbstractAttributeValue attributeValue=null;
  for (Iterator<? extends AbstractAttribute> itor=attributes.iterator(); itor.hasNext(); ) {
    attribute=itor.next();
    attributeValues=attribute.getValues();
    if (attributeValues.isEmpty() || !getDerivedSchema().getSchemas().contains(attribute.getSchema())) {
      expressionValue=""String_Node_Str"";
    }
 else {
      attributeValue=attributeValues.iterator().next();
      expressionValue=attributeValue.getValueAsString();
    }
    jexlContext.set(attribute.getSchema().getName(),expressionValue);
  }
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  JexlEngine jexlEngine=(JexlEngine)context.getBean(""String_Node_Str"");
  String result=null;
  try {
    Expression jexlExpression=jexlEngine.createExpression(getDerivedSchema().getExpression());
    result=jexlExpression.evaluate(jexlContext).toString();
  }
 catch (  JexlException e) {
    LOG.error(""String_Node_Str"" + getDerivedSchema().getExpression(),e);
  }
  return result;
}"
61228,"public AbstractSchema(){
  type=SchemaValueType.String;
  virtual=getBooleanAsCharacter(false);
  mandatory=getBooleanAsCharacter(false);
  multivalue=getBooleanAsCharacter(false);
  uniquevalue=getBooleanAsCharacter(false);
  readonly=getBooleanAsCharacter(false);
}","public AbstractSchema(){
  super();
  type=SchemaValueType.String;
  virtual=getBooleanAsCharacter(false);
  mandatoryCondition=Boolean.FALSE.toString();
  multivalue=getBooleanAsCharacter(false);
  uniquevalue=getBooleanAsCharacter(false);
  readonly=getBooleanAsCharacter(false);
}"
61229,"public SchemaMapping(){
  super();
  accountid=getBooleanAsCharacter(false);
  password=getBooleanAsCharacter(false);
  nullable=getBooleanAsCharacter(true);
}","public SchemaMapping(){
  super();
  accountid=getBooleanAsCharacter(false);
  password=getBooleanAsCharacter(false);
  mandatoryCondition=Boolean.FALSE.toString();
}"
61230,"private <T extends AbstractSchema>boolean evaluateMandatoryCondition(final Set<TargetResource> resources,final List<? extends AbstractAttribute> attributes,final String schemaName,final Class<T> referenceSchema){
  boolean result=resources == null || resources.isEmpty() ? false : true;
  TargetResource resource;
  for (Iterator<TargetResource> itor=resources.iterator(); itor.hasNext() && result; ) {
    resource=itor.next();
    result&=evaluateMandatoryCondition(resource.getName(),attributes,schemaName,referenceSchema);
  }
  return result;
}","private <T extends AbstractSchema>boolean evaluateMandatoryCondition(final Set<TargetResource> resources,final List<? extends AbstractAttribute> attributes,final String schemaName,final Class<T> referenceSchema){
  boolean result=false;
  TargetResource resource;
  for (Iterator<TargetResource> itor=resources.iterator(); itor.hasNext() && !result; ) {
    resource=itor.next();
    if (resource.isForceMandatoryConstraint()) {
      result|=evaluateMandatoryCondition(resource.getName(),attributes,schemaName,referenceSchema);
    }
  }
  return result;
}"
61231,"@Override public void removeMapping(Long mappingId){
  SchemaMapping mapping=findMapping(mappingId);
  if (mapping == null) {
    return;
  }
  String schemaName=mapping.getSchemaName();
  SchemaType schemaType=mapping.getSchemaType();
  try {
    schemaType.getSchemaType().asSubclass(AbstractSchema.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemaType.getClassName());
    }
    AbstractSchema schema=find(schemaName,schemaType.getSchemaType());
    if (schema != null) {
      schema.removeMapping(mapping);
    }
  }
 catch (  ClassCastException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemaType.getClassName());
    }
  }
  TargetResource resource=resourceDAO.find(mapping.getResource().getName());
  if (resource != null) {
    resource.removeMapping(mapping);
  }
  mapping.setResource(null);
  entityManager.remove(mapping);
}","@Override public void removeMapping(Long mappingId){
  SchemaMapping mapping=findMapping(mappingId);
  if (mapping == null) {
    return;
  }
  String schemaName=mapping.getSchemaName();
  SchemaType schemaType=mapping.getSchemaType();
  try {
    schemaType.getSchemaClass().asSubclass(AbstractSchema.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemaType.getClassName());
    }
    AbstractSchema schema=find(schemaName,schemaType.getSchemaClass());
    if (schema != null) {
      schema.removeMapping(mapping);
    }
  }
 catch (  ClassCastException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + schemaType.getClassName());
    }
  }
  TargetResource resource=resourceDAO.find(mapping.getResource().getName());
  if (resource != null) {
    resource.removeMapping(mapping);
  }
  mapping.setResource(null);
  entityManager.remove(mapping);
}"
61232,"private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,TargetResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ resource+ ""String_Node_Str""+ user.getAttributes());
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attributes=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schemaName=null;
  SchemaType schemaType=null;
  UserAttribute userAttribute=null;
  SchemaValueType schemaValueType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    try {
      field=mapping.getField();
      schemaName=mapping.getSchemaName();
      schemaType=mapping.getSchemaType();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str"");
      }
      AbstractSchema schema=null;
      try {
        schemaType.getSchemaType().asSubclass(AbstractSchema.class);
        schema=schemaDAO.find(schemaName,schemaType.getSchemaType());
      }
 catch (      ClassCastException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + schemaType.getClassName());
        }
      }
      if (schema != null) {
        schemaValueType=schema.getType();
        userAttribute=user.getAttribute(schemaName);
        values=userAttribute != null ? userAttribute.getAttributeValues() : Collections.EMPTY_LIST;
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + userAttribute + ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
        }
      }
 else {
        schemaValueType=SchemaValueType.String;
        UserAttributeValue userAttributeValue=new UserAttributeValue();
        userAttributeValue.setStringValue(SchemaType.AccountId.equals(schemaType) ? user.getId().toString() : password);
        values=Collections.singletonList(userAttributeValue);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || schemaType.equals(SchemaType.Password))+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.toString()+ ""String_Node_Str""+ schemaValueType.getClassName()+ ""String_Node_Str""+ values);
      }
      objValues=new HashSet();
      for (      UserAttributeValue value : values) {
        castToBeApplied=Class.forName(schemaValueType.getClassName());
        if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
          castToBeApplied=String.class;
          objValues.add(value.getValueAsString());
        }
 else {
          objValues.add(value.getValue());
        }
      }
      if (mapping.isAccountid()) {
        accountId=objValues.iterator().next().toString();
        attributes.add(new Name(accountId));
      }
      if (mapping.isPassword()) {
        attributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
      }
      Object objValue=null;
      if (!objValues.isEmpty()) {
        objValue=objValues.iterator().next();
      }
      if (!mapping.isPassword() && !mapping.isAccountid()) {
        if (schema.isMultivalue()) {
          attributes.add(AttributeBuilder.build(field,objValues));
        }
 else {
          attributes.add(AttributeBuilder.build(field,castToBeApplied.cast(objValue)));
        }
      }
    }
 catch (    ClassNotFoundException e) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(""String_Node_Str"" + schemaValueType.getClassName(),e);
      }
    }
catch (    Throwable t) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + schemaName + ""String_Node_Str"",t);
      }
    }
  }
  return Collections.singletonMap(accountId,attributes);
}","private Map<String,Set<Attribute>> prepareAttributes(SyncopeUser user,TargetResource resource){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ resource+ ""String_Node_Str""+ user.getAttributes());
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attributes=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schemaName=null;
  SchemaType schemaType=null;
  UserAttribute userAttribute=null;
  SchemaValueType schemaValueType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    try {
      field=mapping.getField();
      schemaName=mapping.getSchemaName();
      schemaType=mapping.getSchemaType();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str"");
      }
      AbstractSchema schema=null;
      try {
        schemaType.getSchemaClass().asSubclass(AbstractSchema.class);
        schema=schemaDAO.find(schemaName,schemaType.getSchemaClass());
      }
 catch (      ClassCastException e) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + schemaType.getClassName());
        }
      }
      if (schema != null) {
        schemaValueType=schema.getType();
        userAttribute=user.getAttribute(schemaName);
        values=userAttribute != null ? userAttribute.getAttributeValues() : Collections.EMPTY_LIST;
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + userAttribute + ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
        }
      }
 else {
        schemaValueType=SchemaValueType.String;
        UserAttributeValue userAttributeValue=new UserAttributeValue();
        userAttributeValue.setStringValue(SchemaType.AccountId.equals(schemaType) ? user.getId().toString() : password);
        values=Collections.singletonList(userAttributeValue);
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || schemaType.equals(SchemaType.Password))+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.toString()+ ""String_Node_Str""+ schemaValueType.getClassName()+ ""String_Node_Str""+ values);
      }
      objValues=new HashSet();
      for (      UserAttributeValue value : values) {
        castToBeApplied=Class.forName(schemaValueType.getClassName());
        if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
          castToBeApplied=String.class;
          objValues.add(value.getValueAsString());
        }
 else {
          objValues.add(value.getValue());
        }
      }
      if (mapping.isAccountid()) {
        accountId=objValues.iterator().next().toString();
        attributes.add(new Name(accountId));
      }
      if (mapping.isPassword()) {
        attributes.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
      }
      Object objValue=null;
      if (!objValues.isEmpty()) {
        objValue=objValues.iterator().next();
      }
      if (!mapping.isPassword() && !mapping.isAccountid()) {
        if (schema.isMultivalue()) {
          attributes.add(AttributeBuilder.build(field,objValues));
        }
 else {
          attributes.add(AttributeBuilder.build(field,castToBeApplied.cast(objValue)));
        }
      }
    }
 catch (    ClassNotFoundException e) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(""String_Node_Str"" + schemaValueType.getClassName(),e);
      }
    }
catch (    Throwable t) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + schemaName + ""String_Node_Str"",t);
      }
    }
  }
  return Collections.singletonMap(accountId,attributes);
}"
61233,"/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(final ServletContextEvent sce){
  WebApplicationContext springContext=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  DataSource dataSource=(DataSource)springContext.getBean(""String_Node_Str"");
  DefaultDataTypeFactory dbUnitDataTypeFactory=(DefaultDataTypeFactory)springContext.getBean(""String_Node_Str"");
  String dbSchema=null;
  try {
    InputStream dbPropsStream=sce.getServletContext().getResourceAsStream(""String_Node_Str"" + ""String_Node_Str"");
    Properties dbProps=new Properties();
    dbProps.load(dbPropsStream);
    dbSchema=dbProps.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",t);
    }
 else {
      log.error(""String_Node_Str"");
    }
    dbSchema=null;
  }
  Connection conn=DataSourceUtils.getConnection(dataSource);
  Statement statement=null;
  ResultSet resultSet=null;
  boolean existingData=false;
  try {
    statement=conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
    resultSet=statement.executeQuery(""String_Node_Str"" + SyncopeConfiguration.class.getSimpleName());
    resultSet.last();
    existingData=resultSet.getRow() > 0;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + SyncopeConfiguration.class.getSimpleName(),e);
    existingData=true;
  }
 finally {
    try {
      resultSet.close();
      statement.close();
    }
 catch (    SQLException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  try {
    IDatabaseConnection dbUnitConn=dbSchema == null ? new DatabaseConnection(conn) : new DatabaseConnection(conn,dbSchema);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
    config.setProperty(DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES,true);
    if (existingData) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
      dataSetBuilder.setColumnSensing(true);
      IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
      DatabaseOperation.REFRESH.execute(dbUnitConn,dataSet);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
}","/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(final ServletContextEvent sce){
  WebApplicationContext springContext=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  DataSource dataSource=(DataSource)springContext.getBean(""String_Node_Str"");
  DefaultDataTypeFactory dbUnitDataTypeFactory=(DefaultDataTypeFactory)springContext.getBean(""String_Node_Str"");
  String dbSchema=null;
  try {
    InputStream dbPropsStream=sce.getServletContext().getResourceAsStream(""String_Node_Str"" + ""String_Node_Str"");
    Properties dbProps=new Properties();
    dbProps.load(dbPropsStream);
    dbSchema=dbProps.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",t);
    }
 else {
      log.error(""String_Node_Str"");
    }
    dbSchema=null;
  }
  Connection conn=DataSourceUtils.getConnection(dataSource);
  Statement statement=null;
  ResultSet resultSet=null;
  boolean existingData=false;
  try {
    statement=conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
    resultSet=statement.executeQuery(""String_Node_Str"" + SyncopeConfiguration.class.getSimpleName());
    resultSet.last();
    existingData=resultSet.getRow() > 0;
  }
 catch (  SQLException e) {
    log.error(""String_Node_Str"" + SyncopeConfiguration.class.getSimpleName(),e);
    existingData=true;
  }
 finally {
    try {
      resultSet.close();
      statement.close();
    }
 catch (    SQLException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  try {
    IDatabaseConnection dbUnitConn=dbSchema == null ? new DatabaseConnection(conn) : new DatabaseConnection(conn,dbSchema);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
    config.setProperty(DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES,true);
    if (existingData) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
      dataSetBuilder.setColumnSensing(true);
      IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
      DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn,dataSet);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
}"
61234,"/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param syncResourceNames
 * @param merge
 * @return provisioned resources
 * @throws PropagationException
 */
private Set<String> provision(SyncopeUser user,ResourceOperations resourceOperations,Set<String> syncResourceNames) throws PropagationException {
  Set<String> provisioned=new HashSet<String>();
  resourceOperations.purge();
  ResourceOperations syncOperations=new ResourceOperations();
  ResourceOperations asyncOperations=new ResourceOperations();
  if (syncResourceNames == null) {
    syncResourceNames=Collections.EMPTY_SET;
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : resourceOperations.get(type)) {
      if (syncResourceNames.contains(resource.getName())) {
        syncOperations.add(type,resource);
      }
 else {
        asyncOperations.add(type,resource);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + syncOperations + ""String_Node_Str""+ user);
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : syncOperations.get(type)) {
      try {
        propagate(user,resource,type);
        provisioned.add(resource.getName());
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"" + resource.getName(),t);
        throw new PropagationException(""String_Node_Str"" + resource.getName(),resource.getName(),t);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + asyncOperations + ""String_Node_Str""+ user);
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : asyncOperations.get(type)) {
      try {
        propagate(user,resource,type);
        provisioned.add(resource.getName());
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"" + resource.getName(),t);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + provisioned + ""String_Node_Str""+ user.getId());
  }
  return provisioned;
}","/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param syncResourceNames
 * @param merge
 * @return provisioned resources
 * @throws PropagationException
 */
private Set<String> provision(SyncopeUser user,ResourceOperations resourceOperations,Set<String> syncResourceNames) throws PropagationException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ resourceOperations);
  }
  Set<String> provisioned=new HashSet<String>();
  resourceOperations.purge();
  ResourceOperations syncOperations=new ResourceOperations();
  ResourceOperations asyncOperations=new ResourceOperations();
  if (syncResourceNames == null) {
    syncResourceNames=Collections.EMPTY_SET;
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : resourceOperations.get(type)) {
      if (syncResourceNames.contains(resource.getName())) {
        syncOperations.add(type,resource);
      }
 else {
        asyncOperations.add(type,resource);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ syncOperations);
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : syncOperations.get(type)) {
      try {
        propagate(user,resource,type);
        provisioned.add(resource.getName());
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"" + resource.getName(),t);
        throw new PropagationException(""String_Node_Str"" + resource.getName(),resource.getName(),t);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ asyncOperations);
  }
  for (  Type type : ResourceOperations.Type.values()) {
    for (    TargetResource resource : asyncOperations.get(type)) {
      try {
        propagate(user,resource,type);
        provisioned.add(resource.getName());
      }
 catch (      Throwable t) {
        log.error(""String_Node_Str"" + resource.getName(),t);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + provisioned + ""String_Node_Str""+ user.getId());
  }
  return provisioned;
}"
61235,"/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param type to be performed on the specified resource
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,TargetResource resource,Type type) throws NoSuchBeanDefinitionException, IllegalStateException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ user.getAttributes());
  }
  ConnectorInstance connectorInstance=resource.getConnector();
  ConnectorFacade connector=getConnectorFacade(connectorInstance.getId().toString());
  if (connector == null) {
    log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schemaName=null;
  SchemaType schemaType=null;
  UserAttribute userAttribute=null;
  SchemaValueType schemaValueType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    try {
      field=mapping.getField();
      schemaName=mapping.getSchemaName();
      schemaType=mapping.getSchemaType();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str"");
      }
      AbstractSchema schema=null;
      try {
        schemaType.getSchemaType().asSubclass(AbstractSchema.class);
        schema=schemaDAO.find(schemaName,schemaType.getSchemaType());
      }
 catch (      ClassCastException e) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + schemaType.getClassName());
      }
      if (schema != null) {
        schemaValueType=schema.getType();
        userAttribute=user.getAttribute(schemaName);
        values=userAttribute != null ? userAttribute.getAttributeValues() : Collections.EMPTY_LIST;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + userAttribute + ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
        }
      }
 else {
        schemaValueType=SchemaValueType.String;
        UserAttributeValue userAttributeValue=new UserAttributeValue();
        userAttributeValue.setStringValue(SchemaType.AccountId.equals(schemaType) ? user.getId().toString() : password);
        values=Collections.singletonList(userAttributeValue);
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || schemaType.equals(SchemaType.Password))+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.toString()+ ""String_Node_Str""+ schemaValueType.getClassName()+ ""String_Node_Str""+ values);
      }
      objValues=new HashSet();
      for (      UserAttributeValue value : values) {
        castToBeApplied=Class.forName(schemaValueType.getClassName());
        if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
          castToBeApplied=String.class;
          objValues.add(value.getValueAsString());
        }
 else {
          objValues.add(value.getValue());
        }
      }
      if (mapping.isAccountid()) {
        accountId=objValues.iterator().next().toString();
        attrs.add(new Name(accountId));
      }
      if (mapping.isPassword()) {
        attrs.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
      }
      Object objValue=null;
      if (!objValues.isEmpty()) {
        objValue=objValues.iterator().next();
      }
      if (!mapping.isPassword() && !mapping.isAccountid()) {
        if (schema.isMultivalue()) {
          attrs.add(AttributeBuilder.build(field,objValues));
        }
 else {
          attrs.add(AttributeBuilder.build(field,castToBeApplied.cast(objValue)));
        }
      }
    }
 catch (    ClassNotFoundException e) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"" + schemaValueType.getClassName(),e);
      }
    }
catch (    Throwable t) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + schemaName + ""String_Node_Str"",t);
      }
    }
  }
  Uid userUid=null;
switch (type) {
case CREATE:
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  break;
case UPDATE:
userUid=connector.resolveUsername(ObjectClass.ACCOUNT,accountId,null);
if (userUid != null) {
userUid=connector.update(ObjectClass.ACCOUNT,userUid,attrs,null);
}
 else {
userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
}
break;
case DELETE:
connector.delete(ObjectClass.ACCOUNT,new Uid(accountId),null);
break;
}
if (userUid == null && type != Type.DELETE) {
log.error(""String_Node_Str"" + resource);
throw new IllegalStateException(""String_Node_Str"");
}
}","/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param type to be performed on the specified resource
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,TargetResource resource,Type type) throws NoSuchBeanDefinitionException, IllegalStateException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + user + ""String_Node_Str""+ user.getAttributes());
  }
  ConnectorInstance connectorInstance=resource.getConnector();
  ConnectorFacade connector=getConnectorFacade(connectorInstance.getId().toString());
  if (connector == null) {
    log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schemaName=null;
  SchemaType schemaType=null;
  UserAttribute userAttribute=null;
  SchemaValueType schemaValueType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    try {
      field=mapping.getField();
      schemaName=mapping.getSchemaName();
      schemaType=mapping.getSchemaType();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + schemaName + ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str"");
      }
      AbstractSchema schema=null;
      try {
        schemaType.getSchemaType().asSubclass(AbstractSchema.class);
        schema=schemaDAO.find(schemaName,schemaType.getSchemaType());
      }
 catch (      ClassCastException e) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + schemaType.getClassName());
      }
      if (schema != null) {
        schemaValueType=schema.getType();
        userAttribute=user.getAttribute(schemaName);
        values=userAttribute != null ? userAttribute.getAttributeValues() : Collections.EMPTY_LIST;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + userAttribute + ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.getClassName()+ ""String_Node_Str""+ values);
        }
      }
 else {
        schemaValueType=SchemaValueType.String;
        UserAttributeValue userAttributeValue=new UserAttributeValue();
        userAttributeValue.setStringValue(SchemaType.AccountId.equals(schemaType) ? user.getId().toString() : password);
        values=Collections.singletonList(userAttributeValue);
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ (mapping.isPassword() || schemaType.equals(SchemaType.Password))+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schemaName+ ""String_Node_Str""+ schemaType.toString()+ ""String_Node_Str""+ schemaValueType.getClassName()+ ""String_Node_Str""+ values);
      }
      objValues=new HashSet();
      for (      UserAttributeValue value : values) {
        castToBeApplied=Class.forName(schemaValueType.getClassName());
        if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
          castToBeApplied=String.class;
          objValues.add(value.getValueAsString());
        }
 else {
          objValues.add(value.getValue());
        }
      }
      if (mapping.isAccountid()) {
        accountId=objValues.iterator().next().toString();
        attrs.add(new Name(accountId));
      }
      if (mapping.isPassword()) {
        attrs.add(AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));
      }
      Object objValue=null;
      if (!objValues.isEmpty()) {
        objValue=objValues.iterator().next();
      }
      if (!mapping.isPassword() && !mapping.isAccountid()) {
        if (schema.isMultivalue()) {
          attrs.add(AttributeBuilder.build(field,objValues));
        }
 else {
          attrs.add(AttributeBuilder.build(field,castToBeApplied.cast(objValue)));
        }
      }
    }
 catch (    ClassNotFoundException e) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"" + schemaValueType.getClassName(),e);
      }
    }
catch (    Throwable t) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + schemaName + ""String_Node_Str"",t);
      }
    }
  }
  Uid userUid=null;
switch (type) {
case CREATE:
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  break;
case UPDATE:
try {
  userUid=connector.resolveUsername(ObjectClass.ACCOUNT,accountId,null);
}
 catch (RuntimeException ignore) {
}
if (userUid != null) {
userUid=connector.update(ObjectClass.ACCOUNT,userUid,attrs,null);
}
 else {
userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
}
break;
case DELETE:
connector.delete(ObjectClass.ACCOUNT,new Uid(accountId),null);
break;
}
if (userUid == null && type != Type.DELETE) {
log.error(""String_Node_Str"" + resource);
throw new IllegalStateException(""String_Node_Str"");
}
}"
61236,"public void setBooleanValue(Boolean booleanValue){
  if (booleanValue == null) {
    this.booleanValue=null;
  }
 else   if (booleanValue == Boolean.TRUE) {
    this.booleanValue='T';
  }
 else {
    this.booleanValue='F';
  }
}","public void setBooleanValue(Boolean booleanValue){
  if (booleanValue == null) {
    this.booleanValue=null;
  }
 else {
    this.booleanValue=getBooleanAsCharacter(booleanValue);
  }
}"
61237,"public Boolean getBooleanValue(){
  if (booleanValue == null) {
    return null;
  }
  return booleanValue == 'T' ? Boolean.TRUE : Boolean.FALSE;
}","public Boolean getBooleanValue(){
  if (booleanValue == null) {
    return null;
  }
  return isBooleanAsCharacter(booleanValue);
}"
61238,"public boolean isMultivalue(){
  return multivalue != null && multivalue == 'T';
}","public boolean isMultivalue(){
  return isBooleanAsCharacter(multivalue);
}"
61239,"public void setMandatory(boolean mandatory){
  this.mandatory=mandatory ? 'T' : 'F';
}","public void setMandatory(boolean mandatory){
  this.mandatory=getBooleanAsCharacter(mandatory);
}"
61240,"public boolean addMapping(SchemaMapping mapping){
  if (this.mappings == null)   this.mappings=new ArrayList<SchemaMapping>();
  return this.mappings.contains(mapping) || this.mappings.add(mapping);
}","public boolean addMapping(SchemaMapping mapping){
  if (this.mappings == null) {
    this.mappings=new ArrayList<SchemaMapping>();
  }
  return this.mappings.contains(mapping) || this.mappings.add(mapping);
}"
61241,"public void setMultivalue(boolean multivalue){
  this.multivalue=multivalue ? 'T' : 'F';
}","public void setMultivalue(boolean multivalue){
  this.multivalue=getBooleanAsCharacter(multivalue);
}"
61242,"public boolean isUniquevalue(){
  return uniquevalue != null && uniquevalue == 'T';
}","public boolean isUniquevalue(){
  return isBooleanAsCharacter(uniquevalue);
}"
61243,"public void setVirtual(boolean virtual){
  this.virtual=virtual ? 'T' : 'F';
}","public void setVirtual(boolean virtual){
  this.virtual=getBooleanAsCharacter(virtual);
}"
61244,"public boolean isMandatory(){
  return mandatory != null && mandatory == 'T';
}","public boolean isMandatory(){
  return isBooleanAsCharacter(mandatory);
}"
61245,"public List<SchemaMapping> getMappings(){
  if (this.mappings == null)   this.mappings=new ArrayList<SchemaMapping>();
  return this.mappings;
}","public List<SchemaMapping> getMappings(){
  if (this.mappings == null) {
    this.mappings=new ArrayList<SchemaMapping>();
  }
  return this.mappings;
}"
61246,"public AbstractSchema(){
  type=SchemaValueType.String;
  virtual='F';
  mandatory='F';
  multivalue='F';
  uniquevalue='F';
}","public AbstractSchema(){
  type=SchemaValueType.String;
  virtual=getBooleanAsCharacter(false);
  mandatory=getBooleanAsCharacter(false);
  multivalue=getBooleanAsCharacter(false);
  uniquevalue=getBooleanAsCharacter(false);
  readonly=getBooleanAsCharacter(false);
}"
61247,"public boolean isVirtual(){
  return virtual != null && virtual == 'T';
}","public boolean isVirtual(){
  return isBooleanAsCharacter(virtual);
}"
61248,"public void setUniquevalue(boolean uniquevalue){
  this.uniquevalue=uniquevalue ? 'T' : 'F';
}","public void setUniquevalue(boolean uniquevalue){
  this.uniquevalue=getBooleanAsCharacter(uniquevalue);
}"
61249,"public void setPassword(boolean password){
  this.password=password ? 'T' : 'F';
}","public void setPassword(boolean password){
  this.password=getBooleanAsCharacter(password);
}"
61250,"public boolean isPassword(){
  return password != null && password == 'T';
}","public boolean isPassword(){
  return isBooleanAsCharacter(password);
}"
61251,"public SchemaMapping(){
  accountid='F';
  password='F';
  nullable='T';
}","public SchemaMapping(){
  super();
  accountid=getBooleanAsCharacter(false);
  password=getBooleanAsCharacter(false);
  nullable=getBooleanAsCharacter(true);
}"
61252,"public boolean isAccountid(){
  return accountid != null && accountid == 'T';
}","public boolean isAccountid(){
  return isBooleanAsCharacter(accountid);
}"
61253,"public void setNullable(boolean nullable){
  this.nullable=nullable ? 'T' : 'F';
}","public void setNullable(boolean nullable){
  this.nullable=getBooleanAsCharacter(nullable);
}"
61254,"public boolean isNullable(){
  return nullable != null && nullable == 'T';
}","public boolean isNullable(){
  return isBooleanAsCharacter(nullable);
}"
61255,"public void setAccountid(boolean accountid){
  this.accountid=accountid ? 'T' : 'F';
}","public void setAccountid(boolean accountid){
  this.accountid=getBooleanAsCharacter(accountid);
}"
61256,"public void setForceMandatoryConstraint(boolean forceMandatoryConstraint){
  this.forceMandatoryConstraint=forceMandatoryConstraint ? 'T' : 'F';
}","public void setForceMandatoryConstraint(boolean forceMandatoryConstraint){
  this.forceMandatoryConstraint=getBooleanAsCharacter(forceMandatoryConstraint);
}"
61257,"public TargetResource(){
  this.forceMandatoryConstraint='F';
}","public TargetResource(){
  this.forceMandatoryConstraint=getBooleanAsCharacter(false);
}"
61258,"public boolean isForceMandatoryConstraint(){
  return forceMandatoryConstraint != null && forceMandatoryConstraint == 'T';
}","public boolean isForceMandatoryConstraint(){
  return isBooleanAsCharacter(forceMandatoryConstraint);
}"
61259,"public boolean isInheritDerivedAttributes(){
  return inheritDerivedAttributes != null && inheritDerivedAttributes == 'T';
}","public boolean isInheritDerivedAttributes(){
  return isBooleanAsCharacter(inheritDerivedAttributes);
}"
61260,"public SyncopeRole(){
  memberships=new ArrayList<Membership>();
  entitlements=new HashSet<Entitlement>();
  attributes=new ArrayList<RoleAttribute>();
  derivedAttributes=new ArrayList<RoleDerivedAttribute>();
  inheritAttributes='F';
  inheritDerivedAttributes='F';
}","public SyncopeRole(){
  memberships=new ArrayList<Membership>();
  entitlements=new HashSet<Entitlement>();
  attributes=new ArrayList<RoleAttribute>();
  derivedAttributes=new ArrayList<RoleDerivedAttribute>();
  inheritAttributes=getBooleanAsCharacter(false);
  inheritDerivedAttributes=getBooleanAsCharacter(false);
}"
61261,"public boolean isInheritAttributes(){
  return inheritAttributes != null && inheritAttributes == 'T';
}","public boolean isInheritAttributes(){
  return isBooleanAsCharacter(inheritAttributes);
}"
61262,"public void setInheritDerivedAttributes(boolean inheritDerivedAttributes){
  this.inheritDerivedAttributes=inheritDerivedAttributes ? 'T' : 'F';
}","public void setInheritDerivedAttributes(boolean inheritDerivedAttributes){
  this.inheritDerivedAttributes=getBooleanAsCharacter(inheritDerivedAttributes);
}"
61263,"public void setInheritAttributes(boolean inheritAttributes){
  this.inheritAttributes=inheritAttributes ? 'T' : 'F';
}","public void setInheritAttributes(boolean inheritAttributes){
  this.inheritAttributes=getBooleanAsCharacter(inheritAttributes);
}"
61264,"public TargetResource getResource(TargetResource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectorInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  resource.setConnector(connector);
  connector.addResource(resource);
  return resource;
}","public TargetResource getResource(TargetResource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectorInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  resource.setConnector(connector);
  connector.addResource(resource);
  resource.setForceMandatoryConstraint(resourceTO.isForceMandatoryConstraint());
  return resource;
}"
61265,"public ResourceTO getResourceTO(TargetResource resource){
  if (resource == null)   return null;
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resource.getName());
  ConnectorInstance connector=resource.getConnector();
  resourceTO.setConnectorId(connector != null ? connector.getId() : null);
  resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));
  return resourceTO;
}","public ResourceTO getResourceTO(TargetResource resource){
  if (resource == null)   return null;
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resource.getName());
  ConnectorInstance connector=resource.getConnector();
  resourceTO.setConnectorId(connector != null ? connector.getId() : null);
  resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));
  resourceTO.setForceMandatoryConstraint(resource.isForceMandatoryConstraint());
  return resourceTO;
}"
61266,"private ConnectorObjectBuilder buildConnectorObject(Set<WSAttributeValue> attributes){
  ConnectorObjectBuilder bld=new ConnectorObjectBuilder();
  String uid=null;
  for (  WSAttributeValue attribute : attributes) {
    if (attribute.isKey()) {
      uid=attribute.getStringValue();
      bld.setName(uid);
    }
    if (!attribute.isKey() && !attribute.isPassword()) {
      if (attribute.getValue() == null) {
        bld.addAttribute(AttributeBuilder.build(attribute.getName()));
      }
 else {
        bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValue()));
      }
    }
  }
  if (uid == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  bld.setUid(new Uid(uid));
  bld.setObjectClass(ObjectClass.ACCOUNT);
  return bld;
}","private ConnectorObjectBuilder buildConnectorObject(Set<WSAttributeValue> attributes){
  ConnectorObjectBuilder bld=new ConnectorObjectBuilder();
  String uid=null;
  for (  WSAttributeValue attribute : attributes) {
    if (attribute.isKey()) {
      uid=attribute.getStringValue();
      bld.setName(uid);
      bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValue()));
    }
    if (!attribute.isKey() && !attribute.isPassword()) {
      if (attribute.getValue() == null) {
        bld.addAttribute(AttributeBuilder.build(attribute.getName()));
      }
 else {
        bld.addAttribute(AttributeBuilder.build(attribute.getName(),attribute.getValue()));
      }
    }
  }
  if (uid == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  bld.setUid(new Uid(uid));
  bld.setObjectClass(ObjectClass.ACCOUNT);
  return bld;
}"
61267,"/** 
 * {@inheritDoc}
 */
@Override public void executeQuery(ObjectClass objClass,Operand query,ResultsHandler handler,OperationOptions options){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (handler == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    List<WSUser> resultSet=provisioning.query(query);
    Iterator i=resultSet.iterator();
    WSUser user=null;
    boolean handle=true;
    while (i.hasNext() && handle) {
      user=(WSUser)i.next();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + user.getAccountid());
      }
      handle=handler.handle(buildConnectorObject(user.getAttributes()).build());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + handle);
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void executeQuery(ObjectClass objClass,Operand query,ResultsHandler handler,OperationOptions options){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (handler == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Provisioning provisioning=connection.getProvisioning();
  if (provisioning == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    List<WSUser> resultSet=provisioning.query(query);
    if (resultSet == null)     return;
    Iterator i=resultSet.iterator();
    WSUser user=null;
    boolean handle=true;
    while (i.hasNext() && handle) {
      user=(WSUser)i.next();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + user.getAccountid());
      }
      handle=handler.handle(buildConnectorObject(user.getAttributes()).build());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + handle);
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(e);
  }
}"
61268,"/** 
 * Seraches for user accounts.
 */
@Test public void search(){
  final List<ConnectorObject> results=new ArrayList<ConnectorObject>();
  ResultsHandler resultsHandler=new ResultsHandler(){
    @Override public boolean handle(    ConnectorObject obj){
      results.add(obj);
      return true;
    }
  }
;
  Filter usernameFilter=FilterBuilder.startsWith(AttributeBuilder.build(Name.NAME,""String_Node_Str""));
  Filter nameFilter=FilterBuilder.equalTo(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Filter surnameFilter=FilterBuilder.equalTo(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Filter filter=FilterBuilder.or(usernameFilter,FilterBuilder.and(nameFilter,surnameFilter));
  connector.search(ObjectClass.ACCOUNT,filter,resultsHandler,null);
  assertFalse(results.isEmpty());
  if (log.isDebugEnabled()) {
    for (    ConnectorObject obj : results) {
      log.debug(""String_Node_Str"" + obj.getName() + ""String_Node_Str""+ obj.getUid());
    }
  }
}","/** 
 * Seraches for user accounts.
 */
@Test public void search(){
  final List<ConnectorObject> results=new ArrayList<ConnectorObject>();
  ResultsHandler resultsHandler=new ResultsHandler(){
    @Override public boolean handle(    ConnectorObject obj){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + obj);
      }
      results.add(obj);
      return true;
    }
  }
;
  Filter usernameFilter=FilterBuilder.startsWith(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Filter nameFilter=FilterBuilder.equalTo(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Filter surnameFilter=FilterBuilder.equalTo(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Filter filter=FilterBuilder.or(usernameFilter,FilterBuilder.and(nameFilter,surnameFilter));
  connector.search(ObjectClass.ACCOUNT,filter,resultsHandler,null);
  assertFalse(results.isEmpty());
  if (log.isDebugEnabled()) {
    for (    ConnectorObject obj : results) {
      log.debug(""String_Node_Str"" + obj.getName() + ""String_Node_Str""+ obj.getUid());
    }
  }
}"
61269,"@Override public boolean handle(ConnectorObject obj){
  results.add(obj);
  return true;
}","@Override public boolean handle(ConnectorObject obj){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + obj);
  }
  results.add(obj);
  return true;
}"
61270,"@Override public String toString(){
  StringBuffer str=new StringBuffer();
  if (not)   str.append(""String_Node_Str"");
  if (logical && operands != null) {
    str.append(""String_Node_Str"" + this.op.toString());
    for (    Operand o : operands)     str.append(o.toString());
    str.append(""String_Node_Str"");
  }
 else   str.append(""String_Node_Str"" + getName() + ""String_Node_Str""+ op.toString()+ ""String_Node_Str""+ getValue().toString()+ ""String_Node_Str"");
  if (not)   str.append(""String_Node_Str"");
  return str.toString();
}","@Override public String toString(){
  if (Operator.STARTS.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (Operator.ENDS.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (Operator.CONTAINS.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (Operator.GT.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (Operator.LT.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (Operator.EQ.equals(op)) {
    return (not ? ""String_Node_Str"" : ""String_Node_Str"") + getName() + ""String_Node_Str""+ getValue()+ ""String_Node_Str"";
  }
  if (operands == null)   return null;
  StringBuilder queryBuilder=new StringBuilder();
  for (  Operand operand : operands) {
    if (queryBuilder.length() > 0)     queryBuilder.append(""String_Node_Str"" + op.toString() + ""String_Node_Str"");
    queryBuilder.append(operand.toString());
  }
  if (not)   return ""String_Node_Str"" + queryBuilder + ""String_Node_Str"";
  if (operands.size() > 1)   return ""String_Node_Str"" + queryBuilder + ""String_Node_Str"";
  return queryBuilder.toString();
}"
61271,"@Override public final void contextInitialized(final ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  for (  ConnectorInstance instance : instances) {
    try {
      registerConnectorFacade(instance);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"" + instance,e);
    }
  }
}","@Override public final void contextInitialized(final ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  for (  ConnectorInstance instance : instances) {
    try {
      registerConnector(instance);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"" + instance,e);
    }
  }
}"
61272,"@Override public final ConnectorInstance save(final ConnectorInstance connector){
  ConnectorInstance actual=entityManager.merge(connector);
  try {
    ConnectorInstanceLoader.registerConnectorFacade(actual);
  }
 catch (  NotFoundException e) {
    LOG.error(""String_Node_Str"" + actual,e);
  }
  return actual;
}","@Override public final ConnectorInstance save(final ConnectorInstance connector){
  ConnectorInstance actual=entityManager.merge(connector);
  try {
    ConnectorInstanceLoader.registerConnector(actual);
  }
 catch (  NotFoundException e) {
    LOG.error(""String_Node_Str"" + actual,e);
  }
  return actual;
}"
61273,"@Override public final void delete(final Long id){
  entityManager.remove(find(id));
  ConnectorInstanceLoader.removeConnectorFacade(id.toString());
}","@Override public final void delete(final Long id){
  entityManager.remove(find(id));
  ConnectorInstanceLoader.removeConnector(id.toString());
}"
61274,"private List<Long> getAncestors(SyncopeRole role,List<Long> ancestors){
  ancestors.add(role.getId());
  if (role.getParent() != null && role.isInheritAttributes()) {
    return getAncestors(role.getParent(),ancestors);
  }
  return ancestors;
}","private List<Long> getAncestors(final SyncopeRole role,final List<Long> ancestors){
  ancestors.add(role.getId());
  if (role.getParent() != null && role.isInheritAttributes()) {
    return getAncestors(role.getParent(),ancestors);
  }
  return ancestors;
}"
61275,"@Override @Transactional(readOnly=true) public List<RoleAttribute> findInheritedAttributes(SyncopeRole role){
  if (role.getParent() == null) {
    return Collections.EMPTY_LIST;
  }
  List<Long> ancestors=getAncestors(role.getParent(),new ArrayList<Long>());
  if (ancestors == null || ancestors.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  StringBuilder queryExp=new StringBuilder();
  queryExp.append(""String_Node_Str"" + ""String_Node_Str"");
  queryExp.append(ancestors.get(0));
  if (ancestors.size() > 1) {
    for (int i=1; i < ancestors.size(); i++) {
      queryExp.append(""String_Node_Str"");
      queryExp.append(ancestors.get(i));
      queryExp.append(""String_Node_Str"");
    }
  }
  queryExp.append(""String_Node_Str"");
  Query query=entityManager.createQuery(queryExp.toString());
  return query.getResultList();
}","@Override @Transactional(readOnly=true) public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role){
  if (role.getParent() == null) {
    return Collections.EMPTY_LIST;
  }
  List<Long> ancestors=getAncestors(role.getParent(),new ArrayList<Long>());
  if (ancestors == null || ancestors.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  StringBuilder queryExp=new StringBuilder();
  queryExp.append(""String_Node_Str"" + ""String_Node_Str"");
  queryExp.append(ancestors.get(0));
  if (ancestors.size() > 1) {
    for (int i=1; i < ancestors.size(); i++) {
      queryExp.append(""String_Node_Str"");
      queryExp.append(ancestors.get(i));
      queryExp.append(""String_Node_Str"");
    }
  }
  queryExp.append(""String_Node_Str"");
  Query query=entityManager.createQuery(queryExp.toString());
  return query.getResultList();
}"
61276,"@Override @Transactional(readOnly=true) public List<RoleDerivedAttribute> findInheritedDerivedAttributes(SyncopeRole role){
  if (role.getParent() == null) {
    return Collections.EMPTY_LIST;
  }
  List<Long> ancestors=getAncestors(role.getParent(),new ArrayList<Long>());
  if (ancestors == null || ancestors.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  StringBuilder queryExp=new StringBuilder();
  queryExp.append(""String_Node_Str"" + ""String_Node_Str"");
  queryExp.append(ancestors.get(0));
  if (ancestors.size() > 1) {
    for (int i=1; i < ancestors.size(); i++) {
      queryExp.append(""String_Node_Str"");
      queryExp.append(ancestors.get(i));
      queryExp.append(""String_Node_Str"");
    }
  }
  queryExp.append(""String_Node_Str"");
  Query query=entityManager.createQuery(queryExp.toString());
  return query.getResultList();
}","@Override @Transactional(readOnly=true) public List<RoleDerivedAttribute> findInheritedDerivedAttributes(final SyncopeRole role){
  if (role.getParent() == null) {
    return Collections.EMPTY_LIST;
  }
  List<Long> ancestors=getAncestors(role.getParent(),new ArrayList<Long>());
  if (ancestors == null || ancestors.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  StringBuilder queryExp=new StringBuilder();
  queryExp.append(""String_Node_Str"" + ""String_Node_Str"");
  queryExp.append(ancestors.get(0));
  if (ancestors.size() > 1) {
    for (int i=1; i < ancestors.size(); i++) {
      queryExp.append(""String_Node_Str"");
      queryExp.append(ancestors.get(i));
      queryExp.append(""String_Node_Str"");
    }
  }
  queryExp.append(""String_Node_Str"");
  Query query=entityManager.createQuery(queryExp.toString());
  return query.getResultList();
}"
61277,"@Override @Transactional(readOnly=true) public SyncopeRole find(Long id){
  return entityManager.find(SyncopeRole.class,id);
}","@Override @Transactional(readOnly=true) public SyncopeRole find(final Long id){
  return entityManager.find(SyncopeRole.class,id);
}"
61278,"@Override public SyncopeRole save(SyncopeRole syncopeRole){
  return entityManager.merge(syncopeRole);
}","@Override public SyncopeRole save(final SyncopeRole syncopeRole){
  return entityManager.merge(syncopeRole);
}"
61279,"@Override @Transactional(readOnly=true) public List<SyncopeRole> findChildren(Long roleId){
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",roleId);
  return query.getResultList();
}","@Override @Transactional(readOnly=true) public List<SyncopeRole> findChildren(final Long roleId){
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",roleId);
  return query.getResultList();
}"
61280,"@Override public void delete(Long id){
  SyncopeRole role=find(id);
  if (id == null) {
    return;
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",id);
  List<SyncopeRole> childrenRoles=query.getResultList();
  for (  SyncopeRole child : childrenRoles) {
    delete(child.getId());
  }
  for (  Membership membership : role.getMemberships()) {
    membership.setSyncopeRole(null);
    membership.getSyncopeUser().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  role.setMemberships(Collections.EMPTY_LIST);
  for (  Entitlement entitlement : role.getEntitlements()) {
    entitlement.removeRole(role);
  }
  role.setEntitlements(Collections.EMPTY_SET);
  role.setParent(null);
  entityManager.remove(role);
}","@Override public void delete(final Long id){
  SyncopeRole role=find(id);
  if (id == null) {
    return;
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",id);
  List<SyncopeRole> childrenRoles=query.getResultList();
  for (  SyncopeRole child : childrenRoles) {
    delete(child.getId());
  }
  for (  Membership membership : role.getMemberships()) {
    membership.setSyncopeRole(null);
    membership.getSyncopeUser().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  role.setMemberships(Collections.EMPTY_LIST);
  for (  Entitlement entitlement : role.getEntitlements()) {
    entitlement.removeRole(role);
  }
  role.setEntitlements(Collections.EMPTY_SET);
  role.setParent(null);
  entityManager.remove(role);
}"
61281,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(HttpServletResponse response,@RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    throw new NotFoundException(resourceTO.getName());
  }
  ResourceDataBinder binder=new ResourceDataBinder(schemaDAO,connectorInstanceDAO);
  TargetResource actual=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    List<SchemaMapping> mappings=resource.getMappings();
    for (    SchemaMapping mapping : mappings) {
      mapping.setResource(null);
      schemaDAO.removeMapping(mapping.getId());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    resource=binder.getResource(resource,resourceTO);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getName());
    }
    actual=resourceDAO.save(resource);
    if (actual == null) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"");
      }
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
      throw ex;
    }
  }
 catch (  SyncopeClientException ex) {
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",t);
    }
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(actual);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(HttpServletResponse response,@RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  TargetResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    throw new NotFoundException(resourceTO.getName());
  }
  ResourceDataBinder binder=new ResourceDataBinder(schemaDAO,connectorInstanceDAO);
  TargetResource actual;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    List<SchemaMapping> mappings=resource.getMappings();
    for (    SchemaMapping mapping : mappings) {
      mapping.setResource(null);
      schemaDAO.removeMapping(mapping.getId());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    resource=binder.getResource(resource,resourceTO);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getName());
    }
    actual=resourceDAO.save(resource);
    if (actual == null) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"");
      }
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
      throw ex;
    }
  }
 catch (  SyncopeClientException ex) {
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",t);
    }
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    throw compositeErrorException;
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(actual);
}"
61282,"public TargetResource getResource(TargetResource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectorInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  resource.setConnector(connector);
  connector.addResource(resource);
  resource.setForceMandatoryConstraint(resourceTO.isForceMandatoryConstraint());
  return resource;
}","public TargetResource getResource(TargetResource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectorInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setConnector(connector);
  connector.addResource(resource);
  resource.setForceMandatoryConstraint(resourceTO.isForceMandatoryConstraint());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  return resource;
}"
61283,"@Override public void delete(String name){
  Resource resource=find(name);
  Set<SchemaMapping> mappings=resource.getMappings();
  if (mappings != null) {
    for (    SchemaMapping mapping : mappings) {
      mapping.setResource(null);
      schemaMappingDAO.delete(mapping.getId());
    }
  }
  resource.setMappings(null);
  Set<SyncopeUser> users=resource.getUsers();
  if (users != null && !users.isEmpty()) {
    for (    SyncopeUser user : users) {
      user.removeResource(resource);
    }
  }
  resource.setUsers(null);
  Set<SyncopeRole> roles=resource.getRoles();
  if (roles != null && !roles.isEmpty()) {
    for (    SyncopeRole role : roles) {
      role.removeResource(resource);
    }
  }
  resource.setRoles(null);
  ConnectorInstance connector=resource.getConnector();
  Set<Resource> resources=null;
  if (connector != null) {
    resources=connector.getResources();
  }
  if (resources != null && !resources.isEmpty()) {
    resources.remove(resource);
  }
  resource.setConnector(null);
  entityManager.remove(resource);
}","@Override public void delete(String name){
  Resource resource=find(name);
  if (resource == null)   return;
  Set<SchemaMapping> mappings=resource.getMappings();
  if (mappings != null) {
    for (    SchemaMapping mapping : mappings) {
      mapping.setResource(null);
      schemaMappingDAO.delete(mapping.getId());
    }
  }
  resource.setMappings(null);
  Set<SyncopeUser> users=resource.getUsers();
  if (users != null && !users.isEmpty()) {
    for (    SyncopeUser user : users) {
      user.removeResource(resource);
    }
  }
  resource.setUsers(null);
  Set<SyncopeRole> roles=resource.getRoles();
  if (roles != null && !roles.isEmpty()) {
    for (    SyncopeRole role : roles) {
      role.removeResource(resource);
    }
  }
  resource.setRoles(null);
  ConnectorInstance connector=resource.getConnector();
  Set<Resource> resources=null;
  if (connector != null) {
    resources=connector.getResources();
  }
  if (resources != null && !resources.isEmpty()) {
    resources.remove(resource);
  }
  resource.setConnector(null);
  entityManager.remove(resource);
}"
61284,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO verifyToken(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_VERIFY_TOKEN,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())));
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO verifyToken(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_VERIFY_TOKEN,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}"
61285,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO read(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  return userDataBinder.getUserTO(user);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO read(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  return userDataBinder.getUserTO(user,userWorkflow);
}"
61286,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody UserMod userMod,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws NotFoundException, PropagationException, WorkflowException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userMod);
  }
  SyncopeUser syncopeUser=syncopeUserDAO.find(userMod.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userMod.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userMod.getId()));
  }
  syncopeUser=doExecuteAction(Constants.ACTION_UPDATE,userDataBinder.getUserTO(syncopeUser),null);
  ResourceOperations resourceOperations=userDataBinder.updateSyncopeUser(syncopeUser,userMod);
  syncopeUser=syncopeUserDAO.save(syncopeUser);
  Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
  if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
    log.debug(""String_Node_Str"" + syncResourceNames);
  }
  Set<String> propagatedResources=propagationManager.update(syncopeUser,resourceOperations,syncResourceNames);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + propagatedResources);
  }
  return userDataBinder.getUserTO(syncopeUser);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody UserMod userMod,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws NotFoundException, PropagationException, WorkflowException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userMod);
  }
  SyncopeUser syncopeUser=syncopeUserDAO.find(userMod.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userMod.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userMod.getId()));
  }
  syncopeUser=doExecuteAction(Constants.ACTION_UPDATE,userDataBinder.getUserTO(syncopeUser,userWorkflow),null);
  ResourceOperations resourceOperations=userDataBinder.updateSyncopeUser(syncopeUser,userMod);
  syncopeUser=syncopeUserDAO.save(syncopeUser);
  Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
  if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
    log.debug(""String_Node_Str"" + syncResourceNames);
  }
  Set<String> propagatedResources=propagationManager.update(syncopeUser,resourceOperations,syncResourceNames);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + propagatedResources);
  }
  return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61287,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTOs list(){
  List<SyncopeUser> users=syncopeUserDAO.findAll();
  List<UserTO> userTOs=new ArrayList<UserTO>(users.size());
  for (  SyncopeUser user : users) {
    userTOs.add(userDataBinder.getUserTO(user));
  }
  UserTOs result=new UserTOs();
  result.setUsers(userTOs);
  return result;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTOs list(){
  List<SyncopeUser> users=syncopeUserDAO.findAll();
  List<UserTO> userTOs=new ArrayList<UserTO>(users.size());
  for (  SyncopeUser user : users) {
    userTOs.add(userDataBinder.getUserTO(user,userWorkflow));
  }
  UserTOs result=new UserTOs();
  result.setUsers(userTOs);
  return result;
}"
61288,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTOs search(@RequestBody NodeSearchCondition searchCondition) throws InvalidSearchConditionException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + searchCondition);
  }
  if (!searchCondition.checkValidity()) {
    log.error(""String_Node_Str"" + searchCondition);
    throw new InvalidSearchConditionException();
  }
  List<SyncopeUser> matchingUsers=syncopeUserDAO.search(searchCondition);
  UserTOs result=new UserTOs();
  for (  SyncopeUser user : matchingUsers) {
    result.addUser(userDataBinder.getUserTO(user));
  }
  return result;
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTOs search(@RequestBody NodeSearchCondition searchCondition) throws InvalidSearchConditionException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + searchCondition);
  }
  if (!searchCondition.checkValidity()) {
    log.error(""String_Node_Str"" + searchCondition);
    throw new InvalidSearchConditionException();
  }
  List<SyncopeUser> matchingUsers=syncopeUserDAO.search(searchCondition);
  UserTOs result=new UserTOs();
  for (  SyncopeUser user : matchingUsers) {
    result.addUser(userDataBinder.getUserTO(user,userWorkflow));
  }
  return result;
}"
61289,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO generateToken(@PathVariable(""String_Node_Str"") Long userId) throws WorkflowException, NotFoundException {
  UserTO userTO=new UserTO();
  userTO.setId(userId);
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_GENERATE_TOKEN,userTO,null));
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO generateToken(@PathVariable(""String_Node_Str"") Long userId) throws WorkflowException, NotFoundException {
  UserTO userTO=new UserTO();
  userTO.setId(userId);
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_GENERATE_TOKEN,userTO,null),userWorkflow);
}"
61290,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_ACTIVATE,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())));
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_ACTIVATE,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}"
61291,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      UserMod overwriteMod=userTO.buildUserMod();
    overwriteMod.setId(wie.getSyncopeUserId());
  return update(overwriteMod,syncRoles,syncResources);
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      UserMod overwriteMod=userTO.buildUserMod();
    overwriteMod.setId(wie.getSyncopeUserId());
  return update(overwriteMod,syncRoles,syncResources);
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61292,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeAction(HttpServletResponse response,@RequestBody UserTO userTO,@PathVariable(value=""String_Node_Str"") String actionName) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(actionName,userTO,null));
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeAction(HttpServletResponse response,@RequestBody UserTO userTO,@PathVariable(value=""String_Node_Str"") String actionName) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(actionName,userTO,null),userWorkflow);
}"
61293,"public UserTO getUserTO(SyncopeUser user){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setCreationTime(user.getCreationTime());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  userTO=(UserTO)fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getResources());
  MembershipTO membershipTO=new MembershipTO();
  for (  Membership membership : user.getMemberships()) {
    membershipTO.setId(membership.getId());
    membershipTO.setRole(membership.getSyncopeRole().getId());
    membershipTO=(MembershipTO)fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}","public UserTO getUserTO(SyncopeUser user,Workflow userWorkflow){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setCreationTime(user.getCreationTime());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  String status=null;
  try {
    List<Step> currentSteps=userWorkflow.getCurrentSteps(user.getWorkflowEntryId());
    if (currentSteps != null && !currentSteps.isEmpty()) {
      status=currentSteps.iterator().next().getStatus();
    }
 else {
      log.error(""String_Node_Str"" + user);
    }
  }
 catch (  EntityNotFoundException e) {
    log.error(""String_Node_Str"" + user.getWorkflowEntryId());
  }
  userTO.setStatus(status);
  userTO=(UserTO)fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getResources());
  MembershipTO membershipTO=new MembershipTO();
  for (  Membership membership : user.getMemberships()) {
    membershipTO.setId(membership.getId());
    membershipTO.setRole(membership.getSyncopeRole().getId());
    membershipTO=(MembershipTO)fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}"
61294,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  userTO.setId(0);
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
    workflowId=wie.getWorkflowId();
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      doExecuteAction(Constants.ACTION_RESET,wie.getSyncopeUserId(),null);
    }
  userTO.setId(wie.getSyncopeUserId());
break;
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
userDataBinder.checkUniqueness(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  userTO.setId(0);
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
    workflowId=wie.getWorkflowId();
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      doExecuteAction(Constants.ACTION_RESET,wie.getSyncopeUserId(),Collections.singletonMap(Constants.USER_TO,(Object)userTO));
    }
  userTO.setId(wie.getSyncopeUserId());
break;
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
userDataBinder.checkUniqueness(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61295,"public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeUser syncopeUser=null;
  if (userTO.getId() == 0) {
    syncopeUser=new SyncopeUser();
  }
 else {
    syncopeUser=syncopeUserDAO.find(userTO.getId());
    if (syncopeUser == null) {
      log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
      throw new NotFoundException(String.valueOf(userTO.getId()));
    }
  }
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  if (!invalidPassword.getElements().isEmpty()) {
    scce.addException(invalidPassword);
  }
  syncopeUser=(SyncopeUser)fill(syncopeUser,userTO,AttributableUtil.USER,scce);
  SyncopeRole role=null;
  for (  MembershipTO membershipTO : userTO.getMemberships()) {
    role=syncopeRoleDAO.find(membershipTO.getRole());
    if (role == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + membershipTO.getRole());
      }
    }
 else {
      Membership membership=new Membership();
      membership.setSyncopeRole(role);
      membership.setSyncopeUser(syncopeUser);
      membership=(Membership)fill(membership,membershipTO,AttributableUtil.MEMBERSHIP,scce);
      syncopeUser.addMembership(membership);
    }
  }
  return syncopeUser;
}","public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  Set<Long> formerMembershipIds=Collections.EMPTY_SET;
  SyncopeUser syncopeUser=null;
  if (userTO.getId() == 0) {
    syncopeUser=new SyncopeUser();
  }
 else {
    syncopeUser=syncopeUserDAO.find(userTO.getId());
    if (syncopeUser == null) {
      log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
      throw new NotFoundException(String.valueOf(userTO.getId()));
    }
    formerMembershipIds=new HashSet<Long>();
    for (    Membership membership : syncopeUser.getMemberships()) {
      formerMembershipIds.add(membership.getId());
    }
  }
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  if (!invalidPassword.getElements().isEmpty()) {
    scce.addException(invalidPassword);
  }
  syncopeUser=(SyncopeUser)fill(syncopeUser,userTO,AttributableUtil.USER,scce);
  SyncopeRole role=null;
  for (  MembershipTO membershipTO : userTO.getMemberships()) {
    role=syncopeRoleDAO.find(membershipTO.getRole());
    if (role == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + membershipTO.getRole());
      }
    }
 else {
      Membership membership=null;
      if (syncopeUser.getId() != null) {
        membership=membershipDAO.find(syncopeUser,role);
      }
      if (membership == null) {
        membership=new Membership();
        membership.setSyncopeRole(role);
        membership.setSyncopeUser(syncopeUser);
        syncopeUser.addMembership(membership);
      }
 else {
        formerMembershipIds.remove(membership.getId());
      }
      membership=(Membership)fill(membership,membershipTO,AttributableUtil.MEMBERSHIP,scce);
    }
  }
  for (  Long membershipId : formerMembershipIds) {
    membershipDAO.delete(membershipId);
  }
  return syncopeUser;
}"
61296,"@Override @Transactional public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  SyncopeUser syncopeUser=(SyncopeUser)transientVars.get(Constants.SYNCOPE_USER);
  AttributeDAO attributeDAO=(AttributeDAO)context.getBean(""String_Node_Str"");
  for (  AbstractAttribute attribute : syncopeUser.getAttributes()) {
    attributeDAO.delete(attribute.getId(),UserAttribute.class);
  }
  syncopeUser.getAttributes().clear();
  DerivedAttributeDAO derivedAttributeDAO=(DerivedAttributeDAO)context.getBean(""String_Node_Str"");
  for (  AbstractDerivedAttribute derivedAttribute : syncopeUser.getDerivedAttributes()) {
    derivedAttributeDAO.delete(derivedAttribute.getId(),UserDerivedAttribute.class);
  }
  syncopeUser.getDerivedAttributes().clear();
  MembershipDAO membershipDAO=(MembershipDAO)context.getBean(""String_Node_Str"");
  for (  Membership membership : syncopeUser.getMemberships()) {
    membershipDAO.delete(membership.getId());
  }
  syncopeUser.getMemberships().clear();
  syncopeUser.setCreationTime(null);
  syncopeUser.setPassword(null);
  transientVars.put(Constants.SYNCOPE_USER,syncopeUser);
}","@Override @Transactional public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  SyncopeUser syncopeUser=(SyncopeUser)transientVars.get(Constants.SYNCOPE_USER);
  AttributeDAO attributeDAO=(AttributeDAO)context.getBean(""String_Node_Str"");
  for (  AbstractAttribute attribute : syncopeUser.getAttributes()) {
    attributeDAO.delete(attribute.getId(),UserAttribute.class);
  }
  syncopeUser.getAttributes().clear();
  DerivedAttributeDAO derivedAttributeDAO=(DerivedAttributeDAO)context.getBean(""String_Node_Str"");
  for (  AbstractDerivedAttribute derivedAttribute : syncopeUser.getDerivedAttributes()) {
    derivedAttributeDAO.delete(derivedAttribute.getId(),UserDerivedAttribute.class);
  }
  syncopeUser.getDerivedAttributes().clear();
  for (  Membership membership : syncopeUser.getMemberships()) {
    for (    AbstractAttribute attribute : membership.getAttributes()) {
      attributeDAO.delete(attribute.getId(),MembershipAttribute.class);
    }
    membership.getAttributes().clear();
    for (    AbstractDerivedAttribute derivedAttribute : membership.getDerivedAttributes()) {
      derivedAttributeDAO.delete(derivedAttribute.getId(),MembershipDerivedAttribute.class);
    }
    membership.getDerivedAttributes().clear();
  }
  syncopeUser.setCreationTime(null);
  syncopeUser.setPassword(null);
  transientVars.put(Constants.SYNCOPE_USER,syncopeUser);
}"
61297,"/** 
 * TODO: password policies
 * @param password
 */
public void setPassword(String password){
  try {
    KeyPair kp=AsymmetricCipher.generateKeyPair();
    this.password=AsymmetricCipher.encrypt(password.getBytes(),kp.getPublic());
    this.passwordKeyPair=AsymmetricCipher.serializeKeyPair(kp);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}","/** 
 * TODO: password policies
 * @param password
 */
public void setPassword(String password){
  if (password == null) {
    this.password=null;
    this.passwordKeyPair=null;
    return;
  }
  try {
    KeyPair kp=AsymmetricCipher.generateKeyPair();
    this.password=AsymmetricCipher.encrypt(password.getBytes(),kp.getPublic());
    this.passwordKeyPair=AsymmetricCipher.serializeKeyPair(kp);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}"
61298,"public String getPassword(){
  String result=null;
  try {
    KeyPair kp=AsymmetricCipher.deserializeKeyPair(passwordKeyPair);
    result=new String(AsymmetricCipher.decrypt(password,kp.getPrivate()));
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
  return result;
}","public String getPassword(){
  if (password == null || passwordKeyPair == null) {
    return null;
  }
  String result=null;
  try {
    KeyPair kp=AsymmetricCipher.deserializeKeyPair(passwordKeyPair);
    result=new String(AsymmetricCipher.decrypt(password,kp.getPrivate()));
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
  return result;
}"
61299,"@Override @Transactional public <T extends AbstractDerivedSchema>void delete(String name,Class<T> reference){
  T derivedSchema=find(name,reference);
  if (derivedSchema == null) {
    return;
  }
  for (  AbstractSchema schema : derivedSchema.getSchemas()) {
    schema.removeDerivedSchema(derivedSchema);
  }
  derivedSchema.setSchemas(Collections.EMPTY_SET);
  for (  AbstractDerivedAttribute derivedAttribute : derivedSchema.getDerivedAttributes()) {
    derivedAttribute.setDerivedSchema(null);
    derivedAttributeDAO.delete(derivedAttribute.getId(),derivedAttribute.getClass());
  }
  entityManager.remove(derivedSchema);
}","@Override @Transactional public <T extends AbstractDerivedSchema>void delete(String name,Class<T> reference){
  T derivedSchema=find(name,reference);
  if (derivedSchema == null) {
    return;
  }
  for (  AbstractSchema schema : derivedSchema.getSchemas()) {
    schema.removeDerivedSchema(derivedSchema);
  }
  derivedSchema.setSchemas(Collections.EMPTY_SET);
  for (  AbstractDerivedAttribute derivedAttribute : derivedSchema.getDerivedAttributes()) {
    derivedAttribute.setDerivedSchema(null);
    derivedAttributeDAO.delete(derivedAttribute.getId(),derivedAttribute.getClass());
  }
  derivedSchema.setDerivedAttributes(Collections.EMPTY_SET);
  entityManager.remove(derivedSchema);
}"
61300,"private Integer findWorkflowAction(Long workflowEntryId,String actionName){
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] actions=userWorkflow.getAvailableActions(workflowEntryId,null);
  Integer actionId=null;
  for (int i=0; i < actions.length && actionId == null; i++) {
    if (actionName.equals(workflowDescriptor.getAction(actions[i]).getName())) {
      actionId=actions[i];
    }
  }
  return actionId;
}","private Integer findWorkflowAction(Long workflowEntryId,String actionName){
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] actions=userWorkflow.getAvailableActions(workflowEntryId,null);
  Integer actionId=null;
  for (int i=0; i < actions.length && actionId == null; i++) {
    if (actionName.equals(workflowDescriptor.getAction(actions[i]).getName())) {
      actionId=actions[i];
    }
  }
  Map<Integer,ActionDescriptor> commonActions=workflowDescriptor.getCommonActions();
  for (  Integer actionNumber : commonActions.keySet()) {
    if (actionName.equals(commonActions.get(actionNumber).getName())) {
      actionId=actionNumber;
    }
  }
  return actionId;
}"
61301,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO verifyToken(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_VERIFY_TOKEN,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO verifyToken(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_VERIFY_TOKEN,userTO.getId(),Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}"
61302,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody UserMod userMod,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws NotFoundException, PropagationException, WorkflowException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userMod);
  }
  SyncopeUser syncopeUser=syncopeUserDAO.find(userMod.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userMod.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userMod.getId()));
  }
  syncopeUser=doExecuteAction(Constants.ACTION_UPDATE,userDataBinder.getUserTO(syncopeUser,userWorkflow),null);
  ResourceOperations resourceOperations=userDataBinder.updateSyncopeUser(syncopeUser,userMod);
  syncopeUser=syncopeUserDAO.save(syncopeUser);
  Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
  if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
    log.debug(""String_Node_Str"" + syncResourceNames);
  }
  Set<String> propagatedResources=propagationManager.update(syncopeUser,resourceOperations,syncResourceNames);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + propagatedResources);
  }
  return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody UserMod userMod,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws NotFoundException, PropagationException, WorkflowException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userMod);
  }
  SyncopeUser syncopeUser=syncopeUserDAO.find(userMod.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userMod.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userMod.getId()));
  }
  syncopeUser=doExecuteAction(Constants.ACTION_UPDATE,syncopeUser.getId(),null);
  ResourceOperations resourceOperations=userDataBinder.updateSyncopeUser(syncopeUser,userMod);
  syncopeUser=syncopeUserDAO.save(syncopeUser);
  userDataBinder.checkUniqueness(syncopeUser);
  Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
  if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
    log.debug(""String_Node_Str"" + syncResourceNames);
  }
  Set<String> propagatedResources=propagationManager.update(syncopeUser,resourceOperations,syncResourceNames);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + propagatedResources);
  }
  return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61303,"public SyncopeUser doExecuteAction(String actionName,UserTO userTO,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userTO.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userTO.getId()));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  Integer actionId=findWorkflowAction(syncopeUser.getWorkflowEntryId(),actionName);
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),actionId,inputs);
  return syncopeUserDAO.save(syncopeUser);
}","public SyncopeUser doExecuteAction(String actionName,Long userId,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userId);
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  Integer actionId=findWorkflowAction(syncopeUser.getWorkflowEntryId(),actionName);
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  try {
    userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),actionId,inputs);
  }
 catch (  InvalidActionException e) {
    throw new WorkflowException(e);
  }
  return syncopeUserDAO.save(syncopeUser);
}"
61304,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO generateToken(@PathVariable(""String_Node_Str"") Long userId) throws WorkflowException, NotFoundException {
  UserTO userTO=new UserTO();
  userTO.setId(userId);
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_GENERATE_TOKEN,userTO,null),userWorkflow);
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO generateToken(@PathVariable(""String_Node_Str"") Long userId) throws WorkflowException, NotFoundException {
  UserTO userTO=new UserTO();
  userTO.setId(userId);
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_GENERATE_TOKEN,userTO.getId(),null),userWorkflow);
}"
61305,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_ACTIVATE,userTO,Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody UserTO userTO) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(Constants.ACTION_ACTIVATE,userTO.getId(),Collections.singletonMap(Constants.TOKEN,(Object)userTO.getToken())),userWorkflow);
}"
61306,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowEntryId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      UserTO localUserTO=new UserTO();
      localUserTO.setId(wie.getSyncopeUserId());
      doExecuteAction(Constants.ACTION_RESET,localUserTO,null);
    }
  UserMod overwriteMod=userTO.buildUserMod();
overwriteMod.setId(wie.getSyncopeUserId());
return update(overwriteMod,syncRoles,syncResources);
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  userTO.setId(0);
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowEntryId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      doExecuteAction(Constants.ACTION_RESET,wie.getSyncopeUserId(),null);
    }
  userTO.setId(wie.getSyncopeUserId());
break;
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
userDataBinder.checkUniqueness(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61307,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeAction(HttpServletResponse response,@RequestBody UserTO userTO,@PathVariable(value=""String_Node_Str"") String actionName) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(actionName,userTO,null),userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeAction(HttpServletResponse response,@RequestBody UserTO userTO,@PathVariable(value=""String_Node_Str"") String actionName) throws WorkflowException, NotFoundException {
  return userDataBinder.getUserTO(doExecuteAction(actionName,userTO.getId(),null),userWorkflow);
}"
61308,"private Integer findWorkflowAction(Long workflowEntryId,String actionName){
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] actions=userWorkflow.getAvailableActions(workflowEntryId,null);
  Integer actionId=null;
  for (int i=0; i < actions.length && actionId == null; i++) {
    if (actionName.equals(workflowDescriptor.getAction(actions[i]).getName())) {
      actionId=actions[i];
    }
  }
  Map<Integer,ActionDescriptor> commonActions=workflowDescriptor.getCommonActions();
  for (  Integer actionNumber : commonActions.keySet()) {
    if (actionName.equals(commonActions.get(actionNumber).getName())) {
      actionId=actionNumber;
    }
  }
  return actionId;
}","private Integer findWorkflowAction(Long workflowId,String actionName){
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] actions=userWorkflow.getAvailableActions(workflowId,null);
  Integer actionId=null;
  for (int i=0; i < actions.length && actionId == null; i++) {
    if (actionName.equals(workflowDescriptor.getAction(actions[i]).getName())) {
      actionId=actions[i];
    }
  }
  Map<Integer,ActionDescriptor> commonActions=workflowDescriptor.getCommonActions();
  for (  Integer actionNumber : commonActions.keySet()) {
    if (actionName.equals(commonActions.get(actionNumber).getName())) {
      actionId=actionNumber;
    }
  }
  return actionId;
}"
61309,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public WorkflowActionsTO getActions(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  WorkflowActionsTO result=new WorkflowActionsTO();
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] availableActions=userWorkflow.getAvailableActions(user.getWorkflowEntryId(),Collections.EMPTY_MAP);
  for (int i=0; i < availableActions.length; i++) {
    result.addAction(workflowDescriptor.getAction(availableActions[i]).getName());
  }
  return result;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public WorkflowActionsTO getActions(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  WorkflowActionsTO result=new WorkflowActionsTO();
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] availableActions=userWorkflow.getAvailableActions(user.getWorkflowId(),Collections.EMPTY_MAP);
  for (int i=0; i < availableActions.length; i++) {
    result.addAction(workflowDescriptor.getAction(availableActions[i]).getName());
  }
  return result;
}"
61310,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView getStatus(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  List<Step> currentSteps=userWorkflow.getCurrentSteps(user.getWorkflowEntryId());
  if (currentSteps == null || currentSteps.isEmpty()) {
    return null;
  }
  ModelAndView mav=new ModelAndView();
  mav.addObject(currentSteps.iterator().next().getStatus());
  return mav;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public ModelAndView getStatus(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  List<Step> currentSteps=userWorkflow.getCurrentSteps(user.getWorkflowId());
  if (currentSteps == null || currentSteps.isEmpty()) {
    return null;
  }
  ModelAndView mav=new ModelAndView();
  mav.addObject(currentSteps.iterator().next().getStatus());
  return mav;
}"
61311,"@RequestMapping(method=RequestMethod.DELETE,value=""String_Node_Str"") public void delete(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
 else {
    if (workflowStore != null && user.getWorkflowEntryId() != null) {
      workflowStore.delete(user.getWorkflowEntryId());
    }
    syncopeUserDAO.delete(userId);
  }
}","@RequestMapping(method=RequestMethod.DELETE,value=""String_Node_Str"") public void delete(@PathVariable(""String_Node_Str"") Long userId) throws NotFoundException {
  SyncopeUser user=syncopeUserDAO.find(userId);
  if (user == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
 else {
    if (workflowStore != null && user.getWorkflowId() != null) {
      workflowStore.delete(user.getWorkflowId());
    }
    syncopeUserDAO.delete(userId);
  }
}"
61312,"public SyncopeUser doExecuteAction(String actionName,Long userId,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userId);
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  Integer actionId=findWorkflowAction(syncopeUser.getWorkflowEntryId(),actionName);
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  try {
    userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),actionId,inputs);
  }
 catch (  InvalidActionException e) {
    throw new WorkflowException(e);
  }
  return syncopeUserDAO.save(syncopeUser);
}","public SyncopeUser doExecuteAction(String actionName,Long userId,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userId);
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userId + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userId));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  Integer actionId=findWorkflowAction(syncopeUser.getWorkflowId(),actionName);
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  try {
    userWorkflow.doAction(syncopeUser.getWorkflowId(),actionId,inputs);
  }
 catch (  InvalidActionException e) {
    throw new WorkflowException(e);
  }
  return syncopeUserDAO.save(syncopeUser);
}"
61313,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  userTO.setId(0);
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowEntryId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      doExecuteAction(Constants.ACTION_RESET,wie.getSyncopeUserId(),null);
    }
  userTO.setId(wie.getSyncopeUserId());
break;
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
userDataBinder.checkUniqueness(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  userTO.setId(0);
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
    workflowId=wie.getWorkflowId();
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      doExecuteAction(Constants.ACTION_RESET,wie.getSyncopeUserId(),null);
    }
  userTO.setId(wie.getSyncopeUserId());
break;
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
userDataBinder.checkUniqueness(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61314,"public UserTO getUserTO(SyncopeUser user,Workflow userWorkflow){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setCreationTime(user.getCreationTime());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  String status=null;
  try {
    List<Step> currentSteps=userWorkflow.getCurrentSteps(user.getWorkflowEntryId());
    if (currentSteps != null && !currentSteps.isEmpty()) {
      status=currentSteps.iterator().next().getStatus();
    }
 else {
      log.error(""String_Node_Str"" + user);
    }
  }
 catch (  EntityNotFoundException e) {
    log.error(""String_Node_Str"" + user.getWorkflowEntryId());
  }
  userTO.setStatus(status);
  userTO=(UserTO)fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getResources());
  MembershipTO membershipTO=null;
  for (  Membership membership : user.getMemberships()) {
    membershipTO=new MembershipTO();
    membershipTO.setId(membership.getId());
    membershipTO.setRole(membership.getSyncopeRole().getId());
    membershipTO=(MembershipTO)fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}","public UserTO getUserTO(SyncopeUser user,Workflow userWorkflow){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setCreationTime(user.getCreationTime());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  String status=null;
  try {
    List<Step> currentSteps=userWorkflow.getCurrentSteps(user.getWorkflowId());
    if (currentSteps != null && !currentSteps.isEmpty()) {
      status=currentSteps.iterator().next().getStatus();
    }
 else {
      log.error(""String_Node_Str"" + user);
    }
  }
 catch (  EntityNotFoundException e) {
    log.error(""String_Node_Str"" + user.getWorkflowId());
  }
  userTO.setStatus(status);
  userTO=(UserTO)fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getResources());
  MembershipTO membershipTO=null;
  for (  Membership membership : user.getMemberships()) {
    membershipTO=new MembershipTO();
    membershipTO.setId(membership.getId());
    membershipTO.setRole(membership.getSyncopeRole().getId());
    membershipTO=(MembershipTO)fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}"
61315,"public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeUser syncopeUser=null;
  if (userTO.getId() == 0) {
    syncopeUser=new SyncopeUser();
  }
 else {
    syncopeUser=syncopeUserDAO.find(userTO.getId());
    if (syncopeUser == null) {
      log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
      throw new NotFoundException(String.valueOf(userTO.getId()));
    }
  }
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  if (!invalidPassword.getElements().isEmpty()) {
    scce.addException(invalidPassword);
  }
  syncopeUser=(SyncopeUser)fill(syncopeUser,userTO,AttributableUtil.USER,scce);
  SyncopeRole role=null;
  for (  MembershipTO membershipTO : userTO.getMemberships()) {
    role=syncopeRoleDAO.find(membershipTO.getRole());
    if (role == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + membershipTO.getRole());
      }
    }
 else {
      Membership membership=membershipDAO.find(syncopeUser,role);
      if (membership != null) {
        membershipDAO.delete(membership.getId());
      }
      membership=(Membership)fill(membership,membershipTO,AttributableUtil.MEMBERSHIP,scce);
      syncopeUser.addMembership(membership);
    }
  }
  return syncopeUser;
}","public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeUser syncopeUser=null;
  if (userTO.getId() == 0) {
    syncopeUser=new SyncopeUser();
  }
 else {
    syncopeUser=syncopeUserDAO.find(userTO.getId());
    if (syncopeUser == null) {
      log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
      throw new NotFoundException(String.valueOf(userTO.getId()));
    }
  }
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  if (!invalidPassword.getElements().isEmpty()) {
    scce.addException(invalidPassword);
  }
  syncopeUser=(SyncopeUser)fill(syncopeUser,userTO,AttributableUtil.USER,scce);
  SyncopeRole role=null;
  for (  MembershipTO membershipTO : userTO.getMemberships()) {
    role=syncopeRoleDAO.find(membershipTO.getRole());
    if (role == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + membershipTO.getRole());
      }
    }
 else {
      Membership membership=new Membership();
      membership.setSyncopeRole(role);
      membership.setSyncopeUser(syncopeUser);
      membership=(Membership)fill(membership,membershipTO,AttributableUtil.MEMBERSHIP,scce);
      syncopeUser.addMembership(membership);
    }
  }
  return syncopeUser;
}"
61316,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + exceptionOperation + ""String_Node_Str""+ ""String_Node_Str""+ syncopeUserId+ ""String_Node_Str""+ ""String_Node_Str""+ workflowEntryId+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + exceptionOperation + ""String_Node_Str""+ ""String_Node_Str""+ syncopeUserId+ ""String_Node_Str""+ ""String_Node_Str""+ workflowId+ ""String_Node_Str""+ ""String_Node_Str""+ workflowEntryId+ '}';
}"
61317,"/** 
 * Create a new user and start off the workflow.
 * @param userTO instance
 */
public void createUser(UserTO userTO){
  UserTO newUserTO;
  try {
    newUserTO=restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",userTO,UserTO.class);
    userTO.setId(newUserTO.getId());
    userTO.setCreationTime(newUserTO.getCreationTime());
    userTO.setToken(newUserTO.getToken());
    userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());
    newUserTO=restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",newUserTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    e.printStackTrace();
  }
}","/** 
 * Create a new user and start off the workflow.
 * @param userTO instance
 */
public void createUser(UserTO userTO){
  UserTO newUserTO;
  try {
    newUserTO=restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",userTO,UserTO.class);
    userTO.setId(newUserTO.getId());
    userTO.setToken(newUserTO.getToken());
    userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());
    newUserTO=restClient.getRestTemplate().postForObject(restClient.getBaseURL() + ""String_Node_Str"",newUserTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    e.printStackTrace();
  }
}"
61318,"/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  WebApplicationContext springContext=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  DataSource dataSource=(DataSource)springContext.getBean(""String_Node_Str"");
  DefaultDataTypeFactory dbUnitDataTypeFactory=(DefaultDataTypeFactory)springContext.getBean(""String_Node_Str"");
  Connection conn=DataSourceUtils.getConnection(dataSource);
  try {
    IDatabaseConnection dbUnitConn=new DatabaseConnection(conn);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(""String_Node_Str"",dbUnitDataTypeFactory);
    boolean existingData=false;
    IDataSet existingDataSet=dbUnitConn.createDataSet();
    for (ITableIterator itor=existingDataSet.iterator(); itor.next() && !existingData; ) {
      existingData=(itor.getTable().getRowCount() > 0);
    }
    if (existingData) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
      dataSetBuilder.setColumnSensing(true);
      IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
      DatabaseOperation.REFRESH.execute(dbUnitConn,dataSet);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
}","/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  WebApplicationContext springContext=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  DataSource dataSource=(DataSource)springContext.getBean(""String_Node_Str"");
  DefaultDataTypeFactory dbUnitDataTypeFactory=(DefaultDataTypeFactory)springContext.getBean(""String_Node_Str"");
  Connection conn=DataSourceUtils.getConnection(dataSource);
  try {
    IDatabaseConnection dbUnitConn=new DatabaseConnection(conn);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
    boolean existingData=false;
    IDataSet existingDataSet=dbUnitConn.createDataSet();
    for (ITableIterator itor=existingDataSet.iterator(); itor.next() && !existingData; ) {
      existingData=(itor.getTable().getRowCount() > 0);
    }
    if (existingData) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
      dataSetBuilder.setColumnSensing(true);
      IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
      DatabaseOperation.REFRESH.execute(dbUnitConn,dataSet);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
}"
61319,"@Before public void setUpTestDataWithinTransaction() throws Exception {
  Connection conn=DataSourceUtils.getConnection(dataSource);
  IDatabaseConnection dbUnitConn=new DatabaseConnection(conn);
  DatabaseConfig config=dbUnitConn.getConfig();
  config.setProperty(""String_Node_Str"",dbUnitDataTypeFactory);
  FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
  dataSetBuilder.setColumnSensing(true);
  IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
  try {
    DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn,dataSet);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
  if (log.isDebugEnabled()) {
    conn=DataSourceUtils.getConnection(dataSource);
    DatabaseMetaData dbm=conn.getMetaData();
    String[] types={""String_Node_Str""};
    ResultSet rs=dbm.getTables(null,null,""String_Node_Str"",types);
    while (rs.next()) {
      logTableContent(conn,rs.getString(""String_Node_Str""));
    }
    try {
      rs.close();
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}","@Before public void setUpTestDataWithinTransaction() throws Exception {
  Connection conn=DataSourceUtils.getConnection(dataSource);
  IDatabaseConnection dbUnitConn=new DatabaseConnection(conn);
  DatabaseConfig config=dbUnitConn.getConfig();
  config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
  FlatXmlDataSetBuilder dataSetBuilder=new FlatXmlDataSetBuilder();
  dataSetBuilder.setColumnSensing(true);
  IDataSet dataSet=dataSetBuilder.build(getClass().getResourceAsStream(""String_Node_Str""));
  try {
    DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn,dataSet);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
  if (log.isDebugEnabled()) {
    conn=DataSourceUtils.getConnection(dataSource);
    DatabaseMetaData dbm=conn.getMetaData();
    String[] types={""String_Node_Str""};
    ResultSet rs=dbm.getTables(null,null,""String_Node_Str"",types);
    while (rs.next()) {
      logTableContent(conn,rs.getString(""String_Node_Str""));
    }
    try {
      rs.close();
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}"
61320,"/** 
 * Create the user on every associated resource. It is possible to ask for a synchronous provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a synchronous resource.
 * @param user to be created.
 * @param syncResourceNames to ask for a synchronous or asynchronous provisioning.
 * @return a set of provisioned resources.
 * @throws PropagationException
 */
public Set<String> create(SyncopeUser user,Set<String> syncResourceNames) throws PropagationException {
  Set<TargetResource> resources=new HashSet<TargetResource>();
  for (  TargetResource resource : user.getTargetResources()) {
    resources.add(resource);
  }
  for (  Membership membership : user.getMemberships()) {
    resources.addAll(membership.getTargetResources());
  }
  ResourceOperations resourceOperations=new ResourceOperations();
  resourceOperations.set(Type.CREATE,resources);
  return provision(user,resourceOperations,syncResourceNames);
}","/** 
 * Create the user on every associated resource. It is possible to ask for a synchronous provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a synchronous resource.
 * @param user to be created.
 * @param syncResourceNames to ask for a synchronous or asynchronous provisioning.
 * @return a set of provisioned resources.
 * @throws PropagationException
 */
public Set<String> create(SyncopeUser user,Set<String> syncResourceNames) throws PropagationException {
  Set<TargetResource> resources=new HashSet<TargetResource>();
  for (  TargetResource resource : user.getTargetResources()) {
    resources.add(resource);
  }
  for (  Membership membership : user.getMemberships()) {
    resources.addAll(membership.getSyncopeRole().getTargetResources());
  }
  ResourceOperations resourceOperations=new ResourceOperations();
  resourceOperations.set(Type.CREATE,resources);
  return provision(user,resourceOperations,syncResourceNames);
}"
61321,"/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param type to be performed on the specified resource
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,TargetResource resource,Type type) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConnectorFacade connector=getConnectorFacade(connectorInstance.getId().toString());
  if (connector == null) {
    log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schema=null;
  UserAttribute userAttribute=null;
  SchemaType schemaType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    field=mapping.getField();
    schema=mapping.getUserSchema().getName();
    userAttribute=user.getAttribute(schema);
    values=null;
    try {
      schemaType=mapping.getUserSchema().getType();
      castToBeApplied=Class.forName(schemaType.getClassName());
    }
 catch (    ClassNotFoundException e) {
      castToBeApplied=String.class;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword()+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schema+ ""String_Node_Str""+ schemaType.getClassName());
    }
    objValues=new HashSet();
    if (userAttribute != null) {
      values=userAttribute.getAttributeValues();
      for (      UserAttributeValue value : values) {
        objValues.add(value.getValue());
      }
    }
    if (!objValues.isEmpty() && mapping.isAccountid()) {
      accountId=objValues.iterator().next().toString();
      attrs.add(new Name(accountId));
    }
    if (password != null && mapping.isPassword()) {
      attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
    }
    if (!mapping.isPassword() && !mapping.isAccountid() && !objValues.isEmpty()) {
      if (mapping.getUserSchema().isMultivalue()) {
        attrs.add(AttributeBuilder.build(field,objValues));
      }
 else {
        attrs.add(AttributeBuilder.build(field,castToBeApplied.cast(objValues.iterator().next())));
      }
    }
  }
  Uid userUid=null;
switch (type) {
case CREATE:
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  break;
case UPDATE:
userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
break;
case DELETE:
connector.delete(ObjectClass.ACCOUNT,new Uid(accountId),null);
break;
}
if (userUid == null && type != Type.DELETE) {
log.error(""String_Node_Str"" + resource);
throw new IllegalStateException(""String_Node_Str"");
}
}","/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param type to be performed on the specified resource
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,TargetResource resource,Type type) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConnectorFacade connector=getConnectorFacade(connectorInstance.getId().toString());
  if (connector == null) {
    log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  String password=user.getPassword();
  List<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  Class castToBeApplied=null;
  String accountId=null;
  String field=null;
  Set objValues=null;
  String schema=null;
  UserAttribute userAttribute=null;
  SchemaType schemaType=null;
  List<UserAttributeValue> values=null;
  for (  SchemaMapping mapping : mappings) {
    try {
      field=mapping.getField();
      schema=mapping.getUserSchema().getName();
      schemaType=mapping.getUserSchema().getType();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword()+ ""String_Node_Str""+ mapping.isNullable()+ ""String_Node_Str""+ schema+ ""String_Node_Str""+ schemaType.getClassName());
      }
      userAttribute=user.getAttribute(schema);
      if (userAttribute == null) {
        throw new Exception(""String_Node_Str"" + userAttribute);
      }
      objValues=new HashSet();
      values=userAttribute.getAttributeValues();
      for (      UserAttributeValue value : values) {
        castToBeApplied=Class.forName(schemaType.getClassName());
        if (!FrameworkUtil.isSupportedAttributeType(castToBeApplied)) {
          castToBeApplied=String.class;
          objValues.add(value.getValueAsString());
        }
 else {
          objValues.add(value.getValue());
        }
      }
      if (mapping.isAccountid()) {
        accountId=objValues.iterator().next().toString();
        attrs.add(new Name(accountId));
      }
      if (mapping.isPassword()) {
        attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
      }
      Object objValue=null;
      if (!objValues.isEmpty())       objValue=objValues.iterator().next();
      if (!mapping.isPassword() && !mapping.isAccountid()) {
        if (mapping.getUserSchema().isMultivalue()) {
          attrs.add(AttributeBuilder.build(field,objValues));
        }
 else {
          attrs.add(AttributeBuilder.build(field,castToBeApplied.cast(objValue)));
        }
      }
    }
 catch (    ClassNotFoundException e) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"" + schemaType.getClassName(),e);
      }
    }
catch (    Throwable t) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"" + schema + ""String_Node_Str"",t);
      }
    }
  }
  Uid userUid=null;
switch (type) {
case CREATE:
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  break;
case UPDATE:
userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
break;
case DELETE:
connector.delete(ObjectClass.ACCOUNT,new Uid(accountId),null);
break;
}
if (userUid == null && type != Type.DELETE) {
log.error(""String_Node_Str"" + resource);
throw new IllegalStateException(""String_Node_Str"");
}
}"
61322,"/** 
 * Creates user account.
 */
@Test public void create(){
  Set<Attribute> attrs=new HashSet<Attribute>();
  attrs.add(new Name(""String_Node_Str""));
  attrs.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",true));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Uid userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  assertNotNull(userUid);
  assertEquals(""String_Node_Str"",userUid.getUidValue());
}","/** 
 * Creates user account.
 */
@Test public void create(){
  Set<Attribute> attrs=new HashSet<Attribute>();
  attrs.add(new Name(""String_Node_Str""));
  attrs.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  attrs.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str""));
  Uid userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  assertNotNull(userUid);
  assertEquals(""String_Node_Str"",userUid.getUidValue());
}"
61323,"public void setKey(boolean key){
  this.key=key;
  this.nullable=false;
}","public void setKey(boolean key){
  this.key=key;
  if (key)   this.nullable=false;
}"
61324,"/** 
 * Returns the schema.
 * @return a set of attributes.
 */
@Override public List<WSAttribute> schema(){
  List<WSAttribute> attrs=new ArrayList<WSAttribute>();
  WSAttribute attr=null;
  attr=new WSAttribute(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"");
  attr.setNullable(false);
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"");
  attr.setKey(true);
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"");
  attr.setPassword(true);
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"",""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"",""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"",""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute(""String_Node_Str"",""String_Node_Str"");
  attrs.add(attr);
  return attrs;
}","/** 
 * Returns the schema.
 * @return a set of attributes.
 */
@Override public List<WSAttribute> schema(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  List<WSAttribute> attrs=new ArrayList<WSAttribute>();
  WSAttribute attr=null;
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(false);
  attr.setPassword(false);
  attr.setKey(true);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(false);
  attr.setPassword(true);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(false);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  attr=new WSAttribute();
  attr.setName(""String_Node_Str"");
  attr.setNullable(true);
  attr.setPassword(false);
  attr.setKey(false);
  attr.setType(""String_Node_Str"");
  attrs.add(attr);
  return attrs;
}"
61325,"@Test public void create(){
  Throwable t=null;
  try {
    WSAttributeValue uid=new WSAttributeValue();
    uid.setName(""String_Node_Str"");
    uid.setValue(""String_Node_Str"");
    uid.setKey(true);
    WSAttributeValue password=new WSAttributeValue();
    password.setName(""String_Node_Str"");
    password.setValue(""String_Node_Str"");
    password.setPassword(true);
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValue(""String_Node_Str"");
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValue(""String_Node_Str"");
    WSAttributeValue privacy=new WSAttributeValue();
    privacy.setName(""String_Node_Str"");
    privacy.setValue(Boolean.TRUE);
    WSAttributeValue birthday=new WSAttributeValue();
    birthday.setName(""String_Node_Str"");
    birthday.setValue(""String_Node_Str"");
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(uid);
    attrs.add(password);
    attrs.add(name);
    attrs.add(surname);
    attrs.add(privacy);
    attrs.add(birthday);
    provisioning.create(attrs);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}","@Test public void create(){
  Throwable t=null;
  try {
    WSAttributeValue uid=new WSAttributeValue();
    uid.setName(""String_Node_Str"");
    uid.setValue(""String_Node_Str"");
    uid.setKey(true);
    WSAttributeValue password=new WSAttributeValue();
    password.setName(""String_Node_Str"");
    password.setValue(""String_Node_Str"");
    password.setPassword(true);
    WSAttributeValue type=new WSAttributeValue();
    type.setName(""String_Node_Str"");
    type.setValue(""String_Node_Str"");
    WSAttributeValue name=new WSAttributeValue();
    name.setName(""String_Node_Str"");
    name.setValue(""String_Node_Str"");
    WSAttributeValue surname=new WSAttributeValue();
    surname.setName(""String_Node_Str"");
    surname.setValue(""String_Node_Str"");
    WSAttributeValue birthdate=new WSAttributeValue();
    birthdate.setName(""String_Node_Str"");
    birthdate.setValue(""String_Node_Str"");
    List<WSAttributeValue> attrs=new ArrayList<WSAttributeValue>();
    attrs.add(uid);
    attrs.add(password);
    attrs.add(type);
    attrs.add(name);
    attrs.add(surname);
    attrs.add(birthdate);
    provisioning.create(attrs);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
    t=e;
  }
  assertNull(t);
}"
61326,"public void setType(SchemaType type){
  this.type=type;
}","public void setType(SchemaValueType type){
  this.type=type;
}"
61327,"public SchemaType getType(){
  return type;
}","public SchemaValueType getType(){
  return type;
}"
61328,"public Set<Membership> getMemberships(){
  return memberships;
}","public List<Membership> getMemberships(){
  return memberships;
}"
61329,"public void setMemberships(Set<Membership> memberships){
  this.memberships=memberships;
}","public void setMemberships(List<Membership> memberships){
  this.memberships=memberships;
}"
61330,"public SyncopeRole(){
  memberships=new HashSet<Membership>();
  entitlements=new HashSet<Entitlement>();
  attributes=new HashSet<RoleAttribute>();
  derivedAttributes=new HashSet<RoleDerivedAttribute>();
}","public SyncopeRole(){
  memberships=new ArrayList<Membership>();
  entitlements=new HashSet<Entitlement>();
  attributes=new HashSet<RoleAttribute>();
  derivedAttributes=new HashSet<RoleDerivedAttribute>();
}"
61331,"public Set<Membership> getMemberships(){
  return memberships;
}","public List<Membership> getMemberships(){
  return memberships;
}"
61332,"public void setMemberships(Set<Membership> memberships){
  this.memberships=memberships;
}","public void setMemberships(List<Membership> memberships){
  this.memberships=memberships;
}"
61333,"public SyncopeUser(){
  memberships=new HashSet<Membership>();
  attributes=new HashSet<UserAttribute>();
  derivedAttributes=new HashSet<UserDerivedAttribute>();
}","public SyncopeUser(){
  memberships=new ArrayList<Membership>();
  attributes=new HashSet<UserAttribute>();
  derivedAttributes=new HashSet<UserDerivedAttribute>();
}"
61334,"@Override @Transactional public void delete(Long id){
  Membership membership=find(id);
  if (id == null) {
    return;
  }
  membership.getSyncopeUser().removeMembership(membership);
  membership.setSyncopeUser(null);
  membership.getSyncopeRole().removeMembership(membership);
  membership.setSyncopeRole(null);
  entityManager.remove(membership);
}","@Override @Transactional public void delete(Long id){
  Membership membership=find(id);
  if (membership == null) {
    return;
  }
  membership.getSyncopeUser().removeMembership(membership);
  membership.setSyncopeUser(null);
  membership.getSyncopeRole().removeMembership(membership);
  membership.setSyncopeRole(null);
  entityManager.remove(membership);
}"
61335,"@Override @Transactional public void delete(Long id){
  SyncopeRole role=find(id);
  if (id == null) {
    return;
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",id);
  List<SyncopeRole> childrenRoles=query.getResultList();
  for (  SyncopeRole child : childrenRoles) {
    delete(child.getId());
  }
  for (  Membership membership : role.getMemberships()) {
    membership.setSyncopeRole(null);
    membership.getSyncopeUser().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  role.setMemberships(Collections.EMPTY_SET);
  for (  Entitlement entitlement : role.getEntitlements()) {
    entitlement.removeRole(role);
  }
  role.setEntitlements(Collections.EMPTY_SET);
  role.setParent(null);
  entityManager.remove(role);
}","@Override @Transactional public void delete(Long id){
  SyncopeRole role=find(id);
  if (id == null) {
    return;
  }
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",id);
  List<SyncopeRole> childrenRoles=query.getResultList();
  for (  SyncopeRole child : childrenRoles) {
    delete(child.getId());
  }
  for (  Membership membership : role.getMemberships()) {
    membership.setSyncopeRole(null);
    membership.getSyncopeUser().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  role.setMemberships(Collections.EMPTY_LIST);
  for (  Entitlement entitlement : role.getEntitlements()) {
    entitlement.removeRole(role);
  }
  role.setEntitlements(Collections.EMPTY_SET);
  role.setParent(null);
  entityManager.remove(role);
}"
61336,"@Override @Transactional public void delete(Long id){
  SyncopeUser user=find(id);
  if (id == null) {
    return;
  }
  for (  Membership membership : user.getMemberships()) {
    membership.setSyncopeUser(null);
    membership.getSyncopeRole().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  user.setMemberships(Collections.EMPTY_SET);
  entityManager.remove(user);
}","@Override @Transactional public void delete(Long id){
  SyncopeUser user=find(id);
  if (id == null) {
    return;
  }
  for (  Membership membership : user.getMemberships()) {
    membership.setSyncopeUser(null);
    membership.getSyncopeRole().removeMembership(membership);
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  user.setMemberships(Collections.EMPTY_LIST);
  entityManager.remove(user);
}"
61337,"public SyncopeUser doExecuteAction(String actionName,UserTO userTO,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userTO.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userTO.getId()));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  WorkflowDescriptor workflowDescriptor=userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);
  int[] actions=userWorkflow.getAvailableActions(syncopeUser.getWorkflowEntryId(),inputs);
  Integer actionId=null;
  for (int i=0; i < actions.length && actionId == null; i++) {
    if (actionName.equals(workflowDescriptor.getAction(actions[i]).getName())) {
      actionId=actions[i];
    }
  }
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),actionId,inputs);
  return syncopeUserDAO.save(syncopeUser);
}","public SyncopeUser doExecuteAction(String actionName,UserTO userTO,Map<String,Object> moreInputs) throws WorkflowException, NotFoundException {
  SyncopeUser syncopeUser=syncopeUserDAO.find(userTO.getId());
  if (syncopeUser == null) {
    log.error(""String_Node_Str"" + userTO.getId() + ""String_Node_Str"");
    throw new NotFoundException(String.valueOf(userTO.getId()));
  }
  Map<String,Object> inputs=new HashMap<String,Object>();
  if (moreInputs != null && !moreInputs.isEmpty()) {
    inputs.putAll(moreInputs);
  }
  inputs.put(Constants.SYNCOPE_USER,syncopeUser);
  Integer actionId=findWorkflowAction(syncopeUser.getWorkflowEntryId(),actionName);
  if (actionId == null) {
    throw new NotFoundException(actionName);
  }
  userWorkflow.doAction(syncopeUser.getWorkflowEntryId(),actionId,inputs);
  return syncopeUserDAO.save(syncopeUser);
}"
61338,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      UserMod overwriteMod=userTO.buildUserMod();
    overwriteMod.setId(wie.getSyncopeUserId());
  return update(overwriteMod,syncRoles,syncResources);
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(HttpServletResponse response,@RequestBody UserTO userTO,@RequestParam(value=""String_Node_Str"",required=false) Set<Long> syncRoles,@RequestParam(value=""String_Node_Str"",required=false) Set<String> syncResources) throws SyncopeClientCompositeErrorException, WorkflowException, PropagationException, NotFoundException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + userTO + ""String_Node_Str""+ syncRoles+ ""String_Node_Str""+ syncResources);
  }
  WorkflowInitException wie=null;
  Long workflowId=null;
  try {
    workflowId=userWorkflow.initialize(Constants.USER_WORKFLOW,0,Collections.singletonMap(Constants.USER_TO,userTO));
  }
 catch (  WorkflowInitException e) {
    log.error(""String_Node_Str"" + e,e);
    wie=e;
    if (workflowStore != null && e.getWorkflowEntryId() != null) {
      workflowStore.delete(e.getWorkflowEntryId());
    }
  }
  if (wie != null) {
switch (wie.getExceptionOperation()) {
case OVERWRITE:
      Integer resetActionId=findWorkflowAction(wie.getWorkflowEntryId(),Constants.ACTION_RESET);
    if (resetActionId != null) {
      UserTO localUserTO=new UserTO();
      localUserTO.setId(wie.getSyncopeUserId());
      doExecuteAction(Constants.ACTION_RESET,localUserTO,null);
    }
  UserMod overwriteMod=userTO.buildUserMod();
overwriteMod.setId(wie.getSyncopeUserId());
return update(overwriteMod,syncRoles,syncResources);
case REJECT:
SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
SyncopeClientException rejectedUserCreate=new SyncopeClientException(SyncopeClientExceptionType.RejectedUserCreate);
rejectedUserCreate.addElement(String.valueOf(wie.getSyncopeUserId()));
compositeException.addException(rejectedUserCreate);
throw compositeException;
}
}
SyncopeUser syncopeUser=userDataBinder.createSyncopeUser(userTO);
syncopeUser.setWorkflowEntryId(workflowId);
syncopeUser.setCreationTime(new Date());
syncopeUser=syncopeUserDAO.save(syncopeUser);
Set<String> syncResourceNames=getSyncResourceNames(syncopeUser,syncRoles,syncResources);
if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {
log.debug(""String_Node_Str"" + syncResourceNames);
}
Set<String> propagatedResources=propagationManager.create(syncopeUser,syncResourceNames);
if (log.isDebugEnabled()) {
log.debug(""String_Node_Str"" + propagatedResources);
}
Map<String,Object> inputs=new HashMap<String,Object>();
inputs.put(Constants.SYNCOPE_USER,syncopeUser);
int[] availableWorkflowActions=userWorkflow.getAvailableActions(workflowId,null);
for (int availableWorkflowAction : availableWorkflowActions) {
userWorkflow.doAction(workflowId,availableWorkflowAction,inputs);
}
syncopeUser=syncopeUserDAO.save(syncopeUser);
response.setStatus(HttpServletResponse.SC_CREATED);
return userDataBinder.getUserTO(syncopeUser,userWorkflow);
}"
61339,"protected AbstractAttribute getAttribute(Map transientVars,Map args) throws WorkflowException {
  String schemaName=(String)args.get(""String_Node_Str"");
  if (schemaName == null || schemaName.length() == 0) {
    throw new WorkflowException(""String_Node_Str"");
  }
  String kind=(String)args.get(""String_Node_Str"");
  if (kind == null || kind.length() == 0) {
    kind=Constants.SYNCOPE_USER;
  }
  AttributableUtil attributableUtil=null;
  AbstractAttributable attributable=null;
  if (Constants.SYNCOPE_USER.equals(kind)) {
    attributableUtil=AttributableUtil.USER;
    attributable=(SyncopeUser)transientVars.get(Constants.SYNCOPE_USER);
  }
 else   if (Constants.SYNCOPE_ROLE.equals(kind)) {
    attributableUtil=AttributableUtil.ROLE;
    attributable=(SyncopeRole)transientVars.get(Constants.SYNCOPE_ROLE);
  }
 else   if (Constants.MEMBERSHIP.equals(kind)) {
    attributableUtil=AttributableUtil.MEMBERSHIP;
    attributable=(Membership)transientVars.get(Constants.MEMBERSHIP);
  }
 else {
    throw new WorkflowException(""String_Node_Str"" + kind);
  }
  if (attributable == null) {
    throw new WorkflowException(""String_Node_Str"" + attributableUtil);
  }
  SchemaDAO schemaDAO=(SchemaDAO)context.getBean(""String_Node_Str"");
  AbstractSchema schema=schemaDAO.find(schemaName,attributableUtil.getSchemaClass());
  if (schema == null) {
    throw new WorkflowException(""String_Node_Str"" + schemaName);
  }
  AbstractAttribute attribute=attributable.getAttribute(schemaName);
  if (attribute == null) {
    attribute=attributableUtil.newAttribute();
    attribute.setSchema(schema);
    attribute.setOwner(attributable);
    attributable.addAttribute(attribute);
  }
  return attribute;
}","protected AbstractAttribute getAttribute(Map transientVars,Map args) throws WorkflowException {
  String schemaName=(String)args.get(""String_Node_Str"");
  if (schemaName == null || schemaName.length() == 0) {
    throw new WorkflowException(""String_Node_Str"");
  }
  String kind=(String)args.get(""String_Node_Str"");
  if (kind == null || kind.length() == 0) {
    kind=Constants.SYNCOPE_USER;
  }
  AbstractAttributable attributable=null;
  if (Constants.SYNCOPE_USER.equals(kind)) {
    attributableUtil=AttributableUtil.USER;
    attributable=(SyncopeUser)transientVars.get(Constants.SYNCOPE_USER);
  }
 else   if (Constants.SYNCOPE_ROLE.equals(kind)) {
    attributableUtil=AttributableUtil.ROLE;
    attributable=(SyncopeRole)transientVars.get(Constants.SYNCOPE_ROLE);
  }
 else   if (Constants.MEMBERSHIP.equals(kind)) {
    attributableUtil=AttributableUtil.MEMBERSHIP;
    attributable=(Membership)transientVars.get(Constants.MEMBERSHIP);
  }
 else {
    throw new WorkflowException(""String_Node_Str"" + kind);
  }
  if (attributable == null) {
    throw new WorkflowException(""String_Node_Str"" + attributableUtil);
  }
  SchemaDAO schemaDAO=(SchemaDAO)context.getBean(""String_Node_Str"");
  AbstractSchema schema=schemaDAO.find(schemaName,attributableUtil.getSchemaClass());
  if (schema == null) {
    throw new WorkflowException(""String_Node_Str"" + schemaName);
  }
  AbstractAttribute attribute=attributable.getAttribute(schemaName);
  if (attribute == null) {
    attribute=attributableUtil.newAttribute();
    attribute.setSchema(schema);
    attribute.setOwner(attributable);
    attributable.addAttribute(attribute);
  }
  return attribute;
}"
61340,"@Override public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  AbstractAttribute attribute=getAttribute(transientVars,args);
  UserAttributeValue date=new UserAttributeValue();
  date.setDateValue(new Date());
  date.setAttribute(attribute);
  if (attribute.getSchema().isMultivalue()) {
    attribute.addAttributeValue(date);
  }
 else {
    attribute.setAttributeValues(Collections.singletonList(date));
  }
}","@Override public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  AbstractAttribute attribute=getAttribute(transientVars,args);
  AbstractAttributeValue date=attributableUtil.newAttributeValue();
  date.setDateValue(new Date());
  date.setAttribute(attribute);
  if (attribute.getSchema().isMultivalue()) {
    attribute.addAttributeValue(date);
  }
 else {
    attribute.setAttributeValues(Collections.singletonList(date));
  }
}"
61341,"@Override public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  AbstractAttribute attribute=getAttribute(transientVars,args);
  String text=(String)transientVars.get(args.get(""String_Node_Str""));
  if (text == null) {
    throw new WorkflowException(""String_Node_Str"");
  }
  UserAttributeValue textAttributeValue=new UserAttributeValue();
  textAttributeValue.setStringValue(text);
  textAttributeValue.setAttribute(attribute);
  if (attribute.getSchema().isMultivalue()) {
    attribute.addAttributeValue(textAttributeValue);
  }
 else {
    attribute.setAttributeValues(Collections.singletonList(textAttributeValue));
  }
}","@Override public void execute(Map transientVars,Map args,PropertySet ps) throws WorkflowException {
  AbstractAttribute attribute=getAttribute(transientVars,args);
  String text=(String)transientVars.get(args.get(""String_Node_Str""));
  if (text == null) {
    throw new WorkflowException(""String_Node_Str"");
  }
  AbstractAttributeValue textAttributeValue=attributableUtil.newAttributeValue();
  textAttributeValue.setStringValue(text);
  textAttributeValue.setAttribute(attribute);
  if (attribute.getSchema().isMultivalue()) {
    attribute.addAttributeValue(textAttributeValue);
  }
 else {
    attribute.setAttributeValues(Collections.singletonList(textAttributeValue));
  }
}"
61342,"@Test public void create(){
  UserTO userTO=getSampleTO(""String_Node_Str"");
  AttributeTO attrWithInvalidSchemaTO=new AttributeTO();
  attrWithInvalidSchemaTO.setSchema(""String_Node_Str"");
  attrWithInvalidSchemaTO.addValue(""String_Node_Str"");
  userTO.addAttribute(attrWithInvalidSchemaTO);
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRole(8L);
  userTO.addMembership(membershipTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(newUserTO);
  assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));
  WorkflowActionsTO workflowActions=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",WorkflowActionsTO.class,newUserTO.getId());
  assertTrue(workflowActions.getActions().equals(Collections.singleton(""String_Node_Str"")));
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  userTO=getSampleTO(""String_Node_Str"");
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidUniques);
  }
  assertNotNull(syncopeClientException);
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
}","@Test public void create(){
  UserTO userTO=getSampleTO(""String_Node_Str"");
  AttributeTO attrWithInvalidSchemaTO=new AttributeTO();
  attrWithInvalidSchemaTO.setSchema(""String_Node_Str"");
  attrWithInvalidSchemaTO.addValue(""String_Node_Str"");
  userTO.addAttribute(attrWithInvalidSchemaTO);
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRole(8L);
  userTO.addMembership(membershipTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(newUserTO);
  assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));
  WorkflowActionsTO workflowActions=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",WorkflowActionsTO.class,newUserTO.getId());
  assertTrue(workflowActions.getActions().equals(Collections.singleton(Constants.ACTION_ACTIVATE)));
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  userTO=getSampleTO(""String_Node_Str"");
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidUniques);
  }
  assertNotNull(syncopeClientException);
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
}"
61343,"public RoleTO(){
  super();
  users=new HashSet<Long>();
  resources=new HashSet<String>();
}","public RoleTO(){
  super();
  resources=new HashSet<String>();
}"
61344,"public UserTO(){
  super();
  roles=new HashSet<Long>();
}","public UserTO(){
  super();
  memberships=new HashSet<MembershipTO>();
}"
61345,"public boolean removeResource(Resource resource){
  if (this.resources == null)   return true;
  return resources.remove(resource);
}","public boolean removeResource(Resource resource){
  return resources == null ? true : resources.remove(resource);
}"
61346,"public Set<Resource> getResources(){
  if (this.resources == null) {
    this.resources=new HashSet<Resource>();
  }
  return this.resources;
}","public Set<Resource> getResources(){
  return resources == null ? Collections.EMPTY_SET : resources;
}"
61347,"public boolean addResource(Resource resource){
  if (this.resources == null)   this.resources=new HashSet<Resource>();
  return this.resources.add(resource);
}","public boolean addResource(Resource resource){
  if (this.resources == null) {
    this.resources=new HashSet<Resource>();
  }
  return this.resources.add(resource);
}"
61348,"public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  SyncopeClientException invalidSchemas=new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemas);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  SyncopeClientException invalidValues=new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);
  SyncopeClientException invalidUniques=new SyncopeClientException(SyncopeClientExceptionType.InvalidUniques);
  SyncopeClientException invalidDerivedSchemas=new SyncopeClientException(SyncopeClientExceptionType.InvalidDerivedSchemas);
  SyncopeClientException invalidRoles=new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);
  SyncopeClientException invalidResources=new SyncopeClientException(SyncopeClientExceptionType.InvalidResources);
  SyncopeUser syncopeUser=new SyncopeUser();
  BeanUtils.copyProperties(userTO,syncopeUser,(String[])ArrayUtils.add(ignoreProperties,""String_Node_Str""));
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
    compositeErrorException.addException(invalidPassword);
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  UserSchema schema=null;
  UserAttribute attribute=null;
  Set<String> valuesProvided=null;
  UserAttributeValue attributeValue=null;
  for (  AttributeTO attributeTO : userTO.getAttributes()) {
    schema=schemaDAO.find(attributeTO.getSchema(),UserSchema.class);
    if (schema == null) {
      invalidSchemas.addElement(attributeTO.getSchema());
    }
 else {
      attribute=new UserAttribute();
      attribute.setSchema(schema);
      attribute.setOwner(syncopeUser);
      valuesProvided=schema.isMultivalue() ? attributeTO.getValues() : (attributeTO.getValues().isEmpty() ? Collections.EMPTY_SET : Collections.singleton(attributeTO.getValues().iterator().next()));
      for (      String value : valuesProvided) {
        attributeValue=new UserAttributeValue();
        try {
          attributeValue=attribute.addValue(value,attributeValue);
        }
 catch (        ValidationException e) {
          log.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ value,e);
          invalidValues.addElement(schema.getName());
        }
        if (schema.isUniquevalue() && attributeValueDAO.existingAttributeValue(attributeValue)) {
          log.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ attributeValue.getValueAsString());
          invalidUniques.addElement(schema.getName());
          attribute.setAttributeValues(Collections.EMPTY_SET);
        }
      }
      if (!attribute.getAttributeValues().isEmpty()) {
        syncopeUser.addAttribute(attribute);
      }
    }
  }
  UserDerivedSchema derivedSchema=null;
  UserDerivedAttribute derivedAttribute=null;
  for (  AttributeTO attributeTO : userTO.getDerivedAttributes()) {
    derivedSchema=derivedSchemaDAO.find(attributeTO.getSchema(),UserDerivedSchema.class);
    if (derivedSchema == null) {
      invalidDerivedSchemas.addElement(attributeTO.getSchema());
    }
 else {
      derivedAttribute=new UserDerivedAttribute();
      derivedAttribute.setDerivedSchema(derivedSchema);
      derivedAttribute.setOwner(syncopeUser);
      syncopeUser.addDerivedAttribute(derivedAttribute);
    }
  }
  List<UserSchema> allUserSchemas=schemaDAO.findAll(UserSchema.class);
  for (  UserSchema userSchema : allUserSchemas) {
    if (syncopeUser.getAttribute(userSchema.getName()) == null && userSchema.isMandatory()) {
      log.error(""String_Node_Str"" + userSchema.getName() + ""String_Node_Str"");
      requiredValuesMissing.addElement(userSchema.getName());
    }
  }
  SyncopeRole role=null;
  for (  Long roleId : userTO.getRoles()) {
    role=syncopeRoleDAO.find(roleId);
    if (role == null) {
      invalidRoles.addElement(String.valueOf(roleId));
    }
 else {
      syncopeUser.addRole(role);
    }
  }
  Resource resource=null;
  for (  String resourceName : userTO.getResources()) {
    resource=resourceDAO.find(resourceName);
    if (resource == null) {
      invalidResources.addElement(resourceName);
    }
 else {
      syncopeUser.addResource(resource);
    }
  }
  if (!invalidSchemas.getElements().isEmpty()) {
    compositeErrorException.addException(invalidSchemas);
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (!invalidValues.getElements().isEmpty()) {
    compositeErrorException.addException(invalidValues);
  }
  if (!invalidUniques.getElements().isEmpty()) {
    compositeErrorException.addException(invalidUniques);
  }
  if (!invalidDerivedSchemas.getElements().isEmpty()) {
    compositeErrorException.addException(invalidDerivedSchemas);
  }
  if (!invalidRoles.getElements().isEmpty()) {
    compositeErrorException.addException(invalidRoles);
  }
  if (!invalidResources.getElements().isEmpty()) {
    compositeErrorException.addException(invalidResources);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  return syncopeUser;
}","public SyncopeUser createSyncopeUser(UserTO userTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException invalidPassword=new SyncopeClientException(SyncopeClientExceptionType.InvalidPassword);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  SyncopeClientException invalidValues=new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);
  SyncopeClientException invalidUniques=new SyncopeClientException(SyncopeClientExceptionType.InvalidUniques);
  SyncopeClientException invalidDerivedSchemas=new SyncopeClientException(SyncopeClientExceptionType.InvalidDerivedSchemas);
  SyncopeClientException invalidRoles=new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);
  SyncopeClientException invalidResources=new SyncopeClientException(SyncopeClientExceptionType.InvalidResources);
  SyncopeUser syncopeUser=new SyncopeUser();
  BeanUtils.copyProperties(userTO,syncopeUser,(String[])ArrayUtils.add(ignoreProperties,""String_Node_Str""));
  if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {
    log.error(""String_Node_Str"");
    invalidPassword.addElement(""String_Node_Str"");
    compositeErrorException.addException(invalidPassword);
  }
 else {
    syncopeUser.setPassword(userTO.getPassword());
  }
  UserSchema schema=null;
  UserAttribute attribute=null;
  Set<String> valuesProvided=null;
  UserAttributeValue attributeValue=null;
  for (  AttributeTO attributeTO : userTO.getAttributes()) {
    schema=schemaDAO.find(attributeTO.getSchema(),UserSchema.class);
    if (schema != null) {
      attribute=new UserAttribute();
      attribute.setSchema(schema);
      attribute.setOwner(syncopeUser);
      valuesProvided=schema.isMultivalue() ? attributeTO.getValues() : (attributeTO.getValues().isEmpty() ? Collections.EMPTY_SET : Collections.singleton(attributeTO.getValues().iterator().next()));
      for (      String value : valuesProvided) {
        attributeValue=new UserAttributeValue();
        try {
          attributeValue=attribute.addValue(value,attributeValue);
        }
 catch (        ValidationException e) {
          log.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ value,e);
          invalidValues.addElement(schema.getName());
        }
        if (schema.isUniquevalue() && attributeValueDAO.existingAttributeValue(attributeValue)) {
          log.error(""String_Node_Str"" + schema.getName() + ""String_Node_Str""+ attributeValue.getValueAsString());
          invalidUniques.addElement(schema.getName());
          attribute.setAttributeValues(Collections.EMPTY_SET);
        }
      }
      if (!attribute.getAttributeValues().isEmpty()) {
        syncopeUser.addAttribute(attribute);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + attributeTO.getSchema());
      }
    }
  }
  UserDerivedSchema derivedSchema=null;
  UserDerivedAttribute derivedAttribute=null;
  for (  AttributeTO attributeTO : userTO.getDerivedAttributes()) {
    derivedSchema=derivedSchemaDAO.find(attributeTO.getSchema(),UserDerivedSchema.class);
    if (derivedSchema == null) {
      invalidDerivedSchemas.addElement(attributeTO.getSchema());
    }
 else {
      derivedAttribute=new UserDerivedAttribute();
      derivedAttribute.setDerivedSchema(derivedSchema);
      derivedAttribute.setOwner(syncopeUser);
      syncopeUser.addDerivedAttribute(derivedAttribute);
    }
  }
  List<UserSchema> allUserSchemas=schemaDAO.findAll(UserSchema.class);
  for (  UserSchema userSchema : allUserSchemas) {
    if (syncopeUser.getAttribute(userSchema.getName()) == null && userSchema.isMandatory()) {
      log.error(""String_Node_Str"" + userSchema.getName() + ""String_Node_Str"");
      requiredValuesMissing.addElement(userSchema.getName());
    }
  }
  SyncopeRole role=null;
  for (  Long roleId : userTO.getRoles()) {
    role=syncopeRoleDAO.find(roleId);
    if (role == null) {
      invalidRoles.addElement(String.valueOf(roleId));
    }
 else {
      syncopeUser.addRole(role);
    }
  }
  Resource resource=null;
  for (  String resourceName : userTO.getResources()) {
    resource=resourceDAO.find(resourceName);
    if (resource == null) {
      invalidResources.addElement(resourceName);
    }
 else {
      syncopeUser.addResource(resource);
    }
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (!invalidValues.getElements().isEmpty()) {
    compositeErrorException.addException(invalidValues);
  }
  if (!invalidUniques.getElements().isEmpty()) {
    compositeErrorException.addException(invalidUniques);
  }
  if (!invalidDerivedSchemas.getElements().isEmpty()) {
    compositeErrorException.addException(invalidDerivedSchemas);
  }
  if (!invalidRoles.getElements().isEmpty()) {
    compositeErrorException.addException(invalidRoles);
  }
  if (!invalidResources.getElements().isEmpty()) {
    compositeErrorException.addException(invalidResources);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  return syncopeUser;
}"
61349,"public void delete(Long entryId){
  HibernateWorkflowEntry entry=entityManager.find(HibernateWorkflowEntry.class,entryId);
  if (entry != null) {
    entityManager.remove(entry);
  }
}","public void delete(Long entryId){
  HibernateWorkflowEntry entry=entityManager.find(HibernateWorkflowEntry.class,entryId);
  if (entry != null) {
    entityManager.remove(entry);
  }
  List<OSWorkflowProperty> properties=osWorkflowPropertyDAO.findAll(entryId);
  if (properties != null) {
    for (    OSWorkflowProperty property : properties) {
      osWorkflowPropertyDAO.delete(property.getId());
    }
  }
}"
61350,"@Test public void create(){
  UserTO userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  AttributeTO usernameTO=new AttributeTO();
  usernameTO.setSchema(""String_Node_Str"");
  usernameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(usernameTO);
  AttributeTO surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  AttributeTO emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  AttributeTO loginDateTO=new AttributeTO();
  loginDateTO.setSchema(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  userTO.addAttribute(loginDateTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  userTO.setId(newUserTO.getId());
  userTO.setCreationTime(newUserTO.getCreationTime());
  userTO.setToken(newUserTO.getToken());
  userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());
  assertEquals(userTO,newUserTO);
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  usernameTO=new AttributeTO();
  usernameTO.setSchema(""String_Node_Str"");
  usernameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(usernameTO);
  surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  loginDateTO=new AttributeTO();
  loginDateTO.setSchema(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  userTO.addAttribute(loginDateTO);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidUniques);
  }
  assertNotNull(syncopeClientException);
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
}","@Test public void create(){
  UserTO userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  AttributeTO usernameTO=new AttributeTO();
  usernameTO.setSchema(""String_Node_Str"");
  usernameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(usernameTO);
  AttributeTO surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  AttributeTO emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  AttributeTO loginDateTO=new AttributeTO();
  loginDateTO.setSchema(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  userTO.addAttribute(loginDateTO);
  AttributeTO attrWithInvalidSchemaTO=new AttributeTO();
  attrWithInvalidSchemaTO.setSchema(""String_Node_Str"");
  attrWithInvalidSchemaTO.addValue(""String_Node_Str"");
  userTO.addAttribute(attrWithInvalidSchemaTO);
  UserTO newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));
  userTO.removeAttribute(attrWithInvalidSchemaTO);
  userTO.setId(newUserTO.getId());
  userTO.setCreationTime(newUserTO.getCreationTime());
  userTO.setToken(newUserTO.getToken());
  userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());
  assertEquals(userTO,newUserTO);
  newUserTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",newUserTO,UserTO.class);
  assertEquals(""String_Node_Str"",restTemplate.getForObject(BASE_URL + ""String_Node_Str"" + newUserTO.getId(),String.class));
  userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  usernameTO=new AttributeTO();
  usernameTO.setSchema(""String_Node_Str"");
  usernameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(usernameTO);
  surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  loginDateTO=new AttributeTO();
  loginDateTO.setSchema(""String_Node_Str"");
  loginDateTO.addValue(""String_Node_Str"");
  userTO.addAttribute(loginDateTO);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidUniques);
  }
  assertNotNull(syncopeClientException);
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
  assertTrue(syncopeClientException.getElements().contains(""String_Node_Str""));
}"
61351,"@Override protected HtmlEmail getHtmlEmail(Map<String,String> args,SyncopeUser syncopeUser) throws EmailException, WorkflowException {
  String urlSuffix=""String_Node_Str"";
  if (Boolean.valueOf(args.get(""String_Node_Str""))) {
    try {
      urlSuffix+=""String_Node_Str"" + syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue() + ""String_Node_Str""+ URLEncoder.encode(syncopeUser.getToken(),""String_Node_Str"");
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
  HtmlEmail email=super.getHtmlEmail(args,syncopeUser);
  email.addTo(Utils.getUserId(syncopeUser));
  try {
    email.setHtmlMsg(getEmailBody(syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue(),syncopeConfigurationDAO.find(args.get(""String_Node_Str"")).getConfValue(),urlSuffix,urlSuffix.substring(0,urlSuffix.indexOf('=') + 1)));
    email.setTextMsg(getEmailBody(syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue(),syncopeConfigurationDAO.find(args.get(""String_Node_Str"")).getConfValue(),urlSuffix,urlSuffix.substring(0,urlSuffix.indexOf('=') + 1)));
  }
 catch (  MissingConfKeyException e) {
    new WorkflowException(e);
  }
  return email;
}","@Override protected HtmlEmail getHtmlEmail(Map<String,String> args,SyncopeUser syncopeUser) throws EmailException, WorkflowException {
  String urlSuffix=""String_Node_Str"";
  if (Boolean.valueOf(args.get(""String_Node_Str""))) {
    try {
      urlSuffix+=""String_Node_Str"" + syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue() + ""String_Node_Str""+ URLEncoder.encode(syncopeUser.getToken(),""String_Node_Str"")+ ""String_Node_Str""+ Utils.getUserId(syncopeUser);
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
  HtmlEmail email=super.getHtmlEmail(args,syncopeUser);
  email.addTo(Utils.getUserId(syncopeUser));
  try {
    email.setHtmlMsg(getEmailBody(syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue(),syncopeConfigurationDAO.find(args.get(""String_Node_Str"")).getConfValue(),urlSuffix,urlSuffix.substring(0,urlSuffix.indexOf('=') + 1)));
    email.setTextMsg(getEmailBody(syncopeConfigurationDAO.find(""String_Node_Str"").getConfValue(),syncopeConfigurationDAO.find(args.get(""String_Node_Str"")).getConfValue(),urlSuffix,urlSuffix.substring(0,urlSuffix.indexOf('=') + 1)));
  }
 catch (  MissingConfKeyException e) {
    new WorkflowException(e);
  }
  return email;
}"
61352,"/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param merge specifies if it must be performed an update (true) or acreation (false).
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,Resource resource,boolean merge) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorFacade connector=(ConnectorFacade)beanFactory.getBean(connectorInstance.getId().toString());
  if (connector == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    }
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  Set<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  String accountId=null;
  String field=null;
  String password=user.getPassword();
  for (  SchemaMapping mapping : mappings) {
    field=mapping.getField();
    Object value=user.getAttribute(mapping.getUserSchema().getName());
    if (value != null && mapping.isAccountid()) {
      accountId=value.toString();
      attrs.add(new Name(accountId));
    }
    if (password != null && mapping.isPassword()) {
      attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
    }
    if (!mapping.isPassword() && !mapping.isAccountid()) {
      attrs.add(AttributeBuilder.build(field,value));
    }
  }
  Uid userUid=null;
  if (merge) {
    userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
  }
 else {
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  }
  if (userUid == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + resource.getName());
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + userUid.getUidValue());
  }
}","/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param merge specifies if it must be performed an update (true) or acreation (false).
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,Resource resource,boolean merge) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConnectorFacade connector=getConnectorFacade(connectorInstance.getId().toString());
  if (connector == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    }
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  Set<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  Class castToBeApplied=null;
  SchemaType type=null;
  String accountId=null;
  String field=null;
  UserAttribute userAttribute=null;
  String schema=null;
  Set<UserAttributeValue> values=null;
  String password=user.getPassword();
  Set objValues=new HashSet();
  for (  SchemaMapping mapping : mappings) {
    field=mapping.getField();
    schema=mapping.getUserSchema().getName();
    userAttribute=user.getAttribute(schema);
    values=null;
    try {
      type=mapping.getUserSchema().getType();
      castToBeApplied=Class.forName(type.getClassName());
    }
 catch (    ClassNotFoundException e) {
      castToBeApplied=String.class;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + field + ""String_Node_Str""+ schema+ ""String_Node_Str""+ type.getClassName());
    }
    if (userAttribute != null) {
      values=(Set<UserAttributeValue>)userAttribute.getAttributeValues();
      for (      UserAttributeValue value : values) {
        objValues.add(value.getValue());
      }
    }
    if (!objValues.isEmpty() && mapping.isAccountid()) {
      accountId=objValues.iterator().next().toString();
      attrs.add(new Name(accountId));
    }
    if (password != null && mapping.isPassword()) {
      attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
    }
    if (!mapping.isPassword() && !mapping.isAccountid() && !objValues.isEmpty()) {
      if (mapping.getUserSchema().isMultivalue()) {
        attrs.add(AttributeBuilder.build(field,objValues));
      }
 else {
        attrs.add(AttributeBuilder.build(field,castToBeApplied.cast(objValues.iterator().next())));
      }
    }
  }
  Uid userUid=null;
  if (merge) {
    userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
  }
 else {
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  }
  if (userUid == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + resource.getName());
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + userUid.getUidValue());
  }
}"
61353,"/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @return
 */
public String getValue(Set<? extends AbstractAttribute> attributes){
  Expression jexlExpression=jexlEngine.createExpression(getDerivedSchema().getExpression());
  JexlContext jexlContext=new MapContext();
  Set<? extends AbstractAttributeValue> attributeValues=null;
  String expressionValue=null;
  AbstractAttribute attribute=null;
  AbstractAttributeValue attributeValue=null;
  for (Iterator<? extends AbstractAttribute> itor=attributes.iterator(); itor.hasNext(); ) {
    attribute=itor.next();
    attributeValues=attribute.getAttributeValues();
    if (attributeValues.isEmpty() || !getDerivedSchema().getSchemas().contains(attribute.getSchema())) {
      expressionValue=""String_Node_Str"";
    }
 else {
      attributeValue=attributeValues.iterator().next();
      expressionValue=attributeValue.getValueAsString();
    }
    jexlContext.set(attribute.getSchema().getName(),expressionValue);
  }
  return jexlExpression.evaluate(jexlContext).toString();
}","/** 
 * @see http://commons.apache.org/jexl/reference/index.html
 * @return
 */
public String getValue(Collection<? extends AbstractAttribute> attributes){
  Expression jexlExpression=jexlEngine.createExpression(getDerivedSchema().getExpression());
  JexlContext jexlContext=new MapContext();
  Set<? extends AbstractAttributeValue> attributeValues=null;
  String expressionValue=null;
  AbstractAttribute attribute=null;
  AbstractAttributeValue attributeValue=null;
  for (Iterator<? extends AbstractAttribute> itor=attributes.iterator(); itor.hasNext(); ) {
    attribute=itor.next();
    attributeValues=attribute.getAttributeValues();
    if (attributeValues.isEmpty() || !getDerivedSchema().getSchemas().contains(attribute.getSchema())) {
      expressionValue=""String_Node_Str"";
    }
 else {
      attributeValue=attributeValues.iterator().next();
      expressionValue=attributeValue.getValueAsString();
    }
    jexlContext.set(attribute.getSchema().getName(),expressionValue);
  }
  return jexlExpression.evaluate(jexlContext).toString();
}"
61354,"public SyncopeRole createSyncopeRole(RoleTO roleTO) throws SyncopeClientCompositeErrorException {
  SyncopeRole syncopeRole=new SyncopeRole();
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException invalidRoles=new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);
  if (roleTO.getName() == null) {
    log.error(""String_Node_Str"");
    invalidRoles.addElement(""String_Node_Str"");
  }
 else {
    syncopeRole.setName(roleTO.getName());
  }
  Long parentRoleId=null;
  if (roleTO.getParent() != null) {
    SyncopeRole parentRole=syncopeRoleDAO.find(roleTO.getParent());
    if (parentRole == null) {
      log.error(""String_Node_Str"" + roleTO.getParent());
      invalidRoles.addElement(String.valueOf(roleTO.getParent()));
    }
 else {
      syncopeRole.setParent(parentRole);
      parentRoleId=syncopeRole.getParent().getId();
    }
  }
  SyncopeRole otherRole=syncopeRoleDAO.find(roleTO.getName(),parentRoleId);
  if (otherRole != null) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + otherRole);
    invalidRoles.addElement(roleTO.getName());
  }
  if (!invalidRoles.getElements().isEmpty()) {
    scce.addException(invalidRoles);
  }
  syncopeRole=fillAbstractAttributable(syncopeRole,roleTO,AttributableUtil.ROLE,scce);
  SyncopeUser user=null;
  for (  Long userId : roleTO.getUsers()) {
    user=syncopeUserDAO.find(userId);
    if (user == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + userId);
      }
    }
 else {
      syncopeRole.addUser(user);
      user.addRole(syncopeRole);
    }
  }
  return syncopeRole;
}","public SyncopeRole createSyncopeRole(RoleTO roleTO) throws SyncopeClientCompositeErrorException {
  SyncopeRole syncopeRole=new SyncopeRole();
  syncopeRole.setInheritAttributes(roleTO.isInheritAttributes());
  syncopeRole.setInheritDerivedAttributes(roleTO.isInheritDerivedAttributes());
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException invalidRoles=new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);
  if (roleTO.getName() == null) {
    log.error(""String_Node_Str"");
    invalidRoles.addElement(""String_Node_Str"");
  }
 else {
    syncopeRole.setName(roleTO.getName());
  }
  Long parentRoleId=null;
  if (roleTO.getParent() != null) {
    SyncopeRole parentRole=syncopeRoleDAO.find(roleTO.getParent());
    if (parentRole == null) {
      log.error(""String_Node_Str"" + roleTO.getParent());
      invalidRoles.addElement(String.valueOf(roleTO.getParent()));
    }
 else {
      syncopeRole.setParent(parentRole);
      parentRoleId=syncopeRole.getParent().getId();
    }
  }
  SyncopeRole otherRole=syncopeRoleDAO.find(roleTO.getName(),parentRoleId);
  if (otherRole != null) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + otherRole);
    invalidRoles.addElement(roleTO.getName());
  }
  if (!invalidRoles.getElements().isEmpty()) {
    scce.addException(invalidRoles);
  }
  syncopeRole=fillAbstractAttributable(syncopeRole,roleTO,AttributableUtil.ROLE,scce);
  SyncopeUser user=null;
  for (  Long userId : roleTO.getUsers()) {
    user=syncopeUserDAO.find(userId);
    if (user == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + userId);
      }
    }
 else {
      syncopeRole.addUser(user);
      user.addRole(syncopeRole);
    }
  }
  return syncopeRole;
}"
61355,"public RoleTO getRoleTO(SyncopeRole role){
  RoleTO roleTO=new RoleTO();
  roleTO.setId(role.getId());
  roleTO.setName(role.getName());
  if (role.getParent() != null) {
    roleTO.setParent(role.getParent().getId());
  }
  roleTO=getAbstractAttributableTO(roleTO,role);
  for (  SyncopeUser user : role.getUsers()) {
    roleTO.addUser(user.getId());
  }
  return roleTO;
}","public RoleTO getRoleTO(SyncopeRole role){
  RoleTO roleTO=new RoleTO();
  roleTO.setId(role.getId());
  roleTO.setName(role.getName());
  roleTO.setInheritAttributes(role.isInheritAttributes());
  roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());
  if (role.getParent() != null) {
    roleTO.setParent(role.getParent().getId());
  }
  roleTO=getAbstractAttributableTO(roleTO,role);
  for (  SyncopeUser user : role.getUsers()) {
    roleTO.addUser(user.getId());
  }
  AttributeTO attributeTO=null;
  List<RoleAttribute> inheritedAttributes=null;
  if (role.isInheritAttributes()) {
    inheritedAttributes=syncopeRoleDAO.findInheritedAttributes(role);
    for (    AbstractAttribute attribute : inheritedAttributes) {
      attributeTO=new AttributeTO();
      attributeTO.setSchema(attribute.getSchema().getName());
      attributeTO.setValues(attribute.getAttributeValuesAsStrings());
      roleTO.addAttribute(attributeTO);
    }
    List<RoleDerivedAttribute> inheritedDerivedAttributes=null;
    if (role.isInheritDerivedAttributes()) {
      inheritedDerivedAttributes=syncopeRoleDAO.findInheritedDerivedAttributes(role);
      for (      AbstractDerivedAttribute attribute : inheritedDerivedAttributes) {
        attributeTO=new AttributeTO();
        attributeTO.setSchema(attribute.getDerivedSchema().getName());
        attributeTO.setValues(Collections.singleton(attribute.getValue(inheritedAttributes)));
        roleTO.addDerivedAttribute(attributeTO);
      }
    }
  }
  return roleTO;
}"
61356,"/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param synchronous
 * @param merge
 * @return
 */
private Set<String> provision(SyncopeUser user,boolean synchronous,boolean merge){
  Set<String> provisioned=new HashSet<String>();
  Set<Resource> resources=user.getResources();
  Set<SyncopeRole> roles=user.getRoles();
  for (  SyncopeRole role : roles) {
    resources.addAll(role.getResources());
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + resources + ""String_Node_Str""+ user.getId());
  }
  for (  Resource resource : resources) {
    try {
      propagate(user,resource,merge);
      provisioned.add(resource.getName());
    }
 catch (    RuntimeException re) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + resource.getName(),re);
      }
      if (synchronous) {
        throw re;
      }
    }
catch (    Throwable t) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + resource.getName(),t);
      }
      if (synchronous) {
        throw new RuntimeException(t.getMessage());
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + provisioned + ""String_Node_Str""+ user.getId());
  }
  return provisioned;
}","/** 
 * Implementation of the provisioning feature.
 * @param user
 * @param synchronous
 * @param merge
 * @return
 */
private Set<String> provision(SyncopeUser user,Set<String> synchronous,boolean merge){
  if (synchronous == null) {
    synchronous=Collections.EMPTY_SET;
  }
  Set<String> provisioned=new HashSet<String>();
  Set<Resource> resources=user.getResources();
  Set<SyncopeRole> roles=user.getRoles();
  for (  SyncopeRole role : roles) {
    resources.addAll(role.getResources());
  }
  Set<Resource> syncResources=new HashSet<Resource>();
  Set<Resource> asyncResources=new HashSet<Resource>();
  for (  Resource resource : resources) {
    if (synchronous.contains(resource.getName())) {
      syncResources.add(resource);
    }
 else {
      asyncResources.add(resource);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + resources + ""String_Node_Str""+ user.getId());
  }
  for (  Resource resource : syncResources) {
    try {
      propagate(user,resource,merge);
      provisioned.add(resource.getName());
    }
 catch (    Throwable t) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + resource.getName(),t);
      }
      throw new RuntimeException(t);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + resources + ""String_Node_Str""+ user.getId());
  }
  for (  Resource resource : asyncResources) {
    try {
      propagate(user,resource,merge);
      provisioned.add(resource.getName());
    }
 catch (    Throwable t) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + resource.getName(),t);
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + provisioned + ""String_Node_Str""+ user.getId());
  }
  return provisioned;
}"
61357,"/** 
 * Performs update on each resource associated to the user. If we ask for a synchronous update passing true as second argument, than exceptions won't be ignored but the process will be stoppend and a runtime exception will be returned.
 * @param user to be updated.
 * @param synchronous to ask for a synchronous or asynchronous update.
 * @return a set of updated resources.
 */
public Set<String> update(SyncopeUser user,boolean synchronous){
  return provision(user,synchronous,true);
}","/** 
 * Performs update on each resource associated to the user. It is possible to ask for a synchronous provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stoppend if the provisioning fails onto a synchronous resource.
 * @param user to be updated.
 * @param synchronous to ask for a synchronous or asynchronous update.
 * @return a set of updated resources.
 */
public Set<String> update(SyncopeUser user,Set<String> synchronous){
  return provision(user,synchronous,true);
}"
61358,"public Resource getResource(Resource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValueMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectoInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  resource.setConnector(connector);
  return resource;
}","public Resource getResource(Resource resource,ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValueMissing);
  if (resourceTO == null)   return null;
  if (resourceTO.getName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnectorInstance connector=null;
  if (resourceTO.getConnectorId() != null) {
    connector=connectorInstanceDAO.find(resourceTO.getConnectorId());
  }
  if (connector == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  resource.setName(resourceTO.getName());
  resource.setMappings(getSchemaMappings(resource,resourceTO.getMappings()));
  resource.setConnector(connector);
  connector.addResource(resource);
  return resource;
}"
61359,"@Autowired public ResourceDataBinder(SchemaDAO schemaDAO,ConnectorInstanceDAO connectorInstanceDAO){
  this.schemaDAO=schemaDAO;
  this.connectoInstanceDAO=connectorInstanceDAO;
}","@Autowired public ResourceDataBinder(SchemaDAO schemaDAO,ConnectorInstanceDAO connectorInstanceDAO){
  this.schemaDAO=schemaDAO;
  this.connectorInstanceDAO=connectorInstanceDAO;
}"
61360,"@Test public final void updateWithException(){
  SyncopeUser user=syncopeUserDAO.find(4L);
  assertNotNull(user);
  Resource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  user.setResources(Collections.singleton(resource));
  RuntimeException re=null;
  try {
    PropagationManager propagationManager=new PropagationManager();
    propagationManager.update(user,true);
  }
 catch (  RuntimeException e) {
    re=e;
  }
  assertNotNull(re);
}","@Test public final void updateWithException(){
  SyncopeUser user=syncopeUserDAO.find(4L);
  assertNotNull(user);
  Resource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  user.setResources(Collections.singleton(resource));
  RuntimeException re=null;
  try {
    PropagationManager propagationManager=new PropagationManager();
    propagationManager.update(user,Collections.singleton(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    re=e;
  }
  assertNotNull(re);
}"
61361,"@Test public final void provisionWithException(){
  SyncopeUser user=syncopeUserDAO.find(3L);
  assertNotNull(user);
  Resource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  user.setResources(Collections.singleton(resource));
  RuntimeException re=null;
  try {
    PropagationManager propagationManager=new PropagationManager();
    propagationManager.provision(user,true);
  }
 catch (  RuntimeException e) {
    re=e;
  }
  assertNotNull(re);
}","@Test public final void provisionWithException(){
  SyncopeUser user=syncopeUserDAO.find(3L);
  assertNotNull(user);
  Resource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  user.setResources(Collections.singleton(resource));
  RuntimeException re=null;
  try {
    PropagationManager propagationManager=new PropagationManager();
    propagationManager.provision(user,Collections.singleton(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    re=e;
  }
  assertNotNull(re);
}"
61362,"@Test public void create(){
  final String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(100L);
  SchemaMappingTOs schemaMappingTOs=new SchemaMappingTOs();
  SchemaMappingTO schemaMappingTO=null;
  for (int i=0; i < 3; i++) {
    schemaMappingTO=new SchemaMappingTO();
    schemaMappingTO.setField(""String_Node_Str"" + i);
    schemaMappingTO.setUserSchema(""String_Node_Str"");
    schemaMappingTO.setRoleSchema(""String_Node_Str"");
    schemaMappingTOs.addMapping(schemaMappingTO);
  }
  resourceTO.setMappings(schemaMappingTOs);
  ResourceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,ResourceTO.class);
  assertNotNull(actual);
  actual=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,resourceName);
  assertNotNull(actual);
}","@Test public void create(){
  final String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(102L);
  SchemaMappingTOs schemaMappingTOs=new SchemaMappingTOs();
  SchemaMappingTO schemaMappingTO=null;
  for (int i=0; i < 3; i++) {
    schemaMappingTO=new SchemaMappingTO();
    schemaMappingTO.setField(""String_Node_Str"" + i);
    schemaMappingTO.setUserSchema(""String_Node_Str"");
    schemaMappingTO.setRoleSchema(""String_Node_Str"");
    schemaMappingTOs.addMapping(schemaMappingTO);
  }
  resourceTO.setMappings(schemaMappingTOs);
  ResourceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,ResourceTO.class);
  assertNotNull(actual);
  actual=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,resourceName);
  assertNotNull(actual);
}"
61363,"/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  SyncopeConfigurationDAO syncopeConfigurationDAO=(SyncopeConfigurationDAO)context.getBean(""String_Node_Str"");
  SyncopeConfiguration syncopeConfiguration=syncopeConfigurationDAO.find(""String_Node_Str"");
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  Set<PropertyTO> properties=null;
  for (  ConnectorInstance instance : instances) {
    try {
      properties=(Set<PropertyTO>)ConnectorInstanceDataBinder.buildFromXML(instance.getXmlConfiguration());
      ConnectorInfoManager manager=ConnectorInstanceController.getConnectorManager(syncopeConfiguration.getConfValue());
      ConnectorFacade connector=ConnectorInstanceController.getConnectorFacade(manager,instance.getBundleName(),instance.getVersion(),instance.getConnectorName(),properties);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + connector);
      }
      beanFactory.registerSingleton(instance.getId().toString(),connector);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + instance.getId().toString());
      }
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
}","/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  SyncopeConfigurationDAO syncopeConfigurationDAO=(SyncopeConfigurationDAO)context.getBean(""String_Node_Str"");
  SyncopeConfiguration syncopeConfiguration=null;
  try {
    syncopeConfiguration=syncopeConfigurationDAO.find(""String_Node_Str"");
  }
 catch (  MissingConfKeyException e) {
    log.error(""String_Node_Str"",e);
  }
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  Set<PropertyTO> properties=null;
  for (  ConnectorInstance instance : instances) {
    try {
      properties=(Set<PropertyTO>)ConnectorInstanceDataBinder.buildFromXML(instance.getXmlConfiguration());
      ConnectorInfoManager manager=ConnectorInstanceController.getConnectorManager(syncopeConfiguration.getConfValue());
      ConnectorFacade connector=ConnectorInstanceController.getConnectorFacade(manager,instance.getBundleName(),instance.getVersion(),instance.getConnectorName(),properties);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + connector);
      }
      beanFactory.registerSingleton(instance.getId().toString(),connector);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + instance.getId().toString());
      }
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
}"
61364,SyncopeConfiguration find(String name);,SyncopeConfiguration find(String name) throws MissingConfKeyException ;
61365,"@Override public SyncopeConfiguration find(String name){
  return entityManager.find(SyncopeConfiguration.class,name);
}","@Override public SyncopeConfiguration find(String name) throws MissingConfKeyException {
  SyncopeConfiguration syncopeConfiguration=entityManager.find(SyncopeConfiguration.class,name);
  if (syncopeConfiguration == null) {
    throw new MissingConfKeyException(name);
  }
  return syncopeConfiguration;
}"
61366,"@Override @Transactional public void delete(String name){
  entityManager.remove(find(name));
}","@Override @Transactional public void delete(String name){
  try {
    entityManager.remove(find(name));
  }
 catch (  MissingConfKeyException e) {
    log.error(""String_Node_Str"" + name,e);
  }
}"
61367,"/** 
 * Creates user account.
 * @param a set of account attributes.
 * @return accountid of the account created.
 * @throws ProvisioningException in case of failure.
 */
@Override public String create(final Set<WSAttributeValue> data) throws ProvisioningException {
  String res=null;
  for (  WSAttributeValue value : data) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + value.getName() + ""String_Node_Str""+ value.getType()+ ""String_Node_Str""+ value.isNullable()+ ""String_Node_Str""+ value.isKey()+ ""String_Node_Str""+ value.isPassword()+ ""String_Node_Str""+ value.getValue().toString());
    }
    if (value.isKey())     res=value.getValue().toString();
  }
  return res;
}","/** 
 * Creates user account.
 * @param a set of account attributes.
 * @return accountid of the account created.
 * @throws ProvisioningException in case of failure.
 */
@Override public String create(final Set<WSAttributeValue> data) throws ProvisioningException {
  Set<String> schema=new HashSet<String>();
  Set<WSAttribute> attrs=schema();
  for (  WSAttribute attr : attrs) {
    schema.add(attr.getName());
  }
  String res=null;
  for (  WSAttributeValue value : data) {
    if (!schema.contains(value.getName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + value.getName());
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + value.getName() + ""String_Node_Str""+ value.getType()+ ""String_Node_Str""+ value.isNullable()+ ""String_Node_Str""+ value.isKey()+ ""String_Node_Str""+ value.isPassword()+ ""String_Node_Str""+ value.getValue().toString());
    }
    if (value.isKey()) {
      res=value.getValue().toString();
    }
  }
  return res;
}"
61368,"@Transactional @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(HttpServletResponse response,@RequestBody ResourceTO resourceTO) throws IOException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ResourceDataBinder binder=new ResourceDataBinder(schemaDAO,connectorInstanceDAO);
  if (resourceTO == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    return throwNotFoundException(""String_Node_Str"",response);
  }
  Resource actual=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Resource resource=binder.getResource(resourceTO);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getName());
    }
    actual=resourceDAO.save(resource);
    if (actual == null) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"");
      }
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
      throw ex;
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    return throwCompositeException(e,response);
  }
catch (  SyncopeClientException ex) {
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    return throwCompositeException(compositeErrorException,response);
  }
catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",t);
    }
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    return throwCompositeException(compositeErrorException,response);
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(actual);
}","@Transactional @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(HttpServletResponse response,@RequestBody ResourceTO resourceTO) throws IOException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (resourceTO == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    return throwNotFoundException(""String_Node_Str"",response);
  }
  ResourceDataBinder binder=new ResourceDataBinder(schemaDAO,connectorInstanceDAO);
  Resource actual=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Resource resource=null;
    if (resourceDAO.find(resourceTO.getName()) != null) {
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.AlreadyExists);
      ex.addElement(resourceTO.getName());
      throw ex;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    resource=binder.getResource(resourceTO);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getName());
    }
    actual=resourceDAO.save(resource);
    if (actual == null) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"");
      }
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
      throw ex;
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    return throwCompositeException(e,response);
  }
catch (  SyncopeClientException ex) {
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    return throwCompositeException(compositeErrorException,response);
  }
catch (  Throwable t) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",t);
    }
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    compositeErrorException.addException(ex);
    return throwCompositeException(compositeErrorException,response);
  }
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(actual);
}"
61369,"public SchemaMapping getSchemaMapping(Resource resource,SchemaMappingTO mapping) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValueMissing);
  if (mapping == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    return null;
  }
  if (mapping.getField() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  UserSchema userSchema=null;
  if (mapping.getUserSchema() != null) {
    userSchema=schemaDAO.find(mapping.getUserSchema(),UserSchema.class);
  }
  RoleSchema roleSchema=null;
  if (mapping.getRoleSchema() != null) {
    roleSchema=schemaDAO.find(mapping.getUserSchema(),RoleSchema.class);
  }
  if (userSchema == null && roleSchema == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (resource == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  SchemaMapping schemaMapping=new SchemaMapping();
  BeanUtils.copyProperties(mapping,schemaMapping,ignoreMappingProperties);
  schemaMapping.setResource(resource);
  resource.addMapping(schemaMapping);
  schemaMapping.setUserSchema(userSchema);
  userSchema=schemaMapping.getUserSchema();
  if (userSchema != null)   userSchema.addMapping(schemaMapping);
  schemaMapping.setRoleSchema(roleSchema);
  roleSchema=schemaMapping.getRoleSchema();
  if (roleSchema != null)   roleSchema.addMapping(schemaMapping);
  return schemaMapping;
}","public SchemaMapping getSchemaMapping(Resource resource,SchemaMappingTO mapping) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValueMissing);
  if (mapping == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"");
    }
    return null;
  }
  if (mapping.getField() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  UserSchema userSchema=null;
  if (mapping.getUserSchema() != null) {
    userSchema=schemaDAO.find(mapping.getUserSchema(),UserSchema.class);
  }
  RoleSchema roleSchema=null;
  if (mapping.getRoleSchema() != null) {
    roleSchema=schemaDAO.find(mapping.getRoleSchema(),RoleSchema.class);
  }
  if (userSchema == null && roleSchema == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (resource == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  SchemaMapping schemaMapping=new SchemaMapping();
  BeanUtils.copyProperties(mapping,schemaMapping,ignoreMappingProperties);
  schemaMapping.setResource(resource);
  resource.addMapping(schemaMapping);
  schemaMapping.setUserSchema(userSchema);
  userSchema=schemaMapping.getUserSchema();
  if (userSchema != null)   userSchema.addMapping(schemaMapping);
  schemaMapping.setRoleSchema(roleSchema);
  roleSchema=schemaMapping.getRoleSchema();
  if (roleSchema != null)   roleSchema.addMapping(schemaMapping);
  return schemaMapping;
}"
61370,"public <T extends AbstractSchema,K extends AbstractDerivedSchema>T updateSchema(SchemaTO schemaTO,Class<T> reference,Class<K> derivedReference) throws InstantiationException, IllegalAccessException, SyncopeClientCompositeErrorException, UniqueValueException {
  T schema=schemaDAO.find(schemaTO.getName(),reference);
  if (schema != null) {
    schema=populateSchema(schema,schemaTO,derivedReference);
    boolean validationExceptionFound=false;
    AbstractAttribute attribute=null;
    AbstractAttributeValue attributeValue=null;
    for (Iterator<? extends AbstractAttribute> attributeItor=schema.getAttributes().iterator(); attributeItor.hasNext() && !validationExceptionFound; ) {
      attribute=attributeItor.next();
      for (Iterator<? extends AbstractAttributeValue> attributeValueItor=attribute.getAttributeValues().iterator(); attributeValueItor.hasNext() && !validationExceptionFound; ) {
        attributeValue=attributeValueItor.next();
        try {
          schema.getValidator().getValue(attributeValue.getValueAsString(),attributeValue);
        }
 catch (        Exception e) {
          validationExceptionFound=true;
        }
      }
    }
    if (validationExceptionFound) {
      SyncopeClientCompositeErrorException sccee=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
      sccee.addException(new SyncopeClientException(SyncopeClientExceptionType.InvalidSchemaUpdate));
      throw sccee;
    }
    return schema;
  }
  return null;
}","public <T extends AbstractSchema,K extends AbstractDerivedSchema>T updateSchema(SchemaTO schemaTO,Class<T> reference,Class<K> derivedReference) throws InstantiationException, IllegalAccessException, SyncopeClientCompositeErrorException, UniqueValueException {
  T schema=schemaDAO.find(schemaTO.getName(),reference);
  if (schema != null) {
    schema=populateSchema(schema,schemaTO,derivedReference);
    boolean validationExceptionFound=false;
    AbstractAttribute attribute=null;
    AbstractAttributeValue attributeValue=null;
    for (Iterator<? extends AbstractAttribute> attributeItor=schema.getAttributes().iterator(); attributeItor.hasNext() && !validationExceptionFound; ) {
      attribute=attributeItor.next();
      for (Iterator<? extends AbstractAttributeValue> attributeValueItor=attribute.getAttributeValues().iterator(); attributeValueItor.hasNext() && !validationExceptionFound; ) {
        attributeValue=attributeValueItor.next();
        try {
          schema.getValidator().getValue(attributeValue.getValueAsString(),attributeValue);
        }
 catch (        Exception e) {
          validationExceptionFound=true;
        }
      }
    }
    if (validationExceptionFound) {
      SyncopeClientCompositeErrorException sccee=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
      SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.InvalidUpdate);
      ex.addElement(schema.getName());
      sccee.addException(ex);
      throw sccee;
    }
    return schema;
  }
  return null;
}"
61371,"public void update(){
  final String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(101L);
  SchemaMappingTOs schemaMappingTOs=new SchemaMappingTOs();
  SchemaMappingTO schemaMappingTO=null;
  for (int i=3; i < 6; i++) {
    schemaMappingTO=new SchemaMappingTO();
    schemaMappingTO.setField(""String_Node_Str"" + i);
    schemaMappingTO.setUserSchema(""String_Node_Str"");
    schemaMappingTO.setRoleSchema(""String_Node_Str"");
    schemaMappingTOs.addMapping(schemaMappingTO);
  }
  resourceTO.setMappings(schemaMappingTOs);
  ResourceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,ResourceTO.class);
  assertNotNull(actual);
  SchemaMappingTOs mappings=actual.getMappings();
  assertNotNull(mappings);
  assertTrue(mappings.getMappings().size() == 3);
}","@Test public void update(){
  final String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(101L);
  SchemaMappingTOs schemaMappingTOs=new SchemaMappingTOs();
  SchemaMappingTO schemaMappingTO=null;
  for (int i=3; i < 6; i++) {
    schemaMappingTO=new SchemaMappingTO();
    schemaMappingTO.setField(""String_Node_Str"" + i);
    schemaMappingTO.setUserSchema(""String_Node_Str"");
    schemaMappingTO.setRoleSchema(""String_Node_Str"");
    schemaMappingTOs.addMapping(schemaMappingTO);
  }
  resourceTO.setMappings(schemaMappingTOs);
  ResourceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,ResourceTO.class);
  assertNotNull(actual);
  SchemaMappingTOs mappings=actual.getMappings();
  assertNotNull(mappings);
  assertTrue(mappings.getMappings().size() == 3);
}"
61372,"@Test public void update(){
  SchemaTO schemaTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SchemaTO.class);
  assertNotNull(schemaTO);
  schemaTO.setVirtual(true);
  SchemaTO updatedTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",schemaTO,SchemaTO.class);
  assertEquals(schemaTO,updatedTO);
  updatedTO.setType(SchemaType.Date);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",updatedTO,SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidSchemaUpdate);
  }
  assertNotNull(syncopeClientException);
}","@Test public void update(){
  SchemaTO schemaTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SchemaTO.class);
  assertNotNull(schemaTO);
  schemaTO.setVirtual(true);
  SchemaTO updatedTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",schemaTO,SchemaTO.class);
  assertEquals(schemaTO,updatedTO);
  updatedTO.setType(SchemaType.Date);
  SyncopeClientException syncopeClientException=null;
  try {
    restTemplate.postForObject(BASE_URL + ""String_Node_Str"",updatedTO,SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    syncopeClientException=e.getException(SyncopeClientExceptionType.InvalidUpdate);
  }
  assertNotNull(syncopeClientException);
}"
61373,"public List<ConnectorBundleTO> getBundles(){
  return bundles;
}","public List<ConnectorBundleTO> getBundles(){
  if (this.bundles == null)   this.bundles=new ArrayList<ConnectorBundleTO>();
  return this.bundles;
}"
61374,"public Set<PropertyTO> getConfiguration(){
  return configuration;
}","public Set<PropertyTO> getConfiguration(){
  if (this.configuration == null)   this.configuration=new HashSet<PropertyTO>();
  return this.configuration;
}"
61375,"public List<ConnectorInstanceTO> getInstances(){
  return instances;
}","public List<ConnectorInstanceTO> getInstances(){
  if (this.instances == null)   this.instances=new ArrayList<ConnectorInstanceTO>();
  return this.instances;
}"
61376,"public boolean addInstance(ConnectorInstanceTO instance){
  if (this.instances == null) {
    this.instances=new ArrayList<ConnectorInstanceTO>();
  }
  return this.instances.add(instance);
}","public boolean addInstance(ConnectorInstanceTO instance){
  if (this.instances == null)   this.instances=new ArrayList<ConnectorInstanceTO>();
  return this.instances.add(instance);
}"
61377,"public boolean addMapping(SchemaMappingTO mapping){
  if (this.mappings == null) {
    this.mappings=new ArrayList<SchemaMappingTO>();
  }
  return this.mappings.add(mapping);
}","public boolean addMapping(SchemaMappingTO mapping){
  if (this.mappings == null)   this.mappings=new ArrayList<SchemaMappingTO>();
  return this.mappings.add(mapping);
}"
61378,"public List<SchemaMappingTO> getMappings(){
  if (this.mappings == null) {
    this.mappings=new ArrayList<SchemaMappingTO>();
  }
  return this.mappings;
}","public List<SchemaMappingTO> getMappings(){
  if (this.mappings == null)   this.mappings=new ArrayList<SchemaMappingTO>();
  return this.mappings;
}"
61379,"/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  SyncopeConfigurationDAO syncopeConfigurationDAO=(SyncopeConfigurationDAO)context.getBean(""String_Node_Str"");
  SyncopeConfiguration syncopeConfiguration=syncopeConfigurationDAO.find(""String_Node_Str"");
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  Set<PropertyTO> properties=null;
  for (  ConnectorInstance instance : instances) {
    try {
      properties=(Set<PropertyTO>)ConnectorInstanceDataBinder.buildFromXML(instance.getXmlConfiguration());
      ConnectorInfoManager manager=ConnectorInstanceController.getConnectorManager(syncopeConfiguration.getConfValue());
      ConnectorFacade connector=ConnectorInstanceController.getConnectorFacade(manager,instance.getBundleName(),instance.getVersion(),instance.getConnectorName(),properties);
      beanFactory.registerSingleton(instance.getId().toString(),connector);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + instance.getId().toString());
      }
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
}","/** 
 * <em>WARNING</em>: this method connects to the database by mean of the  underlying Spring's datasource, not using the provided one, to be fetched via JNDI. This in order to avoid potential conflicts and problems with DbUnit.
 * @param sce
 */
@Override public void contextInitialized(ServletContextEvent sce){
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorInstanceDAO connectorInstanceDAO=(ConnectorInstanceDAO)context.getBean(""String_Node_Str"");
  SyncopeConfigurationDAO syncopeConfigurationDAO=(SyncopeConfigurationDAO)context.getBean(""String_Node_Str"");
  SyncopeConfiguration syncopeConfiguration=syncopeConfigurationDAO.find(""String_Node_Str"");
  List<ConnectorInstance> instances=connectorInstanceDAO.findAll();
  Set<PropertyTO> properties=null;
  for (  ConnectorInstance instance : instances) {
    try {
      properties=(Set<PropertyTO>)ConnectorInstanceDataBinder.buildFromXML(instance.getXmlConfiguration());
      ConnectorInfoManager manager=ConnectorInstanceController.getConnectorManager(syncopeConfiguration.getConfValue());
      ConnectorFacade connector=ConnectorInstanceController.getConnectorFacade(manager,instance.getBundleName(),instance.getVersion(),instance.getConnectorName(),properties);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + connector);
      }
      beanFactory.registerSingleton(instance.getId().toString(),connector);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + instance.getId().toString());
      }
    }
 catch (    Throwable t) {
      log.error(""String_Node_Str"",t);
    }
  }
}"
61380,"/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param merge specifies if it must be performed an update (true) or acreation (false).
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,Resource resource,boolean merge) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorFacade connector=(ConnectorFacade)beanFactory.getSingleton(connectorInstance.getId().toString());
  if (connector == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    }
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  Set<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  String accountId=null;
  String field=null;
  String password=user.getPassword();
  for (  SchemaMapping mapping : mappings) {
    field=mapping.getField();
    Object value=user.getAttribute(mapping.getUserSchema().getName());
    if (value != null && mapping.isAccountid()) {
      accountId=value.toString();
      attrs.add(new Name(accountId));
    }
    if (password != null && mapping.isPassword()) {
      attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
    }
    if (!mapping.isPassword() && !mapping.isAccountid()) {
      attrs.add(AttributeBuilder.build(field,value));
    }
  }
  Uid userUid=null;
  if (merge) {
    userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
  }
 else {
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  }
  if (userUid == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + resource.getName());
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + userUid.getUidValue());
  }
}","/** 
 * Propagate provision/update the resource indicated.
 * @param user to be created.
 * @param resource to be provisioned.
 * @param merge specifies if it must be performed an update (true) or acreation (false).
 * @throws NoSuchBeanDefinitionException if the connector bean doesn'texist.
 * @throws IllegalStateException if propagation fails.
 */
private void propagate(SyncopeUser user,Resource resource,boolean merge) throws NoSuchBeanDefinitionException, IllegalStateException {
  ConnectorInstance connectorInstance=resource.getConnector();
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  DefaultListableBeanFactory beanFactory=(DefaultListableBeanFactory)context.getBeanFactory();
  ConnectorFacade connector=(ConnectorFacade)beanFactory.getBean(connectorInstance.getId().toString());
  if (connector == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + connectorInstance.getId().toString() + ""String_Node_Str"");
    }
    throw new NoSuchBeanDefinitionException(""String_Node_Str"");
  }
  Set<SchemaMapping> mappings=resource.getMappings();
  Set<Attribute> attrs=new HashSet<Attribute>();
  String accountId=null;
  String field=null;
  String password=user.getPassword();
  for (  SchemaMapping mapping : mappings) {
    field=mapping.getField();
    Object value=user.getAttribute(mapping.getUserSchema().getName());
    if (value != null && mapping.isAccountid()) {
      accountId=value.toString();
      attrs.add(new Name(accountId));
    }
    if (password != null && mapping.isPassword()) {
      attrs.add(AttributeBuilder.buildPassword(password.toCharArray()));
    }
    if (!mapping.isPassword() && !mapping.isAccountid()) {
      attrs.add(AttributeBuilder.build(field,value));
    }
  }
  Uid userUid=null;
  if (merge) {
    userUid=connector.update(ObjectClass.ACCOUNT,new Uid(accountId),attrs,null);
  }
 else {
    userUid=connector.create(ObjectClass.ACCOUNT,attrs,null);
  }
  if (userUid == null) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"" + resource.getName());
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + userUid.getUidValue());
  }
}"
61381,"public boolean removeResource(Resource resource){
  return resources.remove(resource);
}","public boolean removeResource(Resource resource){
  if (this.resources == null)   return true;
  return resources.remove(resource);
}"
61382,"public boolean addResource(Resource resource){
  return resources.add(resource);
}","public boolean addResource(Resource resource){
  if (this.resources == null)   this.resources=new HashSet<Resource>();
  return this.resources.add(resource);
}"
61383,"public Set<Resource> getResources(){
  return resources;
}","public Set<Resource> getResources(){
  if (this.resources == null)   this.resources=new HashSet<Resource>();
  return this.resources;
}"
61384,"public boolean removeRole(SyncopeRole role){
  return roles.remove(role);
}","public boolean removeRole(SyncopeRole role){
  if (this.roles == null)   return true;
  return this.roles.remove(role);
}"
61385,"public boolean addRole(SyncopeRole role){
  return roles.add(role);
}","public boolean addRole(SyncopeRole role){
  if (this.roles == null)   this.roles=new HashSet<SyncopeRole>();
  return this.roles.add(role);
}"
61386,"public Set<SyncopeRole> getRoles(){
  return roles;
}","public Set<SyncopeRole> getRoles(){
  if (this.roles == null)   this.roles=new HashSet<SyncopeRole>();
  return this.roles;
}"
61387,public abstract <T extends AbstractAttribute>void setAttribute(T attribute) throws ClassCastException ;,public abstract <T extends AbstractAttribute>void setAttribute(T attribute);
61388,public abstract <T extends AbstractAttribute>T getAttribute() throws ClassCastException ;,public abstract <T extends AbstractAttribute>T getAttribute();
61389,"@Override public <T extends AbstractSchema>boolean addSchema(T schema){
  if (!(schema instanceof RoleSchema)) {
    throw new ClassCastException();
  }
  return schemas.add((RoleSchema)schema);
}","@Override public <T extends AbstractSchema>boolean addSchema(T schema){
  return schemas.add((RoleSchema)schema);
}"
61390,"public <T extends AbstractAttributeValue>T getValue(Object value,T attributeValue) throws ValidationException {
  if (!attributeClass.isInstance(value)) {
    throw new ParseException(new ClassCastException(""String_Node_Str"" + value.getClass().getName() + ""String_Node_Str""+ attributeClass.getName()));
  }
  attributeValue=value instanceof String ? parseValue((String)value,attributeValue) : parseValue(value,attributeValue);
  doValidate(attributeValue);
  return attributeValue;
}","public <T extends AbstractAttributeValue>T getValue(Object value,T attributeValue) throws ValidationException {
  if (!attributeClass.isInstance(value)) {
    throw new ParseException(new TypeMismatchException(value,attributeClass));
  }
  attributeValue=value instanceof String ? parseValue((String)value,attributeValue) : parseValue(value,attributeValue);
  doValidate(attributeValue);
  return attributeValue;
}"
61391,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<DerivedSchemaTO> derivedAttributeList(HttpServletRequest request,@PathVariable(""String_Node_Str"") String kind) throws IOException {
  Class reference=getReference(kind);
  WebApplicationContext webApplicationContext=RequestContextUtils.getWebApplicationContext(request);
  DerivedSchemaDAO derivedAttributeSchemaDAO=(DerivedSchemaDAO)webApplicationContext.getBean(""String_Node_Str"");
  List<AbstractDerivedSchema> derivedAttributeSchemas=derivedAttributeSchemaDAO.findAll(reference);
  List<DerivedSchemaTO> result=new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());
  DerivedSchemaTO derivedAttributeSchemaTO=null;
  String[] ignoreProperties={""String_Node_Str""};
  for (  AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {
    derivedAttributeSchemaTO=new DerivedSchemaTO();
    BeanUtils.copyProperties(derivedSchema,derivedAttributeSchemaTO,ignoreProperties);
    for (    AbstractSchema schema : derivedSchema.getSchemas()) {
      derivedAttributeSchemaTO.addSchema(schema.getName());
    }
    result.add(derivedAttributeSchemaTO);
  }
  return result;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<DerivedSchemaTO> derivedAttributeList(HttpServletRequest request,@PathVariable(""String_Node_Str"") String kind){
  Class reference=getDerivedSchemaReference(kind);
  List<AbstractDerivedSchema> derivedAttributeSchemas=derivedSchemaDAO.findAll(reference);
  List<DerivedSchemaTO> result=new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());
  DerivedSchemaTO derivedAttributeSchemaTO=null;
  String[] ignoreProperties={""String_Node_Str""};
  for (  AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {
    derivedAttributeSchemaTO=new DerivedSchemaTO();
    BeanUtils.copyProperties(derivedSchema,derivedAttributeSchemaTO,ignoreProperties);
    for (    AbstractSchema schema : derivedSchema.getSchemas()) {
      derivedAttributeSchemaTO.addSchema(schema.getName());
    }
    result.add(derivedAttributeSchemaTO);
  }
  return result;
}"
61392,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaTO> attributeList(HttpServletRequest request,@PathVariable(""String_Node_Str"") String kind) throws IOException {
  Class reference=getReference(kind);
  WebApplicationContext webApplicationContext=RequestContextUtils.getWebApplicationContext(request);
  SchemaDAO schemaDAO=(SchemaDAO)webApplicationContext.getBean(""String_Node_Str"");
  List<AbstractSchema> schemas=schemaDAO.findAll(reference);
  List<SchemaTO> result=new ArrayList<SchemaTO>(schemas.size());
  SchemaTO schemaTO=null;
  String[] ignoreProperties={""String_Node_Str""};
  for (  AbstractSchema schema : schemas) {
    schemaTO=new SchemaTO();
    BeanUtils.copyProperties(schema,schemaTO,ignoreProperties);
    for (    AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {
      schemaTO.addDerivedSchema(derivedSchema.getName());
    }
    result.add(schemaTO);
  }
  return result;
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<SchemaTO> attributeList(HttpServletRequest request,@PathVariable(""String_Node_Str"") String kind){
  Class reference=getSchemaReference(kind);
  List<AbstractSchema> schemas=schemaDAO.findAll(reference);
  List<SchemaTO> result=new ArrayList<SchemaTO>(schemas.size());
  SchemaTO schemaTO=null;
  String[] ignoreProperties={""String_Node_Str""};
  for (  AbstractSchema schema : schemas) {
    schemaTO=new SchemaTO();
    BeanUtils.copyProperties(schema,schemaTO,ignoreProperties);
    for (    AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {
      schemaTO.addDerivedSchema(derivedSchema.getName());
    }
    result.add(schemaTO);
  }
  return result;
}"
61393,"@Test public void derivedAttributeList(){
  List<DerivedSchemaTO> derivedAttributeSchemas=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",List.class);
  assertNotNull(derivedAttributeSchemas);
}","@Test public void derivedAttributeList(){
  List<DerivedSchemaTO> derivedSchemas=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",List.class);
  assertNotNull(derivedSchemas);
}"
61394,"@Test public void attributeList(){
  List<SchemaTO> attributeSchemas=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",List.class);
  assertNotNull(attributeSchemas);
}","@Test public void attributeList(){
  List<SchemaTO> schemas=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",List.class);
  assertNotNull(schemas);
}"
61395,"@Override public void handleError(ClientHttpResponse response) throws IOException {
  if (!ArrayUtils.contains(managedStatuses,response.getStatusCode())) {
    super.handleError(response);
  }
  SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(response.getStatusCode());
  List<String> exceptionTypesInHeaders=response.getHeaders().get(EXCEPTION_TYPE_HEADER);
  SyncopeClientExceptionType exceptionType=null;
  SyncopeClientException clientException=null;
  Set<String> handledExceptions=new HashSet<String>();
  for (  String exceptionTypeAsString : exceptionTypesInHeaders) {
    try {
      exceptionType=SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);
    }
 catch (    IllegalArgumentException e) {
      log.error(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str""+ exceptionTypeAsString,e);
    }
    if (exceptionType != null) {
      handledExceptions.add(exceptionTypeAsString);
      clientException=new SyncopeClientException();
      clientException.setType(exceptionType);
      if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {
        clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));
      }
      compositeException.addException(clientException);
    }
  }
  exceptionTypesInHeaders.removeAll(handledExceptions);
  if (!exceptionTypesInHeaders.isEmpty()) {
    log.error(""String_Node_Str"" + exceptionTypesInHeaders);
  }
  if (compositeException.hasExceptions()) {
    throw compositeException;
  }
}","@Override public void handleError(ClientHttpResponse response) throws IOException {
  if (!ArrayUtils.contains(managedStatuses,response.getStatusCode())) {
    super.handleError(response);
  }
  SyncopeClientCompositeErrorException compositeException=new SyncopeClientCompositeErrorException(response.getStatusCode());
  List<String> exceptionTypesInHeaders=response.getHeaders().get(EXCEPTION_TYPE_HEADER);
  if (exceptionTypesInHeaders == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str"");
    }
    return;
  }
  SyncopeClientExceptionType exceptionType=null;
  SyncopeClientException clientException=null;
  Set<String> handledExceptions=new HashSet<String>();
  for (  String exceptionTypeAsString : exceptionTypesInHeaders) {
    try {
      exceptionType=SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);
    }
 catch (    IllegalArgumentException e) {
      log.error(""String_Node_Str"" + EXCEPTION_TYPE_HEADER + ""String_Node_Str""+ exceptionTypeAsString,e);
    }
    if (exceptionType != null) {
      handledExceptions.add(exceptionTypeAsString);
      clientException=new SyncopeClientException();
      clientException.setType(exceptionType);
      if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {
        clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));
      }
      compositeException.addException(clientException);
    }
  }
  exceptionTypesInHeaders.removeAll(handledExceptions);
  if (!exceptionTypesInHeaders.isEmpty()) {
    log.error(""String_Node_Str"" + exceptionTypesInHeaders);
  }
  if (compositeException.hasExceptions()) {
    throw compositeException;
  }
}"
61396,"@Override public Attribute find(long id){
  Attribute result=entityManager.find(Attribute.class,id);
  if (isDeletedOrNotManaged(result))   result=null;
  return result;
}","@Override public Attribute find(long id){
  Attribute result=entityManager.find(Attribute.class,id);
  if (isDeletedOrNotManaged(result)) {
    result=null;
  }
  return result;
}"
61397,"@Override public AttributeSchema find(String name){
  return entityManager.find(AttributeSchema.class,name);
}","@Override public AttributeSchema find(String name){
  AttributeSchema result=entityManager.find(AttributeSchema.class,name);
  if (isDeletedOrNotManaged(result)) {
    result=null;
  }
  return result;
}"
61398,"@Override @Transactional public void delete(String name){
  entityManager.remove(find(name));
}","@Override @Transactional public void delete(String name){
  AttributeSchema schema=find(name);
  if (schema == null) {
    return;
  }
  entityManager.remove(schema);
}"
61399,"@Override public Entitlement find(String name){
  Entitlement result=entityManager.find(Entitlement.class,name);
  if (isDeletedOrNotManaged(result))   result=null;
  return result;
}","@Override public Entitlement find(String name){
  Entitlement result=entityManager.find(Entitlement.class,name);
  if (isDeletedOrNotManaged(result)) {
    result=null;
  }
  return result;
}"
61400,"@Override public void delete(String name){
  Entitlement entitlement=find(name);
  if (entitlement == null)   return;
  Query query=entityManager.createQuery(""String_Node_Str"" + ""String_Node_Str"");
  query.setParameter(""String_Node_Str"",entitlement);
  List<SyncopeRole> roles=query.getResultList();
  for (  SyncopeRole role : roles) {
    role.removeEntitlement(entitlement);
    syncopeRoleDAO.save(role);
  }
  entityManager.remove(find(name));
}","@Override public void delete(String name){
  Entitlement entitlement=find(name);
  if (entitlement == null) {
    return;
  }
  Set<SyncopeRole> roles=entitlement.getRoles();
  for (  SyncopeRole role : roles) {
    role.removeEntitlement(entitlement);
    syncopeRoleDAO.save(role);
  }
  entityManager.remove(find(name));
}"
61401,"public List<CtClass> reificateEvoSuiteTest(String evoTestpath,String[] classpath){
  logger.debug(""String_Node_Str"" + evoTestpath + ""String_Node_Str""+ Arrays.toString(classpath));
  logger.debug(""String_Node_Str"" + Arrays.toString(new File(evoTestpath).listFiles()));
  MutationSupporter mutatorSupporter=MutationSupporter.currentSupporter;
  String codeLocation=evoTestpath;
  try {
    mutatorSupporter.buildModel(codeLocation,classpath);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(e.getMessage());
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,classpath);
  }
  List<CtType<?>> allTypes=mutatorSupporter.getFactory().Type().getAll();
  List<CtClass> ESTestClasses=new ArrayList<>();
  for (  CtType<?> ctType : allTypes) {
    if (ctType.getSimpleName().endsWith(EVOSUITE_SUFFIX) || ctType.getSimpleName().endsWith(EVOSUITE_scaffolding_SUFFIX)) {
      ESTestClasses.add((CtClass)ctType);
    }
  }
  logger.debug(""String_Node_Str"" + ESTestClasses.size());
  return ESTestClasses;
}","public List<CtClass> reificateEvoSuiteTest(String evoTestpath,String[] classpath){
  logger.debug(""String_Node_Str"" + evoTestpath + ""String_Node_Str""+ Arrays.toString(classpath));
  logger.debug(""String_Node_Str"" + Arrays.toString(new File(evoTestpath).listFiles()));
  MutationSupporter mutatorSupporter=MutationSupporter.currentSupporter;
  String codeLocation=evoTestpath;
  try {
    mutatorSupporter.buildModel(codeLocation,classpath);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(e.getMessage());
    mutatorSupporter.getFactory().getModel().setBuildModelIsFinished(false);
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,classpath);
  }
  List<CtType<?>> allTypes=mutatorSupporter.getFactory().Type().getAll();
  List<CtClass> ESTestClasses=new ArrayList<>();
  for (  CtType<?> ctType : allTypes) {
    if (ctType.getSimpleName().endsWith(EVOSUITE_SUFFIX) || ctType.getSimpleName().endsWith(EVOSUITE_scaffolding_SUFFIX)) {
      ESTestClasses.add((CtClass)ctType);
    }
  }
  logger.debug(""String_Node_Str"" + ESTestClasses.size());
  return ESTestClasses;
}"
61402,"/** 
 * Compile the original code
 * @param properties
 */
protected void compileProject(ProjectConfiguration properties){
  final Launcher launcher=new Launcher();
  for (  String s : properties.getOriginalDirSrc())   launcher.addInputResource(s);
  for (  String s : properties.getTestDirSrc())   launcher.addInputResource(s);
  String binoutput=properties.getWorkingDirForBytecode() + File.separator + (ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  launcher.setBinaryOutputDirectory(binoutput);
  log.debug(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(ConfigurationProperties.getPropertyBool(""String_Node_Str""));
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.getEnvironment().setSourceClasspath(properties.getDependenciesString().split(File.pathSeparator));
  launcher.buildModel();
  launcher.getModelBuilder().generateProcessedSourceFiles(OutputType.COMPILATION_UNITS);
  launcher.getModelBuilder().compile(InputType.CTTYPES);
}","/** 
 * Compile the original code
 * @param properties
 */
protected void compileProject(ProjectConfiguration properties){
  final Launcher launcher=new Launcher();
  for (  String path_src : properties.getOriginalDirSrc()) {
    log.debug(""String_Node_Str"" + path_src);
    launcher.addInputResource(path_src);
  }
  for (  String path_test : properties.getTestDirSrc()) {
    log.debug(""String_Node_Str"" + path_test);
    launcher.addInputResource(path_test);
  }
  String binoutput=properties.getWorkingDirForBytecode() + File.separator + (ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  launcher.setBinaryOutputDirectory(binoutput);
  log.info(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(ConfigurationProperties.getPropertyBool(""String_Node_Str""));
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.getEnvironment().setSourceClasspath(properties.getDependenciesString().split(File.pathSeparator));
  launcher.buildModel();
  launcher.getModelBuilder().generateProcessedSourceFiles(OutputType.COMPILATION_UNITS);
  launcher.getModelBuilder().compile(InputType.FILES);
}"
61403,"@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=null;
        if (vStat instanceof AstorOutputStatus)         value=parser.parse(""String_Node_Str"" + vStat + ""String_Node_Str"");
 else         value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=null;
        if (vStat instanceof AstorOutputStatus)         value=parser.parse(""String_Node_Str"" + vStat + ""String_Node_Str"");
 else         value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return statsjsonRoot;
}"
61404,"public void buildModel(String srcPathToBuild,String bytecodePathToBuild,String[] classpath){
  JDTBasedSpoonCompiler jdtSpoonModelBuilder=null;
  logger.info(""String_Node_Str"" + srcPathToBuild + ""String_Node_Str""+ factory.getEnvironment().getComplianceLevel());
  factory.getEnvironment().setPreserveLineNumbers(ConfigurationProperties.getPropertyBool(""String_Node_Str""));
  jdtSpoonModelBuilder=new JDTBasedSpoonCompiler(factory);
  String[] sources=srcPathToBuild.split(File.pathSeparator);
  for (  String src : sources) {
    if (!src.trim().isEmpty())     jdtSpoonModelBuilder.addInputSource(new File(src));
  }
  logger.info(""String_Node_Str"" + Arrays.toString(classpath));
  jdtSpoonModelBuilder.setSourceClasspath(classpath);
  jdtSpoonModelBuilder.build();
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    jdtSpoonModelBuilder.setSourceOutputDirectory(new File(srcPathToBuild));
    jdtSpoonModelBuilder.generateProcessedSourceFiles(OutputType.COMPILATION_UNITS);
    jdtSpoonModelBuilder.setBinaryOutputDirectory(new File(bytecodePathToBuild));
    jdtSpoonModelBuilder.compile(InputType.CTTYPES);
  }
}","public void buildModel(String srcPathToBuild,String bytecodePathToBuild,String[] classpath){
  JDTBasedSpoonCompiler jdtSpoonModelBuilder=null;
  logger.info(""String_Node_Str"" + srcPathToBuild + ""String_Node_Str""+ factory.getEnvironment().getComplianceLevel());
  factory.getEnvironment().setPreserveLineNumbers(ConfigurationProperties.getPropertyBool(""String_Node_Str""));
  jdtSpoonModelBuilder=new JDTBasedSpoonCompiler(factory);
  String[] sources=srcPathToBuild.split(File.pathSeparator);
  for (  String src : sources) {
    if (!src.trim().isEmpty())     jdtSpoonModelBuilder.addInputSource(new File(src));
  }
  logger.info(""String_Node_Str"" + Arrays.toString(classpath));
  jdtSpoonModelBuilder.setSourceClasspath(classpath);
  jdtSpoonModelBuilder.build();
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    factory.getEnvironment().setSourceOutputDirectory(new File(srcPathToBuild));
    jdtSpoonModelBuilder.generateProcessedSourceFiles(OutputType.COMPILATION_UNITS);
    jdtSpoonModelBuilder.setBinaryOutputDirectory(new File(bytecodePathToBuild));
    jdtSpoonModelBuilder.compile(InputType.CTTYPES);
  }
}"
61405,"@Override public List<Ingredient> transform(ModificationPoint modificationPoint,Ingredient ingredient){
  ExecutionContext collectedValues=contextColector.collectValues(AstorMain.projectFacade,modificationPoint);
  CtType expectedType=null;
  if (modificationPoint.getCodeElement() instanceof CtExpression) {
    CtExpression exp=(CtExpression)modificationPoint.getCodeElement();
    expectedType=exp.getType().getTypeDeclaration();
  }
  List<CtElement> synthesizedElements=this.synthesizer.executeSynthesis(modificationPoint,modificationPoint.getCodeElement(),expectedType,modificationPoint.getContextOfModificationPoint(),collectedValues);
  List<Ingredient> ingredients=new ArrayList<>();
  for (  CtElement ctElement : synthesizedElements) {
    ingredients.add(new Ingredient(ctElement));
  }
  return ingredients;
}","@Override public List<Ingredient> transform(ModificationPoint modificationPoint,Ingredient ingredient){
  ExecutionContext collectedValues=getContext(modificationPoint);
  CtType expectedType=null;
  if (modificationPoint.getCodeElement() instanceof CtExpression) {
    CtExpression exp=(CtExpression)modificationPoint.getCodeElement();
    expectedType=exp.getType().getTypeDeclaration();
  }
  List<CtElement> synthesizedElements=this.synthesizer.executeSynthesis(modificationPoint,modificationPoint.getCodeElement(),expectedType,modificationPoint.getContextOfModificationPoint(),collectedValues);
  List<Ingredient> ingredients=new ArrayList<>();
  for (  CtElement ctElement : synthesizedElements) {
    ingredients.add(new Ingredient(ctElement));
  }
  return ingredients;
}"
61406,"public Candidates combine(Candidates candidates,Object angelicValue,long maxTime,NopolContext nopolContext){
  this.nopolContext=nopolContext;
  max_number_combinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  maxDepth=nopolContext.getSynthesisDepth();
  this.maxTime=maxTime;
  this.startTime=System.currentTimeMillis();
  executionTime=System.currentTimeMillis() - startTime;
  logger.debug(""String_Node_Str"" + candidates.size() + ""String_Node_Str"");
  Candidates result=new Candidates();
  result.addAll(candidates);
  List<Expression> lastTurn=new ArrayList<>();
  lastTurn.addAll(candidates);
  executionTime=System.currentTimeMillis() - startTime;
  List<Operator> operators=new ArrayList<>();
  operators.addAll(Arrays.asList(UnaryOperator.values()));
  operators.addAll(Arrays.asList(BinaryOperator.values()));
  for (int i=0; i < maxDepth - 1 && !stop && executionTime <= maxTime; i++) {
    System.out.println(""String_Node_Str"" + i);
    lastTurn.addAll(newCombiner(lastTurn,operators,i == maxDepth - 2 ? angelicValue : null));
    executionTime=System.currentTimeMillis() - startTime;
  }
  result.addAll(lastTurn);
  logger.debug(""String_Node_Str"" + lastTurn.size() + ""String_Node_Str"");
  return result;
}","public Candidates combine(Candidates candidates,Object angelicValue,long maxTime,NopolContext nopolContext){
  this.nopolContext=nopolContext;
  max_number_combinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  maxDepth=nopolContext.getSynthesisDepth();
  this.maxTime=maxTime;
  this.startTime=System.currentTimeMillis();
  executionTime=System.currentTimeMillis() - startTime;
  logger.debug(""String_Node_Str"" + candidates.size() + ""String_Node_Str"");
  Candidates result=new Candidates();
  result.addAll(candidates);
  List<Expression> lastTurn=new ArrayList<>();
  lastTurn.addAll(candidates);
  executionTime=System.currentTimeMillis() - startTime;
  List<Operator> operators=new ArrayList<>();
  operators.addAll(Arrays.asList(UnaryOperator.values()));
  operators.addAll(Arrays.asList(BinaryOperator.values()));
  for (int i=0; i < maxDepth - 1 && !stop; i++) {
    System.out.println(""String_Node_Str"" + i);
    List<Expression> expr=newCombiner(lastTurn,operators,i == maxDepth - 2 ? angelicValue : null);
    lastTurn.addAll(expr);
    executionTime=System.currentTimeMillis() - startTime;
  }
  logger.debug(""String_Node_Str"" + lastTurn.size() + ""String_Node_Str"");
  return result;
}"
61407,"public Candidates combineValues(){
  final Candidates result=new Candidates();
  List<String> collectedTests=new ArrayList<>(values.keySet());
  Collections.sort(collectedTests,new Comparator<String>(){
    @Override public int compare(    String s,    String t1){
      if (values.get(t1).isEmpty()) {
        return -1;
      }
      if (values.get(s).isEmpty()) {
        return 1;
      }
      return values.get(t1).get(0).size() - values.get(s).get(0).size();
    }
  }
);
  for (int i=0; i < collectedTests.size(); i++) {
    final String key=collectedTests.get(i);
    List<Candidates> listValue=values.get(key);
    for (    Candidates expressions : listValue) {
      for (      Expression expression : expressions) {
        expression.getValue().setConstant(isConstant(expression));
      }
    }
  }
  long currentTime=System.currentTimeMillis();
  Candidates lastCollectedValues=null;
  for (int k=0; k < collectedTests.size(); k++) {
    final String key=collectedTests.get(k);
    List<Candidates> listValue=values.get(key);
    currentTime=System.currentTimeMillis();
    for (int i=0; i < listValue.size(); i++) {
      Candidates eexps=listValue.get(i);
      if (eexps == null) {
        continue;
      }
      if (lastCollectedValues != null && lastCollectedValues.intersection(eexps,false).size() == eexps.size()) {
        continue;
      }
      lastCollectedValues=eexps;
      if (nopolContext.isSortExpressions()) {
        Collections.sort(eexps,Collections.reverseOrder());
      }
      final Object angelicValue;
      if (i < oracle.get(key).length) {
        angelicValue=oracle.get(key)[i];
      }
 else {
        angelicValue=oracle.get(key)[oracle.get(key).length - 1];
      }
      currentTime=System.currentTimeMillis();
      for (int j=0; j < eexps.size(); j++) {
        Expression expression=eexps.get(j);
        if (expression == null || expression.getValue() == null) {
          continue;
        }
        if (angelicValue.equals(expression.getValue().getRealValue()) && checkExpression(key,i,expression)) {
          result.add(expression);
          if (nopolContext.isOnlyOneSynthesisResult()) {
            return result;
          }
        }
      }
      DataCombinerModified combiner=new DataCombinerModified();
      final int iterationNumber=i;
      combiner.addCombineListener(new DataCombinerModified.CombineListener(){
        @Override public boolean check(        Expression expression){
          if (!angelicValue.equals(expression.getValue().getRealValue())) {
            return false;
          }
          if (checkExpression(key,iterationNumber,expression)) {
            result.add(expression);
            return true;
          }
          return false;
        }
      }
);
      currentTime=System.currentTimeMillis();
      long maxCombinerTime=TimeUnit.SECONDS.toMillis(10);
      combiner.combine(eexps,angelicValue,maxCombinerTime,nopolContext);
      if (result.size() > 0) {
        if (nopolContext.isOnlyOneSynthesisResult()) {
        }
      }
    }
  }
  return result;
}","public Candidates combineValues(){
  final Candidates result=new Candidates();
  List<String> collectedTests=new ArrayList<>(values.keySet());
  Collections.sort(collectedTests,new Comparator<String>(){
    @Override public int compare(    String s,    String t1){
      if (values.get(t1).isEmpty()) {
        return -1;
      }
      if (values.get(s).isEmpty()) {
        return 1;
      }
      return values.get(t1).get(0).size() - values.get(s).get(0).size();
    }
  }
);
  for (int i=0; i < collectedTests.size(); i++) {
    final String key=collectedTests.get(i);
    List<Candidates> listValue=values.get(key);
    for (    Candidates expressions : listValue) {
      for (      Expression expression : expressions) {
        expression.getValue().setConstant(isConstant(expression));
      }
    }
  }
  long currentTime=System.currentTimeMillis();
  Candidates lastCollectedValues=null;
  for (int k=0; k < collectedTests.size(); k++) {
    final String key=collectedTests.get(k);
    List<Candidates> listValue=values.get(key);
    currentTime=System.currentTimeMillis();
    for (int i=0; i < listValue.size(); i++) {
      Candidates eexps=listValue.get(i);
      if (eexps == null) {
        continue;
      }
      if (lastCollectedValues != null && lastCollectedValues.intersection(eexps,false).size() == eexps.size()) {
        continue;
      }
      lastCollectedValues=eexps;
      if (nopolContext.isSortExpressions()) {
        Collections.sort(eexps,Collections.reverseOrder());
      }
      final Object angelicValue;
      if (i < oracle.get(key).length) {
        angelicValue=oracle.get(key)[i];
      }
 else {
        angelicValue=oracle.get(key)[oracle.get(key).length - 1];
      }
      currentTime=System.currentTimeMillis();
      for (int j=0; j < eexps.size(); j++) {
        Expression expression=eexps.get(j);
        if (expression == null || expression.getValue() == null) {
          continue;
        }
        if (angelicValue.equals(expression.getValue().getRealValue()) && checkExpression(key,i,expression)) {
          result.add(expression);
          if (nopolContext.isOnlyOneSynthesisResult()) {
            return result;
          }
        }
      }
      DataCombinerModified combiner=new DataCombinerModified();
      final int iterationNumber=i;
      combiner.addCombineListener(new DataCombinerModified.CombineListener(){
        @Override public boolean check(        Expression expression){
          if (!angelicValue.equals(expression.getValue().getRealValue())) {
            return false;
          }
          if (checkExpression(key,iterationNumber,expression)) {
            result.add(expression);
            return true;
          }
          return false;
        }
      }
);
      currentTime=System.currentTimeMillis();
      long maxCombinerTime=TimeUnit.SECONDS.toMillis(10);
      Candidates candidates=combiner.combine(eexps,angelicValue,maxCombinerTime,nopolContext);
    }
  }
  return result;
}"
61408,"@Override public Candidates combineValues(){
  final Candidates result=new Candidates();
  List<String> collectedTests=new ArrayList<>(values.keySet());
  Collections.sort(collectedTests,new Comparator<String>(){
    @Override public int compare(    String s,    String t1){
      if (values.get(t1).isEmpty()) {
        return -1;
      }
      if (values.get(s).isEmpty()) {
        return 1;
      }
      return values.get(t1).get(0).size() - values.get(s).get(0).size();
    }
  }
);
  for (int i=0; i < collectedTests.size(); i++) {
    final String key=collectedTests.get(i);
    List<Candidates> listValue=values.get(key);
    for (    Candidates expressions : listValue) {
      for (      Expression expression : expressions) {
        expression.getValue().setConstant(isConstant(expression));
      }
    }
  }
  long currentTime=System.currentTimeMillis();
  Candidates lastCollectedValues=null;
  for (int k=0; k < collectedTests.size(); k++) {
    final String key=collectedTests.get(k);
    List<Candidates> listValue=values.get(key);
    currentTime=System.currentTimeMillis();
    for (int i=0; i < listValue.size(); i++) {
      Candidates eexps=listValue.get(i);
      if (eexps == null) {
        continue;
      }
      if (lastCollectedValues != null && lastCollectedValues.intersection(eexps,false).size() == eexps.size()) {
        continue;
      }
      lastCollectedValues=eexps;
      if (nopolContext.isSortExpressions()) {
        Collections.sort(eexps,Collections.reverseOrder());
      }
      currentTime=System.currentTimeMillis();
      for (int j=0; j < eexps.size(); j++) {
        Expression expression=eexps.get(j);
        if (expression == null || expression.getValue() == null) {
          continue;
        }
        if (checkExpression(key,i,expression)) {
          result.add(expression);
          if (nopolContext.isOnlyOneSynthesisResult()) {
            return result;
          }
        }
      }
      DataCombinerModified combiner=new DataCombinerModified();
      final int iterationNumber=i;
      combiner.addCombineListener(new DataCombinerModified.CombineListener(){
        @Override public boolean check(        Expression expression){
          if (checkExpression(key,iterationNumber,expression)) {
            return true;
          }
          return false;
        }
      }
);
      currentTime=System.currentTimeMillis();
      long maxCombinerTime=TimeUnit.SECONDS.toMillis(10);
      Candidates result1=combiner.combine(eexps,null,maxCombinerTime,nopolContext);
      result.addAll(result1);
      if (result.size() > 0) {
        if (nopolContext.isOnlyOneSynthesisResult()) {
        }
      }
    }
  }
  return result;
}","@Override public Candidates combineValues(){
  final Candidates result=new Candidates();
  List<String> collectedTests=new ArrayList<>(values.keySet());
  Collections.sort(collectedTests,new Comparator<String>(){
    @Override public int compare(    String s,    String t1){
      if (values.get(t1).isEmpty()) {
        return -1;
      }
      if (values.get(s).isEmpty()) {
        return 1;
      }
      return values.get(t1).get(0).size() - values.get(s).get(0).size();
    }
  }
);
  for (int i=0; i < collectedTests.size(); i++) {
    final String key=collectedTests.get(i);
    List<Candidates> listValue=values.get(key);
    for (    Candidates expressions : listValue) {
      for (      Expression expression : expressions) {
        expression.getValue().setConstant(isConstant(expression));
      }
    }
  }
  long currentTime=System.currentTimeMillis();
  Candidates lastCollectedValues=null;
  for (int k=0; k < collectedTests.size(); k++) {
    final String key=collectedTests.get(k);
    List<Candidates> listValue=values.get(key);
    currentTime=System.currentTimeMillis();
    for (int i=0; i < listValue.size(); i++) {
      Candidates eexps=listValue.get(i);
      if (eexps == null) {
        continue;
      }
      if (lastCollectedValues != null && lastCollectedValues.intersection(eexps,false).size() == eexps.size()) {
        continue;
      }
      lastCollectedValues=eexps;
      if (nopolContext.isSortExpressions()) {
        Collections.sort(eexps,Collections.reverseOrder());
      }
      currentTime=System.currentTimeMillis();
      for (int j=0; j < eexps.size(); j++) {
        Expression expression=eexps.get(j);
        if (expression == null || expression.getValue() == null) {
          continue;
        }
        if (checkExpression(key,i,expression)) {
          result.add(expression);
          if (nopolContext.isOnlyOneSynthesisResult()) {
            return result;
          }
        }
      }
      DataCombinerModified combiner=new DataCombinerModified();
      final int iterationNumber=i;
      combiner.addCombineListener(new DataCombinerModified.CombineListener(){
        @Override public boolean check(        Expression expression){
          if (checkExpression(key,iterationNumber,expression)) {
            result.add(expression);
            return true;
          }
          return false;
        }
      }
);
      currentTime=System.currentTimeMillis();
      long maxCombinerTime=TimeUnit.SECONDS.toMillis(10);
      Candidates result1=combiner.combine(eexps,null,maxCombinerTime,nopolContext);
    }
  }
  return result;
}"
61409,"@Override public boolean check(Expression expression){
  if (checkExpression(key,iterationNumber,expression)) {
    return true;
  }
  return false;
}","@Override public boolean check(Expression expression){
  if (checkExpression(key,iterationNumber,expression)) {
    result.add(expression);
    return true;
  }
  return false;
}"
61410,"@Test public void testSynthesis2_Int() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",(""String_Node_Str""));
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  String[] tests=sc.getCoverTest(mp8);
  Map<String,Object[]> oracle=new HashMap<>();
  for (  String testCase : tests) {
    oracle.put(testCase,new Integer[]{0});
  }
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8,oracle,tests);
  DynamothSynthesizer synthesis=new DynamothSynthesizer(dynamothCodeGenesis.getValues(),dynamothCodeGenesis.getNopolContext(),dynamothCodeGenesis.getOracle());
  Candidates candidates=synthesis.combineValues();
  printValuesCollected(dynamothCodeGenesis);
  System.out.println(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ candidates);
  assertTrue(candidates.size() > 0);
  for (int i=0; i < candidates.size(); i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ candidates.get(i));
  }
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}","@Test public void testSynthesis2_Int() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",(""String_Node_Str""));
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  String[] tests=sc.getCoverTest(mp8);
  Map<String,Object[]> oracle=new HashMap<>();
  for (  String testCase : tests) {
    oracle.put(testCase,new Integer[]{0});
  }
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8,oracle,tests);
  DynamothSynthesizer synthesis=new DynamothSynthesizer(dynamothCodeGenesis.getValues(),dynamothCodeGenesis.getNopolContext(),dynamothCodeGenesis.getOracle());
  Candidates candidates=synthesis.combineValues();
  printValuesCollected(dynamothCodeGenesis);
  System.out.println(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ candidates);
  assertTrue(candidates.size() > 0);
  for (int i=0; i < candidates.size(); i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ candidates.get(i));
  }
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}"
61411,"@Test public void testSynthesis1_boolean() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",(""String_Node_Str""));
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8);
  DynamothSynthesizer synthesis=new DynamothSynthesizer(dynamothCodeGenesis.getValues(),dynamothCodeGenesis.getNopolContext(),dynamothCodeGenesis.getOracle());
  Candidates candidates=synthesis.combineValues();
  printValuesCollected(dynamothCodeGenesis);
  System.out.println(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ candidates);
  assertTrue(candidates.size() > 0);
  for (int i=0; i < candidates.size(); i++) {
    Expression expr=candidates.get(i);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ expr+ ""String_Node_Str""+ expr.getValue());
    assertTrue(Boolean.TRUE.equals(expr.getValue()));
  }
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}","@Test public void testSynthesis1_boolean() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",(""String_Node_Str""));
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8);
  DynamothSynthesizer synthesis=new DynamothSynthesizer(dynamothCodeGenesis.getValues(),dynamothCodeGenesis.getNopolContext(),dynamothCodeGenesis.getOracle());
  Candidates candidates=synthesis.combineValues();
  printValuesCollected(dynamothCodeGenesis);
  System.out.println(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ candidates);
  assertTrue(candidates.size() > 0);
  for (int i=0; i < candidates.size(); i++) {
    Expression expr=candidates.get(i);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ expr+ ""String_Node_Str""+ expr.getValue());
    assertTrue(""String_Node_Str"" + expr.getValue().getRealValue(),Boolean.TRUE.equals(expr.getValue().getRealValue()));
  }
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}"
61412,"@Test public void testSymthesisWOOrale() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",""String_Node_Str"" + ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier + File.pathSeparator+ SynthesisBasedTransformationStrategy.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.CODE_SYNTHESIS.identifier+ File.pathSeparator+ DynamothIngredientSynthesizer.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.CONTEXT_COLLECTOR.identifier+ File.pathSeparator+ DynamothCollectorFacade.class.getCanonicalName());
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  String[] tests=sc.getCoverTest(mp8);
  Map<String,Object[]> oracle=new HashMap<>();
  for (  String testCase : tests) {
    oracle.put(testCase,new Integer[]{0});
  }
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8,oracle,tests);
  dynamothCodeGenesis.getNopolContext().setSynthesisDepth(3);
  assertTrue(dynamothCodeGenesis.getValues().size() > 0);
  DynamothSynthesisContext data=new DynamothSynthesisContext(dynamothCodeGenesis.getValues());
  data.setNopolContext(dynamothCodeGenesis.getNopolContext());
  DynamothSynthesizerWOracle soo=new DynamothSynthesizerWOracle(data);
  Candidates candidates=soo.combineValues();
  assertTrue(candidates.size() > 0);
  Set<Object> values=new HashSet<>();
  MapList<Object,Expression> clusterValues=new MapList<>();
  for (int i=0; i < candidates.size(); i++) {
    Expression expr=candidates.get(i);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ expr+ ""String_Node_Str""+ expr.getValue());
    values.add(expr.getValue().getRealValue());
    clusterValues.add(expr.getValue().getRealValue(),expr);
  }
  System.out.println(""String_Node_Str"" + candidates.size());
  System.out.println(""String_Node_Str"" + values.size() + ""String_Node_Str""+ values);
  System.out.println(""String_Node_Str"" + clusterValues.keySet().size() + ""String_Node_Str""+ clusterValues);
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}","@Test public void testSymthesisWOOrale() throws Exception {
  AstorMain main1=new AstorMain();
  CommandSummary cs=MathCommandsTests.getMath70Command();
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  cs.append(""String_Node_Str"",""String_Node_Str"" + ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier + File.pathSeparator+ SynthesisBasedTransformationStrategy.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.CODE_SYNTHESIS.identifier+ File.pathSeparator+ DynamothIngredientSynthesizer.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.CONTEXT_COLLECTOR.identifier+ File.pathSeparator+ DynamothCollectorFacade.class.getCanonicalName());
  log.info(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  DynamothCollectorFacade sc=new DynamothCollectorFacade();
  SuspiciousModificationPoint mp8=(SuspiciousModificationPoint)variant.getModificationPoints().get(0);
  String[] tests=sc.getCoverTest(mp8);
  Map<String,Object[]> oracle=new HashMap<>();
  for (  String testCase : tests) {
    oracle.put(testCase,new Integer[]{0});
  }
  DynamothCollector dynamothCodeGenesis=sc.createCollector(main1.getEngine().getProjectFacade(),mp8,oracle,tests);
  dynamothCodeGenesis.getNopolContext().setSynthesisDepth(3);
  assertTrue(dynamothCodeGenesis.getValues().size() > 0);
  DynamothSynthesisContext data=new DynamothSynthesisContext(dynamothCodeGenesis.getValues());
  data.setNopolContext(dynamothCodeGenesis.getNopolContext());
  DynamothSynthesizerWOracle soo=new DynamothSynthesizerWOracle(data);
  Candidates candidates=soo.combineValues();
  assertTrue(candidates.size() > 0);
  Set<Object> differentValues=new HashSet<>();
  MapList<Object,Expression> clusterValues=new MapList<>();
  for (int i=0; i < candidates.size(); i++) {
    Expression expr=candidates.get(i);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ expr+ ""String_Node_Str""+ expr.getValue());
    differentValues.add(expr.getValue().getRealValue());
    clusterValues.add(expr.getValue().getRealValue(),expr);
  }
  System.out.println(""String_Node_Str"" + candidates.size());
  System.out.println(""String_Node_Str"" + differentValues.size() + ""String_Node_Str""+ differentValues);
  System.out.println(""String_Node_Str"" + clusterValues.keySet().size() + ""String_Node_Str""+ clusterValues);
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(differentValues.size() > 170);
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
  assertTrue(candidates.stream().filter(e -> e.toString().equals(""String_Node_Str"")).findAny().isPresent());
}"
61413,"/** 
 * A Program instances is created from the list of suspicious. For each suspiciuos a list of modif point is created.
 * @param suspiciousList
 * @param idProgramInstance
 * @return
 */
private ProgramVariant createProgramInstance(List<SuspiciousCode> suspiciousList,int idProgramInstance){
  ProgramVariant progInstance=new ProgramVariant(idProgramInstance);
  log.debug(""String_Node_Str"" + idProgramInstance);
  if (!suspiciousList.isEmpty()) {
    for (    SuspiciousCode suspiciousCode : suspiciousList) {
      List<SuspiciousModificationPoint> modifPoints=createModificationPoints(suspiciousCode,progInstance);
      if (modifPoints != null && !modifPoints.isEmpty()) {
        progInstance.addModificationPoints(modifPoints);
      }
    }
    log.info(""String_Node_Str"" + suspiciousList.size() + ""String_Node_Str""+ progInstance.getModificationPoints().size());
  }
 else {
    List<SuspiciousModificationPoint> pointsFromAllStatements=createModificationPoints(progInstance);
    progInstance.getModificationPoints().addAll(pointsFromAllStatements);
  }
  log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  int maxModPoints=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  if (progInstance.getModificationPoints().size() > maxModPoints) {
    progInstance.setModificationPoints(progInstance.getModificationPoints().subList(0,maxModPoints));
    log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  }
  for (int i=0; i < progInstance.getModificationPoints().size(); i++) {
    ModificationPoint mp=progInstance.getModificationPoints().get(0);
    mp.identified=i + 1;
  }
  return progInstance;
}","/** 
 * A Program instances is created from the list of suspicious. For each suspiciuos a list of modif point is created.
 * @param suspiciousList
 * @param idProgramInstance
 * @return
 */
private ProgramVariant createProgramInstance(List<SuspiciousCode> suspiciousList,int idProgramInstance){
  ProgramVariant progInstance=new ProgramVariant(idProgramInstance);
  log.debug(""String_Node_Str"" + idProgramInstance);
  if (!suspiciousList.isEmpty()) {
    for (    SuspiciousCode suspiciousCode : suspiciousList) {
      List<SuspiciousModificationPoint> modifPoints=createModificationPoints(suspiciousCode,progInstance);
      if (modifPoints != null && !modifPoints.isEmpty()) {
        progInstance.addModificationPoints(modifPoints);
      }
    }
    log.info(""String_Node_Str"" + suspiciousList.size() + ""String_Node_Str""+ progInstance.getModificationPoints().size());
  }
 else {
    List<SuspiciousModificationPoint> pointsFromAllStatements=createModificationPoints(progInstance);
    progInstance.getModificationPoints().addAll(pointsFromAllStatements);
  }
  log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  int maxModPoints=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  if (progInstance.getModificationPoints().size() > maxModPoints) {
    progInstance.setModificationPoints(progInstance.getModificationPoints().subList(0,maxModPoints));
    log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  }
  for (int i=0; i < progInstance.getModificationPoints().size(); i++) {
    ModificationPoint mp=progInstance.getModificationPoints().get(i);
    mp.identified=i;
  }
  return progInstance;
}"
61414,"@Test public void testBT_Math85_1() throws Exception {
  int maxSolutions=4;
  CommandSummary command=MathCommandsTests.getMath85Command();
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",EvalTOSBTApproach.class.getCanonicalName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"" + maxSolutions);
  AstorMain main=new AstorMain();
  main.execute(command.flat());
  assertTrue(main.getEngine() instanceof EvalTOSBTApproach);
  EvalTOSBTApproach approach=(EvalTOSBTApproach)main.getEngine();
  ModificationPoint mp198=approach.getVariants().get(0).getModificationPoints().stream().filter(e -> (e.getCodeElement().getPosition().getLine() == 198 && e.getCodeElement().getPosition().getFile().getName().equals(""String_Node_Str""))).findAny().get();
  assertNotNull(mp198);
  approach.MAX_GENERATIONS=1000;
  approach.analyzeModificationPoint(approach.getVariants().get(0),mp198);
  assertTrue(approach.getSolutions().size() > 0);
  assertEquals(maxSolutions,approach.getSolutions().size());
  approach.atEnd();
}","@Test public void testBT_Math85_1() throws Exception {
  int maxSolutions=4;
  CommandSummary command=MathCommandsTests.getMath85Command();
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",EvalTOSBTApproach.class.getCanonicalName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"" + maxSolutions);
  AstorMain main=new AstorMain();
  main.execute(command.flat());
  assertTrue(main.getEngine() instanceof EvalTOSBTApproach);
  EvalTOSBTApproach approach=(EvalTOSBTApproach)main.getEngine();
  ModificationPoint mp198=approach.getVariants().get(0).getModificationPoints().stream().filter(e -> (e.getCodeElement().getPosition().getLine() == 198 && e.getCodeElement().getPosition().getFile().getName().equals(""String_Node_Str""))).findAny().get();
  assertNotNull(mp198);
  assertEquals(40,mp198.identified);
  approach.MAX_GENERATIONS=1000;
  approach.analyzeModificationPoint(approach.getVariants().get(0),mp198);
  assertTrue(approach.getSolutions().size() > 0);
  assertEquals(maxSolutions,approach.getSolutions().size());
  approach.atEnd();
}"
61415,"public Candidates combine(Candidates candidates,Object angelicValue,long maxTime,NopolContext nopolContext){
  this.nopolContext=nopolContext;
  max_number_combinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  maxDepth=nopolContext.getSynthesisDepth();
  this.maxTime=maxTime;
  this.startTime=System.currentTimeMillis();
  executionTime=System.currentTimeMillis() - startTime;
  logger.debug(""String_Node_Str"" + candidates.size() + ""String_Node_Str"");
  Candidates result=new Candidates();
  result.addAll(candidates);
  List<Expression> lastTurn=new ArrayList<>();
  lastTurn.addAll(candidates);
  executionTime=System.currentTimeMillis() - startTime;
  List<Operator> operators=new ArrayList<>();
  operators.addAll(Arrays.asList(UnaryOperator.values()));
  operators.addAll(Arrays.asList(BinaryOperator.values()));
  for (int i=0; i < maxDepth - 1 && !stop; i++) {
    System.out.println(""String_Node_Str"" + i);
    List<Expression> expr=newCombiner(lastTurn,operators,i == maxDepth - 2 ? angelicValue : null);
    lastTurn.addAll(expr);
    executionTime=System.currentTimeMillis() - startTime;
  }
  logger.debug(""String_Node_Str"" + lastTurn.size() + ""String_Node_Str"");
  return result;
}","public Candidates combine(Candidates candidates,Object angelicValue,long maxTime,NopolContext nopolContext){
  this.nopolContext=nopolContext;
  max_number_combinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  maxDepth=nopolContext.getSynthesisDepth();
  this.maxTime=maxTime;
  this.startTime=System.currentTimeMillis();
  executionTime=System.currentTimeMillis() - startTime;
  logger.debug(""String_Node_Str"" + candidates.size() + ""String_Node_Str"");
  Candidates result=new Candidates();
  result.addAll(candidates);
  List<Expression> lastTurn=new ArrayList<>();
  lastTurn.addAll(candidates);
  executionTime=System.currentTimeMillis() - startTime;
  List<Operator> operators=new ArrayList<>();
  operators.addAll(Arrays.asList(UnaryOperator.values()));
  operators.addAll(Arrays.asList(BinaryOperator.values()));
  for (int i=0; i < maxDepth - 1 && !stop; i++) {
    List<Expression> expr=newCombiner(lastTurn,operators,i == maxDepth - 2 ? angelicValue : null);
    lastTurn.addAll(expr);
    executionTime=System.currentTimeMillis() - startTime;
  }
  logger.debug(""String_Node_Str"" + lastTurn.size() + ""String_Node_Str"");
  return result;
}"
61416,"public String toString(){
  String out=""String_Node_Str"";
  int nrtest=0;
  for (  String key : values.keySet()) {
    out+=(""String_Node_Str"" + nrtest++ + ""String_Node_Str""+ key) + ""String_Node_Str"";
    List<Candidates> executions=values.get(key);
    out+=(""String_Node_Str"" + executions.size()) + ""String_Node_Str"";
    int i=0;
    for (    Candidates candidates2 : executions) {
      out+=(""String_Node_Str"" + (i++) + ""String_Node_Str""+ candidates2.size()) + ""String_Node_Str"";
      int j=0;
      for (      fr.inria.lille.repair.expression.Expression expression : candidates2) {
        out+=(""String_Node_Str"" + i + ""String_Node_Str""+ (j++)+ ""String_Node_Str""+ expression.asPatch()+ ""String_Node_Str""+ expression.getValue()) + ""String_Node_Str"";
      }
    }
  }
  return out;
}","public String toString(){
  String out=""String_Node_Str"";
  int nrtest=0;
  for (  String key : values.keySet()) {
    out+=(""String_Node_Str"" + nrtest++ + ""String_Node_Str""+ key) + ""String_Node_Str"";
    List<Candidates> executions=values.get(key);
    out+=(""String_Node_Str"" + executions.size()) + ""String_Node_Str"";
    int i=0;
    for (    Candidates candidates2 : executions) {
      out+=(""String_Node_Str"" + (i++) + ""String_Node_Str""+ candidates2.size()) + ""String_Node_Str"";
      int j=0;
      for (      fr.inria.lille.repair.expression.Expression expression : candidates2) {
        try {
          out+=(""String_Node_Str"" + i + ""String_Node_Str""+ (j++)+ ""String_Node_Str""+ expression.asPatch()+ ""String_Node_Str""+ expression.getValue()) + ""String_Node_Str"";
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e);
        }
      }
    }
  }
  return out;
}"
61417,"@Deprecated private List<Expression> combineComplex(List<Expression> toCombine,int previousSize,Object value){
  Expression nullExpression=AccessFactory.literal(null,nopolContext);
  logger.debug(""String_Node_Str"" + toCombine.size() + ""String_Node_Str"");
  List<Expression> result=new ArrayList<>();
  if (value != null && value.getClass() != Boolean.class) {
    return result;
  }
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  executionTime=System.currentTimeMillis() - startTime;
  for (int i=0; i < toCombine.size() && executionTime <= maxTime; i++) {
    Expression expression=toCombine.get(i);
    if (expression.getValue().getType() != null && (Number.class.isAssignableFrom(expression.getValue().getType()) || Boolean.class.isAssignableFrom(expression.getValue().getType()))) {
      continue;
    }
    if (expression.getValue().isPrimitive()) {
      continue;
    }
    BinaryExpression binaryExpression=new BinaryExpressionImpl(BinaryOperator.EQ,expression,nullExpression,nopolContext);
    if (addExpressionIn(binaryExpression,result,value != null)) {
      if (!expression.sameExpression(nullExpression)) {
        if (callListener(binaryExpression)) {
          return result;
        }
      }
    }
    binaryExpression=CombinationFactory.create(BinaryOperator.NEQ,expression,nullExpression,nopolContext);
    if (addExpressionIn(binaryExpression,result,value != null)) {
      if (!expression.sameExpression(nullExpression)) {
        if (callListener(binaryExpression)) {
          return result;
        }
      }
    }
    executionTime=System.currentTimeMillis() - startTime;
  }
  return result;
}","@Deprecated private List<Expression> combineComplex(List<Expression> toCombine,int previousSize,Object value){
  Expression nullExpression=AccessFactory.literal(null,nopolContext);
  logger.debug(""String_Node_Str"" + toCombine.size() + ""String_Node_Str"");
  List<Expression> result=new ArrayList<>();
  if (value != null && value.getClass() != Boolean.class) {
    return result;
  }
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  executionTime=System.currentTimeMillis() - startTime;
  for (int i=0; i < toCombine.size() && executionTime <= maxTime; i++) {
    Expression expression=toCombine.get(i);
    if (expression.getValue().getType() != null && (Number.class.isAssignableFrom(expression.getValue().getType()) || Boolean.class.isAssignableFrom(expression.getValue().getType()))) {
      continue;
    }
    if (expression.getValue().isPrimitive()) {
      continue;
    }
    BinaryExpression binaryExpression=new BinaryExpressionImpl(BinaryOperator.EQ,expression,nullExpression,nopolContext);
    if (addExpressionIn(binaryExpression,result,value != null)) {
      if (!expression.sameExpression(nullExpression)) {
        if (callListener(binaryExpression)) {
          return result;
        }
      }
    }
    binaryExpression=create(BinaryOperator.NEQ,expression,nullExpression,nopolContext);
    if (addExpressionIn(binaryExpression,result,value != null)) {
      if (!expression.sameExpression(nullExpression)) {
        if (callListener(binaryExpression)) {
          return result;
        }
      }
    }
    executionTime=System.currentTimeMillis() - startTime;
  }
  return result;
}"
61418,"private List<Expression> newCombiner(final List<Expression> toCombine,final List<Operator> operators,final Object angelicValue){
  final List<Expression> result=new ArrayList<>();
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  for (  Operator operator : operators) {
    if (angelicValue != null && !operator.getReturnType().isAssignableFrom(angelicValue.getClass())) {
      continue;
    }
    int nbExpression=operator.getTypeParameters().size();
    Combination combination=new Combination(toCombine,operator,nbExpression);
    while (!combination.isEnd(this.stop)) {
      List<Expression> expressions=combination.perform(this.stop);
      CombinationExpression binaryExpression=create(operator,expressions,nopolContext);
      if (addExpressionIn(binaryExpression,result,false)) {
        if (callListener(binaryExpression)) {
          result.add(binaryExpression);
          if (nopolContext.isOnlyOneSynthesisResult() || result.size() > max_number_combinations) {
            return result;
          }
        }
      }
      if (operator instanceof BinaryOperator) {
        if (!((BinaryOperator)operator).isCommutative()) {
          binaryExpression=CombinationFactory.create(operator,Arrays.asList(expressions.get(1),expressions.get(0)),nopolContext);
          if (addExpressionIn(binaryExpression,result,false)) {
            if (callListener(binaryExpression)) {
              result.add(binaryExpression);
              if (nopolContext.isOnlyOneSynthesisResult() || result.size() > max_number_combinations) {
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}","private List<Expression> newCombiner(final List<Expression> toCombine,final List<Operator> operators,final Object angelicValue){
  final List<Expression> result=new ArrayList<>();
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  for (  Operator operator : operators) {
    if (angelicValue != null && !operator.getReturnType().isAssignableFrom(angelicValue.getClass())) {
      continue;
    }
    int nbExpression=operator.getTypeParameters().size();
    Combination combination=new Combination(toCombine,operator,nbExpression);
    while (!combination.isEnd(this.stop)) {
      List<Expression> expressions=combination.perform(this.stop);
      CombinationExpression binaryExpression=create(operator,expressions,nopolContext);
      if (addExpressionIn(binaryExpression,result,false)) {
        if (callListener(binaryExpression)) {
          result.add(binaryExpression);
          if (nopolContext.isOnlyOneSynthesisResult() || result.size() > max_number_combinations) {
            return result;
          }
        }
      }
      if (operator instanceof BinaryOperator) {
        if (!((BinaryOperator)operator).isCommutative()) {
          binaryExpression=create(operator,Arrays.asList(expressions.get(1),expressions.get(0)),nopolContext);
          if (addExpressionIn(binaryExpression,result,false)) {
            if (callListener(binaryExpression)) {
              result.add(binaryExpression);
              if (nopolContext.isOnlyOneSynthesisResult() || result.size() > max_number_combinations) {
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}"
61419,"@Deprecated private List<Expression> combinePrimitives(List<Expression> toCombine,int previousSize,Object value){
  logger.debug(""String_Node_Str"" + toCombine.size() + ""String_Node_Str"");
  List<Expression> result=new ArrayList<>();
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  executionTime=System.currentTimeMillis() - startTime;
  for (int i=0; i < toCombine.size() && executionTime <= maxTime; i++) {
    Expression expression=toCombine.get(i);
    if (expression.getValue().getType() == null || (!Number.class.isAssignableFrom(expression.getValue().getType()) && !Boolean.class.isAssignableFrom(expression.getValue().getType()))) {
      continue;
    }
    if (expression.getValue().getType() == null) {
      continue;
    }
    if (!expression.getValue().isPrimitive()) {
      continue;
    }
    for (int j=0; j < UnaryOperator.values().length; j++) {
      UnaryOperator operator=UnaryOperator.values()[j];
      if (value != null && operator.getReturnType() != value.getClass()) {
        continue;
      }
      if (!operator.getReturnType().isAssignableFrom(expression.getValue().getType())) {
        continue;
      }
      UnaryExpression unaryExpression=CombinationFactory.create(operator,expression,nopolContext);
      if (addExpressionIn(unaryExpression,result,value != null)) {
        if (callListener(unaryExpression) && nopolContext.isOnlyOneSynthesisResult()) {
          return result;
        }
      }
    }
    executionTime=System.currentTimeMillis() - startTime;
    for (int j=Math.max(i,previousSize); j < toCombine.size() && executionTime <= maxTime; j++) {
      if (i == j) {
        continue;
      }
      Expression expression1=toCombine.get(j);
      if (expression1.getValue().getType() == null || (!Number.class.isAssignableFrom(expression1.getValue().getType()) && !Boolean.class.isAssignableFrom(expression1.getValue().getType()))) {
        continue;
      }
      if (expression.getValue().isConstant() && expression1.getValue().isConstant()) {
        continue;
      }
      if (!expression1.getValue().isPrimitive()) {
        continue;
      }
      executionTime=System.currentTimeMillis() - startTime;
      for (int k=0; k < BinaryOperator.values().length && executionTime <= maxTime; k++) {
        BinaryOperator operator=BinaryOperator.values()[k];
        if (value != null && operator.getReturnType() != value.getClass()) {
          continue;
        }
        if (!operator.getParam1().isAssignableFrom(expression.getValue().getType()) || !operator.getParam2().isAssignableFrom(expression1.getValue().getType())) {
          continue;
        }
        List returnValue=combineExpressionOperator(expression,expression1,operator,value,result);
        if (returnValue != null) {
          return returnValue;
        }
        executionTime=System.currentTimeMillis() - startTime;
      }
      executionTime=System.currentTimeMillis() - startTime;
    }
    executionTime=System.currentTimeMillis() - startTime;
  }
  return result;
}","@Deprecated private List<Expression> combinePrimitives(List<Expression> toCombine,int previousSize,Object value){
  logger.debug(""String_Node_Str"" + toCombine.size() + ""String_Node_Str"");
  List<Expression> result=new ArrayList<>();
  if (nopolContext.isSortExpressions()) {
    Collections.sort(toCombine,Collections.reverseOrder());
  }
  executionTime=System.currentTimeMillis() - startTime;
  for (int i=0; i < toCombine.size() && executionTime <= maxTime; i++) {
    Expression expression=toCombine.get(i);
    if (expression.getValue().getType() == null || (!Number.class.isAssignableFrom(expression.getValue().getType()) && !Boolean.class.isAssignableFrom(expression.getValue().getType()))) {
      continue;
    }
    if (expression.getValue().getType() == null) {
      continue;
    }
    if (!expression.getValue().isPrimitive()) {
      continue;
    }
    for (int j=0; j < UnaryOperator.values().length; j++) {
      UnaryOperator operator=UnaryOperator.values()[j];
      if (value != null && operator.getReturnType() != value.getClass()) {
        continue;
      }
      if (!operator.getReturnType().isAssignableFrom(expression.getValue().getType())) {
        continue;
      }
      UnaryExpression unaryExpression=create(operator,expression,nopolContext);
      if (addExpressionIn(unaryExpression,result,value != null)) {
        if (callListener(unaryExpression) && nopolContext.isOnlyOneSynthesisResult()) {
          return result;
        }
      }
    }
    executionTime=System.currentTimeMillis() - startTime;
    for (int j=Math.max(i,previousSize); j < toCombine.size() && executionTime <= maxTime; j++) {
      if (i == j) {
        continue;
      }
      Expression expression1=toCombine.get(j);
      if (expression1.getValue().getType() == null || (!Number.class.isAssignableFrom(expression1.getValue().getType()) && !Boolean.class.isAssignableFrom(expression1.getValue().getType()))) {
        continue;
      }
      if (expression.getValue().isConstant() && expression1.getValue().isConstant()) {
        continue;
      }
      if (!expression1.getValue().isPrimitive()) {
        continue;
      }
      executionTime=System.currentTimeMillis() - startTime;
      for (int k=0; k < BinaryOperator.values().length && executionTime <= maxTime; k++) {
        BinaryOperator operator=BinaryOperator.values()[k];
        if (value != null && operator.getReturnType() != value.getClass()) {
          continue;
        }
        if (!operator.getParam1().isAssignableFrom(expression.getValue().getType()) || !operator.getParam2().isAssignableFrom(expression1.getValue().getType())) {
          continue;
        }
        List returnValue=combineExpressionOperator(expression,expression1,operator,value,result);
        if (returnValue != null) {
          return returnValue;
        }
        executionTime=System.currentTimeMillis() - startTime;
      }
      executionTime=System.currentTimeMillis() - startTime;
    }
    executionTime=System.currentTimeMillis() - startTime;
  }
  return result;
}"
61420,"public static boolean isJDKLowerThan8(){
  String jvmversion=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  String[] versioncomponents=jvmversion.split(""String_Node_Str"");
  if (versioncomponents.length < 3) {
    return false;
  }
  String sec=versioncomponents[1];
  return (Integer.valueOf(sec) <= 7);
}","public static boolean isJDKLowerThan8(){
  String jvmversion=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (jvmversion == null || jvmversion.isEmpty())   return false;
  String[] versioncomponents=jvmversion.split(""String_Node_Str"");
  if (versioncomponents.length < 3) {
    return false;
  }
  String sec=versioncomponents[1];
  return (Integer.valueOf(sec) <= 7);
}"
61421,"public CardumenApproach(MutationSupporter mutatorExecutor,ProjectRepairFacade projFacade) throws JSAPException {
  super(mutatorExecutor,projFacade);
  ConfigurationProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!ConfigurationProperties.hasProperty(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier)) {
    ConfigurationProperties.setProperty(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier,""String_Node_Str"");
  }
  ConfigurationProperties.setProperty(ExtensionPoints.TARGET_CODE_PROCESSOR.identifier,""String_Node_Str"");
  ConfigurationProperties.setProperty(ExtensionPoints.OPERATORS_SPACE.identifier,""String_Node_Str"");
  setPropertyIfNotDefined(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY.identifier,""String_Node_Str"");
}","public CardumenApproach(MutationSupporter mutatorExecutor,ProjectRepairFacade projFacade) throws JSAPException {
  super(mutatorExecutor,projFacade);
  ConfigurationProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!ConfigurationProperties.hasProperty(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier)) {
    if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
      ConfigurationProperties.setProperty(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier,""String_Node_Str"");
    }
 else     ConfigurationProperties.setProperty(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier,""String_Node_Str"");
  }
  ConfigurationProperties.setProperty(ExtensionPoints.TARGET_CODE_PROCESSOR.identifier,""String_Node_Str"");
  ConfigurationProperties.setProperty(ExtensionPoints.OPERATORS_SPACE.identifier,""String_Node_Str"");
  setPropertyIfNotDefined(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY.identifier,""String_Node_Str"");
}"
61422,"public List<OperatorInstance> createInstance(SuspiciousModificationPoint modificationPoint,AstorOperator astorOperator) throws Exception {
  List<OperatorInstance> ops=new ArrayList<>();
  List<Ingredient> ingredients=new ArrayList<>();
  if (astorOperator.needIngredient()) {
    if (astorOperator instanceof ReplaceOp) {
      String type=modificationPoint.getCodeElement().getClass().getSimpleName();
      ingredients=ingredientSpace.getIngredients(modificationPoint.getCodeElement(),type);
    }
 else {
      ingredients=ingredientSpace.getIngredients(modificationPoint.getCodeElement());
    }
    if (ingredients == null) {
      log.error(""String_Node_Str"" + modificationPoint + ""String_Node_Str""+ astorOperator);
      return ops;
    }
    log.debug(""String_Node_Str"" + ingredients.size());
    for (    Ingredient ingredient : ingredients) {
      CtElement ingredientElement=ingredient.getCode();
      List<OperatorInstance> instances=astorOperator.createOperatorInstance(modificationPoint);
      List<Ingredient> ingredientsAfterTransformation=this.ingredientTransformationStrategy.transform(modificationPoint,new Ingredient(ingredientElement));
      if (instances != null && instances.size() > 0) {
        for (        Ingredient ingredientTransformed : ingredientsAfterTransformation) {
          OperatorInstance operatorInstance=createOperatorInstance(modificationPoint,astorOperator);
          operatorInstance.setModified(ingredientTransformed.getCode());
          operatorInstance.setIngredient(ingredientTransformed);
          ops.add(operatorInstance);
        }
      }
    }
  }
 else {
    OperatorInstance operatorInstance=createOperatorInstance(modificationPoint,astorOperator);
    ops.add(operatorInstance);
  }
  return ops;
}","public List<OperatorInstance> createInstance(SuspiciousModificationPoint modificationPoint,AstorOperator astorOperator) throws Exception {
  List<OperatorInstance> ops=new ArrayList<>();
  List<Ingredient> ingredients=new ArrayList<>();
  if (astorOperator.needIngredient()) {
    if (astorOperator instanceof ReplaceOp) {
      String type=modificationPoint.getCodeElement().getClass().getSimpleName();
      ingredients=ingredientSpace.getIngredients(modificationPoint.getCodeElement(),type);
    }
 else {
      ingredients=ingredientSpace.getIngredients(modificationPoint.getCodeElement());
    }
    if (ingredients == null) {
      log.error(""String_Node_Str"" + modificationPoint + ""String_Node_Str""+ astorOperator);
      return ops;
    }
    log.debug(""String_Node_Str"" + ingredients.size());
    for (    Ingredient ingredient : ingredients) {
      List<OperatorInstance> instances=astorOperator.createOperatorInstance(modificationPoint);
      List<Ingredient> ingredientsAfterTransformation=this.ingredientTransformationStrategy.transform(modificationPoint,ingredient);
      if (instances != null && instances.size() > 0) {
        for (        Ingredient ingredientTransformed : ingredientsAfterTransformation) {
          OperatorInstance operatorInstance=createOperatorInstance(modificationPoint,astorOperator);
          operatorInstance.setModified(ingredientTransformed.getCode());
          operatorInstance.setIngredient(ingredientTransformed);
          ops.add(operatorInstance);
        }
      }
    }
  }
 else {
    OperatorInstance operatorInstance=createOperatorInstance(modificationPoint,astorOperator);
    ops.add(operatorInstance);
  }
  return ops;
}"
61423,"@Override public void startEvolution() throws Exception {
  if (this.ingredientSpace == null) {
    this.ingredientSpace=IngredientBasedPlugInLoader.getIngredientPool(getTargetElementProcessors());
  }
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int maxGenerations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int modifPointsAnalyzed=0;
  int operatorExecuted=0;
  getIngredientSpace().defineSpace(originalVariant);
  int totalmodfpoints=variants.get(0).getModificationPoints().size();
  for (  ProgramVariant parentVariant : variants) {
    for (    ModificationPoint modifPoint : this.getSuspiciousNavigationStrategy().getSortedModificationPointsList(parentVariant)) {
      modifPointsAnalyzed++;
      log.info(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ parentVariant.getModificationPoints().size()+ ""String_Node_Str""+ modifPoint);
      List<OperatorInstance> operatorInstances=createInstancesOfOperators((SuspiciousModificationPoint)modifPoint);
      if (operatorInstances == null || operatorInstances.isEmpty())       continue;
      for (      OperatorInstance pointOperation : operatorInstances) {
        operatorExecuted++;
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        log.debug(""String_Node_Str"" + pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        if (solution) {
          log.info(""String_Node_Str"" + getSolutions().size());
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
            this.setOutputStatus(AstorOutputStatus.STOP_BY_PATCH_FOUND);
            log.debug(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ operatorExecuted);
            return;
          }
        }
        undoOperationToSpoonElement(pointOperation);
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          this.setOutputStatus(AstorOutputStatus.TIME_OUT);
          log.debug(""String_Node_Str"");
          return;
        }
        if (maxGenerations <= operatorExecuted) {
          this.setOutputStatus(AstorOutputStatus.MAX_GENERATION);
          log.info(""String_Node_Str"" + operatorExecuted);
          log.info(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
          return;
        }
        if (this.getSolutions().size() >= ConfigurationProperties.getPropertyInt(""String_Node_Str"")) {
          this.setOutputStatus(AstorOutputStatus.STOP_BY_PATCH_FOUND);
          log.debug(""String_Node_Str"" + operatorExecuted);
          log.debug(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
          return;
        }
      }
    }
  }
  this.setOutputStatus(AstorOutputStatus.EXHAUSTIVE_NAVIGATED);
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
}","@Override public void startEvolution() throws Exception {
  if (this.ingredientSpace == null) {
    this.ingredientSpace=IngredientBasedPlugInLoader.getIngredientPool(getTargetElementProcessors());
  }
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int maxGenerations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int modifPointsAnalyzed=0;
  int operatorExecuted=0;
  getIngredientSpace().defineSpace(originalVariant);
  int totalmodfpoints=variants.get(0).getModificationPoints().size();
  for (  ProgramVariant parentVariant : variants) {
    for (    ModificationPoint modifPoint : this.getSuspiciousNavigationStrategy().getSortedModificationPointsList(parentVariant)) {
      modifPointsAnalyzed++;
      log.info(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ parentVariant.getModificationPoints().size()+ ""String_Node_Str""+ modifPoint);
      List<OperatorInstance> operatorInstances=createInstancesOfOperators((SuspiciousModificationPoint)modifPoint);
      if (operatorInstances == null || operatorInstances.isEmpty())       continue;
      for (      OperatorInstance pointOperation : operatorInstances) {
        operatorExecuted++;
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        log.debug(""String_Node_Str"" + pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        if (solution) {
          log.info(""String_Node_Str"" + getSolutions().size());
          this.solutions.add(solutionVariant);
        }
        undoOperationToSpoonElement(pointOperation);
        if (!this.solutions.isEmpty() && ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
          this.setOutputStatus(AstorOutputStatus.STOP_BY_PATCH_FOUND);
          log.debug(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ operatorExecuted);
          return;
        }
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          this.setOutputStatus(AstorOutputStatus.TIME_OUT);
          log.debug(""String_Node_Str"");
          return;
        }
        if (maxGenerations <= operatorExecuted) {
          this.setOutputStatus(AstorOutputStatus.MAX_GENERATION);
          log.info(""String_Node_Str"" + operatorExecuted);
          log.info(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
          return;
        }
        if (this.getSolutions().size() >= ConfigurationProperties.getPropertyInt(""String_Node_Str"")) {
          this.setOutputStatus(AstorOutputStatus.STOP_BY_PATCH_FOUND);
          log.debug(""String_Node_Str"" + operatorExecuted);
          log.debug(""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
          return;
        }
      }
    }
  }
  this.setOutputStatus(AstorOutputStatus.EXHAUSTIVE_NAVIGATED);
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + modifPointsAnalyzed + ""String_Node_Str""+ totalmodfpoints+ ""String_Node_Str""+ operatorExecuted);
}"
61424,"@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=null;
        if (vStat instanceof AstorOutputStatus)         value=parser.parse(""String_Node_Str"" + vStat + ""String_Node_Str"");
 else         value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}"
61425,"@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat.toString());
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}"
61426,"@Override public void run(String location,String projectName,String dependencies,String packageToInstrument,double thfl,String failing) throws Exception {
  long startT=System.currentTimeMillis();
  initProject(location,projectName,dependencies,packageToInstrument,thfl,failing);
  String mode=ConfigurationProperties.getProperty(""String_Node_Str"").toLowerCase();
  String customEngine=ConfigurationProperties.getProperty(""String_Node_Str"").toLowerCase();
  if (""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.DeepRepair);
 else   if (""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.CARDUMEN);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.jGenProg);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.jKali);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.MutRepair);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.EXASTOR);
 else   if (customEngine != null && !customEngine.isEmpty())   astorCore=createEngine(ExecutionMode.custom);
 else {
    System.err.println(""String_Node_Str"" + mode + ""String_Node_Str""+ Arrays.toString(ExecutionMode.values()));
    return;
  }
  ConfigurationProperties.print();
  astorCore.startEvolution();
  astorCore.atEnd();
  long endT=System.currentTimeMillis();
  log.info(""String_Node_Str"" + (endT - startT) / 1000d);
}","@Override public void run(String location,String projectName,String dependencies,String packageToInstrument,double thfl,String failing) throws Exception {
  long startT=System.currentTimeMillis();
  initProject(location,projectName,dependencies,packageToInstrument,thfl,failing);
  String mode=ConfigurationProperties.getProperty(""String_Node_Str"").toLowerCase();
  String customEngine=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.DeepRepair);
 else   if (""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.CARDUMEN);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.jGenProg);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.jKali);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.MutRepair);
 else   if (""String_Node_Str"".equals(mode) || ""String_Node_Str"".equals(mode))   astorCore=createEngine(ExecutionMode.EXASTOR);
 else   if (customEngine != null && !customEngine.isEmpty())   astorCore=createEngine(ExecutionMode.custom);
 else {
    System.err.println(""String_Node_Str"" + mode + ""String_Node_Str""+ Arrays.toString(ExecutionMode.values()));
    return;
  }
  ConfigurationProperties.print();
  astorCore.startEvolution();
  astorCore.atEnd();
  long endT=System.currentTimeMillis();
  log.info(""String_Node_Str"" + (endT - startT) / 1000d);
}"
61427,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private VariablePlaceholder createParticularTOS(CtStatement ingredientStatement,Set<String> targetPlaceholders,List<CtVariableAccess> varAccessCollected){
  Map<String,String> placeholderVarNamesMappings=new HashMap<>();
  MapList<String,CtVariableAccess> placeholdersToVariables=new MapList<>();
  List<CtVariableAccess> variablesNotModified=new ArrayList<>();
  int nrvar=0;
  for (int i=0; i < varAccessCollected.size(); i++) {
    CtVariableAccess<?> variableUnderAnalysis=varAccessCollected.get(i);
    if (!targetPlaceholders.contains(variableUnderAnalysis.getVariable().getSimpleName())) {
      variablesNotModified.add(variableUnderAnalysis);
      continue;
    }
    if (VariableResolver.isStatic(variableUnderAnalysis.getVariable())) {
      variablesNotModified.add(variableUnderAnalysis);
      continue;
    }
    String abstractName=""String_Node_Str"";
    if (!placeholderVarNamesMappings.containsKey(variableUnderAnalysis.getVariable().getSimpleName())) {
      String currentTypeName=variableUnderAnalysis.getVariable().getType().getSimpleName();
      if (currentTypeName.contains(""String_Node_Str"")) {
        abstractName=variableUnderAnalysis.getVariable().getSimpleName();
      }
 else {
        abstractName=String.format(PLACEHOLDER_VAR,currentTypeName,nrvar);
      }
      placeholderVarNamesMappings.put(variableUnderAnalysis.getVariable().getSimpleName(),abstractName);
      nrvar++;
    }
 else {
      abstractName=placeholderVarNamesMappings.get(variableUnderAnalysis.getVariable().getSimpleName());
    }
    placeholdersToVariables.add(abstractName,variableUnderAnalysis);
  }
  VariablePlaceholder ingredient=new VariablePlaceholder(placeholdersToVariables,placeholderVarNamesMappings,variablesNotModified);
  return ingredient;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private VariablePlaceholder createParticularTOS(CtStatement ingredientStatement,Set<String> targetPlaceholders,List<CtVariableAccess> varAccessCollected){
  Map<String,String> placeholderVarNamesMappings=new HashMap<>();
  MapList<String,CtVariableAccess> placeholdersToVariables=new MapList<>();
  List<CtVariableAccess> variablesNotModified=new ArrayList<>();
  int nrvar=0;
  for (int i=0; i < varAccessCollected.size(); i++) {
    CtVariableAccess<?> variableUnderAnalysis=varAccessCollected.get(i);
    if (!targetPlaceholders.contains(variableUnderAnalysis.getVariable().getSimpleName())) {
      variablesNotModified.add(variableUnderAnalysis);
      continue;
    }
    if (VariableResolver.isStatic(variableUnderAnalysis.getVariable())) {
      variablesNotModified.add(variableUnderAnalysis);
      continue;
    }
    String abstractName=""String_Node_Str"";
    if (!placeholderVarNamesMappings.containsKey(variableUnderAnalysis.getVariable().getSimpleName())) {
      String currentTypeName=variableUnderAnalysis.getVariable().getType().getSimpleName();
      if (currentTypeName.contains(""String_Node_Str"")) {
        abstractName=variableUnderAnalysis.getVariable().getSimpleName();
      }
 else {
        abstractName=String.format(PLACEHOLDER_VAR,currentTypeName,nrvar);
      }
      placeholderVarNamesMappings.put(variableUnderAnalysis.getVariable().getSimpleName(),abstractName);
      nrvar++;
    }
 else {
      abstractName=placeholderVarNamesMappings.get(variableUnderAnalysis.getVariable().getSimpleName());
    }
    placeholdersToVariables.add(abstractName,variableUnderAnalysis);
  }
  if (!placeholdersToVariables.isEmpty()) {
    VariablePlaceholder ingredient=new VariablePlaceholder(placeholdersToVariables,placeholderVarNamesMappings,variablesNotModified);
    return ingredient;
  }
 else   return null;
}"
61428,"@SuppressWarnings(""String_Node_Str"") @Override public List<? extends Placeholder> createTOS(CtStatement ingredientStatement){
  int nrPlaceholders=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<VariablePlaceholder> createdTemplates=new ArrayList<>();
  List<CtVariableAccess> varAccessCollected=VariableResolver.collectVariableAccess(ingredientStatement,true);
  List<String> varsNames=varAccessCollected.stream().map(e -> e.getVariable().getSimpleName()).distinct().collect(Collectors.toList());
  if (varsNames.size() > 20) {
    varsNames=varsNames.subList(0,20);
  }
  List<Set<String>> variableNamesCombinations=Sets.powerSet(new HashSet<>(varsNames)).stream().filter(e -> e.size() == nrPlaceholders && !e.isEmpty()).collect(Collectors.toList());
  for (  Set<String> targetPlaceholders : variableNamesCombinations) {
    VariablePlaceholder placeholderCreated=createParticularTOS(ingredientStatement,targetPlaceholders);
    if (placeholderCreated != null) {
      createdTemplates.add(placeholderCreated);
    }
  }
  return createdTemplates;
}","@SuppressWarnings(""String_Node_Str"") @Override public List<? extends Placeholder> createTOS(CtStatement ingredientStatement){
  int nrPlaceholders=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  boolean lessplaceholderontos=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
  List<VariablePlaceholder> createdTemplates=new ArrayList<>();
  List<CtVariableAccess> varAccessCollected=VariableResolver.collectVariableAccess(ingredientStatement,true);
  List<String> varsNames=varAccessCollected.stream().map(e -> e.getVariable().getSimpleName()).distinct().collect(Collectors.toList());
  if (varsNames.size() > 20) {
    varsNames=varsNames.subList(0,20);
  }
  List<Set<String>> variableNamesCombinations=Sets.powerSet(new HashSet<>(varsNames)).stream().filter(e -> e.size() == nrPlaceholders && !e.isEmpty()).collect(Collectors.toList());
  for (  Set<String> targetPlaceholders : variableNamesCombinations) {
    VariablePlaceholder placeholderCreated=createParticularTOS(ingredientStatement,targetPlaceholders);
    if (placeholderCreated != null) {
      if (lessplaceholderontos || placeholderCreated.getPlaceholderVarNamesMappings().keySet().size() == nrPlaceholders) {
        createdTemplates.add(placeholderCreated);
      }
 else {
        log.debug(""String_Node_Str"" + nrPlaceholders + ""String_Node_Str""+ placeholderCreated);
      }
    }
  }
  return createdTemplates;
}"
61429,"protected List<CtType<?>> obtainClassesFromScope(ProgramVariant variant){
  if (IngredientSpaceScope.PACKAGE.equals(scope)) {
    return variant.getAffectedClasses();
  }
  if (IngredientSpaceScope.LOCAL.equals(scope)) {
    return variant.getAffectedClasses();
  }
  if (IngredientSpaceScope.GLOBAL.equals(scope)) {
    return MutationSupporter.getFactory().Type().getAll();
  }
  return null;
}","protected List<CtType<?>> obtainClassesFromScope(ProgramVariant variant){
  if (IngredientSpaceScope.PACKAGE.equals(scope)) {
    List<CtType<?>> affected=variant.getAffectedClasses();
    List<CtType<?>> types=new ArrayList<>();
    List<CtPackage> packageAnalyzed=new ArrayList<>();
    for (    CtType<?> ing : affected) {
      CtPackage p=ing.getParent(CtPackage.class);
      if (!packageAnalyzed.contains(p)) {
        packageAnalyzed.add(p);
        for (        CtType<?> type : p.getTypes()) {
          types.add(type);
        }
      }
    }
    return types;
  }
  if (IngredientSpaceScope.LOCAL.equals(scope)) {
    return variant.getAffectedClasses();
  }
  if (IngredientSpaceScope.GLOBAL.equals(scope)) {
    return MutationSupporter.getFactory().Type().getAll();
  }
  return null;
}"
61430,"@Override public void defineSpace(ProgramVariant variant){
  tosCounter=new TOSCounter();
  List<CtType<?>> affected=obtainClassesFromScope(variant);
  log.debug(""String_Node_Str"");
  for (  CtType<?> classToProcess : affected) {
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    TargetElementProcessor.mustClone=true;
    for (    Object originalIngredient : ingredients) {
      if (originalIngredient instanceof CtStatement) {
        CtStatement originalIngredientStatement=(CtStatement)originalIngredient;
        String keyLocation=mapKey(originalIngredientStatement);
        MutationSupporter.getEnvironment().setNoClasspath(true);
        List<TOSEntity> xTemplates=createAllTOS(originalIngredientStatement);
        List<Ingredient> ingredientPoolForLocation=this.retrieveIngredients(keyLocation);
        for (        TOSEntity templateElement : xTemplates) {
          templateElement.generateCodeofTOS();
          if (!ingredientPoolForLocation.contains(templateElement)) {
            ingredientPoolForLocation.add(templateElement);
          }
 else {
          }
          tosCounter.saveStatisticsOfTos(templateElement,originalIngredientStatement);
        }
      }
 else {
        log.debug(""String_Node_Str"" + originalIngredient);
      }
    }
  }
  this.recreateTypesStructures();
}","@Override public void defineSpace(ProgramVariant variant){
  tosCounter=new TOSCounter();
  List<CtType<?>> affected=obtainClassesFromScope(variant);
  log.debug(""String_Node_Str"" + affected.size());
  for (  CtType<?> classToProcess : affected) {
    log.debug(""String_Node_Str"" + classToProcess.getQualifiedName());
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    TargetElementProcessor.mustClone=true;
    for (    Object originalIngredient : ingredients) {
      if (originalIngredient instanceof CtStatement) {
        CtStatement originalIngredientStatement=(CtStatement)originalIngredient;
        String keyLocation=mapKey(originalIngredientStatement);
        MutationSupporter.getEnvironment().setNoClasspath(true);
        List<TOSEntity> xTemplates=createAllTOS(originalIngredientStatement);
        List<Ingredient> ingredientPoolForLocation=this.retrieveIngredients(keyLocation);
        for (        TOSEntity templateElement : xTemplates) {
          templateElement.generateCodeofTOS();
          if (!ingredientPoolForLocation.contains(templateElement)) {
            ingredientPoolForLocation.add(templateElement);
          }
 else {
          }
          tosCounter.saveStatisticsOfTos(templateElement,originalIngredientStatement);
        }
      }
 else {
        log.debug(""String_Node_Str"" + originalIngredient);
      }
    }
  }
  this.recreateTypesStructures();
}"
61431,"@Override public List<CtCodeElement> getAffectedElements(){
  List<CtCodeElement> ces=new ArrayList<>();
  for (  List vars : this.palceholdersToVariables.values()) {
    ces.addAll(vars);
  }
  return null;
}","@Override public List<CtCodeElement> getAffectedElements(){
  List<CtCodeElement> ces=new ArrayList<>();
  for (  List vars : this.palceholdersToVariables.values()) {
    ces.addAll(vars);
  }
  return ces;
}"
61432,"@Override public void apply(){
  this.placeholderName=varplaceholder.getName();
  this.varplaceholder.getInvocation().getExecutable().setSimpleName(this.selectedExecutableTarget.getSimpleName());
}","@Override public void apply(){
  System.out.println(""String_Node_Str"" + this.varplaceholder.getInvocation().getExecutable().getSimpleName() + ""String_Node_Str""+ this.selectedExecutableTarget.getSimpleName());
  this.previousElementName=this.varplaceholder.getInvocation().getExecutable().getSimpleName();
  this.varplaceholder.getInvocation().getExecutable().setSimpleName(this.selectedExecutableTarget.getSimpleName());
}"
61433,"@Override public void revert(){
  this.varplaceholder.getInvocation().getExecutable().setSimpleName(placeholderName);
}","@Override public void revert(){
  this.varplaceholder.getInvocation().getExecutable().setSimpleName(previousElementName);
}"
61434,"public String toString(){
  return this.getClass().getSimpleName() + ""String_Node_Str"" + selectedExecutableTarget.getSimpleName()+ ""String_Node_Str""+ placeholderName;
}","public String toString(){
  return this.getClass().getSimpleName() + ""String_Node_Str"" + selectedExecutableTarget.getSimpleName()+ ""String_Node_Str""+ previousElementName;
}"
61435,"public boolean canBeApplied(ModificationPoint modificationPoint){
  Set<CtCodeElement> affected=new HashSet<>();
  List<CtVariable> variablesInScope=modificationPoint.getContextOfModificationPoint();
  for (  Placeholder placeholder : this.getPlaceholders()) {
    List<CtCodeElement> affected_i=placeholder.getAffectedElements();
    affected.addAll(affected);
  }
  List<CtVariableAccess> outOfContext=VariableResolver.retriveVariablesOutOfContext(variablesInScope,this.derivedFrom);
  boolean removed=outOfContext.removeAll(affected);
  System.out.println(""String_Node_Str"" + removed);
  return outOfContext.isEmpty();
}","public boolean canBeApplied(ModificationPoint modificationPoint){
  Set<CtCodeElement> affected=new HashSet<>();
  List<CtVariable> variablesInScope=modificationPoint.getContextOfModificationPoint();
  for (  Placeholder placeholder : this.getPlaceholders()) {
    List<CtCodeElement> affected_i=placeholder.getAffectedElements();
    affected.addAll(affected_i);
  }
  List<CtVariableAccess> outOfContext=VariableResolver.retriveVariablesOutOfContext(variablesInScope,this.derivedFrom);
  boolean removed=outOfContext.removeAll(affected);
  System.out.println(""String_Node_Str"" + removed);
  return outOfContext.isEmpty();
}"
61436,"public static InvocationMatching mapImplicitInvocation(CtClass ctClassMP,CtAbstractInvocation inv0){
  if (inv0 instanceof CtInvocation) {
    CtInvocation invocation0=(CtInvocation)inv0;
    CtExpression tpr=invocation0.getTarget();
    if (tpr instanceof CtThisAccess) {
      CtThisAccess<?> targetthis=(CtThisAccess)tpr;
      CtTypeReference tpref=targetthis.getType();
      if (ctClassMP.isSubtypeOf(tpref))       return InvocationMatching.TARGET_SAME_TYPE;
 else       if (chechSignatures(ctClassMP.getAllExecutables(),invocation0.getExecutable())) {
        return InvocationMatching.SAME_SIGNATURE_DIFF_TYPE;
      }
 else {
        log.debug(""String_Node_Str"" + invocation0.getExecutable().getSignature());
        log.debug(""String_Node_Str"" + ctClassMP.getQualifiedName() + ""String_Node_Str""+ (tpref.getQualifiedName()));
        return InvocationMatching.TARGET_INCOMPATIBLE;
      }
    }
 else {
      log.debug(""String_Node_Str"" + tpr);
      return InvocationMatching.TARGET_IS_VARIABLE;
    }
  }
 else {
    if (inv0 instanceof CtConstructorCall) {
      if (chechSignatures(ctClassMP.getConstructors(),inv0.getExecutable())) {
        return InvocationMatching.SAME_SIGNATURE_CONTRUCTOR;
      }
 else {
        return InvocationMatching.NO_MATCH;
      }
    }
    return InvocationMatching.OTHER;
  }
}","public static InvocationMatching mapImplicitInvocation(CtClass ctClassMP,CtAbstractInvocation inv0){
  if (inv0 instanceof CtInvocation) {
    CtInvocation invocation0=(CtInvocation)inv0;
    CtExpression tpr=invocation0.getTarget();
    if (tpr instanceof CtThisAccess) {
      CtThisAccess<?> targetthis=(CtThisAccess)tpr;
      CtTypeReference tpref=targetthis.getType();
      if (ctClassMP.isSubtypeOf(tpref))       return InvocationMatching.TARGET_SAME_TYPE;
 else       if (chechSignatures(ctClassMP.getAllExecutables(),invocation0.getExecutable(),false)) {
        return InvocationMatching.SAME_SIGNATURE_DIFF_TYPE;
      }
 else {
        log.debug(""String_Node_Str"" + invocation0.getExecutable().getSignature());
        log.debug(""String_Node_Str"" + ctClassMP.getQualifiedName() + ""String_Node_Str""+ (tpref.getQualifiedName()));
        return InvocationMatching.TARGET_INCOMPATIBLE;
      }
    }
 else {
      log.debug(""String_Node_Str"" + tpr);
      return InvocationMatching.TARGET_IS_VARIABLE;
    }
  }
 else {
    if (inv0 instanceof CtConstructorCall) {
      return InvocationMatching.CONTRUCTOR;
    }
    return InvocationMatching.OTHER;
  }
}"
61437,"public static boolean chechSignatures(Collection<CtExecutableReference<?>> allExecutables,CtExecutableReference executable){
  String signatureTarget=executable.getSignature();
  for (  CtExecutableReference<?> ctExecutableReferenceOfMethod : allExecutables) {
    if (ctExecutableReferenceOfMethod.getSignature().equals(signatureTarget))     return true;
  }
  return false;
}","public static boolean chechSignatures(Collection<CtExecutableReference<?>> allExecutables,CtExecutableReference executable,boolean constructor){
  String signatureTarget=executable.getSignature();
  for (  CtExecutableReference<?> ctExecutableReferenceOfMethod : allExecutables) {
    if (constructor && !ctExecutableReferenceOfMethod.isConstructor())     continue;
    if (ctExecutableReferenceOfMethod.getSignature().equals(signatureTarget))     return true;
  }
  return false;
}"
61438,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testFunctionResolver() throws Exception {
  CommandSummary command=MathCommandsTests.getMath70Command();
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  AstorMain main=new AstorMain();
  main.execute(command.flat());
  InvocationResolver fr=new InvocationResolver();
  for (  ModificationPoint mp : main.getEngine().getVariants().get(0).getModificationPoints()) {
    System.out.println(""String_Node_Str"" + mp.getCodeElement());
  }
  ModificationPoint modificationPoint0=main.getEngine().getVariants().get(0).getModificationPoints().get(0);
  CtElement code=modificationPoint0.getCodeElement();
  assertEquals(""String_Node_Str"",code.toString());
  List<CtAbstractInvocation> inv=fr.collectInvocation(code,true);
  assertTrue(inv.size() > 0);
  CtAbstractInvocation inv0=inv.get(0);
  CtClass ctClassMP=modificationPoint0.getCtClass();
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,inv0));
  ModificationPoint modificationPoint7=main.getEngine().getVariants().get(0).getModificationPoints().get(7);
  CtElement code7=modificationPoint7.getCodeElement();
  assertEquals(""String_Node_Str"",code7.toString());
  List<CtAbstractInvocation> inv7=fr.collectInvocation(code7,true);
  assertTrue(inv7.size() > 0);
  CtAbstractInvocation inv7e=inv7.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,inv7e));
  IngredientBasedApproach iba=(IngredientBasedApproach)main.getEngine();
  List ingredients=iba.getIngredientPool().getIngredients(modificationPoint0.getCodeElement());
  int i=0;
  for (  Object object : ingredients) {
    System.out.println(Integer.valueOf(i++) + ""String_Node_Str"" + object.toString());
  }
  CtElement i358=(CtElement)ingredients.get(358);
  assertEquals(""String_Node_Str"",i358.toString());
  List<CtAbstractInvocation> ingredients358=fr.collectInvocation(i358,true);
  assertTrue(ingredients358.size() > 0);
  CtAbstractInvocation ingrediet358=ingredients358.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet358));
  CtElement i23=(CtElement)ingredients.get(23);
  assertEquals(""String_Node_Str"",i23.toString());
  List<CtAbstractInvocation> ingredients23=fr.collectInvocation(i23,true);
  assertTrue(ingredients23.size() > 0);
  CtAbstractInvocation ingrediet23=ingredients23.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet23));
  CtElement i130=(CtElement)ingredients.get(130);
  assertEquals(""String_Node_Str"",i130.toString());
  List<CtAbstractInvocation> ingredients130=fr.collectInvocation(i130,true);
  assertTrue(ingredients130.size() > 0);
  CtAbstractInvocation ingrediet130=ingredients130.get(0);
  assertFalse(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet130));
  CtExpression i140=(CtExpression)ingredients.get(140);
  assertEquals(""String_Node_Str"",i140.toString());
  List<CtAbstractInvocation> ingredients140=fr.collectInvocation(i140,true);
  assertTrue(ingredients140.size() > 0);
  CtAbstractInvocation ingrediet140=ingredients140.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet140));
  CtElement i141=(CtElement)ingredients.get(141);
  assertEquals(""String_Node_Str"",i141.toString());
  List<CtAbstractInvocation> ingredients141=fr.collectInvocation(i141,true);
  assertTrue(ingredients141.size() > 0);
  CtAbstractInvocation ingrediet141=ingredients141.get(0);
  assertFalse(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet141));
  CtElement i108=(CtElement)ingredients.get(108);
  assertEquals(""String_Node_Str"",i108.toString());
  List<CtAbstractInvocation> ingredients108=fr.collectInvocation(i108,true);
  assertEquals(""String_Node_Str"",i108.getParent(CtClass.class).getSimpleName());
  assertTrue(ingredients108.size() > 0);
  CtAbstractInvocation ingrediet108=ingredients108.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet108));
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testFunctionResolver() throws Exception {
  CommandSummary command=MathCommandsTests.getMath70Command();
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  AstorMain main=new AstorMain();
  main.execute(command.flat());
  InvocationResolver fr=new InvocationResolver();
  for (  ModificationPoint mp : main.getEngine().getVariants().get(0).getModificationPoints()) {
    System.out.println(""String_Node_Str"" + mp.getCodeElement());
  }
  ModificationPoint modificationPoint0=main.getEngine().getVariants().get(0).getModificationPoints().get(0);
  CtElement code=modificationPoint0.getCodeElement();
  assertEquals(""String_Node_Str"",code.toString());
  List<CtAbstractInvocation> inv=fr.collectInvocation(code,true);
  assertTrue(inv.size() > 0);
  CtAbstractInvocation inv0=inv.get(0);
  CtClass ctClassMP=modificationPoint0.getCtClass();
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,inv0));
  ModificationPoint modificationPoint7=main.getEngine().getVariants().get(0).getModificationPoints().get(7);
  CtElement code7=modificationPoint7.getCodeElement();
  assertEquals(""String_Node_Str"",code7.toString());
  List<CtAbstractInvocation> inv7=fr.collectInvocation(code7,true);
  assertTrue(inv7.size() > 0);
  CtAbstractInvocation inv7e=inv7.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,inv7e));
  IngredientBasedApproach iba=(IngredientBasedApproach)main.getEngine();
  List ingredients=iba.getIngredientPool().getIngredients(modificationPoint0.getCodeElement());
  int i=0;
  for (  Object object : ingredients) {
    System.out.println(Integer.valueOf(i++) + ""String_Node_Str"" + object.toString());
  }
  CtElement i358=(CtElement)ingredients.get(358);
  assertEquals(""String_Node_Str"",i358.toString());
  List<CtAbstractInvocation> ingredients358=fr.collectInvocation(i358,true);
  assertTrue(ingredients358.size() > 0);
  CtAbstractInvocation ingrediet358=ingredients358.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet358));
  CtElement i23=(CtElement)ingredients.get(23);
  assertEquals(""String_Node_Str"",i23.toString());
  List<CtAbstractInvocation> ingredients23=fr.collectInvocation(i23,true);
  assertTrue(ingredients23.size() > 0);
  CtAbstractInvocation ingrediet23=ingredients23.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet23));
  CtElement i130=(CtElement)ingredients.get(130);
  assertEquals(""String_Node_Str"",i130.toString());
  List<CtAbstractInvocation> ingredients130=fr.collectInvocation(i130,true);
  assertTrue(ingredients130.size() > 0);
  CtAbstractInvocation ingrediet130=ingredients130.get(0);
  assertFalse(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet130));
  CtExpression i140=(CtExpression)ingredients.get(140);
  assertEquals(""String_Node_Str"",i140.toString());
  List<CtAbstractInvocation> ingredients140=fr.collectInvocation(i140,true);
  assertTrue(ingredients140.size() > 0);
  CtAbstractInvocation ingrediet140=ingredients140.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet140));
  CtElement i141=(CtElement)ingredients.get(141);
  assertEquals(""String_Node_Str"",i141.toString());
  List<CtAbstractInvocation> ingredients141=fr.collectInvocation(i141,true);
  assertTrue(ingredients141.size() > 0);
  CtAbstractInvocation ingrediet141=ingredients141.get(0);
  assertFalse(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet141));
  CtElement i108=(CtElement)ingredients.get(108);
  assertEquals(""String_Node_Str"",i108.toString());
  List<CtAbstractInvocation> ingredients108=fr.collectInvocation(i108,true);
  assertEquals(""String_Node_Str"",i108.getParent(CtClass.class).getSimpleName());
  assertTrue(ingredients108.size() > 0);
  CtAbstractInvocation ingrediet108=ingredients108.get(0);
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet108));
  String patch=""String_Node_Str"";
  CtElement i336=(CtElement)ingredients.get(336);
  assertEquals(patch,i336.toString());
  List<CtAbstractInvocation> ingredients336=fr.collectInvocation(i336,true);
  assertTrue(ingredients336.size() > 0);
  CtAbstractInvocation ingrediet336=ingredients336.get(0);
  assertEquals(""String_Node_Str"",ingrediet336.toString());
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet336));
  CtAbstractInvocation ingrediet336_2=ingredients336.get(2);
  String patch_2=""String_Node_Str"";
  assertEquals(patch_2,ingrediet336_2.toString());
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet336_2));
  patch=""String_Node_Str"";
  CtElement i165=(CtElement)ingredients.get(165);
  assertEquals(patch,i165.toString());
  List<CtAbstractInvocation> ingredients165=fr.collectInvocation(i165,true);
  assertTrue(ingredients165.size() > 0);
  CtAbstractInvocation ingrediet165=ingredients165.get(0);
  assertEquals(""String_Node_Str"",ingrediet165.toString());
  assertTrue(InvocationResolver.fitImplicitInvocation(ctClassMP,ingrediet165));
}"
61439,"public static Number[] getMaxCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsNamesToCombine){
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int max=-1;
  long numberTotalComb=1;
  int nrVarsWithMorethan1Possibilities=0;
  Set<String> vars=new HashSet<>();
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (vars.contains(currentVar.getVar().getVariable().getSimpleName())) {
      continue;
    }
    vars.add(currentVar.getVar().getVariable().getSimpleName());
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    if (numberCompVar > 1)     nrVarsWithMorethan1Possibilities++;
    logger.debug(String.format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  logger.debug(""String_Node_Str"" + numberTotalComb);
  double maxPerVarLimit=0;
  if (numberTotalComb < maxNumberCombinations || !ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    maxPerVarLimit=max;
  }
 else {
    maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / nrVarsWithMorethan1Possibilities);
  }
  logger.debug(String.format(""String_Node_Str"",maxPerVarLimit,numberTotalComb));
  return new Number[]{numberTotalComb,maxPerVarLimit};
}","public static Number[] getMaxCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsNamesToCombine){
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int max=-1;
  long numberTotalComb=1;
  int nrVarsWithMorethan1Possibilities=0;
  Set<String> vars=new HashSet<>();
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (vars.contains(currentVar.getVar().getVariable().getSimpleName())) {
      continue;
    }
    vars.add(currentVar.getVar().getVariable().getSimpleName());
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    if (numberCompVar > 1)     nrVarsWithMorethan1Possibilities++;
    logger.debug(String.format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    if (numberTotalComb < Integer.MAX_VALUE) {
      long mult=(long)numberTotalComb * numberCompVar;
      if (mult > Integer.MAX_VALUE || mult < Integer.MIN_VALUE) {
        logger.debug(""String_Node_Str"" + Integer.MAX_VALUE);
        numberTotalComb=Integer.MAX_VALUE;
      }
 else       numberTotalComb*=numberCompVar;
    }
  }
  logger.debug(""String_Node_Str"" + numberTotalComb);
  double maxPerVarLimit=0;
  if (numberTotalComb < maxNumberCombinations || !ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    maxPerVarLimit=max;
  }
 else {
    maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / nrVarsWithMorethan1Possibilities);
  }
  logger.debug(String.format(""String_Node_Str"",maxPerVarLimit,numberTotalComb));
  return new Number[]{numberTotalComb,maxPerVarLimit};
}"
61440,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,NGramManager managerngram){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  try {
    for (    VarAccessWrapper currentVar : varsNamesToCombine) {
      if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
        logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
        continue;
      }
      List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
      List<CtVariable> mapped=mappedVars.get(currentVar);
      List<CtVariable> sortedVariables=new ArrayList<>(mapped);
      if (managerngram == null) {
        logger.debug(""String_Node_Str"");
        Collections.shuffle(sortedVariables,RandomManager.getRandom());
      }
 else {
        logger.debug(""String_Node_Str"");
        Collections.sort(sortedVariables,new Comparator<CtVariable>(){
          @Override public int compare(          CtVariable v1,          CtVariable v2){
            String s1=v1.getSimpleName();
            String s2=v2.getSimpleName();
            Double p1=(Double)managerngram.getNgglobal().ngrams[1].getProbabilies().get(s1);
            Double p2=(Double)managerngram.getNgglobal().ngrams[1].getProbabilies().get(s2);
            if (p1 == null && p2 == null) {
              return 0;
            }
            if (p1 == null) {
              logger.error(""String_Node_Str"" + s1);
              return 1;
            }
            if (p2 == null) {
              logger.error(""String_Node_Str"" + s2);
              return -1;
            }
            return Double.compare(p2,p1);
          }
        }
);
      }
      int varsAnalyzed=0;
      for (      CtVariable varFromMap : sortedVariables) {
        for (        Map<String,CtVariable> previousCombination : allCombinations) {
          Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
          newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
          generationCombinations.add(newCombination);
        }
        varsAnalyzed++;
        if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
          break;
        }
      }
      allCombinations=generationCombinations;
    }
  }
 catch (  Throwable e) {
    logger.error(""String_Node_Str"" + mappedVars.size() + ""String_Node_Str""+ Arrays.toString(maxValues));
    logger.error(e);
    return new ArrayList<Map<String,CtVariable>>();
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  for (  Map<String,CtVariable> map : allCombinations) {
    if (map.keySet().size() != varsNamesToCombine.size()) {
    }
  }
  return allCombinations;
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,NGramManager managerngram){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  try {
    for (    VarAccessWrapper currentVar : varsNamesToCombine) {
      if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
        logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
        continue;
      }
      List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
      List<CtVariable> mapped=mappedVars.get(currentVar);
      List<CtVariable> sortedVariables=new ArrayList<>(mapped);
      if (managerngram == null) {
        logger.debug(""String_Node_Str"" + sortedVariables.size());
        Collections.shuffle(sortedVariables,RandomManager.getRandom());
      }
 else {
        logger.debug(""String_Node_Str"");
        Collections.sort(sortedVariables,new Comparator<CtVariable>(){
          @Override public int compare(          CtVariable v1,          CtVariable v2){
            String s1=v1.getSimpleName();
            String s2=v2.getSimpleName();
            Double p1=(Double)managerngram.getNgglobal().ngrams[1].getProbabilies().get(s1);
            Double p2=(Double)managerngram.getNgglobal().ngrams[1].getProbabilies().get(s2);
            if (p1 == null && p2 == null) {
              return 0;
            }
            if (p1 == null) {
              logger.error(""String_Node_Str"" + s1);
              return 1;
            }
            if (p2 == null) {
              logger.error(""String_Node_Str"" + s2);
              return -1;
            }
            return Double.compare(p2,p1);
          }
        }
);
      }
      int varsAnalyzed=0;
      for (      CtVariable varFromMap : sortedVariables) {
        for (        Map<String,CtVariable> previousCombination : allCombinations) {
          Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
          newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
          generationCombinations.add(newCombination);
        }
        varsAnalyzed++;
        if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
          break;
        }
      }
      allCombinations=generationCombinations;
    }
  }
 catch (  Throwable e) {
    logger.error(""String_Node_Str"" + mappedVars.size() + ""String_Node_Str""+ Arrays.toString(maxValues));
    logger.error(e);
    return new ArrayList<Map<String,CtVariable>>();
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  for (  Map<String,CtVariable> map : allCombinations) {
    if (map.keySet().size() != varsNamesToCombine.size()) {
    }
  }
  return allCombinations;
}"
61441,"@SuppressWarnings(""String_Node_Str"") protected void loadIngredientSearchStrategy(AstorCoreEngine approach) throws Exception {
  IngredientBasedRepairApproach ibra=(IngredientBasedRepairApproach)approach;
  IngredientSpace ingredientspace=ibra.getIngredientPool();
  IngredientSearchStrategy ingStrategy=null;
  String ingStrategySt=ConfigurationProperties.properties.getProperty(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY.identifier);
  if (ingStrategySt != null) {
    if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new EfficientIngredientStrategy(ingredientspace);
    }
 else     if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new ProbabilisticIngredientStrategy(ingredientspace);
    }
    if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new CloneIngredientSearchStrategy(ingredientspace);
    }
 else {
      ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{ingredientspace});
    }
  }
 else {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  ibra.setIngredientStrategy(ingStrategy);
}","@SuppressWarnings(""String_Node_Str"") protected void loadIngredientSearchStrategy(AstorCoreEngine approach) throws Exception {
  IngredientBasedRepairApproach ibra=(IngredientBasedRepairApproach)approach;
  IngredientSpace ingredientspace=ibra.getIngredientPool();
  IngredientSearchStrategy ingStrategy=null;
  String ingStrategySt=ConfigurationProperties.properties.getProperty(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY.identifier);
  if (ingStrategySt != null) {
    if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new EfficientIngredientStrategy(ingredientspace);
    }
 else     if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new ProbabilisticIngredientStrategy(ingredientspace);
    }
 else     if (ingStrategySt.equals(""String_Node_Str"")) {
      ingStrategy=new CloneIngredientSearchStrategy(ingredientspace);
    }
 else {
      ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{ingredientspace});
    }
  }
 else {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  ibra.setIngredientStrategy(ingStrategy);
}"
61442,"@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat.toString());
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}"
61443,"@Override public boolean canBeAppliedToPoint(ModificationPoint point){
  return (point.getCodeElement() instanceof CtStatement);
}","@Override public boolean canBeAppliedToPoint(ModificationPoint point){
  if (!(point.getCodeElement() instanceof CtStatement))   return false;
  if (point.getCodeElement() instanceof CtLocalVariable) {
    return false;
  }
  return true;
}"
61444,"@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    generalStatsjson.put(generalStat.name(),generalStats.get(generalStat));
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Object produceOutput(List<PatchStat> statsForPatches,Map<GeneralStatEnum,Object> generalStats,String output){
  JSONObject statsjsonRoot=new JSONObject();
  JSONArray patchlistJson=new JSONArray();
  statsjsonRoot.put(""String_Node_Str"",patchlistJson);
  JSONObject generalStatsjson=new JSONObject();
  statsjsonRoot.put(""String_Node_Str"",generalStatsjson);
  JSONParser parser=new JSONParser();
  for (  GeneralStatEnum generalStat : GeneralStatEnum.values()) {
    Object vStat=generalStats.get(generalStat);
    if (vStat == null)     generalStatsjson.put(generalStat.name(),null);
 else {
      try {
        Object value=parser.parse(vStat.toString());
        generalStatsjson.put(generalStat.name(),value);
      }
 catch (      ParseException e) {
        log.error(e);
      }
    }
  }
  for (  PatchStat patchStat : statsForPatches) {
    JSONObject patchjson=new JSONObject();
    patchlistJson.add(patchjson);
    Map<PatchStatEnum,Object> stats=patchStat.getStats();
    for (    PatchStatEnum statKey : PatchStatEnum.values()) {
      if (statKey.equals(PatchStatEnum.HUNKS)) {
        List<PatchHunkStats> hunks=(List<PatchHunkStats>)stats.get(statKey);
        JSONArray hunksListJson=new JSONArray();
        patchjson.put(""String_Node_Str"",hunksListJson);
        for (        PatchHunkStats patchHunkStats : hunks) {
          Map<HunkStatEnum,Object> statshunk=patchHunkStats.getStats();
          JSONObject hunkjson=new JSONObject();
          hunksListJson.add(hunkjson);
          for (          HunkStatEnum hs : HunkStatEnum.values()) {
            if (statshunk.containsKey(hs))             hunkjson.put(hs.name(),JSONObject.escape(statshunk.get(hs).toString()));
          }
        }
      }
 else {
        if (stats.containsKey(statKey))         patchjson.put(statKey.name(),JSONObject.escape(stats.get(statKey).toString()));
      }
    }
  }
  String filename=ConfigurationProperties.getProperty(""String_Node_Str"");
  String absoluteFileName=output + ""String_Node_Str"" + filename+ ""String_Node_Str"";
  try (FileWriter file=new FileWriter(absoluteFileName)){
    file.write(statsjsonRoot.toJSONString());
    file.flush();
    log.info(""String_Node_Str"" + absoluteFileName);
    log.info(filename + ""String_Node_Str"" + statsjsonRoot.toJSONString());
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.error(""String_Node_Str"" + e.toString());
  }
  return null;
}"
61445,"/** 
 * Compile the original code
 * @param properties
 */
protected void compileProject(ProjectConfiguration properties){
  final Launcher launcher=new Launcher();
  for (  String s : properties.getOriginalDirSrc())   launcher.addInputResource(s);
  for (  String s : properties.getTestDirSrc())   launcher.addInputResource(s);
  String binoutput=properties.getWorkingDirForBytecode() + File.separator + (ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  launcher.setBinaryOutputDirectory(binoutput);
  log.debug(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(true);
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.getEnvironment().setSourceClasspath(properties.getDependenciesString().split(File.pathSeparator));
  launcher.buildModel();
  launcher.getModelBuilder().compile();
}","/** 
 * Compile the original code
 * @param properties
 */
protected void compileProject(ProjectConfiguration properties){
  final Launcher launcher=new Launcher();
  for (  String s : properties.getOriginalDirSrc())   launcher.addInputResource(s);
  for (  String s : properties.getTestDirSrc())   launcher.addInputResource(s);
  String binoutput=properties.getWorkingDirForBytecode() + File.separator + (ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  launcher.setBinaryOutputDirectory(binoutput);
  log.debug(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(true);
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.getEnvironment().setSourceClasspath(properties.getDependenciesString().split(File.pathSeparator));
  launcher.buildModel();
  launcher.getModelBuilder().generateProcessedSourceFiles(OutputType.COMPILATION_UNITS);
  launcher.getModelBuilder().compile(InputType.CTTYPES);
}"
61446,"protected ProjectRepairFacade getProjectConfiguration(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String projectUnderRepairKeyFolder=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingdir=ConfigurationProperties.getProperty(""String_Node_Str"");
  String workingDirForSource=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String workingDirForBytecode=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirRoot(workingdir + projectUnderRepairKeyFolder);
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  determineSourceFolders(properties,srcWithMain,originalProjectRoot);
  if (dependencies != null) {
    properties.setDependencies(dependencies);
  }
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    compileProject(properties);
  }
 else {
    String originalBin=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalAppBinDir(originalBin);
    String originalBinTest=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalTestBinDir(originalBinTest);
  }
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}","protected ProjectRepairFacade getProjectConfiguration(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String projectUnderRepairKeyFolder=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingdir=ConfigurationProperties.getProperty(""String_Node_Str"");
  String workingDirForSource=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String workingDirForBytecode=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirRoot(workingdir + projectUnderRepairKeyFolder);
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  determineSourceFolders(properties,srcWithMain,originalProjectRoot);
  if (dependencies != null) {
    properties.setDependencies(dependencies);
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    String originalBin=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalAppBinDir(originalBin);
    String originalBinTest=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalTestBinDir(originalBinTest);
  }
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}"
61447,"public void initProject(String location,String projectName,String dependencies,String packageToInstrument,double thfl,String failing) throws Exception {
  List<String> failingList=(failing != null) ? Arrays.asList(failing.split(File.pathSeparator)) : new ArrayList<>();
  String method=this.getClass().getSimpleName();
  projectFacade=getProjectConfiguration(location,projectName,method,failingList,dependencies,true);
  projectFacade.getProperties().setExperimentName(this.getClass().getSimpleName());
  projectFacade.setupWorkingDirectories(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
}","public void initProject(String location,String projectName,String dependencies,String packageToInstrument,double thfl,String failing) throws Exception {
  List<String> failingList=(failing != null) ? Arrays.asList(failing.split(File.pathSeparator)) : new ArrayList<>();
  String method=this.getClass().getSimpleName();
  projectFacade=getProjectConfiguration(location,projectName,method,failingList,dependencies,true);
  projectFacade.getProperties().setExperimentName(this.getClass().getSimpleName());
  projectFacade.setupWorkingDirectories(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    compileProject(projectFacade.getProperties());
  }
}"
61448,"protected FaultLocalizationResult searchSuspicious(String locationBytecode,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(locationBytecode + File.separator);
  String projLocationPath=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocationPath + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocationPath + File.separator);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  String testToAvoid=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (testToAvoid != null) {
    String[] testtoavoidarray=testToAvoid.split(""String_Node_Str"");
    for (    String test : testtoavoidarray) {
      gz.addTestPackageNotToExecute(test);
    }
  }
  String packagetonotinstrument=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (packagetonotinstrument != null) {
    String[] packages=packagetonotinstrument.split(""String_Node_Str"");
    for (    String p : packages) {
      gz.addPackageNotToInstrument(p);
    }
  }
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName.split(""String_Node_Str"")[0]);
    }
  }
  int gzPositives=gz.getSuspiciousStatements().stream().filter(x -> x.getSuspiciousness() > 0).collect(Collectors.toList()).size();
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size()+ ""String_Node_Str""+ gzPositives);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    gzCandidates.removeIf(susp -> (susp.getSuspiciousness() == 0));
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}","protected FaultLocalizationResult searchSuspicious(String locationBytecode,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(locationBytecode + File.separator);
  String projLocationPath=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocationPath + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocationPath + File.separator);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  String testToAvoid=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (testToAvoid != null) {
    String[] testtoavoidarray=testToAvoid.split(""String_Node_Str"");
    for (    String test : testtoavoidarray) {
      gz.addTestPackageNotToExecute(test);
    }
  }
  String packagetonotinstrument=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (packagetonotinstrument != null) {
    String[] packages=packagetonotinstrument.split(""String_Node_Str"");
    for (    String p : packages) {
      gz.addPackageNotToInstrument(p);
    }
  }
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      String testCaseName=testName.split(""String_Node_Str"")[0];
      if (!failingTestCases.contains(testCaseName)) {
        failingTestCases.add(testCaseName);
      }
    }
  }
  int gzPositives=gz.getSuspiciousStatements().stream().filter(x -> x.getSuspiciousness() > 0).collect(Collectors.toList()).size();
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size()+ ""String_Node_Str""+ gzPositives);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    gzCandidates.removeIf(susp -> (susp.getSuspiciousness() == 0));
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}"
61449,"/** 
 * Compile the original code
 */
protected void compileProject(){
  final Launcher launcher=new Launcher();
  for (  String s : projectFacade.getProperties().getOriginalDirSrc())   launcher.addInputResource(s);
  for (  String s : projectFacade.getProperties().getTestDirSrc())   launcher.addInputResource(s);
  launcher.setBinaryOutputDirectory(projectFacade.getOutDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT));
  log.debug(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(true);
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.buildModel();
  launcher.getEnvironment().setSourceClasspath(projectFacade.getProperties().getDependenciesString().split(File.pathSeparator));
  launcher.getModelBuilder().compile();
}","/** 
 * Compile the original code
 * @param properties
 */
protected void compileProject(ProjectConfiguration properties){
  final Launcher launcher=new Launcher();
  for (  String s : properties.getOriginalDirSrc())   launcher.addInputResource(s);
  for (  String s : properties.getTestDirSrc())   launcher.addInputResource(s);
  String binoutput=properties.getWorkingDirForBytecode() + File.separator + (ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  launcher.setBinaryOutputDirectory(binoutput);
  log.debug(""String_Node_Str"" + launcher.getModelBuilder().getInputSources() + ""String_Node_Str""+ launcher.getModelBuilder().getBinaryOutputDirectory());
  launcher.getEnvironment().setPreserveLineNumbers(true);
  launcher.getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  launcher.getEnvironment().setShouldCompile(true);
  launcher.getEnvironment().setSourceClasspath(properties.getDependenciesString().split(File.pathSeparator));
  launcher.buildModel();
  launcher.getModelBuilder().compile();
}"
61450,"protected ProjectRepairFacade getProjectConfiguration(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String projectUnderRepairKeyFolder=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingdir=ConfigurationProperties.getProperty(""String_Node_Str"");
  String workingDirForSource=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String workingDirForBytecode=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirRoot(workingdir + projectUnderRepairKeyFolder);
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  determineSourceFolders(properties,srcWithMain,originalProjectRoot);
  if (dependencies != null) {
    properties.setDependencies(dependencies);
  }
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    compileProject();
  }
 else {
    String originalBin=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalAppBinDir(originalBin);
    String originalBinTest=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalTestBinDir(originalBinTest);
  }
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}","protected ProjectRepairFacade getProjectConfiguration(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String projectUnderRepairKeyFolder=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingdir=ConfigurationProperties.getProperty(""String_Node_Str"");
  String workingDirForSource=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String workingDirForBytecode=workingdir + projectUnderRepairKeyFolder + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirRoot(workingdir + projectUnderRepairKeyFolder);
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  determineSourceFolders(properties,srcWithMain,originalProjectRoot);
  if (dependencies != null) {
    properties.setDependencies(dependencies);
  }
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    compileProject(properties);
  }
 else {
    String originalBin=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalAppBinDir(originalBin);
    String originalBinTest=determineBinFolder(originalProjectRoot,ConfigurationProperties.getProperty(""String_Node_Str""));
    properties.setOriginalTestBinDir(originalBinTest);
  }
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}"
61451,"/** 
 * Load extensions point that are used for all approaches. For the moment it loads only the ""patch priorization point""""
 * @throws Exception
 */
private boolean loadCommonExtensionPoints(AstorCoreEngine astorCore){
  String patchpriority=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (patchpriority != null && !patchpriority.trim().isEmpty()) {
    SolutionVariantSortCriterion priorizStrategy=null;
    try {
      priorizStrategy=(SolutionVariantSortCriterion)PlugInLoader.loadPlugin(ExtensionPoints.SOLUTION_SORT_CRITERION);
      astorCore.setPatchSortCriterion(priorizStrategy);
      return true;
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  List<ReportResults> outputs=new ArrayList<>();
  astorCore.setOutputResults(outputs);
  String outputproperty=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (outputproperty != null && !outputproperty.trim().isEmpty()) {
    String[] outprocess=outputproperty.split(""String_Node_Str"");
    try {
      for (      String outp : outprocess) {
        ReportResults outputresult=(ReportResults)PlugInLoader.loadPlugin(outp,ExtensionPoints.OUTPUT_RESULTS._class);
        outputs.add(outputresult);
      }
      return true;
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
 else {
    outputs.add(new StandardOutputReport());
    outputs.add(new PatchJSONStandarOutput());
  }
  return false;
}","/** 
 * Load extensions point that are used for all approaches. For the moment it loads only the ""patch priorization point""""
 * @throws Exception
 */
private boolean loadCommonExtensionPoints(AstorCoreEngine astorCore){
  String patchpriority=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (patchpriority != null && !patchpriority.trim().isEmpty()) {
    SolutionVariantSortCriterion priorizStrategy=null;
    try {
      priorizStrategy=(SolutionVariantSortCriterion)PlugInLoader.loadPlugin(ExtensionPoints.SOLUTION_SORT_CRITERION);
      astorCore.setPatchSortCriterion(priorizStrategy);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  List<ReportResults> outputs=new ArrayList<>();
  astorCore.setOutputResults(outputs);
  String outputproperty=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (outputproperty != null && !outputproperty.trim().isEmpty()) {
    String[] outprocess=outputproperty.split(""String_Node_Str"");
    try {
      for (      String outp : outprocess) {
        ReportResults outputresult=(ReportResults)PlugInLoader.loadPlugin(outp,ExtensionPoints.OUTPUT_RESULTS._class);
        outputs.add(outputresult);
      }
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
 else {
    outputs.add(new StandardOutputReport());
    outputs.add(new PatchJSONStandarOutput());
  }
  return true;
}"
61452,"@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int v=0;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + (++v) + ""String_Node_Str""+ variants.size());
    for (    ModificationPoint modifPoint : parentVariant.getModificationPoints()) {
      List<OperatorInstance> operatorInstances=createInstancesOfOperators((SuspiciousModificationPoint)modifPoint);
      if (operatorInstances == null || operatorInstances.isEmpty())       continue;
      for (      OperatorInstance pointOperation : operatorInstances) {
        try {
          log.info(""String_Node_Str"" + modifPoint);
          log.info(""String_Node_Str"" + pointOperation);
        }
 catch (        Exception e) {
          log.error(e);
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        if (solution) {
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))           return;
        }
        undoOperationToSpoonElement(pointOperation);
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          log.debug(""String_Node_Str"");
          return;
        }
      }
    }
  }
}","@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int v=0;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + (++v) + ""String_Node_Str""+ variants.size());
    for (    ModificationPoint modifPoint : parentVariant.getModificationPoints()) {
      List<OperatorInstance> operatorInstances=createInstancesOfOperators((SuspiciousModificationPoint)modifPoint);
      if (operatorInstances == null || operatorInstances.isEmpty())       continue;
      for (      OperatorInstance pointOperation : operatorInstances) {
        try {
          log.info(""String_Node_Str"" + modifPoint);
          log.info(""String_Node_Str"" + pointOperation);
        }
 catch (        Exception e) {
          log.error(e);
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        undoOperationToSpoonElement(pointOperation);
        if (solution) {
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))           return;
        }
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          log.debug(""String_Node_Str"");
          return;
        }
      }
    }
  }
}"
61453,"public boolean copyOriginalBin(String inDirs,String mutatorIdentifier) throws IOException {
  boolean copied=false;
  for (  String inDir : inDirs.split(File.pathSeparator)) {
    if (inDir != null) {
      File original=new File(inDir);
      File dest=new File(getOutDirWithPrefix(mutatorIdentifier));
      dest.mkdirs();
      FileUtils.copyDirectory(original,dest);
      copied=true;
    }
  }
  return copied;
}","public boolean copyOriginalBin(String inDirs,String mutatorIdentifier) throws IOException {
  if (inDirs == null) {
    logger.debug(""String_Node_Str"");
    return false;
  }
  boolean copied=false;
  for (  String inDir : inDirs.split(File.pathSeparator)) {
    if (inDir != null) {
      File original=new File(inDir);
      File dest=new File(getOutDirWithPrefix(mutatorIdentifier));
      dest.mkdirs();
      FileUtils.copyDirectory(original,dest);
      copied=true;
    }
  }
  return copied;
}"
61454,"protected FaultLocalizationResult searchSuspicious(String location,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String projLocation=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocation + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocation);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName.split(""String_Node_Str"")[0]);
    }
  }
  int gzPositives=gz.getSuspiciousStatements().stream().filter(x -> x.getSuspiciousness() > 0).collect(Collectors.toList()).size();
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size()+ ""String_Node_Str""+ gzPositives);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    gzCandidates.removeIf(susp -> (susp.getSuspiciousness() == 0));
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}","protected FaultLocalizationResult searchSuspicious(String locationBytecode,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(locationBytecode + File.separator);
  String projLocationPath=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocationPath + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocationPath + File.separator);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName.split(""String_Node_Str"")[0]);
    }
  }
  int gzPositives=gz.getSuspiciousStatements().stream().filter(x -> x.getSuspiciousness() > 0).collect(Collectors.toList()).size();
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size()+ ""String_Node_Str""+ gzPositives);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    gzCandidates.removeIf(susp -> (susp.getSuspiciousness() == 0));
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}"
61455,"private void addToFolder(List<String> path,String[] possibleTestSrcFolders,boolean onlyOne){
  for (  String possibleSrc : possibleTestSrcFolders) {
    File fSrc=new File(possibleSrc);
    if (fSrc.exists()) {
      path.add(possibleSrc);
      if (onlyOne)       break;
    }
  }
}","private void addToFolder(List<String> pathResults,String[] possibleTestSrcFolders,String originalProjectRoot,boolean onlyOne) throws IOException {
  boolean added=false;
  for (  String possibleSrc : possibleTestSrcFolders) {
    File fSrc=new File(File.separator + possibleSrc).getAbsoluteFile();
    if (Files.exists(fSrc.toPath())) {
      if (!pathResults.contains(fSrc.getAbsolutePath())) {
        pathResults.add(fSrc.getAbsolutePath());
        added=true;
      }
    }
 else {
      File fSrcRelative=new File(originalProjectRoot + File.separator + possibleSrc);
      if (Files.isDirectory(fSrcRelative.toPath())) {
        if (!pathResults.contains(fSrcRelative.getAbsolutePath())) {
          pathResults.add(fSrcRelative.getAbsolutePath());
          added=true;
        }
      }
    }
    if (onlyOne && added)     break;
  }
}"
61456,"private List<String> determineSourceFolders(boolean srcWithMain,String originalProjectRoot){
  final boolean onlyOneFolder=true;
  List<String> sourceFolders=new ArrayList<>();
  String paramSrc=ConfigurationProperties.getProperty(""String_Node_Str"");
  String paramTestSrc=ConfigurationProperties.getProperty(""String_Node_Str"");
  String[] srcs=paramSrc.split(File.pathSeparator);
  addToFolder(sourceFolders,srcs,!onlyOneFolder);
  String[] possibleSrcFolders=new String[]{(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str"")};
  addToFolder(sourceFolders,possibleSrcFolders,onlyOneFolder);
  String[] srcTs=paramTestSrc.split(File.pathSeparator);
  addToFolder(sourceFolders,srcTs,!onlyOneFolder);
  String[] possibleTestSrcFolders=new String[]{(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str"")};
  addToFolder(sourceFolders,possibleTestSrcFolders,onlyOneFolder);
  return sourceFolders;
}","private List<String> determineSourceFolders(boolean srcWithMain,String originalProjectRoot) throws IOException {
  final boolean onlyOneFolder=true;
  List<String> sourceFolders=new ArrayList<>();
  String paramSrc=ConfigurationProperties.getProperty(""String_Node_Str"");
  String paramTestSrc=ConfigurationProperties.getProperty(""String_Node_Str"");
  String[] srcs=paramSrc.split(File.pathSeparator);
  addToFolder(sourceFolders,srcs,originalProjectRoot,!onlyOneFolder);
  String[] possibleSrcFolders=new String[]{(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str"")};
  addToFolder(sourceFolders,possibleSrcFolders,originalProjectRoot,onlyOneFolder);
  String[] srcTs=paramTestSrc.split(File.pathSeparator);
  addToFolder(sourceFolders,srcTs,originalProjectRoot,!onlyOneFolder);
  String[] possibleTestSrcFolders=new String[]{(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str""),(originalProjectRoot + File.separator + ""String_Node_Str"")};
  addToFolder(sourceFolders,possibleTestSrcFolders,originalProjectRoot,onlyOneFolder);
  return sourceFolders;
}"
61457,"/** 
 * Finds an example to test in the command line
 * @param cmd
 * @return
 * @throws Exception
 */
public boolean executeExample(String[] args) throws Exception {
  CommandLine cmd=parser.parse(options,args);
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  String dependenciespath=null, folder=null, failing=null, location=null, packageToInstrument=null;
  double faultLocalizationThreshold=0;
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=""String_Node_Str"";
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.2;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=""String_Node_Str"";
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.2;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (location != null) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",new Double(faultLocalizationThreshold).toString());
    this.run(location,folder,dependenciespath,packageToInstrument,faultLocalizationThreshold,failing);
    return true;
  }
  return false;
}","/** 
 * Finds an example to test in the command line
 * @param cmd
 * @return
 * @throws Exception
 */
public boolean executeExample(String[] args) throws Exception {
  CommandLine cmd=parser.parse(options,args);
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  String dependenciespath=null, folder=null, failing=null, location=null, packageToInstrument=null;
  double faultLocalizationThreshold=0;
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=new File(""String_Node_Str"").getAbsolutePath();
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=new File(""String_Node_Str"").getAbsolutePath();
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.2;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=""String_Node_Str"";
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.2;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    dependenciespath=""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"";
    folder=""String_Node_Str"";
    failing=""String_Node_Str"";
    location=(""String_Node_Str"");
    packageToInstrument=""String_Node_Str"";
    faultLocalizationThreshold=0.5;
  }
  if (location != null) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",new Double(faultLocalizationThreshold).toString());
    this.run(location,folder,dependenciespath,packageToInstrument,faultLocalizationThreshold,failing);
    return true;
  }
  return false;
}"
61458,"private String getDependencies(File projectLocation,File dirLibs){
  String dep=""String_Node_Str"";
  System.out.println(dirLibs);
  for (  File depend : dirLibs.listFiles()) {
    if (!depend.isDirectory())     log.debug(depend.getName());
    dep+=depend.getAbsolutePath() + File.pathSeparator;
  }
  dep+=projectLocation.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dep+=File.pathSeparator + projectLocation.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dep+=File.pathSeparator + projectLocation.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  log.debug(""String_Node_Str"" + dep);
  return dep;
}","public static String getDependencies(File projectLocation,File dirLibs){
  String dep=""String_Node_Str"";
  System.out.println(dirLibs);
  for (  File depend : dirLibs.listFiles()) {
    if (!depend.isDirectory())     log.debug(depend.getName());
    dep+=depend.getAbsolutePath() + File.pathSeparator;
  }
  dep+=projectLocation.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dep+=File.pathSeparator + projectLocation.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dep+=File.pathSeparator + projectLocation.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  log.debug(""String_Node_Str"" + dep);
  return dep;
}"
61459,"public void setupLogging(){
  String patternLayout=""String_Node_Str"";
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    patternLayout=""String_Node_Str"";
  }
 else {
    patternLayout=ConfigurationProperties.getProperty(""String_Node_Str"");
  }
  Logger.getRootLogger().getLoggerRepository().resetConfiguration();
  ConsoleAppender console=new ConsoleAppender();
  console.setLayout(new PatternLayout(patternLayout));
  console.activateOptions();
  Logger.getRootLogger().addAppender(console);
  String loglevelSelected=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (loglevelSelected != null)   LogManager.getRootLogger().setLevel(Level.toLevel(loglevelSelected));
  if (ConfigurationProperties.hasProperty(""String_Node_Str"")) {
    FileAppender fa=new FileAppender();
    String filePath=ConfigurationProperties.getProperty(""String_Node_Str"");
    File fileLog=new File(filePath);
    fileLog.mkdirs();
    fa.setName(""String_Node_Str"");
    fa.setFile(fileLog.getAbsolutePath());
    fa.setLayout(new PatternLayout(patternLayout));
    fa.setThreshold(LogManager.getRootLogger().getLevel());
    fa.setAppend(true);
    fa.activateOptions();
    Logger.getRootLogger().addAppender(fa);
    this.log.info(""String_Node_Str"" + filePath);
  }
}","public void setupLogging() throws IOException {
  String patternLayout=""String_Node_Str"";
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    patternLayout=""String_Node_Str"";
  }
 else {
    patternLayout=ConfigurationProperties.getProperty(""String_Node_Str"");
  }
  Logger.getRootLogger().getLoggerRepository().resetConfiguration();
  ConsoleAppender console=new ConsoleAppender();
  console.setLayout(new PatternLayout(patternLayout));
  console.activateOptions();
  Logger.getRootLogger().addAppender(console);
  String loglevelSelected=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (loglevelSelected != null)   LogManager.getRootLogger().setLevel(Level.toLevel(loglevelSelected));
  if (ConfigurationProperties.hasProperty(""String_Node_Str"")) {
    FileAppender fa=new FileAppender();
    String filePath=ConfigurationProperties.getProperty(""String_Node_Str"");
    File fileLog=new File(filePath);
    if (!fileLog.exists()) {
      fileLog.getParentFile().mkdirs();
      fileLog.createNewFile();
    }
    fa.setName(""String_Node_Str"");
    fa.setFile(fileLog.getAbsolutePath());
    fa.setLayout(new PatternLayout(patternLayout));
    fa.setThreshold(LogManager.getRootLogger().getLevel());
    fa.setAppend(true);
    fa.activateOptions();
    Logger.getRootLogger().addAppender(fa);
    this.log.info(""String_Node_Str"" + filePath);
  }
}"
61460,"/** 
 * Math 70 bug can be fixed by replacing a method invocation inside a return statement. + return solve(f, min, max); - return solve(min, max); One solution with local scope, another with package This test validates the stats via API and JSON
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testMath70LocalOutputs() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  int generations=50;
  String[] args=commandMath70(dep,out,generations);
  CommandSummary cs=new CommandSummary(args);
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  System.out.println(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  List<ProgramVariant> solutions=main1.getEngine().getSolutions();
  assertTrue(solutions.size() > 0);
  assertEquals(1,solutions.size());
  Stats stats=Stats.createStat();
  assertNotNull(stats);
  assertNotNull(stats.getStatsOfPatches());
  assertTrue(stats.getStatsOfPatches().size() > 0);
  String jsonpath=main1.getEngine().getProjectFacade().getProperties().getWorkingDirRoot() + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  File filejson=new File(jsonpath);
  assertTrue(filejson.exists());
  JSONParser parser=new JSONParser();
  Object obj=parser.parse(new FileReader(filejson));
  JSONObject jsonroot=(JSONObject)obj;
  JSONArray msg=(JSONArray)jsonroot.get(""String_Node_Str"");
  assertEquals(1,msg.size());
  JSONObject pob=(JSONObject)msg.get(0);
  JSONArray hunks=(JSONArray)pob.get(""String_Node_Str"");
  assertEquals(1,hunks.size());
  JSONObject hunkob=(JSONObject)hunks.get(0);
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.PATCH_HUNK_CODE.name()));
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.ORIGINAL_CODE.name()));
  assertEquals(1,stats.getStatsOfPatches().size());
  PatchStat patchstats=stats.getStatsOfPatches().get(0);
  List<PatchHunkStats> hunksApi=(List<PatchHunkStats>)patchstats.getStats().get(PatchStatEnum.HUNKS);
  assertNotNull(hunksApi);
  PatchHunkStats hunkStats=hunksApi.get(0);
  assertNotNull(hunkStats);
  assertEquals(""String_Node_Str"",hunkStats.getStats().get(HunkStatEnum.PATCH_HUNK_CODE));
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.ORIGINAL_CODE.name()));
}","/** 
 * Math 70 bug can be fixed by replacing a method invocation inside a return statement. + return solve(f, min, max); - return solve(min, max); One solution with local scope, another with package This test validates the stats via API and JSON
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testMath70LocalOutputs() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  int generations=50;
  String[] args=commandMath70(dep,out,generations);
  CommandSummary cs=new CommandSummary(args);
  cs.command.put(""String_Node_Str"",""String_Node_Str"");
  System.out.println(Arrays.toString(cs.flat()));
  main1.execute(cs.flat());
  List<ProgramVariant> solutions=main1.getEngine().getSolutions();
  assertTrue(solutions.size() > 0);
  assertEquals(1,solutions.size());
  Stats stats=Stats.getCurrentStat();
  assertNotNull(stats);
  assertNotNull(stats.getStatsOfPatches());
  assertTrue(stats.getStatsOfPatches().size() > 0);
  String jsonpath=main1.getEngine().getProjectFacade().getProperties().getWorkingDirRoot() + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")+ ""String_Node_Str"";
  File filejson=new File(jsonpath);
  assertTrue(filejson.exists());
  JSONParser parser=new JSONParser();
  Object obj=parser.parse(new FileReader(filejson));
  JSONObject jsonroot=(JSONObject)obj;
  JSONArray msg=(JSONArray)jsonroot.get(""String_Node_Str"");
  assertEquals(1,msg.size());
  JSONObject pob=(JSONObject)msg.get(0);
  JSONArray hunks=(JSONArray)pob.get(""String_Node_Str"");
  assertEquals(1,hunks.size());
  JSONObject hunkob=(JSONObject)hunks.get(0);
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.PATCH_HUNK_CODE.name()));
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.ORIGINAL_CODE.name()));
  assertEquals(1,stats.getStatsOfPatches().size());
  PatchStat patchstats=stats.getStatsOfPatches().get(0);
  List<PatchHunkStats> hunksApi=(List<PatchHunkStats>)patchstats.getStats().get(PatchStatEnum.HUNKS);
  assertNotNull(hunksApi);
  PatchHunkStats hunkStats=hunksApi.get(0);
  assertNotNull(hunkStats);
  assertEquals(""String_Node_Str"",hunkStats.getStats().get(HunkStatEnum.PATCH_HUNK_CODE));
  assertEquals(""String_Node_Str"",hunkob.get(HunkStatEnum.ORIGINAL_CODE.name()));
}"
61461,"public static Stats createStat(){
  if (currentStat == null) {
    currentStat=new Stats();
  }
  return currentStat;
}","public static Stats createStat(){
  currentStat=new Stats();
  return currentStat;
}"
61462,"public List<CtCodeElement> getNotExhaustedBaseElements(ModificationPoint modificationPoint,AstorOperator operationType){
  String type=null;
  if (operationType instanceof ReplaceOp) {
    type=modificationPoint.getCodeElement().getClass().getSimpleName();
  }
  List<CtCodeElement> elements=null;
  if (type == null) {
    elements=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement());
  }
 else {
    elements=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement(),type);
  }
  List<CtCodeElement> uniques=new ArrayList<>(elements);
  String key=getKey(modificationPoint,operationType);
  List<CtElement> exhaustives=this.exhaustTemplates.get(key);
  if (exhaustives != null) {
    boolean removed=uniques.removeAll(exhaustives);
  }
  return uniques;
}","public List<CtCodeElement> getNotExhaustedBaseElements(ModificationPoint modificationPoint,AstorOperator operationType){
  String type=null;
  if (operationType instanceof ReplaceOp) {
    type=modificationPoint.getCodeElement().getClass().getSimpleName();
  }
  List<CtCodeElement> elements=null;
  if (type == null) {
    elements=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement());
  }
 else {
    elements=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement(),type);
  }
  if (elements == null)   return null;
  List<CtCodeElement> uniques=new ArrayList<>(elements);
  String key=getKey(modificationPoint,operationType);
  List<CtElement> exhaustives=this.exhaustTemplates.get(key);
  if (exhaustives != null) {
    boolean removed=uniques.removeAll(exhaustives);
  }
  return uniques;
}"
61463,"/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int attemptsBaseIngredients=0;
  List<CtCodeElement> baseElements=getNotExhaustedBaseElements(modificationPoint,operationType);
  if (baseElements.isEmpty()) {
    log.debug(""String_Node_Str"" + modificationPoint);
    log.debug(""String_Node_Str"" + this.exhaustTemplates.get(getKey(modificationPoint,operationType)));
    return null;
  }
  int elementsFromFixSpace=baseElements.size();
  log.debug(""String_Node_Str"" + elementsFromFixSpace);
  Stats.currentStat.addSize(Stats.currentStat.ingredientSpaceSize,baseElements.size());
  while (attemptsBaseIngredients < elementsFromFixSpace) {
    log.debug(String.format(""String_Node_Str"",attemptsBaseIngredients,elementsFromFixSpace));
    Ingredient baseIngredient=new Ingredient(getRandomStatementFromSpace(baseElements),null);
    if (baseIngredient == null || baseIngredient.getCode() == null) {
      return null;
    }
    Ingredient refinedIngredient=getNotUsedTransformedElement(modificationPoint,operationType,baseIngredient);
    attemptsBaseIngredients++;
    if (refinedIngredient != null) {
      refinedIngredient.setDerivedFrom(baseIngredient.getCode());
      return refinedIngredient;
    }
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}","/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int attemptsBaseIngredients=0;
  List<CtCodeElement> baseElements=getNotExhaustedBaseElements(modificationPoint,operationType);
  if (baseElements == null || baseElements.isEmpty()) {
    log.debug(""String_Node_Str"" + modificationPoint);
    log.debug(""String_Node_Str"" + this.exhaustTemplates.get(getKey(modificationPoint,operationType)));
    return null;
  }
  int elementsFromFixSpace=baseElements.size();
  log.debug(""String_Node_Str"" + elementsFromFixSpace);
  Stats.currentStat.addSize(Stats.currentStat.ingredientSpaceSize,baseElements.size());
  while (attemptsBaseIngredients < elementsFromFixSpace) {
    log.debug(String.format(""String_Node_Str"",attemptsBaseIngredients,elementsFromFixSpace));
    Ingredient baseIngredient=new Ingredient(getRandomStatementFromSpace(baseElements),null);
    if (baseIngredient == null || baseIngredient.getCode() == null) {
      return null;
    }
    Ingredient refinedIngredient=getNotUsedTransformedElement(modificationPoint,operationType,baseIngredient);
    attemptsBaseIngredients++;
    if (refinedIngredient != null) {
      refinedIngredient.setDerivedFrom(baseIngredient.getCode());
      return refinedIngredient;
    }
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}"
61464,"@Override public List<CtCodeElement> getNotExhaustedBaseElements(ModificationPoint modificationPoint,AstorOperator operationType){
  List<CtCodeElement> elements=super.getNotExhaustedBaseElements(modificationPoint,operationType);
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + modificationPoint);
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    probs=mp.getProb();
  }
  return elements;
}","@Override public List<CtCodeElement> getNotExhaustedBaseElements(ModificationPoint modificationPoint,AstorOperator operationType){
  List<CtCodeElement> elements=super.getNotExhaustedBaseElements(modificationPoint,operationType);
  if (elements == null) {
    return null;
  }
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + modificationPoint);
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    probs=mp.getProb();
  }
  return elements;
}"
61465,"@Override public int compare(CtVariable v1,CtVariable v2){
  String s1=v1.getSimpleName();
  String s2=v2.getSimpleName();
  Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
  Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
  if (p1 == null) {
    logger.error(""String_Node_Str"" + s1);
    return 1;
  }
  if (p2 == null) {
    logger.error(""String_Node_Str"" + s2);
    return -1;
  }
  return Double.compare(p2,p1);
}","@Override public int compare(CtVariable v1,CtVariable v2){
  String s1=v1.getSimpleName();
  String s2=v2.getSimpleName();
  Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
  Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
  if (p1 == null && p2 == null) {
    return 0;
  }
  if (p1 == null) {
    logger.error(""String_Node_Str"" + s1);
    return 1;
  }
  if (p2 == null) {
    logger.error(""String_Node_Str"" + s2);
    return -1;
  }
  return Double.compare(p2,p1);
}"
61466,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random,NGramManager manager){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
      logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
      continue;
    }
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
 else     if (manager != null) {
      Collections.sort(sortedVariables,new Comparator<CtVariable>(){
        @Override public int compare(        CtVariable v1,        CtVariable v2){
          String s1=v1.getSimpleName();
          String s2=v2.getSimpleName();
          Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
          Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
          if (p1 == null) {
            logger.error(""String_Node_Str"" + s1);
            return 1;
          }
          if (p2 == null) {
            logger.error(""String_Node_Str"" + s2);
            return -1;
          }
          return Double.compare(p2,p1);
        }
      }
);
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random,NGramManager manager){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
      logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
      continue;
    }
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
 else     if (manager != null) {
      Collections.sort(sortedVariables,new Comparator<CtVariable>(){
        @Override public int compare(        CtVariable v1,        CtVariable v2){
          String s1=v1.getSimpleName();
          String s2=v2.getSimpleName();
          Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
          Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
          if (p1 == null && p2 == null) {
            return 0;
          }
          if (p1 == null) {
            logger.error(""String_Node_Str"" + s1);
            return 1;
          }
          if (p2 == null) {
            logger.error(""String_Node_Str"" + s2);
            return -1;
          }
          return Double.compare(p2,p1);
        }
      }
);
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}"
61467,"@Override public int compare(CtVariable v1,CtVariable v2){
  String s1=v1.getSimpleName();
  String s2=v2.getSimpleName();
  Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
  Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
  return Double.compare(p2,p1);
}","@Override public int compare(CtVariable v1,CtVariable v2){
  String s1=v1.getSimpleName();
  String s2=v2.getSimpleName();
  Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
  Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
  if (p1 == null) {
    logger.error(""String_Node_Str"" + s1);
    return 1;
  }
  if (p2 == null) {
    logger.error(""String_Node_Str"" + s2);
    return -1;
  }
  return Double.compare(p2,p1);
}"
61468,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random,NGramManager manager){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
      logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
      continue;
    }
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
 else     if (manager != null) {
      Collections.sort(sortedVariables,new Comparator<CtVariable>(){
        @Override public int compare(        CtVariable v1,        CtVariable v2){
          String s1=v1.getSimpleName();
          String s2=v2.getSimpleName();
          Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
          Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
          return Double.compare(p2,p1);
        }
      }
);
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random,NGramManager manager){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  Number[] maxValues=getMaxCombination(mappedVars,varsNamesToCombine);
  long numberTotalComb=(long)maxValues[0];
  double maxPerVarLimit=(double)maxValues[1];
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
      logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
      continue;
    }
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
 else     if (manager != null) {
      Collections.sort(sortedVariables,new Comparator<CtVariable>(){
        @Override public int compare(        CtVariable v1,        CtVariable v2){
          String s1=v1.getSimpleName();
          String s2=v2.getSimpleName();
          Double p1=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s1);
          Double p2=(Double)manager.getNgglobal().ngrams[1].getProbabilies().get(s2);
          if (p1 == null) {
            logger.error(""String_Node_Str"" + s1);
            return 1;
          }
          if (p2 == null) {
            logger.error(""String_Node_Str"" + s2);
            return -1;
          }
          return Double.compare(p2,p1);
        }
      }
);
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)(Math.ceil(maxPerVarLimit)))) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + allCombinations.size());
  if (allCombinations.size() > maxNumberCombinations) {
    allCombinations=allCombinations.subList(0,maxNumberCombinations);
  }
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}"
61469,"@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int v=0;
  totalIngredients=0;
  totalBases=0;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + (++v) + ""String_Node_Str""+ variants.size());
    for (    ModificationPoint modifPoint : parentVariant.getModificationPoints()) {
      AstorOperator pointOperation=this.getOperatorSpace().getOperators().get(0);
      try {
        log.info(""String_Node_Str"" + modifPoint);
      }
 catch (      Exception e) {
      }
      EfficientIngredientStrategy estrategy=(EfficientIngredientStrategy)this.getIngredientStrategy();
      List<CtCodeElement> elements=estrategy.getNotExhaustedBaseElements(modifPoint,pointOperation);
      if (elements == null) {
        continue;
      }
      totalBases+=elements.size();
      for (      CtCodeElement baseIngredient : elements) {
        long nrIngredients[]=getNrIngredients(modifPoint,baseIngredient);
        if ((long)nrIngredients[0] != nrIngredients[1]) {
          attemptsCutted++;
        }
        totalIngredients+=nrIngredients[0];
        totalIngredientsCutted+=nrIngredients[1];
        log.debug(""String_Node_Str"" + Arrays.toString(nrIngredients));
        totalAttempts+=1;
      }
    }
  }
  log.info(""String_Node_Str"" + getVariants().get(0).getModificationPoints().size());
  log.info(""String_Node_Str"" + totalBases);
  log.info(""String_Node_Str"" + totalAttempts);
  log.info(""String_Node_Str"" + attemptsCutted);
  log.info(""String_Node_Str"" + totalIngredients);
  log.info(""String_Node_Str"" + totalIngredientsCutted);
}","@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int v=0;
  totalIngredients=0;
  totalBases=0;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + (++v) + ""String_Node_Str""+ variants.size());
    totalmp=parentVariant.getModificationPoints().size();
    for (    ModificationPoint modifPoint : parentVariant.getModificationPoints()) {
      AstorOperator pointOperation=this.getOperatorSpace().getOperators().get(0);
      try {
        log.info(""String_Node_Str"" + modifPoint);
      }
 catch (      Exception e) {
      }
      EfficientIngredientStrategy estrategy=(EfficientIngredientStrategy)this.getIngredientStrategy();
      List<CtCodeElement> elements=estrategy.getNotExhaustedBaseElements(modifPoint,pointOperation);
      if (elements == null) {
        continue;
      }
      totalBases+=elements.size();
      for (      CtCodeElement baseIngredient : elements) {
        long nrIngredients[]=getNrIngredients(modifPoint,baseIngredient);
        if ((long)nrIngredients[0] != nrIngredients[1]) {
          attemptsCutted++;
        }
        totalIngredients+=nrIngredients[0];
        totalIngredientsCutted+=nrIngredients[1];
        log.debug(""String_Node_Str"" + Arrays.toString(nrIngredients));
        totalAttempts+=1;
      }
    }
  }
  log.info(""String_Node_Str"" + getVariants().get(0).getModificationPoints().size());
  log.info(""String_Node_Str"" + totalBases);
  log.info(""String_Node_Str"" + totalAttempts);
  log.info(""String_Node_Str"" + attemptsCutted);
  log.info(""String_Node_Str"" + totalIngredients);
  log.info(""String_Node_Str"" + totalIngredientsCutted);
}"
61470,"public FaultLocalizationResult searchSuspicious(String location,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String projLocation=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocation + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocation);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName.split(""String_Node_Str"")[0]);
    }
  }
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}","public FaultLocalizationResult searchSuspicious(String location,List<String> testsToExecute,List<String> toInstrument,Set<String> cp,String srcFolder) throws Exception {
  List<String> failingTestCases=new ArrayList<String>();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String projLocation=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocation + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocation);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName.split(""String_Node_Str"")[0]);
    }
  }
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  List<Statement> gzCandidates=new ArrayList();
  for (  Statement gzoltarStatement : gz.getSuspiciousStatements()) {
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    if (isSource(compName,srcFolder) && (!ConfigurationProperties.getPropertyBool(""String_Node_Str"") || (gzoltarStatement.getSuspiciousness() >= thr))) {
      gzCandidates.add(gzoltarStatement);
    }
  }
  if (gzCandidates.isEmpty()) {
    gzCandidates.addAll(gz.getSuspiciousStatements());
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    gzCandidates.removeIf(susp -> (susp.getSuspiciousness() == 0));
  }
  Collections.sort(gzCandidates,(o1,o2) -> Double.compare(o2.getSuspiciousness(),o1.getSuspiciousness()));
  int max=(gzCandidates.size() < maxSuspCandidates) ? gzCandidates.size() : maxSuspCandidates;
  List<SuspiciousCode> candidates=new ArrayList<SuspiciousCode>();
  for (int i=0; i < max; i++) {
    Statement gzoltarStatement=gzCandidates.get(i);
    String compName=gzoltarStatement.getMethod().getParent().getLabel();
    logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ gzoltarStatement.getLineNumber()+ ""String_Node_Str""+ df.format(gzoltarStatement.getSuspiciousness()));
    SuspiciousCode suspcode=new SuspiciousCode(compName,gzoltarStatement.getMethod().toString(),gzoltarStatement.getLineNumber(),gzoltarStatement.getSuspiciousness(),gzoltarStatement.getCountMap());
    candidates.add(suspcode);
  }
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  return new FaultLocalizationResult(candidates,failingTestCases);
}"
61471,"@Override public void showResults(){
  super.showResults();
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsSuccessfulPatches.size() + ""String_Node_Str""+ Stats.sum(currentStat.ingAttemptsSuccessfulPatches)+ ""String_Node_Str""+ this.currentStat.ingAttemptsSuccessfulPatches.stream().map(Pair::getAttempts).collect(Collectors.toList()));
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsFailingPatches.size() + ""String_Node_Str""+ Stats.sum(currentStat.ingAttemptsFailingPatches)+ ""String_Node_Str""+ this.currentStat.ingAttemptsFailingPatches.stream().map(Pair::getAttempts).collect(Collectors.toList()));
    log.info(""String_Node_Str"" + this.currentStat.patch_attempts.size() + ""String_Node_Str""+ this.currentStat.patch_attempts);
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsSuccessfulPatches);
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsFailingPatches);
    log.info(""String_Node_Str"" + this.currentStat.successfulTransformedIngredients);
  }
  if (this.ingredientSearchStrategy.getIngredientSpace() instanceof ExpressionTypeIngredientSpace) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.ingredientSearchStrategy.getIngredientSpace();
    space.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource());
    Stats.currentStat.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource(),Stats.currentStat.ingredientSpaceSize,""String_Node_Str"");
    Stats.currentStat.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource(),Stats.currentStat.combinationByIngredientSize,""String_Node_Str"");
  }
}","@Override public void showResults(){
  super.showResults();
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsSuccessfulPatches.size() + ""String_Node_Str""+ Stats.sum(currentStat.ingAttemptsSuccessfulPatches)+ ""String_Node_Str""+ this.currentStat.ingAttemptsSuccessfulPatches.stream().map(Pair::getAttempts).collect(Collectors.toList()));
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsFailingPatches.size() + ""String_Node_Str""+ Stats.sum(currentStat.ingAttemptsFailingPatches)+ ""String_Node_Str""+ this.currentStat.ingAttemptsFailingPatches.stream().map(Pair::getAttempts).collect(Collectors.toList()));
    log.info(""String_Node_Str"" + this.currentStat.patch_attempts.size() + ""String_Node_Str""+ this.currentStat.patch_attempts);
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsSuccessfulPatches);
    log.info(""String_Node_Str"" + this.currentStat.ingAttemptsFailingPatches);
    log.info(""String_Node_Str"" + this.currentStat.successfulTransformedIngredients);
  }
  if (this.ingredientSearchStrategy != null && this.ingredientSearchStrategy.getIngredientSpace() instanceof ExpressionTypeIngredientSpace) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.ingredientSearchStrategy.getIngredientSpace();
    space.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource());
    Stats.currentStat.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource(),Stats.currentStat.ingredientSpaceSize,""String_Node_Str"");
    Stats.currentStat.toJSON(this.getProjectFacade().getProperties().getWorkingDirForSource(),Stats.currentStat.combinationByIngredientSize,""String_Node_Str"");
  }
}"
61472,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    List<CtCodeElement> elements=space.getIngredients(modificationPoint.getCodeElement());
    List<String> elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    LinkedHashMap<String,Double> probs=mp.getProb();
    Double randomElement=RandomManager.nextDouble();
    for (    String template : probs.keySet()) {
      double probTemplate=probs.get(template);
      if (randomElement <= probTemplate) {
        int index=elements2String.indexOf(template);
        CtCodeElement templateElement=elements.get(index);
        return new Ingredient(templateElement);
      }
    }
  }
 else {
    return super.getFixIngredient(modificationPoint,operationType);
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    List<CtCodeElement> elements=space.getIngredients(modificationPoint.getCodeElement());
    List<String> elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    LinkedHashMap<String,Double> probs=mp.getProb();
    Double randomElement=RandomManager.nextDouble();
    for (    String template : probs.keySet()) {
      double probTemplate=probs.get(template);
      if (randomElement <= probTemplate) {
        int index=elements2String.indexOf(template);
        CtCodeElement templateElement=elements.get(index);
        Ingredient refinedIngredient=getNotUsedTransformedElement(modificationPoint,operationType,new Ingredient(templateElement));
        return refinedIngredient;
      }
    }
  }
 else {
    return super.getFixIngredient(modificationPoint,operationType);
  }
  return null;
}"
61473,"@Override public void defineSpace(ProgramVariant variant){
  List<CtType<?>> affected=obtainClassesFromScope(variant);
  log.debug(""String_Node_Str"");
  for (  CtType<?> classToProcess : affected) {
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    AbstractFixSpaceProcessor.mustClone=true;
    for (    CtCodeElement originalIngredient : ingredients) {
      String keyLocation=mapKey(originalIngredient);
      if (originalIngredient instanceof CtExpression) {
        CtExpression ctExpr=(CtExpression)originalIngredient;
        if (ctExpr.getType() == null) {
          continue;
        }
        List<CtCodeElement> ingredientsKey=getIngrediedientsFromKey(keyLocation,ctExpr);
        if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
          CtCodeElement templateElement=MutationSupporter.clone(ctExpr);
          formatIngredient(templateElement);
          log.debug(""String_Node_Str"" + originalIngredient);
          log.debug(""String_Node_Str"" + templateElement + ""String_Node_Str""+ ingredientsKey.contains(templateElement));
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(templateElement)) {
            ingredientsKey.add(templateElement);
            this.allElementsFromSpace.add(templateElement);
          }
          this.linkTemplateElements.add(templateElement.toString(),originalIngredient);
        }
 else {
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(originalIngredient)) {
            ingredientsKey.add(originalIngredient);
            this.allElementsFromSpace.add(originalIngredient);
          }
        }
      }
    }
  }
  int nrIng=0;
  for (  Object ingList : mkp.values()) {
    nrIng+=((List)ingList).size();
  }
  log.info(String.format(""String_Node_Str"",mkp.keySet().size(),nrIng));
}","@Override public void defineSpace(ProgramVariant variant){
  List<CtType<?>> affected=obtainClassesFromScope(variant);
  log.debug(""String_Node_Str"");
  for (  CtType<?> classToProcess : affected) {
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    AbstractFixSpaceProcessor.mustClone=true;
    for (    CtCodeElement originalIngredient : ingredients) {
      String keyLocation=mapKey(originalIngredient);
      if (originalIngredient instanceof CtExpression) {
        CtExpression ctExpr=(CtExpression)originalIngredient;
        if (ctExpr.getType() == null) {
          continue;
        }
        List<CtCodeElement> ingredientsKey=getIngrediedientsFromKey(keyLocation,ctExpr);
        if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
          CtCodeElement templateElement=MutationSupporter.clone(ctExpr);
          formatIngredient(templateElement);
          log.debug(""String_Node_Str"" + originalIngredient);
          log.debug(""String_Node_Str"" + templateElement + ""String_Node_Str""+ ingredientsKey.contains(templateElement));
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(templateElement)) {
            ingredientsKey.add(templateElement);
            this.allElementsFromSpace.add(templateElement);
          }
          this.linkTemplateElements.add(templateElement.toString(),originalIngredient);
        }
 else {
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(originalIngredient)) {
            ingredientsKey.add(originalIngredient);
            this.allElementsFromSpace.add(originalIngredient);
          }
        }
      }
    }
  }
  int nrIng=0;
  for (  Object ingList : mkp.values()) {
    nrIng+=((List)ingList).size();
  }
  this.linkTemplateElements=this.linkTemplateElements.getSorted();
  log.info(String.format(""String_Node_Str"",mkp.keySet().size(),nrIng));
  this.linkTemplateElements.forEach((e,v) -> log.debug(String.format(""String_Node_Str"",e,v.size())));
}"
61474,"public static List<CtVariableAccess> collectStaticVariableAccess(CtElement rootElement,List<CtVariableAccess> varAccessCollected){
  List<CtVariableAccess> statics=new ArrayList<>();
  for (  CtVariableAccess ctVariableAccess : varAccessCollected) {
    CtVariableReference varref=ctVariableAccess.getVariable();
    if (!(varref instanceof CtFieldReference)) {
      continue;
    }
    CtVariable var=varref.getDeclaration();
    if (var == null || var.getModifiers().contains(ModifierKind.STATIC)) {
      statics.add(ctVariableAccess);
    }
  }
  return statics;
}","public static List<CtVariableAccess> collectStaticVariableAccess(CtElement rootElement,List<CtVariableAccess> varAccessCollected){
  List<CtVariableAccess> statics=new ArrayList<>();
  for (  CtVariableAccess ctVariableAccess : varAccessCollected) {
    CtVariableReference varref=ctVariableAccess.getVariable();
    if (isStatic(varref)) {
      statics.add(ctVariableAccess);
    }
  }
  return statics;
}"
61475,"private static void addVarMappingAsResult(Map<VarAccessWrapper,List<CtVariable>> varMaps,VarAccessWrapper varOutWrapper,CtVariable varInContext){
  List<CtVariable> vars=varMaps.get(varOutWrapper);
  if (vars == null) {
    vars=new ArrayList<>();
    varMaps.put(varOutWrapper,vars);
  }
  vars.add(varInContext);
}","private static void addVarMappingAsResult(Map<VarAccessWrapper,List<CtVariable>> varMaps,VarAccessWrapper varOutWrapper,CtVariable varInContext){
  List<CtVariable> vars=varMaps.get(varOutWrapper);
  if (vars == null) {
    vars=new ArrayList<>();
    varMaps.put(varOutWrapper,vars);
  }
  if (!vars.stream().filter(e -> e.getSimpleName().equals(varInContext.getSimpleName())).findAny().isPresent())   vars.add(varInContext);
}"
61476,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int numberTotalComb=1;
  int max=-1;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    logger.debug(String.format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  logger.debug(""String_Node_Str"" + numberTotalComb);
  double maxPerVar=Math.pow(numberTotalComb,1.0 / varsNamesToCombine.size());
  double maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / varsNamesToCombine.size());
  logger.debug(String.format(""String_Node_Str"",maxPerVar,maxPerVarLimit));
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)maxPerVarLimit)) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,boolean random){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  long numberTotalComb=1;
  int max=-1;
  Set<String> vars=new HashSet<>();
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (vars.contains(currentVar.getVar().getVariable().getSimpleName())) {
      continue;
    }
    vars.add(currentVar.getVar().getVariable().getSimpleName());
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    logger.debug(String.format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  logger.debug(""String_Node_Str"" + numberTotalComb);
  double maxPerVar=Math.pow(numberTotalComb,1.0 / varsNamesToCombine.size());
  double maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / varsNamesToCombine.size());
  if (numberTotalComb < maxNumberCombinations) {
    maxPerVarLimit=max;
  }
  logger.debug(String.format(""String_Node_Str"",maxPerVar,maxPerVarLimit));
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    if (allCombinations.size() > 0 && allCombinations.get(0).containsKey(currentVar.getVar().getVariable().getSimpleName())) {
      logger.debug(""String_Node_Str"" + currentVar.getVar().getVariable().getSimpleName());
      continue;
    }
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> sortedVariables=new ArrayList<>(mapped);
    if (random) {
      Collections.shuffle(sortedVariables,RandomManager.getRandom());
    }
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : sortedVariables) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed >= ((int)maxPerVarLimit)) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}"
61477,"public void setupLogging(){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    Logger.getRootLogger().getLoggerRepository().resetConfiguration();
    ConsoleAppender console=new ConsoleAppender();
    String PATTERN=""String_Node_Str"";
    console.setLayout(new PatternLayout(PATTERN));
    console.activateOptions();
    Logger.getRootLogger().addAppender(console);
    String loglevelSelected=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
    LogManager.getRootLogger().setLevel(Level.toLevel(loglevelSelected));
  }
}","public void setupLogging(){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    Logger.getRootLogger().getLoggerRepository().resetConfiguration();
    ConsoleAppender console=new ConsoleAppender();
    String PATTERN=""String_Node_Str"";
    console.setLayout(new PatternLayout(PATTERN));
    console.activateOptions();
    Logger.getRootLogger().addAppender(console);
    String loglevelSelected=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
    if (loglevelSelected != null)     LogManager.getRootLogger().setLevel(Level.toLevel(loglevelSelected));
  }
}"
61478,"public String toString(){
  return ""String_Node_Str"" + this.getOperationApplied() + ""String_Node_Str""+ this.original.getClass().getCanonicalName()+ ""String_Node_Str""+ StringUtil.trunc(this.original)+ ""String_Node_Str""+ StringUtil.trunc(modified)+ ""String_Node_Str""+ ((this.modified != null) ? this.modified.getClass().getCanonicalName() : ""String_Node_Str"")+ ""String_Node_Str""+ this.original.getPosition().getLine()+ ""String_Node_Str""+ this.original.getPosition().getFile().getAbsolutePath();
}","public String toString(){
  String repst=""String_Node_Str"";
  repst+=this.getOperationApplied() + ""String_Node_Str"" + this.original.getClass().getCanonicalName()+ ""String_Node_Str""+ StringUtil.trunc(this.original)+ ""String_Node_Str""+ StringUtil.trunc(modified);
  repst+=""String_Node_Str"" + ((this.modified != null) ? this.modified.getClass().getCanonicalName() : ""String_Node_Str"") + ""String_Node_Str"";
  if (this.original.getPosition() != null && this.original.getPosition().getFile() != null) {
    repst+=""String_Node_Str"" + this.original.getPosition().getLine() + ""String_Node_Str""+ this.original.getPosition().getFile().getAbsolutePath();
  }
  return repst;
}"
61479,"/** 
 * It receives a suspicious code (a line) and it create a list of Gens from than suspicious line when it's possible.
 * @param suspiciousCode
 * @param progInstance
 * @return
 */
private List<SuspiciousModificationPoint> createModificationPoints(SuspiciousCode suspiciousCode,ProgramVariant progInstance){
  List<SuspiciousModificationPoint> suspGen=new ArrayList<SuspiciousModificationPoint>();
  CtClass ctclasspointed=resolveCtClass(suspiciousCode.getClassName(),progInstance);
  if (ctclasspointed == null) {
    log.info(""String_Node_Str"" + suspiciousCode);
    return null;
  }
  List<CtElement> ctSuspects=null;
  try {
    ctSuspects=retrieveCtElementForSuspectCode(suspiciousCode,ctclasspointed);
    Collections.reverse(ctSuspects);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (ctSuspects.isEmpty()) {
    return null;
  }
  List<CtVariable> contextOfPoint=null;
  contextOfPoint=VariableResolver.searchVariablesInScope(ctSuspects.get(0));
  List<CtElement> filterByType=extractChildElements(ctSuspects,processors);
  List<CtElement> filteredTypeByLine=intersection(filterByType,ctSuspects);
  int id=0;
  for (  CtElement ctElement : filteredTypeByLine) {
    SuspiciousModificationPoint modifPoint=new SuspiciousModificationPoint();
    modifPoint.setSuspicious(suspiciousCode);
    modifPoint.setClonedClass(ctclasspointed);
    modifPoint.setCodeElement(ctElement);
    modifPoint.setContextOfModificationPoint(contextOfPoint);
    suspGen.add(modifPoint);
    log.debug(""String_Node_Str"" + ctElement.getClass().getSimpleName() + ""String_Node_Str""+ suspiciousCode.getSuspiciousValue()+ ""String_Node_Str""+ ctElement.getPosition().getLine()+ ""String_Node_Str""+ ctElement.getPosition().getFile().getName());
  }
  return suspGen;
}","/** 
 * It receives a suspicious code (a line) and it create a list of Gens from than suspicious line when it's possible.
 * @param suspiciousCode
 * @param progInstance
 * @return
 */
private List<SuspiciousModificationPoint> createModificationPoints(SuspiciousCode suspiciousCode,ProgramVariant progInstance){
  List<SuspiciousModificationPoint> suspGen=new ArrayList<SuspiciousModificationPoint>();
  CtClass ctclasspointed=resolveCtClass(suspiciousCode.getClassName(),progInstance);
  if (ctclasspointed == null) {
    log.info(""String_Node_Str"" + suspiciousCode);
    return null;
  }
  List<CtElement> ctSuspects=null;
  try {
    ctSuspects=retrieveCtElementForSuspectCode(suspiciousCode,ctclasspointed);
    Collections.reverse(ctSuspects);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (ctSuspects.isEmpty()) {
    return null;
  }
  List<CtVariable> contextOfPoint=null;
  contextOfPoint=VariableResolver.searchVariablesInScope(ctSuspects.get(0));
  List<CtElement> filterByType=extractChildElements(ctSuspects,processors);
  List<CtElement> filteredTypeByLine=intersection(filterByType,ctSuspects);
  int id=0;
  for (  CtElement ctElement : filteredTypeByLine) {
    SuspiciousModificationPoint modifPoint=new SuspiciousModificationPoint();
    modifPoint.setSuspicious(suspiciousCode);
    modifPoint.setClonedClass(ctclasspointed);
    modifPoint.setCodeElement(ctElement);
    modifPoint.setContextOfModificationPoint(contextOfPoint);
    suspGen.add(modifPoint);
    log.debug(""String_Node_Str"" + ctElement.getClass().getSimpleName() + ""String_Node_Str""+ suspiciousCode.getSuspiciousValue()+ ""String_Node_Str""+ ctElement.getPosition().getLine()+ ""String_Node_Str""+ ((ctElement.getPosition().getFile() == null) ? ""String_Node_Str"" : ctElement.getPosition().getFile().getName()));
  }
  return suspGen;
}"
61480,"/** 
 * Returns randomly an ingredient
 * @param modificationPoint
 * @param operator
 * @param baseIngredient
 * @return
 */
public Ingredient getNotUsedTransformedElement(ModificationPoint modificationPoint,AstorOperator operator,Ingredient baseIngredient){
  log.debug(""String_Node_Str"" + baseIngredient + ""String_Node_Str""+ ((CtType)baseIngredient.getCode().getParent(CtType.class)).getQualifiedName());
  List<Ingredient> ingredientsAfterTransformation=null;
  if (ingredientTransformationStrategy != null) {
    String key=getKey(modificationPoint,operator) + baseIngredient.toString();
    if (appliedIngredientsCache.containsKey(key)) {
      log.debug(""String_Node_Str"");
      ingredientsAfterTransformation=appliedIngredientsCache.get(key);
    }
 else {
      log.debug(""String_Node_Str"");
      ingredientsAfterTransformation=ingredientTransformationStrategy.transform(modificationPoint,baseIngredient);
      appliedIngredientsCache.put(key,ingredientsAfterTransformation);
    }
    if (ingredientsAfterTransformation == null || ingredientsAfterTransformation.isEmpty()) {
      log.debug(""String_Node_Str"" + baseIngredient);
      Stats.currentStat.addSize(Stats.currentStat.combinationByIngredientSize,0);
      return null;
    }
    log.debug(String.format(""String_Node_Str"",ingredientsAfterTransformation.size()));
    Stats.currentStat.addSize(Stats.currentStat.combinationByIngredientSize,ingredientsAfterTransformation.size());
    Ingredient transformedIngredient=null;
    int attempts=0;
    while (attempts <= ingredientsAfterTransformation.size()) {
      transformedIngredient=getOneIngredientFromList(ingredientsAfterTransformation);
      if (transformedIngredient == null) {
        log.debug(""String_Node_Str"");
        continue;
      }
      boolean removed=ingredientsAfterTransformation.remove(transformedIngredient);
      if (!removed) {
        log.debug(""String_Node_Str"");
      }
      attempts++;
      log.debug(String.format(""String_Node_Str"",attempts,ingredientsAfterTransformation.size()));
      if (transformedIngredient.getCode().toString().equals(modificationPoint.getCodeElement().toString())) {
        log.debug(""String_Node_Str"");
        continue;
      }
      boolean alreadyApplied=alreadySelected(modificationPoint,transformedIngredient.getCode(),operator);
      if (!alreadyApplied) {
        return transformedIngredient;
      }
    }
    log.debug(String.format(""String_Node_Str"",attempts,ingredientsAfterTransformation.size()));
  }
  return null;
}","/** 
 * Returns randomly an ingredient
 * @param modificationPoint
 * @param operator
 * @param baseIngredient
 * @return
 */
public Ingredient getNotUsedTransformedElement(ModificationPoint modificationPoint,AstorOperator operator,Ingredient baseIngredient){
  log.debug(""String_Node_Str"" + baseIngredient + ""String_Node_Str""+ ((CtType)baseIngredient.getCode().getParent(CtType.class)).getQualifiedName());
  List<Ingredient> ingredientsAfterTransformation=null;
  if (ingredientTransformationStrategy != null) {
    String key=getKey(modificationPoint,operator) + baseIngredient.toString();
    if (appliedIngredientsCache.containsKey(key)) {
      log.debug(""String_Node_Str"");
      ingredientsAfterTransformation=appliedIngredientsCache.get(key);
    }
 else {
      log.debug(""String_Node_Str"");
      ingredientsAfterTransformation=ingredientTransformationStrategy.transform(modificationPoint,baseIngredient);
      appliedIngredientsCache.put(key,ingredientsAfterTransformation);
    }
    if (ingredientsAfterTransformation == null || ingredientsAfterTransformation.isEmpty()) {
      log.debug(""String_Node_Str"" + baseIngredient);
      Stats.currentStat.addSize(Stats.currentStat.combinationByIngredientSize,0);
      return null;
    }
    log.debug(String.format(""String_Node_Str"",modificationPoint.getCodeElement(),baseIngredient,ingredientsAfterTransformation.size()));
    Stats.currentStat.addSize(Stats.currentStat.combinationByIngredientSize,ingredientsAfterTransformation.size());
    Ingredient transformedIngredient=null;
    int attempts=0;
    while (attempts <= ingredientsAfterTransformation.size()) {
      transformedIngredient=getOneIngredientFromList(ingredientsAfterTransformation);
      if (transformedIngredient == null) {
        log.debug(""String_Node_Str"");
        continue;
      }
      boolean removed=ingredientsAfterTransformation.remove(transformedIngredient);
      if (!removed) {
        log.debug(""String_Node_Str"");
      }
      attempts++;
      log.debug(String.format(""String_Node_Str"",attempts,ingredientsAfterTransformation.size()));
      if (transformedIngredient.getCode().toString().equals(modificationPoint.getCodeElement().toString())) {
        log.debug(""String_Node_Str"");
        continue;
      }
      boolean alreadyApplied=alreadySelected(modificationPoint,transformedIngredient.getCode(),operator);
      if (!alreadyApplied) {
        return transformedIngredient;
      }
    }
    log.debug(String.format(""String_Node_Str"",attempts,ingredientsAfterTransformation.size()));
  }
  return null;
}"
61481,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    List<CtCodeElement> elements=space.getIngredients(modificationPoint.getCodeElement());
    List<String> elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    LinkedHashMap<String,Double> probs=mp.getProb();
    Double randomElement=RandomManager.nextDouble();
    for (    String template : probs.keySet()) {
      double probTemplate=probs.get(template);
      if (randomElement <= probTemplate) {
        int index=elements2String.indexOf(template);
        CtCodeElement templateElement=elements.get(index);
        Ingredient refinedIngredient=getNotUsedTransformedElement(modificationPoint,operationType,new Ingredient(templateElement));
        return refinedIngredient;
      }
    }
  }
 else {
    return super.getFixIngredient(modificationPoint,operationType);
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ExpressionTypeIngredientSpace space=(ExpressionTypeIngredientSpace)this.getIngredientSpace();
    List<CtCodeElement> elements=space.getIngredients(modificationPoint.getCodeElement());
    log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ elements.size()+ ""String_Node_Str""+ elements);
    Stats.currentStat.addSize(Stats.currentStat.ingredientSpaceSize,elements.size());
    List<String> elements2String=new ArrayList<>();
    for (    CtCodeElement cm : elements) {
      elements2String.add(cm.toString());
    }
    MapList mp=new MapList<>();
    mp.putAll(space.linkTemplateElements);
    mp.keySet().removeIf(e -> !elements2String.contains(e));
    LinkedHashMap<String,Double> probs=mp.getProb();
    Double randomElement=RandomManager.nextDouble();
    for (    String template : probs.keySet()) {
      double probTemplate=probs.get(template);
      if (randomElement <= probTemplate) {
        int index=elements2String.indexOf(template);
        CtCodeElement templateElement=elements.get(index);
        Ingredient refinedIngredient=getNotUsedTransformedElement(modificationPoint,operationType,new Ingredient(templateElement));
        return refinedIngredient;
      }
    }
  }
 else {
    return super.getFixIngredient(modificationPoint,operationType);
  }
  return null;
}"
61482,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int numberTotalComb=1;
  int max=-1;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    logger.debug(""String_Node_Str"".format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  double maxPerVar=Math.pow(numberTotalComb,1.0 / varsNamesToCombine.size());
  double maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / varsNamesToCombine.size());
  logger.debug(""String_Node_Str"".format(""String_Node_Str"",maxPerVar,maxPerVarLimit));
  int partialAnalyzed=0;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    for (    CtVariable varFromMap : mapped) {
      int varsAnalyzed=0;
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
        varsAnalyzed++;
        if (varsAnalyzed > maxPerVarLimit) {
          break;
        }
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int numberTotalComb=1;
  int max=-1;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    logger.debug(String.format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  logger.debug(""String_Node_Str"" + numberTotalComb);
  double maxPerVar=Math.pow(numberTotalComb,1.0 / varsNamesToCombine.size());
  double maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / varsNamesToCombine.size());
  logger.debug(String.format(""String_Node_Str"",maxPerVar,maxPerVarLimit));
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    List<CtVariable> randomlySortedVariables=new ArrayList<>(mapped);
    Collections.shuffle(randomlySortedVariables,RandomManager.getRandom());
    int varsAnalyzed=0;
    for (    CtVariable varFromMap : mapped) {
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
      }
      varsAnalyzed++;
      if (varsAnalyzed > maxPerVarLimit) {
        break;
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}"
61483,"/** 
 * Return the number of ingredients according to: the location and the operator to apply.
 * @param modificationPoint
 * @param operationType
 * @return
 */
protected int getSpaceSize(ModificationPoint modificationPoint,AstorOperator operationType){
  String type=null;
  if (operationType instanceof ReplaceOp) {
    type=modificationPoint.getCodeElement().getClass().getSimpleName();
  }
  List<?> allIng=null;
  if (type == null) {
    allIng=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement());
  }
 else {
    allIng=this.ingredientSpace.getIngredients(modificationPoint.getCodeElement(),type);
  }
  if (allIng == null || allIng.isEmpty()) {
    return 0;
  }
  return allIng.size();
}","/** 
 * Return the number of ingredients according to: the location and the operator to apply.
 * @param modificationPoint
 * @param operationType
 * @return
 */
protected int getSpaceSize(ModificationPoint modificationPoint,AstorOperator operationType){
  String type=null;
  List<?> allIng=getSpace(modificationPoint,operationType);
  if (allIng == null || allIng.isEmpty()) {
    return 0;
  }
  return allIng.size();
}"
61484,"/** 
 * Check if the ingredient was already used
 * @param id program instance id.
 * @param fix
 * @param location
 * @return
 */
protected boolean alreadySelected(ModificationPoint gen,CtElement fixElement,AstorOperator operator){
  String lockey=getKey(gen,operator);
  String fix=""String_Node_Str"";
  try {
    fix=fixElement.toString();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
  List<String> prev=appliedCache.get(lockey);
  if (prev == null) {
    prev=new ArrayList<String>();
    prev.add(fix);
    appliedCache.put(lockey,prev);
    log.debug(""String_Node_Str"" + StringUtil.trunc(fix) + ""String_Node_Str""+ StringUtil.trunc(lockey));
    return false;
  }
 else {
    if (prev.contains(fix)) {
      return true;
    }
 else {
      prev.add(fix);
      log.debug(""String_Node_Str"" + StringUtil.trunc(fix) + ""String_Node_Str""+ StringUtil.trunc(lockey));
      return false;
    }
  }
}","/** 
 * Check if the ingredient was already used
 * @param id program instance id.
 * @param fix
 * @param location
 * @return
 */
protected boolean alreadySelected(ModificationPoint gen,CtElement fixElement,AstorOperator operator){
  String lockey=getKey(gen,operator);
  String fix=""String_Node_Str"";
  try {
    fix=fixElement.toString();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
  }
  List<String> prev=appliedCache.get(lockey);
  if (prev == null) {
    prev=new ArrayList<String>();
    prev.add(fix);
    appliedCache.put(lockey,prev);
    log.debug(""String_Node_Str"" + StringUtil.trunc(fix) + ""String_Node_Str""+ StringUtil.trunc(lockey));
    return false;
  }
 else {
    if (prev.contains(fix)) {
      log.debug(""String_Node_Str"" + StringUtil.trunc(fix) + ""String_Node_Str""+ (lockey));
      return true;
    }
 else {
      prev.add(fix);
      log.debug(""String_Node_Str"" + StringUtil.trunc(fix) + ""String_Node_Str""+ StringUtil.trunc(lockey));
      return false;
    }
  }
}"
61485,"/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  while (attempts < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    attempts=appliedCache.get(getKey(modificationPoint,operationType)).size();
    log.debug(String.format(""String_Node_Str"",attempts,elementsFromFixSpace));
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    IngredientSpaceScope scope=VariableResolver.determineIngredientScope(modificationPoint.getCodeElement(),elementFromIngredient);
    randomIngredient.setScope(scope);
    return randomIngredient;
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}","/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  int alreadyAnalyzed=0;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  while (alreadyAnalyzed < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    alreadyAnalyzed=appliedCache.get(getKey(modificationPoint,operationType)).size();
    log.debug(String.format(""String_Node_Str"",alreadyAnalyzed,elementsFromFixSpace));
    attempts++;
    if (attempts > (elementsFromFixSpace * 3)) {
      log.error(""String_Node_Str"" + attempts);
      return null;
    }
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    return randomIngredient;
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}"
61486,"@Override public void defineSpace(ProgramVariant variant){
  List<CtType<?>> affected=variant.getAffectedClasses();
  for (  CtType<?> classToProcess : affected) {
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    AbstractFixSpaceProcessor.mustClone=true;
    for (    CtCodeElement ctIngredient : ingredients) {
      String keyLocation=mapKey(ctIngredient);
      if (ctIngredient instanceof CtExpression) {
        CtExpression ctExpr=(CtExpression)ctIngredient;
        String typeExpression=ctExpr.getClass().getSimpleName();
        String returnTypeExpression=(ctExpr.getType() != null) ? ctExpr.getType().getSimpleName() : ""String_Node_Str"";
        List<CtCodeElement> ingredientsKey=(List<CtCodeElement>)mkp.get(keyLocation,typeExpression,returnTypeExpression);
        if (!mkp.containsKey(keyLocation,typeExpression,returnTypeExpression)) {
          ingredientsKey=new CacheList<CtCodeElement>();
          mkp.put(keyLocation,typeExpression,returnTypeExpression,ingredientsKey);
          log.debug(""String_Node_Str"" + keyLocation + ""String_Node_Str""+ typeExpression+ ""String_Node_Str""+ returnTypeExpression);
        }
        if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(ctIngredient)) {
          ingredientsKey.add(ctIngredient);
        }
      }
    }
  }
}","@Override public void defineSpace(ProgramVariant variant){
  List<CtType<?>> affected=variant.getAffectedClasses();
  log.debug(""String_Node_Str"");
  for (  CtType<?> classToProcess : affected) {
    List<CtCodeElement> ingredients=this.ingredientProcessor.createFixSpace(classToProcess);
    AbstractFixSpaceProcessor.mustClone=true;
    for (    CtCodeElement ctIngredient : ingredients) {
      String keyLocation=mapKey(ctIngredient);
      if (ctIngredient instanceof CtExpression) {
        CtExpression ctExpr=(CtExpression)ctIngredient;
        String typeExpression=ctExpr.getClass().getSimpleName();
        if (ctExpr.getType() == null) {
          continue;
        }
        String returnTypeExpression=(ctExpr.getType() != null) ? ctExpr.getType().getSimpleName() : ""String_Node_Str"";
        List<CtCodeElement> ingredientsKey=(List<CtCodeElement>)mkp.get(keyLocation,typeExpression,returnTypeExpression);
        if (!mkp.containsKey(keyLocation,typeExpression,returnTypeExpression)) {
          ingredientsKey=new CacheList<CtCodeElement>();
          mkp.put(keyLocation,typeExpression,returnTypeExpression,ingredientsKey);
          log.debug(""String_Node_Str"" + keyLocation + ""String_Node_Str""+ typeExpression+ ""String_Node_Str""+ returnTypeExpression);
        }
        if (ConfigurationProperties.getPropertyBool(""String_Node_Str"") || !ingredientsKey.contains(ctIngredient)) {
          ingredientsKey.add(ctIngredient);
          log.debug(""String_Node_Str"" + ctIngredient);
        }
      }
    }
  }
  int nrIng=0;
  for (  Object ingList : mkp.values()) {
    nrIng+=((List)ingList).size();
  }
  log.info(""String_Node_Str"".format(""String_Node_Str"",mkp.keySet().size(),nrIng));
}"
61487,"@Override public List<CtCodeElement> getIngredients(CtElement element,String type){
  log.debug(""String_Node_Str"" + element.getClass().getCanonicalName());
  if (element instanceof CtExpression) {
    String keyLocation=mapKey(element);
    CtExpression ctExpr=(CtExpression)element;
    String typeExpression=ctExpr.getClass().getSimpleName();
    String returnTypeExpression=ctExpr.getType().getSimpleName();
    List ingredients=(List<CtCodeElement>)mkp.get(keyLocation,typeExpression,returnTypeExpression);
    return ingredients;
  }
  log.error(""String_Node_Str"" + element.getClass().getCanonicalName());
  return null;
}","@Override public List<CtCodeElement> getIngredients(CtElement element,String type){
  if (element instanceof CtExpression) {
    String keyLocation=mapKey(element);
    CtExpression ctExpr=(CtExpression)element;
    String typeExpression=ctExpr.getClass().getSimpleName();
    String returnTypeExpression=(ctExpr.getType() == null) ? ""String_Node_Str"" : ctExpr.getType().getSimpleName();
    List ingredients=(List<CtCodeElement>)mkp.get(keyLocation,typeExpression,returnTypeExpression);
    return ingredients;
  }
  log.error(""String_Node_Str"" + element.getClass().getCanonicalName());
  return null;
}"
61488,"@Override public void loadExtensionPoints() throws Exception {
  super.loadExtensionPoints();
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  ExtensionPoints epoint=ExtensionPoints.INGREDIENT_PROCESSOR;
  if (!ConfigurationProperties.hasProperty(epoint.identifier)) {
    ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  }
 else {
    String ingrProcessors=ConfigurationProperties.getProperty(epoint.identifier);
    String[] in=ingrProcessors.split(File.pathSeparator);
    for (    String processor : in) {
      AbstractFixSpaceProcessor proc_i=(AbstractFixSpaceProcessor)PlugInLoader.loadPlugin(processor,epoint._class);
      ingredientProcessors.add(proc_i);
    }
  }
  OperatorSpace jpgoperatorSpace=PlugInLoader.loadOperatorSpace();
  if (jpgoperatorSpace == null)   jpgoperatorSpace=new jGenProgSpace();
  this.setOperatorSpace(jpgoperatorSpace);
  String opStrategyClassName=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (opStrategyClassName != null) {
    OperatorSelectionStrategy strategy=createOperationSelectionStrategy(opStrategyClassName,jpgoperatorSpace);
    this.setOperatorSelectionStrategy(strategy);
  }
 else {
    this.setOperatorSelectionStrategy(new UniformRandomRepairOperatorSpace(jpgoperatorSpace));
  }
  IngredientSpace ingredientspace=PlugInLoader.loadIngredientSpace(ingredientProcessors);
  IngredientSearchStrategy ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{ingredientspace});
  if (ingStrategy == null) {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  this.setIngredientStrategy(ingStrategy);
  this.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
  ExtensionPoints ep=ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY;
  String ingredientTransformationStrategyClassName=ConfigurationProperties.properties.getProperty(ep.identifier);
  if (ingredientTransformationStrategyClassName == null) {
    this.ingredientTransformationStrategy=new DefaultIngredientTransformation();
  }
 else {
    PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY);
  }
}","@Override public void loadExtensionPoints() throws Exception {
  super.loadExtensionPoints();
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  ExtensionPoints epoint=ExtensionPoints.INGREDIENT_PROCESSOR;
  if (!ConfigurationProperties.hasProperty(epoint.identifier)) {
    ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  }
 else {
    String ingrProcessors=ConfigurationProperties.getProperty(epoint.identifier);
    String[] in=ingrProcessors.split(File.pathSeparator);
    for (    String processor : in) {
      AbstractFixSpaceProcessor proc_i=(AbstractFixSpaceProcessor)PlugInLoader.loadPlugin(processor,epoint._class);
      ingredientProcessors.add(proc_i);
    }
  }
  OperatorSpace jpgoperatorSpace=PlugInLoader.loadOperatorSpace();
  if (jpgoperatorSpace == null)   jpgoperatorSpace=new jGenProgSpace();
  this.setOperatorSpace(jpgoperatorSpace);
  String opStrategyClassName=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (opStrategyClassName != null) {
    OperatorSelectionStrategy strategy=createOperationSelectionStrategy(opStrategyClassName,jpgoperatorSpace);
    this.setOperatorSelectionStrategy(strategy);
  }
 else {
    this.setOperatorSelectionStrategy(new UniformRandomRepairOperatorSpace(jpgoperatorSpace));
  }
  IngredientSpace ingredientspace=PlugInLoader.loadIngredientSpace(ingredientProcessors);
  IngredientSearchStrategy ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{ingredientspace});
  if (ingStrategy == null) {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  this.setIngredientStrategy(ingStrategy);
  this.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
  ExtensionPoints ep=ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY;
  String ingredientTransformationStrategyClassName=ConfigurationProperties.properties.getProperty(ep.identifier);
  if (ingredientTransformationStrategyClassName == null) {
    this.ingredientTransformationStrategy=new DefaultIngredientTransformation();
  }
 else {
    this.ingredientTransformationStrategy=(IngredientTransformationStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY);
  }
}"
61489,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2) It calculates at most 'maxVarCombination', where
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @param varsNamesToCombine names of all variables (out of scope)
 * @param indexVar current variable under analysis
 * @param currentCombination current combination of variables
 * @param allCombinations list that store all variable combinations
 */
public static void findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsNamesToCombine,int indexVar,Map<String,CtVariable> currentCombination,List<Map<String,CtVariable>> allCombinations){
  if (varsNamesToCombine.size() == indexVar) {
    allCombinations.add(currentCombination);
    return;
  }
  VarAccessWrapper currentVar=varsNamesToCombine.get(indexVar);
  List<CtVariable> mapped=mappedVars.get(currentVar);
  if (currentCombination.containsKey(currentVar.getVar().getVariable().getSimpleName())) {
    findAllVarMappingCombination(mappedVars,varsNamesToCombine,indexVar + 1,currentCombination,allCombinations);
  }
 else {
    int numberCombination=0;
    for (    CtVariable varFromMap : mapped) {
      Map<String,CtVariable> newCombination=new TreeMap<>(currentCombination);
      newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
      findAllVarMappingCombination(mappedVars,varsNamesToCombine,indexVar + 1,newCombination,allCombinations);
      numberCombination++;
      if (numberCombination == ConfigurationProperties.getPropertyInt(""String_Node_Str"")) {
        break;
      }
    }
  }
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @return
 */
public static List<Map<String,CtVariable>> findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars){
  if (mappedVars.isEmpty()) {
    return new ArrayList<Map<String,CtVariable>>();
  }
  List<VarAccessWrapper> varsNamesToCombine=new ArrayList<>(mappedVars.keySet());
  List<Map<String,CtVariable>> allCombinations=new ArrayList<>();
  allCombinations.add(new TreeMap<>());
  int maxNumberCombinations=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  int numberTotalComb=1;
  int max=-1;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<CtVariable> mapped=mappedVars.get(currentVar);
    int numberCompVar=mapped.size();
    if (numberCompVar > max)     max=numberCompVar;
    logger.debug(""String_Node_Str"".format(""String_Node_Str"",currentVar.getVar().getVariable().getSimpleName(),numberCompVar));
    numberTotalComb*=numberCompVar;
  }
  double maxPerVar=Math.pow(numberTotalComb,1.0 / varsNamesToCombine.size());
  double maxPerVarLimit=Math.pow(maxNumberCombinations,1.0 / varsNamesToCombine.size());
  logger.debug(""String_Node_Str"".format(""String_Node_Str"",maxPerVar,maxPerVarLimit));
  int partialAnalyzed=0;
  for (  VarAccessWrapper currentVar : varsNamesToCombine) {
    List<Map<String,CtVariable>> generationCombinations=new ArrayList<>();
    List<CtVariable> mapped=mappedVars.get(currentVar);
    for (    CtVariable varFromMap : mapped) {
      int varsAnalyzed=0;
      for (      Map<String,CtVariable> previousCombination : allCombinations) {
        Map<String,CtVariable> newCombination=new TreeMap<>(previousCombination);
        newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
        generationCombinations.add(newCombination);
        varsAnalyzed++;
        if (varsAnalyzed > maxPerVarLimit) {
          break;
        }
      }
    }
    allCombinations=generationCombinations;
  }
  allCombinations=allCombinations.stream().filter(e -> !e.isEmpty()).collect(Collectors.toList());
  logger.debug(""String_Node_Str"" + allCombinations.size());
  return allCombinations;
}"
61490,"/** 
 * This test uses a new ingredient space specially created to manage expressions.
 * @throws Exception
 */
@Test public void testM70ExpressionAdaptation() throws Exception {
  CommandSummary command=MathTests.getMath70Command();
  command.command.put(""String_Node_Str"",ExtensionPoints.INGREDIENT_PROCESSOR.identifier + File.pathSeparator + ExpressionIngredientSpaceProcessor.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier+ File.pathSeparator+ InScopeVarsTransformation.class.getCanonicalName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",ExpressionReplaceOperator.class.getName());
  command.command.put(""String_Node_Str"",ExpressionIngredientSpace.class.getName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  AstorMain main1=new AstorMain();
  main1.execute(command.flat());
  List<ProgramVariant> variantss=main1.getEngine().getVariants();
  assertTrue(variantss.size() > 0);
  JGenProg engine=(JGenProg)main1.getEngine();
  ModificationPoint modificationPoint=variantss.get(0).getModificationPoints().get(14);
  assertEquals(""String_Node_Str"",modificationPoint.getCodeElement().toString());
  ExpressionIngredientSpace ingredientSpace=(ExpressionIngredientSpace)engine.getIngredientStrategy().getIngredientSpace();
  assertNotNull(ingredientSpace);
  assertTrue(ExpressionIngredientSpace.class.isInstance(ingredientSpace));
  log.debug(""String_Node_Str"" + ingredientSpace.getAllIngredients());
  OperatorInstance opInstance=engine.createOperatorInstanceForPoint(modificationPoint);
  List<CtCodeElement> ingredients=ingredientSpace.getIngredients(opInstance.getOriginal(),ExpressionReplaceOperator.class.getName());
  log.debug(""String_Node_Str"" + ingredients);
  CtCodeElement ingredientTargeted=ingredients.get(4);
  assertEquals(""String_Node_Str"",ingredientTargeted.toString());
  IngredientTransformationStrategy transfStrategy=engine.getIngredientTransformationStrategy();
  assertNotNull(transfStrategy);
  assertTrue(InScopeVarsTransformation.class.isInstance(transfStrategy));
  InScopeVarsTransformation inScopeStrategy=(InScopeVarsTransformation)transfStrategy;
  VarMapping mapping=VariableResolver.mapVariablesFromContext(modificationPoint.getContextOfModificationPoint(),ingredientTargeted);
  List<CtVariable> variablesMapped=mapping.getMappedVariables().values().iterator().next();
  assertNotNull(variablesMapped);
  assertEquals(4,variablesMapped.size());
  List<Ingredient> transformedIngredients=inScopeStrategy.transform(modificationPoint,new Ingredient(ingredientTargeted));
  log.debug(""String_Node_Str"" + transformedIngredients);
  assertEquals(4,transformedIngredients.size());
  for (  CtVariable ctVariableInScope : variablesMapped) {
    boolean ingredientTransformedHasVarInScope=false;
    for (    Ingredient ingredient : transformedIngredients) {
      System.out.println(String.format(""String_Node_Str"",ingredient.getCode().toString(),(ctVariableInScope.getSimpleName())));
      if (ingredient.getCode().toString().contains(ctVariableInScope.getSimpleName())) {
        ingredientTransformedHasVarInScope=true;
        break;
      }
    }
    assertTrue(ingredientTransformedHasVarInScope);
  }
}","/** 
 * This test uses a new ingredient space specially created to manage expressions.
 * @throws Exception
 */
@Test public void testM70ExpressionAdaptation() throws Exception {
  CommandSummary command=MathTests.getMath70Command();
  command.command.put(""String_Node_Str"",ExtensionPoints.INGREDIENT_PROCESSOR.identifier + File.pathSeparator + ExpressionIngredientSpaceProcessor.class.getCanonicalName()+ File.pathSeparator+ ExtensionPoints.INGREDIENT_TRANSFORM_STRATEGY.identifier+ File.pathSeparator+ InScopeVarsTransformation.class.getCanonicalName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  command.command.put(""String_Node_Str"",ExpressionReplaceOperator.class.getName());
  command.command.put(""String_Node_Str"",ExpressionIngredientSpace.class.getName());
  command.command.put(""String_Node_Str"",""String_Node_Str"");
  AstorMain main1=new AstorMain();
  main1.execute(command.flat());
  List<ProgramVariant> variantss=main1.getEngine().getVariants();
  assertTrue(variantss.size() > 0);
  JGenProg engine=(JGenProg)main1.getEngine();
  ModificationPoint modificationPoint=variantss.get(0).getModificationPoints().get(14);
  assertEquals(""String_Node_Str"",modificationPoint.getCodeElement().toString());
  ExpressionIngredientSpace ingredientSpace=(ExpressionIngredientSpace)engine.getIngredientStrategy().getIngredientSpace();
  assertNotNull(ingredientSpace);
  assertTrue(ExpressionIngredientSpace.class.isInstance(ingredientSpace));
  log.debug(""String_Node_Str"" + ingredientSpace.getAllIngredients());
  OperatorInstance opInstance=engine.createOperatorInstanceForPoint(modificationPoint);
  List<CtCodeElement> ingredients=ingredientSpace.getIngredients(opInstance.getOriginal(),ExpressionReplaceOperator.class.getName());
  log.debug(""String_Node_Str"" + ingredients);
  CtCodeElement ingredientTargeted=ingredients.get(4);
  assertEquals(""String_Node_Str"",ingredientTargeted.toString());
  IngredientTransformationStrategy transfStrategy=engine.getIngredientTransformationStrategy();
  assertNotNull(transfStrategy);
  assertTrue(InScopeVarsTransformation.class.isInstance(transfStrategy));
  InScopeVarsTransformation inScopeStrategy=(InScopeVarsTransformation)transfStrategy;
  VarMapping mapping=VariableResolver.mapVariablesFromContext(modificationPoint.getContextOfModificationPoint(),ingredientTargeted);
  List<CtVariable> variablesMapped=mapping.getMappedVariables().values().iterator().next();
  assertNotNull(variablesMapped);
  assertEquals(4,variablesMapped.size());
  List<Ingredient> transformedIngredients=inScopeStrategy.transform(modificationPoint,new Ingredient(ingredientTargeted));
  log.debug(""String_Node_Str"" + transformedIngredients);
  assertEquals(4,transformedIngredients.size());
  for (  CtVariable ctVariableInScope : variablesMapped) {
    boolean ingredientTransformedHasVarInScope=false;
    for (    Ingredient ingredient : transformedIngredients) {
      System.out.println(String.format(""String_Node_Str"",ingredient.getCode().toString(),(ctVariableInScope.getSimpleName())));
      if (ingredient.getCode().toString().contains(ctVariableInScope.getSimpleName())) {
        ingredientTransformedHasVarInScope=true;
        break;
      }
    }
    assertTrue(ingredientTransformedHasVarInScope);
  }
  List<OperatorInstance> operatorsCreated=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    log.debug(""String_Node_Str"" + i);
    OperatorInstance opi=engine.createOperatorInstanceForPoint(modificationPoint);
    operatorsCreated.add(opi);
  }
  log.debug(""String_Node_Str"" + operatorsCreated);
  for (  OperatorInstance operatorInstance : operatorsCreated) {
    log.debug(""String_Node_Str"" + operatorInstance);
  }
  List<String> ingredientsUsed=operatorsCreated.stream().map(OperatorInstance::getModified).map(CtElement::toString).distinct().collect(Collectors.toList());
  log.debug(""String_Node_Str"".format(""String_Node_Str"",ingredientsUsed.size(),ingredientsUsed));
  assertEquals(operatorsCreated.size(),ingredientsUsed.size());
}"
61491,"/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected OperatorInstance createOperatorInstanceForPoint(ModificationPoint gen) throws IllegalAccessException {
  ModificationPoint genSusp=gen;
  AstorOperator operationType=new ReplaceOp();
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  OperatorInstance operation=new OperatorInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setModificationPoint(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  CtElement fix=null;
  int max=0;
  boolean continueSearching=true;
  while (continueSearching && max < mutations.size()) {
    fix=getFixMutation(mutations);
    continueSearching=fix != null;
    max++;
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}","/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override public OperatorInstance createOperatorInstanceForPoint(ModificationPoint gen) throws IllegalAccessException {
  ModificationPoint genSusp=gen;
  AstorOperator operationType=new ReplaceOp();
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  OperatorInstance operation=new OperatorInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setModificationPoint(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  CtElement fix=null;
  int max=0;
  boolean continueSearching=true;
  while (continueSearching && max < mutations.size()) {
    fix=getFixMutation(mutations);
    continueSearching=fix != null;
    max++;
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}"
61492,"/** 
 * This method analyze the output of the junit executor (i.e.,  {@link JUnitTestExecutor}) and return an entity called TestResult with the result of the test execution
 * @param p
 * @return
 */
@Override protected TestResult getTestResult(BufferedReader in){
  log.debug(""String_Node_Str"");
  TestResult tr=new TestResult();
  boolean success=false;
  String out=""String_Node_Str"";
  try {
    String line;
    while ((line=in.readLine()) != null) {
      out+=line + ""String_Node_Str"";
      if (line.startsWith(JUnitTestExecutor.OUTSEP)) {
        String[] s=line.split(JUnitTestExecutor.OUTSEP);
        int nrtc=Integer.valueOf(s[1]);
        tr.casesExecuted=nrtc;
        int failing=Integer.valueOf(s[2]);
        tr.failures=failing;
        if (!""String_Node_Str"".equals(s[3])) {
          String[] falinglist=s[3].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          String string : falinglist) {
            if (!string.trim().isEmpty())             tr.failTest.add(string.trim());
          }
        }
        success=true;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (success)   return tr;
 else {
    log.error(""String_Node_Str"" + out);
    return null;
  }
}","/** 
 * This method analyze the output of the junit executor (i.e.,  {@link JUnitTestExecutor}) and return an entity called TestResult with the result of the test execution
 * @param p
 * @return
 */
@Override protected TestResult getTestResult(BufferedReader in){
  log.debug(""String_Node_Str"");
  TestResult tr=new TestResult();
  boolean success=false;
  String processOut=""String_Node_Str"";
  try {
    String line;
    while ((line=in.readLine()) != null) {
      processOut+=line + ""String_Node_Str"";
      if (line.startsWith(JUnitTestExecutor.OUTSEP)) {
        String[] resultPrinted=line.split(JUnitTestExecutor.OUTSEP);
        int nrtc=Integer.valueOf(resultPrinted[1]);
        tr.casesExecuted=nrtc;
        int nrfailing=Integer.valueOf(resultPrinted[2]);
        tr.failures=nrfailing;
        if (resultPrinted.length > 3 && !""String_Node_Str"".equals(resultPrinted[3])) {
          String[] failingTestList=resultPrinted[3].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          String failingTest : failingTestList) {
            failingTest=failingTest.trim();
            if (!failingTest.isEmpty() && !failingTest.equals(""String_Node_Str""))             tr.failTest.add(failingTest);
          }
        }
        success=true;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (success)   return tr;
 else {
    log.error(""String_Node_Str"" + processOut);
    return null;
  }
}"
61493,"@Override public void loadExtensionPoints() throws Exception {
  super.loadExtensionPoints();
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  OperatorSpace jpgoperatorSpace=PlugInLoader.loadOperatorSpace();
  if (jpgoperatorSpace == null)   jpgoperatorSpace=new jGenProgSpace();
  this.setOperatorSpace(jpgoperatorSpace);
  String opStrategyClassName=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (opStrategyClassName != null) {
    OperatorSelectionStrategy strategy=createOperationSelectionStrategy(opStrategyClassName,jpgoperatorSpace);
    this.setOperatorSelectionStrategy(strategy);
  }
 else {
    this.setOperatorSelectionStrategy(new UniformRandomRepairOperatorSpace(jpgoperatorSpace));
  }
  IngredientSpace ingredientspace=PlugInLoader.loadIngredientSpace(ingredientProcessors);
  IngredientSearchStrategy ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{jpgoperatorSpace});
  if (ingStrategy == null) {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  this.setIngredientStrategy(ingStrategy);
  this.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
}","@Override public void loadExtensionPoints() throws Exception {
  super.loadExtensionPoints();
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  OperatorSpace jpgoperatorSpace=PlugInLoader.loadOperatorSpace();
  if (jpgoperatorSpace == null)   jpgoperatorSpace=new jGenProgSpace();
  this.setOperatorSpace(jpgoperatorSpace);
  String opStrategyClassName=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  if (opStrategyClassName != null) {
    OperatorSelectionStrategy strategy=createOperationSelectionStrategy(opStrategyClassName,jpgoperatorSpace);
    this.setOperatorSelectionStrategy(strategy);
  }
 else {
    this.setOperatorSelectionStrategy(new UniformRandomRepairOperatorSpace(jpgoperatorSpace));
  }
  IngredientSpace ingredientspace=PlugInLoader.loadIngredientSpace(ingredientProcessors);
  IngredientSearchStrategy ingStrategy=(IngredientSearchStrategy)PlugInLoader.loadPlugin(ExtensionPoints.INGREDIENT_SEARCH_STRATEGY,new Class[]{IngredientSpace.class},new Object[]{ingredientspace});
  if (ingStrategy == null) {
    ingStrategy=new EfficientIngredientStrategy(ingredientspace);
  }
  this.setIngredientStrategy(ingStrategy);
  this.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
}"
61494,"protected TestCaseVariantValidationResult executeRegressionTestingOneByOne(ProgramVariant mutatedVariant,URL[] bc,JUnitExecutorProcess p,ProjectRepairFacade projectFacade){
  log.debug(""String_Node_Str"");
  TestResult trregressionall=new TestResult();
  long t1=System.currentTimeMillis();
  for (  String tc : projectFacade.getProperties().getRegressionTestCases()) {
    List<String> parcial=new ArrayList<String>();
    parcial.add(tc);
    String jvmPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    TestResult trregression=p.execute(jvmPath,bc,parcial,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    if (trregression == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      trregressionall.getFailures().addAll(trregression.getFailures());
      trregressionall.getSuccessTest().addAll(trregression.getSuccessTest());
      trregressionall.failures+=trregression.getFailures().size();
      trregressionall.casesExecuted+=trregression.getCasesExecuted();
    }
  }
  long t2=System.currentTimeMillis();
  currentStats.time2Validation.add((t2 - t1));
  currentStats.numberOfTestcasesExecutedval2+=trregressionall.casesExecuted;
  currentStats.numberOfRegressionTestCases=trregressionall.casesExecuted;
  log.debug(trregressionall);
  return new TestCasesProgramValidationResult(trregressionall,true,trregressionall.wasSuccessful());
}","protected TestCaseVariantValidationResult executeRegressionTestingOneByOne(ProgramVariant mutatedVariant,URL[] bc,JUnitExecutorProcess p,ProjectRepairFacade projectFacade){
  log.debug(""String_Node_Str"");
  TestResult trregressionall=new TestResult();
  long t1=System.currentTimeMillis();
  for (  String tc : projectFacade.getProperties().getRegressionTestCases()) {
    List<String> parcial=new ArrayList<String>();
    parcial.add(tc);
    String jvmPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    TestResult singleTestResult=p.execute(jvmPath,bc,parcial,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    if (singleTestResult == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      trregressionall.getFailures().addAll(singleTestResult.getFailures());
      trregressionall.getSuccessTest().addAll(singleTestResult.getSuccessTest());
      trregressionall.failures+=singleTestResult.failures;
      trregressionall.casesExecuted+=singleTestResult.getCasesExecuted();
    }
  }
  long t2=System.currentTimeMillis();
  currentStats.time2Validation.add((t2 - t1));
  currentStats.numberOfTestcasesExecutedval2+=trregressionall.casesExecuted;
  currentStats.numberOfRegressionTestCases=trregressionall.casesExecuted;
  log.debug(trregressionall);
  return new TestCasesProgramValidationResult(trregressionall,true,trregressionall.wasSuccessful());
}"
61495,"/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching && attempts < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    attempts++;
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    Stats.currentStat.incrementIngCounter(variant_id);
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + elementFromIngredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + elementFromIngredient);
            boolean fit=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
            continueSearching=!fit;
            log.debug(""String_Node_Str"" + fit + ""String_Node_Str""+ StringUtil.trunc(elementFromIngredient));
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
        continue;
      }
    }
    boolean fit=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
    log.debug(""String_Node_Str"" + fit + ""String_Node_Str""+ StringUtil.trunc(elementFromIngredient));
    continueSearching=!fit;
    if (fit) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),elementFromIngredient);
      int ingCounter=Stats.currentStat.temporalIngCounterByPatch.get(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      Stats.currentStat.storeSucessfulTransformedIngredient(variant_id,ingCounter);
      return new Ingredient(elementFromIngredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}","/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  int numberOfIngredientTransformationsDone=0;
  while (continueSearching && attempts < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    attempts++;
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    Stats.currentStat.incrementIngCounter(variant_id);
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + elementFromIngredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            numberOfIngredientTransformationsDone++;
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + elementFromIngredient);
            boolean fit=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
            continueSearching=!fit;
            log.debug(""String_Node_Str"" + fit + ""String_Node_Str""+ StringUtil.trunc(elementFromIngredient));
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
        continue;
      }
    }
    boolean fit=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
    log.debug(""String_Node_Str"" + fit + ""String_Node_Str""+ StringUtil.trunc(elementFromIngredient));
    continueSearching=!fit;
    if (fit) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),elementFromIngredient);
      Stats.currentStat.storeSucessfulTransformedIngredient(variant_id,numberOfIngredientTransformationsDone);
      return new Ingredient(elementFromIngredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + StringUtil.trunc(modificationPoint.getCodeElement().getShortRepresentation()) + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}"
61496,"/** 
 * By default, it initializes the spoon model. It should not be created before. Otherwise, an exception occurs.
 * @param suspicious
 * @throws Exception
 */
public void initPopulation(List<SuspiciousCode> suspicious) throws Exception {
  log.info(""String_Node_Str"" + suspicious.size());
  initializePopulation(suspicious);
  if (originalVariant == null) {
    log.error(""String_Node_Str"");
    return;
  }
  if (originalVariant.getModificationPoints().isEmpty()) {
    log.error(""String_Node_Str"");
    return;
  }
  if (this.ingredientSearchStrategy != null) {
    this.ingredientSearchStrategy.getIngredientSpace().defineSpace(originalVariant);
  }
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    setFitnessOfPopulation();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}","/** 
 * By default, it initializes the spoon model. It should not be created before. Otherwise, an exception occurs.
 * @param suspicious
 * @throws Exception
 */
public void initPopulation(List<SuspiciousCode> suspicious) throws Exception {
  log.info(""String_Node_Str"" + suspicious.size());
  initializePopulation(suspicious);
  if (originalVariant == null) {
    log.error(""String_Node_Str"");
    return;
  }
  if (originalVariant.getModificationPoints().isEmpty()) {
    log.error(""String_Node_Str"");
    return;
  }
  if (this.ingredientSearchStrategy != null) {
    this.ingredientSearchStrategy.getIngredientSpace().defineSpace(originalVariant);
  }
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"");
    setFitnessOfPopulation();
  }
 else {
    log.debug(""String_Node_Str"");
  }
}"
61497,"@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + StringUtil.trunc(ingredient.getShortRepresentation()));
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"" + modificationPoint + ""String_Node_Str""+ StringUtil.trunc(ingredient));
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=obtainCombination(allCombinations);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
        continue;
      }
    }
    boolean fits=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    log.debug(""String_Node_Str"" + fits + ""String_Node_Str""+ StringUtil.trunc(ingredient));
    continueSearching=!fits;
    if (fits) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      int ingCounter=Stats.currentStat.getIngCounter(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      Stats.currentStat.storeSucessfulTransformedIngredient(variant_id,ingCounter);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}","@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  int numberOfIngredientTransformationsDone=0;
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + StringUtil.trunc(ingredient.getShortRepresentation()));
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"" + modificationPoint + ""String_Node_Str""+ StringUtil.trunc(ingredient));
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=obtainCombination(allCombinations);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
            numberOfIngredientTransformationsDone++;
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
        continue;
      }
    }
    boolean fits=VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    log.debug(""String_Node_Str"" + fits + ""String_Node_Str""+ StringUtil.trunc(ingredient));
    continueSearching=!fits;
    if (fits) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      Stats.currentStat.storeSucessfulTransformedIngredient(variant_id,numberOfIngredientTransformationsDone);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}"
61498,"public void storeSucessfulTransformedIngredient(int pvid,int attempts){
  this.successfulTransformedIngredients.add(new Pair(pvid,attempts));
}","public void storeSucessfulTransformedIngredient(int pvid,int transformations){
  this.successfulTransformedIngredients.add(new Pair(pvid,transformations));
}"
61499,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @param varsName names of all variables
 * @param indexVar current variable under analysis
 * @param currentCombination current combination of variables
 * @param allCombinations list that store all variable combinations
 */
public static void findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsName,int indexVar,Map<String,CtVariable> currentCombination,List<Map<String,CtVariable>> allCombinations){
  if (varsName.size() == indexVar) {
    allCombinations.add(currentCombination);
    return;
  }
  VarAccessWrapper currentVar=varsName.get(indexVar);
  List<CtVariable> mapped=mappedVars.get(currentVar);
  if (currentCombination.containsKey(currentVar.getVar().getVariable().getSimpleName())) {
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,currentCombination,allCombinations);
  }
  for (  CtVariable varFromMap : mapped) {
    Map<String,CtVariable> newCombination=new TreeMap<>(currentCombination);
    newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,newCombination,allCombinations);
  }
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @param varsNamesToCombine names of all variables (out of scope)
 * @param indexVar current variable under analysis
 * @param currentCombination current combination of variables
 * @param allCombinations list that store all variable combinations
 */
public static void findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsNamesToCombine,int indexVar,Map<String,CtVariable> currentCombination,List<Map<String,CtVariable>> allCombinations){
  if (varsNamesToCombine.size() == indexVar) {
    allCombinations.add(currentCombination);
    return;
  }
  VarAccessWrapper currentVar=varsNamesToCombine.get(indexVar);
  List<CtVariable> mapped=mappedVars.get(currentVar);
  if (currentCombination.containsKey(currentVar.getVar().getVariable().getSimpleName())) {
    findAllVarMappingCombination(mappedVars,varsNamesToCombine,indexVar + 1,currentCombination,allCombinations);
  }
 else {
    for (    CtVariable varFromMap : mapped) {
      Map<String,CtVariable> newCombination=new TreeMap<>(currentCombination);
      newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
      findAllVarMappingCombination(mappedVars,varsNamesToCombine,indexVar + 1,newCombination,allCombinations);
    }
  }
}"
61500,"@SuppressWarnings(""String_Node_Str"") @Test public void testGenerateEvosuiteTestsStepByStep() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String outES=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  List<String> affectedTypes=variant.getAffectedClasses().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  boolean executed=fev.runEvosuite(variant,affectedTypes,main1.getEngine().getProjectFacade(),outES,true);
  assertTrue(executed);
  String testEScodepath=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  File esPath=new File(testEScodepath);
  assertTrue(""String_Node_Str"",esPath.exists());
  log.info(""String_Node_Str"" + esPath);
  log.info(""String_Node_Str"");
  String bytecodeSUTLocation=main1.getEngine().getProjectFacade().getOutDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpathForModelizeEvoSuite=""String_Node_Str"";
  classpathForModelizeEvoSuite+=(new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath());
  classpathForModelizeEvoSuite+=(File.pathSeparator + main1.getEngine().getProjectFacade().getProperties().getDependenciesString());
  classpathForModelizeEvoSuite+=(File.pathSeparator + bytecodeSUTLocation);
  String[] classpathForModelizeEvoSuiteTest=classpathForModelizeEvoSuite.split(File.pathSeparator);
  List<CtClass> classes=fev.reificateEvoSuiteTest(testEScodepath,classpathForModelizeEvoSuiteTest);
  classes.stream().forEach(e -> log.info(""String_Node_Str"" + e.getQualifiedName()));
  assertTrue(""String_Node_Str"",classes.size() >= 2);
  assertFalse(main1.getEngine().getMutatorSupporter().getTestClasses().contains(classes.get(0)));
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=main1.getEngine().getProjectFacade().getProperties().getDependenciesString() + File.pathSeparator + bytecodeSUTLocation+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath();
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=main1.getEngine().getCompiler().compile(classes,Converters.toURLArray(classpathForCreateModel));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  String outPutTest=main1.getEngine().getProjectFacade().getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  log.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getOutput().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  TestCaseVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.isSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testGenerateEvosuiteTestsStepByStep() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String outES=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  List<String> affectedTypes=variant.getAffectedClasses().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  boolean executed=fev.runEvosuite(variant,affectedTypes,main1.getEngine().getProjectFacade(),outES,true);
  assertTrue(executed);
  String testEScodepath=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  File esPath=new File(testEScodepath);
  assertTrue(""String_Node_Str"",esPath.exists());
  log.info(""String_Node_Str"" + esPath);
  log.info(""String_Node_Str"");
  String bytecodeSUTLocation=main1.getEngine().getProjectFacade().getOutDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpathForModelizeEvoSuite=""String_Node_Str"";
  classpathForModelizeEvoSuite+=(new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath());
  classpathForModelizeEvoSuite+=(File.pathSeparator + main1.getEngine().getProjectFacade().getProperties().getDependenciesString());
  classpathForModelizeEvoSuite+=(File.pathSeparator + bytecodeSUTLocation);
  String[] classpathForModelizeEvoSuiteTest=classpathForModelizeEvoSuite.split(File.pathSeparator);
  List<CtClass> classes=fev.reificateEvoSuiteTest(testEScodepath,classpathForModelizeEvoSuiteTest);
  classes.stream().forEach(e -> log.info(""String_Node_Str"" + e.getQualifiedName()));
  assertTrue(""String_Node_Str"",classes.size() >= 2);
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=main1.getEngine().getProjectFacade().getProperties().getDependenciesString() + File.pathSeparator + bytecodeSUTLocation+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath();
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=main1.getEngine().getCompiler().compile(classes,Converters.toURLArray(classpathForCreateModel));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  String outPutTest=main1.getEngine().getProjectFacade().getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  log.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getOutput().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  TestCaseVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.isSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}"
61501,"@Test public void testCompleteEvosuiteTests() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  main1.getEngine().processCreatedVariant(variant,1);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.createEvoTestModel(main1.getEngine().getProjectFacade(),variant);
  assertEquals(""String_Node_Str"",2,classes.size());
  assertFalse(main1.getEngine().getMutatorSupporter().getTestClasses().contains(classes.get(0)));
  TestCaseVariantValidationResult result=fev.saveAndExecuteEvoSuite(main1.getEngine().getProjectFacade(),variant,classes);
  assertNotNull(result);
  assertTrue(result.isSuccessful());
}","@Test public void testCompleteEvosuiteTests() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  main1.getEngine().processCreatedVariant(variant,1);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.createEvoTestModel(main1.getEngine().getProjectFacade(),variant);
  assertEquals(""String_Node_Str"",2,classes.size());
  TestCaseVariantValidationResult result=fev.saveAndExecuteEvoSuite(main1.getEngine().getProjectFacade(),variant,classes);
  assertNotNull(result);
  assertTrue(result.isSuccessful());
}"
61502,"@Test @Ignore public void testMath74() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RegressionValidation.class.getCanonicalName()};
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.createEvoTestModel(main1.getEngine().getProjectFacade(),variant);
  assertFalse(main1.getEngine().getMutatorSupporter().getTestClasses().contains(classes.get(0)));
  TestCaseVariantValidationResult result=fev.saveAndExecuteEvoSuite(main1.getEngine().getProjectFacade(),variant,classes);
  log.debug(result);
  assertNotNull(result);
  assertTrue(result.isSuccessful());
}","@Test @Ignore public void testMath74() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RegressionValidation.class.getCanonicalName()};
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.createEvoTestModel(main1.getEngine().getProjectFacade(),variant);
  TestCaseVariantValidationResult result=fev.saveAndExecuteEvoSuite(main1.getEngine().getProjectFacade(),variant,classes);
  log.debug(result);
  assertNotNull(result);
  assertTrue(result.isSuccessful());
}"
61503,"public TestResult execute(String jvmPath,String classpath,List<String> classesToExecute,int waitTime){
  Process p=null;
  jvmPath+=File.separator + ""String_Node_Str"";
  String systemcp=defineInitialClasspath();
  classpath=systemcp + File.pathSeparator + classpath;
  List<String> cls=new ArrayList<>(classesToExecute);
  try {
    List<String> command=new ArrayList<String>();
    command.add(jvmPath);
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpath);
    command.add(classNameToCall());
    command.addAll(cls);
    printCommandToExecute(command);
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"");
    pb.redirectOutput();
    pb.redirectErrorStream(true);
    pb.directory(new File((ConfigurationProperties.getProperty(""String_Node_Str""))));
    long t_start=System.currentTimeMillis();
    p=pb.start();
    BufferedWriter p_stdin=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    try {
      String timeZone=ConfigurationProperties.getProperty(""String_Node_Str"");
      p_stdin.write(""String_Node_Str"" + timeZone + ""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(toString(command));
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
    }
 catch (    IOException e) {
      log.error(e);
    }
    p.waitFor(waitTime,TimeUnit.MILLISECONDS);
    long t_end=System.currentTimeMillis();
    log.debug(""String_Node_Str"" + ((t_end - t_start) / 1000) + ""String_Node_Str"");
    if (!avoidInterruption) {
      log.debug(""String_Node_Str"");
      p.exitValue();
    }
    TestResult tr=getTestResult(p);
    p.destroy();
    return tr;
  }
 catch (  IOException|InterruptedException|IllegalThreadStateException ex) {
    log.info(""String_Node_Str"" + ex.getMessage());
    if (p != null)     p.destroy();
  }
  return null;
}","public TestResult execute(String jvmPath,String classpath,List<String> classesToExecute,int waitTime){
  Process p=null;
  jvmPath+=File.separator + ""String_Node_Str"";
  String systemcp=defineInitialClasspath();
  classpath=systemcp + File.pathSeparator + classpath;
  List<String> cls=new ArrayList<>(classesToExecute);
  try {
    List<String> command=new ArrayList<String>();
    command.add(jvmPath);
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpath);
    command.add(classNameToCall());
    command.addAll(cls);
    printCommandToExecute(command);
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"");
    pb.redirectOutput();
    pb.redirectErrorStream(true);
    pb.directory(new File((ConfigurationProperties.getProperty(""String_Node_Str""))));
    long t_start=System.currentTimeMillis();
    p=pb.start();
    BufferedWriter p_stdin=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    try {
      String timeZone=ConfigurationProperties.getProperty(""String_Node_Str"");
      p_stdin.write(""String_Node_Str"" + timeZone + ""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(toString(command));
      p_stdin.newLine();
      p_stdin.flush();
      p_stdin.write(""String_Node_Str"");
      p_stdin.newLine();
      p_stdin.flush();
    }
 catch (    IOException e) {
      log.error(e);
    }
    p.waitFor(waitTime,TimeUnit.MILLISECONDS);
    long t_end=System.currentTimeMillis();
    log.debug(""String_Node_Str"" + ((t_end - t_start) / 1000) + ""String_Node_Str"");
    if (!avoidInterruption) {
      log.debug(""String_Node_Str"");
      p.exitValue();
    }
    TestResult tr=getTestResult(p);
    p.destroy();
    return tr;
  }
 catch (  IOException|InterruptedException|IllegalThreadStateException ex) {
    log.info(""String_Node_Str"" + ex.getMessage());
    if (p != null)     p.destroy();
  }
  return null;
}"
61504,"@Override public boolean matches(CtExecutable element){
  return element.getParent(CtExecutable.class) == null && !element.isImplicit() && !(element instanceof CtAnonymousExecutable);
}","@Override public boolean matches(CtExecutable element){
  boolean t=element.getParent(CtExecutable.class) == null && !element.isImplicit() && !(element instanceof CtAnonymousExecutable);
  return t;
}"
61505,"@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + ingredient.getShortRepresentation());
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      int ingCounter=Stats.currentStat.getIngCounter(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}","@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + StringUtil.trunc(ingredient.getShortRepresentation()));
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"" + modificationPoint + ""String_Node_Str""+ StringUtil.trunc(ingredient));
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      int ingCounter=Stats.currentStat.getIngCounter(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}"
61506,"public String[] commandLang1(File out,boolean step){
  String libsdir=new File(""String_Node_Str"").getAbsolutePath();
  String dep=libsdir + File.separator + ""String_Node_Str""+ File.pathSeparator+ libsdir+ File.separator+ ""String_Node_Str""+ File.pathSeparator+ File.separator+ libsdir+ ""String_Node_Str""+ File.pathSeparator+ File.separator+ libsdir+ ""String_Node_Str"";
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(step) ? ""String_Node_Str"" : ""String_Node_Str""};
  return args;
}","public String[] commandLang1(File out,boolean step){
  String libsdir=new File(""String_Node_Str"").getAbsolutePath();
  String dep=libsdir + File.separator + ""String_Node_Str""+ File.pathSeparator+ libsdir+ File.separator+ ""String_Node_Str""+ File.pathSeparator+ File.separator+ libsdir+ File.separator+ ""String_Node_Str""+ File.pathSeparator+ File.separator+ libsdir+ File.separator+ ""String_Node_Str"";
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(step) ? ""String_Node_Str"" : ""String_Node_Str""};
  return args;
}"
61507,"public static List<String> findTestCasesForRegression(String classPath,ProjectRepairFacade projectFacade){
  String[] testClassesRegression=new TestClassesFinder().findIn(classpathFrom(classPath),false);
  List<String> tcregression=Arrays.asList(testClassesRegression);
  List<String> refined=refineListofRegressionTestCases(tcregression);
  return refined;
}","public static List<String> findTestCasesForRegression(String classPath,ProjectRepairFacade projectFacade){
  String cp=projectFacade.getProperties().getDependenciesString();
  classPath+=File.pathSeparator + cp;
  String[] testClassesRegression=new TestClassesFinder().findIn(classpathFrom(classPath),false);
  List<String> tcregression=Arrays.asList(testClassesRegression);
  List<String> refined=refineListofRegressionTestCases(tcregression);
  return refined;
}"
61508,"@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock<?> parentBlock=operation.getParentBlock();
  int position=operation.getLocationInParent();
  position+=1;
  boolean sucessful=remove(parentBlock,fix,position);
  return sucessful;
}","@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock<?> parentBlock=operation.getParentBlock();
  int position=operation.getLocationInParent();
  position+=1;
  boolean sucessful=remove(parentBlock,fix,position);
  parentBlock.setImplicit(operation.isParentBlockImplicit());
  return sucessful;
}"
61509,"@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock<?> parentBlock=operation.getParentBlock();
  int position=operation.getLocationInParent();
  remove(parentBlock,fix,position);
  return true;
}","@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock<?> parentBlock=operation.getParentBlock();
  int position=operation.getLocationInParent();
  boolean sucess=remove(parentBlock,fix,position);
  parentBlock.setImplicit(operation.isParentBlockImplicit());
  return sucess;
}"
61510,"public boolean remove(CtBlock parentBlock,CtStatement fixStatement,int pos){
  CtStatement s=parentBlock.getStatement(pos);
  if (fixStatement.equals(s)) {
    parentBlock.getStatements().remove(pos);
    this.updateBlockImplicitly(parentBlock,false);
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + fixStatement + ""String_Node_Str""+ (s));
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public boolean remove(CtBlock parentBlock,CtStatement fixStatement,int pos){
  CtStatement s=parentBlock.getStatement(pos);
  if (fixStatement.equals(s)) {
    parentBlock.getStatements().remove(pos);
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + fixStatement + ""String_Node_Str""+ (s));
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
61511,"@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtBlock<?> parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    if ((parentBlock.getStatements().isEmpty() && operation.getLocationInParent() == 0) || (parentBlock.getStatements().size() >= operation.getLocationInParent())) {
      parentBlock.getStatements().add(operation.getLocationInParent(),ctst);
      this.updateBlockImplicitly(parentBlock,true);
      return true;
    }
 else {
      log.error(""String_Node_Str"" + ctst + ""String_Node_Str""+ operation.getLocationInParent()+ ""String_Node_Str""+ parentBlock.getStatements().size());
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}","@Override public boolean undoChangesInModel(OperatorInstance operation,ProgramVariant p){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtBlock<?> parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    if ((parentBlock.getStatements().isEmpty() && operation.getLocationInParent() == 0) || (parentBlock.getStatements().size() >= operation.getLocationInParent())) {
      parentBlock.getStatements().add(operation.getLocationInParent(),ctst);
      parentBlock.setImplicit(operation.isParentBlockImplicit());
      return true;
    }
 else {
      log.error(""String_Node_Str"" + ctst + ""String_Node_Str""+ operation.getLocationInParent()+ ""String_Node_Str""+ parentBlock.getStatements().size());
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}"
61512,"public void setParentBlock(CtBlock parentBlock){
  this.parentBlock=parentBlock;
}","public void setParentBlock(CtBlock parentBlock){
  this.parentBlock=parentBlock;
  this.isParentBlockImplicit=parentBlock.isImplicit();
}"
61513,"@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + ingredient.getShortRepresentation());
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<CtVariableAccess,CtVariableReference> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      int ingCounter=Stats.currentStat.getIngCounter(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}","@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator op){
  if (key2element.isEmpty())   key2element=queryelements().orElseThrow(RuntimeException::new);
  T suspicious=(T)modificationPoint.getCodeElement().getParent(typeFilter);
  if (suspicious == null) {
    log.info(""String_Node_Str"" + cls.getName() + ""String_Node_Str""+ modificationPoint);
    return null;
  }
  String key=getkey(suspicious);
  log.debug(""String_Node_Str"" + key);
  if (!key2element.containsKey(key)) {
    log.error(""String_Node_Str"" + key);
    throw new RuntimeException();
  }
  if (!element2simlist.containsKey(suspicious))   computesimlist(suspicious);
  Queue<CtCodeElement> fixspace=getfixspace(modificationPoint,op,suspicious);
  int searchSpaceSize=fixspace.size();
  log.debug(""String_Node_Str"" + fixspace.isEmpty());
  if (fixspace.isEmpty())   return null;
  boolean continueSearching=true;
  int variant_id=modificationPoint.getProgramVariant().getId();
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching) {
    CtElement ingredient=getingredient(fixspace);
    log.debug(""String_Node_Str"" + modificationPoint);
    if (ingredient == null)     return null;
    log.debug(""String_Node_Str"" + ingredient.getShortRepresentation());
    boolean alreadyApplied=alreadySelected(modificationPoint,ingredient,op);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=ingredient.equals(modificationPoint.getCodeElement());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),ingredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + ingredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + ingredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),ingredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),ingredient);
      int ingCounter=Stats.currentStat.getIngCounter(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(ingredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement() + ""String_Node_Str""+ searchSpaceSize);
  return null;
}"
61514,"/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching && attempts < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    attempts++;
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + elementFromIngredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<CtVariableAccess,CtVariableReference> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + elementFromIngredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),elementFromIngredient);
      int ingCounter=Stats.currentStat.temporalIngCounter.get(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(elementFromIngredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement().getShortRepresentation() + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}","/** 
 * Return an ingredient. As it has a cache, it never returns twice the same ingredient.
 * @param modificationPoint
 * @param targetStmt
 * @param operationType
 * @param elementsFromFixSpace
 * @return
 */
@Override public Ingredient getFixIngredient(ModificationPoint modificationPoint,AstorOperator operationType){
  int variant_id=modificationPoint.getProgramVariant().getId();
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=getSpaceSize(modificationPoint,operationType);
  Stats.currentStat.initializeIngCounter(variant_id);
  while (continueSearching && attempts < elementsFromFixSpace) {
    Ingredient randomIngredient=super.getFixIngredient(modificationPoint,operationType);
    if (randomIngredient == null || randomIngredient.getCode() == null) {
      return null;
    }
    CtElement elementFromIngredient=randomIngredient.getCode();
    attempts++;
    boolean alreadyApplied=alreadySelected(modificationPoint,elementFromIngredient,operationType);
    if (alreadyApplied) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean sameCode=elementFromIngredient.toString().equals(modificationPoint.getCodeElement().toString());
    if (sameCode) {
      log.debug(""String_Node_Str"");
      continue;
    }
    boolean transformIngredient=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    if (transformIngredient) {
      if (modificationPoint.getContextOfModificationPoint().isEmpty()) {
        log.debug(""String_Node_Str"");
      }
      VarMapping mapping=VariableResolver.mapVariables(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
      if (mapping.getNotMappedVariables().isEmpty()) {
        if (mapping.getMappedVariables().isEmpty()) {
          log.debug(""String_Node_Str"");
          continueSearching=false;
        }
 else {
          log.debug(""String_Node_Str"" + elementFromIngredient);
          List<Map<String,CtVariable>> allCombinations=VariableResolver.findAllVarMappingCombination(mapping.getMappedVariables());
          if (allCombinations.size() > 0) {
            Map<String,CtVariable> selectedTransformation=allCombinations.get(0);
            log.debug(""String_Node_Str"" + selectedTransformation);
            Map<VarAccessWrapper,CtVariableAccess> originalMap=VariableResolver.convertIngredient(mapping,selectedTransformation);
            log.debug(""String_Node_Str"" + elementFromIngredient);
            continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + mapping.getNotMappedVariables());
      }
    }
 else {
      continueSearching=!VariableResolver.fitInPlace(modificationPoint.getContextOfModificationPoint(),elementFromIngredient);
    }
    Stats.currentStat.incrementIngCounter(variant_id);
    if (!continueSearching) {
      IngredientSpaceScope scope=determineIngredientScope(modificationPoint.getCodeElement(),elementFromIngredient);
      int ingCounter=Stats.currentStat.temporalIngCounter.get(variant_id);
      log.debug(""String_Node_Str"" + ingCounter);
      return new Ingredient(elementFromIngredient,scope);
    }
  }
  log.debug(""String_Node_Str"" + modificationPoint.getCodeElement().getShortRepresentation() + ""String_Node_Str""+ elementsFromFixSpace);
  return null;
}"
61515,"public VarMapping(Map<VarWrapper,List<CtVariable>> mapsVariables,List<CtVariableAccess> notMappedVariables){
  super();
  this.mappedVariables=mapsVariables;
  this.notMappedVariables=notMappedVariables;
}","public VarMapping(Map<VarAccessWrapper,List<CtVariable>> mapsVariables,List<CtVariableAccess> notMappedVariables){
  super();
  this.mappedVariables=mapsVariables;
  this.notMappedVariables=notMappedVariables;
}"
61516,"public void setMappedVariables(Map<VarWrapper,List<CtVariable>> mapsVariables){
  this.mappedVariables=mapsVariables;
}","public void setMappedVariables(Map<VarAccessWrapper,List<CtVariable>> mapsVariables){
  this.mappedVariables=mapsVariables;
}"
61517,"public Map<VarWrapper,List<CtVariable>> getMappedVariables(){
  return mappedVariables;
}","public Map<VarAccessWrapper,List<CtVariable>> getMappedVariables(){
  return mappedVariables;
}"
61518,"/** 
 * Adapt the ingredient to the destination according to the mapping. We directly manipulate the variables from the ingredient, which are stored in VarMapping
 * @param varMapping
 * @param destination
 * @return it returns the original variable reference of each convertedvariable
 */
public static Map<CtVariableAccess,CtVariableReference> convertIngredient(VarMapping varMapping,Map<String,CtVariable> mapToFollow){
  Map<CtVariableAccess,CtVariableReference> originalMap=new HashMap<>();
  Map<VarWrapper,List<CtVariable>> mappedVars=varMapping.getMappedVariables();
  for (  VarWrapper var : mappedVars.keySet()) {
    CtVariable varNew=mapToFollow.get(var.getVar().getVariable().getSimpleName());
    originalMap.put(var.getVar(),var.getVar().getVariable());
    var.getVar().setVariable(varNew.getReference());
  }
  return originalMap;
}","/** 
 * Adapt the ingredient to the destination according to the mapping. We directly manipulate the variables from the ingredient, which are stored in VarMapping
 * @param varMapping
 * @param destination
 * @return it returns the original variable reference of each convertedvariable
 */
@SuppressWarnings(""String_Node_Str"") public static Map<VarAccessWrapper,CtVariableAccess> convertIngredient(VarMapping varMapping,Map<String,CtVariable> mapToFollow){
  Map<VarAccessWrapper,CtVariableAccess> originalMap=new HashMap<>();
  Map<VarAccessWrapper,List<CtVariable>> mappedVars=varMapping.getMappedVariables();
  for (  VarAccessWrapper var : mappedVars.keySet()) {
    CtVariable varNew=mapToFollow.get(var.getVar().getVariable().getSimpleName());
    CtVariableReference newVarReference=varNew.getReference();
    CtVariableAccess originalVarAccessDestination=var.getVar();
    CtVariableAccess newVarAccessDestination=null;
    if (newVarReference instanceof CtLocalVariableReference || newVarReference instanceof CtParameterReference) {
      if (originalVarAccessDestination instanceof CtFieldWrite || originalVarAccessDestination instanceof CtVariableWrite) {
        newVarAccessDestination=MutationSupporter.getFactory().Core().createVariableWrite();
        newVarAccessDestination.setVariable(newVarReference);
      }
 else {
        newVarAccessDestination=MutationSupporter.getFactory().Code().createVariableRead(newVarReference,varNew.hasModifier(ModifierKind.STATIC));
      }
    }
 else     if (newVarReference instanceof CtFieldReference) {
      if (originalVarAccessDestination instanceof CtFieldWrite<?> || originalVarAccessDestination instanceof CtFieldRead<?>) {
        newVarAccessDestination=MutationSupporter.getFactory().Core().createFieldWrite();
      }
 else {
        newVarAccessDestination=MutationSupporter.getFactory().Core().createFieldRead();
      }
      newVarAccessDestination.setVariable(newVarReference);
    }
    if (newVarAccessDestination != null) {
      originalMap.put(new VarAccessWrapper(newVarAccessDestination),originalVarAccessDestination);
      originalVarAccessDestination.replace(newVarAccessDestination);
    }
 else {
      logger.error(""String_Node_Str"");
    }
  }
  return originalMap;
}"
61519,"/** 
 * For each modified variable, it resets the variables by putting their original var reference
 * @param varMapping
 * @param original
 */
public static void resetIngredient(VarMapping varMapping,Map<CtVariableAccess,CtVariableReference> original){
  Map<VarWrapper,List<CtVariable>> mappedVars=varMapping.getMappedVariables();
  for (  VarWrapper var : mappedVars.keySet()) {
    CtVariableReference varNew=original.get(var.getVar());
    var.getVar().setVariable(varNew);
  }
}","/** 
 * For each modified variable, it resets the variables by putting their original var reference
 * @param varMapping
 * @param original
 */
public static void resetIngredient(Map<VarAccessWrapper,CtVariableAccess> old){
  for (  VarAccessWrapper newa : old.keySet()) {
    newa.getVar().replace(old.get(newa));
  }
}"
61520,"/** 
 */
public static VarMapping mapVariables(List<CtVariable> varContext,CtElement ingredientCtElement){
  Map<VarWrapper,List<CtVariable>> varMaps=new HashMap<>();
  List<CtVariableAccess> notMappedVariables=new ArrayList<>();
  ClassLoader classLoader=VariableResolver.class.getClassLoader();
  Map<String,List<String>> clusters=cluster.readClusterFile(Paths.get(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")));
  List<CtVariableAccess> variablesOutOfScope=retriveVariablesOutOfContext(varContext,ingredientCtElement);
  logger.debug(""String_Node_Str"" + variablesOutOfScope);
  for (  CtVariableAccess wOut : variablesOutOfScope) {
    List<String> wcluster=clusters.get(wOut.getVariable().getSimpleName());
    if (wcluster == null) {
      logger.debug(""String_Node_Str"" + wOut);
      continue;
    }
    logger.debug(""String_Node_Str"" + wOut + ""String_Node_Str""+ wcluster);
    boolean mapped=false;
    VarWrapper varOutWrapper=new VarWrapper(wOut);
    for (    String wordFromCluster : wcluster) {
      List<CtVariable> varExist=existVariableWithName(varContext,wordFromCluster);
      for (      CtVariable varFromCluster : varExist) {
        CtTypeReference typeref_i=varFromCluster.getType();
        try {
          if (typeref_i.isSubtypeOf(wOut.getType())) {
            List<CtVariable> vars=varMaps.get(varOutWrapper);
            if (vars == null) {
              vars=new ArrayList<>();
              varMaps.put(varOutWrapper,vars);
            }
            vars.add(varFromCluster);
            mapped=true;
          }
        }
 catch (        Exception e) {
          logger.error(e);
        }
      }
    }
    if (!mapped)     notMappedVariables.add(wOut);
  }
  VarMapping mappings=new VarMapping(varMaps,notMappedVariables);
  return mappings;
}","/** 
 */
public static VarMapping mapVariables(List<CtVariable> varContext,CtElement ingredientCtElement){
  Map<VarAccessWrapper,List<CtVariable>> varMaps=new HashMap<>();
  List<CtVariableAccess> notMappedVariables=new ArrayList<>();
  ClassLoader classLoader=VariableResolver.class.getClassLoader();
  Map<String,List<String>> clusters=cluster.readClusterFile(Paths.get(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")));
  List<CtVariableAccess> variablesOutOfScope=retriveVariablesOutOfContext(varContext,ingredientCtElement);
  logger.debug(""String_Node_Str"" + variablesOutOfScope);
  for (  CtVariableAccess wOut : variablesOutOfScope) {
    List<String> wcluster=clusters.get(wOut.getVariable().getSimpleName());
    if (wcluster == null) {
      logger.debug(""String_Node_Str"" + wOut);
      continue;
    }
    logger.debug(""String_Node_Str"" + wOut + ""String_Node_Str""+ wcluster);
    boolean mapped=false;
    VarAccessWrapper varOutWrapper=new VarAccessWrapper(wOut);
    for (    String wordFromCluster : wcluster) {
      List<CtVariable> varExist=existVariableWithName(varContext,wordFromCluster);
      for (      CtVariable varFromCluster : varExist) {
        CtTypeReference typeref_i=varFromCluster.getType();
        try {
          if (typeref_i.isSubtypeOf(wOut.getType())) {
            List<CtVariable> vars=varMaps.get(varOutWrapper);
            if (vars == null) {
              vars=new ArrayList<>();
              varMaps.put(varOutWrapper,vars);
            }
            vars.add(varFromCluster);
            mapped=true;
          }
        }
 catch (        Exception e) {
          logger.error(e);
        }
      }
    }
    if (!mapped)     notMappedVariables.add(wOut);
  }
  VarMapping mappings=new VarMapping(varMaps,notMappedVariables);
  return mappings;
}"
61521,"/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @param varsName names of all variables
 * @param indexVar current variable under analysis
 * @param currentCombination current combination of variables
 * @param allCombinations list that store all variable combinations
 */
public static void findAllVarMappingCombination(Map<VarWrapper,List<CtVariable>> mappedVars,List<VarWrapper> varsName,int indexVar,Map<String,CtVariable> currentCombination,List<Map<String,CtVariable>> allCombinations){
  if (varsName.size() == indexVar) {
    allCombinations.add(currentCombination);
    return;
  }
  VarWrapper currentVar=varsName.get(indexVar);
  List<CtVariable> mapped=mappedVars.get(currentVar);
  if (currentCombination.containsKey(currentVar.getVar().getVariable().getSimpleName())) {
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,currentCombination,allCombinations);
  }
  for (  CtVariable varFromMap : mapped) {
    Map<String,CtVariable> newCombination=new TreeMap<>(currentCombination);
    newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,newCombination,allCombinations);
  }
}","/** 
 * Method that finds all combination of variables mappings Ex: if var 'a' can be mapped to a1 and a2, and var 'b' to b1 and b2, the method return all combinations (a1,b1), (a2,b1), (a1,b2), (a2,b2)
 * @param mappedVars map of variables (out-of-scope) and candidate replacements of
 * @param varsName names of all variables
 * @param indexVar current variable under analysis
 * @param currentCombination current combination of variables
 * @param allCombinations list that store all variable combinations
 */
public static void findAllVarMappingCombination(Map<VarAccessWrapper,List<CtVariable>> mappedVars,List<VarAccessWrapper> varsName,int indexVar,Map<String,CtVariable> currentCombination,List<Map<String,CtVariable>> allCombinations){
  if (varsName.size() == indexVar) {
    allCombinations.add(currentCombination);
    return;
  }
  VarAccessWrapper currentVar=varsName.get(indexVar);
  List<CtVariable> mapped=mappedVars.get(currentVar);
  if (currentCombination.containsKey(currentVar.getVar().getVariable().getSimpleName())) {
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,currentCombination,allCombinations);
  }
  for (  CtVariable varFromMap : mapped) {
    Map<String,CtVariable> newCombination=new TreeMap<>(currentCombination);
    newCombination.put(currentVar.getVar().getVariable().getSimpleName(),varFromMap);
    findAllVarMappingCombination(mappedVars,varsName,indexVar + 1,newCombination,allCombinations);
  }
}"
61522,"@Test public void testChart1Learning() throws Exception {
  ClassLoader classLoader=getClass().getClassLoader();
  File learningDir=new File(classLoader.getResource(""String_Node_Str"").getFile());
  File projectLocation=new File(""String_Node_Str"");
  AstorMain main1=new AstorMain();
  File dirLibs=new File(projectLocation.getAbsolutePath() + File.separator + ""String_Node_Str"");
  String dep=getDependencies(dirLibs);
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",projectLocation.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",learningDir.getAbsolutePath(),""String_Node_Str"",CtPackageIngredientScope.class.getCanonicalName(),""String_Node_Str"",CtExecutable.class.getCanonicalName(),""String_Node_Str"",CloneIngredientSearchStrategy.class.getCanonicalName(),""String_Node_Str"",""String_Node_Str"",Level.DEBUG.toString()};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() > 0);
}","@Test public void testChart1Learning() throws Exception {
  ClassLoader classLoader=getClass().getClassLoader();
  File learningDir=new File(classLoader.getResource(""String_Node_Str"").getFile());
  File projectLocation=new File(""String_Node_Str"");
  AstorMain main1=new AstorMain();
  File dirLibs=new File(projectLocation.getAbsolutePath() + File.separator + ""String_Node_Str"");
  String dep=getDependencies(dirLibs);
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",projectLocation.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",learningDir.getAbsolutePath(),""String_Node_Str"",CtPackageIngredientScope.class.getCanonicalName(),""String_Node_Str"",CtExecutable.class.getCanonicalName(),""String_Node_Str"",CloneIngredientSearchStrategy.class.getCanonicalName(),""String_Node_Str"",""String_Node_Str"",Level.INFO.toString(),""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() > 0);
}"
61523,"public void test1(){
  Class1[] sumxx=new Class1[]{};
}","public void test1(){
  Class1[] sumxx=new Class1[]{};
  System.out.println(sumxx);
}"
61524,"/** 
 */
public static VarMapping mapVariables(List<CtVariable> varContext,CtElement ingredientCtElement){
  Map<VarAccessWrapper,List<CtVariable>> varMaps=new HashMap<>();
  List<CtVariableAccess> notMappedVariables=new ArrayList<>();
  ClassLoader classLoader=VariableResolver.class.getClassLoader();
  Map<String,List<String>> clusters=cluster.readClusterFile(Paths.get(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")));
  List<CtVariableAccess> variablesOutOfScope=retriveVariablesOutOfContext(varContext,ingredientCtElement);
  logger.debug(""String_Node_Str"" + variablesOutOfScope);
  for (  CtVariableAccess wOut : variablesOutOfScope) {
    List<String> wcluster=clusters.get(wOut.getVariable().getSimpleName());
    if (wcluster == null) {
      logger.debug(""String_Node_Str"" + wOut);
      continue;
    }
    logger.debug(""String_Node_Str"" + wOut + ""String_Node_Str""+ wcluster);
    boolean mapped=false;
    VarAccessWrapper varOutWrapper=new VarAccessWrapper(wOut);
    for (    String wordFromCluster : wcluster) {
      List<CtVariable> varExist=existVariableWithName(varContext,wordFromCluster);
      for (      CtVariable varFromCluster : varExist) {
        CtTypeReference typeref_i=varFromCluster.getType();
        try {
          if (typeref_i.isSubtypeOf(wOut.getType())) {
            List<CtVariable> vars=varMaps.get(varOutWrapper);
            if (vars == null) {
              vars=new ArrayList<>();
              varMaps.put(varOutWrapper,vars);
            }
            vars.add(varFromCluster);
            mapped=true;
          }
        }
 catch (        Exception e) {
          logger.error(e);
        }
      }
    }
    if (!mapped)     notMappedVariables.add(wOut);
  }
  VarMapping mappings=new VarMapping(varMaps,notMappedVariables);
  return mappings;
}","/** 
 */
public static VarMapping mapVariables(List<CtVariable> varContext,CtElement ingredientCtElement){
  Map<VarAccessWrapper,List<CtVariable>> varMaps=new HashMap<>();
  List<CtVariableAccess> notMappedVariables=new ArrayList<>();
  ClassLoader classLoader=VariableResolver.class.getClassLoader();
  Map<String,List<String>> clusters=cluster.readClusterFile(Paths.get(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ConfigurationProperties.getProperty(""String_Node_Str"")));
  List<CtVariableAccess> variablesOutOfScope=retriveVariablesOutOfContext(varContext,ingredientCtElement);
  logger.debug(""String_Node_Str"" + variablesOutOfScope);
  for (  CtVariableAccess wOut : variablesOutOfScope) {
    List<String> wcluster=clusters.get(wOut.getVariable().getSimpleName());
    if (wcluster == null) {
      logger.debug(""String_Node_Str"" + wOut);
      continue;
    }
    logger.debug(""String_Node_Str"" + wOut + ""String_Node_Str""+ wcluster);
    boolean mapped=false;
    VarAccessWrapper varOutWrapper=new VarAccessWrapper(wOut);
    for (    String wordFromCluster : wcluster) {
      List<CtVariable> varExist=existVariableWithName(varContext,wordFromCluster);
      for (      CtVariable varFromCluster : varExist) {
        try {
          CtTypeReference refCluster=varFromCluster.getType();
          CtTypeReference refOut=wOut.getType();
          boolean bothArray=false;
          boolean notCompatible=false;
          do {
            boolean clusterIsArray=refCluster instanceof CtArrayTypeReference;
            boolean ourIsArray=refOut instanceof CtArrayTypeReference;
            if (clusterIsArray ^ ourIsArray) {
              notCompatible=true;
              break;
            }
            bothArray=clusterIsArray && ourIsArray;
            if (bothArray) {
              refCluster=((CtArrayTypeReference)refCluster).getComponentType();
              refOut=((CtArrayTypeReference)refOut).getComponentType();
            }
          }
 while (bothArray);
          if (notCompatible)           continue;
          if (refCluster.isSubtypeOf(refOut)) {
            List<CtVariable> vars=varMaps.get(varOutWrapper);
            if (vars == null) {
              vars=new ArrayList<>();
              varMaps.put(varOutWrapper,vars);
            }
            vars.add(varFromCluster);
            mapped=true;
          }
        }
 catch (        Exception e) {
          logger.error(e);
        }
      }
    }
    if (!mapped)     notMappedVariables.add(wOut);
  }
  VarMapping mappings=new VarMapping(varMaps,notMappedVariables);
  return mappings;
}"
61525,"@Test public void testBugNPE(){
  File projectLocation=new File(""String_Node_Str"");
  AstorMain main1=new AstorMain();
  Launcher launcher=new Launcher();
  launcher.addInputResource(""String_Node_Str"");
  Factory factory=launcher.createFactory();
  factory.getEnvironment().setComplianceLevel(6);
  SpoonCompiler compiler=launcher.createCompiler(factory);
  compiler.setSourceClasspath(dep.split(File.pathSeparator));
  compiler.addInputSource(new File(projectLocation.getAbsolutePath()));
  compiler.build();
  List<CtType<?>> types=factory.Type().getAll();
  assertTrue(types.size() > 0);
  log.info(types.get(0).toString());
  CtType<?> type1=types.stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtType<?> type2=types.stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  System.out.println(type1);
  System.out.println(type2);
  CtMethod mt=type2.getAllMethods().stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  System.out.println(mt);
  CtStatement st=mt.getBody().getStatement(0);
  List<CtVariable> vars1=st.getElements(new VarFilter());
  System.out.println(vars1);
  CtMethod mt2=type2.getAllMethods().stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtStatement st2=mt2.getBody().getStatement(1);
  ClassLoader classLoader=getClass().getClassLoader();
  File learningDir=new File(classLoader.getResource(""String_Node_Str"").getFile());
  ConfigurationProperties.setProperty(""String_Node_Str"",learningDir.getAbsolutePath());
  VarMapping vm=VariableResolver.mapVariables(vars1,st2);
  System.out.println(""String_Node_Str"" + vm.getMappedVariables());
}","@Test public void testBugNPE(){
  File projectLocation=new File(""String_Node_Str"");
  Launcher launcher=new Launcher();
  launcher.addInputResource(""String_Node_Str"");
  Factory factory=launcher.createFactory();
  factory.getEnvironment().setComplianceLevel(6);
  SpoonCompiler compiler=launcher.createCompiler(factory);
  compiler.setSourceClasspath(dep.split(File.pathSeparator));
  compiler.addInputSource(new File(projectLocation.getAbsolutePath()));
  compiler.build();
  ClassLoader classLoader=getClass().getClassLoader();
  File learningDir=new File(classLoader.getResource(""String_Node_Str"").getFile());
  ConfigurationProperties.setProperty(""String_Node_Str"",learningDir.getAbsolutePath());
  List<CtType<?>> types=factory.Type().getAll();
  assertTrue(types.size() > 0);
  CtType<?> type1=types.stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtType<?> type2=types.stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtMethod mt1=type2.getAllMethods().stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtStatement st=mt1.getBody().getStatement(0);
  List<CtVariable> varsContext=st.getElements(new VarFilter());
  CtMethod mt2=type2.getAllMethods().stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  CtStatement st2=mt2.getBody().getStatement(1);
  System.out.println(""String_Node_Str"" + varsContext + ""String_Node_Str""+ st2);
  VarMapping vm=VariableResolver.mapVariables(varsContext,st2);
  assertTrue(vm.getMappedVariables().isEmpty());
  System.out.println(""String_Node_Str"" + vm.getMappedVariables());
  System.out.println(""String_Node_Str"");
  CtMethod mt3=type2.getAllMethods().stream().filter(x -> x.getSimpleName().equals(""String_Node_Str"")).findFirst().get();
  System.out.println(mt3);
  CtStatement ingredient=mt3.getBody().getStatement(0);
  System.out.println(""String_Node_Str"" + varsContext + ""String_Node_Str""+ ingredient);
  VarMapping vm3=VariableResolver.mapVariables(varsContext,ingredient);
  System.out.println(""String_Node_Str"" + vm3.getMappedVariables());
  assertTrue(vm3.getMappedVariables().isEmpty());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + varsContext + ""String_Node_Str""+ mt3.getBody().getStatement(0));
  ingredient=mt1.getBody().getStatement(0);
  VarMapping vm4=VariableResolver.mapVariables(varsContext,ingredient);
  System.out.println(""String_Node_Str"" + vm4.getMappedVariables());
  assertTrue(vm4.getMappedVariables().isEmpty());
  System.out.println(""String_Node_Str"");
  List<CtVariable> varsContext2=mt3.getBody().getStatement(1).getElements(new VarFilter());
  System.out.println(varsContext2);
  ingredient=mt1.getBody().getStatement(1);
  System.out.println(""String_Node_Str"" + varsContext2 + ""String_Node_Str""+ ingredient);
  VarMapping vm5=VariableResolver.mapVariables(varsContext2,ingredient);
  System.out.println(""String_Node_Str"" + vm5.getMappedVariables());
  assertTrue(vm5.getMappedVariables().size() > 0);
}"
61526,"/** 
 * In this case the fitness value is associate to the failures: LESS FITNESS is better.
 */
public double calculateFitnessValue(ProgramVariant variant){
  TestCaseVariantValidationResult result=(TestCaseVariantValidationResult)variant.getValidationResult();
  return result.getFailureCount();
}","/** 
 * In this case the fitness value is associate to the failures: LESS FITNESS is better.
 */
public double calculateFitnessValue(ProgramVariant variant){
  if (variant.getValidationResult() == null)   return this.getWorstMaxFitnessValue();
  TestCaseVariantValidationResult result=(TestCaseVariantValidationResult)variant.getValidationResult();
  return result.getFailureCount();
}"
61527,"public static void updateRegressionTestCases(ProjectRepairFacade projectConfig){
  List<String> original=projectConfig.getProperties().getRegressionTestCases();
  List<String> refined=refineListofRegressionTestCases(original);
  projectConfig.getProperties().setRegressionCases(refined);
  log.debug(""String_Node_Str"" + original.size() + ""String_Node_Str""+ refined.size());
}","public static void updateRegressionTestCases(ProjectRepairFacade projectConfig){
  List<String> original=projectConfig.getProperties().getRegressionTestCases();
  List<String> refined=refineListofRegressionTestCases(original);
  if (!refined.isEmpty())   projectConfig.getProperties().setRegressionCases(refined);
  log.debug(""String_Node_Str"" + original.size() + ""String_Node_Str""+ refined.size());
}"
61528,"private static List<String> retriveIgnoreTestCases(){
  String list=ConfigurationProperties.getProperty(""String_Node_Str"");
  String[] cases=list.split(File.pathSeparator);
  return Arrays.asList(cases);
}","private static List<String> retriveIgnoreTestCases(){
  String list=ConfigurationProperties.getProperty(""String_Node_Str"");
  log.debug(""String_Node_Str"" + list);
  String[] cases=list.split(File.pathSeparator);
  return Arrays.asList(cases);
}"
61529,"public void setDependencies(List<URL> dependencies){
  this.internalProperties.put(ProjectPropertiesEnum.dependencies,dependencies);
}","public void setDependencies(String libPath){
  String[] s=libPath.split(File.pathSeparator);
  for (  String pathcomp : s) {
    this.addLocationToClasspath(pathcomp);
  }
}"
61530,"public boolean processArguments(String[] args) throws Exception {
  log.info(""String_Node_Str"" + Arrays.toString(args).replace(""String_Node_Str"",""String_Node_Str""));
  ConfigurationProperties.clear();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  UnrecognizedOptionException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    help();
    return false;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    help();
    return false;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  }
 else {
    String javahome=System.getProperty(""String_Node_Str"");
    File location=new File(javahome);
    if (location.getName().equals(""String_Node_Str"")) {
      javahome=location.getParent() + File.separator + ""String_Node_Str"";
      File javalocationbin=new File(javahome);
      if (!javalocationbin.exists()) {
        System.err.println(""String_Node_Str"");
        return false;
      }
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",javahome);
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  }
 else {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",ConfigurationProperties.properties.getProperty(""String_Node_Str""));
  }
  if (!ProjectConfiguration.validJDK()) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (!this.isExample(cmd)) {
    String dependenciespath=cmd.getOptionValue(""String_Node_Str"");
    String failing=cmd.getOptionValue(""String_Node_Str"");
    String location=cmd.getOptionValue(""String_Node_Str"");
    if (failing == null || location == null) {
      help();
      return false;
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",dependenciespath);
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",failing);
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",location);
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  String outputPath=""String_Node_Str"";
  if (cmd.hasOption(""String_Node_Str"")) {
    outputPath=cmd.getOptionValue(""String_Node_Str"");
  }
 else {
    outputPath=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",(new File(outputPath)).getAbsolutePath());
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    try {
      double thfl=Double.valueOf(cmd.getOptionValue(""String_Node_Str""));
      ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      help();
      return false;
    }
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    String hour=cmd.getOptionValue(""String_Node_Str"");
    try {
      TimeUtil.tranformHours(hour);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",hour);
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",Boolean.toString(cmd.hasOption(""String_Node_Str"")));
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",Boolean.toString(!(cmd.hasOption(""String_Node_Str""))));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  RandomManager.initialize();
  return true;
}","public boolean processArguments(String[] args) throws Exception {
  log.info(""String_Node_Str"" + Arrays.toString(args).replace(""String_Node_Str"",""String_Node_Str""));
  ConfigurationProperties.clear();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  UnrecognizedOptionException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    help();
    return false;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    help();
    return false;
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  }
 else {
    String javahome=System.getProperty(""String_Node_Str"");
    File location=new File(javahome);
    if (location.getName().equals(""String_Node_Str"")) {
      javahome=location.getParent() + File.separator + ""String_Node_Str"";
      File javalocationbin=new File(javahome);
      if (!javalocationbin.exists()) {
        System.err.println(""String_Node_Str"");
        return false;
      }
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",javahome);
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  }
 else {
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",ConfigurationProperties.properties.getProperty(""String_Node_Str""));
  }
  if (!ProjectConfiguration.validJDK()) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  if (!this.isExample(cmd)) {
    String dependenciespath=cmd.getOptionValue(""String_Node_Str"");
    String failing=cmd.getOptionValue(""String_Node_Str"");
    String location=cmd.getOptionValue(""String_Node_Str"");
    if (failing == null || location == null) {
      help();
      return false;
    }
    if (dependenciespath != null) {
      ConfigurationProperties.properties.setProperty(""String_Node_Str"",dependenciespath);
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",failing);
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",location);
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  String outputPath=""String_Node_Str"";
  if (cmd.hasOption(""String_Node_Str"")) {
    outputPath=cmd.getOptionValue(""String_Node_Str"");
  }
 else {
    outputPath=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",(new File(outputPath)).getAbsolutePath());
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    try {
      double thfl=Double.valueOf(cmd.getOptionValue(""String_Node_Str""));
      ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      help();
      return false;
    }
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str"")) {
    String hour=cmd.getOptionValue(""String_Node_Str"");
    try {
      TimeUtil.tranformHours(hour);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",hour);
  }
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",Boolean.toString(cmd.hasOption(""String_Node_Str"")));
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",Boolean.toString(!(cmd.hasOption(""String_Node_Str""))));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  if (cmd.hasOption(""String_Node_Str""))   ConfigurationProperties.properties.setProperty(""String_Node_Str"",cmd.getOptionValue(""String_Node_Str""));
  RandomManager.initialize();
  return true;
}"
61531,"protected ProjectRepairFacade getProject(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String key=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingDirForSource=ConfigurationProperties.getProperty(""String_Node_Str"") + key + ""String_Node_Str"";
  String workingDirForBytecode=ConfigurationProperties.getProperty(""String_Node_Str"") + key + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  String libdir=dependencies;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setOriginalAppBinDir(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setOriginalTestBinDir(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  List<String> src=determineMavenFolders(srcWithMain,originalProjectRoot);
  properties.setOriginalDirSrc(src);
  properties.setLibPath(libdir);
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}","protected ProjectRepairFacade getProject(String location,String projectIdentifier,String method,List<String> failingTestCases,String dependencies,boolean srcWithMain) throws Exception {
  if (projectIdentifier == null || projectIdentifier.equals(""String_Node_Str"")) {
    File locFile=new File(location);
    projectIdentifier=locFile.getName();
  }
  String key=File.separator + method + ""String_Node_Str""+ projectIdentifier+ File.separator;
  String workingDirForSource=ConfigurationProperties.getProperty(""String_Node_Str"") + key + ""String_Node_Str"";
  String workingDirForBytecode=ConfigurationProperties.getProperty(""String_Node_Str"") + key + ""String_Node_Str"";
  String originalProjectRoot=location + File.separator;
  ProjectConfiguration properties=new ProjectConfiguration();
  properties.setWorkingDirForSource(workingDirForSource);
  properties.setWorkingDirForBytecode(workingDirForBytecode);
  properties.setOriginalAppBinDir(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setOriginalTestBinDir(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setFixid(projectIdentifier);
  properties.setOriginalProjectRootDir(originalProjectRoot);
  List<String> src=determineMavenFolders(srcWithMain,originalProjectRoot);
  properties.setOriginalDirSrc(src);
  if (dependencies != null) {
    properties.setDependencies(dependencies);
  }
  properties.setFailingTestCases(failingTestCases);
  properties.setPackageToInstrument(ConfigurationProperties.getProperty(""String_Node_Str""));
  properties.setDataFolder(ConfigurationProperties.getProperty(""String_Node_Str""));
  ProjectRepairFacade ce=new ProjectRepairFacade(properties);
  return ce;
}"
61532,"/** 
 * Generates and runs evosuite test cases 
 */
public ProgramVariantValidationResult runTestFromEvoSuite(ProgramVariant currentVariant,ProjectRepairFacade projectFacade,boolean runOverOriginal) throws Exception {
  log.info(""String_Node_Str"" + currentVariant.currentMutatorIdentifier());
  log.debug(""String_Node_Str"" + ((runOverOriginal) ? ""String_Node_Str"" : ""String_Node_Str""));
  String sufix=(runOverOriginal) ? ""String_Node_Str"" : (""String_Node_Str"" + currentVariant.getId());
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String testEScodepath=projectFacade.getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + sufix);
  File esPath=new File(testEScodepath);
  log.info(""String_Node_Str"" + esPath);
  String classpathForCompile=""String_Node_Str"";
  classpathForCompile=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(currentVariant.currentMutatorIdentifier())+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(currentVariant.DEFAULT_ORIGINAL_VARIANT);
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + sufix);
  List<String> classesToGenerateTests=new ArrayList<String>();
  List<String> testToExecute=new ArrayList<String>();
  List<CtType<?>> typesToProcess=fev.getClassesToProcess(currentVariant);
  for (  CtType<?> ctType : typesToProcess) {
    String stype=ctType.getQualifiedName();
    String testName=stype + EvoSuiteFacade.EVOSUITE_SUFFIX;
    if (!runOverOriginal || !testAlreadyGenerated.contains(testName)) {
      classesToGenerateTests.add(stype);
    }
    testToExecute.add(testName);
  }
  log.debug(""String_Node_Str"" + classesToGenerateTests);
  if (classesToGenerateTests.size() > 0) {
    List<String> pathTestGenerated=new ArrayList<String>();
    log.debug(""String_Node_Str"");
    boolean executed=fev.runEvosuite(currentVariant,classesToGenerateTests,projectFacade,testEScodepath,runOverOriginal);
    Collection<File> files=FileUtils.listFiles(esPath,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
    for (    File file : files) {
      pathTestGenerated.add(file.getAbsolutePath());
    }
    List<String> testGenerated=new ArrayList<>();
    for (    String f : pathTestGenerated) {
      String qualifiedTestName=f.replace(""String_Node_Str"",""String_Node_Str"").replace(esPath.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(File.separator,""String_Node_Str"");
      if (!qualifiedTestName.endsWith(EvoSuiteFacade.EVOSUITE_scaffolding_SUFFIX) && classesToGenerateTests.contains(qualifiedTestName.replace(EvoSuiteFacade.EVOSUITE_SUFFIX,""String_Node_Str""))) {
        testGenerated.add(qualifiedTestName);
      }
    }
    if (classesToGenerateTests.size() != testGenerated.size()) {
      log.error(""String_Node_Str"" + testGenerated + ""String_Node_Str""+ classesToGenerateTests);
    }
    log.debug(""String_Node_Str"" + testGenerated);
    testAlreadyGenerated.addAll(testGenerated);
    log.info(""String_Node_Str"" + classpathForCompile);
    String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    List<String> command=new ArrayList<String>();
    command.add(javaPath + File.separator + ""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpathForCompile);
    command.add(""String_Node_Str"");
    File fout=new File(outPutTest);
    fout.mkdirs();
    command.add(outPutTest);
    for (    String testPath : pathTestGenerated) {
      command.add(testPath);
    }
    fev.runProcess(command.toArray(new String[command.size()]));
  }
 else {
    log.debug(""String_Node_Str"" + testAlreadyGenerated);
  }
  String classpathForRunTest=classpathForCompile + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}","/** 
 * Generates and runs evosuite test cases 
 */
public ProgramVariantValidationResult runTestFromEvoSuite(ProgramVariant currentVariant,ProjectRepairFacade projectFacade,boolean runOverOriginal) throws Exception {
  log.info(""String_Node_Str"" + currentVariant.currentMutatorIdentifier());
  log.debug(""String_Node_Str"" + ((runOverOriginal) ? ""String_Node_Str"" : ""String_Node_Str""));
  String sufix=(runOverOriginal) ? ""String_Node_Str"" : (""String_Node_Str"" + currentVariant.getId());
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String testEScodepath=projectFacade.getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + sufix);
  File esPath=new File(testEScodepath);
  log.info(""String_Node_Str"" + esPath);
  String classpathForCompile=""String_Node_Str"";
  classpathForCompile=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(currentVariant.currentMutatorIdentifier())+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(currentVariant.DEFAULT_ORIGINAL_VARIANT);
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + sufix);
  List<String> classesToGenerateTests=new ArrayList<String>();
  List<String> testToExecute=new ArrayList<String>();
  List<CtType<?>> typesToProcess=fev.getClassesToProcess(currentVariant);
  for (  CtType<?> ctType : typesToProcess) {
    String stype=ctType.getQualifiedName();
    String testName=stype + EvoSuiteFacade.EVOSUITE_SUFFIX;
    if (!runOverOriginal || !testAlreadyGenerated.contains(testName)) {
      classesToGenerateTests.add(stype);
    }
    testToExecute.add(testName);
  }
  log.debug(""String_Node_Str"" + classesToGenerateTests);
  if (classesToGenerateTests.size() > 0) {
    List<String> pathTestGenerated=new ArrayList<String>();
    log.debug(""String_Node_Str"");
    boolean executed=fev.runEvosuite(currentVariant,classesToGenerateTests,projectFacade,testEScodepath,runOverOriginal);
    Collection<File> files=FileUtils.listFiles(esPath,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
    for (    File file : files) {
      pathTestGenerated.add(file.getAbsolutePath());
    }
    List<String> testGenerated=new ArrayList<>();
    for (    String f : pathTestGenerated) {
      String qualifiedTestName=f.replace(""String_Node_Str"",""String_Node_Str"").replace(esPath.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(File.separator,""String_Node_Str"");
      if (!qualifiedTestName.endsWith(EvoSuiteFacade.EVOSUITE_scaffolding_SUFFIX) && classesToGenerateTests.contains(qualifiedTestName.replace(EvoSuiteFacade.EVOSUITE_SUFFIX,""String_Node_Str""))) {
        testGenerated.add(qualifiedTestName);
      }
    }
    if (classesToGenerateTests.size() != testGenerated.size()) {
      log.error(""String_Node_Str"" + testGenerated + ""String_Node_Str""+ classesToGenerateTests);
    }
    log.debug(""String_Node_Str"" + testGenerated);
    testAlreadyGenerated.addAll(testGenerated);
    log.info(""String_Node_Str"" + classpathForCompile);
    String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    List<String> command=new ArrayList<String>();
    command.add(javaPath + File.separator + ""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpathForCompile);
    command.add(""String_Node_Str"");
    File fout=new File(outPutTest);
    fout.mkdirs();
    command.add(outPutTest);
    for (    String testPath : pathTestGenerated) {
      command.add(testPath);
    }
    fev.runProcess(command.toArray(new String[command.size()]));
  }
 else {
    log.debug(""String_Node_Str"" + testAlreadyGenerated);
  }
  String classpathForRunTest=classpathForCompile + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}"
61533,"public ProgramVariantValidationResult saveAndExecuteEvoSuite(ProjectRepairFacade projectFacade,ProgramVariant variant,List<CtClass> ctclasses) throws Exception {
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(variant.currentMutatorIdentifier())+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(variant.DEFAULT_ORIGINAL_VARIANT);
  logger.info(""String_Node_Str"" + classpathForCompileSpoon);
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(ctclasses,Converters.toURLArray(classpathForCreateModel));
  if (!compilation.compiles() || compilation.getByteCodes().values().isEmpty()) {
    logger.error(""String_Node_Str"");
    return null;
  }
  logger.debug(""String_Node_Str"" + compilation.compiles());
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  logger.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : ctclasses) {
    if (!evoTest.getQualifiedName().endsWith(EVOSUITE_scaffolding_SUFFIX))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  logger.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}","public ProgramVariantValidationResult saveAndExecuteEvoSuite(ProjectRepairFacade projectFacade,ProgramVariant variant,List<CtClass> ctclasses) throws Exception {
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(variant.currentMutatorIdentifier())+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(variant.DEFAULT_ORIGINAL_VARIANT);
  logger.info(""String_Node_Str"" + classpathForCompileSpoon);
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(ctclasses,Converters.toURLArray(classpathForCreateModel));
  if (!compilation.compiles() || compilation.getByteCodes().values().isEmpty()) {
    logger.error(""String_Node_Str"");
    return null;
  }
  logger.debug(""String_Node_Str"" + compilation.compiles());
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  logger.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : ctclasses) {
    if (!evoTest.getQualifiedName().endsWith(EVOSUITE_scaffolding_SUFFIX))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  logger.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}"
61534,"/** 
 * We take the output of evosuite, we generate the spoon model, then we compile it, and finally we run the tests.
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testCompileSaveAndRunEvoSuiteTestStepByStep() throws Exception {
  MutationSupporter.currentSupporter=new MutationSupporter();
  String classpath4BuildModel=new File(""String_Node_Str"").getAbsolutePath() + File.pathSeparator + new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath();
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.reificateEvoSuiteTest(new File(""String_Node_Str"").getAbsolutePath(),classpath4BuildModel.split(File.pathSeparator));
  assertEquals(""String_Node_Str"",2,classes.size());
  String classpathForCompileModel=new File(""String_Node_Str"").getAbsolutePath() + File.pathSeparator + new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath();
  log.info(""String_Node_Str"" + classpathForCompileModel);
  String[] classpathForEvoSuiteTest2=classpathForCompileModel.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(classes,Converters.toURLArray(classpathForEvoSuiteTest2));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  assertEquals(""String_Node_Str"",2,compilation.getByteCodes().values().size());
  String outPutTest=new File(ConfigurationProperties.getProperty(""String_Node_Str"") + ""String_Node_Str"").getAbsolutePath();
  File fbyteEvo=new File(outPutTest);
  if (fbyteEvo.exists()) {
    FileUtils.deleteDirectory(fbyteEvo);
  }
  boolean created=fbyteEvo.mkdirs();
  assertTrue(created);
  assertTrue(fbyteEvo.exists());
  assertEquals(0,fbyteEvo.list().length);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  String classpathForRunTest=classpathForCompileModel + (File.pathSeparator) + outPutTest;
  URL[] classpath4Process=Converters.toURLArray(classpathForRunTest.split(File.pathSeparator));
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(classpath4Process,testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.wasSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}","/** 
 * We take the output of evosuite, we generate the spoon model, then we compile it, and finally we run the tests.
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testCompileSaveAndRunEvoSuiteTestStepByStep() throws Exception {
  MutationSupporter.currentSupporter=new MutationSupporter();
  String classpath4BuildModel=new File(""String_Node_Str"").getAbsolutePath() + File.pathSeparator + new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath();
  EvoSuiteFacade fev=new EvoSuiteFacade();
  List<CtClass> classes=fev.reificateEvoSuiteTest(new File(""String_Node_Str"").getAbsolutePath(),classpath4BuildModel.split(File.pathSeparator));
  assertEquals(""String_Node_Str"",2,classes.size());
  String classpathForCompileModel=new File(""String_Node_Str"").getAbsolutePath() + File.pathSeparator + new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath();
  log.info(""String_Node_Str"" + classpathForCompileModel);
  String[] classpathForEvoSuiteTest2=classpathForCompileModel.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(classes,Converters.toURLArray(classpathForEvoSuiteTest2));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  assertEquals(""String_Node_Str"",2,compilation.getByteCodes().values().size());
  String outPutTest=new File(ConfigurationProperties.getProperty(""String_Node_Str"") + ""String_Node_Str"").getAbsolutePath();
  File fbyteEvo=new File(outPutTest);
  if (fbyteEvo.exists()) {
    FileUtils.deleteDirectory(fbyteEvo);
  }
  boolean created=fbyteEvo.mkdirs();
  assertTrue(created);
  assertTrue(fbyteEvo.exists());
  assertEquals(0,fbyteEvo.list().length);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  String classpathForRunTest=classpathForCompileModel + (File.pathSeparator) + outPutTest;
  URL[] classpath4Process=Converters.toURLArray(classpathForRunTest.split(File.pathSeparator));
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(classpath4Process,testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.wasSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}"
61535,"@SuppressWarnings(""String_Node_Str"") @Test public void testGenerateEvosuiteTestsStepByStep() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String outES=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  List<String> affectedTypes=variant.getAffectedClasses().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  boolean executed=fev.runEvosuite(variant,affectedTypes,main1.getEngine().getProjectFacade(),outES,true);
  assertTrue(executed);
  String testEScodepath=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  File esPath=new File(testEScodepath);
  assertTrue(""String_Node_Str"",esPath.exists());
  log.info(""String_Node_Str"" + esPath);
  log.info(""String_Node_Str"");
  String bytecodeSUTLocation=main1.getEngine().getProjectFacade().getOutDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpathForModelizeEvoSuite=""String_Node_Str"";
  classpathForModelizeEvoSuite+=(new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath());
  classpathForModelizeEvoSuite+=(File.pathSeparator + main1.getEngine().getProjectFacade().getProperties().getDependenciesString());
  classpathForModelizeEvoSuite+=(File.pathSeparator + bytecodeSUTLocation);
  String[] classpathForModelizeEvoSuiteTest=classpathForModelizeEvoSuite.split(File.pathSeparator);
  List<CtClass> classes=fev.reificateEvoSuiteTest(testEScodepath,classpathForModelizeEvoSuiteTest);
  classes.stream().forEach(e -> log.info(""String_Node_Str"" + e.getQualifiedName()));
  assertTrue(""String_Node_Str"",classes.size() >= 2);
  assertFalse(main1.getEngine().getMutatorSupporter().getTestClasses().contains(classes.get(0)));
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=main1.getEngine().getProjectFacade().getProperties().getDependenciesString() + File.pathSeparator + bytecodeSUTLocation+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath();
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(classes,Converters.toURLArray(classpathForCreateModel));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  String outPutTest=main1.getEngine().getProjectFacade().getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  log.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.wasSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testGenerateEvosuiteTestsStepByStep() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertTrue(main1.getEngine().getSolutions().size() == 0);
  assertEquals(1,main1.getEngine().getVariants().size());
  ProgramVariant variant=main1.getEngine().getVariants().get(0);
  log.info(""String_Node_Str"");
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String outES=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  List<String> affectedTypes=variant.getAffectedClasses().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  boolean executed=fev.runEvosuite(variant,affectedTypes,main1.getEngine().getProjectFacade(),outES,true);
  assertTrue(executed);
  String testEScodepath=main1.getEngine().getProjectFacade().getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str""));
  File esPath=new File(testEScodepath);
  assertTrue(""String_Node_Str"",esPath.exists());
  log.info(""String_Node_Str"" + esPath);
  log.info(""String_Node_Str"");
  String bytecodeSUTLocation=main1.getEngine().getProjectFacade().getOutDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpathForModelizeEvoSuite=""String_Node_Str"";
  classpathForModelizeEvoSuite+=(new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath());
  classpathForModelizeEvoSuite+=(File.pathSeparator + main1.getEngine().getProjectFacade().getProperties().getDependenciesString());
  classpathForModelizeEvoSuite+=(File.pathSeparator + bytecodeSUTLocation);
  String[] classpathForModelizeEvoSuiteTest=classpathForModelizeEvoSuite.split(File.pathSeparator);
  List<CtClass> classes=fev.reificateEvoSuiteTest(testEScodepath,classpathForModelizeEvoSuiteTest);
  classes.stream().forEach(e -> log.info(""String_Node_Str"" + e.getQualifiedName()));
  assertTrue(""String_Node_Str"",classes.size() >= 2);
  assertFalse(main1.getEngine().getMutatorSupporter().getTestClasses().contains(classes.get(0)));
  String classpathForCompileSpoon=""String_Node_Str"";
  classpathForCompileSpoon=main1.getEngine().getProjectFacade().getProperties().getDependenciesString() + File.pathSeparator + bytecodeSUTLocation+ File.pathSeparator+ new File(ConfigurationProperties.getProperty(""String_Node_Str"")).getAbsolutePath();
  String[] classpathForCreateModel=classpathForCompileSpoon.split(File.pathSeparator);
  CompilationResult compilation=MutationSupporter.currentSupporter.getSpoonClassCompiler().compileOnMemory(classes,Converters.toURLArray(classpathForCreateModel));
  assertFalse(""String_Node_Str"",compilation.getByteCodes().values().isEmpty());
  String outPutTest=main1.getEngine().getProjectFacade().getOutDirWithPrefix(""String_Node_Str"" + variant.currentMutatorIdentifier());
  File fbyteEvo=new File(outPutTest);
  log.info(""String_Node_Str"" + fbyteEvo);
  MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(compilation,fbyteEvo);
  assertTrue(fbyteEvo.exists());
  assertTrue(fbyteEvo.list().length > 0);
  List<String> testToExecute=new ArrayList<>();
  for (  CtClass evoTest : classes) {
    if (!evoTest.getQualifiedName().endsWith(""String_Node_Str""))     testToExecute.add(evoTest.getQualifiedName());
  }
  String classpathForRunTest=classpathForCompileSpoon + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  assertNotNull(""String_Node_Str"",evoResult);
  assertEquals(""String_Node_Str"",evoResult.getFailureCount(),0);
  assertTrue(""String_Node_Str"",evoResult.wasSuccessful());
  assertTrue(""String_Node_Str"",evoResult.getPassingTestCases() > 0);
}"
61536,"/** 
 * Creation of fix space from a CtClass
 * @param root
 */
public void determineScopeOfIngredient(List<CtCodeElement> ingredients){
  for (  CtCodeElement ctCodeElement : ingredients) {
    String key=mapKey(ctCodeElement);
    if (getFixSpace().containsKey(key)) {
      getFixSpace().get(key).add(ctCodeElement);
    }
 else {
      List<CtCodeElement> ingr=new ArrayList<CtCodeElement>();
      ingr.add(ctCodeElement);
      getFixSpace().put(key,ingr);
    }
  }
  recreateTypesStructures();
}","/** 
 * Creation of fix space from a list of ctelements.
 */
public void determineScopeOfIngredient(List<CtCodeElement> ingredients){
  for (  CtCodeElement ctCodeElement : ingredients) {
    String key=mapKey(ctCodeElement);
    List<CtCodeElement> ingredientsKey=getFixSpace().get(key);
    if (!getFixSpace().containsKey(key)) {
      ingredientsKey=new ArrayList<CtCodeElement>();
      getFixSpace().put(key,ingredientsKey);
    }
    if (!discartDuplicates || !ingredientsKey.contains(ctCodeElement)) {
      ingredientsKey.add(ctCodeElement);
    }
  }
  recreateTypesStructures();
}"
61537,"@Override public boolean wasSuccessful(){
  return (getValidation(""String_Node_Str"") == null || getValidation(""String_Node_Str"").wasSuccessful()) && (getValidation(""String_Node_Str"") == null || getValidation(""String_Node_Str"").wasSuccessful());
}","@Override public boolean wasSuccessful(){
  return (getValidation(""String_Node_Str"") == null || getValidation(""String_Node_Str"").wasSuccessful());
}"
61538,"public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  line+=""String_Node_Str"";
  for (  ProgramVariant solutionVariant : variants) {
    line+=""String_Node_Str"";
    line+=""String_Node_Str"" + solutionVariant.getId() + ""String_Node_Str"";
    line+=""String_Node_Str"" + TimeUtil.getDateDiff(this.dateInitEvolution,solutionVariant.getBornDate(),TimeUnit.SECONDS);
    for (int i=1; i <= generation; i++) {
      List<OperatorInstance> genOperationInstances=solutionVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      OperatorInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + genOperationInstance.getOperationApplied().toString() + ""String_Node_Str""+ genOperationInstance.getModificationPoint().getCtClass().getQualifiedName();
        if (genOperationInstance.getModificationPoint() instanceof SuspiciousModificationPoint) {
          SuspiciousModificationPoint gs=(SuspiciousModificationPoint)genOperationInstance.getModificationPoint();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
          line+=""String_Node_Str"" + gs.getSuspicious().getSuspiciousValueString();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"";
        if (genOperationInstance.getModified() != null)         line+=genOperationInstance.getModified().toString();
 else {
          line+=genOperationInstance.getOriginal().toString();
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"" + ((genOperationInstance.getIngredientScope() != null) ? genOperationInstance.getIngredientScope() : ""String_Node_Str"");
      }
    }
    line+=""String_Node_Str"" + solutionVariant.getValidationResult().toString();
  }
  return line;
}","public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  line+=""String_Node_Str"";
  for (  ProgramVariant solutionVariant : variants) {
    line+=""String_Node_Str"";
    line+=""String_Node_Str"" + solutionVariant.getId() + ""String_Node_Str"";
    line+=""String_Node_Str"" + TimeUtil.getDateDiff(this.dateInitEvolution,solutionVariant.getBornDate(),TimeUnit.SECONDS);
    for (int i=1; i <= generation; i++) {
      List<OperatorInstance> genOperationInstances=solutionVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      OperatorInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + genOperationInstance.getOperationApplied().toString() + ""String_Node_Str""+ genOperationInstance.getModificationPoint().getCtClass().getQualifiedName();
        if (genOperationInstance.getModificationPoint() instanceof SuspiciousModificationPoint) {
          SuspiciousModificationPoint gs=(SuspiciousModificationPoint)genOperationInstance.getModificationPoint();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
          line+=""String_Node_Str"" + gs.getSuspicious().getSuspiciousValueString();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"";
        if (genOperationInstance.getModified() != null)         if (genOperationInstance.getModified().toString() != genOperationInstance.getOriginal().toString())         line+=genOperationInstance.getModified().toString();
 else {
          line+=genOperationInstance.getOriginal().toString();
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"" + ((genOperationInstance.getIngredientScope() != null) ? genOperationInstance.getIngredientScope() : ""String_Node_Str"");
      }
    }
    line+=""String_Node_Str"" + solutionVariant.getValidationResult().toString();
  }
  return line;
}"
61539,"/** 
 * It adds to the ignore list all failing TC that were not passed as argument. \ They are probably flaky test.
 * @param failingTestCases
 */
private void addFlakyFailingTestToIgnoredList(List<String> failingTestCases){
  List<String> originalFailing=Arrays.asList(ConfigurationProperties.getProperty(""String_Node_Str"").split(File.pathSeparator));
  List<String> onlyFailingInFL=new ArrayList<>(failingTestCases);
  onlyFailingInFL.removeAll(originalFailing);
  logger.debug(""String_Node_Str"" + onlyFailingInFL + ""String_Node_Str"");
  String ignoredTestCases=ConfigurationProperties.getProperty(""String_Node_Str"");
  for (  String failingFL : onlyFailingInFL) {
    ignoredTestCases+=File.pathSeparator + failingFL;
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",ignoredTestCases);
}","/** 
 * It adds to the ignore list all failing TC that were not passed as argument. \ They are probably flaky test.
 * @param failingTestCases
 */
private void addFlakyFailingTestToIgnoredList(List<String> failingTestCases){
  if (ConfigurationProperties.getProperty(""String_Node_Str"") == null)   return;
  List<String> originalFailing=Arrays.asList(ConfigurationProperties.getProperty(""String_Node_Str"").split(File.pathSeparator));
  List<String> onlyFailingInFL=new ArrayList<>(failingTestCases);
  onlyFailingInFL.removeAll(originalFailing);
  logger.debug(""String_Node_Str"" + onlyFailingInFL + ""String_Node_Str"");
  String ignoredTestCases=ConfigurationProperties.getProperty(""String_Node_Str"");
  for (  String failingFL : onlyFailingInFL) {
    ignoredTestCases+=File.pathSeparator + failingFL;
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",ignoredTestCases);
}"
61540,"/** 
 * Generates and runs evosuite test cases 
 */
public ProgramVariantValidationResult runTestFromEvoSuite(ProgramVariant currentVariant,ProjectRepairFacade projectFacade,boolean runOverOriginal) throws Exception {
  log.info(""String_Node_Str"" + currentVariant.currentMutatorIdentifier());
  log.debug(""String_Node_Str"" + ((runOverOriginal) ? ""String_Node_Str"" : ""String_Node_Str""));
  String sufix=(runOverOriginal) ? ""String_Node_Str"" : (""String_Node_Str"" + currentVariant.getId());
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String testEScodepath=projectFacade.getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + sufix);
  File esPath=new File(testEScodepath);
  log.info(""String_Node_Str"" + esPath);
  String classpathForCompile=""String_Node_Str"";
  classpathForCompile=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(currentVariant.currentMutatorIdentifier())+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(currentVariant.DEFAULT_ORIGINAL_VARIANT);
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + sufix);
  List<String> testGeneratedToRun=new ArrayList<String>();
  if (!runOverOriginal || generatedTestCache.isEmpty()) {
    log.debug(""String_Node_Str"");
    boolean executed=fev.runEvosuite(currentVariant,projectFacade,testEScodepath,runOverOriginal);
    Collection<File> files=FileUtils.listFiles(esPath,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
    for (    File file : files) {
      testGeneratedToRun.add(file.getAbsolutePath());
    }
    log.info(""String_Node_Str"" + classpathForCompile);
    String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    List<String> command=new ArrayList<String>();
    command.add(javaPath + File.separator + ""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpathForCompile);
    command.add(""String_Node_Str"");
    File fout=new File(outPutTest);
    fout.mkdirs();
    command.add(outPutTest);
    for (    String testPath : testGeneratedToRun) {
      command.add(testPath);
    }
    fev.runProcess(command.toArray(new String[command.size()]));
    if (overOriginal) {
      generatedTestCache.addAll(testGeneratedToRun);
    }
  }
 else {
    log.debug(""String_Node_Str"" + generatedTestCache);
    testGeneratedToRun.addAll(generatedTestCache);
  }
  List<String> changed=currentVariant.computeAffectedClassesByOperatos().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  log.debug(""String_Node_Str"" + testGeneratedToRun);
  log.debug(""String_Node_Str"" + changed);
  List<String> testToExecute=new ArrayList<>();
  for (  String f : testGeneratedToRun) {
    String qualifiedTestName=f.replace(""String_Node_Str"",""String_Node_Str"").replace(esPath.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(File.separator,""String_Node_Str"");
    if (!qualifiedTestName.endsWith(EvoSuiteFacade.EVOSUITE_scaffolding_SUFFIX) && changed.contains(qualifiedTestName.replace(EvoSuiteFacade.EVOSUITE_SUFFIX,""String_Node_Str""))) {
      testToExecute.add(qualifiedTestName);
    }
  }
  String classpathForRunTest=classpathForCompile + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}","/** 
 * Generates and runs evosuite test cases 
 */
public ProgramVariantValidationResult runTestFromEvoSuite(ProgramVariant currentVariant,ProjectRepairFacade projectFacade,boolean runOverOriginal) throws Exception {
  log.info(""String_Node_Str"" + currentVariant.currentMutatorIdentifier());
  log.debug(""String_Node_Str"" + ((runOverOriginal) ? ""String_Node_Str"" : ""String_Node_Str""));
  String sufix=(runOverOriginal) ? ""String_Node_Str"" : (""String_Node_Str"" + currentVariant.getId());
  EvoSuiteFacade fev=new EvoSuiteFacade();
  String testEScodepath=projectFacade.getInDirWithPrefix(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + sufix);
  File esPath=new File(testEScodepath);
  log.info(""String_Node_Str"" + esPath);
  String classpathForCompile=""String_Node_Str"";
  classpathForCompile=projectFacade.getProperties().getDependenciesString() + File.pathSeparator + projectFacade.getOutDirWithPrefix(currentVariant.currentMutatorIdentifier())+ File.pathSeparator+ new File(""String_Node_Str"").getAbsolutePath()+ File.pathSeparator+ projectFacade.getOutDirWithPrefix(currentVariant.DEFAULT_ORIGINAL_VARIANT);
  String outPutTest=projectFacade.getOutDirWithPrefix(""String_Node_Str"" + sufix);
  List<String> testGeneratedToRun=new ArrayList<String>();
  if (!runOverOriginal || generatedTestCache.isEmpty()) {
    log.debug(""String_Node_Str"");
    boolean executed=fev.runEvosuite(currentVariant,projectFacade,testEScodepath,runOverOriginal);
    Collection<File> files=FileUtils.listFiles(esPath,new RegexFileFilter(""String_Node_Str""),DirectoryFileFilter.DIRECTORY);
    for (    File file : files) {
      testGeneratedToRun.add(file.getAbsolutePath());
    }
    log.info(""String_Node_Str"" + classpathForCompile);
    String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    List<String> command=new ArrayList<String>();
    command.add(javaPath + File.separator + ""String_Node_Str"");
    command.add(""String_Node_Str"");
    command.add(classpathForCompile);
    command.add(""String_Node_Str"");
    File fout=new File(outPutTest);
    fout.mkdirs();
    command.add(outPutTest);
    for (    String testPath : testGeneratedToRun) {
      command.add(testPath);
    }
    fev.runProcess(command.toArray(new String[command.size()]));
    if (runOverOriginal) {
      generatedTestCache.addAll(testGeneratedToRun);
    }
  }
 else {
    log.debug(""String_Node_Str"" + generatedTestCache);
    testGeneratedToRun.addAll(generatedTestCache);
  }
  List<String> changed=currentVariant.computeAffectedClassesByOperatos().stream().map(e -> e.getQualifiedName()).collect(Collectors.toList());
  log.debug(""String_Node_Str"" + testGeneratedToRun);
  log.debug(""String_Node_Str"" + changed);
  List<String> testToExecute=new ArrayList<>();
  for (  String f : testGeneratedToRun) {
    String qualifiedTestName=f.replace(""String_Node_Str"",""String_Node_Str"").replace(esPath.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(File.separator,""String_Node_Str"");
    if (!qualifiedTestName.endsWith(EvoSuiteFacade.EVOSUITE_scaffolding_SUFFIX) && changed.contains(qualifiedTestName.replace(EvoSuiteFacade.EVOSUITE_SUFFIX,""String_Node_Str""))) {
      testToExecute.add(qualifiedTestName);
    }
  }
  String classpathForRunTest=classpathForCompile + (File.pathSeparator) + outPutTest;
  log.info(""String_Node_Str"" + classpathForRunTest);
  ProcessEvoSuiteValidator evoProcess=new ProcessEvoSuiteValidator();
  ProgramVariantValidationResult evoResult=evoProcess.executeRegressionTesting(Converters.toURLArray(classpathForRunTest.split(File.pathSeparator)),testToExecute);
  return evoResult;
}"
61541,"/** 
 * Process-based validation Advantage: stability, memory consumption, CG activity Disadvantage: time.
 * @param currentVariant
 * @return
 */
@Override public ProgramVariantValidationResult validate(ProgramVariant currentVariant,ProjectRepairFacade projectFacade){
  try {
    ProcessValidator validator=new ProcessValidator();
    boolean executeAlloriginalValidation=true;
    ProgramVariantValidationResult resultOriginal=validator.validate(currentVariant,projectFacade,executeAlloriginalValidation);
    if (resultOriginal == null || !resultOriginal.wasSuccessful()) {
      return resultOriginal;
    }
    ProgramVariantValidationResult resultEvoExecution=runTestFromEvoSuite(currentVariant,projectFacade,this.isOverOriginal());
    log.info(""String_Node_Str"" + resultEvoExecution.toString());
    EvoSuiteValidationResult evoResult=new EvoSuiteValidationResult();
    evoResult.setManualTestValidation(resultOriginal);
    evoResult.setEvoValidation(resultEvoExecution);
    return evoResult;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Process-based validation Advantage: stability, memory consumption, CG activity Disadvantage: time.
 * @param currentVariant
 * @return
 */
@Override public ProgramVariantValidationResult validate(ProgramVariant currentVariant,ProjectRepairFacade projectFacade){
  try {
    ProcessValidator validator=new ProcessValidator();
    boolean executeAlloriginalValidation=true;
    ProgramVariantValidationResult resultOriginal=validator.validate(currentVariant,projectFacade,executeAlloriginalValidation);
    if (resultOriginal == null || !resultOriginal.wasSuccessful()) {
      return resultOriginal;
    }
    boolean runESoverOriginalBuggyClass=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    ProgramVariantValidationResult resultEvoExecution=runTestFromEvoSuite(currentVariant,projectFacade,runESoverOriginalBuggyClass);
    log.info(""String_Node_Str"" + resultEvoExecution.toString());
    EvoSuiteValidationResult evoResult=new EvoSuiteValidationResult();
    evoResult.setManualTestValidation(resultOriginal);
    evoResult.setEvoValidation(resultEvoExecution);
    return evoResult;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
61542,"@Override public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade){
  try {
    ProgramVariantValidationResult failingValidation=super.runFailing(mutatedVariant,projectFacade);
    log.debug(""String_Node_Str"" + failingValidation);
    if (failingValidation != null && failingValidation.wasSuccessful()) {
      ProgramVariantValidationResult regressionValidation=super.runRegression(mutatedVariant,projectFacade);
      log.debug(""String_Node_Str"" + regressionValidation);
      ProgramVariantValidationResult evoSuiteRegressionValidation=evoValidator.runTestFromEvoSuite(mutatedVariant,projectFacade);
      log.debug(""String_Node_Str"" + evoSuiteRegressionValidation);
      EvoSuiteValidationResult evoResult=new EvoSuiteValidationResult();
      evoResult.setFailingTestValidation(failingValidation);
      evoResult.setEvoValidation(evoSuiteRegressionValidation);
      evoResult.setManualTestValidation(regressionValidation);
      return evoResult;
    }
 else {
      return failingValidation;
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}","@Override public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade){
  try {
    boolean runESoverOriginalBuggyClass=ConfigurationProperties.getPropertyBool(""String_Node_Str"");
    ProgramVariantValidationResult failingValidation=super.runFailing(mutatedVariant,projectFacade);
    log.debug(""String_Node_Str"" + failingValidation);
    if (failingValidation != null && failingValidation.wasSuccessful()) {
      ProgramVariantValidationResult regressionValidation=super.runRegression(mutatedVariant,projectFacade);
      log.debug(""String_Node_Str"" + regressionValidation);
      ProgramVariantValidationResult evoSuiteRegressionValidation=evoValidator.runTestFromEvoSuite(mutatedVariant,projectFacade,runESoverOriginalBuggyClass);
      log.debug(""String_Node_Str"" + evoSuiteRegressionValidation);
      EvoSuiteValidationResult evoResult=new EvoSuiteValidationResult();
      evoResult.setFailingTestValidation(failingValidation);
      evoResult.setEvoValidation(evoSuiteRegressionValidation);
      evoResult.setManualTestValidation(regressionValidation);
      return evoResult;
    }
 else {
      return failingValidation;
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}"
61543,"/** 
 * Executing evosuite. For each Affected class from the program variant, we create the related TestUnit using evosuite
 * @param variant
 * @param projectFacade
 * @return
 * @throws Exception
 */
public boolean runEvosuite(ProgramVariant variant,ProjectRepairFacade projectFacade,String outES,boolean processOriginal) throws Exception {
  int nrGenerated=0;
  List<URL> originalURL=new ArrayList<>(Arrays.asList(projectFacade.getClassPathURLforProgramVariant(ProgramVariant.DEFAULT_ORIGINAL_VARIANT)));
  if (!processOriginal) {
    String bytecodeOutput=projectFacade.getOutDirWithPrefix(variant.currentMutatorIdentifier());
    File fByteOutput=new File(bytecodeOutput);
    if (!fByteOutput.exists()) {
      throw new IllegalStateException(""String_Node_Str"" + variant.currentMutatorIdentifier());
    }
    originalURL.add(0,fByteOutput.toURL());
  }
  logger.debug(""String_Node_Str"");
  File fESout=new File(outES);
  fESout.mkdirs();
  URL[] SUTClasspath=originalURL.toArray(new URL[0]);
  List<CtType<?>> typesToProcess=getClassesToProcess(variant);
  logger.debug(""String_Node_Str"" + typesToProcess.size() + ""String_Node_Str""+ ((ConfigurationProperties.getPropertyBool(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str""));
  boolean reponse=true;
  int counter=0;
  for (  CtType<?> ctType : typesToProcess) {
    String[] command=new String[]{""String_Node_Str"",ctType.getQualifiedName(),""String_Node_Str"",urlArrayToString(SUTClasspath),""String_Node_Str"",outES,""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str""),""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str""),""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str"")};
    if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
      String[] dse=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      command=StringUtil.concat(command,dse);
    }
    logger.debug(""String_Node_Str"" + ctType.getQualifiedName() + ""String_Node_Str""+ (++counter)+ ""String_Node_Str""+ typesToProcess.size());
    boolean sucess=runProcess(null,command);
    logger.debug(""String_Node_Str"" + sucess + ""String_Node_Str"");
    reponse&=sucess;
    nrGenerated+=(sucess) ? 1 : 0;
  }
  logger.debug(""String_Node_Str"" + nrGenerated + ""String_Node_Str""+ typesToProcess.size());
  return reponse;
}","/** 
 * Executing evosuite. For each Affected class from the program variant, we create the related TestUnit using evosuite Argument overOriginal indicate if we generate over the fixed version or original version (buggy)
 * @param variant
 * @param projectFacade
 * @return
 * @throws Exception
 */
public boolean runEvosuite(ProgramVariant variant,ProjectRepairFacade projectFacade,String outES,boolean processOriginal) throws Exception {
  int nrGenerated=0;
  List<URL> originalURL=new ArrayList<>(Arrays.asList(projectFacade.getClassPathURLforProgramVariant(ProgramVariant.DEFAULT_ORIGINAL_VARIANT)));
  if (!processOriginal) {
    String bytecodeOutput=projectFacade.getOutDirWithPrefix(variant.currentMutatorIdentifier());
    File fByteOutput=new File(bytecodeOutput);
    if (!fByteOutput.exists()) {
      throw new IllegalStateException(""String_Node_Str"" + variant.currentMutatorIdentifier());
    }
    originalURL.add(0,fByteOutput.toURL());
  }
  logger.debug(""String_Node_Str"");
  File fESout=new File(outES);
  fESout.mkdirs();
  URL[] SUTClasspath=originalURL.toArray(new URL[0]);
  List<CtType<?>> typesToProcess=getClassesToProcess(variant);
  logger.debug(""String_Node_Str"" + typesToProcess.size() + ""String_Node_Str""+ ((ConfigurationProperties.getPropertyBool(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str""));
  boolean reponse=true;
  int counter=0;
  for (  CtType<?> ctType : typesToProcess) {
    String[] command=new String[]{""String_Node_Str"",ctType.getQualifiedName(),""String_Node_Str"",urlArrayToString(SUTClasspath),""String_Node_Str"",outES,""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str""),""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str""),""String_Node_Str"",ConfigurationProperties.getProperty(""String_Node_Str"")};
    if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
      String[] dse=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      command=StringUtil.concat(command,dse);
    }
    logger.debug(""String_Node_Str"" + ctType.getQualifiedName() + ""String_Node_Str""+ (++counter)+ ""String_Node_Str""+ typesToProcess.size());
    boolean sucess=runProcess(null,command);
    logger.debug(""String_Node_Str"" + sucess + ""String_Node_Str"");
    reponse&=sucess;
    nrGenerated+=(sucess) ? 1 : 0;
  }
  logger.debug(""String_Node_Str"" + nrGenerated + ""String_Node_Str""+ typesToProcess.size());
  return reponse;
}"
61544,"@SuppressWarnings(""String_Node_Str"") @Test public void testMath70WithEvosuiteTestsPostValid() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",ProcessVal4Test.class.getName()};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertEquals(1,main1.getEngine().getSolutions().size());
  ProgramVariant variantSolution=main1.getEngine().getSolutions().get(0);
  ProgramVariantValidationResult validationResult=variantSolution.getValidationResult();
  assertNotNull(""String_Node_Str"",validationResult);
  assertTrue(validationResult instanceof EvoSuiteValidationResult);
  EvoSuiteValidationResult esvalidationresult=(EvoSuiteValidationResult)validationResult;
  assertTrue(esvalidationresult.wasSuccessful());
  assertTrue(esvalidationresult.getEvoValidation().wasSuccessful());
  assertTrue(esvalidationresult.getEvoValidation().getCasesExecuted() > 0);
  assertEquals(0,esvalidationresult.getEvoValidation().getFailureCount());
}","/** 
 * This test assert Astor when it runs ES over the patched version.
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testMath70WithEvosuiteTestsPostValid() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  File out=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  assertEquals(1,main1.getEngine().getSolutions().size());
  ProgramVariant variantSolution=main1.getEngine().getSolutions().get(0);
  ProgramVariantValidationResult validationResult=variantSolution.getValidationResult();
  assertNotNull(""String_Node_Str"",validationResult);
  assertTrue(validationResult instanceof EvoSuiteValidationResult);
  EvoSuiteValidationResult esvalidationresult=(EvoSuiteValidationResult)validationResult;
  assertTrue(esvalidationresult.wasSuccessful());
  assertTrue(esvalidationresult.getEvoValidation().wasSuccessful());
  assertTrue(esvalidationresult.getEvoValidation().getCasesExecuted() > 0);
  assertEquals(0,esvalidationresult.getEvoValidation().getFailureCount());
}"
61545,"@Override public int getFailureCount(){
  int count=0;
  for (  ProgramVariantValidationResult pv : this.validations.values()) {
    count+=pv.getFailureCount();
  }
  return count;
}","@Override public int getFailureCount(){
  if (this.validations.isEmpty())   return 0;
  int count=0;
  for (  ProgramVariantValidationResult pv : this.validations.values()) {
    if (pv != null)     count+=pv.getFailureCount();
  }
  return count;
}"
61546,"/** 
 * It retrieves all variables access which declarations are inside the ingredient.
 * @param ingredientRootElement
 * @param varAccessCollected
 * @return
 */
public static List<CtVariableAccess> collectInductionVariableAccess(CtElement ingredientRootElement,List<CtVariableAccess> varAccessCollected){
  List<CtVariableAccess> induction=new ArrayList();
  for (  CtVariableAccess ctVariableAccess : varAccessCollected) {
    CtVariable var=ctVariableAccess.getVariable().getDeclaration();
    boolean insideIngredient=checkParent(var,ingredientRootElement);
    if (insideIngredient)     induction.add(ctVariableAccess);
  }
  return induction;
}","/** 
 * It retrieves all variables access which declarations are inside the ingredient.
 * @param ingredientRootElement
 * @param varAccessCollected
 * @return
 */
public static List<CtVariableAccess> collectInductionVariableAccess(CtElement ingredientRootElement,List<CtVariableAccess> varAccessCollected){
  List<CtVariableAccess> induction=new ArrayList<>();
  for (  CtVariableAccess ctVariableAccess : varAccessCollected) {
    CtVariableReference varref=ctVariableAccess.getVariable();
    if (!(varref instanceof CtLocalVariableReference))     continue;
    CtVariable var=varref.getDeclaration();
    boolean insideIngredient=checkParent(var,ingredientRootElement);
    if (insideIngredient)     induction.add(ctVariableAccess);
  }
  return induction;
}"
61547,"public ProgramVariantValidationResult runRegression(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade){
  try {
    URL[] bc=createClassPath(mutatedVariant,projectFacade);
    JUnitExecutorProcess testProcessRunner=new JUnitIndirectExecutorProcess(false);
    return executeRegressionTesting(mutatedVariant,bc,testProcessRunner,projectFacade);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
}","protected ProgramVariantValidationResult runRegression(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade,URL[] bc){
  JUnitExecutorProcess testProcessRunner=new JUnitIndirectExecutorProcess(false);
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))   return executeRegressionTestingOneByOne(mutatedVariant,bc,testProcessRunner,projectFacade);
 else   return executeRegressionTesting(mutatedVariant,bc,testProcessRunner,projectFacade);
}"
61548,"/** 
 * Run the validation of the program variant in two steps: one the original failing test, the second the complete test suite (only in case the failing now passes)
 * @param mutatedVariant
 * @param projectFacade
 * @param executeRegression
 * @return
 */
public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade,boolean executeRegression){
  try {
    URL[] bc=createClassPath(mutatedVariant,projectFacade);
    JUnitExecutorProcess testProcessRunner=new JUnitIndirectExecutorProcess(false);
    log.debug(""String_Node_Str"");
    currentStats.numberOfFailingTestCaseExecution++;
    long t1=System.currentTimeMillis();
    String jvmPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    TestResult trfailing=testProcessRunner.execute(jvmPath,bc,projectFacade.getProperties().getFailingTestCases(),ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    long t2=System.currentTimeMillis();
    currentStats.time1Validation.add((t2 - t1));
    currentStats.passFailingval1++;
    if (trfailing == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      currentStats.numberOfTestcasesExecutedval1+=trfailing.casesExecuted;
      currentStats.numberOfFailingTestCase=trfailing.casesExecuted;
      log.debug(trfailing);
      if (trfailing.wasSuccessful() && executeRegression) {
        currentStats.numberOfRegressionTestExecution++;
        currentStats.passFailingval2++;
        if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))         return executeRegressionTestingOneByOne(mutatedVariant,bc,testProcessRunner,projectFacade);
 else         return executeRegressionTesting(mutatedVariant,bc,testProcessRunner,projectFacade);
      }
 else {
        ProgramVariantValidationResult r=new TestCasesProgramValidationResult(trfailing,trfailing.wasSuccessful(),false);
        return r;
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Run the validation of the program variant in two steps: one the original failing test, the second the complete test suite (only in case the failing now passes)
 * @param mutatedVariant
 * @param projectFacade
 * @param executeRegression
 * @return
 */
public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade,boolean executeRegression){
  try {
    URL[] bc=createClassPath(mutatedVariant,projectFacade);
    JUnitExecutorProcess testProcessRunner=new JUnitIndirectExecutorProcess(false);
    log.debug(""String_Node_Str"");
    currentStats.numberOfFailingTestCaseExecution++;
    long t1=System.currentTimeMillis();
    String jvmPath=ConfigurationProperties.getProperty(""String_Node_Str"");
    TestResult trfailing=testProcessRunner.execute(jvmPath,bc,projectFacade.getProperties().getFailingTestCases(),ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    long t2=System.currentTimeMillis();
    currentStats.time1Validation.add((t2 - t1));
    currentStats.passFailingval1++;
    if (trfailing == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      currentStats.numberOfTestcasesExecutedval1+=trfailing.casesExecuted;
      currentStats.numberOfFailingTestCase=trfailing.casesExecuted;
      log.debug(trfailing);
      if (trfailing.wasSuccessful() && executeRegression) {
        currentStats.numberOfRegressionTestExecution++;
        currentStats.passFailingval2++;
        return runRegression(mutatedVariant,projectFacade,bc);
      }
 else {
        ProgramVariantValidationResult r=new TestCasesProgramValidationResult(trfailing,trfailing.wasSuccessful(),false);
        return r;
      }
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return null;
  }
}"
61549,"/** 
 * This methods determines whether all the variable access contained in a CtElement passes as parameter match with a variable from a set of variables given as argument. The argument <code>matchName </code> indicates whether Type and Names are compared (value true), only type (false).
 * @param varContext List of variables to match
 * @param element element to extract the var access to match
 * @return
 */
public static boolean fitInContext(List<CtVariable> varContext,CtElement element,boolean matchName){
  List<CtVariableAccess> varAccessCollected=collectVariableAccess(element);
  Map<CtVariableAccess,List<CtVariable>> matched=matchVars(varContext,varAccessCollected,matchName);
  for (  CtVariableAccess ctVariableAccess : matched.keySet()) {
    List<CtVariable> mapped=matched.get(ctVariableAccess);
    if (mapped.isEmpty()) {
      return false;
    }
  }
  return true;
}","/** 
 * This methods determines whether all the variable access contained in a CtElement passes as parameter match with a variable from a set of variables given as argument. The argument <code>matchName </code> indicates whether Type and Names are compared (value true), only type (false).
 * @param varContext List of variables to match
 * @param ingredientCtElement element to extract the var access to match
 * @return
 */
public static boolean fitInContext(List<CtVariable> varContext,CtElement ingredientCtElement,boolean matchName){
  List<CtVariableAccess> varAccessCollected=collectVariableAccess(ingredientCtElement);
  List<CtVariableAccess> varInductionCollected=collectInductionVariableAccess(ingredientCtElement,varAccessCollected);
  boolean removedInduction=varAccessCollected.removeAll(varInductionCollected);
  if (varInductionCollected.size() > 0 && !removedInduction)   throw new IllegalAccessError(""String_Node_Str"");
  boolean nameConflict=nameConflict(varContext,varInductionCollected);
  if (nameConflict) {
    logger.debug(""String_Node_Str"" + varAccessCollected);
    return false;
  }
  List<CtVariableAccess> varStaticAccessCollected=collectStaticVariableAccess(ingredientCtElement,varAccessCollected);
  boolean removedStaticAccess=varAccessCollected.removeAll(varStaticAccessCollected);
  if (varStaticAccessCollected.size() > 0 && !removedStaticAccess)   throw new IllegalAccessError(""String_Node_Str"");
  Map<CtVariableAccess,List<CtVariable>> matched=matchVars(varContext,varAccessCollected,matchName);
  for (  CtVariableAccess ctVariableAccess : matched.keySet()) {
    List<CtVariable> mapped=matched.get(ctVariableAccess);
    if (mapped.isEmpty()) {
      return false;
    }
  }
  return true;
}"
61550,"@Override public boolean applyChangesInModel(ModificationInstance operation,ProgramVariant p){
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    try {
      parentBlock.getStatements().remove(ctst);
      successful=true;
      operation.setSuccessfulyApplied(successful);
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      operation.setExceptionAtApplied(ex);
      operation.setSuccessfulyApplied(false);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
  return successful;
}","@Override public boolean applyChangesInModel(ModificationInstance operation,ProgramVariant p){
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    try {
      parentBlock.getStatements().remove(operation.getLocationInParent());
      successful=true;
      operation.setSuccessfulyApplied(successful);
    }
 catch (    Exception ex) {
      log.error(""String_Node_Str"" + ex.getMessage());
      operation.setExceptionAtApplied(ex);
      operation.setSuccessfulyApplied(false);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
  return successful;
}"
61551,"@Test public void testMath85_CustomBasicIngredientStrategy() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",CloneIngredientSearchStrategy.class.getCanonicalName()};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"");
  List<ProgramVariant> solutions=main1.getEngine().getSolutions();
  assertTrue(solutions.size() > 0);
}","@Test public void testMath85_CustomBasicIngredientStrategy() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EfficientIngredientStrategy.class.getCanonicalName()};
  System.out.println(Arrays.toString(args));
  main1.execute(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"");
  List<ProgramVariant> solutions=main1.getEngine().getSolutions();
  assertTrue(solutions.size() > 0);
}"
61552,"protected String printTestResult(TestResult result){
  return ""String_Node_Str"" + result.wasSuccessful() + ""String_Node_Str""+ result.failures+ ""String_Node_Str""+ result.casesExecuted+ ""String_Node_Str""+ result.failTest+ ""String_Node_Str"";
}","protected String printTestResult(TestResult result){
  if (result == null)   return ""String_Node_Str"";
  return ""String_Node_Str"" + result.wasSuccessful() + ""String_Node_Str""+ result.failures+ ""String_Node_Str""+ result.casesExecuted+ ""String_Node_Str""+ result.failTest+ ""String_Node_Str"";
}"
61553,"public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + printTestResult(this.getTestResult()) + ""String_Node_Str""+ printTestResult(this.manualTestValidation.getTestResult())+ ""String_Node_Str""+ printTestResult(this.evoValidation.getTestResult());
}","public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + printTestResult(this.getTestResult()) + ((this.manualTestValidation != null) ? ""String_Node_Str"" + printTestResult(this.manualTestValidation.getTestResult()) : ""String_Node_Str"")+ ((this.evoValidation != null) ? ""String_Node_Str"" + printTestResult(this.evoValidation.getTestResult()) : ""String_Node_Str"");
}"
61554,"@Before public void setUp() throws Exception {
  main=new AstorMain();
  Logger.getLogger(StandardEnvironment.class).setLevel(Level.ERROR);
}","@Before public void setUp() throws Exception {
  MutationSupporter.cleanFactory();
  Logger.getLogger(StandardEnvironment.class).setLevel(Level.ERROR);
}"
61555,"public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  dcc=new JavaXToolsCompiler();
  for (  CtClass ctClass : ctClassList) {
    try {
      this.getProcessingManager().process(ctClass);
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + ctClass.getQualifiedName(),e);
    }
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String s=""String_Node_Str"";
  for (  URL url : cp) {
    s+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(s);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}","public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  dcc=new JavaXToolsCompiler();
  for (  CtClass ctClass : ctClassList) {
    try {
      this.getProcessingManager().process(ctClass);
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + ctClass.getQualifiedName(),e);
    }
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String path=""String_Node_Str"";
  for (  URL url : cp) {
    path+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(path);
  String compliance=ConfigurationProperties.getProperty(""String_Node_Str"");
  cps.add(""String_Node_Str"");
  cps.add(""String_Node_Str"" + compliance);
  cps.add(""String_Node_Str"");
  cps.add(""String_Node_Str"" + compliance);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}"
61556,"/** 
 * Gets the associated (standard) environment.
 */
public Environment getEnvironment(){
  if (this.environment == null) {
    this.environment=new StandardEnvironment();
  }
  return this.environment;
}","/** 
 * Gets the associated (standard) environment. When we create it, we set the compliance level taken as parameter (if any)
 */
public Environment getEnvironment(){
  if (this.environment == null) {
    this.environment=new StandardEnvironment();
    String compliance=ConfigurationProperties.getProperty(""String_Node_Str"");
    this.environment.setLevel(compliance);
  }
  return this.environment;
}"
61557,"public List<CtClass> reificateEvoSuiteTest(String evoTestpath,String[] classpath){
  logger.debug(""String_Node_Str"" + evoTestpath + ""String_Node_Str""+ Arrays.toString(classpath));
  MutationSupporter mutatorSupporter=MutationSupporter.currentSupporter;
  Factory factory=MutationSupporter.currentSupporter.getFactory();
  String codeLocation=evoTestpath;
  boolean saveOutput=true;
  try {
    mutatorSupporter.buildModel(codeLocation,classpath,saveOutput);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(e.getMessage());
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,classpath,saveOutput);
  }
  List<CtType<?>> allTypes=mutatorSupporter.getFactory().Type().getAll();
  List<CtClass> ESTestClasses=new ArrayList<>();
  for (  CtType<?> ctType : allTypes) {
    if (ctType.getSimpleName().endsWith(EVOSUITE_SUFFIX) || ctType.getSimpleName().endsWith(EVOSUITE_scaffolding_SUFFIX)) {
      ESTestClasses.add((CtClass)ctType);
    }
  }
  return ESTestClasses;
}","public List<CtClass> reificateEvoSuiteTest(String evoTestpath,String[] classpath){
  logger.debug(""String_Node_Str"" + evoTestpath + ""String_Node_Str""+ Arrays.toString(classpath));
  MutationSupporter mutatorSupporter=MutationSupporter.currentSupporter;
  String codeLocation=evoTestpath;
  boolean saveOutput=false;
  try {
    mutatorSupporter.buildModel(codeLocation,classpath,saveOutput);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(e.getMessage());
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,classpath,saveOutput);
  }
  List<CtType<?>> allTypes=mutatorSupporter.getFactory().Type().getAll();
  List<CtClass> ESTestClasses=new ArrayList<>();
  for (  CtType<?> ctType : allTypes) {
    if (ctType.getSimpleName().endsWith(EVOSUITE_SUFFIX) || ctType.getSimpleName().endsWith(EVOSUITE_scaffolding_SUFFIX)) {
      ESTestClasses.add((CtClass)ctType);
    }
  }
  return ESTestClasses;
}"
61558,"/** 
 * New Program Variant Clone
 * @param parentVariant
 * @param id
 * @return
 */
public ProgramVariant createProgramVariantFromAnother(ProgramVariant parentVariant,int id,int generation){
  ProgramVariant childVariant=new ProgramVariant(id);
  childVariant.setGenerationSource(generation);
  childVariant.setParent(parentVariant);
  childVariant.getModificationPoints().addAll(parentVariant.getModificationPoints());
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str""))   childVariant.getOperations().putAll(parentVariant.getOperations());
  childVariant.setLastGenAnalyzed(parentVariant.getLastGenAnalyzed());
  childVariant.getBuiltClasses().putAll(parentVariant.getBuiltClasses());
  childVariant.setFitness(parentVariant.getFitness());
  return childVariant;
}","/** 
 * New Program Variant Clone
 * @param parentVariant
 * @param id
 * @return
 */
public ProgramVariant createProgramVariantFromAnother(ProgramVariant parentVariant,int id,int generation){
  ProgramVariant childVariant=new ProgramVariant(id);
  childVariant.setGenerationSource(generation);
  childVariant.setParent(parentVariant);
  childVariant.addModificationPoints(parentVariant.getModificationPoints());
  if (!ConfigurationProperties.getPropertyBool(""String_Node_Str""))   childVariant.getOperations().putAll(parentVariant.getOperations());
  childVariant.setLastGenAnalyzed(parentVariant.getLastGenAnalyzed());
  childVariant.getBuiltClasses().putAll(parentVariant.getBuiltClasses());
  childVariant.setFitness(parentVariant.getFitness());
  return childVariant;
}"
61559,"/** 
 * A Program instances is created from the list of suspicious. For each suspiciuos a list of modif point is created.
 * @param suspiciousList
 * @param idProgramInstance
 * @return
 */
private ProgramVariant createProgramInstance(List<SuspiciousCode> suspiciousList,int idProgramInstance){
  ProgramVariant progInstance=new ProgramVariant(idProgramInstance);
  log.debug(""String_Node_Str"" + idProgramInstance);
  if (!suspiciousList.isEmpty()) {
    for (    SuspiciousCode suspiciousCode : suspiciousList) {
      List<SuspiciousModificationPoint> modifPoints=createModificationPoints(suspiciousCode,progInstance);
      if (modifPoints != null)       progInstance.getModificationPoints().addAll(modifPoints);
 else {
        log.info(""String_Node_Str"" + suspiciousCode);
      }
    }
    log.info(""String_Node_Str"" + suspiciousList.size() + ""String_Node_Str""+ progInstance.getModificationPoints().size());
  }
 else {
    List<SuspiciousModificationPoint> pointsFromAllStatements=createModificationPoints(progInstance);
    progInstance.getModificationPoints().addAll(pointsFromAllStatements);
  }
  log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  return progInstance;
}","/** 
 * A Program instances is created from the list of suspicious. For each suspiciuos a list of modif point is created.
 * @param suspiciousList
 * @param idProgramInstance
 * @return
 */
private ProgramVariant createProgramInstance(List<SuspiciousCode> suspiciousList,int idProgramInstance){
  ProgramVariant progInstance=new ProgramVariant(idProgramInstance);
  log.debug(""String_Node_Str"" + idProgramInstance);
  if (!suspiciousList.isEmpty()) {
    for (    SuspiciousCode suspiciousCode : suspiciousList) {
      List<SuspiciousModificationPoint> modifPoints=createModificationPoints(suspiciousCode,progInstance);
      if (modifPoints != null)       progInstance.addModificationPoints(modifPoints);
 else {
        log.info(""String_Node_Str"" + suspiciousCode);
      }
    }
    log.info(""String_Node_Str"" + suspiciousList.size() + ""String_Node_Str""+ progInstance.getModificationPoints().size());
  }
 else {
    List<SuspiciousModificationPoint> pointsFromAllStatements=createModificationPoints(progInstance);
    progInstance.getModificationPoints().addAll(pointsFromAllStatements);
  }
  log.info(""String_Node_Str"" + progInstance.getModificationPoints().size());
  return progInstance;
}"
61560,"public List<SuspiciousCode> calculateSuspicious(IFaultLocalization faultLocalization,String locationSrc,String locationBytecode,String packageToInst,String mutatorIdentifier,List<String> failingTest,List<String> allTest,boolean mustRunAllTest) throws Exception {
  if (faultLocalization == null)   throw new IllegalArgumentException(""String_Node_Str"");
  List<String> testcasesToExecute=null;
  if (mustRunAllTest) {
    testcasesToExecute=allTest;
  }
 else {
    testcasesToExecute=failingTest;
  }
  if (testcasesToExecute == null || testcasesToExecute.isEmpty()) {
    new IllegalArgumentException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"" + locationBytecode + ""String_Node_Str""+ +testcasesToExecute.size()+ ""String_Node_Str"");
  List<String> listTOInst=new ArrayList<String>();
  listTOInst.add(packageToInst);
  Set<String> classPath=new HashSet<String>();
  classPath.add(locationBytecode);
  for (  URL dep : getProperties().getDependencies()) {
    classPath.add(dep.getPath());
  }
  ;
  List<SuspiciousCode> suspiciousStatemens=faultLocalization.searchSuspicious(locationBytecode,testcasesToExecute,listTOInst,classPath,locationSrc);
  if (suspiciousStatemens == null || suspiciousStatemens.isEmpty())   throw new IllegalArgumentException(""String_Node_Str"");
  List<SuspiciousCode> filtercandidates=new ArrayList<SuspiciousCode>();
  for (  SuspiciousCode suspiciousCode : suspiciousStatemens) {
    if (!suspiciousCode.getClassName().endsWith(""String_Node_Str"")) {
      filtercandidates.add(suspiciousCode);
    }
  }
  return filtercandidates;
}","public List<SuspiciousCode> calculateSuspicious(IFaultLocalization faultLocalization,String locationSrc,String locationBytecode,String packageToInst,String mutatorIdentifier,List<String> failingTest,List<String> allTest,boolean mustRunAllTest) throws Exception {
  if (faultLocalization == null)   throw new IllegalArgumentException(""String_Node_Str"");
  List<String> testcasesToExecute=null;
  if (mustRunAllTest) {
    testcasesToExecute=allTest;
  }
 else {
    testcasesToExecute=failingTest;
  }
  if (testcasesToExecute == null || testcasesToExecute.isEmpty()) {
    new IllegalArgumentException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"" + locationBytecode + ""String_Node_Str""+ +testcasesToExecute.size()+ ""String_Node_Str"");
  List<String> listTOInst=new ArrayList<String>();
  listTOInst.add(packageToInst);
  Set<String> classPath=new HashSet<String>();
  classPath.add(locationBytecode);
  for (  URL dep : getProperties().getDependencies()) {
    classPath.add(dep.getPath());
  }
  List<SuspiciousCode> suspiciousStatemens=faultLocalization.searchSuspicious(locationBytecode,testcasesToExecute,listTOInst,classPath,locationSrc);
  if (suspiciousStatemens == null || suspiciousStatemens.isEmpty())   throw new IllegalArgumentException(""String_Node_Str"");
  List<SuspiciousCode> filtercandidates=new ArrayList<SuspiciousCode>();
  for (  SuspiciousCode suspiciousCode : suspiciousStatemens) {
    if (!suspiciousCode.getClassName().endsWith(""String_Node_Str"")) {
      filtercandidates.add(suspiciousCode);
    }
  }
  return filtercandidates;
}"
61561,"public void saveSolutionData(ProgramVariant childVariant,String srcOutput,int generation){
  try {
    Map<String,Integer> result=new HashMap<String,Integer>();
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document root=dBuilder.newDocument();
    Element rootElement=root.createElement(""String_Node_Str"");
    root.appendChild(rootElement);
    for (int i=1; i <= generation; i++) {
      List<ModificationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      ModificationInstance genOperationInstance : genOperationInstances) {
        Element op=root.createElement(""String_Node_Str"");
        rootElement.appendChild(op);
        Attr attr_location=root.createAttribute(""String_Node_Str"");
        attr_location.setValue(genOperationInstance.getModificationPoint().getCtClass().getQualifiedName());
        op.setAttributeNode(attr_location);
        if (genOperationInstance.getModificationPoint() instanceof SuspiciousModificationPoint) {
          SuspiciousModificationPoint gs=(SuspiciousModificationPoint)genOperationInstance.getModificationPoint();
          int line=gs.getSuspicious().getLineNumber();
          Attr attr_line=root.createAttribute(""String_Node_Str"");
          attr_line.setValue(Integer.toString(line));
          op.setAttributeNode(attr_line);
        }
        Attr attr_gen=root.createAttribute(""String_Node_Str"");
        attr_gen.setValue(Integer.toString(i));
        op.setAttributeNode(attr_gen);
        Attr attr_type=root.createAttribute(""String_Node_Str"");
        attr_type.setValue(genOperationInstance.getOperationApplied().toString());
        op.setAttributeNode(attr_type);
        Element original=root.createElement(""String_Node_Str"");
        op.appendChild(original);
        original.setNodeValue(genOperationInstance.getOriginal().toString());
        Element mod=root.createElement(""String_Node_Str"");
        op.appendChild(mod);
        if (genOperationInstance.getModified() != null) {
          mod.setNodeValue(genOperationInstance.getModified().toString());
          if (genOperationInstance.getIngredientScope() != null) {
            Attr attr_ing=root.createAttribute(""String_Node_Str"");
            attr_ing.setValue(genOperationInstance.getIngredientScope().toString());
            mod.setAttributeNode(attr_ing);
          }
        }
 else {
          mod.setNodeValue(genOperationInstance.getOriginal().toString());
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(root);
    StreamResult result1=new StreamResult(new File(srcOutput + File.separator + ""String_Node_Str""));
    transformer.transform(source,result1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void saveSolutionData(ProgramVariant childVariant,String srcOutput,int generation){
  try {
    Map<String,Integer> result=new HashMap<String,Integer>();
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document root=dBuilder.newDocument();
    Element rootElement=root.createElement(""String_Node_Str"");
    root.appendChild(rootElement);
    for (int i=1; i <= generation; i++) {
      List<ModificationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      ModificationInstance genOperationInstance : genOperationInstances) {
        Element op=root.createElement(""String_Node_Str"");
        rootElement.appendChild(op);
        Attr attr_location=root.createAttribute(""String_Node_Str"");
        attr_location.setValue(genOperationInstance.getModificationPoint().getCtClass().getQualifiedName());
        op.setAttributeNode(attr_location);
        if (genOperationInstance.getModificationPoint() instanceof SuspiciousModificationPoint) {
          SuspiciousModificationPoint gs=(SuspiciousModificationPoint)genOperationInstance.getModificationPoint();
          int line=gs.getSuspicious().getLineNumber();
          Attr attr_line=root.createAttribute(""String_Node_Str"");
          attr_line.setValue(Integer.toString(line));
          op.setAttributeNode(attr_line);
        }
        Attr attr_gen=root.createAttribute(""String_Node_Str"");
        attr_gen.setValue(Integer.toString(i));
        op.setAttributeNode(attr_gen);
        Attr attr_type=root.createAttribute(""String_Node_Str"");
        attr_type.setValue(genOperationInstance.getOperationApplied().toString());
        op.setAttributeNode(attr_type);
        Element original=root.createElement(""String_Node_Str"");
        op.appendChild(original);
        original.setTextContent(genOperationInstance.getOriginal().toString());
        Element mod=root.createElement(""String_Node_Str"");
        op.appendChild(mod);
        if (genOperationInstance.getModified() != null) {
          mod.setTextContent(genOperationInstance.getModified().toString());
          if (genOperationInstance.getIngredientScope() != null) {
            Attr attr_ing=root.createAttribute(""String_Node_Str"");
            attr_ing.setValue(genOperationInstance.getIngredientScope().toString());
            mod.setAttributeNode(attr_ing);
          }
        }
 else {
          mod.setNodeValue(genOperationInstance.getOriginal().toString());
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(root);
    StreamResult result1=new StreamResult(new File(srcOutput + File.separator + ""String_Node_Str""));
    transformer.transform(source,result1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
61562,"@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  for (  ProgramVariant parentVariant : variants) {
    for (    ModificationPoint gen : parentVariant.getModificationPoints()) {
      List<ModificationInstance> genOperations=createOperators((SuspiciousModificationPoint)gen);
      if (genOperations == null || genOperations.isEmpty())       continue;
      for (      ModificationInstance pointOperation : genOperations) {
        try {
          log.info(""String_Node_Str"" + gen);
          log.info(""String_Node_Str"" + pointOperation);
        }
 catch (        Exception e) {
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        if (solution) {
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))           return;
        }
        undoOperationToSpoonElement(pointOperation);
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          log.debug(""String_Node_Str"");
          return;
        }
      }
    }
  }
}","@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  generationsExecuted=1;
  int maxMinutes=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  for (  ProgramVariant parentVariant : variants) {
    for (    ModificationPoint modifPoint : parentVariant.getModificationPoints()) {
      List<ModificationInstance> genOperations=createOperators((SuspiciousModificationPoint)modifPoint);
      if (genOperations == null || genOperations.isEmpty())       continue;
      for (      ModificationInstance pointOperation : genOperations) {
        try {
          log.info(""String_Node_Str"" + modifPoint);
          log.info(""String_Node_Str"" + pointOperation);
        }
 catch (        Exception e) {
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generationsExecuted);
        solutionVariant.getOperations().put(generationsExecuted,Arrays.asList(pointOperation));
        applyNewMutationOperationToSpoonElement(pointOperation);
        boolean solution=processCreatedVariant(solutionVariant,generationsExecuted);
        if (solution) {
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))           return;
        }
        undoOperationToSpoonElement(pointOperation);
        if (!belowMaxTime(dateInitEvolution,maxMinutes)) {
          log.debug(""String_Node_Str"");
          return;
        }
      }
    }
  }
}"
61563,"public ExhaustiveSearchEngine(MutationSupporter mutatorExecutor,ProjectRepairFacade projFacade) throws JSAPException {
  super(mutatorExecutor,projFacade);
  this.setRepairActionSpace(new UnparSpace());
}","public ExhaustiveSearchEngine(MutationSupporter mutatorExecutor,ProjectRepairFacade projFacade) throws JSAPException {
  super(mutatorExecutor,projFacade);
}"
61564,"private void initModel() throws Exception {
  String codeLocation=projectFacade.getInDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpath=projectFacade.getProperties().getDependenciesString();
  String[] cpArray=classpath.split(File.pathSeparator);
  try {
    mutatorSupporter.buildModel(codeLocation,cpArray);
    log.debug(""String_Node_Str"" + codeLocation);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    log.error(e.getMessage());
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,cpArray);
  }
  BlockReificationScanner visitor=new BlockReificationScanner();
  for (  CtType c : mutatorSupporter.getFactory().Type().getAll()) {
    c.accept(visitor);
  }
  List<String> testcases=projectFacade.getProperties().getRegressionTestCases();
  List<CtType<?>> types=mutatorSupporter.getFactory().Class().getAll();
  for (  CtType<?> ctType : types) {
    if (!(ctType instanceof CtClass)) {
      continue;
    }
    if (testcases.contains(ctType.getQualifiedName())) {
      mutatorSupporter.getTestClasses().add((CtClass)ctType);
    }
 else {
      mutatorSupporter.getClasses().add((CtClass)ctType);
    }
  }
  FinderTestCases.updateRegressionTestCases(projectFacade);
}","private void initModel() throws Exception {
  String codeLocation=projectFacade.getInDirWithPrefix(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  String classpath=projectFacade.getProperties().getDependenciesString();
  String[] cpArray=classpath.split(File.pathSeparator);
  try {
    mutatorSupporter.buildModel(codeLocation,cpArray);
    log.debug(""String_Node_Str"" + codeLocation);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    log.error(e.getMessage());
    mutatorSupporter.getFactory().getEnvironment().setComplianceLevel(ConfigurationProperties.getPropertyInt(""String_Node_Str""));
    mutatorSupporter.buildModel(codeLocation,cpArray);
  }
  BlockReificationScanner visitor=new BlockReificationScanner();
  for (  CtType c : mutatorSupporter.getFactory().Type().getAll()) {
    c.accept(visitor);
  }
  List<String> testcases=projectFacade.getProperties().getRegressionTestCases();
  List<CtType<?>> types=mutatorSupporter.getFactory().Class().getAll();
  for (  CtType<?> ctType : types) {
    if (!(ctType instanceof CtClass)) {
      continue;
    }
    if (testcases.contains(ctType.getQualifiedName())) {
      mutatorSupporter.getTestClasses().add((CtClass)ctType);
    }
 else {
      mutatorSupporter.getClasses().add((CtClass)ctType);
    }
  }
}"
61565,"/** 
 * This method refine the list of test cases received as parameter. I analyze each model of each test to validate whether is a test or not. 
 */
public static List<String> refineListofRegressionTestCases(List<String> allTest){
  List<String> regressionCases=new ArrayList<String>();
  List<String> ignoreTestcases=retriveIgnoreTestCases();
  for (  String candidateTest : allTest) {
    CtType<?> type=MutationSupporter.getFactory().Type().get(candidateTest);
    if (type != null && (!type.getModifiers().contains(ModifierKind.ABSTRACT)) && !(type instanceof CtInterface) && isValidConstructor(type) && !(isIgnoredTestCase(type.getQualifiedName(),ignoreTestcases))) {
      regressionCases.add(type.getQualifiedName());
    }
  }
  return regressionCases;
}","/** 
 * This method refine the list of test cases received as parameter. I analyze each model of each test to validate whether is a test or not. 
 */
private static List<String> refineListofRegressionTestCases(List<String> allTest){
  List<String> regressionCases=new ArrayList<String>();
  List<String> ignoreTestcases=retriveIgnoreTestCases();
  for (  String candidateTest : allTest) {
    CtType<?> type=MutationSupporter.getFactory().Type().get(candidateTest);
    if (type != null && (!type.getModifiers().contains(ModifierKind.ABSTRACT)) && !(type instanceof CtInterface) && isValidConstructor(type) && !(isIgnoredTestCase(type.getQualifiedName(),ignoreTestcases))) {
      regressionCases.add(type.getQualifiedName());
    }
  }
  return regressionCases;
}"
61566,"@Override public void process(CtStatement element){
  if (!(element instanceof CtBlock || element instanceof CtClass || element instanceof CtMethod|| element instanceof CtTry|| element instanceof CtCatch) && ((element.getParent() instanceof CtBlock) || (element.getParent() instanceof CtCase) || (element.getParent() instanceof CtIf)|| (element.getParent() instanceof CtWhile))) {
    add(element);
  }
}","@Override public void process(CtStatement element){
  if (!(element instanceof CtBlock || element instanceof CtClass || element instanceof CtMethod|| element instanceof CtTry|| element instanceof CtCatch) && (element.getParent() instanceof CtBlock)) {
    add(element);
  }
}"
61567,"public List<SuspiciousCode> searchGZoltar(String location,List<String> testsToExecute,List<String> toInstrument,HashSet<String> cp,String srcFolder) throws FileNotFoundException, IOException {
  candidates.clear();
  failingTestCases.clear();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String projLocation=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocation + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocation);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  List<String> alltest=new ArrayList<>();
  String casesTest=""String_Node_Str"";
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName);
    }
    if (tr.getTrace() != null) {
    }
    if (!alltest.contains(testName)) {
      alltest.add(testName);
      casesTest+=testName + ""String_Node_Str"";
    }
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",casesTest);
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  for (  Statement s : gz.getSuspiciousStatements()) {
    String compName=s.getMethod().getParent().getLabel();
    if (s.getSuspiciousness() >= thr && isSource(compName,srcFolder)) {
      logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ s.getLineNumber()+ ""String_Node_Str""+ df.format(s.getSuspiciousness()));
      SuspiciousCode c=new SuspiciousCode(compName,s.getMethod().toString(),s.getLineNumber(),s.getSuspiciousness());
      candidates.add(c);
    }
  }
  int max=(candidates.size() < maxSuspCandidates) ? candidates.size() : maxSuspCandidates;
  Collections.sort(candidates,new ComparatorCandidates());
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  candidates=candidates.subList(0,max);
  return candidates;
}","public List<SuspiciousCode> searchGZoltar(String location,List<String> testsToExecute,List<String> toInstrument,HashSet<String> cp,String srcFolder) throws FileNotFoundException, IOException {
  candidates.clear();
  failingTestCases.clear();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  File projLocationFile=new File(ConfigurationProperties.getProperty(""String_Node_Str""));
  String projLocation=projLocationFile.getAbsolutePath();
  logger.debug(""String_Node_Str"" + projLocation + ""String_Node_Str""+ projLocationFile.exists());
  GZoltar gz=new GZoltar(projLocation);
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
    gz.addClassNotToInstrument(test);
  }
  gz.addTestPackageNotToExecute(""String_Node_Str"");
  gz.addPackageNotToInstrument(""String_Node_Str"");
  gz.run();
  List<String> alltest=new ArrayList<>();
  String casesTest=""String_Node_Str"";
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    String testName=tr.getName().split(""String_Node_Str"")[0];
    if (testName.startsWith(""String_Node_Str"")) {
      continue;
    }
    sum[0]++;
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(testName);
    }
    if (tr.getTrace() != null) {
    }
    if (!alltest.contains(testName)) {
      alltest.add(testName);
      casesTest+=testName + File.pathSeparator;
    }
  }
  ConfigurationProperties.properties.setProperty(""String_Node_Str"",casesTest);
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  int maxSuspCandidates=ConfigurationProperties.getPropertyInt(""String_Node_Str"");
  for (  Statement s : gz.getSuspiciousStatements()) {
    String compName=s.getMethod().getParent().getLabel();
    if (s.getSuspiciousness() >= thr && isSource(compName,srcFolder)) {
      logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ s.getLineNumber()+ ""String_Node_Str""+ df.format(s.getSuspiciousness()));
      SuspiciousCode c=new SuspiciousCode(compName,s.getMethod().toString(),s.getLineNumber(),s.getSuspiciousness());
      candidates.add(c);
    }
  }
  int max=(candidates.size() < maxSuspCandidates) ? candidates.size() : maxSuspCandidates;
  Collections.sort(candidates,new ComparatorCandidates());
  logger.info(""String_Node_Str"" + candidates.size() + ""String_Node_Str""+ thr+ ""String_Node_Str""+ max);
  candidates=candidates.subList(0,max);
  return candidates;
}"
61568,"private boolean isValidConstructor(CtType<?> type){
  if (type instanceof CtClass<?>) {
    CtClass<?> ctClass=((CtClass<?>)type);
    if (ctClass.getSuperclass() == null || !ctClass.getSuperclass().getSimpleName().equals(""String_Node_Str"")) {
      return true;
    }
    return ((CtClass<?>)type).getConstructor() != null || ((CtClass<?>)type).getConstructor(type.getFactory().Class().createReference(String.class)) != null;
  }
  return false;
}","private static boolean isValidConstructor(CtType<?> type){
  if (type instanceof CtClass<?>) {
    CtClass<?> ctClass=((CtClass<?>)type);
    if (ctClass.getSuperclass() == null || !ctClass.getSuperclass().getSimpleName().equals(""String_Node_Str"")) {
      return true;
    }
    return ((CtClass<?>)type).getConstructor() != null || ((CtClass<?>)type).getConstructor(type.getFactory().Class().createReference(String.class)) != null;
  }
  return false;
}"
61569,"private boolean isIgnoredTestCase(String nameTestCase,List<String> ignoredList){
  for (  String ignoreTC : ignoredList) {
    if (nameTestCase.startsWith(ignoreTC)) {
      return true;
    }
    ;
  }
  return false;
}","private static boolean isIgnoredTestCase(String nameTestCase,List<String> ignoredList){
  for (  String ignoreTC : ignoredList) {
    if (nameTestCase.startsWith(ignoreTC)) {
      return true;
    }
    ;
  }
  return false;
}"
61570,"private List<String> retriveIgnoreTestCases(){
  String list=ConfigurationProperties.getProperty(""String_Node_Str"");
  String[] cases=list.split(""String_Node_Str"");
  return Arrays.asList(cases);
}","private static List<String> retriveIgnoreTestCases(){
  String list=ConfigurationProperties.getProperty(""String_Node_Str"");
  String[] cases=list.split(""String_Node_Str"");
  return Arrays.asList(cases);
}"
61571,"public ProgramVariantValidationResult validateVariantSecondPhaseSingle(List<String> failingCases,String testSuiteClassName) throws FileNotFoundException, ClassNotFoundException, InitializationError {
  JUnitTestExecutor muTestEx=new JUnitTestExecutor();
  ProgramVariantValidationResult validation=new ProgramVariantValidationResult();
  logger.info(""String_Node_Str"");
  Result result=muTestEx.runTest(testSuiteClassName);
  validation.addResultRegressionTest(result);
  validation.setRegressionExecuted(result.wasSuccessful());
  return validation;
}","@Deprecated public ProgramVariantValidationResult validateVariantSecondPhaseSingle(List<String> failingCases,String testSuiteClassName) throws FileNotFoundException, ClassNotFoundException, InitializationError {
  JUnitTestExecutor muTestEx=new JUnitTestExecutor();
  ProgramVariantValidationResult validation=new ProgramVariantValidationResult();
  logger.info(""String_Node_Str"");
  Result result=muTestEx.runTest(testSuiteClassName);
  validation.addResultRegressionTest(result);
  validation.setRegressionExecuted(result.wasSuccessful());
  return validation;
}"
61572,"/** 
 * Feed the list of test cases according to the definition POM/build.xml
 * @return 
 */
public List<String> retrieveRegressionTestCases(List<String> allTest){
  List<String> regressionCases=new ArrayList<String>();
  List<String> ignoreTestcases=retriveIgnoreTestCases();
  for (  String candidateTest : allTest) {
    CtType<?> type=MutationSupporter.getFactory().Type().get(candidateTest);
    if (type != null && (!type.getModifiers().contains(ModifierKind.ABSTRACT)) && !(type instanceof CtInterface) && isValidConstructor(type) && !(isIgnoredTestCase(type.getQualifiedName(),ignoreTestcases))) {
      regressionCases.add(type.getQualifiedName());
    }
  }
  return regressionCases;
}","/** 
 * Feed the list of test cases according to the definition POM/build.xml
 * @return 
 */
public static List<String> retrieveRegressionTestCases(List<String> allTest){
  List<String> regressionCases=new ArrayList<String>();
  List<String> ignoreTestcases=retriveIgnoreTestCases();
  for (  String candidateTest : allTest) {
    CtType<?> type=MutationSupporter.getFactory().Type().get(candidateTest);
    if (type != null && (!type.getModifiers().contains(ModifierKind.ABSTRACT)) && !(type instanceof CtInterface) && isValidConstructor(type) && !(isIgnoredTestCase(type.getQualifiedName(),ignoreTestcases))) {
      regressionCases.add(type.getQualifiedName());
    }
  }
  return regressionCases;
}"
61573,"private void validateReversedOriginalVariant(ProgramVariant variant){
  for (  CtType st : variant.getAffectedClasses()) {
    String original=originalModel.get(st.getQualifiedName());
    boolean idem=original.equals(st.toString());
    if (!idem) {
      log.error(""String_Node_Str"");
    }
  }
}","private void validateReversedOriginalVariant(ProgramVariant variant){
  for (  CtType st : variant.getAffectedClasses()) {
    String original=originalModel.get(st.getQualifiedName());
    if (original != null) {
      boolean idem=original.equals(st.toString());
      if (!idem) {
        log.error(""String_Node_Str"");
      }
    }
  }
}"
61574,"private void saveOriginalVariant(ProgramVariant variant){
  originalModel.clear();
  for (  CtType st : variant.getAffectedClasses()) {
    originalModel.put(st.getQualifiedName(),st.toString());
  }
}","private void saveOriginalVariant(ProgramVariant variant){
  originalModel.clear();
  for (  CtType st : variant.getAffectedClasses()) {
    try {
      originalModel.put(st.getQualifiedName(),st.toString());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + st.getQualifiedName());
    }
  }
}"
61575,"private void saveModifVariant(ProgramVariant variant){
  modifModel.clear();
  for (  CtType st : variant.getAffectedClasses()) {
    modifModel.put(st.getQualifiedName(),st.toString());
  }
}","private void saveModifVariant(ProgramVariant variant){
  modifModel.clear();
  for (  CtType st : variant.getAffectedClasses()) {
    try {
      modifModel.put(st.getQualifiedName(),st.toString());
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + st.getQualifiedName());
    }
  }
}"
61576,"public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  try {
    for (    CtClass ctClass : ctClassList) {
      this.getProcessingManager().process(ctClass);
      String[] tmp=ctClass.getQualifiedName().split(""String_Node_Str"");
      char[][] pack=new char[tmp.length - 1][];
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    List<String> errors=new ArrayList<String>();
    errors.add(e.getMessage());
    CompilationResult rbc=new CompilationResult(null,errors);
    return rbc;
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String s=""String_Node_Str"";
  for (  URL url : cp) {
    s+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(s);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}","public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  for (  CtClass ctClass : ctClassList) {
    try {
      this.getProcessingManager().process(ctClass);
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + ctClass.getQualifiedName(),e);
    }
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String s=""String_Node_Str"";
  for (  URL url : cp) {
    s+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(s);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}"
61577,"protected synchronized String sourceForModelledClass(CtType<?> modelledClass){
  prettyPrinter.scan(modelledClass);
  String sourceCode=""String_Node_Str"" + modelledClass.getPackage().toString() + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ prettyPrinter.toString();
  prettyPrinter.reset();
  return sourceCode;
}","protected synchronized String sourceForModelledClass(CtType<?> modelledClass){
  prettyPrinter.reset();
  prettyPrinter.scan(modelledClass);
  String sourceCode=""String_Node_Str"" + modelledClass.getPackage().toString() + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ prettyPrinter.toString();
  prettyPrinter.reset();
  return sourceCode;
}"
61578,"public void saveSourceCode(CtClass element){
  if (javaPrinter == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!element.isTopLevel()) {
    return;
  }
  units.clear();
  javaPrinter.getCreatedFiles().clear();
  javaPrinter.process(element);
}","public void saveSourceCode(CtClass element){
  if (javaPrinter == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!element.isTopLevel()) {
    return;
  }
  try {
    units.clear();
    javaPrinter.getCreatedFiles().clear();
    javaPrinter.process(element);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + element.getQualifiedName());
  }
}"
61579,"public static boolean matchVariable(List<CtVariable> varContext,CtVariableAccess vartofind){
  CtTypeReference typeToFind=vartofind.getType();
  List<CtVariable> types=compatiblesSubType(varContext,typeToFind);
  for (  CtVariable ctVariableWithTypes : types) {
    boolean match=ctVariableWithTypes.getSimpleName().equals(vartofind.getVariable().getSimpleName());
    if (match) {
      return true;
    }
  }
  return false;
}","public static boolean matchVariable(List<CtVariable> varContext,CtVariableAccess vartofind){
  try {
    CtTypeReference typeToFind=vartofind.getType();
    List<CtVariable> types=compatiblesSubType(varContext,typeToFind);
    for (    CtVariable ctVariableWithTypes : types) {
      boolean match=ctVariableWithTypes.getSimpleName().equals(vartofind.getVariable().getSimpleName());
      if (match) {
        return true;
      }
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
  return false;
}"
61580,"@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  final int generation=1;
  for (  ProgramVariant parentVariant : variants) {
    for (    Gen gen : parentVariant.getGenList()) {
      List<GenOperationInstance> genOperations=createOperators((GenSuspicious)gen);
      if (genOperations == null || genOperations.isEmpty())       continue;
      for (      GenOperationInstance genOperation : genOperations) {
        try {
          log.info(""String_Node_Str"" + ((GenSuspicious)gen).getSuspicious());
          log.info(""String_Node_Str"" + genOperation);
        }
 catch (        Exception e) {
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generation);
        solutionVariant.getOperations().put(generation,Arrays.asList(genOperation));
        applyNewMutationOperationToSpoonElement(genOperation);
        boolean solution=processCreatedVariant(solutionVariant,generation);
        if (solution) {
          this.solutions.add(solutionVariant);
        }
        undoOperationToSpoonElement(genOperation);
      }
    }
  }
  showResults(generation);
}","@Override public void startEvolution() throws Exception {
  dateInitEvolution=new Date();
  final int generation=1;
  outerloop:   for (  ProgramVariant parentVariant : variants) {
    for (    Gen gen : parentVariant.getGenList()) {
      List<GenOperationInstance> genOperations=createOperators((GenSuspicious)gen);
      if (genOperations == null || genOperations.isEmpty())       continue;
      for (      GenOperationInstance genOperation : genOperations) {
        try {
          log.info(""String_Node_Str"" + ((GenSuspicious)gen).getSuspicious());
          log.info(""String_Node_Str"" + genOperation);
        }
 catch (        Exception e) {
        }
        ProgramVariant solutionVariant=variantFactory.createProgramVariantFromAnother(parentVariant,generation);
        solutionVariant.getOperations().put(generation,Arrays.asList(genOperation));
        applyNewMutationOperationToSpoonElement(genOperation);
        boolean solution=processCreatedVariant(solutionVariant,generation);
        if (solution) {
          this.solutions.add(solutionVariant);
          if (ConfigurationProperties.getPropertyBool(""String_Node_Str""))           break;
        }
        undoOperationToSpoonElement(genOperation);
      }
    }
  }
  showResults(generation);
}"
61581,"/** 
 * By default, it initializes the spoon model. It should not be created before. Otherwise, an exception occurs.
 * @param suspicious
 * @throws Exception
 */
public void initPopulation(List<SuspiciousCode> suspicious) throws Exception {
  if (MutationSupporter.getFactory().Type().getAll().isEmpty()) {
    initModel();
  }
  log.info(""String_Node_Str"" + suspicious.size());
  initializePopulation(suspicious);
  if (originalVariant == null) {
    log.error(""String_Node_Str"");
    return;
  }
  if (originalVariant.getGenList().isEmpty()) {
    log.error(""String_Node_Str"");
    return;
  }
  if (getFixSpace() != null) {
    List<?> classesForIngredients=retrieveClassesForIngredients();
    getFixSpace().defineSpace(classesForIngredients);
  }
  boolean validInstance=validateInstance(originalVariant);
  assert(validInstance);
  for (  ProgramVariant initvariant : variants) {
    initvariant.setFitness(originalVariant.getFitness());
  }
}","/** 
 * By default, it initializes the spoon model. It should not be created before. Otherwise, an exception occurs.
 * @param suspicious
 * @throws Exception
 */
public void initPopulation(List<SuspiciousCode> suspicious) throws Exception {
  if (MutationSupporter.getFactory().Type().getAll().isEmpty()) {
    initModel();
  }
  log.info(""String_Node_Str"" + suspicious.size());
  initializePopulation(suspicious);
  if (originalVariant == null) {
    log.error(""String_Node_Str"");
    return;
  }
  if (originalVariant.getGenList().isEmpty()) {
    log.error(""String_Node_Str"");
    return;
  }
  if (getFixSpace() != null) {
    List<?> classesForIngredients=retrieveClassesForIngredients();
    getFixSpace().defineSpace(classesForIngredients);
  }
  boolean validInstance=validateInstance(originalVariant);
  if (validInstance) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  ProgramVariant initvariant : variants) {
    initvariant.setFitness(originalVariant.getFitness());
  }
}"
61582,"/** 
 * The fix is a replacement of an return statement
 * @throws Exception
 */
public void testMath85issue280() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"",5);
}","/** 
 * The fix is a replacement of an return statement
 * @throws Exception
 */
@Test public void testMath85issue280() throws Exception {
  AstorMain main1=new AstorMain();
  String dep=new File(""String_Node_Str"").getAbsolutePath();
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"");
}"
61583,"protected GenOperationInstance createOperationForGen(Gen gen,MutantCtElement fix) throws IllegalAccessException {
  Gen genSusp=gen;
  GenProgMutationOperation operationType=GenProgMutationOperation.REPLACE;
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  operation.setModified(fix.getElement());
  return operation;
}","protected GenOperationInstance createOperationForGen(Gen gen,MutantCtElement fix) throws IllegalAccessException {
  Gen genSusp=gen;
  MutationOperation operationType=MutationExpression.REPLACE;
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  operation.setModified(fix.getElement());
  return operation;
}"
61584,"/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  Gen genSusp=gen;
  GenProgMutationOperation operationType=GenProgMutationOperation.REPLACE;
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  CtElement fix=null;
  int max=0;
  boolean continueSearching=true;
  while (continueSearching && max < mutations.size()) {
    fix=getFixMutation(mutations);
    continueSearching=alreadyApplied(gen,fix,operationType);
    max++;
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}","/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  Gen genSusp=gen;
  MutationOperation operationType=MutationExpression.REPLACE;
  if (!(genSusp.getCodeElement() instanceof CtIf)) {
    return null;
  }
  CtIf targetIF=(CtIf)genSusp.getCodeElement();
  CtElement cpar=targetIF.getParent();
  if ((cpar == null)) {
    return null;
  }
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetIF.getCondition());
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  List<MutantCtElement> mutations=getMutants(targetIF);
  log.debug(""String_Node_Str"" + mutations.size() + ""String_Node_Str""+ mutations);
  if (mutations == null || mutations.size() == 0) {
    return null;
  }
  CtElement fix=null;
  int max=0;
  boolean continueSearching=true;
  while (continueSearching && max < mutations.size()) {
    fix=getFixMutation(mutations);
    continueSearching=alreadyApplied(gen,fix,operationType);
    max++;
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}"
61585,"@Override public void transform(GenOperationInstance operation) throws Exception {
  Factory factory=MutationSupporter.getFactory();
  CtExpression rightTerm=null, leftTerm=null;
  try {
    boolean successful=false;
    CtExpression ctst=(CtExpression)operation.getOriginal();
    CtExpression fix=(CtExpression)operation.getModified();
    if (operation.getOperationApplied() == GenProgMutationOperation.REPLACE) {
      ctst.replace((CtExpression)fix);
      successful=true;
      operation.setSuccessfulyApplied((successful));
    }
    log.debug(""String_Node_Str"" + ctst.getParent().getSignature());
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    operation.setExceptionAtApplied(ex);
    operation.setSuccessfulyApplied(false);
  }
}","@Override public void transform(GenOperationInstance operation) throws Exception {
  Factory factory=MutationSupporter.getFactory();
  CtExpression rightTerm=null, leftTerm=null;
  try {
    boolean successful=false;
    CtExpression ctst=(CtExpression)operation.getOriginal();
    CtExpression fix=(CtExpression)operation.getModified();
    if (operation.getOperationApplied() == GenProgMutationOperation.REPLACE || operation.getOperationApplied() == MutationExpression.REPLACE) {
      ctst.replace((CtExpression)fix);
      successful=true;
      operation.setSuccessfulyApplied((successful));
    }
    log.debug(""String_Node_Str"" + ctst.getParent().getSignature());
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    operation.setExceptionAtApplied(ex);
    operation.setSuccessfulyApplied(false);
  }
}"
61586,"protected static int numberSolutions(String dir){
  File out=new File(dir + File.separator + ""String_Node_Str"");
  assertTrue(out.listFiles().length > 1);
  int cantSol=0;
  for (  File sol : out.listFiles()) {
    cantSol+=(sol.getName().startsWith(""String_Node_Str"")) ? 1 : 0;
  }
  return cantSol;
}","protected static int numberSolutions(String dir){
  File out=new File(dir + File.separator + ""String_Node_Str"");
  int cantSol=0;
  for (  File sol : out.listFiles()) {
    cantSol+=(sol.getName().startsWith(""String_Node_Str"")) ? 1 : 0;
  }
  return cantSol;
}"
61587,"@SuppressWarnings(""String_Node_Str"") @Test public void testMath2ExampleRemoveModeManySolutions() throws Exception {
  AstorMain main1=new AstorMain();
  String[] args=(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  main1.main(args);
  int numberSolution=numberSolutions(out + File.separator + ""String_Node_Str"");
  assertTrue(numberSolution > 1);
}","@SuppressWarnings(""String_Node_Str"") @Test public void testMath2ExampleRemoveModeManySolutions() throws Exception {
  AstorMain main1=new AstorMain();
  String[] args=(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  main1.main(args);
  int numberSolution=numberSolutions(out + File.separator + ""String_Node_Str"");
  assertTrue(numberSolution > 1);
}"
61588,"/** 
 * This method analyze the output of the junit executor (i.e.,  {@link JUnitTestExecutor}) and return an entity called TestResult with the result of the test execution
 * @param p
 * @return
 */
private TestResult getTestResult(Process p){
  TestResult tr=new TestResult();
  boolean success=false;
  String out=""String_Node_Str"";
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    while ((line=in.readLine()) != null) {
      out+=line + ""String_Node_Str"";
      if (line.startsWith(JUnitTestExecutor.OUTSEP)) {
        String[] s=line.split(JUnitTestExecutor.OUTSEP);
        int nrtc=Integer.valueOf(s[1]);
        tr.casesExecuted=nrtc;
        int failing=Integer.valueOf(s[2]);
        tr.failures=failing;
        if (!""String_Node_Str"".equals(s[3])) {
          String[] falinglist=s[3].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          String string : falinglist) {
            if (!string.trim().isEmpty())             tr.failTest.add(string.trim());
          }
        }
        success=true;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (success)   return tr;
 else {
    log.error(""String_Node_Str"" + getProcessError(p.getInputStream()) + ""String_Node_Str""+ getProcessError(p.getErrorStream()));
    return null;
  }
}","/** 
 * This method analyze the output of the junit executor (i.e.,  {@link JUnitTestExecutor}) and return an entity called TestResult with the result of the test execution
 * @param p
 * @return
 */
private TestResult getTestResult(Process p){
  TestResult tr=new TestResult();
  boolean success=false;
  String out=""String_Node_Str"";
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    while ((line=in.readLine()) != null) {
      out+=line + ""String_Node_Str"";
      if (line.startsWith(JUnitTestExecutor.OUTSEP)) {
        String[] s=line.split(JUnitTestExecutor.OUTSEP);
        int nrtc=Integer.valueOf(s[1]);
        tr.casesExecuted=nrtc;
        int failing=Integer.valueOf(s[2]);
        tr.failures=failing;
        if (!""String_Node_Str"".equals(s[3])) {
          String[] falinglist=s[3].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          String string : falinglist) {
            if (!string.trim().isEmpty())             tr.failTest.add(string.trim());
          }
        }
        success=true;
      }
    }
    in.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (success)   return tr;
 else {
    log.error(""String_Node_Str"" + out + ""String_Node_Str""+ getProcessError(p.getErrorStream()));
    return null;
  }
}"
61589,"@Test public void testSeedExampleKaliAddReturnVoid() throws Exception {
  this.testSeedExampleKali(""String_Node_Str"");
  validatePatchExistence(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"",3);
}","@Test public void testSeedExampleKaliAddReturnVoid() throws Exception {
  this.testSeedExampleKali(""String_Node_Str"");
  validatePatchExistence(ConfigurationProperties.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"");
}"
61590,"public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  line+=""String_Node_Str"";
  for (  ProgramVariant solutionVariant : variants) {
    line+=""String_Node_Str"";
    line+=""String_Node_Str"" + solutionVariant.getId() + ""String_Node_Str"";
    line+=""String_Node_Str"" + TimeUtil.getDateDiff(this.dateInitEvolution,solutionVariant.getBornDate(),TimeUnit.SECONDS);
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=solutionVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + genOperationInstance.getOperationApplied().toString() + ""String_Node_Str""+ genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"";
        if (genOperationInstance.getModified() != null)         line+=genOperationInstance.getModified().toString();
 else {
          line+=genOperationInstance.getOriginal().toString();
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"" + ((genOperationInstance.getIngredientScope() != null) ? genOperationInstance.getIngredientScope() : ""String_Node_Str"");
        List<?> ingredients=null;
        if (genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.REPLACE)) {
          ingredients=getFixSpace().getFixSpace(genOperationInstance.getOriginal(),genOperationInstance.getOriginal().getClass().getSimpleName());
        }
        ;
        if (genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.INSERT_AFTER) || genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.INSERT_BEFORE)) {
          ingredients=getFixSpace().getFixSpace(genOperationInstance.getOriginal());
        }
        ;
        if (ingredients != null) {
          line+=""String_Node_Str"" + ingredients.size();
        }
        line+=""String_Node_Str"";
      }
    }
  }
  return line;
}","public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  line+=""String_Node_Str"";
  for (  ProgramVariant solutionVariant : variants) {
    line+=""String_Node_Str"";
    line+=""String_Node_Str"" + solutionVariant.getId() + ""String_Node_Str"";
    line+=""String_Node_Str"" + TimeUtil.getDateDiff(this.dateInitEvolution,solutionVariant.getBornDate(),TimeUnit.SECONDS);
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=solutionVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + genOperationInstance.getOperationApplied().toString() + ""String_Node_Str""+ genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"";
        if (genOperationInstance.getModified() != null)         line+=genOperationInstance.getModified().toString();
 else {
          line+=genOperationInstance.getOriginal().toString();
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"" + ((genOperationInstance.getIngredientScope() != null) ? genOperationInstance.getIngredientScope() : ""String_Node_Str"");
        if (getFixSpace() != null) {
          List<?> ingredients=null;
          if (genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.REPLACE)) {
            ingredients=getFixSpace().getFixSpace(genOperationInstance.getOriginal(),genOperationInstance.getOriginal().getClass().getSimpleName());
          }
          if (genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.INSERT_AFTER) || genOperationInstance.getOperationApplied().equals(GenProgMutationOperation.INSERT_BEFORE)) {
            ingredients=getFixSpace().getFixSpace(genOperationInstance.getOriginal());
          }
          if (ingredients != null) {
            line+=""String_Node_Str"" + ingredients.size();
          }
        }
        line+=""String_Node_Str"";
      }
    }
  }
  return line;
}"
61591,"protected List retrieveClassesForIngredients(){
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.LOCAL))   return originalVariant.getAffectedClasses();
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.GLOBAL) || getFixSpace().strategy().equals(IngredientSpaceStrategy.PACKAGE))   return this.mutatorSupporter.getFactory().Type().getAll();
  return null;
}","protected List retrieveClassesForIngredients(){
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.LOCAL) || getFixSpace().strategy().equals(IngredientSpaceStrategy.PACKAGE))   return originalVariant.getAffectedClasses();
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.GLOBAL))   return this.mutatorSupporter.getFactory().Type().getAll();
  return null;
}"
61592,"/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    log.debug(""String_Node_Str"");
    return null;
  }
  CtElement targetStmt=genSusp.getCodeElement();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  setParentToGenOperator(operation,genSusp);
  Ingredient fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt,operationType);
    if (operationType.equals(GenProgMutationOperation.INSERT_AFTER)) {
      operation.setLocationInParent(operation.getLocationInParent() + 1);
    }
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getCodeElement().getClass().getSimpleName(),operationType);
  }
  if (!operationType.equals(GenProgMutationOperation.DELETE) && fix == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  if (fix != null) {
    operation.setModified(fix.getCode());
    operation.setIngredientScope(fix.getScope());
  }
  return operation;
}","/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    log.debug(""String_Node_Str"");
    return null;
  }
  CtElement targetStmt=genSusp.getCodeElement();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  setParentToGenOperator(operation,genSusp);
  Ingredient fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt,operationType);
    if (operationType.equals(GenProgMutationOperation.INSERT_AFTER)) {
      operation.setLocationInParent(operation.getLocationInParent() + 1);
    }
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getCodeElement().getClass().getSimpleName(),operationType);
  }
  if (!operationType.equals(GenProgMutationOperation.DELETE) && fix == null) {
    log.debug(""String_Node_Str"");
    return null;
  }
  if (fix != null) {
    operation.setModified(fix.getCode());
    operation.setIngredientScope(fix.getScope());
  }
  return operation;
}"
61593,"@Override public void process(CtStatement element){
  if (!(element instanceof CtBlock || element instanceof CtClass || element instanceof CtMethod|| element instanceof CtTry|| element instanceof CtCatch) && (element.getParent() instanceof CtBlock)) {
    add(element);
  }
}","@Override public void process(CtStatement element){
  if (!(element instanceof CtBlock || element instanceof CtClass || element instanceof CtMethod|| element instanceof CtTry|| element instanceof CtCatch) && ((element.getParent() instanceof CtBlock) || (element.getParent() instanceof CtCase) || (element.getParent() instanceof CtIf)|| (element.getParent() instanceof CtWhile))) {
    add(element);
  }
}"
61594,"/** 
 * @param removeMode
 * @return
 * @throws Exception
 */
public JGenProg createEngine(boolean removeMode) throws Exception {
  MutationSupporter mutSupporter=new MutationSupporter(getFactory());
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  JGenProg gploop=null;
  if (removeMode) {
    gploop=new JKali(mutSupporter,projectFacade);
    gploop.setRepairActionSpace(new RemoveRepairOperatorSpace());
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    gploop=new JGenProg(mutSupporter,projectFacade);
    gploop.setRepairActionSpace(new UniformRandomRepairOperatorSpace());
    String scope=ConfigurationProperties.properties.getProperty(""String_Node_Str"").toLowerCase();
    if (""String_Node_Str"".equals(scope)) {
      gploop.setFixspace(new GlobalBasicFixSpace(ingredientProcessors));
    }
 else     if (""String_Node_Str"".equals(scope)) {
      gploop.setFixspace(new PackageBasicFixSpace(ingredientProcessors));
    }
 else {
      gploop.setFixspace(new LocalFixSpace(ingredientProcessors));
    }
  }
  gploop.setPopulationControler(new FitnessPopulationController());
  ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  gploop.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
  gploop.setProgramValidator(new ProcessValidator());
  return gploop;
}","/** 
 * @param removeMode
 * @return
 * @throws Exception
 */
public JGenProg createEngine(boolean removeMode) throws Exception {
  MutationSupporter mutSupporter=new MutationSupporter(getFactory());
  List<AbstractFixSpaceProcessor<?>> ingredientProcessors=new ArrayList<AbstractFixSpaceProcessor<?>>();
  ingredientProcessors.add(new SingleStatementFixSpaceProcessor());
  JGenProg gploop=null;
  if (removeMode) {
    gploop=new JKali(mutSupporter,projectFacade);
    gploop.setRepairActionSpace(new RemoveRepairOperatorSpace());
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
    ConfigurationProperties.properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    gploop=new JGenProg(mutSupporter,projectFacade);
    gploop.setRepairActionSpace(new UniformRandomRepairOperatorSpace());
    String scope=ConfigurationProperties.properties.getProperty(""String_Node_Str"").toLowerCase();
    if (""String_Node_Str"".equals(scope)) {
      gploop.setFixspace(new GlobalBasicFixSpace(ingredientProcessors));
    }
 else     if (""String_Node_Str"".equals(scope)) {
      gploop.setFixspace(new PackageBasicFixSpace(ingredientProcessors));
    }
 else {
      gploop.setFixspace(new LocalFixSpace(ingredientProcessors));
    }
  }
  gploop.setPopulationControler(new FitnessPopulationController());
  gploop.setVariantFactory(new ProgramVariantFactory(ingredientProcessors));
  gploop.setProgramValidator(new ProcessValidator());
  return gploop;
}"
61595,"/** 
 * Compiles and validates a created variant.
 * @param parentVariant
 * @param generation
 * @return true if the variant is a solution. False otherwise.
 * @throws Exception
 */
public boolean processCreatedVariant(ProgramVariant programVariant,int generation) throws Exception {
  URL[] originalURL=projectFacade.getURLforMutation(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  CompilationResult compilation=mutatorSupporter.compileOnMemoryProgramVariant(programVariant,originalURL);
  boolean childCompiles=compilation.compiles();
  programVariant.setCompilation(compilation);
  String srcOutput=projectFacade.getInDirWithPrefix(programVariant.currentMutatorIdentifier());
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + programVariant.getId() + ""String_Node_Str""+ srcOutput);
    mutatorSupporter.saveSourceCodeOnDiskProgramVariant(programVariant,srcOutput);
  }
  if (childCompiles) {
    log.debug(""String_Node_Str"" + programVariant.getId());
    currentStat.numberOfRightCompilation++;
    currentStat.setCompiles(programVariant.getId());
    boolean validInstance=validateInstance(programVariant);
    log.debug(""String_Node_Str"" + validInstance + ""String_Node_Str""+ programVariant.getFitness());
    if (validInstance) {
      log.info(""String_Node_Str"" + programVariant.getId());
      saveStaticSucessful(generation);
      if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
        mutatorSupporter.saveSourceCodeOnDiskProgramVariant(programVariant,srcOutput);
        mutatorSupporter.saveSolutionData(programVariant,srcOutput,generation);
      }
      return true;
    }
  }
 else {
    log.debug(""String_Node_Str"" + programVariant.getId() + ""String_Node_Str"");
    currentStat.numberOfFailingCompilation++;
    currentStat.setNotCompiles(programVariant.getId());
    programVariant.setFitness(this.populationControler.getMaxFitnessValue());
  }
  return false;
}","/** 
 * Compiles and validates a created variant.
 * @param parentVariant
 * @param generation
 * @return true if the variant is a solution. False otherwise.
 * @throws Exception
 */
public boolean processCreatedVariant(ProgramVariant programVariant,int generation) throws Exception {
  URL[] originalURL=projectFacade.getURLforMutation(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
  CompilationResult compilation=mutatorSupporter.compileOnMemoryProgramVariant(programVariant,originalURL);
  boolean childCompiles=compilation.compiles();
  programVariant.setCompilation(compilation);
  String srcOutput=projectFacade.getInDirWithPrefix(programVariant.currentMutatorIdentifier());
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    log.debug(""String_Node_Str"" + programVariant.getId() + ""String_Node_Str""+ srcOutput);
    mutatorSupporter.saveSourceCodeOnDiskProgramVariant(programVariant,srcOutput);
  }
  if (childCompiles) {
    log.debug(""String_Node_Str"" + programVariant.getId());
    currentStat.numberOfRightCompilation++;
    currentStat.setCompiles(programVariant.getId());
    boolean validInstance=validateInstance(programVariant);
    log.debug(""String_Node_Str"" + validInstance + ""String_Node_Str""+ programVariant.getFitness());
    if (validInstance) {
      log.info(""String_Node_Str"" + programVariant.getId());
      saveStaticSucessful(generation);
      if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
        mutatorSupporter.saveSourceCodeOnDiskProgramVariant(programVariant,srcOutput);
        mutatorSupporter.saveSolutionData(programVariant,srcOutput,generation);
      }
      return true;
    }
  }
 else {
    log.debug(""String_Node_Str"" + programVariant.getId() + ""String_Node_Str""+ compilation.getErrorList());
    currentStat.numberOfFailingCompilation++;
    currentStat.setNotCompiles(programVariant.getId());
    programVariant.setFitness(this.populationControler.getMaxFitnessValue());
  }
  return false;
}"
61596,"protected List<Gen> getWeightGenList(List<Gen> genList){
  List<Gen> remaining=new ArrayList<Gen>(genList);
  List<Gen> solution=new ArrayList<Gen>();
  for (int i=0; i < genList.size(); i++) {
    List<WeightCtElement> we=new ArrayList<WeightCtElement>();
    double sum=0;
    for (    Gen gen : remaining) {
      double susp=((GenSuspicious)gen).getSuspicious().getSuspiciousValue();
      sum+=susp;
      WeightCtElement w=new WeightCtElement(gen,0);
      w.weight=susp;
      we.add(w);
    }
    for (    WeightCtElement weightCtElement : we) {
      weightCtElement.weight=weightCtElement.weight / sum;
    }
    WeightCtElement.feedAccumulative(we);
    WeightCtElement selected=WeightCtElement.selectElementWeightBalanced(we);
    Gen selectedg=(Gen)selected.element;
    remaining.remove(selectedg);
    solution.add(selectedg);
  }
  return solution;
}","protected List<Gen> getWeightGenList(List<Gen> genList){
  List<Gen> remaining=new ArrayList<Gen>(genList);
  List<Gen> solution=new ArrayList<Gen>();
  for (int i=0; i < genList.size(); i++) {
    List<WeightCtElement> we=new ArrayList<WeightCtElement>();
    double sum=0;
    for (    Gen gen : remaining) {
      double susp=((GenSuspicious)gen).getSuspicious().getSuspiciousValue();
      sum+=susp;
      WeightCtElement w=new WeightCtElement(gen,0);
      w.weight=susp;
      we.add(w);
    }
    if (sum != 0) {
      for (      WeightCtElement weightCtElement : we) {
        weightCtElement.weight=weightCtElement.weight / sum;
      }
      WeightCtElement.feedAccumulative(we);
      WeightCtElement selected=WeightCtElement.selectElementWeightBalanced(we);
      Gen selectedg=(Gen)selected.element;
      remaining.remove(selectedg);
      solution.add(selectedg);
    }
 else {
      solution.addAll(remaining);
      break;
    }
  }
  return solution;
}"
61597,"@Deprecated private boolean isValidConstructor(CtSimpleType<?> type){
  if (type instanceof CtClass<?>) {
    return ((CtClass<?>)type).getConstructor() != null || ((CtClass<?>)type).getConstructor(type.getFactory().Class().createReference(String.class)) != null;
  }
  return false;
}","private boolean isValidConstructor(CtSimpleType<?> type){
  if (type instanceof CtClass<?>) {
    CtClass<?> ctClass=((CtClass<?>)type);
    if (ctClass.getSuperclass() == null || !ctClass.getSuperclass().getSimpleName().equals(""String_Node_Str"")) {
      return true;
    }
    return ((CtClass<?>)type).getConstructor() != null || ((CtClass<?>)type).getConstructor(type.getFactory().Class().createReference(String.class)) != null;
  }
  return false;
}"
61598,"public List<String> retrieveRegressionTestCases(){
  String casesTest=ConfigurationProperties.properties.getProperty(""String_Node_Str"");
  String[] cases=casesTest.split(""String_Node_Str"");
  return Arrays.asList(cases);
}","/** 
 * Feed the list of test cases according to the definition POM/build.xml
 * @return 
 */
public List<String> retrieveRegressionTestCases(List<String> allTest){
  List<String> regressionCases=new ArrayList<String>();
  List<String> ignoreTestcases=retriveIgnoreTestCases();
  for (  String candidateTest : allTest) {
    CtSimpleType<?> type=MutationSupporter.getFactory().Type().get(candidateTest);
    if (type != null && (!type.getModifiers().contains(ModifierKind.ABSTRACT)) && !(type instanceof CtInterface) && isValidConstructor(type) && !(isIgnoredTestCase(type.getQualifiedName(),ignoreTestcases))) {
      regressionCases.add(type.getQualifiedName());
    }
  }
  return regressionCases;
}"
61599,"/** 
 * @param variant 
 * @param genList
 * @return
 */
protected List<Gen> getGenList(ProgramVariant variant){
  List<Gen> genList=variant.getGenList();
  String mode=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (""String_Node_Str"".equals(mode))   return genList;
  if (""String_Node_Str"".equals(mode))   return getWeightGenList(genList);
  if (""String_Node_Str"".equals(mode)) {
    List<Gen> shuffList=new ArrayList<Gen>(genList);
    Collections.shuffle(shuffList);
    return shuffList;
  }
  if (""String_Node_Str"".equals(mode)) {
    int i=variant.getLastGenAnalyzed();
    if (i < genList.size()) {
      variant.setLastGenAnalyzed(i + 1);
      return genList.subList(i,i + 1);
    }
    return Collections.EMPTY_LIST;
  }
  return genList;
}","/** 
 * @param variant
 * @param genList
 * @return
 */
protected List<Gen> getGenList(ProgramVariant variant){
  List<Gen> genList=variant.getGenList();
  String mode=ConfigurationProperties.getProperty(""String_Node_Str"");
  if (""String_Node_Str"".equals(mode))   return genList;
  if (""String_Node_Str"".equals(mode))   return getWeightGenList(genList);
  if (""String_Node_Str"".equals(mode)) {
    List<Gen> shuffList=new ArrayList<Gen>(genList);
    Collections.shuffle(shuffList);
    return shuffList;
  }
  if (""String_Node_Str"".equals(mode)) {
    int i=variant.getLastGenAnalyzed();
    if (i < genList.size()) {
      variant.setLastGenAnalyzed(i + 1);
      return genList.subList(i,i + 1);
    }
    return Collections.EMPTY_LIST;
  }
  return genList;
}"
61600,"protected void showResults(int generation){
  log.info(""String_Node_Str"");
  if (!this.solutions.isEmpty()) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + projectFacade.getProperties().getInDir());
  }
 else {
    log.info(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + this.solutions.size());
  for (  ProgramVariant variant : solutions) {
    log.info(""String_Node_Str"" + variant.getFitness() + ""String_Node_Str""+ variant);
  }
  log.info(""String_Node_Str"");
  for (  ProgramVariant variant : variants) {
    log.info(""String_Node_Str"" + variant.getFitness() + ""String_Node_Str""+ variant);
  }
  if (!solutions.isEmpty()) {
    log.info(""String_Node_Str"");
    log.info(mutatorSupporter.getSolutionData(solutions,generation));
  }
  FixLocationSpace space=this.getFixSpace();
  String s=""String_Node_Str"" + space.strategy() + ""String_Node_Str"";
  for (  Object l : space.getSpace().keySet()) {
    int ing=0;
    Map r=(Map)space.getSpace().get(l);
    String ty=""String_Node_Str"";
    for (    Object t : r.keySet()) {
      List ingredients=(List)r.get(t);
      ing+=ingredients.size();
    }
    s+=l + ""String_Node_Str"" + ing+ ""String_Node_Str""+ ty+ ""String_Node_Str"";
  }
  log.info(s);
  log.info(""String_Node_Str"");
  log.info(currentStat);
}","protected void showResults(int generation){
  log.info(""String_Node_Str"");
  if (!this.solutions.isEmpty()) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + projectFacade.getProperties().getInDir());
  }
 else {
    log.info(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + this.solutions.size());
  for (  ProgramVariant variant : solutions) {
    log.info(""String_Node_Str"" + variant.getFitness() + ""String_Node_Str""+ variant);
  }
  log.info(""String_Node_Str"");
  for (  ProgramVariant variant : variants) {
    log.info(""String_Node_Str"" + variant.getFitness() + ""String_Node_Str""+ variant);
  }
  if (!solutions.isEmpty()) {
    log.info(""String_Node_Str"");
    log.info(mutatorSupporter.getSolutionData(solutions,generation));
  }
  if (this.getFixSpace() != null) {
    FixLocationSpace space=this.getFixSpace();
    String s=""String_Node_Str"" + space.strategy() + ""String_Node_Str"";
    for (    Object l : space.getSpace().keySet()) {
      int ing=0;
      Map r=(Map)space.getSpace().get(l);
      String ty=""String_Node_Str"";
      for (      Object t : r.keySet()) {
        List ingredients=(List)r.get(t);
        ing+=ingredients.size();
      }
      s+=l + ""String_Node_Str"" + ing+ ""String_Node_Str""+ ty+ ""String_Node_Str"";
    }
    log.info(s);
  }
  log.info(""String_Node_Str"");
  log.info(currentStat);
}"
61601,"public TestResult execute(String path,List<String> classesToExecute,int waitTime){
  Process p=null;
  if (!ProjectConfiguration.validJDK())   throw new IllegalArgumentException(""String_Node_Str"");
  String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
  javaPath+=File.separator + ""String_Node_Str"";
  String systemcp=System.getProperty(""String_Node_Str"");
  path=systemcp + File.pathSeparator + path;
  List<String> cls=new ArrayList<>(classesToExecute);
  try {
    List<String> command=new ArrayList<String>();
    command.add(javaPath);
    command.add(""String_Node_Str"");
    command.add(path);
    command.add(JUnitTestExecutor.class.getName());
    command.addAll(cls);
    ProcessBuilder pb=new ProcessBuilder(command.toArray(new String[command.size()]));
    pb.redirectOutput();
    pb.redirectErrorStream(true);
    long t_start=System.currentTimeMillis();
    p=pb.start();
    String cm2=command.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    log.debug(""String_Node_Str"" + cm2);
    Worker worker=new Worker(p);
    worker.start();
    worker.join(waitTime);
    long t_end=System.currentTimeMillis();
    int exitvalue=p.exitValue();
    TestResult tr=getTestResult(p);
    p.destroy();
    log.debug(""String_Node_Str"" + ((t_end - t_start) / 1000) + ""String_Node_Str"");
    return tr;
  }
 catch (  IllegalThreadStateException|IOException|InterruptedException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    if (p != null)     p.destroy();
    return null;
  }
}","public TestResult execute(String path,List<String> classesToExecute,int waitTime){
  Process p=null;
  if (!ProjectConfiguration.validJDK())   throw new IllegalArgumentException(""String_Node_Str"");
  String javaPath=ConfigurationProperties.getProperty(""String_Node_Str"");
  javaPath+=File.separator + ""String_Node_Str"";
  String systemcp=System.getProperty(""String_Node_Str"");
  path=systemcp + File.pathSeparator + path;
  List<String> cls=new ArrayList<>(classesToExecute);
  try {
    List<String> command=new ArrayList<String>();
    command.add(javaPath);
    command.add(""String_Node_Str"");
    command.add(path);
    command.add(JUnitTestExecutor.class.getName());
    command.addAll(cls);
    ProcessBuilder pb=new ProcessBuilder(command.toArray(new String[command.size()]));
    pb.redirectOutput();
    pb.redirectErrorStream(true);
    long t_start=System.currentTimeMillis();
    p=pb.start();
    String cm2=command.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    log.debug(""String_Node_Str"" + cm2);
    Worker worker=new Worker(p);
    worker.start();
    worker.join(waitTime);
    long t_end=System.currentTimeMillis();
    int exitvalue=p.exitValue();
    TestResult tr=getTestResult(p);
    p.destroy();
    log.debug(""String_Node_Str"" + ((t_end - t_start) / 1000) + ""String_Node_Str"");
    return tr;
  }
 catch (  IllegalArgumentException|IOException|InterruptedException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    if (p != null)     p.destroy();
    return null;
  }
}"
61602,"protected List retrieveClassesForIngredients(){
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.LOCAL))   return originalVariant.getAffectedClasses();
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.GLOBAL))   return this.mutatorSupporter.getFactory().Type().getAll();
  return null;
}","protected List retrieveClassesForIngredients(){
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.LOCAL))   return originalVariant.getAffectedClasses();
  if (getFixSpace().strategy().equals(IngredientSpaceStrategy.GLOBAL) || getFixSpace().strategy().equals(IngredientSpaceStrategy.PACKAGE))   return this.mutatorSupporter.getFactory().Type().getAll();
  return null;
}"
61603,"/** 
 * Return fix ingredient considering cache.
 * @param gen
 * @param targetStmt
 * @param operationType 
 * @param elementsFromFixSpace
 * @return
 */
protected CtElement getFixIngredient(Gen gen,CtElement targetStmt,String type,GenProgMutationOperation operationType){
  CtElement fix=null;
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=0;
  List<?> ingredients=null;
  if (type == null) {
    ingredients=this.fixspace.getFixSpace(gen.getCodeElement());
  }
 else {
    ingredients=this.fixspace.getFixSpace(gen.getCodeElement(),type);
  }
  elementsFromFixSpace=(ingredients == null) ? 0 : ingredients.size();
  while (continueSearching && attempts < elementsFromFixSpace) {
    if (type == null) {
      fix=this.fixspace.getElementFromSpace(gen.getCodeElement());
    }
 else {
      fix=this.fixspace.getElementFromSpace(gen.getCodeElement(),type);
    }
    if (fix == null) {
      return null;
    }
    attempts++;
    INGREDIENT_STATUS fixStat=null;
    boolean alreadyApplied=alreadyApplied(gen,fix,operationType), ccompatibleNameTypes=false;
    if (!alreadyApplied && !fix.getSignature().equals(targetStmt.getSignature())) {
      ccompatibleNameTypes=VariableResolver.fitInPlace(gen.getContextOfGen(),fix);
      log.info(""String_Node_Str"" + ""String_Node_Str"" + ccompatibleNameTypes);
      continueSearching=!ccompatibleNameTypes;
      fixStat=(ccompatibleNameTypes) ? INGREDIENT_STATUS.compiles : INGREDIENT_STATUS.notcompiles;
    }
 else     fixStat=INGREDIENT_STATUS.alreadyanalyzed;
    currentStat.sizeSpace.add(new StatSpaceSize(gen.getProgramVariant().getId(),gen.getCodeElement().getClass().getSimpleName(),elementsFromFixSpace,(fix != null) ? fix.getClass().getSimpleName() : ""String_Node_Str"",fixStat));
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"" + targetStmt.getSignature());
    return null;
  }
  return fix;
}","/** 
 * Return fix ingredient considering cache.
 * @param gen
 * @param targetStmt
 * @param operationType 
 * @param elementsFromFixSpace
 * @return
 */
protected CtElement getFixIngredient(Gen gen,CtElement targetStmt,String type,GenProgMutationOperation operationType){
  CtElement fix=null;
  int attempts=0;
  boolean continueSearching=true;
  int elementsFromFixSpace=0;
  List<?> ingredients=null;
  if (type == null) {
    ingredients=this.fixspace.getFixSpace(gen.getCodeElement());
  }
 else {
    ingredients=this.fixspace.getFixSpace(gen.getCodeElement(),type);
  }
  elementsFromFixSpace=(ingredients == null) ? 0 : ingredients.size();
  while (continueSearching && attempts < elementsFromFixSpace) {
    if (type == null) {
      fix=this.fixspace.getElementFromSpace(gen.getCodeElement());
    }
 else {
      fix=this.fixspace.getElementFromSpace(gen.getCodeElement(),type);
    }
    if (fix == null) {
      return null;
    }
    attempts++;
    INGREDIENT_STATUS fixStat=null;
    boolean alreadyApplied=alreadyApplied(gen,fix,operationType), ccompatibleNameTypes=false;
    if (!alreadyApplied && !fix.getSignature().equals(targetStmt.getSignature())) {
      ccompatibleNameTypes=VariableResolver.fitInPlace(gen.getContextOfGen(),fix);
      continueSearching=!ccompatibleNameTypes;
      fixStat=(ccompatibleNameTypes) ? INGREDIENT_STATUS.compiles : INGREDIENT_STATUS.notcompiles;
    }
 else {
      fixStat=INGREDIENT_STATUS.alreadyanalyzed;
    }
    currentStat.sizeSpace.add(new StatSpaceSize(gen.getProgramVariant().getId(),gen.getCodeElement().getClass().getSimpleName(),elementsFromFixSpace,((fix != null) ? fix.getClass().getSimpleName() : ""String_Node_Str""),fixStat,((fix != null) ? determine(gen.getCodeElement(),fix) : IngredientSpaceStrategy.GLOBAL)));
  }
  if (continueSearching) {
    log.debug(""String_Node_Str"" + targetStmt.getSignature());
    return null;
  }
  return fix;
}"
61604,"/** 
 * For a given VariableAccess, we search the list of Variables contains compatible types (i.e. sub types)
 * @param varContext
 * @param vartofind
 * @return
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static List<CtVariable> compatiblesSubType(List<CtVariable> varContext,CtTypeReference typeToFind){
  List<CtVariable> result=new ArrayList<CtVariable>();
  for (  CtVariable ctVariable_i : varContext) {
    CtTypeReference typeref_i=ctVariable_i.getType();
    try {
      if (typeref_i.isSubtypeOf(typeToFind)) {
        result.add(ctVariable_i);
      }
    }
 catch (    Exception e) {
    }
  }
  return result;
}","/** 
 * For a given VariableAccess, we search the list of Variables contains compatible types (i.e. sub types)
 * @param varContext
 * @param vartofind
 * @return
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static List<CtVariable> compatiblesSubType(List<CtVariable> varContext,CtTypeReference typeToFind){
  List<CtVariable> result=new ArrayList<CtVariable>();
  for (  CtVariable ctVariable_i : varContext) {
    CtTypeReference typeref_i=ctVariable_i.getType();
    try {
      if (typeref_i.isSubtypeOf(typeToFind)) {
        result.add(ctVariable_i);
      }
    }
 catch (    Exception e) {
      if (typeref_i.getDeclaration().getQualifiedName().equals(typeToFind.getDeclaration().getQualifiedName()))       result.add(ctVariable_i);
    }
  }
  return result;
}"
61605,"/** 
 * Return true if the CtElement is valid according to a set of variables (the context). In this case valid means all variables referenced by the expression can be REPLACED by one from  the context.  It not take in account the variable names. Only types
 * @param varContext
 * @param element
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static boolean fitInPlace(List<CtVariable> varContext,CtElement element){
  if (element == null)   return true;
  if (element instanceof CtVariableAccess) {
    return matchVariable(varContext,(CtVariableAccess)element);
  }
  if (element instanceof CtReturn<?>) {
    return fitInPlace(varContext,((CtReturn)element).getReturnedExpression());
  }
  if (element instanceof CtInvocation) {
    CtInvocation inv=(CtInvocation)element;
    CtExpression target=inv.getTarget();
    boolean fitTarget=true;
    if (target != null) {
      fitTarget=fitInPlace(varContext,target);
    }
    List<CtExpression> args=inv.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtConstructorCall) {
    CtConstructorCall ccall=(CtConstructorCall)element;
    boolean fitTarget=true;
    List<CtExpression> args=ccall.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtAssignment) {
    CtAssignment assig=(CtAssignment)element;
    CtExpression expleft=assig.getAssigned();
    CtExpression expright=assig.getAssignment();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtBinaryOperator) {
    CtBinaryOperator binop=(CtBinaryOperator)element;
    CtExpression expleft=binop.getLeftHandOperand();
    CtExpression expright=binop.getRightHandOperand();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtUnaryOperator) {
    CtUnaryOperator upnop=(CtUnaryOperator)element;
    CtExpression expleft=upnop.getOperand();
    return fitInPlace(varContext,expleft);
  }
  if (element instanceof CtBlock) {
    boolean fitTarget=true;
    List<CtStatement> args=((CtBlock)element).getStatements();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtIf) {
    CtIf el=(CtIf)element;
    boolean fitTarget=fitInPlace(varContext,el.getCondition());
    if (fitTarget) {
      fitInPlace(varContext,el.getThenStatement());
      fitInPlace(varContext,el.getElseStatement());
    }
    return fitTarget;
  }
  if (element instanceof CtWhile) {
    CtWhile el=(CtWhile)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtFor) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtForEach) {
    CtForEach el=(CtForEach)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtDo) {
    CtDo el=(CtDo)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtThrow) {
    CtThrow el=(CtThrow)element;
    boolean fitTarget=fitInPlace(varContext,el.getThrownExpression());
    return fitTarget;
  }
  if (element instanceof CtLiteral) {
    return true;
  }
  if (element instanceof CtLocalVariable) {
    CtLocalVariable el=(CtLocalVariable)element;
    fitInPlace(varContext,el.getDefaultExpression());
    return true;
  }
  if (element instanceof CtTypeAccess)   return true;
  logger.error(""String_Node_Str"" + element.getClass().getName() + ""String_Node_Str""+ element.getSignature());
  return true;
}","/** 
 * Return true if the CtElement is valid according to a set of variables (the context). In this case valid means all variables referenced by the expression can be REPLACED by one from  the context.  It not take in account the variable names. Only types
 * @param varContext
 * @param element
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static boolean fitInPlace(List<CtVariable> varContext,CtElement element){
  if (element == null)   return true;
  if (element instanceof CtVariableAccess) {
    return matchVariable(varContext,(CtVariableAccess)element);
  }
  if (element instanceof CtArrayAccess) {
    CtArrayAccess el=(CtArrayAccess)element;
    boolean fitTarget=fitInPlace(varContext,el.getIndexExpression());
    if (fitTarget)     fitTarget=fitInPlace(varContext,el.getTarget());
    return fitTarget;
  }
  if (element instanceof CtReturn<?>) {
    return fitInPlace(varContext,((CtReturn)element).getReturnedExpression());
  }
  if (element instanceof CtInvocation) {
    CtInvocation inv=(CtInvocation)element;
    CtExpression target=inv.getTarget();
    boolean fitTarget=true;
    if (target != null) {
      fitTarget=fitInPlace(varContext,target);
    }
    List<CtExpression> args=inv.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtConstructorCall) {
    CtConstructorCall ccall=(CtConstructorCall)element;
    boolean fitTarget=true;
    List<CtExpression> args=ccall.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtAssignment) {
    CtAssignment assig=(CtAssignment)element;
    CtExpression expleft=assig.getAssigned();
    CtExpression expright=assig.getAssignment();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtBinaryOperator) {
    CtBinaryOperator binop=(CtBinaryOperator)element;
    CtExpression expleft=binop.getLeftHandOperand();
    CtExpression expright=binop.getRightHandOperand();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtUnaryOperator) {
    CtUnaryOperator upnop=(CtUnaryOperator)element;
    CtExpression expleft=upnop.getOperand();
    return fitInPlace(varContext,expleft);
  }
  if (element instanceof CtBlock) {
    boolean fitTarget=true;
    List<CtStatement> args=((CtBlock)element).getStatements();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtIf) {
    CtIf el=(CtIf)element;
    boolean fitTarget=fitInPlace(varContext,el.getCondition());
    if (fitTarget) {
      fitInPlace(varContext,el.getThenStatement());
      fitInPlace(varContext,el.getElseStatement());
    }
    return fitTarget;
  }
  if (element instanceof CtWhile) {
    CtWhile el=(CtWhile)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtFor) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtForEach) {
    CtForEach el=(CtForEach)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtDo) {
    CtDo el=(CtDo)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtThrow) {
    CtThrow el=(CtThrow)element;
    boolean fitTarget=fitInPlace(varContext,el.getThrownExpression());
    return fitTarget;
  }
  if (element instanceof CtLiteral) {
    return true;
  }
  if (element instanceof CtLocalVariable) {
    CtLocalVariable el=(CtLocalVariable)element;
    fitInPlace(varContext,el.getDefaultExpression());
    return true;
  }
  if (element instanceof CtTypeAccess)   return true;
  logger.error(""String_Node_Str"" + element.getClass().getName() + ""String_Node_Str""+ element.getSignature());
  return true;
}"
61606,"@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ genType+ ""String_Node_Str""+ Integer.toString(this.size())+ ""String_Node_Str""+ states+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + id + ""String_Node_Str""+ genType+ ""String_Node_Str""+ Integer.toString(this.size())+ ""String_Node_Str""+ states+ ""String_Node_Str""+ ingredientSpaceStrategy.toString()+ ""String_Node_Str"";
}"
61607,"public static void validatePatchExistence(String dir){
  File out=new File(dir + File.separator + ""String_Node_Str"");
  assertTrue(out.listFiles().length > 1);
  boolean isSol=false;
  for (  File sol : out.listFiles()) {
    isSol|=sol.getName().startsWith(""String_Node_Str"");
  }
  assertTrue(isSol);
}","public static void validatePatchExistence(String dir,int numberSolution){
  File out=new File(dir + File.separator + ""String_Node_Str"");
  assertTrue(out.listFiles().length > 1);
  int cantSol=0;
  for (  File sol : out.listFiles()) {
    cantSol+=(sol.getName().startsWith(""String_Node_Str"")) ? 1 : 0;
  }
  Assert.assertEquals(numberSolution,cantSol);
}"
61608,"@Test public void testMath85issue280() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
}","/** 
 * The fix is a replacement of an return statement
 * @throws Exception
 */
@Test public void testMath85issue280() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
}"
61609,"/** 
 * Math 70 bug can be fixed by replacing a method invocation. +        return solve(f, min, max); -      return solve(min, max);
 * @throws Exception
 */
@Test public void testMath70() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  File out=new File(""String_Node_Str"");
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"");
}","/** 
 * Math 70 bug can be fixed by replacing a method invocation. +        return solve(f, min, max); -      return solve(min, max);
 * @throws Exception
 */
@Test public void testMath70() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  File out=new File(""String_Node_Str"");
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
  validatePatchExistence(out + File.separator + ""String_Node_Str"");
}"
61610,"@Test public void testMath40ModeStatement() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
}","/** 
 * The fix is the addition of an Assignment: signChangeIndex = 2
 * @throws Exception
 */
@Test public void testMath40ModeStatement() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String dep=""String_Node_Str"";
  File out=new File(""String_Node_Str"");
  String[] args=new String[]{""String_Node_Str"",dep,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",out.getAbsolutePath()};
  System.out.println(Arrays.toString(args));
  main1.main(args);
  validatePatchExistence(out.getPath() + File.separator + ""String_Node_Str"",1);
}"
61611,"/** 
 * Return true if the CtElement is valid according to a set of variables (the context). In this case valid means all variables referenced by the expression can be REPLACED by one from  the context.  It not take in account the variable names. Only types
 * @param varContext
 * @param element
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static boolean fitInPlace(List<CtVariable> varContext,CtElement element){
  if (element == null)   return true;
  if (element instanceof CtVariableAccess) {
    return matchVariable(varContext,(CtVariableAccess)element);
  }
  if (element instanceof CtReturn<?>) {
    return fitInPlace(varContext,((CtReturn)element).getReturnedExpression());
  }
  if (element instanceof CtInvocation) {
    CtInvocation inv=(CtInvocation)element;
    CtExpression target=inv.getTarget();
    boolean fitTarget=true;
    if (target != null) {
      fitTarget=fitInPlace(varContext,target);
    }
    List<CtExpression> args=inv.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtConstructorCall) {
    CtConstructorCall ccall=(CtConstructorCall)element;
    boolean fitTarget=true;
    List<CtExpression> args=ccall.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtAssignment) {
    CtAssignment assig=(CtAssignment)element;
    CtExpression expleft=assig.getAssigned();
    CtExpression expright=assig.getAssignment();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtBinaryOperator) {
    CtBinaryOperator binop=(CtBinaryOperator)element;
    CtExpression expleft=binop.getLeftHandOperand();
    CtExpression expright=binop.getRightHandOperand();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtUnaryOperator) {
    CtUnaryOperator upnop=(CtUnaryOperator)element;
    CtExpression expleft=upnop.getOperand();
    return fitInPlace(varContext,expleft);
  }
  if (element instanceof CtBlock) {
    boolean fitTarget=true;
    List<CtStatement> args=((CtBlock)element).getStatements();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtIf) {
    CtIf el=(CtIf)element;
    boolean fitTarget=fitInPlace(varContext,el.getCondition());
    if (fitTarget) {
      fitInPlace(varContext,el.getThenStatement());
      fitInPlace(varContext,el.getElseStatement());
    }
    return fitTarget;
  }
  if (element instanceof CtWhile) {
    CtWhile el=(CtWhile)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtFor) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtForEach) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtDo) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtThrow) {
    CtThrow el=(CtThrow)element;
    boolean fitTarget=fitInPlace(varContext,el.getThrownExpression());
    return fitTarget;
  }
  if (element instanceof CtLiteral) {
    return true;
  }
  if (element instanceof CtLocalVariable) {
    CtLocalVariable el=(CtLocalVariable)element;
    fitInPlace(varContext,el.getDefaultExpression());
    return true;
  }
  if (element instanceof CtTypeAccess)   return true;
  logger.error(""String_Node_Str"" + element.getClass().getName() + ""String_Node_Str""+ element.getSignature());
  return true;
}","/** 
 * Return true if the CtElement is valid according to a set of variables (the context). In this case valid means all variables referenced by the expression can be REPLACED by one from  the context.  It not take in account the variable names. Only types
 * @param varContext
 * @param element
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static boolean fitInPlace(List<CtVariable> varContext,CtElement element){
  if (element == null)   return true;
  if (element instanceof CtVariableAccess) {
    return matchVariable(varContext,(CtVariableAccess)element);
  }
  if (element instanceof CtReturn<?>) {
    return fitInPlace(varContext,((CtReturn)element).getReturnedExpression());
  }
  if (element instanceof CtInvocation) {
    CtInvocation inv=(CtInvocation)element;
    CtExpression target=inv.getTarget();
    boolean fitTarget=true;
    if (target != null) {
      fitTarget=fitInPlace(varContext,target);
    }
    List<CtExpression> args=inv.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtConstructorCall) {
    CtConstructorCall ccall=(CtConstructorCall)element;
    boolean fitTarget=true;
    List<CtExpression> args=ccall.getArguments();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtAssignment) {
    CtAssignment assig=(CtAssignment)element;
    CtExpression expleft=assig.getAssigned();
    CtExpression expright=assig.getAssignment();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtBinaryOperator) {
    CtBinaryOperator binop=(CtBinaryOperator)element;
    CtExpression expleft=binop.getLeftHandOperand();
    CtExpression expright=binop.getRightHandOperand();
    return fitInPlace(varContext,expleft) && fitInPlace(varContext,expright);
  }
  if (element instanceof CtUnaryOperator) {
    CtUnaryOperator upnop=(CtUnaryOperator)element;
    CtExpression expleft=upnop.getOperand();
    return fitInPlace(varContext,expleft);
  }
  if (element instanceof CtBlock) {
    boolean fitTarget=true;
    List<CtStatement> args=((CtBlock)element).getStatements();
    for (int i=0; fitTarget && i < args.size(); i++) {
      fitTarget=fitInPlace(varContext,args.get(i));
    }
    return fitTarget;
  }
  if (element instanceof CtIf) {
    CtIf el=(CtIf)element;
    boolean fitTarget=fitInPlace(varContext,el.getCondition());
    if (fitTarget) {
      fitInPlace(varContext,el.getThenStatement());
      fitInPlace(varContext,el.getElseStatement());
    }
    return fitTarget;
  }
  if (element instanceof CtWhile) {
    CtWhile el=(CtWhile)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtFor) {
    CtFor el=(CtFor)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtForEach) {
    CtForEach el=(CtForEach)element;
    boolean fitTarget=fitInPlace(varContext,el.getExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtDo) {
    CtDo el=(CtDo)element;
    boolean fitTarget=fitInPlace(varContext,el.getLoopingExpression());
    if (fitTarget) {
      fitInPlace(varContext,el.getBody());
    }
    return fitTarget;
  }
  if (element instanceof CtThrow) {
    CtThrow el=(CtThrow)element;
    boolean fitTarget=fitInPlace(varContext,el.getThrownExpression());
    return fitTarget;
  }
  if (element instanceof CtLiteral) {
    return true;
  }
  if (element instanceof CtLocalVariable) {
    CtLocalVariable el=(CtLocalVariable)element;
    fitInPlace(varContext,el.getDefaultExpression());
    return true;
  }
  if (element instanceof CtTypeAccess)   return true;
  logger.error(""String_Node_Str"" + element.getClass().getName() + ""String_Node_Str""+ element.getSignature());
  return true;
}"
61612,"public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  try {
    for (    CtClass ctClass : ctClassList) {
      this.getProcessingManager().process(ctClass);
      String[] tmp=ctClass.getQualifiedName().split(""String_Node_Str"");
      char[][] pack=new char[tmp.length - 1][];
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    List<String> errors=new ArrayList<String>();
    errors.add(e.getMessage());
    CompilationResult rbc=new CompilationResult(null,true,errors);
    return rbc;
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String s=""String_Node_Str"";
  for (  URL url : cp) {
    s+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(s);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}","public CompilationResult compileOnMemory(Collection<CtClass> ctClassList,URL[] cp){
  Map<String,String> toCompile=new HashMap<String,String>();
  prettyPrinter=new DefaultJavaPrettyPrinter(getEnvironment());
  try {
    for (    CtClass ctClass : ctClassList) {
      this.getProcessingManager().process(ctClass);
      String[] tmp=ctClass.getQualifiedName().split(""String_Node_Str"");
      char[][] pack=new char[tmp.length - 1][];
      toCompile.put(ctClass.getQualifiedName(),sourceForModelledClass(ctClass));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    List<String> errors=new ArrayList<String>();
    errors.add(e.getMessage());
    CompilationResult rbc=new CompilationResult(null,errors);
    return rbc;
  }
  List<String> cps=new ArrayList<>();
  cps.add(""String_Node_Str"");
  String s=""String_Node_Str"";
  for (  URL url : cp) {
    s+=((url.getPath()) + File.pathSeparator);
  }
  cps.add(s);
  CompilationResult rbc=dcc.javaBytecodeFor(toCompile,new HashMap<String,byte[]>(),cps);
  return rbc;
}"
61613,"public synchronized CompilationResult javaBytecodeFor(Map<String,String> qualifiedNameAndContent,Map<String,byte[]> compiledDependencies,List<String> options){
  diagnostics=new DiagnosticCollector<JavaFileObject>();
  fileManager.classFiles().clear();
  Collection<JavaFileObject> units=addCompilationUnits(qualifiedNameAndContent);
  fileManager.addCompiledClasses(compiledDependencies);
  CompilationTask task=compiler().getTask(null,fileManager,diagnostics(),options,null,units);
  runCompilationTask(task);
  Map<String,byte[]> bytecodes=collectBytecodes(qualifiedNameAndContent);
  List<String> errors=new ArrayList<>();
  copyErrors(errors,diagnostics);
  CompilationResult cr=new CompilationResult(bytecodes,!diagnostics.getDiagnostics().isEmpty(),errors);
  return cr;
}","public synchronized CompilationResult javaBytecodeFor(Map<String,String> qualifiedNameAndContent,Map<String,byte[]> compiledDependencies,List<String> options){
  diagnostics=new DiagnosticCollector<JavaFileObject>();
  fileManager.classFiles().clear();
  Collection<JavaFileObject> units=addCompilationUnits(qualifiedNameAndContent);
  fileManager.addCompiledClasses(compiledDependencies);
  CompilationTask task=compiler().getTask(null,fileManager,diagnostics(),options,null,units);
  runCompilationTask(task);
  Map<String,byte[]> bytecodes=collectBytecodes(qualifiedNameAndContent);
  List<String> errors=new ArrayList<>();
  copyErrors(errors,diagnostics);
  CompilationResult cr=new CompilationResult(bytecodes,errors);
  return cr;
}"
61614,"private void copyErrors(List<String> errors,DiagnosticCollector<JavaFileObject> diagnostics2){
  for (  Diagnostic d : diagnostics2.getDiagnostics()) {
    errors.add(d.toString());
  }
}","private void copyErrors(List<String> errors,DiagnosticCollector<JavaFileObject> diagnostics2){
  for (  Diagnostic d : diagnostics2.getDiagnostics()) {
    if (d.getKind() == Kind.ERROR || d.getKind() == Kind.MANDATORY_WARNING) {
      errors.add(d.toString());
    }
  }
}"
61615,"/** 
 * Apply a given Mutation to the node referenced by the operation
 * @param operation
 * @throws IllegalAccessException
 */
public void transform(GenOperationInstance operation) throws IllegalAccessException {
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
    try {
switch (operator) {
case DELETE:
        parentBlock.getStatements().remove(ctst);
      successful=true;
    break;
case INSERT_BEFORE:
  ctst.insertBefore((CtStatement)fix);
successful=true;
break;
case INSERT_AFTER:
ctst.insertAfter((CtStatement)fix);
successful=true;
break;
case REPLACE:
ctst.replace((CtStatement)fix);
successful=true;
break;
default :
log.error(""String_Node_Str"");
break;
}
operation.setSuccessfulyApplied(successful);
}
 catch (Exception ex) {
log.error(""String_Node_Str"" + ex.getMessage());
operation.setExceptionAtApplied(ex);
operation.setSuccessfulyApplied(false);
}
}
}","/** 
 * Apply a given Mutation to the node referenced by the operation
 * @param operation
 * @throws IllegalAccessException
 */
public void transform(GenOperationInstance operation) throws IllegalAccessException {
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
    successful=true;
    try {
switch (operator) {
case DELETE:
        parentBlock.getStatements().remove(ctst);
      break;
case INSERT_BEFORE:
    ctst.insertBefore((CtStatement)fix);
  fix.setParent(parentBlock);
break;
case INSERT_AFTER:
ctst.insertAfter((CtStatement)fix);
fix.setParent(parentBlock);
break;
case REPLACE:
ctst.replace((CtStatement)fix);
fix.setParent(parentBlock);
break;
default :
log.error(""String_Node_Str"");
successful=false;
break;
}
operation.setSuccessfulyApplied(successful);
}
 catch (Exception ex) {
log.error(""String_Node_Str"" + ex.getMessage());
operation.setExceptionAtApplied(ex);
operation.setSuccessfulyApplied(false);
}
}
}"
61616,"public String toString(){
  return ""String_Node_Str"" + this.getOperationApplied() + ""String_Node_Str""+ StringUtil.trunc(this.original)+ ""String_Node_Str""+ StringUtil.trunc(modified)+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + this.getOperationApplied() + ""String_Node_Str""+ StringUtil.trunc(this.original)+ ""String_Node_Str""+ StringUtil.trunc(modified)+ ""String_Node_Str""+ getLocationInParent()+ ""String_Node_Str""+ StringUtil.trunc(parentBlock)+ ""String_Node_Str"";
}"
61617,"protected void undoSingleGeneration(ProgramVariant instance,int genI){
  List<GenOperationInstance> operations=instance.getOperations().get(genI);
  if (operations == null || operations.isEmpty()) {
    return;
  }
  for (int i=operations.size() - 1; i >= 0; i--) {
    GenOperationInstance genOperation=operations.get(i);
    undoOperationToSpoonElement(genOperation);
  }
}","protected void undoSingleGeneration(ProgramVariant instance,int genI){
  List<GenOperationInstance> operations=instance.getOperations().get(genI);
  if (operations == null || operations.isEmpty()) {
    return;
  }
  for (int i=operations.size() - 1; i >= 0; i--) {
    GenOperationInstance genOperation=operations.get(i);
    log.debug(""String_Node_Str"" + genI + ""String_Node_Str""+ genOperation);
    undoOperationToSpoonElement(genOperation);
  }
}"
61618,"/** 
 * Process a generation i: loops over all instances
 * @param generation
 * @return
 * @throws Exception
 */
public boolean processGenerations(int generation) throws Exception {
  log.info(""String_Node_Str"" + generation);
  boolean foundSolution=false;
  List<ProgramVariant> temporalInstances=new ArrayList<ProgramVariant>();
  currentStat.numberGenerations++;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + parentVariant);
    ProgramVariant newVariant=createNewProgramVariant(parentVariant,generation);
    if (newVariant == null) {
      continue;
    }
    processCreatedVariant(newVariant,generation);
    if (newVariant.getCompilation().compiles()) {
      temporalInstances.add(newVariant);
      foundSolution|=newVariant.isSolution();
    }
    reverseOperationInModel(newVariant,generation);
    if (foundSolution && ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
      break;
    }
  }
  variants=populationControler.selectProgramVariantsForNextGeneration(variants,temporalInstances,this.solutions,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ProgramVariant parentNew=this.variantFactory.createProgramVariantFromAnother(originalVariant,generation);
    parentNew.getOperations().clear();
    parentNew.setParent(null);
    if (variants.size() != 0) {
      variants.remove(variants.size() - 1);
    }
    variants.add(parentNew);
  }
  return foundSolution;
}","/** 
 * Process a generation i: loops over all instances
 * @param generation
 * @return
 * @throws Exception
 */
public boolean processGenerations(int generation) throws Exception {
  log.info(""String_Node_Str"" + generation);
  boolean foundSolution=false;
  List<ProgramVariant> temporalInstances=new ArrayList<ProgramVariant>();
  currentStat.numberGenerations++;
  for (  ProgramVariant parentVariant : variants) {
    log.debug(""String_Node_Str"" + parentVariant);
    this.saveOriginalVariant(parentVariant);
    ProgramVariant newVariant=createNewProgramVariant(parentVariant,generation);
    this.saveModifVariant(parentVariant);
    if (newVariant == null) {
      continue;
    }
    processCreatedVariant(newVariant,generation);
    if (newVariant.getCompilation().compiles()) {
      temporalInstances.add(newVariant);
      foundSolution|=newVariant.isSolution();
    }
    reverseOperationInModel(newVariant,generation);
    this.validateReversedOriginalVariant(newVariant);
    if (foundSolution && ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
      break;
    }
  }
  variants=populationControler.selectProgramVariantsForNextGeneration(variants,temporalInstances,this.solutions,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ProgramVariant parentNew=this.variantFactory.createProgramVariantFromAnother(originalVariant,generation);
    parentNew.getOperations().clear();
    parentNew.setParent(null);
    if (variants.size() != 0) {
      variants.remove(variants.size() - 1);
    }
    variants.add(parentNew);
  }
  return foundSolution;
}"
61619,"/** 
 * Given a program variant, the method generates operations for modifying that variants. Each operation is related to one gen of the program variant.
 * @param variant
 * @param generation
 * @return
 * @throws Exception
 */
private boolean modifyProgramVariant(ProgramVariant variant,int generation) throws Exception {
  log.debug(""String_Node_Str"" + variant);
  boolean oneOperationCreated=false;
  int mut=0, notmut=0, notapplied=0;
  int nroGen=0;
  List<Gen> gensToProcess=getGenList(variant.getGenList());
  for (  Gen genProgInstance : gensToProcess) {
    genProgInstance.setProgramVariant(variant);
    GenOperationInstance operationInGen=createOperationForGen(genProgInstance);
    if (operationInGen != null) {
      if (true) {
        currentStat.numberOfAppliedOp++;
        variant.putGenOperation(generation,operationInGen);
        operationInGen.setGen(genProgInstance);
        oneOperationCreated=true;
        mut++;
        if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
          break;
        }
      }
 else {
        currentStat.numberOfNotAppliedOp++;
        log.debug(""String_Node_Str"" + (nroGen++) + ""String_Node_Str""+ (genProgInstance.getRootElement().getSignature())+ ""String_Node_Str""+ operationInGen.getModified());
        notapplied++;
      }
    }
 else {
      currentStat.numberOfGenInmutated++;
      log.debug(""String_Node_Str"" + (nroGen++) + ""String_Node_Str""+ StringUtil.trunc(genProgInstance.getRootElement().getSignature()));
      notmut++;
    }
  }
  if (oneOperationCreated) {
    updateVariantGenList(variant,generation);
  }
  log.debug(""String_Node_Str"" + variant + ""String_Node_Str""+ mut+ ""String_Node_Str""+ notmut+ ""String_Node_Str""+ notapplied+ ""String_Node_Str"");
  return oneOperationCreated;
}","/** 
 * Given a program variant, the method generates operations for modifying that variants. Each operation is related to one gen of the program variant.
 * @param variant
 * @param generation
 * @return
 * @throws Exception
 */
private boolean modifyProgramVariant(ProgramVariant variant,int generation) throws Exception {
  log.debug(""String_Node_Str"" + variant);
  boolean oneOperationCreated=false;
  int mut=0, notmut=0, notapplied=0;
  int nroGen=0;
  List<Gen> gensToProcess=getGenList(variant.getGenList());
  for (  Gen genProgInstance : gensToProcess) {
    if (alreadyModified(genProgInstance,variant.getOperations(),generation))     continue;
    genProgInstance.setProgramVariant(variant);
    GenOperationInstance operationInGen=createOperationForGen(genProgInstance);
    if (operationInGen != null) {
      if (true) {
        currentStat.numberOfAppliedOp++;
        variant.putGenOperation(generation,operationInGen);
        operationInGen.setGen(genProgInstance);
        oneOperationCreated=true;
        mut++;
        if (!ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
          break;
        }
      }
 else {
        currentStat.numberOfNotAppliedOp++;
        log.debug(""String_Node_Str"" + (nroGen++) + ""String_Node_Str""+ (genProgInstance.getRootElement().getSignature())+ ""String_Node_Str""+ operationInGen.getModified());
        notapplied++;
      }
    }
 else {
      currentStat.numberOfGenInmutated++;
      log.debug(""String_Node_Str"" + (nroGen++) + ""String_Node_Str""+ StringUtil.trunc(genProgInstance.getRootElement().getSignature()));
      notmut++;
    }
  }
  if (oneOperationCreated) {
    updateVariantGenList(variant,generation);
  }
  log.debug(""String_Node_Str"" + variant + ""String_Node_Str""+ mut+ ""String_Node_Str""+ notmut+ ""String_Node_Str""+ notapplied+ ""String_Node_Str"");
  return oneOperationCreated;
}"
61620,"/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    return null;
  }
  CtElement targetStmt=genSusp.getRootElement();
  CtElement cparent=targetStmt.getParent();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  if ((cparent != null && (cparent instanceof CtBlock))) {
    CtBlock parentBlock=(CtBlock)cparent;
    operation.setParentBlock(parentBlock);
  }
  CtElement fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt);
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getRootElement().getClass().getSimpleName());
  }
  if (fix == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}","/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    return null;
  }
  CtElement targetStmt=genSusp.getRootElement();
  CtElement cparent=targetStmt.getParent();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  if ((cparent != null && (cparent instanceof CtBlock))) {
    CtBlock parentBlock=(CtBlock)cparent;
    operation.setParentBlock(parentBlock);
    operation.setLocationInParent(locationInParent(parentBlock,genSusp.getSuspicious().getLineNumber(),targetStmt));
  }
  CtElement fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt);
    if (operationType.equals(GenProgMutationOperation.INSERT_AFTER)) {
      operation.setLocationInParent(operation.getLocationInParent() + 1);
    }
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getRootElement().getClass().getSimpleName());
  }
  if (fix == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}"
61621,"/** 
 * Apply a given Mutation to the node referenced by the operation
 * @param operation
 * @throws IllegalAccessException
 */
public void transform(GenOperationInstance operation) throws IllegalAccessException {
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    int locationIndex=parentBlock.getStatements().indexOf(ctst);
    if (locationIndex < 0) {
      throw new IllegalAccessException(""String_Node_Str"" + operation);
    }
    operation.setLocationInParent(locationIndex);
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
    try {
switch (operator) {
case DELETE:
        parentBlock.getStatements().remove(ctst);
      successful=true;
    break;
case INSERT_BEFORE:
  ctst.insertBefore((CtStatement)fix);
successful=true;
break;
case INSERT_AFTER:
ctst.insertAfter((CtStatement)fix);
successful=true;
break;
case REPLACE:
ctst.replace((CtStatement)fix);
successful=true;
break;
default :
log.error(""String_Node_Str"");
break;
}
operation.setSuccessfulyApplied(successful);
}
 catch (Exception ex) {
log.error(""String_Node_Str"" + ex.getMessage());
operation.setExceptionAtApplied(ex);
operation.setSuccessfulyApplied(false);
}
}
}","/** 
 * Apply a given Mutation to the node referenced by the operation
 * @param operation
 * @throws IllegalAccessException
 */
public void transform(GenOperationInstance operation) throws IllegalAccessException {
  boolean successful=false;
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    int locationIndex=parentBlock.getStatements().indexOf(ctst);
    if (locationIndex < 0) {
      throw new IllegalAccessException(""String_Node_Str"" + operation);
    }
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
    try {
switch (operator) {
case DELETE:
        parentBlock.getStatements().remove(ctst);
      successful=true;
    break;
case INSERT_BEFORE:
  ctst.insertBefore((CtStatement)fix);
successful=true;
break;
case INSERT_AFTER:
ctst.insertAfter((CtStatement)fix);
operation.setLocationInParent(locationIndex + 1);
successful=true;
break;
case REPLACE:
ctst.replace((CtStatement)fix);
successful=true;
break;
default :
log.error(""String_Node_Str"");
break;
}
operation.setSuccessfulyApplied(successful);
}
 catch (Exception ex) {
log.error(""String_Node_Str"" + ex.getMessage());
operation.setExceptionAtApplied(ex);
operation.setSuccessfulyApplied(false);
}
}
}"
61622,"public void revert(GenOperationInstance operation){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock parentBlock=operation.getParentBlock();
  if (parentBlock != null) {
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
switch (operator) {
case DELETE:
      if ((parentBlock.getStatements().isEmpty() && operation.getLocationInParent() == 0) || (parentBlock.getStatements().size() >= operation.getLocationInParent())) {
        parentBlock.getStatements().add(operation.getLocationInParent(),ctst);
      }
 else {
        log.error(""String_Node_Str"" + ctst + ""String_Node_Str""+ operation.getLocationInParent()+ ""String_Node_Str""+ parentBlock.getStatements().size());
        throw new IllegalStateException(""String_Node_Str"");
      }
    break;
case INSERT_BEFORE:
  parentBlock.getStatements().remove(fix);
break;
case INSERT_AFTER:
parentBlock.getStatements().remove(fix);
break;
case REPLACE:
fix.replace((CtStatement)ctst);
break;
default :
break;
}
}
}","public void revert(GenOperationInstance operation){
  CtStatement ctst=(CtStatement)operation.getOriginal();
  CtStatement fix=(CtStatement)operation.getModified();
  CtBlock<?> parentBlock=operation.getParentBlock();
  int position=operation.getLocationInParent();
  if (parentBlock != null) {
    GenProgMutationOperation operator=(GenProgMutationOperation)operation.getOperationApplied();
switch (operator) {
case DELETE:
      if ((parentBlock.getStatements().isEmpty() && operation.getLocationInParent() == 0) || (parentBlock.getStatements().size() >= operation.getLocationInParent())) {
        parentBlock.getStatements().add(operation.getLocationInParent(),ctst);
      }
 else {
        log.error(""String_Node_Str"" + ctst + ""String_Node_Str""+ operation.getLocationInParent()+ ""String_Node_Str""+ parentBlock.getStatements().size());
        throw new IllegalStateException(""String_Node_Str"");
      }
    break;
case INSERT_BEFORE:
  remove(parentBlock,fix,position);
break;
case INSERT_AFTER:
remove(parentBlock,fix,position);
break;
case REPLACE:
fix.replace((CtStatement)ctst);
break;
default :
break;
}
}
}"
61623,"public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  for (  ProgramVariant childVariant : variants) {
    line+=""String_Node_Str"" + childVariant.getId() + ""String_Node_Str"";
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + ""String_Node_Str"" + genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"" + genOperationInstance.getModified().toString();
        line+=""String_Node_Str"";
      }
    }
    line+=""String_Node_Str"";
  }
  return line;
}","public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  for (  ProgramVariant childVariant : variants) {
    line+=""String_Node_Str"" + childVariant.getId() + ""String_Node_Str"";
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + ""String_Node_Str"" + genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"" + genOperationInstance.getModified().toString();
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"";
      }
    }
    line+=""String_Node_Str"";
  }
  return line;
}"
61624,"public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  for (  ProgramVariant childVariant : variants) {
    line+=""String_Node_Str"" + childVariant.getId() + ""String_Node_Str"";
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + ""String_Node_Str"" + genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        line+=""String_Node_Str"" + genOperationInstance.getModified().toString();
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"";
      }
    }
    line+=""String_Node_Str"";
  }
  return line;
}","public String getSolutionData(List<ProgramVariant> variants,int generation){
  String line=""String_Node_Str"";
  for (  ProgramVariant childVariant : variants) {
    line+=""String_Node_Str"" + childVariant.getId() + ""String_Node_Str"";
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        line+=""String_Node_Str"" + ""String_Node_Str"" + genOperationInstance.getGen().getCtClass().getQualifiedName();
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          line+=""String_Node_Str"" + gs.getSuspicious().getLineNumber();
        }
        line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString();
        if (genOperationInstance.getModified() != null)         line+=""String_Node_Str"" + genOperationInstance.getModified().toString() + ""String_Node_Str"";
 else {
          line+=""String_Node_Str"" + genOperationInstance.getOriginal().toString() + ""String_Node_Str"";
        }
        line+=""String_Node_Str"" + Integer.toString(i);
        line+=""String_Node_Str"";
      }
    }
    line+=""String_Node_Str"";
  }
  return line;
}"
61625,"public void saveSolutionData(ProgramVariant childVariant,String srcOutput,int generation){
  try {
    Map<String,Integer> result=new HashMap<String,Integer>();
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document root=dBuilder.newDocument();
    Element rootElement=root.createElement(""String_Node_Str"");
    root.appendChild(rootElement);
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        Element op=root.createElement(""String_Node_Str"");
        rootElement.appendChild(op);
        Attr attr_location=root.createAttribute(""String_Node_Str"");
        attr_location.setValue(genOperationInstance.getGen().getCtClass().getQualifiedName());
        op.setAttributeNode(attr_location);
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          int line=gs.getSuspicious().getLineNumber();
          Attr attr_line=root.createAttribute(""String_Node_Str"");
          attr_line.setValue(Integer.toString(line));
          op.setAttributeNode(attr_line);
        }
        Attr attr_gen=root.createAttribute(""String_Node_Str"");
        attr_gen.setValue(Integer.toString(i));
        op.setAttributeNode(attr_gen);
        Element original=root.createElement(""String_Node_Str"");
        op.appendChild(original);
        original.setTextContent(genOperationInstance.getOriginal().toString());
        Element mod=root.createElement(""String_Node_Str"");
        op.appendChild(mod);
        mod.setTextContent(genOperationInstance.getModified().toString());
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(root);
    StreamResult result1=new StreamResult(new File(srcOutput + File.separator + ""String_Node_Str""));
    transformer.transform(source,result1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void saveSolutionData(ProgramVariant childVariant,String srcOutput,int generation){
  try {
    Map<String,Integer> result=new HashMap<String,Integer>();
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document root=dBuilder.newDocument();
    Element rootElement=root.createElement(""String_Node_Str"");
    root.appendChild(rootElement);
    for (int i=1; i <= generation; i++) {
      List<GenOperationInstance> genOperationInstances=childVariant.getOperations().get(i);
      if (genOperationInstances == null)       continue;
      for (      GenOperationInstance genOperationInstance : genOperationInstances) {
        Element op=root.createElement(""String_Node_Str"");
        rootElement.appendChild(op);
        Attr attr_location=root.createAttribute(""String_Node_Str"");
        attr_location.setValue(genOperationInstance.getGen().getCtClass().getQualifiedName());
        op.setAttributeNode(attr_location);
        if (genOperationInstance.getGen() instanceof GenSuspicious) {
          GenSuspicious gs=(GenSuspicious)genOperationInstance.getGen();
          int line=gs.getSuspicious().getLineNumber();
          Attr attr_line=root.createAttribute(""String_Node_Str"");
          attr_line.setValue(Integer.toString(line));
          op.setAttributeNode(attr_line);
        }
        Attr attr_gen=root.createAttribute(""String_Node_Str"");
        attr_gen.setValue(Integer.toString(i));
        op.setAttributeNode(attr_gen);
        Element original=root.createElement(""String_Node_Str"");
        op.appendChild(original);
        original.setTextContent(genOperationInstance.getOriginal().toString());
        Element mod=root.createElement(""String_Node_Str"");
        op.appendChild(mod);
        if (genOperationInstance.getModified() != null)         mod.setTextContent(""String_Node_Str"" + genOperationInstance.getModified().toString() + ""String_Node_Str"");
 else {
          mod.setTextContent(""String_Node_Str"" + genOperationInstance.getOriginal().toString() + ""String_Node_Str"");
        }
      }
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(root);
    StreamResult result1=new StreamResult(new File(srcOutput + File.separator + ""String_Node_Str""));
    transformer.transform(source,result1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
61626,"@SuppressWarnings(""String_Node_Str"") @Test public void testMath2Example() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  main1.main(new String[]{""String_Node_Str"",""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
}","@SuppressWarnings(""String_Node_Str"") @Test public void testMath2Example() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  main1.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
}"
61627,"public List<SuspiciousCode> searchGZoltar(String location,List<String> testsToExecute,List<String> toInstrument,HashSet<String> cp) throws FileNotFoundException, IOException {
  candidates.clear();
  failingTestCases.clear();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  logger.info(new File(location).getAbsolutePath());
  GZoltar gz=new GZoltar(new File(location).getAbsolutePath());
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
  }
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    sum[0]++;
    logger.debug(""String_Node_Str"" + tr.getName() + ""String_Node_Str""+ tr.wasSuccessful());
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(tr.getName().split(""String_Node_Str"")[0]);
    }
    if (tr.getTrace() != null) {
    }
  }
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Statement s : gz.getSuspiciousStatements()) {
    String compName=s.getMethod().getParent().getLabel();
    String[] seg=compName.split(""String_Node_Str"");
    String name=seg[seg.length - 1];
    if (s.getSuspiciousness() > thr && !compName.toLowerCase().endsWith(""String_Node_Str"") && !name.toLowerCase().startsWith(""String_Node_Str"") && !name.toLowerCase().startsWith(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ s.getLineNumber()+ ""String_Node_Str""+ df.format(s.getSuspiciousness()));
      SuspiciousCode c=new SuspiciousCode(compName,s.getMethod().toString(),s.getLineNumber(),s.getSuspiciousness());
      candidates.add(c);
    }
  }
  Collections.sort(candidates,new ComparatorCandidates());
  return candidates;
}","public List<SuspiciousCode> searchGZoltar(String location,List<String> testsToExecute,List<String> toInstrument,HashSet<String> cp,String srcFolder) throws FileNotFoundException, IOException {
  candidates.clear();
  failingTestCases.clear();
  Double thr=ConfigurationProperties.getPropertyDouble(""String_Node_Str"");
  logger.info(""String_Node_Str"" + thr);
  logger.info(new File(location).getAbsolutePath());
  GZoltar gz=new GZoltar(new File(location).getAbsolutePath());
  for (  String to : toInstrument) {
    gz.addPackageToInstrument(to);
  }
  if (cp != null || !cp.isEmpty()) {
    logger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"" + cp);
    gz.getClasspaths().addAll(cp);
  }
  for (  String test : testsToExecute) {
    gz.addTestToExecute(test);
  }
  gz.run();
  int[] sum=new int[2];
  for (  TestResult tr : gz.getTestResults()) {
    sum[0]++;
    logger.debug(""String_Node_Str"" + tr.getName() + ""String_Node_Str""+ tr.wasSuccessful());
    sum[1]+=tr.wasSuccessful() ? 0 : 1;
    if (!tr.wasSuccessful()) {
      logger.info(""String_Node_Str"" + tr.getName());
      failingTestCases.add(tr.getName().split(""String_Node_Str"")[0]);
    }
    if (tr.getTrace() != null) {
    }
  }
  logger.info(""String_Node_Str"" + sum[0] + ""String_Node_Str""+ sum[1]+ ""String_Node_Str""+ gz.getSuspiciousStatements().size());
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  for (  Statement s : gz.getSuspiciousStatements()) {
    String compName=s.getMethod().getParent().getLabel();
    if (s.getSuspiciousness() > thr && isSource(compName,srcFolder)) {
      logger.debug(""String_Node_Str"" + compName + ""String_Node_Str""+ s.getLineNumber()+ ""String_Node_Str""+ df.format(s.getSuspiciousness()));
      SuspiciousCode c=new SuspiciousCode(compName,s.getMethod().toString(),s.getLineNumber(),s.getSuspiciousness());
      candidates.add(c);
    }
  }
  Collections.sort(candidates,new ComparatorCandidates());
  return candidates;
}"
61628,"public void prepareNextGeneration(List<ProgramVariant> temporalInstances,int generation){
  variants=populationControler.selectProgramVariantsForNextGeneration(variants,temporalInstances,this.solutions,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ProgramVariant parentNew=this.variantFactory.createProgramVariantFromAnother(originalVariant,generation);
    parentNew.getOperations().clear();
    parentNew.setParent(null);
    ProgramVariant removedVariant=null;
    if (variants.size() != 0) {
      removedVariant=variants.remove(variants.size() - 1);
    }
    variants.add(parentNew);
    log.debug(""String_Node_Str"" + ((removedVariant != null) ? ""String_Node_Str"" + removedVariant.getId() : ""String_Node_Str""));
  }
}","public void prepareNextGeneration(List<ProgramVariant> temporalInstances,int generation){
  variants=populationControler.selectProgramVariantsForNextGeneration(variants,temporalInstances,this.solutions,ConfigurationProperties.getPropertyInt(""String_Node_Str""));
  if (ConfigurationProperties.getPropertyBool(""String_Node_Str"")) {
    ProgramVariant parentNew=this.variantFactory.createProgramVariantFromAnother(originalVariant,generation);
    parentNew.getOperations().clear();
    parentNew.setParent(null);
    ProgramVariant removedVariant=null;
    if (variants.size() != 0) {
      removedVariant=variants.remove(variants.size() - 1);
    }
    variants.add(parentNew);
  }
}"
61629,"/** 
 * TODO: maybe we can filter some of them. Only the Parent?
 */
public List<SuspiciousCode> getSuspicious(String packageToInst,String mutatorIdentifier) throws FileNotFoundException, IOException {
  if (getProperties().getFailingTestCases() == null || ""String_Node_Str"".equals(getProperties().getFailingTestCases().isEmpty())) {
    new IllegalArgumentException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"" + getOutDirWithPrefix(mutatorIdentifier) + ""String_Node_Str""+ getProperties().getFailingTestCases());
  List<String> listTOInst=new ArrayList<String>();
  listTOInst.add(packageToInst);
  HashSet<String> hs=new HashSet<String>();
  hs.add(getOutDirWithPrefix(mutatorIdentifier));
  List<SuspiciousCode> suspiciousStatemens=faultLocalizationFacade.searchGZoltar(getOutDirWithPrefix(mutatorIdentifier),getProperties().getFailingTestCases(),listTOInst,hs);
  return suspiciousStatemens;
}","/** 
 * TODO: maybe we can filter some of them. Only the Parent?
 */
public List<SuspiciousCode> getSuspicious(String packageToInst,String mutatorIdentifier) throws FileNotFoundException, IOException {
  if (getProperties().getFailingTestCases() == null || ""String_Node_Str"".equals(getProperties().getFailingTestCases().isEmpty())) {
    new IllegalArgumentException(""String_Node_Str"");
  }
  logger.info(""String_Node_Str"" + getOutDirWithPrefix(mutatorIdentifier) + ""String_Node_Str""+ getProperties().getFailingTestCases());
  List<String> listTOInst=new ArrayList<String>();
  listTOInst.add(packageToInst);
  HashSet<String> hs=new HashSet<String>();
  hs.add(getOutDirWithPrefix(mutatorIdentifier));
  List<SuspiciousCode> suspiciousStatemens=faultLocalizationFacade.searchGZoltar(getOutDirWithPrefix(mutatorIdentifier),getProperties().getFailingTestCases(),listTOInst,hs,ConfigurationProperties.getProperty(""String_Node_Str"") + ""String_Node_Str"" + ConfigurationProperties.getProperty(""String_Node_Str""));
  return suspiciousStatemens;
}"
61630,"@SuppressWarnings(""String_Node_Str"") @Test public void testRunMain() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  main1.main(new String[]{""String_Node_Str"",""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
}","@SuppressWarnings(""String_Node_Str"") @Test public void testRunMain() throws Exception {
  MainjGenProg main1=new MainjGenProg();
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(Arrays.toString(args));
  main1.main(args);
}"
61631,"@Test public void testExampleMath0C1() throws Exception {
  String dependenciespath=""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"";
  String folder=""String_Node_Str"";
  String failing=""String_Node_Str"";
  File f=new File(""String_Node_Str"");
  String location=f.getParent();
  String packageToInstrument=""String_Node_Str"";
  double thfl=0.5;
  this.generic(location,folder,""String_Node_Str"",failing,dependenciespath,packageToInstrument,thfl);
}","@Test public void testExampleMath0C1() throws Exception {
  String dependenciespath=""String_Node_Str"" + File.pathSeparator + ""String_Node_Str"";
  String folder=""String_Node_Str"";
  String failing=""String_Node_Str"";
  File f=new File(""String_Node_Str"");
  String location=f.getAbsolutePath();
  String packageToInstrument=""String_Node_Str"";
  double thfl=0.5;
  this.generic(location,folder,""String_Node_Str"",failing,dependenciespath,packageToInstrument,thfl);
}"
61632,"private List<String> determineMavenFolders(boolean srcWithMain,String originalProjectRoot){
  File srcdefault=new File(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  if (srcdefault.exists())   return Arrays.asList(new String[]{ConfigurationProperties.getProperty(""String_Node_Str""),ConfigurationProperties.getProperty(""String_Node_Str"")});
  File src=new File(originalProjectRoot + File.separator + ""String_Node_Str"");
  if (src.exists())   return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  src=new File(originalProjectRoot + File.separator + ""String_Node_Str"");
  if (src.exists())   return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
}","private List<String> determineMavenFolders(boolean srcWithMain,String originalProjectRoot){
  File srcdefault=new File(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  File testdefault=new File(originalProjectRoot + File.separator + ConfigurationProperties.getProperty(""String_Node_Str""));
  if (srcdefault.exists() && testdefault.exists())   return Arrays.asList(new String[]{ConfigurationProperties.getProperty(""String_Node_Str""),ConfigurationProperties.getProperty(""String_Node_Str"")});
  File src=new File(originalProjectRoot + File.separator + ""String_Node_Str"");
  if (src.exists())   return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  src=new File(originalProjectRoot + File.separator + ""String_Node_Str"");
  if (src.exists())   return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  return Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
}"
61633,"private GenOperationInstance createDummyOperation1(ProgramVariant variant,int currentGeneration){
  GenSuspicious genSusp=searchSuspiciousElement(variant,""String_Node_Str"",""String_Node_Str"",95);
  assertNotNull(genSusp);
  CtElement targetStmt=genSusp.getRootElement();
  CtElement fix=createFix1();
  assertEquals(fix.toString(),""String_Node_Str"");
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOperationApplied(GenProgMutationOperation.REPLACE);
  operation.setGen(genSusp);
  operation.setParentBlock((CtBlock)targetStmt.getParent());
  operation.setOriginal(targetStmt);
  operation.setModified(fix);
  variant.putGenOperation(currentGeneration,operation);
  operation.setGen(genSusp);
  return operation;
}","private GenOperationInstance createDummyOperation1(ProgramVariant variant,int currentGeneration){
  GenSuspicious genSusp=searchSuspiciousElement(variant,""String_Node_Str"",""String_Node_Str"",93);
  assertNotNull(genSusp);
  CtElement targetStmt=genSusp.getRootElement();
  CtElement fix=createFix1();
  assertEquals(fix.toString(),""String_Node_Str"");
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOperationApplied(GenProgMutationOperation.REPLACE);
  operation.setGen(genSusp);
  operation.setParentBlock((CtBlock)targetStmt.getParent());
  operation.setOriginal(targetStmt);
  operation.setModified(fix);
  variant.putGenOperation(currentGeneration,operation);
  operation.setGen(genSusp);
  return operation;
}"
61634,"public boolean wasSuccessful(){
  return failures != 0;
}","public boolean wasSuccessful(){
  return failures == 0;
}"
61635,"@Override public String toString(){
  return ""String_Node_Str"" + failTest.isEmpty() + ""String_Node_Str""+ failures+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + failTest.isEmpty() + ""String_Node_Str""+ failures+ ""String_Node_Str""+ this.wasSuccessful()+ ""String_Node_Str"";
}"
61636,"/** 
 * Process-based validation Advantage: stability, memory consumption, CG activity Disadvantage: time.
 * @param mutatedVariant
 * @return
 */
@Override public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade){
  try {
    String bytecodeOutput=projectFacade.getOutDirWithPrefix(mutatedVariant.currentMutatorIdentifier());
    File variantOutputFile=new File(bytecodeOutput);
    URL[] bc=null;
    URL[] originalURL=projectFacade.getURLforMutation(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
    if (mutatedVariant.getCompilation() != null) {
      MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(mutatedVariant.getCompilation(),variantOutputFile);
      bc=redefineURL(variantOutputFile,originalURL);
    }
 else {
      bc=originalURL;
    }
    JUnitExecutorProcess p=new JUnitExecutorProcess();
    String localPrefix=projectFacade.getProperties().getExperimentName() + File.separator + projectFacade.getProperties().getFixid();
    TestResult trfailing=p.execute(bc,projectFacade.getProperties().getFailingTestCases(),TransformationProperties.validationSingleTimeLimit * 5);
    if (trfailing == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      log.debug(trfailing);
      if (trfailing.wasSuccessful()) {
        if (TransformationProperties.allTestInOneProcess)         return executeRegressionTesting(mutatedVariant,bc,p,localPrefix);
 else         return executeRegressionTestingOneByOne(mutatedVariant,bc,p,localPrefix);
      }
 else {
        ProgramVariantValidationResult r=new ProgramVariantValidationResult(trfailing,false,false);
        return r;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Process-based validation Advantage: stability, memory consumption, CG activity Disadvantage: time.
 * @param mutatedVariant
 * @return
 */
@Override public ProgramVariantValidationResult validate(ProgramVariant mutatedVariant,ProjectRepairFacade projectFacade){
  try {
    String bytecodeOutput=projectFacade.getOutDirWithPrefix(mutatedVariant.currentMutatorIdentifier());
    File variantOutputFile=new File(bytecodeOutput);
    URL[] bc=null;
    URL[] originalURL=projectFacade.getURLforMutation(ProgramVariant.DEFAULT_ORIGINAL_VARIANT);
    if (mutatedVariant.getCompilation() != null) {
      MutationSupporter.currentSupporter.getSpoonClassCompiler().saveByteCode(mutatedVariant.getCompilation(),variantOutputFile);
      bc=redefineURL(variantOutputFile,originalURL);
    }
 else {
      bc=originalURL;
    }
    JUnitExecutorProcess p=new JUnitExecutorProcess();
    String localPrefix=projectFacade.getProperties().getExperimentName() + File.separator + projectFacade.getProperties().getFixid();
    log.debug(""String_Node_Str"");
    TestResult trfailing=p.execute(bc,projectFacade.getProperties().getFailingTestCases(),TransformationProperties.validationSingleTimeLimit * 5);
    if (trfailing == null) {
      log.debug(""String_Node_Str"");
      return null;
    }
 else {
      log.debug(trfailing);
      if (trfailing.wasSuccessful()) {
        if (TransformationProperties.allTestInOneProcess)         return executeRegressionTesting(mutatedVariant,bc,p,localPrefix);
 else         return executeRegressionTestingOneByOne(mutatedVariant,bc,p,localPrefix);
      }
 else {
        ProgramVariantValidationResult r=new ProgramVariantValidationResult(trfailing,false,false);
        return r;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
61637,"/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    return null;
  }
  CtElement targetStmt=genSusp.getRootElement();
  CtElement cparent=targetStmt.getParent();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  if ((cparent != null && (cparent instanceof CtBlock))) {
    CtBlock parentBlock=(CtBlock)cparent;
    operation.setParentBlock(parentBlock);
    operation.setLocationInParent(locationInParent(parentBlock,genSusp.getSuspicious().getLineNumber(),targetStmt));
  }
  CtElement fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt);
    if (operationType.equals(GenProgMutationOperation.INSERT_AFTER)) {
      operation.setLocationInParent(operation.getLocationInParent() + 1);
    }
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getRootElement().getClass().getSimpleName());
  }
  if (fix == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}","/** 
 * Create a Gen Mutation for a given CtElement
 * @param ctElementPointed
 * @param className
 * @param suspValue
 * @return
 * @throws IllegalAccessException
 */
@Override protected GenOperationInstance createOperationForGen(Gen gen) throws IllegalAccessException {
  GenSuspicious genSusp=(GenSuspicious)gen;
  GenProgMutationOperation operationType=(GenProgMutationOperation)repairActionSpace.getNextMutation(genSusp.getSuspicious().getSuspiciousValue());
  if (operationType == null) {
    return null;
  }
  CtElement targetStmt=genSusp.getRootElement();
  CtElement cparent=targetStmt.getParent();
  GenOperationInstance operation=new GenOperationInstance();
  operation.setOriginal(targetStmt);
  operation.setOperationApplied(operationType);
  operation.setGen(genSusp);
  if ((cparent != null && (cparent instanceof CtBlock))) {
    CtBlock parentBlock=(CtBlock)cparent;
    operation.setParentBlock(parentBlock);
    operation.setLocationInParent(locationInParent(parentBlock,genSusp.getSuspicious().getLineNumber(),targetStmt));
  }
  CtElement fix=null;
  if (operationType.equals(GenProgMutationOperation.INSERT_AFTER) || operationType.equals(GenProgMutationOperation.INSERT_BEFORE)) {
    fix=this.getFixIngredient(gen,targetStmt);
    if (operationType.equals(GenProgMutationOperation.INSERT_AFTER)) {
      operation.setLocationInParent(operation.getLocationInParent() + 1);
    }
  }
  if (operationType.equals(GenProgMutationOperation.REPLACE)) {
    fix=this.getFixIngredient(gen,targetStmt,gen.getRootElement().getClass().getSimpleName());
  }
  if (!operationType.equals(GenProgMutationOperation.DELETE) && fix == null) {
    log.error(""String_Node_Str"");
    return null;
  }
  operation.setModified(fix);
  return operation;
}"
61638,"@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxAttempts())));
  if (!StringUtils.isEmpty(webhook.getErrorChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getErrorChannelUrl())));
  }
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getManagedByTag())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getManagedByTag()));
  }
  dbClient.putItem(getTableName(),item);
}","@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxAttempts())));
  if (!StringUtils.isEmpty(webhook.getErrorChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getErrorChannelUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getManagedByTag())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getManagedByTag()));
  }
  dbClient.putItem(getTableName(),item);
}"
61639,"private Webhook mapItem(Map<String,AttributeValue> item){
  Webhook.WebhookBuilder builder=Webhook.builder().name(item.get(""String_Node_Str"").getS()).callbackUrl(item.get(""String_Node_Str"").getS());
  if (item.containsKey(""String_Node_Str"")) {
    builder.channelUrl(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.parallelCalls(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.paused(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.batch(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.heartbeat(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.managedByTag(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.ttlMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxWaitMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.callbackTimeoutSeconds(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.tagUrl(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxAttempts(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  return builder.build().withDefaults();
}","private Webhook mapItem(Map<String,AttributeValue> item){
  Webhook.WebhookBuilder builder=Webhook.builder().name(item.get(""String_Node_Str"").getS()).callbackUrl(item.get(""String_Node_Str"").getS());
  if (item.containsKey(""String_Node_Str"")) {
    builder.channelUrl(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.parallelCalls(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.paused(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.batch(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.heartbeat(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.managedByTag(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.ttlMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxWaitMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.callbackTimeoutSeconds(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.tagUrl(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxAttempts(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.errorChannelUrl(item.get(""String_Node_Str"").getS());
  }
  return builder.build().withDefaults();
}"
61640,"@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxAttempts())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getErrorChannelUrl())));
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getManagedByTag())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getManagedByTag()));
  }
  dbClient.putItem(getTableName(),item);
}","@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxAttempts())));
  if (!StringUtils.isEmpty(webhook.getErrorChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getErrorChannelUrl())));
  }
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getManagedByTag())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getManagedByTag()));
  }
  dbClient.putItem(getTableName(),item);
}"
61641,"private boolean shouldStopAfter(DeliveryAttempt attempt){
  long stopAfterCount=stopAfterIfs.stream().filter(predicate -> predicate.test(attempt)).count();
  return stopAfterCount == 0;
}","private boolean shouldStopAfter(DeliveryAttempt attempt){
  long stopAfterCount=stopAfterIfs.stream().filter(predicate -> predicate.test(attempt)).count();
  return stopAfterCount != 0;
}"
61642,"void send(Webhook webhook,ContentPath contentPath,ObjectNode body){
  int attemptNumber=0;
  boolean isRetrying=true;
  while (isRetrying) {
    try {
      DeliveryAttempt attempt=DeliveryAttempt.builder().number(attemptNumber++).webhook(webhook).contentPath(contentPath).payload(body.toString()).build();
      if (shouldStopBefore(attempt)) {
        isRetrying=false;
        continue;
      }
      String payload=body.toString();
      logger.debug(""String_Node_Str"",webhook.getCallbackUrl(),contentPath,payload);
      ClientResponse response=httpClient.resource(webhook.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,payload);
      attempt.setResponse(response);
      response.close();
      if (shouldStopAfter(attempt)) {
        isRetrying=false;
        continue;
      }
      long exponentialMultiplier=1000;
      long maximumSleepTimeMS=TimeUnit.MINUTES.toMillis(attempt.getWebhook().getMaxWaitMinutes());
      long sleepTimeMS=calculateSleepTimeMS(attempt,exponentialMultiplier,maximumSleepTimeMS);
      logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl(),TimeUnit.MILLISECONDS.toSeconds(sleepTimeMS));
      Thread.sleep(sleepTimeMS);
    }
 catch (    ClientHandlerException e) {
      String message=String.format(""String_Node_Str"",new DateTime(),contentPath,e.getMessage());
      logger.debug(webhook.getName(),message);
      webhookError.add(webhook.getName(),message);
      isRetrying=false;
    }
catch (    InterruptedException e) {
      logger.debug(""String_Node_Str"",e);
      Thread.currentThread().interrupt();
      isRetrying=false;
    }
  }
}","void send(Webhook webhook,ContentPath contentPath,ObjectNode body){
  int attemptNumber=0;
  boolean isRetrying=true;
  while (isRetrying) {
    DeliveryAttempt attempt=DeliveryAttempt.builder().number(++attemptNumber).webhook(webhook).contentPath(contentPath).payload(body.toString()).build();
    try {
      if (shouldStopBefore(attempt)) {
        logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl(),attempt.getNumber());
        isRetrying=false;
        continue;
      }
      String payload=body.toString();
      logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl(),attempt.getNumber(),webhook.getCallbackUrl(),payload);
      ClientResponse response=httpClient.resource(webhook.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,payload);
      attempt.setResponse(response);
      response.close();
      if (shouldStopAfter(attempt)) {
        logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl(),attempt.getNumber());
        isRetrying=false;
        continue;
      }
      long exponentialMultiplier=1000;
      long maximumSleepTimeMS=TimeUnit.MINUTES.toMillis(attempt.getWebhook().getMaxWaitMinutes());
      long sleepTimeMS=calculateSleepTimeMS(attempt,exponentialMultiplier,maximumSleepTimeMS);
      logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl(),TimeUnit.MILLISECONDS.toSeconds(sleepTimeMS));
      Thread.sleep(sleepTimeMS);
    }
 catch (    ClientHandlerException e) {
      String message=String.format(""String_Node_Str"",new DateTime(),contentPath,e.getMessage());
      logger.debug(webhook.getName() + message,e);
      webhookError.add(webhook.getName(),message);
      isRetrying=false;
    }
catch (    InterruptedException e) {
      String message=String.format(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl());
      logger.debug(message,e);
      Thread.currentThread().interrupt();
      isRetrying=false;
    }
 finally {
      logger.debug(""String_Node_Str"",attempt.getWebhook().getName(),attempt.getContentPath().toUrl());
    }
  }
}"
61643,"private boolean shouldStopBefore(DeliveryAttempt attempt){
  long stopBeforeCount=stopBeforeIfs.stream().filter(predicate -> predicate.test(attempt)).count();
  return stopBeforeCount == 0;
}","private boolean shouldStopBefore(DeliveryAttempt attempt){
  long stopBeforeCount=stopBeforeIfs.stream().filter(predicate -> predicate.test(attempt)).count();
  return stopBeforeCount != 0;
}"
61644,"private long getOldest(){
  ChannelContentKey[] array=keys.toArray(new ChannelContentKey[0]);
  Arrays.sort(array);
  ChannelContentKey oldest=array[array.length - 1];
  DateTime then=oldest.getContentKey().getTime();
  DateTime now=DateTime.now(DateTimeZone.UTC);
  Interval delta=new Interval(now,then);
  return delta.toDurationMillis();
}","private long getOldest(){
  ChannelContentKey[] array=keys.toArray(new ChannelContentKey[0]);
  Arrays.sort(array);
  if (array.length > 1) {
    ChannelContentKey oldest=array[array.length - 1];
    DateTime then=oldest.getContentKey().getTime();
    DateTime now=DateTime.now(DateTimeZone.UTC);
    Interval delta=new Interval(then,now);
    return delta.toDurationMillis();
  }
 else {
    return 0;
  }
}"
61645,"@Override public void get(StreamResults streamResults){
  SortedSet<ContentKey> keys=streamResults.getKeys();
  Consumer<Content> callback=streamResults.getCallback();
  for (  ContentKey key : keys) {
    Optional<Content> contentOptional=get(streamResults.getChannel(),key,false);
    if (contentOptional.isPresent()) {
      callback.accept(contentOptional.get());
    }
  }
}","@Override public void get(StreamResults streamResults){
  List<ContentKey> keys=new ArrayList<>(streamResults.getKeys());
  Consumer<Content> callback=streamResults.getCallback();
  if (streamResults.isDescending()) {
    Collections.reverse(keys);
  }
  for (  ContentKey key : keys) {
    Optional<Content> contentOptional=get(streamResults.getChannel(),key,false);
    if (contentOptional.isPresent()) {
      callback.accept(contentOptional.get());
    }
  }
}"
61646,"@Override public ChannelConfig createChannel(ChannelConfig configuration){
  logger.info(""String_Node_Str"",configuration);
  channelValidator.validate(configuration,null,false);
  channelConfigDao.upsert(configuration);
  notify(configuration,null);
  TagWebhook.updateTagWebhooksDoToChannelConfigChange(configuration);
  return configuration;
}","@Override public ChannelConfig createChannel(ChannelConfig configuration){
  logger.info(""String_Node_Str"",configuration);
  channelValidator.validate(configuration,null,false);
  channelConfigDao.upsert(configuration);
  notify(configuration,null);
  TagWebhook.updateTagWebhooksDueToChannelConfigChange(configuration);
  return configuration;
}"
61647,"@Override public ChannelConfig updateChannel(ChannelConfig configuration,ChannelConfig oldConfig,boolean isLocalHost){
  if (!configuration.equals(oldConfig)) {
    logger.info(""String_Node_Str"",configuration,oldConfig);
    channelValidator.validate(configuration,oldConfig,isLocalHost);
    channelConfigDao.upsert(configuration);
    TagWebhook.updateTagWebhooksDoToChannelConfigChange(configuration);
    notify(configuration,oldConfig);
  }
 else {
    logger.info(""String_Node_Str"",configuration);
  }
  return configuration;
}","@Override public ChannelConfig updateChannel(ChannelConfig configuration,ChannelConfig oldConfig,boolean isLocalHost){
  if (!configuration.equals(oldConfig)) {
    logger.info(""String_Node_Str"",configuration,oldConfig);
    channelValidator.validate(configuration,oldConfig,isLocalHost);
    channelConfigDao.upsert(configuration);
    TagWebhook.updateTagWebhooksDueToChannelConfigChange(configuration);
    notify(configuration,oldConfig);
  }
 else {
    logger.info(""String_Node_Str"",configuration);
  }
  return configuration;
}"
61648,"@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue(webhook.getTag()));
  dbClient.putItem(getTableName(),item);
}","@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  if (!StringUtils.isEmpty(webhook.getChannelUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  if (!StringUtils.isEmpty(webhook.getTagUrl())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTagUrl()));
  }
  if (!StringUtils.isEmpty(webhook.getTag())) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTag()));
  }
  dbClient.putItem(getTableName(),item);
}"
61649,"static Set<Webhook> webhookInstancesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  Set<Webhook> result=webhookSet.stream().filter(wh -> Objects.equals(tag,wh.getTag()) && !wh.isTagPrototype()).collect(Collectors.toSet());
  return result;
}","static Set<Webhook> webhookInstancesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  Set<Webhook> result=webhookSet.stream().filter(wh -> !wh.isTagPrototype() && Objects.equals(tag,wh.getTag())).collect(Collectors.toSet());
  return result;
}"
61650,"static void upsertTagWebhookInstances(Webhook webhook){
  Collection<ChannelConfig> channels=channelService.getChannels(webhook.getTag(),false);
  for (  ChannelConfig channel : channels) {
    logger.info(""String_Node_Str"" + channel.getName());
    webhookService.upsert(Webhook.instanceFromTagPrototype(webhook,channel));
  }
}","static void upsertTagWebhookInstances(Webhook webhookPrototype){
  Collection<ChannelConfig> channels=channelService.getChannels(webhookPrototype.getTagFromTagUrl(),false);
  for (  ChannelConfig channel : channels) {
    logger.info(""String_Node_Str"" + channel.getName());
    webhookService.upsert(Webhook.instanceFromTagPrototype(webhookPrototype,channel));
  }
}"
61651,"public static void deleteInstancesIfTagWebhook(String webhookName){
  Optional<Webhook> webhookOptional=webhookService.get(webhookName);
  if (!webhookOptional.isPresent())   return;
  Webhook webhook=webhookOptional.get();
  if (!webhook.isTagPrototype())   return;
  logger.info(""String_Node_Str"" + webhookName);
  Set<Webhook> taggedWebhooks=webhookInstancesWithTag(webhook.getTag());
  for (  Webhook twh : taggedWebhooks) {
    logger.debug(""String_Node_Str"" + twh.getName());
    webhookService.delete(twh.getName());
  }
}","public static void deleteInstancesIfTagWebhook(String webhookName){
  Optional<Webhook> webhookOptional=webhookService.get(webhookName);
  if (!webhookOptional.isPresent())   return;
  Webhook webhook=webhookOptional.get();
  if (!webhook.isTagPrototype())   return;
  logger.info(""String_Node_Str"" + webhookName);
  Set<Webhook> taggedWebhooks=webhookInstancesWithTag(webhook.getTagFromTagUrl());
  for (  Webhook twh : taggedWebhooks) {
    logger.debug(""String_Node_Str"" + twh.getName());
    webhookService.delete(twh.getName());
  }
}"
61652,"static void ensureNoOrphans(Set<Webhook> webhookSet,ChannelConfig channelConfig){
  Set<Webhook> managedWebHooks=allManagedWebhooksForChannel(webhookSet,channelConfig);
  Set<String> tags=channelConfig.getTags();
  Set<Webhook> nonOrphanWebhooks=managedWebHooks.stream().filter(wh -> tags.contains(wh.getTagUrl())).collect(Collectors.toSet());
  Sets.SetView<Webhook> orphanedWebhooks=Sets.difference(managedWebHooks,nonOrphanWebhooks);
  for (  Webhook orphan : orphanedWebhooks) {
    logger.info(""String_Node_Str"" + orphan.getChannelName());
    webhookService.delete(orphan.getName());
  }
}","static void ensureNoOrphans(Set<Webhook> webhookSet,ChannelConfig channelConfig){
  Set<Webhook> managedWebHooks=allManagedWebhooksForChannel(webhookSet,channelConfig);
  Set<String> tags=channelConfig.getTags();
  Set<Webhook> nonOrphanWebhooks=managedWebHooks.stream().filter(wh -> tags.contains(wh.getTag())).collect(Collectors.toSet());
  Sets.SetView<Webhook> orphanedWebhooks=Sets.difference(managedWebHooks,nonOrphanWebhooks);
  for (  Webhook orphan : orphanedWebhooks) {
    logger.info(""String_Node_Str"" + orphan.getChannelName());
    webhookService.delete(orphan.getName());
  }
}"
61653,"static Set<Webhook> webhookPrototypesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  Set<Webhook> result=webhookSet.stream().filter(wh -> Objects.equals(tag,wh.getTag()) && wh.isTagPrototype()).collect(Collectors.toSet());
  return result;
}","static Set<Webhook> webhookPrototypesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  Set<Webhook> result=webhookSet.stream().filter(wh -> wh.isTagPrototype() && Objects.equals(tag,wh.getTagFromTagUrl())).collect(Collectors.toSet());
  return result;
}"
61654,"public static Webhook instanceFromTagPrototype(Webhook whp,ChannelConfig channel){
  String channenUrl=RequestUtils.getHost(whp.getTagUrl()) + ""String_Node_Str"" + channel.getName();
  String whName=""String_Node_Str"" + whp.getTag() + ""String_Node_Str""+ channel.getName();
  Webhook instance=new Webhook(whp.callbackUrl,channenUrl,whp.parallelCalls,whName,null,whp.batch,whp.heartbeat,whp.paused,whp.ttlMinutes,whp.maxWaitMinutes,whp.callbackTimeoutSeconds,whp.fastForwardable,whp.tagUrl,whp.tag);
  return instance;
}","public static Webhook instanceFromTagPrototype(Webhook whp,ChannelConfig channel){
  String channenUrl=RequestUtils.getHost(whp.getTagUrl()) + ""String_Node_Str"" + channel.getName();
  String whName=""String_Node_Str"" + whp.getTagFromTagUrl() + ""String_Node_Str""+ channel.getName();
  Webhook instance=new Webhook(whp.callbackUrl,channenUrl,whp.parallelCalls,whName,null,whp.batch,whp.heartbeat,whp.paused,whp.ttlMinutes,whp.maxWaitMinutes,whp.callbackTimeoutSeconds,whp.fastForwardable,null,whp.getTagFromTagUrl());
  return instance;
}"
61655,"public String getTag(){
  return StringUtils.isEmpty(tagUrl) ? tag : RequestUtils.getTag(getTagUrl());
}","public String getTag(){
  return tag;
}"
61656,"@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getTag()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isManagedByTag()));
  dbClient.putItem(getTableName(),item);
}","@Override public void upsert(Webhook webhook){
  Map<String,AttributeValue> item=new HashMap<>();
  item.put(""String_Node_Str"",new AttributeValue(webhook.getName()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getCallbackUrl()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getChannelUrl()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getParallelCalls())));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isPaused()));
  item.put(""String_Node_Str"",new AttributeValue(webhook.getBatch()));
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isHeartbeat()));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getTtlMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getMaxWaitMinutes())));
  item.put(""String_Node_Str"",new AttributeValue().withN(String.valueOf(webhook.getCallbackTimeoutSeconds())));
  if (!Objects.isNull(webhook.getTag()) && !webhook.getTag().isEmpty()) {
    item.put(""String_Node_Str"",new AttributeValue(webhook.getTag()));
  }
  item.put(""String_Node_Str"",new AttributeValue().withBOOL(webhook.isManagedByTag()));
  dbClient.putItem(getTableName(),item);
}"
61657,"private static Set<Webhook> allManagedWebhooksForChannel(Set<Webhook> webhookSet,ChannelConfig channelConfig){
  String channelName=channelConfig.getName();
  return webhookSet.stream().filter(wh -> channelName.equals(wh.getChannelName())).filter(Webhook::isManagedByTag).collect(Collectors.toSet());
}","private static Set<Webhook> allManagedWebhooksForChannel(Set<Webhook> webhookSet,ChannelConfig channelConfig){
  String channelName=channelConfig.getName().toLowerCase();
  return webhookSet.stream().filter(wh -> Objects.equals(channelName,wh.getChannelName().toLowerCase()) && wh.isManagedByTag()).collect(Collectors.toSet());
}"
61658,"@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(HubClusterRegister.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationGlobalManager.class).asEagerSingleton();
  bind(HubUtils.class).asEagerSingleton();
  bind(GCRunner.class).asEagerSingleton();
  bind(MetricsRunner.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(WebhookValidator.class).asEagerSingleton();
  bind(WebhookManager.class).asEagerSingleton();
  bind(LastContentPath.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(MetricsService.class).to(DelegatingMetricsService.class).asEagerSingleton();
  bind(NtpMonitor.class).asEagerSingleton();
  bind(TimeService.class).asEagerSingleton();
  bind(ShutdownManager.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(SpokeClusterRegister.class).asEagerSingleton();
  bind(FinalCheck.class).to(SpokeFinalCheck.class).asEagerSingleton();
  bind(InFlightService.class).asEagerSingleton();
}","@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(HubClusterRegister.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationGlobalManager.class).asEagerSingleton();
  bind(HubUtils.class).asEagerSingleton();
  bind(GCRunner.class).asEagerSingleton();
  bind(MetricsRunner.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(WebhookValidator.class).asEagerSingleton();
  bind(WebhookManager.class).asEagerSingleton();
  bind(LastContentPath.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(MetricsService.class).to(DelegatingMetricsService.class).asEagerSingleton();
  bind(NtpMonitor.class).asEagerSingleton();
  bind(TimeService.class).asEagerSingleton();
  bind(ShutdownManager.class).asEagerSingleton();
  bind(SpokeClusterRegister.class).asEagerSingleton();
  bind(FinalCheck.class).to(SpokeFinalCheck.class).asEagerSingleton();
  bind(InFlightService.class).asEagerSingleton();
}"
61659,"@Override protected void configure(){
  bind(ChannelService.class).to(LocalChannelService.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.WRITE_CACHE)).to(SpokeWriteContentDao.class).asEagerSingleton();
  bind(ContentService.class).to(SingleContentService.class).asEagerSingleton();
  bind(ChannelTtlEnforcer.class).asEagerSingleton();
  bind(DocumentationDao.class).to(FileDocumentationDao.class).asEagerSingleton();
}","@Override protected void configure(){
  bind(ChannelService.class).to(LocalChannelService.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.WRITE_CACHE)).to(SpokeWriteContentDao.class).asEagerSingleton();
  bind(ContentService.class).to(SingleContentService.class).asEagerSingleton();
  bind(ChannelTtlEnforcer.class).asEagerSingleton();
  bind(DocumentationDao.class).to(FileDocumentationDao.class).asEagerSingleton();
  bind(FileSpokeStore.class).annotatedWith(Names.named(SpokeStore.WRITE.name())).toInstance(new FileSpokeStore(HubProperties.getSpokePath(SpokeStore.WRITE),HubProperties.getSpokeTtlMinutes(SpokeStore.WRITE)));
  bind(FileSpokeStore.class).annotatedWith(Names.named(SpokeStore.READ.name())).toInstance(new FileSpokeStore(HubProperties.getSpokePath(SpokeStore.READ),HubProperties.getSpokeTtlMinutes(SpokeStore.READ)));
}"
61660,"public SingleContentService(){
  String contentPath=FileUtil.getContentPath();
  logger.info(""String_Node_Str"",contentPath);
  fileSpokeStore=new FileSpokeStore(contentPath);
}","public SingleContentService(){
  String contentPath=FileUtil.getContentPath();
  logger.info(""String_Node_Str"",contentPath);
  fileSpokeStore=new FileSpokeStore(contentPath,HubProperties.getSpokeTtlMinutes(SpokeStore.WRITE));
}"
61661,"@Override public ChannelConfig createChannel(ChannelConfig configuration){
  logger.info(""String_Node_Str"",configuration);
  channelValidator.validate(configuration,null,false);
  channelConfigDao.upsert(configuration);
  notify(configuration,null);
  TagWebhook.updateTagWebhooks(configuration);
  return configuration;
}","@Override public ChannelConfig createChannel(ChannelConfig configuration){
  logger.info(""String_Node_Str"",configuration);
  channelValidator.validate(configuration,null,false);
  channelConfigDao.upsert(configuration);
  notify(configuration,null);
  TagWebhook.updateTagWebhooksDoToChannelConfigChange(configuration);
  return configuration;
}"
61662,"@Override public ChannelConfig updateChannel(ChannelConfig configuration,ChannelConfig oldConfig,boolean isLocalHost){
  if (!configuration.equals(oldConfig)) {
    logger.info(""String_Node_Str"",configuration,oldConfig);
    channelValidator.validate(configuration,oldConfig,isLocalHost);
    channelConfigDao.upsert(configuration);
    TagWebhook.updateTagWebhooks(configuration);
    notify(configuration,oldConfig);
  }
 else {
    logger.info(""String_Node_Str"",configuration);
  }
  return configuration;
}","@Override public ChannelConfig updateChannel(ChannelConfig configuration,ChannelConfig oldConfig,boolean isLocalHost){
  if (!configuration.equals(oldConfig)) {
    logger.info(""String_Node_Str"",configuration,oldConfig);
    channelValidator.validate(configuration,oldConfig,isLocalHost);
    channelConfigDao.upsert(configuration);
    TagWebhook.updateTagWebhooksDoToChannelConfigChange(configuration);
    notify(configuration,oldConfig);
  }
 else {
    logger.info(""String_Node_Str"",configuration);
  }
  return configuration;
}"
61663,"private static Set<Webhook> webhookPrototypesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  return webhookSet.stream().filter(wh -> tag.equals(wh.getTag())).filter(Webhook::isTagPrototype).collect(Collectors.toSet());
}","private static Set<Webhook> webhookPrototypesWithTag(String tag){
  Set<Webhook> webhookSet=new HashSet<>(webhookDao.getAll(false));
  Set<Webhook> result=webhookSet.stream().filter(wh -> Objects.equals(tag,wh.getTag()) && wh.isTagPrototype()).collect(Collectors.toSet());
  return result;
}"
61664,"static Response get(String name,UriInfo uriInfo){
  Optional<Webhook> webhookOptional=webhookService.get(name);
  if (!webhookOptional.isPresent()) {
    logger.info(""String_Node_Str"",name);
    return Response.status(Response.Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"",name);
  Webhook webhook=webhookOptional.get();
  WebhookStatus status=webhookService.getStatus(webhook);
  DateTime stable=TimeUtil.stable();
  ObjectNode root=mapper.createObjectNode();
  addSelfLink(root,uriInfo);
  root.put(""String_Node_Str"",webhook.getName());
  root.put(""String_Node_Str"",webhook.getCallbackUrl());
  root.put(""String_Node_Str"",webhook.getChannelUrl());
  root.put(""String_Node_Str"",webhook.getParallelCalls());
  root.put(""String_Node_Str"",webhook.isPaused());
  root.put(""String_Node_Str"",webhook.getBatch());
  root.put(""String_Node_Str"",webhook.isHeartbeat());
  root.put(""String_Node_Str"",webhook.getTtlMinutes());
  root.put(""String_Node_Str"",webhook.getMaxWaitMinutes());
  root.put(""String_Node_Str"",webhook.getCallbackTimeoutSeconds());
  addLatest(webhook,status,root,true);
  TimeLinkUtil.addTime(root,stable,""String_Node_Str"");
  ArrayNode inFlight=root.putArray(""String_Node_Str"");
  for (  ContentPath contentPath : status.getInFlight()) {
    inFlight.add(webhook.getChannelUrl() + ""String_Node_Str"" + contentPath.toUrl());
  }
  addErrors(status,root);
  return Response.ok(root).build();
}","static Response get(String name,UriInfo uriInfo){
  Optional<Webhook> webhookOptional=webhookService.get(name);
  if (!webhookOptional.isPresent()) {
    logger.info(""String_Node_Str"",name);
    return Response.status(Response.Status.NOT_FOUND).build();
  }
  logger.info(""String_Node_Str"",name);
  Webhook webhook=webhookOptional.get();
  WebhookStatus status=webhookService.getStatus(webhook);
  DateTime stable=TimeUtil.stable();
  ObjectNode root=mapper.createObjectNode();
  addSelfLink(root,uriInfo);
  root.put(""String_Node_Str"",webhook.getName());
  root.put(""String_Node_Str"",webhook.getCallbackUrl());
  root.put(""String_Node_Str"",webhook.getChannelUrl());
  root.put(""String_Node_Str"",webhook.getParallelCalls());
  root.put(""String_Node_Str"",webhook.isPaused());
  root.put(""String_Node_Str"",webhook.getBatch());
  root.put(""String_Node_Str"",webhook.isHeartbeat());
  root.put(""String_Node_Str"",webhook.getTtlMinutes());
  root.put(""String_Node_Str"",webhook.getMaxWaitMinutes());
  root.put(""String_Node_Str"",webhook.getCallbackTimeoutSeconds());
  if (webhook.isTagPrototype()) {
    root.put(""String_Node_Str"",webhook.getTag());
    root.put(""String_Node_Str"",webhook.isTagPrototype());
  }
  addLatest(webhook,status,root,true);
  TimeLinkUtil.addTime(root,stable,""String_Node_Str"");
  ArrayNode inFlight=root.putArray(""String_Node_Str"");
  for (  ContentPath contentPath : status.getInFlight()) {
    inFlight.add(webhook.getChannelUrl() + ""String_Node_Str"" + contentPath.toUrl());
  }
  addErrors(status,root);
  return Response.ok(root).build();
}"
61665,"public void delete(String name){
  logger.info(""String_Node_Str"" + name);
  webhookDao.delete(name);
  webhookManager.delete(name);
}","public void delete(String name){
  logger.info(""String_Node_Str"" + name);
  TagWebhook.deleteInstancesIfTagWebhook(name);
  webhookDao.delete(name);
  webhookManager.delete(name);
}"
61666,"@Inject public ActiveWebhooks(CuratorFramework curator) throws Exception {
  this.curator=curator;
  v1Webhooks=new PathChildrenCache(curator,""String_Node_Str"",true);
  v1Webhooks.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);
  v2Webhooks=new PathChildrenCache(curator,""String_Node_Str"",true);
  v2Webhooks.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);
  logger.info(""String_Node_Str"");
  cleanupEmpty(v1Webhooks);
  cleanupEmpty(v2Webhooks);
}","@Inject public ActiveWebhooks(CuratorFramework curator) throws Exception {
  this.curator=curator;
  v1Webhooks=new PathChildrenCache(curator,V1_LEADER,true);
  v1Webhooks.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);
  v2Webhooks=new PathChildrenCache(curator,V2_LEADER,true);
  v2Webhooks.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);
  logger.info(""String_Node_Str"");
  cleanupEmpty(v1Webhooks);
  cleanupEmpty(v2Webhooks);
}"
61667,"private void addAll(String name,Set<String> servers,String zkName) throws Exception {
  String path=WebhookLeader.LEADER_PATH + ""String_Node_Str"" + name+ ""String_Node_Str""+ zkName;
  List<String> leases=curator.getChildren().forPath(path);
  for (  String lease : leases) {
    byte[] bytes=curator.getData().forPath(path + ""String_Node_Str"" + lease);
    servers.add(new String(bytes) + ""String_Node_Str"" + HubHost.getLocalPort());
  }
}","private void addAll(String name,Set<String> servers,String zkName) throws Exception {
  String path=V2_LEADER + ""String_Node_Str"" + name+ ""String_Node_Str""+ zkName;
  List<String> leases=curator.getChildren().forPath(path);
  for (  String lease : leases) {
    byte[] bytes=curator.getData().forPath(path + ""String_Node_Str"" + lease);
    servers.add(new String(bytes) + ""String_Node_Str"" + HubHost.getLocalPort());
  }
}"
61668,"@Test public void testPath() throws Exception {
  logger.info(""String_Node_Str"");
  HubUtils hubUtils=new HubUtils(HubBindings.buildJerseyClientNoRedirects(),HubBindings.buildJerseyClient());
  CuratorCluster cluster=new CuratorCluster(curator,""String_Node_Str"",false,new SpokeDecommissionCluster(curator,hubUtils));
  Collection<String> servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(0,servers.size());
  logger.info(""String_Node_Str"");
  cluster.register();
  Sleeper.sleep(5000);
  logger.info(""String_Node_Str"");
  servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(1,servers.size());
  logger.info(""String_Node_Str"");
  cluster.delete();
  Sleeper.sleep(5000);
  servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(0,servers.size());
}","@Test public void testPath() throws Exception {
  logger.info(""String_Node_Str"");
  CuratorCluster cluster=new CuratorCluster(curator,""String_Node_Str"",false,new SpokeDecommissionCluster(curator));
  Collection<String> servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(0,servers.size());
  logger.info(""String_Node_Str"");
  cluster.register();
  Sleeper.sleep(5000);
  logger.info(""String_Node_Str"");
  servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(1,servers.size());
  logger.info(""String_Node_Str"");
  cluster.delete();
  Sleeper.sleep(5000);
  servers=cluster.getAllServers();
  assertNotNull(servers);
  assertEquals(0,servers.size());
}"
61669,"@BeforeClass public static void setUpClass() throws Exception {
  curator=Integration.startZooKeeper();
  HubUtils hubUtils=new HubUtils(HubBindings.buildJerseyClientNoRedirects(),HubBindings.buildJerseyClient());
  cluster=new SpokeDecommissionCluster(curator,hubUtils);
}","@BeforeClass public static void setUpClass() throws Exception {
  curator=Integration.startZooKeeper();
  cluster=new SpokeDecommissionCluster(curator);
}"
61670,"@BeforeClass public static void setUpClass() throws Exception {
  Injector injector=Integration.startAwsHub();
  util=new ContentDaoUtil(injector.getInstance(SpokeContentDao.class));
  CuratorFramework curator=injector.getInstance(CuratorFramework.class);
  HubUtils hubUtils=injector.getInstance(HubUtils.class);
  Cluster cluster=HubBindings.buildSpokeCluster(curator,new SpokeDecommissionCluster(curator,hubUtils));
  for (int i=0; i < 10; i++) {
    if (cluster.getAllServers().size() == 0) {
      logger.info(""String_Node_Str"");
      Sleeper.sleep(500);
    }
 else {
      logger.info(""String_Node_Str"",cluster.getAllServers());
      return;
    }
  }
  logger.info(""String_Node_Str"");
}","@BeforeClass public static void setUpClass() throws Exception {
  Injector injector=Integration.startAwsHub();
  util=new ContentDaoUtil(injector.getInstance(SpokeContentDao.class));
  CuratorFramework curator=injector.getInstance(CuratorFramework.class);
  Cluster cluster=HubBindings.buildSpokeCluster(curator,new SpokeDecommissionCluster(curator));
  for (int i=0; i < 10; i++) {
    if (cluster.getAllServers().size() == 0) {
      logger.info(""String_Node_Str"");
      Sleeper.sleep(500);
    }
 else {
      logger.info(""String_Node_Str"",cluster.getAllServers());
      return;
    }
  }
  logger.info(""String_Node_Str"");
}"
61671,"public AmazonS3 getS3Client() throws IOException {
  AmazonS3Client amazonS3Client=new AmazonS3Client(getAwsCredentials(),getClientConfiguration(""String_Node_Str"",true));
  amazonS3Client.setEndpoint(s3Endpoint);
  return amazonS3Client;
}","public AmazonS3 getS3Client() throws IOException {
  AmazonS3Client amazonS3Client;
  ClientConfiguration configuration=getClientConfiguration(""String_Node_Str"",true);
  try {
    InstanceProfileCredentialsProvider credentialsProvider=new InstanceProfileCredentialsProvider();
    credentialsProvider.getCredentials();
    amazonS3Client=new AmazonS3Client(credentialsProvider,configuration);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
    amazonS3Client=new AmazonS3Client(getPropertiesCredentials(),configuration);
  }
  amazonS3Client.setEndpoint(s3Endpoint);
  return amazonS3Client;
}"
61672,"public AmazonDynamoDBClient getDynamoClient() throws IOException {
  AmazonDynamoDBClient client=new AmazonDynamoDBClient(getAwsCredentials(),getClientConfiguration(""String_Node_Str"",false));
  client.setEndpoint(dynamoEndpoint);
  return client;
}","public AmazonDynamoDBClient getDynamoClient() throws IOException {
  logger.info(""String_Node_Str"" + protocol + ""String_Node_Str""+ dynamoEndpoint);
  AmazonDynamoDBClient client;
  ClientConfiguration configuration=getClientConfiguration(""String_Node_Str"",false);
  try {
    InstanceProfileCredentialsProvider credentialsProvider=new InstanceProfileCredentialsProvider();
    credentialsProvider.getCredentials();
    client=new AmazonDynamoDBClient(credentialsProvider,configuration);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
    client=new AmazonDynamoDBClient(getPropertiesCredentials(),configuration);
  }
  client.setEndpoint(dynamoEndpoint);
  return client;
}"
61673,"@GET @Produces(MediaType.APPLICATION_JSON) public Response getChannels(){
  ObjectNode root=mapper.createObjectNode();
  root.put(""String_Node_Str"",""String_Node_Str"");
  links=root.with(""String_Node_Str"");
  requestUri=StringUtils.appendIfMissing(uriInfo.getRequestUri().toString(),""String_Node_Str"");
  links.with(""String_Node_Str"").put(""String_Node_Str"",requestUri);
  addLink(""String_Node_Str"",InternalChannelResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalClusterResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalCuratorResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalDeployResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalHealthResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalPropertiesResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalShutdownResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalStacktraceResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalTimeResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalTracesResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalWebhookResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalZookeeperResource.DESCRIPTION);
  return Response.ok(root).build();
}","@GET @Produces(MediaType.APPLICATION_JSON) public Response getChannels(){
  ObjectNode root=mapper.createObjectNode();
  root.put(""String_Node_Str"",""String_Node_Str"");
  links=root.with(""String_Node_Str"");
  requestUri=StringUtils.appendIfMissing(uriInfo.getRequestUri().toString(),""String_Node_Str"");
  links.with(""String_Node_Str"").put(""String_Node_Str"",requestUri);
  addLink(""String_Node_Str"",InternalChannelResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalCuratorResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalDeployResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalHealthResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalPropertiesResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalShutdownResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalStacktraceResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalTimeResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalTracesResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalWebhookResource.DESCRIPTION);
  addLink(""String_Node_Str"",InternalZookeeperResource.DESCRIPTION);
  return Response.ok(root).build();
}"
61674,"@Override public Content get(String channelName,ContentKey key){
  String path=getPath(channelName,key);
  Traces traces=ActiveTraces.getLocal();
  traces.add(""String_Node_Str"");
  try {
    return spokeStore.get(channelName,path,key);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + path,e);
    return null;
  }
 finally {
    traces.add(""String_Node_Str"");
  }
}","@Override public Content get(String channelName,ContentKey key){
  String path=getPath(channelName,key);
  Traces traces=ActiveTraces.getLocal();
  traces.add(""String_Node_Str"");
  try {
    return spokeStore.get(path,key);
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + path,e);
    return null;
  }
 finally {
    traces.add(""String_Node_Str"");
  }
}"
61675,"@Override public SortedSet<ContentKey> query(DirectionQuery query){
  int ttlMinutes=HubProperties.getSpokeTtlMinutes();
  DateTime spokeTtlTime=TimeUtil.BIG_BANG;
  if (HubProperties.getProperty(""String_Node_Str"",true)) {
    spokeTtlTime=query.getChannelStable().minusMinutes(ttlMinutes);
    if (query.getChannelConfig().isLive()) {
      if (query.getStartKey().getTime().isBefore(spokeTtlTime)) {
        query=query.withStartKey(new ContentKey(spokeTtlTime,""String_Node_Str""));
      }
    }
 else {
      spokeTtlTime=query.getChannelStable().minusMinutes(ttlMinutes * 2);
    }
  }
  ActiveTraces.getLocal().add(""String_Node_Str"",query,spokeTtlTime);
  SortedSet<ContentKey> contentKeys=Collections.emptySortedSet();
  if (query.isNext()) {
    try {
      contentKeys=spokeStore.getNext(query.getChannelName(),query.getCount(),query.getStartKey());
    }
 catch (    InterruptedException e) {
      logger.warn(""String_Node_Str"" + query,e);
    }
  }
 else {
    ContentKey startKey=query.getStartKey();
    DateTime startTime=startKey.getTime();
    contentKeys=new TreeSet<>();
    while (contentKeys.size() < query.getCount() && startTime.isAfter(spokeTtlTime.minusHours(1)) && startTime.isBefore(query.getChannelStable().plusHours(1))) {
      TimeQuery timeQuery=query.convert(TimeUtil.Unit.HOURS).startTime(startTime).build();
      SortedSet<ContentKey> queryByTime=queryByTime(timeQuery);
      queryByTime.addAll(contentKeys);
      Set<ContentKey> filtered=ContentKeyUtil.filter(queryByTime,query);
      contentKeys.addAll(filtered);
      startTime=startTime.minusHours(1);
    }
  }
  ActiveTraces.getLocal().add(""String_Node_Str"",contentKeys);
  return contentKeys;
}","@Override public SortedSet<ContentKey> query(DirectionQuery query){
  int ttlMinutes=HubProperties.getSpokeTtlMinutes();
  DateTime spokeTtlTime=TimeUtil.BIG_BANG;
  if (HubProperties.getProperty(""String_Node_Str"",true)) {
    spokeTtlTime=query.getChannelStable().minusMinutes(ttlMinutes);
    if (query.getChannelConfig().isLive()) {
      if (query.getStartKey().getTime().isBefore(spokeTtlTime)) {
        query=query.withStartKey(new ContentKey(spokeTtlTime,""String_Node_Str""));
      }
    }
 else {
      spokeTtlTime=query.getChannelStable().minusMinutes(ttlMinutes * 2);
    }
  }
  ActiveTraces.getLocal().add(""String_Node_Str"",query,spokeTtlTime);
  SortedSet<ContentKey> contentKeys=Collections.emptySortedSet();
  if (query.isNext()) {
    try {
      contentKeys=spokeStore.getNext(query.getChannelName(),query.getCount(),query.getStartKey().toUrl());
    }
 catch (    InterruptedException e) {
      logger.warn(""String_Node_Str"" + query,e);
    }
  }
 else {
    ContentKey startKey=query.getStartKey();
    DateTime startTime=startKey.getTime();
    contentKeys=new TreeSet<>();
    while (contentKeys.size() < query.getCount() && startTime.isAfter(spokeTtlTime.minusHours(1)) && startTime.isBefore(query.getChannelStable().plusHours(1))) {
      TimeQuery timeQuery=query.convert(TimeUtil.Unit.HOURS).startTime(startTime).build();
      SortedSet<ContentKey> queryByTime=queryByTime(timeQuery);
      queryByTime.addAll(contentKeys);
      Set<ContentKey> filtered=ContentKeyUtil.filter(queryByTime,query);
      contentKeys.addAll(filtered);
      startTime=startTime.minusHours(1);
    }
  }
  ActiveTraces.getLocal().add(""String_Node_Str"",contentKeys);
  return contentKeys;
}"
61676,"private SortedSet<ContentKey> queryByTimeKeys(TimeQuery query){
  try {
    QueryResult queryResult=spokeStore.readTimeBucket(query);
    ActiveTraces.getLocal().add(""String_Node_Str"",queryResult);
    if (!queryResult.hadSuccess()) {
      QueryResult retryResult=spokeStore.readTimeBucket(query);
      ActiveTraces.getLocal().add(""String_Node_Str"",retryResult);
      if (!retryResult.hadSuccess()) {
        ActiveTraces.getLocal().log(logger);
        throw new FailedQueryException(""String_Node_Str"" + query + ""String_Node_Str""+ queryResult);
      }
      queryResult.getContentKeys().addAll(retryResult.getContentKeys());
    }
    ActiveTraces.getLocal().add(""String_Node_Str"",queryResult.getContentKeys());
    return queryResult.getContentKeys();
  }
 catch (  FailedQueryException rethrow) {
    throw rethrow;
  }
catch (  Exception e) {
    logger.warn(""String_Node_Str"" + query,e);
  }
  return Collections.emptySortedSet();
}","private SortedSet<ContentKey> queryByTimeKeys(TimeQuery query){
  try {
    String timePath=query.getUnit().format(query.getStartTime());
    QueryResult queryResult=spokeStore.readTimeBucket(query.getChannelName(),timePath);
    ActiveTraces.getLocal().add(""String_Node_Str"",queryResult);
    if (!queryResult.hadSuccess()) {
      QueryResult retryResult=spokeStore.readTimeBucket(query.getChannelName(),timePath);
      ActiveTraces.getLocal().add(""String_Node_Str"",retryResult);
      if (!retryResult.hadSuccess()) {
        ActiveTraces.getLocal().log(logger);
        throw new FailedQueryException(""String_Node_Str"" + query + ""String_Node_Str""+ queryResult);
      }
      queryResult.getContentKeys().addAll(retryResult.getContentKeys());
    }
    ActiveTraces.getLocal().add(""String_Node_Str"",queryResult.getContentKeys());
    return queryResult.getContentKeys();
  }
 catch (  FailedQueryException rethrow) {
    throw rethrow;
  }
catch (  Exception e) {
    logger.warn(""String_Node_Str"" + query,e);
  }
  return Collections.emptySortedSet();
}"
61677,"public static ChannelConfig createFromJson(String json){
  if (StringUtils.isEmpty(json)) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
 else {
    return gson.fromJson(json,ChannelConfig.ChannelConfigBuilder.class).build();
  }
}","public static ChannelConfig createFromJson(String json){
  if (StringUtils.isEmpty(json)) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
 else {
    return gson.fromJson(json,ChannelConfigBuilder.class).build();
  }
}"
61678,"private ChannelConfig(String name,String owner,Date creationDate,long ttlDays,long maxItems,String description,Set<String> tags,String replicationSource,String storage,GlobalConfig global,boolean protect,DateTime mutableTime,boolean allowZeroBytes,String displayName){
  this.name=StringUtils.trim(name);
  this.displayName=StringUtils.defaultIfBlank(displayName,name);
  this.owner=StringUtils.trim(owner);
  this.creationDate=creationDate;
  this.description=description;
  this.tags=tags;
  this.replicationSource=replicationSource;
  this.mutableTime=mutableTime;
  this.allowZeroBytes=allowZeroBytes;
  if (maxItems == 0 && ttlDays == 0 && mutableTime == null) {
    this.ttlDays=120;
    this.maxItems=0;
  }
 else {
    this.ttlDays=ttlDays;
    this.maxItems=maxItems;
  }
  if (isBlank(storage)) {
    this.storage=SINGLE;
  }
 else {
    this.storage=StringUtils.upperCase(storage);
  }
  if (global != null) {
    this.global=global.cleanup();
  }
 else {
    this.global=null;
  }
  addTagIf(!isBlank(replicationSource),REPLICATED);
  addTagIf(isGlobal(),GLOBAL);
  addTagIf(isHistorical(),HISTORICAL);
  if (HubProperties.isProtected()) {
    this.protect=true;
  }
 else {
    this.protect=protect;
  }
}","private ChannelConfig(String name,String owner,Date creationDate,long ttlDays,long maxItems,String description,Set<String> tags,String replicationSource,String storage,GlobalConfig global,boolean protect,DateTime mutableTime,boolean allowZeroBytes,String displayName){
  this.name=StringUtils.trim(name);
  this.displayName=StringUtils.defaultIfBlank(StringUtils.trim(displayName),this.name);
  this.owner=StringUtils.trim(owner);
  this.creationDate=creationDate;
  this.description=description;
  this.tags=tags;
  this.replicationSource=replicationSource;
  this.mutableTime=mutableTime;
  this.allowZeroBytes=allowZeroBytes;
  if (maxItems == 0 && ttlDays == 0 && mutableTime == null) {
    this.ttlDays=120;
    this.maxItems=0;
  }
 else {
    this.ttlDays=ttlDays;
    this.maxItems=maxItems;
  }
  if (isBlank(storage)) {
    this.storage=SINGLE;
  }
 else {
    this.storage=StringUtils.upperCase(storage);
  }
  if (global != null) {
    this.global=global.cleanup();
  }
 else {
    this.global=null;
  }
  addTagIf(!isBlank(replicationSource),REPLICATED);
  addTagIf(isGlobal(),GLOBAL);
  addTagIf(isHistorical(),HISTORICAL);
  if (HubProperties.isProtected()) {
    this.protect=true;
  }
 else {
    this.protect=protect;
  }
}"
61679,"private void setStartTime(ClusterEvent clusterEvent){
  this.startTime=new DateTime(clusterEvent.getCreationTime(),DateTimeZone.UTC);
  timeInterval=new TimeInterval(startTime,null);
}","private void setStartTime(ClusterEvent clusterEvent){
  this.startTime=new DateTime(clusterEvent.getModifiedTime(),DateTimeZone.UTC);
  timeInterval=new TimeInterval(startTime,null);
}"
61680,"@Test public void test5NodeRollingRestart(){
  List<String> strings=create5RollingRestartEvents();
  check5RollingRestart(strings);
}","@Test public void test5NodeRollingRestart(){
  Collection<ClusterEvent> events=ClusterEvent.set();
  events.add(new ClusterEvent(""String_Node_Str"" + steps[0] + ""String_Node_Str"",steps[0]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[1] + ""String_Node_Str"",steps[1]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[2] + ""String_Node_Str"",steps[2]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[3] + ""String_Node_Str"",steps[3]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[4] + ""String_Node_Str"",steps[4]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[0] + ""String_Node_Str"",steps[5]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[6] + ""String_Node_Str"",steps[6]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[1] + ""String_Node_Str"",steps[7]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[8] + ""String_Node_Str"",steps[8]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[2] + ""String_Node_Str"",steps[9]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[10] + ""String_Node_Str"",steps[10]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[3] + ""String_Node_Str"",steps[11]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[12] + ""String_Node_Str"",steps[12]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[4] + ""String_Node_Str"",steps[13]));
  events.add(new ClusterEvent(""String_Node_Str"" + steps[14] + ""String_Node_Str"",steps[14]));
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(events);
  compare(spokeRings.getNodes(""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str""),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0] + HALF_STEP)),Arrays.asList(""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[4] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[5] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[6] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[7] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[8] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[9] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[10] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[11] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[12] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[13] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  compare(spokeRings.getNodes(""String_Node_Str"",getTime(steps[14] + HALF_STEP)),Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
}"
61681,"@Test public void test4Nodes(){
  List<String> strings=Arrays.asList(steps[0] + ""String_Node_Str"",steps[1] + ""String_Node_Str"",steps[2] + ""String_Node_Str"",steps[3] + ""String_Node_Str"");
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(strings);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","@Test public void test4Nodes(){
  List<ClusterEvent> clusterEvents=new ArrayList<>();
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[0] + ""String_Node_Str"",steps[0]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[1] + ""String_Node_Str"",steps[1]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[2] + ""String_Node_Str"",steps[2]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[3] + ""String_Node_Str"",steps[3]));
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(clusterEvents);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}"
61682,"@Test public void test3Nodes(){
  List<String> strings=Arrays.asList(steps[0] + ""String_Node_Str"",steps[1] + ""String_Node_Str"",steps[2] + ""String_Node_Str"");
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(strings);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","@Test public void test3Nodes(){
  List<ClusterEvent> clusterEvents=new ArrayList<>();
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[0] + ""String_Node_Str"",steps[0]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[1] + ""String_Node_Str"",steps[1]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[2] + ""String_Node_Str"",steps[2]));
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(clusterEvents);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}"
61683,"@Test public void test5Nodes(){
  List<String> strings=Arrays.asList(steps[0] + ""String_Node_Str"",steps[1] + ""String_Node_Str"",steps[2] + ""String_Node_Str"",steps[3] + ""String_Node_Str"",steps[4] + ""String_Node_Str"");
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(strings);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[5]),getTime(steps[6])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[4]),getTime(steps[6])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}","@Test public void test5Nodes(){
  List<ClusterEvent> clusterEvents=new ArrayList<>();
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[0] + ""String_Node_Str"",steps[0]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[1] + ""String_Node_Str"",steps[1]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[2] + ""String_Node_Str"",steps[2]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[3] + ""String_Node_Str"",steps[3]));
  clusterEvents.add(new ClusterEvent(""String_Node_Str"" + steps[4] + ""String_Node_Str"",steps[4]));
  SpokeRings spokeRings=new SpokeRings();
  spokeRings.process(clusterEvents);
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"").containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0])).containsAll(Arrays.asList(""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[1])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[2])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[3])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[0]),getTime(steps[4])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[5]),getTime(steps[6])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  assertTrue(spokeRings.getNodes(""String_Node_Str"",getTime(steps[4]),getTime(steps[6])).containsAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
}"
61684,"SpokeRing(ClusterEvent clusterEvent,SpokeRing previousRing){
  setStartTime(clusterEvent);
  previousRing.setEndTime(this.startTime);
  HashSet<String> nodes=new HashSet<>(previousRing.spokeNodes);
  if (clusterEvent.isAdded()) {
    nodes.add(clusterEvent.getName());
  }
 else {
    nodes.remove(clusterEvent.getName());
  }
  initialize(nodes);
}","SpokeRing(ClusterEvent clusterEvent,SpokeRing previousRing){
  setStartTime(clusterEvent);
  previousRing.setEndTime(new DateTime(clusterEvent.getModifiedTime(),DateTimeZone.UTC));
  HashSet<String> nodes=new HashSet<>(previousRing.spokeNodes);
  if (clusterEvent.isAdded()) {
    nodes.add(clusterEvent.getName());
  }
 else {
    nodes.remove(clusterEvent.getName());
  }
  initialize(nodes);
}"
61685,"@Override public void mute(){
  logger.info(""String_Node_Str"");
  String api_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String app_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String name=HubHost.getLocalName();
  if (""String_Node_Str"".equals(api_key) || ""String_Node_Str"".equals(app_key)) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key);
  try {
    String url=""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key;
    ObjectNode root=mapper.createObjectNode();
    root.put(""String_Node_Str"",""String_Node_Str"" + name);
    root.put(""String_Node_Str"",""String_Node_Str"");
    root.put(""String_Node_Str"",(new Instant()).getMillis() + (4 * 60 * 60* 1000));
    ClientResponse response=RestClient.defaultClient().resource(url).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,root);
    int status=response.getStatus();
    if (status >= 200 && status <= 299) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ status);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}","@Override public void mute(){
  logger.info(""String_Node_Str"");
  String api_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String app_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String name=HubHost.getLocalName();
  long end=(new Instant()).getMillis() + (4 * 60 * 60* 1000);
  if (""String_Node_Str"".equals(api_key) || ""String_Node_Str"".equals(app_key)) {
    logger.warn(""String_Node_Str"");
    return;
  }
  try {
    String url=""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key;
    ObjectNode root=mapper.createObjectNode();
    root.put(""String_Node_Str"",""String_Node_Str"" + name);
    root.put(""String_Node_Str"",""String_Node_Str"");
    root.put(""String_Node_Str"",end);
    String data=root.toString();
    ClientResponse response=RestClient.defaultClient().resource(url).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,data);
    int status=response.getStatus();
    if (status >= 200 && status <= 299) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ status);
      logger.warn(data);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}"
61686,"@Override public void mute(){
  logger.info(""String_Node_Str"");
  String api_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String app_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String name=HubHost.getLocalName();
  if (""String_Node_Str"".equals(api_key) || ""String_Node_Str"".equals(app_key)) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key);
  try {
    String url=""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key;
    ObjectNode root=mapper.createObjectNode();
    root.put(""String_Node_Str"",""String_Node_Str"" + name);
    root.put(""String_Node_Str"",""String_Node_Str"");
    root.put(""String_Node_Str"",(new Instant()).getMillis() + (4 * 60 * 60));
    ClientResponse response=RestClient.defaultClient().resource(url).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,root);
    if (response.getStatus() == 200) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      logger.warn(""String_Node_Str"" + name);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}","@Override public void mute(){
  logger.info(""String_Node_Str"");
  String api_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String app_key=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String name=HubHost.getLocalName();
  if (""String_Node_Str"".equals(api_key) || ""String_Node_Str"".equals(app_key)) {
    logger.warn(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key);
  try {
    String url=""String_Node_Str"" + api_key + ""String_Node_Str""+ app_key;
    ObjectNode root=mapper.createObjectNode();
    root.put(""String_Node_Str"",""String_Node_Str"" + name);
    root.put(""String_Node_Str"",""String_Node_Str"");
    root.put(""String_Node_Str"",(new Instant()).getMillis() + (4 * 60 * 60* 1000));
    ClientResponse response=RestClient.defaultClient().resource(url).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,root);
    int status=response.getStatus();
    if (status >= 200 && status <= 299) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      logger.warn(""String_Node_Str"" + name + ""String_Node_Str""+ status);
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
}"
61687,"private ContentKey insertInternal(String channelName,Content content) throws Exception {
  return inFlightService.inFlight(() -> {
    Traces traces=ActiveTraces.getLocal();
    traces.add(""String_Node_Str"");
    try {
      content.packageStream();
      traces.add(""String_Node_Str"");
      ContentKey key=content.keyAndStart(timeService.getNow());
      logger.trace(""String_Node_Str"",key,channelName);
      contentService.insert(channelName,content);
      traces.add(""String_Node_Str"",key);
      return key;
    }
 catch (    ContentTooLargeException e) {
      logger.info(""String_Node_Str"" + channelName);
      throw e;
    }
catch (    Exception e) {
      traces.add(""String_Node_Str"",""String_Node_Str"",e.getMessage());
      logger.warn(""String_Node_Str"" + channelName,e);
      throw e;
    }
  }
);
}","private ContentKey insertInternal(String channelName,Content content) throws Exception {
  return inFlightService.inFlight(() -> {
    Traces traces=ActiveTraces.getLocal();
    traces.add(""String_Node_Str"");
    try {
      content.packageStream();
      traces.add(""String_Node_Str"");
      ContentKey key=content.keyAndStart(timeService.getNow());
      logger.trace(""String_Node_Str"",key,channelName);
      key=contentService.insert(channelName,content);
      traces.add(""String_Node_Str"",key);
      return key;
    }
 catch (    ContentTooLargeException e) {
      logger.info(""String_Node_Str"" + channelName);
      throw e;
    }
catch (    Exception e) {
      traces.add(""String_Node_Str"",""String_Node_Str"",e.getMessage());
      logger.warn(""String_Node_Str"" + channelName,e);
      throw e;
    }
  }
);
}"
61688,"static Content createIndex(Content largePayload){
  Content.Builder builder=Content.builder();
  builder.withContentType(S3LargeContentDao.CONTENT_TYPE);
  ObjectNode data=mapper.createObjectNode();
  data.put(""String_Node_Str"",largePayload.getContentKey().get().toUrl());
  data.put(""String_Node_Str"",largePayload.getSize());
  if (largePayload.getContentType().isPresent()) {
    data.put(""String_Node_Str"",largePayload.getContentType().get());
  }
  builder.withData(data.toString().getBytes());
  Content indexContent=builder.build();
  indexContent.keyAndStart(TimeUtil.now());
  return indexContent;
}","static Content createIndex(Content largePayload){
  Content.Builder builder=Content.builder();
  builder.withContentType(S3LargeContentDao.CONTENT_TYPE);
  ObjectNode data=mapper.createObjectNode();
  data.put(""String_Node_Str"",largePayload.getContentKey().get().toUrl());
  data.put(""String_Node_Str"",largePayload.getSize());
  if (largePayload.getContentType().isPresent()) {
    data.put(""String_Node_Str"",largePayload.getContentType().get());
  }
  builder.withData(data.toString().getBytes());
  builder.withContentKey(new ContentKey());
  return builder.build();
}"
61689,"public Content get(String path,ContentKey key){
  Collection<String> servers=cluster.getRandomServers();
  for (  String server : servers) {
    ClientResponse response=null;
    try {
      setThread(path);
      response=query_client.resource(HubHost.getScheme() + server + ""String_Node_Str""+ path).get(ClientResponse.class);
      logger.trace(""String_Node_Str"",server,path,response);
      if (response.getStatus() == 200) {
        byte[] entity=response.getEntity(byte[].class);
        if (entity.length > 0) {
          return ContentMarshaller.toContent(entity,key);
        }
      }
    }
 catch (    JsonMappingException e) {
      logger.info(""String_Node_Str"" + path);
    }
catch (    ClientHandlerException e) {
      if (e.getCause() != null && e.getCause() instanceof ConnectException) {
        logger.warn(""String_Node_Str"" + server);
      }
 else {
        logger.warn(""String_Node_Str"" + server + ""String_Node_Str""+ path,e);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + path,e);
    }
 finally {
      HubUtils.close(response);
      resetThread();
    }
  }
  return null;
}","public Content get(String path,ContentKey key){
  Collection<String> servers=cluster.getRandomServers();
  for (  String server : servers) {
    ClientResponse response=null;
    try {
      setThread(path);
      response=query_client.resource(HubHost.getScheme() + server + ""String_Node_Str""+ path).get(ClientResponse.class);
      logger.trace(""String_Node_Str"",server,path,response);
      if (response.getStatus() == 200) {
        byte[] entity=response.getEntity(byte[].class);
        if (entity.length > 0) {
          return ContentMarshaller.toContent(entity,key);
        }
      }
    }
 catch (    JsonMappingException e) {
      logger.info(""String_Node_Str"" + path,e);
    }
catch (    ClientHandlerException e) {
      if (e.getCause() != null && e.getCause() instanceof ConnectException) {
        logger.warn(""String_Node_Str"" + server);
      }
 else {
        logger.warn(""String_Node_Str"" + server + ""String_Node_Str""+ path,e);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + path,e);
    }
 finally {
      HubUtils.close(response);
      resetThread();
    }
  }
  return null;
}"
61690,"public static HubJettyServer startServer() throws IOException {
  ResourceConfig resourceConfig=new ResourceConfig();
  resourceConfig.register(new ObjectMapperResolver(HubBindings.objectMapper()));
  resourceConfig.register(JacksonJsonProvider.class);
  resourceConfig.registerClasses(EncodingFilter.class,StreamEncodingFilter.class,GZipEncoder.class,DeflateEncoder.class);
  List<Module> modules=new ArrayList<>();
  modules.add(new HubBindings());
  String hubType=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"",hubType);
  resourceConfig.packages(""String_Node_Str"");
switch (hubType) {
case ""String_Node_Str"":
    modules.add(new ClusterHubBindings());
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
modules.add(new SingleHubBindings());
break;
default :
throw new RuntimeException(""String_Node_Str"" + hubType);
}
HubProvider.setInjector(Guice.createInjector(modules));
HubServices.start(HubServices.TYPE.DEFAULT_PRE_START);
HubJettyServer server=new HubJettyServer();
server.start(resourceConfig);
logger.info(""String_Node_Str"");
HubServices.start(HubServices.TYPE.SET_HEALTHY);
logger.info(""String_Node_Str"");
HubServices.start(HubServices.TYPE.AFTER_HEALTHY_START);
return server;
}","public static HubJettyServer startServer() throws IOException {
  ResourceConfig resourceConfig=new ResourceConfig();
  resourceConfig.register(new ObjectMapperResolver(HubBindings.objectMapper()));
  resourceConfig.register(JacksonJsonProvider.class);
  resourceConfig.registerClasses(EncodingFilter.class,StreamEncodingFilter.class,GZipEncoder.class,DeflateEncoder.class);
  List<Module> modules=new ArrayList<>();
  modules.add(new HubBindings());
  String hubType=HubProperties.getProperty(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"",hubType);
  resourceConfig.packages(""String_Node_Str"");
switch (hubType) {
case ""String_Node_Str"":
    modules.add(new ClusterHubBindings());
  break;
case ""String_Node_Str"":
case ""String_Node_Str"":
modules.add(new SingleHubBindings());
break;
default :
throw new RuntimeException(""String_Node_Str"" + hubType);
}
HubProvider.setInjector(Guice.createInjector(modules));
HubServices.start(HubServices.TYPE.BEFORE_HEALTH_CHECK);
HubJettyServer server=new HubJettyServer();
server.start(resourceConfig);
logger.info(""String_Node_Str"");
HubServices.start(HubServices.TYPE.PERFORM_HEALTH_CHECK);
logger.info(""String_Node_Str"");
HubServices.start(HubServices.TYPE.AFTER_HEALTHY_START);
return server;
}"
61691,"public static void registerPreStop(Service service){
  register(service,TYPE.DEFAULT_PRE_START,TYPE.PRE_STOP);
}","public static void registerPreStop(Service service){
  register(service,TYPE.BEFORE_HEALTH_CHECK,TYPE.PRE_STOP);
}"
61692,"public static synchronized void start(TYPE type){
  try {
    for (    Service service : serviceMap.get(type)) {
      logger.info(""String_Node_Str"" + service.getClass().getName());
      service.startAsync();
      service.awaitRunning();
      logger.info(""String_Node_Str"" + service.getClass().getName());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    System.exit(-1);
  }
}","public static void start(TYPE type){
  try {
    List<Service> serviceList=new ArrayList<>();
synchronized (serviceMap) {
      serviceList.addAll(serviceMap.get(type));
    }
    for (    Service service : serviceList) {
      logger.info(""String_Node_Str"" + service.getClass().getName());
      service.startAsync();
      service.awaitRunning();
      logger.info(""String_Node_Str"" + service.getClass().getName());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    System.exit(-1);
  }
}"
61693,"public static synchronized void register(Service service,TYPE... types){
  for (  TYPE type : types) {
    logger.info(""String_Node_Str"" + service.getClass().getName() + ""String_Node_Str""+ type);
    serviceMap.get(type).add(service);
  }
}","public static void register(Service service,TYPE... types){
  for (  TYPE type : types) {
    logger.info(""String_Node_Str"" + service.getClass().getName() + ""String_Node_Str""+ type);
    serviceMap.get(type).add(service);
  }
}"
61694,"public HubHealthCheck(){
  HubServices.register(new HealthService(),HubServices.TYPE.SET_HEALTHY);
}","public HubHealthCheck(){
  HubServices.register(new HealthService(),HubServices.TYPE.PERFORM_HEALTH_CHECK);
}"
61695,"public DelegatingMetricsService(){
  if (HubProperties.getProperty(""String_Node_Str"",false)) {
    services.add(new HostedGraphiteMetricsService());
  }
  if (HubProperties.getProperty(""String_Node_Str"",false)) {
    services.add(new DataDogMetricsService());
  }
}","public DelegatingMetricsService(){
  HubServices.register(new DelegatingMetricsServiceInitial(),HubServices.TYPE.BEFORE_HEALTH_CHECK);
}"
61696,"public SpokeClusterRegister(){
  HubServices.register(new CuratorSpokeClusterHook(),HubServices.TYPE.SET_HEALTHY,HubServices.TYPE.PRE_STOP);
}","public SpokeClusterRegister(){
  HubServices.register(new CuratorSpokeClusterHook(),HubServices.TYPE.PERFORM_HEALTH_CHECK,HubServices.TYPE.PRE_STOP);
}"
61697,"private void sendChunk(){
  futures.add(service.submit(() -> chunkFunction.apply(chunk)));
}","private void sendChunk(Chunk chunk){
  futures.add(service.submit(() -> chunkFunction.apply(chunk)));
}"
61698,"public void write(int b) throws IOException {
  if (!chunk.add(b)) {
    sendChunk();
    count++;
    chunk=new Chunk(count);
    chunk.add(b);
  }
}","public void write(int b) throws IOException {
  if (!chunk.add(b)) {
    sendChunk(chunk);
    count++;
    chunk=new Chunk(count);
    chunk.add(b);
  }
}"
61699,"@Override public void close() throws IOException {
  if (chunk.hasData()) {
    sendChunk();
  }
  ListenableFuture<String> allFutures=Futures.whenAllSucceed(futures).call(() -> ""String_Node_Str"");
  try {
    allFutures.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeInterruptedException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}","@Override public void close() throws IOException {
  if (chunk.hasData()) {
    sendChunk(chunk);
  }
  ListenableFuture<String> allFutures=Futures.whenAllSucceed(futures).call(() -> ""String_Node_Str"");
  try {
    allFutures.get();
  }
 catch (  InterruptedException e) {
    throw new RuntimeInterruptedException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}"
61700,"private void limitChildren(String webhook){
  String errorRoot=getErrorRoot(webhook);
  try {
    List<String> children=curator.getChildren().forPath(errorRoot);
    children.sort(String.CASE_INSENSITIVE_ORDER);
    if (children.size() > MAX_SIZE) {
      int transition=children.size() - MAX_SIZE;
      for (int i=0; i < transition; i++) {
        curator.delete().forPath(getChildPath(errorRoot,children.get(i)));
      }
      DateTime cutoffTime=TimeUtil.now().minusHours(1);
      for (int i=transition; i < children.size(); i++) {
        Stat stat=new Stat();
        String child=children.get(i);
        curator.getData().storingStatIn(stat).forPath(getChildPath(errorRoot,child));
        if (new DateTime(stat.getCtime()).isBefore(cutoffTime)) {
          curator.delete().forPath(getChildPath(errorRoot,child));
        }
      }
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + errorRoot,e);
  }
}","private List<String> limitChildren(String webhook){
  String errorRoot=getErrorRoot(webhook);
  List<String> results=new ArrayList<>();
  SortedMap<String,Error> errors=new TreeMap<>();
  try {
    for (    String child : curator.getChildren().forPath(errorRoot)) {
      Stat stat=new Stat();
      byte[] bytes=curator.getData().storingStatIn(stat).forPath(getChildPath(errorRoot,child));
      errors.put(child,new Error(child,new DateTime(stat.getCtime()),new String(bytes)));
    }
    while (errors.size() > MAX_SIZE) {
      String firstKey=errors.firstKey();
      errors.remove(firstKey);
      curator.delete().inBackground().forPath(getChildPath(errorRoot,firstKey));
    }
    DateTime cutoffTime=TimeUtil.now().minusDays(1);
    for (    Error error : errors.values()) {
      if (error.getCreationTime().isBefore(cutoffTime)) {
        curator.delete().inBackground().forPath(getChildPath(errorRoot,error.getName()));
      }
 else {
        results.add(error.getData());
      }
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + errorRoot,e);
  }
  return results;
}"
61701,"public List<String> get(String webhook){
  String errorRoot=getErrorRoot(webhook);
  List<String> errors=new ArrayList<>();
  try {
    Collection<String> children=new TreeSet<>(curator.getChildren().forPath(errorRoot));
    for (    String child : children) {
      errors.add(new String(curator.getData().forPath(getChildPath(errorRoot,child))));
    }
  }
 catch (  KeeperException.NoNodeException e) {
    logger.info(""String_Node_Str"" + errorRoot);
  }
catch (  Exception e) {
    logger.warn(""String_Node_Str"" + errorRoot,e);
  }
  return errors;
}","public List<String> get(String webhook){
  return limitChildren(webhook);
}"
61702,"@Override public ContentPath getLastUpdated(String channelName,ContentPath defaultValue){
  if (isReplicating(channelName)) {
    return lastContentPath.get(channelName,defaultValue,REPLICATED_LAST_UPDATED);
  }
  return defaultValue;
}","@Override public ContentPath getLastUpdated(String channelName,ContentPath defaultValue){
  if (isReplicating(channelName)) {
    ContentPath contentPath=lastContentPath.get(channelName,defaultValue,REPLICATED_LAST_UPDATED);
    if (!contentPath.equals(defaultValue)) {
      contentPath=new MinutePath(contentPath.getTime().plusSeconds(1));
    }
    return contentPath;
  }
  return defaultValue;
}"
61703,"private Collection<ContentKey> queryKeys(DateTime time){
  TimeQuery timeQuery=TimeQuery.builder().channelName(channel).startTime(time).unit(timedWebhook.getUnit()).stable(true).epoch(Epoch.IMMUTABLE).build();
  return channelService.queryByTime(timeQuery);
}","private Collection<ContentKey> queryKeys(DateTime time){
  TimeQuery timeQuery=TimeQuery.builder().channelName(channel).startTime(time).unit(timedWebhook.getUnit()).stable(false).epoch(Epoch.IMMUTABLE).build();
  return channelService.queryByTime(timeQuery);
}"
61704,"static DirectionQuery getDirectionQuery(String channel,int count,boolean stable,String location,String epoch){
  ChannelConfig channelConfig=channelService.getCachedChannelConfig(channel);
  ContentKey startKey=new ContentKey(channelConfig.getTtlTime(),""String_Node_Str"");
  return DirectionQuery.builder().channelName(channel).next(true).stable(stable).startKey(startKey).count(count).location(Location.valueOf(location)).epoch(Epoch.valueOf(epoch)).build();
}","public static DirectionQuery getDirectionQuery(String channel,int count,boolean stable,String location,String epoch){
  ChannelConfig channelConfig=channelService.getCachedChannelConfig(channel);
  ContentKey startKey=new ContentKey(channelConfig.getTtlTime(),""String_Node_Str"");
  return DirectionQuery.builder().channelName(channel).next(true).stable(stable).startKey(startKey).count(count).location(Location.valueOf(location)).epoch(Epoch.valueOf(epoch)).build();
}"
61705,"@GET public Response getEarliest(@PathParam(""String_Node_Str"") String tag,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean stable,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean trace,@QueryParam(""String_Node_Str"") @DefaultValue(Location.DEFAULT) String location,@QueryParam(""String_Node_Str"") @DefaultValue(Epoch.DEFAULT) String epoch,@Context UriInfo uriInfo){
  DirectionQuery query=ChannelEarliestResource.getDirectionQuery(tag,1,stable,location,epoch).withTagName(tag);
  Collection<ChannelContentKey> contentKeys=tagService.getEarliest(query);
  if (!contentKeys.isEmpty()) {
    URI uri=uriInfo.getBaseUriBuilder().path(contentKeys.iterator().next().toUrl()).queryParam(""String_Node_Str"",tag).build();
    return Response.status(SEE_OTHER).location(uri).build();
  }
  return Response.status(NOT_FOUND).build();
}","@GET public Response getEarliest(@PathParam(""String_Node_Str"") String tag,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean stable,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean trace,@QueryParam(""String_Node_Str"") @DefaultValue(Location.DEFAULT) String location,@QueryParam(""String_Node_Str"") @DefaultValue(Epoch.DEFAULT) String epoch,@Context UriInfo uriInfo){
  Collection<ChannelContentKey> contentKeys=tagService.getEarliest(getQuery(tag,1,stable,location,epoch));
  if (!contentKeys.isEmpty()) {
    URI uri=uriInfo.getBaseUriBuilder().path(contentKeys.iterator().next().toUrl()).queryParam(""String_Node_Str"",tag).build();
    return Response.status(SEE_OTHER).location(uri).build();
  }
  return Response.status(NOT_FOUND).build();
}"
61706,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getEarliestCount(@PathParam(""String_Node_Str"") String tag,@PathParam(""String_Node_Str"") int count,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean stable,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean batch,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean bulk,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean trace,@QueryParam(""String_Node_Str"") @DefaultValue(Location.DEFAULT) String location,@QueryParam(""String_Node_Str"") @DefaultValue(Epoch.DEFAULT) String epoch,@HeaderParam(""String_Node_Str"") String accept,@Context UriInfo uriInfo){
  DirectionQuery query=ChannelEarliestResource.getDirectionQuery(tag,count,stable,location,epoch).withTagName(tag);
  SortedSet<ChannelContentKey> keys=tagService.getEarliest(query);
  if (bulk || batch) {
    return BulkBuilder.buildTag(tag,keys,tagService.getChannelService(),uriInfo,accept);
  }
  ObjectNode root=mapper.createObjectNode();
  ObjectNode links=root.putObject(""String_Node_Str"");
  ObjectNode self=links.putObject(""String_Node_Str"");
  self.put(""String_Node_Str"",uriInfo.getRequestUri().toString());
  List<ChannelContentKey> list=new ArrayList<>(keys);
  String baseUri=uriInfo.getBaseUri() + ""String_Node_Str"" + tag+ ""String_Node_Str"";
  if (!list.isEmpty()) {
    ObjectNode next=links.putObject(""String_Node_Str"");
    next.put(""String_Node_Str"",baseUri + list.get(list.size() - 1).getContentKey().toUrl() + ""String_Node_Str""+ count);
  }
  ArrayNode ids=links.putArray(""String_Node_Str"");
  for (  ChannelContentKey key : keys) {
    ids.add(uriInfo.getBaseUri() + key.toUrl() + ""String_Node_Str""+ tag);
  }
  return Response.ok(root).build();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getEarliestCount(@PathParam(""String_Node_Str"") String tag,@PathParam(""String_Node_Str"") int count,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean stable,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean batch,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean bulk,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") boolean trace,@QueryParam(""String_Node_Str"") @DefaultValue(Location.DEFAULT) String location,@QueryParam(""String_Node_Str"") @DefaultValue(Epoch.DEFAULT) String epoch,@HeaderParam(""String_Node_Str"") String accept,@Context UriInfo uriInfo){
  DirectionQuery query=getQuery(tag,count,stable,location,epoch);
  SortedSet<ChannelContentKey> keys=tagService.getEarliest(query);
  if (bulk || batch) {
    return BulkBuilder.buildTag(tag,keys,tagService.getChannelService(),uriInfo,accept);
  }
  ObjectNode root=mapper.createObjectNode();
  ObjectNode links=root.putObject(""String_Node_Str"");
  ObjectNode self=links.putObject(""String_Node_Str"");
  self.put(""String_Node_Str"",uriInfo.getRequestUri().toString());
  List<ChannelContentKey> list=new ArrayList<>(keys);
  String baseUri=uriInfo.getBaseUri() + ""String_Node_Str"" + tag+ ""String_Node_Str"";
  if (!list.isEmpty()) {
    ObjectNode next=links.putObject(""String_Node_Str"");
    next.put(""String_Node_Str"",baseUri + list.get(list.size() - 1).getContentKey().toUrl() + ""String_Node_Str""+ count);
  }
  ArrayNode ids=links.putArray(""String_Node_Str"");
  for (  ChannelContentKey key : keys) {
    ids.add(uriInfo.getBaseUri() + key.toUrl() + ""String_Node_Str""+ tag);
  }
  return Response.ok(root).build();
}"
61707,"public SortedSet<ChannelContentKey> getEarliest(DirectionQuery tagQuery){
  Iterable<ChannelConfig> channels=getChannels(tagQuery.getTagName());
  Traces traces=ActiveTraces.getLocal();
  traces.add(""String_Node_Str"",tagQuery.getTagName());
  SortedSet<ChannelContentKey> orderedKeys=Collections.synchronizedSortedSet(new TreeSet<>());
  for (  ChannelConfig channel : channels) {
    Collection<ContentKey> contentKeys=channelService.query(tagQuery.withChannelName(channel.getName()));
    for (    ContentKey contentKey : contentKeys) {
      orderedKeys.add(new ChannelContentKey(channel.getName(),contentKey));
    }
  }
  traces.add(""String_Node_Str"",orderedKeys);
  return orderedKeys;
}","public SortedSet<ChannelContentKey> getEarliest(DirectionQuery tagQuery){
  Iterable<ChannelConfig> channels=getChannels(tagQuery.getTagName());
  Traces traces=ActiveTraces.getLocal();
  traces.add(""String_Node_Str"",tagQuery.getTagName());
  SortedSet<ChannelContentKey> orderedKeys=Collections.synchronizedSortedSet(new TreeSet<>());
  for (  ChannelConfig channel : channels) {
    DirectionQuery query=ChannelEarliestResource.getDirectionQuery(channel.getName(),tagQuery.getCount(),tagQuery.isStable(),tagQuery.getLocation().name(),tagQuery.getEpoch().name());
    for (    ContentKey contentKey : channelService.query(query)) {
      orderedKeys.add(new ChannelContentKey(channel.getName(),contentKey));
    }
  }
  traces.add(""String_Node_Str"",orderedKeys);
  return orderedKeys;
}"
61708,"@Override public Optional<ContentKey> getLatest(DirectionQuery query){
  String channel=query.getChannelName();
  if (!channelExists(channel)) {
    return Optional.absent();
  }
  query=query.withStartKey(ContentKey.lastKey(TimeUtil.now().plusMinutes(1)));
  query=configureQuery(query);
  Optional<ContentKey> latest=contentService.getLatest(query);
  if (latest.isPresent()) {
    SortedSet<ContentKey> filtered=ContentKeyUtil.filter(latest.asSet(),query);
    if (filtered.isEmpty()) {
      return Optional.absent();
    }
  }
  return latest;
}","@Override public Optional<ContentKey> getLatest(DirectionQuery query){
  String channel=query.getChannelName();
  if (!channelExists(channel)) {
    return Optional.absent();
  }
  query=query.withStartKey(ContentKey.lastKey(TimeUtil.time(query.isStable())));
  query=configureQuery(query);
  Optional<ContentKey> latest=contentService.getLatest(query);
  ActiveTraces.getLocal().add(""String_Node_Str"",channel,latest);
  if (latest.isPresent()) {
    SortedSet<ContentKey> filtered=ContentKeyUtil.filter(latest.asSet(),query);
    if (filtered.isEmpty()) {
      return Optional.absent();
    }
  }
  return latest;
}"
61709,"@Override public Collection<ContentKey> queryDirection(DirectionQuery query){
  TreeSet<ContentKey> keys=new TreeSet<>();
  TimeUtil.Unit hours=TimeUtil.Unit.HOURS;
  DateTime time=query.getContentKey().getTime();
  if (query.isNext()) {
    handleNext(query,keys);
  }
 else {
    DateTime limitTime=query.getTtlTime().minusDays(1);
    while (keys.size() < query.getCount() && time.isAfter(limitTime)) {
      addKeys(query,keys,hours,time);
      time=time.minus(hours.getDuration());
    }
  }
  return keys;
}","@Override public Collection<ContentKey> queryDirection(DirectionQuery query){
  TreeSet<ContentKey> keys=new TreeSet<>();
  TimeUtil.Unit hours=TimeUtil.Unit.HOURS;
  DateTime time=query.getStartKey().getTime();
  if (query.isNext()) {
    handleNext(query,keys);
  }
 else {
    DateTime limitTime=query.getEarliestTime().minusDays(1);
    while (keys.size() < query.getCount() && time.isAfter(limitTime)) {
      addKeys(query,keys,hours,time);
      time=time.minus(hours.getDuration());
    }
  }
  return keys;
}"
61710,"private void handleNext(DirectionQuery query,Set<ContentKey> keys){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    fileSpokeStore.getNext(query.getChannelName(),query.getContentKey().toUrl(),query.getCount(),baos);
    String keyString=baos.toString();
    ContentKeyUtil.convertKeyStrings(keyString,keys);
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"" + query,e);
  }
}","private void handleNext(DirectionQuery query,Set<ContentKey> keys){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    fileSpokeStore.getNext(query.getChannelName(),query.getStartKey().toUrl(),query.getCount(),baos);
    String keyString=baos.toString();
    ContentKeyUtil.convertKeyStrings(keyString,keys);
  }
 catch (  IOException e) {
    logger.warn(""String_Node_Str"" + query,e);
  }
}"
61711,"/** 
 * This may return more than the request count, as this does not do any sorting.
 */
void getNext(String channel,String startKey,int count,OutputStream output) throws IOException {
  DateTime now=TimeUtil.now();
  String channelPath=storagePath + channel + ""String_Node_Str"";
  logger.trace(""String_Node_Str"",channel,startKey,now);
  ContentKey start=ContentKey.fromUrl(startKey).get();
  int found=0;
  MinutePath minutePath=new MinutePath(start.getTime());
  boolean firstMinute=true;
  do {
    String minuteUrl=minutePath.toUrl();
    String minute=channelPath + minuteUrl;
    logger.trace(""String_Node_Str"",minute);
    String[] items=new File(minute).list();
    if (items != null) {
      for (      String item : items) {
        String keyFromPath=spokeKeyFromPath(minuteUrl + ""String_Node_Str"" + item);
        if (firstMinute) {
          ContentKey key=ContentKey.fromUrl(keyFromPath).get();
          if (key.compareTo(start) > 0) {
            found++;
            writeKey(output,channel + ""String_Node_Str"" + keyFromPath);
          }
        }
 else {
          found++;
          writeKey(output,channel + ""String_Node_Str"" + keyFromPath);
        }
      }
    }
    minutePath=new MinutePath(minutePath.getTime().plusMinutes(1));
    firstMinute=false;
  }
 while (found < count && minutePath.getTime().isBefore(now));
}","/** 
 * This may return more than the request count, as this does not do any sorting.
 */
public void getNext(String channel,String startKey,int count,OutputStream output) throws IOException {
  DateTime now=TimeUtil.now();
  String channelPath=storagePath + channel + ""String_Node_Str"";
  logger.trace(""String_Node_Str"",channel,startKey,now);
  ContentKey start=ContentKey.fromUrl(startKey).get();
  int found=0;
  MinutePath minutePath=new MinutePath(start.getTime());
  boolean firstMinute=true;
  do {
    String minuteUrl=minutePath.toUrl();
    String minute=channelPath + minuteUrl;
    logger.trace(""String_Node_Str"",minute);
    String[] items=new File(minute).list();
    if (items != null) {
      for (      String item : items) {
        String keyFromPath=spokeKeyFromPath(minuteUrl + ""String_Node_Str"" + item);
        if (firstMinute) {
          ContentKey key=ContentKey.fromUrl(keyFromPath).get();
          if (key.compareTo(start) > 0) {
            found++;
            writeKey(output,channel + ""String_Node_Str"" + keyFromPath);
          }
        }
 else {
          found++;
          writeKey(output,channel + ""String_Node_Str"" + keyFromPath);
        }
      }
    }
    minutePath=new MinutePath(minutePath.getTime().plusMinutes(1));
    firstMinute=false;
  }
 while (found < count && minutePath.getTime().isBefore(now));
}"
61712,"@Test public void testSingleNormalDefault(){
  ChannelConfig channel=ChannelConfig.builder().withName(""String_Node_Str"").build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(channel,range.channel);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(offsetTime.minusMinutes(1)),range.startPath);
  assertEquals(range.endPath,new MinutePath(range.startPath.getTime().plusMinutes(offsetMinutes)));
}","@Test public void testSingleNormalDefault(){
  ChannelConfig channel=ChannelConfig.builder().withName(channelName).build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(channel,range.channel);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(offsetTime.minusMinutes(1)),range.startPath);
  assertEquals(range.endPath,new MinutePath(range.startPath.getTime().plusMinutes(offsetMinutes)));
}"
61713,"@Test public void testHistoricalNone(){
  lastContentPath.initialize(""String_Node_Str"",ContentKey.NONE,HISTORICAL_FIRST_UPDATED);
  lastContentPath.initialize(""String_Node_Str"",ContentKey.NONE,HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(""String_Node_Str"");
  localChannelService.updateChannel(channel,null);
  assertNull(s3Verifier.getHistoricalVerifierRange(now,channel));
}","@Test public void testHistoricalNone(){
  lastContentPath.initialize(channelName,ContentKey.NONE,HISTORICAL_FIRST_UPDATED);
  lastContentPath.initialize(channelName,ContentKey.NONE,HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(channelName);
  localChannelService.updateChannel(channel,null);
  assertNull(s3Verifier.getHistoricalVerifierRange(now,channel));
}"
61714,"@Test public void testSingleNormal(){
  MinutePath lastVerified=new MinutePath(offsetTime);
  lastContentPath.initialize(""String_Node_Str"",lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=ChannelConfig.builder().withName(""String_Node_Str"").build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(lastVerified,range.startPath);
}","@Test public void testSingleNormal(){
  MinutePath lastVerified=new MinutePath(offsetTime);
  lastContentPath.initialize(channelName,lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=ChannelConfig.builder().withName(channelName).build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(lastVerified,range.startPath);
}"
61715,"@Test public void testHistoricalOneItem(){
  DateTime historyTime=now.minusYears(1);
  ContentKey oneKey=new ContentKey(historyTime);
  lastContentPath.update(oneKey,""String_Node_Str"",HISTORICAL_FIRST_UPDATED);
  lastContentPath.update(oneKey,""String_Node_Str"",HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(""String_Node_Str"");
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getHistoricalVerifierRange(now,channel);
  MinutePath expected=new MinutePath(historyTime);
  logger.info(""String_Node_Str"",range);
  logger.info(""String_Node_Str"",expected);
  assertEquals(expected,range.endPath);
  assertEquals(expected,range.startPath);
  lastContentPath.update(range.endPath,""String_Node_Str"",LAST_SINGLE_VERIFIED);
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(expected,range.endPath);
  assertEquals(expected,range.startPath);
}","@Test public void testHistoricalOneItem(){
  DateTime historyTime=now.minusYears(1);
  ContentKey oneKey=new ContentKey(historyTime);
  lastContentPath.update(oneKey,channelName,HISTORICAL_FIRST_UPDATED);
  lastContentPath.update(oneKey,channelName,HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(channelName);
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getHistoricalVerifierRange(now,channel);
  MinutePath expected=new MinutePath(historyTime);
  logger.info(""String_Node_Str"",channelName,range);
  logger.info(""String_Node_Str"",channelName,expected);
  assertEquals(expected,range.endPath);
  assertEquals(expected,range.startPath);
  lastContentPath.update(range.endPath,channelName,LAST_SINGLE_VERIFIED);
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(expected,range.endPath);
  assertEquals(expected,range.startPath);
}"
61716,"@Test public void testHistoricalMultipleItems(){
  DateTime historyStart=now.minusYears(1);
  ContentKey firstKey=new ContentKey(historyStart);
  ContentKey lastKey=new ContentKey(historyStart.plusDays(1));
  lastContentPath.update(firstKey,""String_Node_Str"",HISTORICAL_FIRST_UPDATED);
  lastContentPath.update(lastKey,""String_Node_Str"",HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(""String_Node_Str"");
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  logger.info(""String_Node_Str"",new MinutePath(historyStart));
  assertEquals(new MinutePath(lastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(firstKey.getTime()),range.startPath);
  logger.info(""String_Node_Str"",range.endPath);
  lastContentPath.update(range.endPath,""String_Node_Str"",LAST_SINGLE_VERIFIED);
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(lastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(lastKey.getTime()),range.startPath);
  ContentKey nextLastKey=new ContentKey(lastKey.getTime().plusDays(1));
  lastContentPath.updateIncrease(nextLastKey,""String_Node_Str"",HISTORICAL_LAST_UPDATED);
  logger.info(""String_Node_Str"",lastContentPath.getOrNull(""String_Node_Str"",LAST_SINGLE_VERIFIED));
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(nextLastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(lastKey.getTime()),range.startPath);
}","@Test public void testHistoricalMultipleItems(){
  DateTime historyStart=now.minusYears(1);
  ContentKey firstKey=new ContentKey(historyStart);
  ContentKey lastKey=new ContentKey(historyStart.plusDays(1));
  lastContentPath.update(firstKey,channelName,HISTORICAL_FIRST_UPDATED);
  lastContentPath.update(lastKey,channelName,HISTORICAL_LAST_UPDATED);
  ChannelConfig channel=getHistoricalChannel(channelName);
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  logger.info(""String_Node_Str"",channelName,new MinutePath(historyStart));
  assertEquals(new MinutePath(lastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(firstKey.getTime()),range.startPath);
  logger.info(""String_Node_Str"",range.endPath);
  lastContentPath.update(range.endPath,channelName,LAST_SINGLE_VERIFIED);
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(lastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(lastKey.getTime()),range.startPath);
  ContentKey nextLastKey=new ContentKey(lastKey.getTime().plusDays(1));
  lastContentPath.updateIncrease(nextLastKey,channelName,HISTORICAL_LAST_UPDATED);
  logger.info(""String_Node_Str"",lastContentPath.getOrNull(channelName,LAST_SINGLE_VERIFIED));
  range=s3Verifier.getHistoricalVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(nextLastKey.getTime()),range.endPath);
  assertEquals(new MinutePath(lastKey.getTime()),range.startPath);
}"
61717,"@Test public void testSingleReplicated(){
  MinutePath lastReplicated=new MinutePath(now.minusMinutes(30));
  lastContentPath.initialize(""String_Node_Str"",lastReplicated,REPLICATED_LAST_UPDATED);
  ChannelConfig channel=getReplicatedChannel(""String_Node_Str"");
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(offsetMinutes + 1)),range.startPath);
}","@Test public void testSingleReplicated(){
  MinutePath lastReplicated=new MinutePath(now.minusMinutes(30));
  lastContentPath.initialize(channelName,lastReplicated,REPLICATED_LAST_UPDATED);
  ChannelConfig channel=getReplicatedChannel(channelName);
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(offsetMinutes + 1)),range.startPath);
}"
61718,"@Test public void testSingleReplicatedDefault(){
  ChannelConfig channel=getReplicatedChannel(""String_Node_Str"");
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(range.endPath.getTime().minusMinutes(offsetMinutes)),range.startPath);
}","@Test public void testSingleReplicatedDefault(){
  ChannelConfig channel=getReplicatedChannel(channelName);
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  assertEquals(new MinutePath(range.endPath.getTime().minusMinutes(offsetMinutes)),range.startPath);
}"
61719,"@Test public void testSingleReplicationLagging(){
  MinutePath lastReplicated=new MinutePath(now.minusMinutes(90));
  lastContentPath.initialize(""String_Node_Str"",lastReplicated,REPLICATED_LAST_UPDATED);
  MinutePath lastVerified=new MinutePath(now.minusMinutes(100));
  lastContentPath.initialize(""String_Node_Str"",lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=getReplicatedChannel(""String_Node_Str"");
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(1)),range.endPath);
  assertEquals(lastVerified,range.startPath);
}","@Test public void testSingleReplicationLagging(){
  MinutePath lastReplicated=new MinutePath(now.minusMinutes(90));
  lastContentPath.initialize(channelName,lastReplicated,REPLICATED_LAST_UPDATED);
  MinutePath lastVerified=new MinutePath(now.minusMinutes(100));
  lastContentPath.initialize(channelName,lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=getReplicatedChannel(channelName);
  localChannelService.updateChannel(channel,null);
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(new MinutePath(lastReplicated.getTime().minusMinutes(1)),range.endPath);
  assertEquals(lastVerified,range.startPath);
}"
61720,"@Before public void setUp() throws Exception {
  offsetTime=now.minusMinutes(offsetMinutes);
}","@Before public void setUp() throws Exception {
  offsetTime=now.minusMinutes(offsetMinutes);
  channelName=testName.getMethodName() + RandomStringUtils.randomAlphanumeric(6);
}"
61721,"@Test public void testSingleNormalLagging(){
  MinutePath lastVerified=new MinutePath(now.minusMinutes(60));
  lastContentPath.initialize(""String_Node_Str"",lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=ChannelConfig.builder().withName(""String_Node_Str"").build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  logger.info(""String_Node_Str"",new MinutePath(now.minusMinutes(58)),range.startPath);
}","@Test public void testSingleNormalLagging(){
  MinutePath lastVerified=new MinutePath(now.minusMinutes(60));
  lastContentPath.initialize(channelName,lastVerified,LAST_SINGLE_VERIFIED);
  ChannelConfig channel=ChannelConfig.builder().withName(channelName).build();
  S3Verifier.VerifierRange range=s3Verifier.getSingleVerifierRange(now,channel);
  logger.info(""String_Node_Str"",channelName,range);
  assertEquals(new MinutePath(now.minusMinutes(1)),range.endPath);
  logger.info(""String_Node_Str"",new MinutePath(now.minusMinutes(58)),range.startPath);
}"
61722,"public boolean updateIncrease(String name,String basePath,Function<ContentPath,ContentPath> function){
  String path=basePath + name;
  try {
    while (true) {
      trace(name,""String_Node_Str"",name);
      LastUpdated existing=getLastUpdated(path);
      ContentPath nextPath=function.apply(existing.key);
      if (nextPath.compareTo(existing.key) > 0) {
        if (setValue(path,nextPath,existing)) {
          trace(name,""String_Node_Str"",name,nextPath,existing);
          return true;
        }
      }
 else {
        trace(name,""String_Node_Str"",name,nextPath,existing);
        return true;
      }
    }
  }
 catch (  KeeperException.NoNodeException e) {
    logger.info(""String_Node_Str"",path);
    trace(name,""String_Node_Str"",name);
    ContentPath nextPath=function.apply(null);
    initialize(name,nextPath,basePath);
    return true;
  }
catch (  ConflictException e) {
    trace(name,""String_Node_Str"" + e.getMessage());
    throw e;
  }
catch (  Exception e) {
    logger.warn(""String_Node_Str"" + path,e);
    return false;
  }
}","public boolean updateIncrease(String name,String basePath,Function<ContentPath,ContentPath> function){
  String path=basePath + name;
  try {
    while (true) {
      trace(name,""String_Node_Str"",name);
      LastUpdated existing=getLastUpdated(path);
      ContentPath nextPath=function.apply(existing.key);
      if (nextPath.compareTo(existing.key) > 0) {
        if (setValue(path,nextPath,existing)) {
          trace(name,""String_Node_Str"",name,nextPath,existing);
          return true;
        }
      }
 else {
        trace(name,""String_Node_Str"",name,nextPath,existing);
        return true;
      }
    }
  }
 catch (  KeeperException.NoNodeException e) {
    logger.info(""String_Node_Str"",path);
    trace(name,""String_Node_Str"",name);
    ContentPath nextPath=function.apply(null);
    initialize(name,nextPath,basePath);
    return true;
  }
catch (  ConflictException e) {
    trace(name,""String_Node_Str"" + e.getMessage());
    throw e;
  }
catch (  ContentTooLargeException e) {
    throw e;
  }
catch (  Exception e) {
    logger.warn(""String_Node_Str"" + path,e);
    return false;
  }
}"
61723,"private Webhook mapItem(Map<String,AttributeValue> item){
  Webhook.WebhookBuilder builder=Webhook.builder().name(item.get(""String_Node_Str"").getS()).callbackUrl(item.get(""String_Node_Str"").getS()).channelUrl(item.get(""String_Node_Str"").getS());
  if (item.containsKey(""String_Node_Str"")) {
    builder.parallelCalls(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.paused(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.batch(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.heartbeat(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.ttlMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxWaitMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  return builder.build().withDefaults(false);
}","private Webhook mapItem(Map<String,AttributeValue> item){
  Webhook.WebhookBuilder builder=Webhook.builder().name(item.get(""String_Node_Str"").getS()).callbackUrl(item.get(""String_Node_Str"").getS()).channelUrl(item.get(""String_Node_Str"").getS());
  if (item.containsKey(""String_Node_Str"")) {
    builder.parallelCalls(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.paused(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.batch(item.get(""String_Node_Str"").getS());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.heartbeat(item.get(""String_Node_Str"").getBOOL());
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.ttlMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  if (item.containsKey(""String_Node_Str"")) {
    builder.maxWaitMinutes(Integer.valueOf(item.get(""String_Node_Str"").getN()));
  }
  return builder.build().withDefaults();
}"
61724,"/** 
 * Returns a Webhook with all optional values set to the default.
 */
public Webhook withDefaults(boolean createKey){
  Webhook webhook=this;
  if (parallelCalls == null) {
    webhook=webhook.withParallelCalls(1);
  }
  if (batch == null) {
    webhook=webhook.withBatch(""String_Node_Str"");
  }
  if (webhook.isMinute() || webhook.isSecond()) {
    webhook=webhook.withHeartbeat(true);
  }
  if (createKey && getStartingKey() == null) {
    webhook=webhook.withStartingKey(WebhookStrategy.createContentPath(webhook));
  }
  if (ttlMinutes == null) {
    webhook=webhook.withTtlMinutes(0);
  }
  if (maxWaitMinutes == null) {
    webhook=webhook.withMaxWaitMinutes(1);
  }
  return webhook;
}","/** 
 * Returns a Webhook with all optional values set to the default.
 */
public Webhook withDefaults(){
  Webhook webhook=this;
  if (parallelCalls == null) {
    webhook=webhook.withParallelCalls(1);
  }
  if (batch == null) {
    webhook=webhook.withBatch(""String_Node_Str"");
  }
  if (webhook.isMinute() || webhook.isSecond()) {
    webhook=webhook.withHeartbeat(true);
  }
  if (ttlMinutes == null) {
    webhook=webhook.withTtlMinutes(0);
  }
  if (maxWaitMinutes == null) {
    webhook=webhook.withMaxWaitMinutes(1);
  }
  return webhook;
}"
61725,"public Optional<Webhook> upsert(Webhook webhook){
  webhook=webhook.withDefaults(true);
  logger.info(""String_Node_Str"" + webhook);
  webhookValidator.validate(webhook);
  String name=webhook.getName();
  Optional<Webhook> webhookOptional=get(name);
  if (webhookOptional.isPresent()) {
    Webhook existing=webhookOptional.get();
    if (existing.equals(webhook)) {
      return webhookOptional;
    }
 else     if (!existing.allowedToChange(webhook)) {
      throw new ConflictException(""String_Node_Str"");
    }
  }
  ContentPath existing=lastContentPath.getOrNull(name,WEBHOOK_LAST_COMPLETED);
  logger.info(""String_Node_Str"",name,existing,webhook.getStartingKey());
  if (existing == null || existing.equals(ContentKey.NONE)) {
    webhook=upsertHistorical(webhook,name);
  }
  if (existing == null || webhook.getStartingKey() != null) {
    logger.info(""String_Node_Str"",name,webhook.getStartingKey());
    lastContentPath.initialize(name,webhook.getStartingKey(),WEBHOOK_LAST_COMPLETED);
  }
  webhookDao.upsert(webhook);
  webhookManager.notifyWatchers();
  return webhookOptional;
}","public Optional<Webhook> upsert(Webhook webhook){
  webhook=webhook.withDefaults();
  webhookValidator.validate(webhook);
  Optional<Webhook> webhookOptional=get(webhook.getName());
  if (webhookOptional.isPresent()) {
    Webhook existing=webhookOptional.get();
    if (existing.equals(webhook)) {
      return webhookOptional;
    }
 else     if (!existing.allowedToChange(webhook)) {
      throw new ConflictException(""String_Node_Str"");
    }
  }
 else {
    webhook=webhook.withStartingKey(WebhookStrategy.createContentPath(webhook));
  }
  logger.info(""String_Node_Str"",webhook);
  ContentPath existing=lastContentPath.getOrNull(webhook.getName(),WEBHOOK_LAST_COMPLETED);
  logger.info(""String_Node_Str"",webhook.getName(),existing,webhook.getStartingKey());
  if (existing == null || existing.equals(ContentKey.NONE)) {
    webhook=upsertHistorical(webhook,webhook.getName());
  }
  if (existing == null || webhook.getStartingKey() != null) {
    logger.info(""String_Node_Str"",webhook.getName(),webhook.getStartingKey());
    lastContentPath.initialize(webhook.getName(),webhook.getStartingKey(),WEBHOOK_LAST_COMPLETED);
  }
  webhookDao.upsert(webhook);
  webhookManager.notifyWatchers();
  return webhookOptional;
}"
61726,"@Test public void testAllowedToChange(){
  Webhook hubA=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults(false);
  Webhook hubB=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults(false);
  assertTrue(hubA.allowedToChange(hubB));
  assertFalse(hubA.isChanged(hubB));
}","@Test public void testAllowedToChange(){
  Webhook hubA=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults();
  Webhook hubB=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults();
  assertTrue(hubA.allowedToChange(hubB));
  assertFalse(hubA.isChanged(hubB));
}"
61727,"@Test public void testWithDefaults(){
  assertNull(webhook.getParallelCalls());
  assertNull(webhook.getBatch());
  webhook=webhook.withDefaults(true);
  assertEquals(1L,(long)webhook.getParallelCalls());
  assertEquals(""String_Node_Str"",webhook.getBatch());
}","@Test public void testWithDefaults(){
  assertNull(webhook.getParallelCalls());
  assertNull(webhook.getBatch());
  webhook=webhook.withDefaults();
  assertEquals(1L,(long)webhook.getParallelCalls());
  assertEquals(""String_Node_Str"",webhook.getBatch());
}"
61728,"@Test public void testNotChanged(){
  Webhook hubA=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults(false);
  Webhook hubC=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults(false);
  assertFalse(hubA.allowedToChange(hubC));
  assertFalse(hubA.isChanged(hubC));
}","@Test public void testNotChanged(){
  Webhook hubA=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults();
  Webhook hubC=Webhook.builder().name(""String_Node_Str"").channelUrl(""String_Node_Str"").callbackUrl(""String_Node_Str"").build().withDefaults();
  assertFalse(hubA.allowedToChange(hubC));
  assertFalse(hubA.isChanged(hubC));
}"
61729,"@Test public void testNameLarge() throws Exception {
  webhook=webhook.withDefaults(true);
  webhookValidator.validate(webhook.withName(Strings.repeat(""String_Node_Str"",128)));
}","@Test public void testNameLarge() throws Exception {
  webhook=webhook.withDefaults();
  webhookValidator.validate(webhook.withName(Strings.repeat(""String_Node_Str"",128)));
}"
61730,"@Test public void testName() throws Exception {
  webhook=webhook.withDefaults(true);
  webhookValidator.validate(webhook.withName(""String_Node_Str""));
}","@Test public void testName() throws Exception {
  webhook=webhook.withDefaults();
  webhookValidator.validate(webhook.withName(""String_Node_Str""));
}"
61731,"public Optional<Webhook> upsert(Webhook webhook){
  webhook=webhook.withDefaults(true);
  logger.info(""String_Node_Str"" + webhook);
  webhookValidator.validate(webhook);
  String name=webhook.getName();
  Optional<Webhook> webhookOptional=get(name);
  if (webhookOptional.isPresent()) {
    Webhook existing=webhookOptional.get();
    if (existing.equals(webhook)) {
      return webhookOptional;
    }
 else     if (!existing.allowedToChange(webhook)) {
      throw new ConflictException(""String_Node_Str"");
    }
  }
  ContentPath existing=lastContentPath.getOrNull(name,WEBHOOK_LAST_COMPLETED);
  logger.info(""String_Node_Str"",name,existing,webhook.getStartingKey());
  ChannelConfig channel=channelService.getCachedChannelConfig(webhook.getChannelName());
  if (channel.isHistorical()) {
    ContentPath first=lastContentPath.get(channel.getName(),ContentKey.NONE,HISTORICAL_FIRST_UPDATED);
    if (first.equals(ContentKey.NONE)) {
      webhook=webhook.withPaused(true);
      webhook=webhook.withStartingKey(ContentKey.NONE);
      logger.info(""String_Node_Str"",webhook);
    }
 else {
      ContentPath lastUpdated=lastContentPath.get(channel.getName(),ContentKey.NONE,HISTORICAL_LAST_UPDATED);
      if (lastUpdated.equals(ContentKey.NONE)) {
        webhook=webhook.withStartingKey(new ContentKey(first.getTime().minusMillis(1)));
      }
 else       if (webhook.getStartingKey() == null || webhook.getStartingKey().compareTo(lastUpdated) > 0) {
        webhook=webhook.withStartingKey(lastUpdated);
      }
      logger.info(""String_Node_Str"",webhook);
      lastContentPath.update(webhook.getStartingKey(),name,WEBHOOK_LAST_COMPLETED);
    }
  }
  if (existing == null || webhook.getStartingKey() != null) {
    logger.info(""String_Node_Str"",name,webhook.getStartingKey());
    lastContentPath.initialize(name,webhook.getStartingKey(),WEBHOOK_LAST_COMPLETED);
  }
  webhookDao.upsert(webhook);
  webhookManager.notifyWatchers();
  return webhookOptional;
}","public Optional<Webhook> upsert(Webhook webhook){
  webhook=webhook.withDefaults(true);
  logger.info(""String_Node_Str"" + webhook);
  webhookValidator.validate(webhook);
  String name=webhook.getName();
  Optional<Webhook> webhookOptional=get(name);
  if (webhookOptional.isPresent()) {
    Webhook existing=webhookOptional.get();
    if (existing.equals(webhook)) {
      return webhookOptional;
    }
 else     if (!existing.allowedToChange(webhook)) {
      throw new ConflictException(""String_Node_Str"");
    }
  }
  ContentPath existing=lastContentPath.getOrNull(name,WEBHOOK_LAST_COMPLETED);
  logger.info(""String_Node_Str"",name,existing,webhook.getStartingKey());
  webhook=upsertHistorical(webhook,name);
  if (existing == null || webhook.getStartingKey() != null) {
    logger.info(""String_Node_Str"",name,webhook.getStartingKey());
    lastContentPath.initialize(name,webhook.getStartingKey(),WEBHOOK_LAST_COMPLETED);
  }
  webhookDao.upsert(webhook);
  webhookManager.notifyWatchers();
  return webhookOptional;
}"
61732,"@Override public SortedSet<ContentKey> queryByTime(TimeQuery query){
  return primaryAndSecondary(query.getChannelName(),() -> localChannelService.queryByTime(query),() -> query(query,spokeContentDao.queryByTime(query)));
}","@Override public SortedSet<ContentKey> queryByTime(TimeQuery query){
  return primaryAndSecondary(query.getChannelName(),() -> localChannelService.queryByTime(query),() -> query(query,localChannelService.queryByTime(query.withLocation(Location.CACHE))));
}"
61733,"@Override public SortedSet<ContentKey> getKeys(DirectionQuery query){
  query.withLiveChannel(getCachedChannelConfig(query.getChannelName()).isLive());
  return primaryAndSecondary(query.getChannelName(),() -> localChannelService.getKeys(query),() -> query(query,spokeContentDao.query(query)));
}","@Override public SortedSet<ContentKey> getKeys(DirectionQuery query){
  return primaryAndSecondary(query.getChannelName(),() -> localChannelService.getKeys(query),() -> query(query,localChannelService.getKeys(query.withLocation(Location.CACHE))));
}"
61734,"@Override public SortedSet<ContentKey> getKeys(DirectionQuery query){
  if (query.getCount() <= 0) {
    return Collections.emptySortedSet();
  }
  if (query.getCount() > DIR_COUNT_LIMIT) {
    query=query.withCount(DIR_COUNT_LIMIT);
  }
  DateTime ttlTime=getTtlTime(query.getChannelName());
  if (query.getContentKey().getTime().isBefore(ttlTime)) {
    query=query.withContentKey(new ContentKey(ttlTime,""String_Node_Str""));
  }
  query=query.withLiveChannel(getCachedChannelConfig(query.getChannelName()).isLive());
  query=query.withTtlDays(getTtlDays(query.getChannelName()));
  Traces traces=ActiveTraces.getLocal();
  traces.add(query);
  List<ContentKey> keys=new ArrayList<>(contentService.queryDirection(query));
  SortedSet<ContentKey> contentKeys=ContentKeyUtil.filter(keys,query.getContentKey(),ttlTime,query.getCount(),query.isNext(),query.isStable());
  traces.add(""String_Node_Str"",contentKeys);
  return contentKeys;
}","@Override public SortedSet<ContentKey> getKeys(DirectionQuery query){
  if (query.getCount() <= 0) {
    return Collections.emptySortedSet();
  }
  if (query.getCount() > DIR_COUNT_LIMIT) {
    query=query.withCount(DIR_COUNT_LIMIT);
  }
  DateTime ttlTime=getTtlTime(query.getChannelName());
  if (query.getContentKey().getTime().isBefore(ttlTime)) {
    query=query.withContentKey(new ContentKey(ttlTime,""String_Node_Str""));
  }
  query=query.withLiveChannel(getCachedChannelConfig(query.getChannelName()).isLive());
  query=query.withTtlDays(getTtlDays(query.getChannelName()));
  ContentPath lastUpdated=getLastUpdated(query.getChannelName(),new ContentKey(TimeUtil.time(query.isStable())));
  query=query.withChannelStable(lastUpdated.getTime());
  Traces traces=ActiveTraces.getLocal();
  traces.add(query);
  List<ContentKey> keys=new ArrayList<>(contentService.queryDirection(query));
  SortedSet<ContentKey> contentKeys=ContentKeyUtil.filter(keys,query.getContentKey(),ttlTime,query.getCount(),query.isNext(),query.isStable());
  traces.add(""String_Node_Str"",contentKeys);
  return contentKeys;
}"
61735,"private void query(String channel,List<ContentKey> keys,int count,int expected,boolean next,DateTime queryTime){
  DirectionQuery query=DirectionQuery.builder().stable(false).channelName(channel).count(count).next(next).contentKey(new ContentKey(queryTime,""String_Node_Str"")).ttlDays(120).liveChannel(true).build();
  Collection<ContentKey> found=contentDao.query(query);
  logger.info(""String_Node_Str"",queryTime,found);
  assertEquals(expected,found.size());
  assertTrue(keys.containsAll(found));
}","private void query(String channel,List<ContentKey> keys,int count,int expected,boolean next,DateTime queryTime){
  ActiveTraces.start(""String_Node_Str"",channel,count,queryTime);
  DirectionQuery query=DirectionQuery.builder().stable(false).channelName(channel).count(count).next(next).contentKey(new ContentKey(queryTime,""String_Node_Str"")).ttlDays(120).liveChannel(true).channelStable(TimeUtil.now()).build();
  Collection<ContentKey> found=contentDao.query(query);
  logger.info(""String_Node_Str"",queryTime,found);
  ActiveTraces.getLocal().log(logger);
  assertEquals(expected,found.size());
  assertTrue(keys.containsAll(found));
}"
61736,"public byte[] getData(){
  if (data == null && stream != null) {
    try {
      data=ByteStreams.toByteArray(stream);
    }
 catch (    EOFException e) {
      logger.info(""String_Node_Str"",contentKey);
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + contentKey,e);
    }
  }
  return data;
}","public byte[] getData(){
  if (data == null && stream != null) {
    try {
      data=ByteStreams.toByteArray(stream);
      stream=null;
    }
 catch (    EOFException e) {
      logger.info(""String_Node_Str"",contentKey);
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + contentKey,e);
    }
  }
  return data;
}"
61737,"public Content get(String path,ContentKey key){
  Collection<String> servers=cluster.getRandomServers();
  for (  String server : servers) {
    ClientResponse response=null;
    try {
      setThread(path);
      response=query_client.resource(HubHost.getScheme() + server + ""String_Node_Str""+ path).get(ClientResponse.class);
      logger.trace(""String_Node_Str"",server,path,response);
      if (response.getStatus() == 200) {
        byte[] entity=response.getEntity(byte[].class);
        if (entity.length > 0) {
          Content content=ContentMarshaller.toContent(entity,key);
          byte[] data=content.getData();
          logger.trace(""String_Node_Str"",path,data.length);
          return content;
        }
      }
    }
 catch (    JsonMappingException e) {
      logger.info(""String_Node_Str"" + path);
    }
catch (    ClientHandlerException e) {
      if (e.getCause() != null && e.getCause() instanceof ConnectException) {
        logger.warn(""String_Node_Str"" + server);
      }
 else {
        logger.warn(""String_Node_Str"" + path,e);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + path,e);
    }
 finally {
      close(response);
      resetThread();
    }
  }
  return null;
}","public Content get(String path,ContentKey key){
  Collection<String> servers=cluster.getRandomServers();
  for (  String server : servers) {
    ClientResponse response=null;
    try {
      setThread(path);
      response=query_client.resource(HubHost.getScheme() + server + ""String_Node_Str""+ path).get(ClientResponse.class);
      logger.trace(""String_Node_Str"",server,path,response);
      if (response.getStatus() == 200) {
        byte[] entity=response.getEntity(byte[].class);
        if (entity.length > 0) {
          return ContentMarshaller.toContent(entity,key);
        }
      }
    }
 catch (    JsonMappingException e) {
      logger.info(""String_Node_Str"" + path);
    }
catch (    ClientHandlerException e) {
      if (e.getCause() != null && e.getCause() instanceof ConnectException) {
        logger.warn(""String_Node_Str"" + server);
      }
 else {
        logger.warn(""String_Node_Str"" + path,e);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"" + path,e);
    }
 finally {
      close(response);
      resetThread();
    }
  }
  return null;
}"
61738,"public static String extractFromChannelUrl(String fullUrl){
  return StringUtils.substringAfter(fullUrl,""String_Node_Str"");
}","public static String extractFromChannelUrl(String fullUrl){
  String after=StringUtils.substringAfter(fullUrl,""String_Node_Str"");
  return StringUtils.removeEnd(after,""String_Node_Str"");
}"
61739,"public static byte[] toBytes(Content content,boolean compress) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ZipOutputStream zipOut=new ZipOutputStream(baos);
  if (compress) {
    zipOut.setLevel(Deflater.BEST_SPEED);
  }
 else {
    zipOut.setLevel(Deflater.NO_COMPRESSION);
  }
  zipOut.putNextEntry(new ZipEntry(""String_Node_Str""));
  String meta=getMetaData(content);
  zipOut.write(meta.getBytes());
  zipOut.putNextEntry(new ZipEntry(""String_Node_Str""));
  long bytesCopied=ByteStreams.copy(content.getStream(),zipOut);
  if (bytesCopied > maxBytes) {
    throw new ContentTooLargeException(""String_Node_Str"" + maxBytes + ""String_Node_Str"");
  }
  content.setSize(bytesCopied);
  zipOut.close();
  byte[] bytes=baos.toByteArray();
  logger.trace(""String_Node_Str"",bytes.length,content.getContentKey().get());
  return bytes;
}","public static byte[] toBytes(Content content,boolean compress) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ZipOutputStream zipOut=new ZipOutputStream(baos);
  if (compress) {
    zipOut.setLevel(Deflater.BEST_SPEED);
  }
 else {
    zipOut.setLevel(Deflater.NO_COMPRESSION);
  }
  zipOut.putNextEntry(new ZipEntry(""String_Node_Str""));
  String meta=getMetaData(content);
  zipOut.write(meta.getBytes());
  zipOut.putNextEntry(new ZipEntry(""String_Node_Str""));
  long bytesCopied=ByteStreams.copy(content.getStream(),zipOut);
  if (bytesCopied > maxBytes) {
    throw new ContentTooLargeException(""String_Node_Str"" + maxBytes + ""String_Node_Str"");
  }
  content.setSize(bytesCopied);
  zipOut.close();
  return baos.toByteArray();
}"
61740,"@Override public Optional<ContentKey> getLatest(String channel,ContentKey limitKey,Traces traces,boolean stable){
  DateTime ttlTime=getCacheTtlTime(channel,channelService.getCachedChannelConfig(channel));
  Optional<ContentKey> latest=spokeContentDao.getLatest(channel,limitKey,traces);
  if (latest.isPresent()) {
    logger.info(""String_Node_Str"",channel,latest);
    lastContentPath.delete(channel,CHANNEL_LATEST_UPDATED);
    return latest;
  }
  ContentPath latestCache=lastContentPath.get(channel,null,CHANNEL_LATEST_UPDATED);
  if (latestCache != null) {
    if (latestCache.getTime().isBefore(ttlTime)) {
      lastContentPath.delete(channel,CHANNEL_LATEST_UPDATED);
    }
    logger.info(""String_Node_Str"",channel,latestCache);
    if (latestCache.equals(ContentKey.NONE)) {
      return Optional.absent();
    }
    return Optional.of((ContentKey)latestCache);
  }
  DirectionQuery query=DirectionQuery.builder().channelName(channel).contentKey(limitKey).next(false).stable(stable).count(1).build();
  Collection<ContentKey> keys=channelService.getKeys(query);
  if (keys.isEmpty()) {
    logger.debug(""String_Node_Str"",channel);
    lastContentPath.updateIncrease(ContentKey.NONE,channel,CHANNEL_LATEST_UPDATED);
    return Optional.absent();
  }
 else {
    ContentKey latestKey=keys.iterator().next();
    if (latestKey.getTime().isAfter(ttlTime)) {
      logger.debug(""String_Node_Str"",channel,latestKey);
      lastContentPath.delete(channel,CHANNEL_LATEST_UPDATED);
    }
 else {
      logger.debug(""String_Node_Str"",channel,latestKey);
      lastContentPath.update(latestKey,channel,CHANNEL_LATEST_UPDATED);
    }
    return Optional.of(latestKey);
  }
}","@Override public Optional<ContentKey> getLatest(String channel,ContentKey limitKey,Traces traces,boolean stable){
  final ChannelConfig cachedChannelConfig=channelService.getCachedChannelConfig(channel);
  DateTime cacheTtlTime=getCacheTtlTime(channel,cachedChannelConfig);
  Optional<ContentKey> latest=spokeContentDao.getLatest(channel,limitKey,traces);
  if (latest.isPresent()) {
    logger.info(""String_Node_Str"",channel,latest);
    lastContentPath.delete(channel,CHANNEL_LATEST_UPDATED);
    return latest;
  }
  ContentPath latestCache=lastContentPath.get(channel,null,CHANNEL_LATEST_UPDATED);
  if (latestCache != null) {
    DateTime channelTtlTime=TimeUtil.time(false).minusDays((int)cachedChannelConfig.getTtlDays());
    if (latestCache.getTime().isBefore(channelTtlTime)) {
      lastContentPath.update(ContentKey.NONE,channel,CHANNEL_LATEST_UPDATED);
    }
    logger.info(""String_Node_Str"",channel,latestCache);
    if (latestCache.equals(ContentKey.NONE)) {
      return Optional.absent();
    }
    return Optional.of((ContentKey)latestCache);
  }
  DirectionQuery query=DirectionQuery.builder().channelName(channel).contentKey(limitKey).next(false).stable(stable).count(1).build();
  Collection<ContentKey> keys=channelService.getKeys(query);
  if (keys.isEmpty()) {
    logger.debug(""String_Node_Str"",channel);
    lastContentPath.updateIncrease(ContentKey.NONE,channel,CHANNEL_LATEST_UPDATED);
    return Optional.absent();
  }
 else {
    ContentKey latestKey=keys.iterator().next();
    if (latestKey.getTime().isAfter(cacheTtlTime)) {
      logger.debug(""String_Node_Str"",channel,latestKey);
      lastContentPath.delete(channel,CHANNEL_LATEST_UPDATED);
    }
 else {
      logger.debug(""String_Node_Str"",channel,latestKey);
      lastContentPath.update(latestKey,channel,CHANNEL_LATEST_UPDATED);
    }
    return Optional.of(latestKey);
  }
}"
61741,"public String getLatest(String channel,String limitPath){
  logger.trace(""String_Node_Str"",channel,limitPath);
  String[] split=StringUtils.split(limitPath,""String_Node_Str"");
  split=new String[]{split[0],split[1],split[2],split[3],split[4],split[5] + split[6] + split[7]};
  String last=recurseLatest(channel,split,0,channel);
  if (last == null) {
    return null;
  }
  String latest=spokeKeyFromPath(last);
  logger.trace(""String_Node_Str"",latest,limitPath);
  return latest;
}","public String getLatest(String channel,String limitPath){
  logger.trace(""String_Node_Str"",channel,limitPath);
  String[] split=StringUtils.split(limitPath,""String_Node_Str"");
  split=new String[]{split[0],split[1],split[2],split[3],split[4],split[5] + split[6] + split[7]};
  String last=recurseLatest(channel,split,0,channel);
  if (last == null) {
    DateTime ttlTime=TimeUtil.now().minusMinutes(ttlMinutes);
    DateTime limitTime=TimeUtil.millis(StringUtils.substringBeforeLast(limitPath,""String_Node_Str"") + ""String_Node_Str"");
    DateTime previous=limitTime.minusHours(1).withMinuteOfHour(59).withSecondOfMinute(59).withMillisOfSecond(999);
    if (previous.isBefore(ttlTime)) {
      return null;
    }
    return getLatest(channel,ContentKey.lastKey(previous).toUrl());
  }
 else {
    String latest=spokeKeyFromPath(last);
    logger.trace(""String_Node_Str"",latest,limitPath);
    return latest;
  }
}"
61742,"private void updateTtlDays(){
  logger.info(""String_Node_Str"");
  ActiveTraces.start(""String_Node_Str"");
  ArrayList<BucketLifecycleConfiguration.Rule> rules=new ArrayList<>();
  for (  ChannelConfig config : configurations) {
    if (config.getTtlDays() > 0) {
      rules.add(addRule(config,""String_Node_Str""));
      rules.add(addRule(config,""String_Node_Str""));
    }
  }
  logger.info(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
  if (!rules.isEmpty()) {
    BucketLifecycleConfiguration lifecycleConfig=new BucketLifecycleConfiguration(rules);
    s3Client.setBucketLifecycleConfiguration(s3BucketName,lifecycleConfig);
  }
  ActiveTraces.end();
}","private void updateTtlDays(){
  logger.info(""String_Node_Str"");
  ActiveTraces.start(""String_Node_Str"");
  ArrayList<BucketLifecycleConfiguration.Rule> rules=new ArrayList<>();
  for (  ChannelConfig config : configurations) {
    if (config.getTtlDays() > 0) {
      if (config.isSingle() || config.isBoth()) {
        rules.add(addRule(config,""String_Node_Str""));
      }
      if (config.isBatch() || config.isBoth()) {
        rules.add(addRule(config,""String_Node_Str""));
      }
    }
  }
  logger.info(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
  if (!rules.isEmpty()) {
    BucketLifecycleConfiguration lifecycleConfig=new BucketLifecycleConfiguration(rules);
    s3Client.setBucketLifecycleConfiguration(s3BucketName,lifecycleConfig);
  }
  ActiveTraces.end();
}"
61743,"private SortedSet<ContentKey> handleNext(DirectionQuery query){
  SortedSet<ContentKey> keys=new TreeSet<>();
  Traces traces=ActiveTraces.getLocal();
  DateTime endTime=TimeUtil.time(query.isStable());
  DateTime markerTime=query.getContentKey().getTime().minusMinutes(1);
  int queryItems=Math.min(s3MaxQueryItems,query.getCount());
  do {
    String channel=query.getChannelName();
    ListObjectsRequest request=new ListObjectsRequest().withBucketName(s3BucketName).withPrefix(channel + BATCH_INDEX).withMarker(channel + BATCH_INDEX + TimeUtil.Unit.MINUTES.format(markerTime)).withMaxKeys(queryItems);
    SortedSet<MinutePath> paths=listMinutePaths(channel,request,traces,false);
    if (paths.isEmpty()) {
      return keys;
    }
    for (    MinutePath path : paths) {
      if (keys.size() >= query.getCount()) {
        return keys;
      }
      getKeysForMinute(channel,path,keys,traces);
      markerTime=path.getTime();
    }
  }
 while (keys.size() < query.getCount() && markerTime.isBefore(endTime));
  return keys;
}","private SortedSet<ContentKey> handleNext(DirectionQuery query){
  SortedSet<ContentKey> keys=new TreeSet<>();
  Traces traces=ActiveTraces.getLocal();
  DateTime endTime=TimeUtil.time(query.isStable());
  DateTime markerTime=query.getContentKey().getTime().minusMinutes(1);
  int queryItems=Math.min(s3MaxQueryItems,query.getCount());
  do {
    String channel=query.getChannelName();
    ListObjectsRequest request=new ListObjectsRequest().withBucketName(s3BucketName).withPrefix(channel + BATCH_INDEX).withMarker(channel + BATCH_INDEX + TimeUtil.Unit.MINUTES.format(markerTime)).withMaxKeys(queryItems);
    SortedSet<MinutePath> paths=listMinutePaths(channel,request,traces,false);
    if (paths.isEmpty()) {
      return keys;
    }
    for (    MinutePath path : paths) {
      getKeysForMinute(channel,path,traces,item -> {
        ContentKey contentKey=ContentKey.fromUrl(item.asText()).get();
        if (contentKey.compareTo(query.getContentKey()) > 0 && keys.size() < query.getCount()) {
          keys.add(contentKey);
        }
      }
);
      markerTime=path.getTime();
    }
  }
 while (keys.size() < query.getCount() && markerTime.isBefore(endTime));
  return keys;
}"
61744,"private void getKeysForMinute(String channel,MinutePath minutePath,SortedSet<ContentKey> keys,Traces traces){
  try (S3Object object=s3Client.getObject(s3BucketName,getS3BatchIndexKey(channel,minutePath))){
    sender.send(""String_Node_Str"" + channel + ""String_Node_Str"",1);
    byte[] bytes=ByteStreams.toByteArray(object.getObjectContent());
    JsonNode root=mapper.readTree(bytes);
    JsonNode items=root.get(""String_Node_Str"");
    for (    JsonNode item : items) {
      keys.add(ContentKey.fromUrl(item.asText()).get());
    }
    traces.add(""String_Node_Str"",minutePath,items.size());
  }
 catch (  AmazonS3Exception e) {
    if (e.getStatusCode() != 404) {
      logger.warn(""String_Node_Str"" + channel,minutePath,e);
      traces.add(""String_Node_Str"",e);
    }
 else {
      traces.add(""String_Node_Str"",minutePath);
    }
  }
catch (  IOException e) {
    logger.warn(""String_Node_Str"" + channel,minutePath,e);
    traces.add(""String_Node_Str"",e);
  }
}","private void getKeysForMinute(String channel,MinutePath minutePath,Traces traces,Consumer<JsonNode> itemNodeConsumer){
  try (S3Object object=s3Client.getObject(s3BucketName,getS3BatchIndexKey(channel,minutePath))){
    sender.send(""String_Node_Str"" + channel + ""String_Node_Str"",1);
    byte[] bytes=ByteStreams.toByteArray(object.getObjectContent());
    JsonNode root=mapper.readTree(bytes);
    JsonNode items=root.get(""String_Node_Str"");
    for (    JsonNode item : items) {
      itemNodeConsumer.accept(item);
    }
    traces.add(""String_Node_Str"",minutePath,items.size());
  }
 catch (  AmazonS3Exception e) {
    if (e.getStatusCode() != 404) {
      logger.warn(""String_Node_Str"" + channel,minutePath,e);
      traces.add(""String_Node_Str"",e);
    }
 else {
      traces.add(""String_Node_Str"",minutePath);
    }
  }
catch (  IOException e) {
    logger.warn(""String_Node_Str"" + channel,minutePath,e);
    traces.add(""String_Node_Str"",e);
  }
}"
61745,"@Test public void testDirectionQueryAndDelete() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  DateTime start=TimeUtil.now().minusHours(2);
  ContentKey key=new ContentKey(start,""String_Node_Str"");
  for (int i=0; i < 12; i++) {
    writeBatchMinute(channel,new MinutePath(start.plusMinutes(i * 6)),2);
  }
  queryDirection(channel,key,true,50,24);
  queryDirection(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""),true,6,6);
  queryDirection(channel,new ContentKey(start.plusMinutes(73),""String_Node_Str""),true,0,0);
  queryDirection(channel,new ContentKey(start.plusMinutes(73),""String_Node_Str""),false,23,23);
  queryDirection(channel,new ContentKey(start.plusMinutes(14),""String_Node_Str""),false,8,6);
  contentDao.deleteBefore(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""));
  queryDirection(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""),false,8,0);
  queryDirection(channel,key,true,50,10);
}","@Test public void testDirectionQueryAndDelete() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  DateTime start=TimeUtil.now().minusHours(2);
  ContentKey key=new ContentKey(new MinutePath(start).getTime(),""String_Node_Str"");
  for (int i=0; i < 12; i++) {
    writeBatchMinute(channel,new MinutePath(start.plusMinutes(i * 6)),2);
  }
  queryDirection(channel,key,true,50,24);
  queryDirection(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""),true,6,6);
  queryDirection(channel,new ContentKey(start.plusMinutes(73),""String_Node_Str""),true,0,0);
  queryDirection(channel,new ContentKey(start.plusMinutes(73),""String_Node_Str""),false,23,23);
  queryDirection(channel,new ContentKey(start.plusMinutes(14),""String_Node_Str""),false,8,6);
  contentDao.deleteBefore(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""));
  queryDirection(channel,new ContentKey(start.plusMinutes(37),""String_Node_Str""),false,8,0);
  queryDirection(channel,key,true,50,10);
}"
61746,"private void queryDirection(String channel,ContentKey contentKey,boolean next,int count,int expected){
  DirectionQuery query=DirectionQuery.builder().channelName(channel).contentKey(contentKey).next(next).count(count).ttlDays(2).build();
  SortedSet<ContentKey> found=contentDao.query(query);
  assertEquals(expected,found.size());
}","private SortedSet<ContentKey> queryDirection(String channel,ContentKey contentKey,boolean next,int count,int expected){
  DirectionQuery query=DirectionQuery.builder().channelName(channel).contentKey(contentKey).next(next).count(count).ttlDays(2).build();
  ActiveTraces.start(query);
  logger.info(""String_Node_Str"",query);
  SortedSet<ContentKey> found=contentDao.query(query);
  ActiveTraces.getLocal().log(logger);
  ActiveTraces.end();
  assertEquals(expected,found.size());
  return found;
}"
61747,"public void updateTable(String tableName,ProvisionedThroughput throughput){
  try {
    TableDescription tableDescription=waitForTableStatus(tableName,TableStatus.ACTIVE);
    ProvisionedThroughputDescription provisionedThroughput=tableDescription.getProvisionedThroughput();
    if (provisionedThroughput.equals(throughput)) {
      logger.info(""String_Node_Str"",tableName,throughput);
    }
 else {
      logger.info(""String_Node_Str"",tableName,throughput);
      dbClient.updateTable(tableName,throughput);
      waitForTableStatus(tableName,TableStatus.ACTIVE);
    }
  }
 catch (  ResourceNotFoundException e) {
    logger.warn(""String_Node_Str"" + tableName,e);
    throw new RuntimeException(""String_Node_Str"" + tableName);
  }
}","public void updateTable(String tableName,ProvisionedThroughput throughput){
  try {
    TableDescription tableDescription=waitForTableStatus(tableName,TableStatus.ACTIVE);
    ProvisionedThroughputDescription provisionedThroughput=tableDescription.getProvisionedThroughput();
    if (provisionedThroughput.getReadCapacityUnits().equals(throughput.getReadCapacityUnits()) && provisionedThroughput.getWriteCapacityUnits().equals(throughput.getWriteCapacityUnits())) {
      logger.info(""String_Node_Str"",tableName,throughput);
    }
 else {
      logger.info(""String_Node_Str"",tableName,throughput);
      dbClient.updateTable(tableName,throughput);
      waitForTableStatus(tableName,TableStatus.ACTIVE);
    }
  }
 catch (  ResourceNotFoundException e) {
    logger.warn(""String_Node_Str"" + tableName,e);
    throw new RuntimeException(""String_Node_Str"" + tableName);
  }
}"
61748,"@Override public void start(Group group,ContentPath startingPath){
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  executorService=Executors.newSingleThreadScheduledExecutor(factory);
  int offset=getOffset();
  logger.info(""String_Node_Str"",group,offset);
  executorService.scheduleAtFixedRate(new Runnable(){
    ContentPath lastAdded=startingPath;
    @Override public void run(){
      try {
        if (!shouldExit.get()) {
          doWork();
        }
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      try {
        DateTime nextTime=lastAdded.getTime().plusMinutes(1);
        if (lastAdded instanceof ContentKey) {
          nextTime=lastAdded.getTime();
        }
        DateTime stable=TimeUtil.stable().minusMinutes(1);
        if (channelService.isReplicating(channel)) {
          ContentPath contentPath=lastContentPath.get(channel,MinutePath.NONE,ChannelReplicator.REPLICATED_LAST_UPDATED);
          stable=contentPath.getTime().plusSeconds(1);
          logger.debug(""String_Node_Str"",contentPath,stable);
        }
        logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
        while (nextTime.isBefore(stable)) {
          Collection<ContentKey> keys=queryKeys(nextTime).stream().filter(key -> key.compareTo(lastAdded) > 0).collect(Collectors.toCollection(ArrayList::new));
          MinutePath nextPath=new MinutePath(nextTime,keys);
          logger.trace(""String_Node_Str"",channel,nextPath,nextPath.getKeys());
          queue.put(nextPath);
          lastAdded=nextPath;
          nextTime=lastAdded.getTime().plusMinutes(1);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
,getOffset(),60,TimeUnit.SECONDS);
}","@Override public void start(Group group,ContentPath startingPath){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  executorService=Executors.newSingleThreadScheduledExecutor(factory);
  int offset=getOffset();
  logger.info(""String_Node_Str"",group,offset);
  executorService.scheduleAtFixedRate(new Runnable(){
    ContentPath lastAdded=startingPath;
    @Override public void run(){
      try {
        if (!shouldExit.get()) {
          doWork();
        }
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      try {
        DateTime nextTime=lastAdded.getTime().plusMinutes(1);
        if (lastAdded instanceof ContentKey) {
          nextTime=lastAdded.getTime();
        }
        DateTime stable=TimeUtil.stable().minusMinutes(1);
        if (channelService.isReplicating(channel)) {
          ContentPath contentPath=lastContentPath.get(channel,MinutePath.NONE,ChannelReplicator.REPLICATED_LAST_UPDATED);
          stable=contentPath.getTime().plusSeconds(1);
          logger.debug(""String_Node_Str"",contentPath,stable);
        }
        logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
        while (nextTime.isBefore(stable)) {
          Collection<ContentKey> keys=queryKeys(nextTime).stream().filter(key -> key.compareTo(lastAdded) > 0).collect(Collectors.toCollection(ArrayList::new));
          MinutePath nextPath=new MinutePath(nextTime,keys);
          logger.trace(""String_Node_Str"",channel,nextPath,nextPath.getKeys());
          queue.put(nextPath);
          lastAdded=nextPath;
          nextTime=lastAdded.getTime().plusMinutes(1);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
,getOffset(),60,TimeUnit.SECONDS);
}"
61749,"public MinuteGroupStrategy(Group group,LastContentPath lastContentPath,ChannelService channelService){
  this.group=group;
  this.lastContentPath=lastContentPath;
  this.channelService=channelService;
  this.queue=new ArrayBlockingQueue<>(group.getParallelCalls() * 2);
}","public MinuteGroupStrategy(Group group,LastContentPath lastContentPath,ChannelService channelService){
  this.group=group;
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  this.lastContentPath=lastContentPath;
  this.channelService=channelService;
  this.queue=new ArrayBlockingQueue<>(group.getParallelCalls() * 2);
}"
61750,"private void notify(ChannelConfig newConfig,ChannelConfig oldConfig){
  if (newConfig.isReplicating()) {
    replicatorManager.notifyWatchers();
  }
 else   if (oldConfig != null && oldConfig.isReplicating()) {
    replicatorManager.notifyWatchers();
  }
  if (newConfig.isSingle() && !oldConfig.isSingle()) {
    new S3Batch(newConfig,hubUtils).stop();
  }
 else {
    new S3Batch(newConfig,hubUtils).start();
  }
}","private void notify(ChannelConfig newConfig,ChannelConfig oldConfig){
  if (newConfig.isReplicating()) {
    replicatorManager.notifyWatchers();
  }
 else   if (oldConfig != null && oldConfig.isReplicating()) {
    replicatorManager.notifyWatchers();
  }
  if (newConfig.isSingle()) {
    if (oldConfig != null && !oldConfig.isSingle()) {
      new S3Batch(newConfig,hubUtils).stop();
    }
  }
 else {
    new S3Batch(newConfig,hubUtils).start();
  }
}"
61751,"@Override public void start(Group group,ContentPath startingPath){
  MinutePath minutePath=(MinutePath)startingPath;
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  executorService=Executors.newSingleThreadScheduledExecutor(factory);
  int offset=getOffset();
  logger.info(""String_Node_Str"",group,offset);
  executorService.scheduleAtFixedRate(new Runnable(){
    MinutePath lastAdded=minutePath;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      if (!shouldExit.get()) {
        if (channelService.isReplicating(channel)) {
          handleReplication();
        }
 else {
          handleNormal();
        }
      }
    }
    private void handleNormal(){
      try {
        DateTime nextTime=lastAdded.getTime().plusMinutes(1);
        DateTime stable=TimeUtil.stable().minusMinutes(1);
        logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
        while (nextTime.isBefore(stable)) {
          MinutePath nextPath=createMinutePath(nextTime);
          logger.trace(""String_Node_Str"",channel,nextPath);
          queue.put(nextPath);
          lastAdded=nextPath;
          nextTime=lastAdded.getTime().plusMinutes(1);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
    private void handleReplication(){
      logger.warn(""String_Node_Str"" + channel + ""String_Node_Str"");
    }
  }
,getOffset(),60,TimeUnit.SECONDS);
}","@Override public void start(Group group,ContentPath startingPath){
  MinutePath minutePath=(MinutePath)startingPath;
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  executorService=Executors.newSingleThreadScheduledExecutor(factory);
  int offset=getOffset();
  logger.info(""String_Node_Str"",group,offset);
  executorService.scheduleAtFixedRate(new Runnable(){
    MinutePath lastAdded=minutePath;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      if (!shouldExit.get()) {
        if (channelService.isReplicating(channel)) {
          handleReplication();
        }
 else {
          handleNormal();
        }
      }
    }
    private void handleNormal(){
      try {
        DateTime nextTime=lastAdded.getTime().plusMinutes(1);
        DateTime stable=TimeUtil.stable().minusMinutes(1);
        logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
        while (nextTime.isBefore(stable)) {
          MinutePath nextPath=createMinutePath(nextTime);
          logger.trace(""String_Node_Str"",channel,nextPath,nextPath.getKeys());
          queue.put(nextPath);
          lastAdded=nextPath;
          nextTime=lastAdded.getTime().plusMinutes(1);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
    private void handleReplication(){
      logger.warn(""String_Node_Str"" + channel + ""String_Node_Str"");
    }
  }
,getOffset(),60,TimeUnit.SECONDS);
}"
61752,"private void handleNormal(){
  try {
    DateTime nextTime=lastAdded.getTime().plusMinutes(1);
    DateTime stable=TimeUtil.stable().minusMinutes(1);
    logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
    while (nextTime.isBefore(stable)) {
      MinutePath nextPath=createMinutePath(nextTime);
      logger.trace(""String_Node_Str"",channel,nextPath);
      queue.put(nextPath);
      lastAdded=nextPath;
      nextTime=lastAdded.getTime().plusMinutes(1);
    }
  }
 catch (  InterruptedException e) {
    logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
    throw new RuntimeInterruptedException(e);
  }
}","private void handleNormal(){
  try {
    DateTime nextTime=lastAdded.getTime().plusMinutes(1);
    DateTime stable=TimeUtil.stable().minusMinutes(1);
    logger.debug(""String_Node_Str"",lastAdded,nextTime,stable);
    while (nextTime.isBefore(stable)) {
      MinutePath nextPath=createMinutePath(nextTime);
      logger.trace(""String_Node_Str"",channel,nextPath,nextPath.getKeys());
      queue.put(nextPath);
      lastAdded=nextPath;
      nextTime=lastAdded.getTime().plusMinutes(1);
    }
  }
 catch (  InterruptedException e) {
    logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ e.getMessage());
    throw new RuntimeInterruptedException(e);
  }
}"
61753,"@Override public int compareTo(ContentPath o){
  return 0;
}","@Override public int compareTo(ContentPath contentPath){
  MinutePath other=(MinutePath)contentPath;
  return time.compareTo(other.time);
}"
61754,"@Test public void testCreateIfMissing() throws Exception {
  String name=""String_Node_Str"";
  ContentKey key=new ContentKey();
  assertEquals(key,contentKeyValue.get(name,key,""String_Node_Str""));
  assertEquals(key,contentKeyValue.get(name,new ContentKey(),""String_Node_Str""));
}","@Test public void testCreateIfMissing() throws Exception {
  String name=""String_Node_Str"";
  ContentKey key=new ContentKey();
  assertEquals(key,lastContentPath.get(name,key,BASE_PATH));
  assertEquals(key,lastContentPath.get(name,new ContentKey(),BASE_PATH));
}"
61755,"@Before public void setUp() throws Exception {
  contentKeyValue=new LastContentPath(curator);
}","@Before public void setUp() throws Exception {
  lastContentPath=new LastContentPath(curator);
}"
61756,"@Test public void testLifeCycle() throws Exception {
  String name=""String_Node_Str"";
  DateTime start=new DateTime(2014,12,3,20,45,DateTimeZone.UTC);
  ContentKey key1=new ContentKey(start,""String_Node_Str"");
  contentKeyValue.initialize(name,key1,""String_Node_Str"");
  assertEquals(key1,contentKeyValue.get(name,new ContentKey(),""String_Node_Str""));
  ContentKey key2=new ContentKey(start.plusMillis(1),""String_Node_Str"");
  contentKeyValue.updateIncrease(key2,name,""String_Node_Str"");
  assertEquals(key2,contentKeyValue.get(name,new ContentKey(),""String_Node_Str""));
  ContentKey key3=new ContentKey(start.minusMillis(1),""String_Node_Str"");
  contentKeyValue.updateIncrease(key3,name,""String_Node_Str"");
  assertEquals(key2,contentKeyValue.get(name,new ContentKey(),""String_Node_Str""));
  ContentKey key4=new ContentKey(start.plusMinutes(1),""String_Node_Str"");
  contentKeyValue.updateIncrease(key4,name,""String_Node_Str"");
  assertEquals(key4,contentKeyValue.get(name,new ContentKey(),""String_Node_Str""));
  contentKeyValue.delete(name,""String_Node_Str"");
  ContentKey contentKey=new ContentKey();
  assertEquals(contentKey,contentKeyValue.get(name,contentKey,""String_Node_Str""));
}","@Test public void testLifeCycle() throws Exception {
  String name=""String_Node_Str"";
  DateTime start=new DateTime(2014,12,3,20,45,DateTimeZone.UTC);
  ContentKey key1=new ContentKey(start,""String_Node_Str"");
  lastContentPath.initialize(name,key1,BASE_PATH);
  assertEquals(key1,lastContentPath.get(name,new ContentKey(),BASE_PATH));
  ContentKey key2=new ContentKey(start.plusMillis(1),""String_Node_Str"");
  lastContentPath.updateIncrease(key2,name,BASE_PATH);
  assertEquals(key2,lastContentPath.get(name,new ContentKey(),BASE_PATH));
  ContentKey key3=new ContentKey(start.minusMillis(1),""String_Node_Str"");
  lastContentPath.updateIncrease(key3,name,BASE_PATH);
  assertEquals(key2,lastContentPath.get(name,new ContentKey(),BASE_PATH));
  ContentKey key4=new ContentKey(start.plusMinutes(1),""String_Node_Str"");
  lastContentPath.updateIncrease(key4,name,BASE_PATH);
  assertEquals(key4,lastContentPath.get(name,new ContentKey(),BASE_PATH));
  lastContentPath.delete(name,BASE_PATH);
  ContentKey contentKey=new ContentKey();
  assertEquals(contentKey,lastContentPath.get(name,contentKey,BASE_PATH));
}"
61757,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=RestClient.createClient(30,120,true);
  callbackQueue=queueProvider.get();
  try {
    ContentKey startingKey=group.getStartingKey();
    if (null == startingKey) {
      startingKey=new ContentKey();
    }
    ContentKey lastCompletedKey=getLastCompleted(startingKey);
    logger.info(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    ContentKey lastCompletedKey=getLastCompleted(ContentKey.NONE);
    logger.info(""String_Node_Str"",lastCompletedKey,group.getName());
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    Sleeper.sleep(1000);
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.group=foundGroup.get();
  this.client=RestClient.createClient(30,120,true);
  callbackQueue=queueProvider.get();
  try {
    ContentKey startingKey=group.getStartingKey();
    if (null == startingKey) {
      startingKey=new ContentKey();
    }
    ContentKey lastCompletedKey=getLastCompleted(startingKey);
    logger.info(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    ContentKey lastCompletedKey=getLastCompleted(ContentKey.NONE);
    logger.info(""String_Node_Str"",lastCompletedKey,group.getName());
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}"
61758,"private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      Location location=Location.ALL;
      if (unit.equals(TimeUtil.Unit.SECONDS)) {
        location=Location.CACHE;
      }
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Sleeper.sleep(1000);
    }
  }
}","private void doWork(){
  while (!shouldExit.get()) {
    TimeQuery timeQuery=queryGenerator.getQuery(getLatestStable());
    if (timeQuery != null) {
      addKeys(channelService.queryByTime(timeQuery));
    }
 else {
      Sleeper.sleep(1000);
    }
  }
}"
61759,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    ContentKey lastAdded=startingKey;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          Location location=Location.ALL;
          if (unit.equals(TimeUtil.Unit.SECONDS)) {
            location=Location.CACHE;
          }
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(lastAdded) > 0) {
            queue.put(key);
            lastAdded=key;
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  queryGenerator=new QueryGenerator(startingKey.getTime(),channel);
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    ContentKey lastAdded=startingKey;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        TimeQuery timeQuery=queryGenerator.getQuery(getLatestStable());
        if (timeQuery != null) {
          addKeys(channelService.queryByTime(timeQuery));
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(lastAdded) > 0) {
            queue.put(key);
            lastAdded=key;
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
    private DateTime getLatestStable(){
      if (channelService.isReplicating(channel)) {
        Optional<ContentKey> latest=channelService.getLatest(channel,true,false);
        if (latest.isPresent()) {
          return latest.get().getTime();
        }
 else {
          return new DateTime(0);
        }
      }
 else {
        return TimeUtil.stable();
      }
    }
  }
);
}"
61760,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=RestClient.createClient(30,120);
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=lastContentKey.get(group.getName(),new ContentKey(),GROUP_LAST_COMPLETED);
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=RestClient.createClient(30,120);
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=lastContentKey.get(group.getName(),new ContentKey(),GROUP_LAST_COMPLETED);
    logger.info(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}"
61761,"private boolean setValue(String path,ContentKey nextKey,LastUpdated existing) throws Exception {
  try {
    curator.setData().withVersion(existing.version).forPath(path,nextKey.getBytes());
    return true;
  }
 catch (  KeeperException.BadVersionException e) {
    logger.info(""String_Node_Str"" + path + ""String_Node_Str""+ e.getMessage());
    return false;
  }
catch (  Exception e) {
    logger.info(""String_Node_Str"" + path,e);
    return false;
  }
}","private boolean setValue(String path,ContentKey nextKey,LastUpdated existing) throws Exception {
  try {
    curator.setData().withVersion(existing.version).forPath(path,nextKey.getBytes());
    return true;
  }
 catch (  KeeperException.BadVersionException e) {
    logger.debug(""String_Node_Str"" + path + ""String_Node_Str""+ e.getMessage());
    return false;
  }
catch (  Exception e) {
    logger.info(""String_Node_Str"" + path,e);
    return false;
  }
}"
61762,"private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfig> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfig channel : replicatedChannels) {
    logger.info(""String_Node_Str"",channel.getName());
    try {
      if (replicatorMap.containsKey(channel.getName())) {
        ChannelReplicator replicator=replicatorMap.get(channel.getName());
        if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
          logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
          replicator.stop();
          startReplication(channel);
        }
      }
 else {
        startReplication(channel);
      }
      replicators.add(channel.getName());
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"" + channel,e);
    }
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.stop();
  }
}","private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfig> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfig channel : replicatedChannels) {
    logger.info(""String_Node_Str"",channel.getName());
    try {
      replicators.add(channel.getName());
      if (replicatorMap.containsKey(channel.getName())) {
        ChannelReplicator replicator=replicatorMap.get(channel.getName());
        if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
          logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
          replicator.stop();
          startReplication(channel);
        }
      }
 else {
        startReplication(channel);
      }
    }
 catch (    Exception e) {
      logger.warn(""String_Node_Str"" + channel,e);
    }
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.stop();
  }
}"
61763,"@Override public ChannelConfig getChannel(){
  return null;
}","@Override public ChannelConfig getChannel(){
  return channel;
}"
61764,"public Response toResponse(T exception){
  logger.info(exception.getMessage());
  Response.ResponseBuilder builder=Response.status(this.getResponseCode());
  builder.entity(exception.getMessage());
  return builder.build();
}","public Response toResponse(T exception){
  logger.info(exception.getMessage());
  Response.ResponseBuilder builder=Response.status(this.getResponseCode());
  builder.entity(""String_Node_Str"");
  return builder.build();
}"
61765,"public Response toResponse(T exception){
  logger.info(exception.getMessage());
  Response.ResponseBuilder builder=Response.status(this.getResponseCode());
  builder.entity(""String_Node_Str"");
  return builder.build();
}","public Response toResponse(T exception){
  logger.info(exception.getMessage());
  Response.ResponseBuilder builder=Response.status(this.getResponseCode());
  builder.entity(exception.getMessage());
  return builder.build();
}"
61766,"@PATCH @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfig oldConfig=channelService.getChannelConfig(channelName);
  ChannelConfig newConfig=ChannelConfig.builder().withChannelConfiguration(oldConfig).withUpdateJson(json).build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=LinkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfig> linked=LinkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}","@PATCH @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  ChannelConfig oldConfig=channelService.getChannelConfig(channelName);
  if (oldConfig == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfig newConfig=ChannelConfig.builder().withChannelConfiguration(oldConfig).withUpdateJson(json).build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=LinkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfig> linked=LinkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}"
61767,"@GET @Produces(MediaType.APPLICATION_JSON) public Response getChannelMetadata(@PathParam(""String_Node_Str"") String channelName){
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfig config=channelService.getChannelConfig(channelName);
  URI channelUri=LinkBuilder.buildChannelUri(config,uriInfo);
  Linked<ChannelConfig> linked=LinkBuilder.buildChannelLinks(config,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}","@GET @Produces(MediaType.APPLICATION_JSON) public Response getChannelMetadata(@PathParam(""String_Node_Str"") String channelName){
  ChannelConfig config=channelService.getChannelConfig(channelName);
  if (config == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  URI channelUri=LinkBuilder.buildChannelUri(config,uriInfo);
  Linked<ChannelConfig> linked=LinkBuilder.buildChannelLinks(config,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}"
61768,"@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@PathParam(""String_Node_Str"") final String channelName,@HeaderParam(""String_Node_Str"") final String contentType,@HeaderParam(""String_Node_Str"") final String contentLanguage,@HeaderParam(""String_Node_Str"") final String user,final InputStream data) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  long start=System.currentTimeMillis();
  Content content=Content.builder().withContentLanguage(contentLanguage).withContentType(contentType).withStream(data).withUser(user).build();
  try {
    ContentKey contentKey=channelService.insert(channelName,content);
    InsertedContentKey insertionResult=new InsertedContentKey(contentKey);
    URI payloadUri=LinkBuilder.buildItemUri(contentKey,uriInfo.getRequestUri());
    Linked<InsertedContentKey> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",LinkBuilder.buildChannelUri(channelName,uriInfo)).withLink(""String_Node_Str"",payloadUri).build();
    Response.ResponseBuilder builder=Response.status(Response.Status.CREATED);
    builder.entity(linkedResult);
    builder.location(payloadUri);
    LinkBuilder.addOptionalHeader(Headers.USER,content.getUser(),builder);
    content.getTraces().logSlow(100,logger);
    long time=System.currentTimeMillis() - start;
    if (time < minPostTimeMillis) {
      Sleeper.sleep(minPostTimeMillis - time);
    }
    return builder.build();
  }
 catch (  ContentTooLargeException e) {
    return Response.status(413).entity(e.getMessage()).build();
  }
catch (  Exception e) {
    String key=""String_Node_Str"";
    if (content.getContentKey().isPresent()) {
      key=content.getContentKey().get().toString();
    }
    logger.warn(""String_Node_Str"" + channelName + ""String_Node_Str""+ key,e);
    throw e;
  }
}","@POST @Produces(MediaType.APPLICATION_JSON) public Response insertValue(@PathParam(""String_Node_Str"") final String channelName,@HeaderParam(""String_Node_Str"") final String contentType,@HeaderParam(""String_Node_Str"") final String contentLanguage,@HeaderParam(""String_Node_Str"") final String user,final InputStream data) throws Exception {
  if (!channelService.channelExists(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  long start=System.currentTimeMillis();
  Content content=Content.builder().withContentLanguage(contentLanguage).withContentType(contentType).withStream(data).withUser(user).build();
  try {
    ContentKey contentKey=channelService.insert(channelName,content);
    InsertedContentKey insertionResult=new InsertedContentKey(contentKey);
    URI payloadUri=LinkBuilder.buildItemUri(contentKey,uriInfo.getRequestUri());
    Linked<InsertedContentKey> linkedResult=linked(insertionResult).withLink(""String_Node_Str"",LinkBuilder.buildChannelUri(channelName,uriInfo)).withLink(""String_Node_Str"",payloadUri).build();
    Response.ResponseBuilder builder=Response.status(Response.Status.CREATED);
    builder.entity(linkedResult);
    builder.location(payloadUri);
    LinkBuilder.addOptionalHeader(Headers.USER,content.getUser(),builder);
    content.getTraces().logSlow(100,logger);
    long time=System.currentTimeMillis() - start;
    if (time < minPostTimeMillis) {
      Sleeper.sleep(minPostTimeMillis - time);
    }
    return builder.build();
  }
 catch (  ContentTooLargeException e) {
    return Response.status(413).entity(e.getMessage()).build();
  }
catch (  Exception e) {
    String key=""String_Node_Str"";
    if (content.getContentKey().isPresent()) {
      key=content.getContentKey().get().toString();
    }
    logger.warn(""String_Node_Str"" + channelName + ""String_Node_Str""+ key,e);
    throw e;
  }
}"
61769,"public String getLatest(String channel,String limitPath){
  String[] split=StringUtils.split(limitPath,""String_Node_Str"");
  split=new String[]{split[0],split[1],split[2],split[3],split[4],split[5] + split[6] + split[7]};
  String last=recurseLatest(channel,split,0);
  if (last == null) {
    return null;
  }
  return spokeKeyFromPath(last);
}","public String getLatest(String channel,String limitPath){
  logger.trace(""String_Node_Str"",channel,limitPath);
  String[] split=StringUtils.split(limitPath,""String_Node_Str"");
  split=new String[]{split[0],split[1],split[2],split[3],split[4],split[5] + split[6] + split[7]};
  String last=recurseLatest(channel,split,0,channel);
  if (last == null) {
    return null;
  }
  String latest=spokeKeyFromPath(last);
  logger.trace(""String_Node_Str"",latest,limitPath);
  return latest;
}"
61770,"private String recurseLatest(String path,String[] limitPath,int count){
  String base=""String_Node_Str"";
  String pathname=storagePath + ""String_Node_Str"" + path;
  String[] items=new File(pathname).list();
  if (items == null) {
    logger.trace(""String_Node_Str"",pathname);
    return null;
  }
  for (  String item : items) {
    if (item.compareTo(base) > 0 && item.compareTo(limitPath[count]) <= 0) {
      base=item;
    }
  }
  if (base.equals(""String_Node_Str"")) {
    return null;
  }
  logger.trace(""String_Node_Str"",count,base,path);
  if (count == 5) {
    return path + ""String_Node_Str"" + base;
  }
  count++;
  return recurseLatest(path + ""String_Node_Str"" + base,limitPath,count);
}","private String recurseLatest(String path,String[] limitPath,int count,String channel){
  String base=""String_Node_Str"";
  String pathname=storagePath + ""String_Node_Str"" + path;
  String[] items=new File(pathname).list();
  if (items == null) {
    logger.trace(""String_Node_Str"",pathname);
    return null;
  }
  String limitCompare=channel + ""String_Node_Str"";
  for (int i=0; i <= count; i++) {
    limitCompare+=limitPath[i] + ""String_Node_Str"";
  }
  for (  String item : items) {
    if (item.compareTo(base) > 0) {
      if ((path + ""String_Node_Str"" + item).compareTo(limitCompare) <= 0) {
        base=item;
      }
    }
  }
  if (base.equals(""String_Node_Str"")) {
    return null;
  }
  logger.trace(""String_Node_Str"",count,base,path);
  if (count == 5) {
    return path + ""String_Node_Str"" + base;
  }
  count++;
  return recurseLatest(path + ""String_Node_Str"" + base,limitPath,count,channel);
}"
61771,"@Test public void testLastFile(){
  DateTime time=new DateTime(2014,12,31,23,30,1,2,DateTimeZone.UTC);
  for (int i=0; i < 30; i++) {
    time=time.plusMinutes(2);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
    time=time.plusSeconds(1);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
    time=time.plusMillis(1);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
  }
  ContentKey limitKey=new ContentKey(time.minusMinutes(1),""String_Node_Str"");
  String found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
  limitKey=new ContentKey(time.plusMinutes(1),""String_Node_Str"");
  found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
  limitKey=new ContentKey(time.plusMinutes(1),""String_Node_Str"");
  found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
}","@Test public void testLastFile(){
  DateTime time=new DateTime(2014,12,31,23,30,1,2,DateTimeZone.UTC);
  for (int i=0; i < 30; i++) {
    time=time.plusMinutes(2);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
    time=time.plusSeconds(1);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
    time=time.plusMillis(1);
    spokeStore.write(""String_Node_Str"" + new ContentKey(time,""String_Node_Str"").toUrl(),BYTES);
  }
  ContentKey limitKey=new ContentKey(time.minusMinutes(1),""String_Node_Str"");
  String found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
  limitKey=new ContentKey(time,""String_Node_Str"");
  found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
  limitKey=new ContentKey(time.plusMinutes(1),""String_Node_Str"");
  found=spokeStore.getLatest(""String_Node_Str"",limitKey.toUrl());
  assertEquals(""String_Node_Str"",found);
}"
61772,"public Optional<ContentKey> next(){
  try {
    return Optional.fromNullable(queue.poll(10,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    throw new RuntimeInterruptedException(e);
  }
}","public Optional<ContentKey> next(){
  if (error.get()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    return Optional.fromNullable(queue.poll(10,TimeUnit.SECONDS));
  }
 catch (  InterruptedException e) {
    throw new RuntimeInterruptedException(e);
  }
}"
61773,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    ContentKey lastAdded=startingKey;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          Location location=Location.ALL;
          if (unit.equals(TimeUtil.Unit.SECONDS)) {
            location=Location.CACHE;
          }
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(lastAdded) > 0) {
            queue.put(key);
            lastAdded=key;
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    ContentKey lastAdded=startingKey;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        error.set(true);
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          Location location=Location.ALL;
          if (unit.equals(TimeUtil.Unit.SECONDS)) {
            location=Location.CACHE;
          }
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(lastAdded) > 0) {
            queue.put(key);
            lastAdded=key;
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}"
61774,"@Override public void run(){
  try {
    doWork();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + channel,e);
  }
}","@Override public void run(){
  try {
    doWork();
  }
 catch (  Exception e) {
    error.set(true);
    logger.warn(""String_Node_Str"" + channel,e);
  }
}"
61775,"public static ChannelConfiguration fromJson(String json,String name){
  return gson.fromJson(json,ChannelConfiguration.Builder.class).withName(name).build();
}","public static ChannelConfiguration fromJson(String json,String name){
  if (StringUtils.isEmpty(json)) {
    return builder().withName(name).build();
  }
  return gson.fromJson(json,ChannelConfiguration.Builder.class).withName(name).build();
}"
61776,"private void addKeys(Collection<ContentKey> keys){
  logger.trace(""String_Node_Str"",channel,keys);
  try {
    for (    ContentKey key : keys) {
      if (key.compareTo(startingKey) > 0) {
        queue.put(key);
      }
    }
  }
 catch (  InterruptedException e) {
    logger.info(""String_Node_Str"" + e.getMessage());
    throw new RuntimeInterruptedException(e);
  }
}","private void addKeys(Collection<ContentKey> keys){
  logger.trace(""String_Node_Str"",channel,keys);
  try {
    for (    ContentKey key : keys) {
      if (key.compareTo(lastAdded) > 0) {
        queue.put(key);
        lastAdded=key;
      }
    }
  }
 catch (  InterruptedException e) {
    logger.info(""String_Node_Str"" + e.getMessage());
    throw new RuntimeInterruptedException(e);
  }
}"
61777,"private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Sleeper.sleep(1000);
    }
  }
}","private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      Location location=Location.ALL;
      if (unit.equals(TimeUtil.Unit.SECONDS)) {
        location=Location.CACHE;
      }
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Sleeper.sleep(1000);
    }
  }
}"
61778,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    ContentKey lastAdded=startingKey;
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          Location location=Location.ALL;
          if (unit.equals(TimeUtil.Unit.SECONDS)) {
            location=Location.CACHE;
          }
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).location(location).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Sleeper.sleep(1000);
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(lastAdded) > 0) {
            queue.put(key);
            lastAdded=key;
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}"
61779,"private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.exit();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.exit();
  }
}","private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.stop();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.stop();
  }
}"
61780,"@Override protected void shutDown() throws Exception {
  stopped.set(true);
  stopReplication();
}","@Override protected void shutDown() throws Exception {
  stopped.set(true);
  exit();
}"
61781,"@Override public void exit(){
  hubUtils.stopGroupCallback(getGroupName(),channel.getReplicationSource());
}","@Override public void exit(){
}"
61782,"private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.exit();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.exit();
  }
}","private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.stop();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.stop();
  }
}"
61783,"@Override protected void shutDown() throws Exception {
  stopped.set(true);
  stopReplication();
}","@Override protected void shutDown() throws Exception {
  stopped.set(true);
  exit();
}"
61784,"@Override public void exit(){
  hubUtils.stopGroupCallback(getGroupName(),channel.getReplicationSource());
}","@Override public void exit(){
}"
61785,"private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.exit();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.exit();
  }
}","private synchronized void replicateChannels(){
  if (stopped.get()) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Set<String> replicators=new HashSet<>();
  Iterable<ChannelConfiguration> replicatedChannels=channelService.getChannels(REPLICATED);
  for (  ChannelConfiguration channel : replicatedChannels) {
    if (replicatorMap.containsKey(channel.getName())) {
      ChannelReplicator replicator=replicatorMap.get(channel.getName());
      if (!replicator.getChannel().getReplicationSource().equals(channel.getReplicationSource())) {
        logger.info(""String_Node_Str"",replicator.getChannel().getReplicationSource(),channel.getReplicationSource());
        replicator.stop();
        startReplication(channel);
      }
    }
 else {
      startReplication(channel);
    }
    replicators.add(channel.getName());
  }
  Set<String> toStop=new HashSet<>(replicatorMap.keySet());
  toStop.removeAll(replicators);
  logger.info(""String_Node_Str"",toStop);
  for (  String nameToStop : toStop) {
    logger.info(""String_Node_Str"",nameToStop);
    ChannelReplicator replicator=replicatorMap.remove(nameToStop);
    replicator.stop();
  }
}"
61786,"@Override protected void shutDown() throws Exception {
  stopped.set(true);
  stopReplication();
}","@Override protected void shutDown() throws Exception {
  stopped.set(true);
  exit();
}"
61787,"@Override public void exit(){
  hubUtils.stopGroupCallback(getGroupName(),channel.getReplicationSource());
}","@Override public void exit(){
}"
61788,"@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}","@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).ttlDays(getChannelConfiguration(channelName).getTtlDays()).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}"
61789,"@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}","@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).ttlDays(getChannelConfiguration(channelName).getTtlDays()).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}"
61790,"@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}","@Override public Optional<ContentKey> getLatest(String channelName,boolean stable,boolean trace){
  DirectionQuery query=DirectionQuery.builder().channelName(channelName).contentKey(new ContentKey(TimeUtil.time(stable),""String_Node_Str"")).next(false).stable(stable).ttlDays(getChannelConfiguration(channelName).getTtlDays()).count(1).build();
  query.trace(trace);
  Collection<ContentKey> keys=getKeys(query);
  if (trace) {
    query.getTraces().log(logger);
  }
  if (keys.isEmpty()) {
    return Optional.absent();
  }
 else {
    return Optional.of(keys.iterator().next());
  }
}"
61791,"@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(GroupContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}","@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(LastContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}"
61792,"@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,GroupContentKey groupContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.groupContentKey=groupContentKey;
  this.groupInProcess=groupInProcess;
}","@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,LastContentKey lastContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.lastContentKey=lastContentKey;
  this.groupInProcess=groupInProcess;
}"
61793,"private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  groupContentKey.delete(group.getName());
  logger.info(""String_Node_Str"" + group.getName());
}","private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  lastContentKey.delete(group.getName(),GROUP_LAST_COMPLETED);
  logger.info(""String_Node_Str"" + group.getName());
}"
61794,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=groupContentKey.get(group.getName(),new ContentKey());
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=lastContentKey.get(group.getName(),new ContentKey(),GROUP_LAST_COMPLETED);
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}"
61795,"public ContentKey getLastCompleted(){
  return groupContentKey.get(group.getName(),ContentKey.NONE);
}","public ContentKey getLastCompleted(){
  return lastContentKey.get(group.getName(),ContentKey.NONE,GROUP_LAST_COMPLETED);
}"
61796,"private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        groupContentKey.updateIncrease(key,group.getName());
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        lastContentKey.updateIncrease(key,group.getName(),GROUP_LAST_COMPLETED);
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61797,"public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  groupContentKey.initialize(group.getName(),group.getStartingKey());
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}","public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  lastContentKey.initialize(group.getName(),group.getStartingKey(),GroupCaller.GROUP_LAST_COMPLETED);
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}"
61798,"@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,GroupContentKey groupContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.groupContentKey=groupContentKey;
}","@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,LastContentKey lastContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.lastContentKey=lastContentKey;
}"
61799,"@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
}","@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator,LastContentKey lastContentKey){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
  this.lastContentKey=lastContentKey;
}"
61800,"private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  long lastReplicated=0;
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey key=content.getContentKey().get();
        if (key.getMillis() < lastReplicated) {
          key=new ContentKey(new DateTime(lastReplicated),key.getHash());
          content.setContentKey(key);
        }
        channelService.insert(channel.getName(),content);
        lastReplicated=key.getMillis();
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}","private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey nextKey=content.getContentKey().get();
        ContentKey lastCompletedKey=lastContentKey.get(channel.getName(),nextKey,V1_REPLICATE_LAST_COMPLETED);
        if (nextKey.compareTo(lastCompletedKey) < 0) {
          nextKey=new ContentKey(lastCompletedKey.getTime(),nextKey.getHash());
          content.setContentKey(nextKey);
        }
        channelService.insert(channel.getName(),content);
        lastContentKey.updateIncrease(nextKey,channel.getName(),V1_REPLICATE_LAST_COMPLETED);
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}"
61801,"@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(GroupContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}","@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(LastContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}"
61802,"@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,GroupContentKey groupContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.groupContentKey=groupContentKey;
  this.groupInProcess=groupInProcess;
}","@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,LastContentKey lastContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.lastContentKey=lastContentKey;
  this.groupInProcess=groupInProcess;
}"
61803,"private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  groupContentKey.delete(group.getName());
  logger.info(""String_Node_Str"" + group.getName());
}","private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  lastContentKey.delete(group.getName(),GROUP_LAST_COMPLETED);
  logger.info(""String_Node_Str"" + group.getName());
}"
61804,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=groupContentKey.get(group.getName(),new ContentKey());
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=lastContentKey.get(group.getName(),new ContentKey(),GROUP_LAST_COMPLETED);
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}"
61805,"public ContentKey getLastCompleted(){
  return groupContentKey.get(group.getName(),ContentKey.NONE);
}","public ContentKey getLastCompleted(){
  return lastContentKey.get(group.getName(),ContentKey.NONE,GROUP_LAST_COMPLETED);
}"
61806,"private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        groupContentKey.updateIncrease(key,group.getName());
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        lastContentKey.updateIncrease(key,group.getName(),GROUP_LAST_COMPLETED);
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61807,"public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  groupContentKey.initialize(group.getName(),group.getStartingKey());
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}","public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  lastContentKey.initialize(group.getName(),group.getStartingKey(),GroupCaller.GROUP_LAST_COMPLETED);
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}"
61808,"@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,GroupContentKey groupContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.groupContentKey=groupContentKey;
}","@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,LastContentKey lastContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.lastContentKey=lastContentKey;
}"
61809,"@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
}","@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator,LastContentKey lastContentKey){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
  this.lastContentKey=lastContentKey;
}"
61810,"private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  long lastReplicated=0;
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey key=content.getContentKey().get();
        if (key.getMillis() < lastReplicated) {
          key=new ContentKey(new DateTime(lastReplicated),key.getHash());
          content.setContentKey(key);
        }
        channelService.insert(channel.getName(),content);
        lastReplicated=key.getMillis();
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}","private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey nextKey=content.getContentKey().get();
        ContentKey lastCompletedKey=lastContentKey.get(channel.getName(),nextKey,V1_REPLICATE_LAST_COMPLETED);
        if (nextKey.compareTo(lastCompletedKey) < 0) {
          nextKey=new ContentKey(lastCompletedKey.getTime(),nextKey.getHash());
          content.setContentKey(nextKey);
        }
        channelService.insert(channel.getName(),content);
        lastContentKey.updateIncrease(nextKey,channel.getName(),V1_REPLICATE_LAST_COMPLETED);
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}"
61811,"@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(GroupContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}","@Override protected void configure(){
  Names.bindProperties(binder(),HubProperties.getProperties());
  bind(HubHealthCheck.class).asEagerSingleton();
  bind(ZooKeeperState.class).asEagerSingleton();
  bind(ReplicationService.class).to(ReplicationServiceImpl.class).asEagerSingleton();
  bind(Replicator.class).to(ReplicatorImpl.class).asEagerSingleton();
  bind(ChannelUtils.class).asEagerSingleton();
  bind(CuratorLock.class).asEagerSingleton();
  bind(AwsConnectorFactory.class).asEagerSingleton();
  bind(S3Config.class).asEagerSingleton();
  bind(SpokeTtlEnforcer.class).asEagerSingleton();
  if (Boolean.parseBoolean(HubProperties.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).annotatedWith(BasicChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
    bind(ChannelService.class).to(AuditChannelService.class).asEagerSingleton();
  }
 else {
    logger.info(""String_Node_Str"");
    bind(ChannelService.class).to(ChannelServiceImpl.class).asEagerSingleton();
  }
  bind(ChannelConfigurationDao.class).to(CachedChannelConfigurationDao.class).asEagerSingleton();
  bind(ChannelConfigurationDao.class).annotatedWith(Names.named(CachedChannelConfigurationDao.DELEGATE)).to(DynamoChannelConfigurationDao.class);
  bind(ReplicationDao.class).to(CachedReplicationDao.class).asEagerSingleton();
  bind(ReplicationDao.class).annotatedWith(Names.named(CachedReplicationDao.DELEGATE)).to(DynamoReplicationDao.class).asEagerSingleton();
  bind(ContentService.class).to(ContentServiceImpl.class).asEagerSingleton();
  bind(FileSpokeStore.class).asEagerSingleton();
  bind(RemoteSpokeStore.class).asEagerSingleton();
  bind(SpokeCluster.class).to(CuratorSpokeCluster.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.CACHE)).to(SpokeContentDao.class).asEagerSingleton();
  bind(ContentDao.class).annotatedWith(Names.named(ContentDao.LONG_TERM)).to(S3ContentDao.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
  bind(DynamoUtils.class).asEagerSingleton();
  bind(DynamoGroupDao.class).asEagerSingleton();
  bind(ChannelValidator.class).asEagerSingleton();
  bind(GroupValidator.class).asEagerSingleton();
  bind(GroupCallback.class).to(GroupCallbackImpl.class).asEagerSingleton();
  bind(LastContentKey.class).asEagerSingleton();
  bind(WatchManager.class).asEagerSingleton();
  bind(HostedGraphiteSender.class).asEagerSingleton();
  bind(HubInstrumentedResourceMethodDispatchAdapter.class).toProvider(HubMethodTimingAdapterProvider.class).in(Singleton.class);
  bind(TimeMonitor.class).asEagerSingleton();
  bind(S3WriterManager.class).asEagerSingleton();
}"
61812,"@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,GroupContentKey groupContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.groupContentKey=groupContentKey;
  this.groupInProcess=groupInProcess;
}","@Inject public GroupCaller(CuratorFramework curator,Provider<CallbackQueue> queueProvider,GroupService groupService,MetricsTimer metricsTimer,LastContentKey lastContentKey,GroupContentKeySet groupInProcess){
  this.curator=curator;
  this.queueProvider=queueProvider;
  this.groupService=groupService;
  this.metricsTimer=metricsTimer;
  this.lastContentKey=lastContentKey;
  this.groupInProcess=groupInProcess;
}"
61813,"private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  groupContentKey.delete(group.getName());
  logger.info(""String_Node_Str"" + group.getName());
}","private void delete(){
  logger.info(""String_Node_Str"" + group.getName());
  groupInProcess.delete(group.getName());
  lastContentKey.delete(group.getName(),GROUP_LAST_COMPLETED);
  logger.info(""String_Node_Str"" + group.getName());
}"
61814,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=groupContentKey.get(group.getName(),new ContentKey());
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  this.hasLeadership=hasLeadership;
  retryer=buildRetryer();
  logger.info(""String_Node_Str"" + group);
  Optional<Group> foundGroup=groupService.getGroup(group.getName());
  if (!foundGroup.isPresent()) {
    logger.info(""String_Node_Str"" + group.getName());
    return;
  }
  this.client=GroupClient.createClient();
  callbackQueue=queueProvider.get();
  try {
    ContentKey lastCompletedKey=lastContentKey.get(group.getName(),new ContentKey(),GROUP_LAST_COMPLETED);
    logger.debug(""String_Node_Str"",lastCompletedKey,group.getName());
    if (hasLeadership.get()) {
      sendInProcess(lastCompletedKey);
      callbackQueue.start(group,lastCompletedKey);
      while (hasLeadership.get()) {
        Optional<ContentKey> nextOptional=callbackQueue.next();
        if (nextOptional.isPresent()) {
          send(nextOptional.get());
        }
      }
    }
  }
 catch (  RuntimeInterruptedException|InterruptedException e) {
    logger.info(""String_Node_Str"" + group.getName());
  }
 finally {
    logger.info(""String_Node_Str"" + group);
    closeQueue();
    if (deleteOnExit.get()) {
      delete();
    }
  }
}"
61815,"public ContentKey getLastCompleted(){
  return groupContentKey.get(group.getName(),ContentKey.NONE);
}","public ContentKey getLastCompleted(){
  return lastContentKey.get(group.getName(),ContentKey.NONE,GROUP_LAST_COMPLETED);
}"
61816,"private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        groupContentKey.updateIncrease(key,group.getName());
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(ContentKey key) throws InterruptedException {
  logger.trace(""String_Node_Str"",key,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      groupInProcess.add(group.getName(),key);
      try {
        makeTimedCall(createResponse(key));
        lastContentKey.updateIncrease(key,group.getName(),GROUP_LAST_COMPLETED);
        groupInProcess.remove(group.getName(),key);
        logger.trace(""String_Node_Str"",key,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + key + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61817,"public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  groupContentKey.initialize(group.getName(),group.getStartingKey());
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}","public Optional<Group> upsertGroup(Group group){
  logger.info(""String_Node_Str"" + group);
  group=group.withDefaults();
  groupValidator.validate(group);
  Optional<Group> existingGroup=getGroup(group.getName());
  if (existingGroup.isPresent()) {
    if (existingGroup.get().equals(group)) {
      return existingGroup;
    }
    throw new ConflictException(""String_Node_Str"");
  }
  lastContentKey.initialize(group.getName(),group.getStartingKey(),GroupCaller.GROUP_LAST_COMPLETED);
  dynamoGroupDao.upsertGroup(group);
  groupCallback.notifyWatchers();
  return existingGroup;
}"
61818,"@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,GroupContentKey groupContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.groupContentKey=groupContentKey;
}","@Inject public GroupService(DynamoGroupDao dynamoGroupDao,GroupValidator groupValidator,GroupCallback groupCallback,LastContentKey lastContentKey){
  this.dynamoGroupDao=dynamoGroupDao;
  this.groupValidator=groupValidator;
  this.groupCallback=groupCallback;
  this.lastContentKey=lastContentKey;
}"
61819,"@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
}","@Inject public V1ChannelReplicator(ChannelService channelService,ChannelUtils channelUtils,SequenceIteratorFactory sequenceIteratorFactory,SequenceFinder sequenceFinder,CuratorFramework curator,LastContentKey lastContentKey){
  this.channelService=channelService;
  this.sequenceIteratorFactory=sequenceIteratorFactory;
  this.channelUtils=channelUtils;
  this.sequenceFinder=sequenceFinder;
  this.curator=curator;
  this.lastContentKey=lastContentKey;
}"
61820,"private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  long lastReplicated=0;
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey key=content.getContentKey().get();
        if (key.getMillis() < lastReplicated) {
          key=new ContentKey(new DateTime(lastReplicated),key.getHash());
          content.setContentKey(key);
        }
        channelService.insert(channel.getName(),content);
        lastReplicated=key.getMillis();
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}","private void replicate(AtomicBoolean hasLeadership){
  long sequence=getLastUpdated();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  try {
    while (iterator.hasNext() && hasLeadership.get()) {
      Optional<Content> optionalContent=iterator.next();
      if (optionalContent.isPresent()) {
        Content content=optionalContent.get();
        ContentKey nextKey=content.getContentKey().get();
        ContentKey lastCompletedKey=lastContentKey.get(channel.getName(),nextKey,V1_REPLICATE_LAST_COMPLETED);
        if (nextKey.compareTo(lastCompletedKey) < 0) {
          nextKey=new ContentKey(lastCompletedKey.getTime(),nextKey.getHash());
          content.setContentKey(nextKey);
        }
        channelService.insert(channel.getName(),content);
        lastContentKey.updateIncrease(nextKey,channel.getName(),V1_REPLICATE_LAST_COMPLETED);
      }
 else {
        logger.warn(""String_Node_Str"" + channel.getUrl());
      }
    }
  }
  finally {
    logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str"");
    closeIterator();
  }
}"
61821,"@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostAddress();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",15);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",30);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",45);
  }
 else {
    this.offsetMinutes=5;
  }
  logger.info(""String_Node_Str"",this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}","@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  this.offsetMinutes=serverOffset(host);
  logger.info(""String_Node_Str"",host,this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}"
61822,"@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostAddress();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",15);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",30);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",45);
  }
 else {
    this.offsetMinutes=5;
  }
  logger.info(""String_Node_Str"",this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}","@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  this.offsetMinutes=serverOffset(host);
  logger.info(""String_Node_Str"",host,this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}"
61823,"@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostAddress();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",15);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",30);
  }
 else   if (host.contains(""String_Node_Str"")) {
    this.offsetMinutes=HubProperties.getProperty(""String_Node_Str"",45);
  }
 else {
    this.offsetMinutes=5;
  }
  logger.info(""String_Node_Str"",this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}","@Inject public S3WriterManager(ChannelService channelService,@Named(ContentDao.CACHE) ContentDao cacheContentDao,@Named(ContentDao.LONG_TERM) ContentDao longTermContentDao,S3WriteQueue s3WriteQueue){
  this.channelService=channelService;
  this.cacheContentDao=cacheContentDao;
  this.longTermContentDao=longTermContentDao;
  this.s3WriteQueue=s3WriteQueue;
  HubServices.register(new S3WriterManagerService(),HubServices.TYPE.POST_START,HubServices.TYPE.PRE_STOP);
  String host=""String_Node_Str"";
  try {
    host=InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  this.offsetMinutes=serverOffset(host);
  logger.info(""String_Node_Str"",host,this.offsetMinutes);
  queryThreadPool=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
  channelThreadPool=Executors.newFixedThreadPool(10,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build());
}"
61824,"public long getLastUpdated(){
  Collection<ContentKey> keys=channelService.getKeys(DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build());
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}","public long getLastUpdated(){
  DirectionQuery query=DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build();
  query.trace(false);
  Collection<ContentKey> keys=channelService.getKeys(query);
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}"
61825,"private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"" + duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}","private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"",duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}"
61826,"private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.minusHours(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.minusMinutes(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}","private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.isBefore(latestStableInChannel.minusHours(2))) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.isBefore(latestStableInChannel.minusMinutes(2))) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}"
61827,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"" + duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"",duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}"
61828,"public long getLastUpdated(){
  Collection<ContentKey> keys=channelService.getKeys(DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build());
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}","public long getLastUpdated(){
  DirectionQuery query=DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build();
  query.trace(false);
  Collection<ContentKey> keys=channelService.getKeys(query);
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}"
61829,"private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"" + duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}","private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"",duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}"
61830,"private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.minusHours(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.minusMinutes(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}","private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.isBefore(latestStableInChannel.minusHours(2))) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.isBefore(latestStableInChannel.minusMinutes(2))) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}"
61831,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"" + duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"",duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}"
61832,"private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"" + duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}","private void doWork(){
  while (!shouldExit.get()) {
    DateTime latestStableInChannel=getLatestStable();
    logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
    if (lastQueryTime.isBefore(latestStableInChannel)) {
      TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
      logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
      TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
      query.trace(false);
      addKeys(channelService.queryByTime(query));
      lastQueryTime=lastQueryTime.plus(unit.getDuration());
    }
 else {
      Duration duration=new Duration(latestStableInChannel,lastQueryTime);
      logger.trace(""String_Node_Str"",duration.getMillis());
      Sleeper.sleep(duration.getMillis());
    }
  }
}"
61833,"private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.minusHours(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.minusMinutes(2).isBefore(latestStableInChannel)) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}","private TimeUtil.Unit getStepUnit(DateTime latestStableInChannel){
  if (lastQueryTime.isBefore(latestStableInChannel.minusHours(2))) {
    return TimeUtil.Unit.HOURS;
  }
 else   if (lastQueryTime.isBefore(latestStableInChannel.minusMinutes(2))) {
    return TimeUtil.Unit.MINUTES;
  }
  return TimeUtil.Unit.SECONDS;
}"
61834,"public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"" + duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}","public void start(Group group,ContentKey startingKey){
  lastQueryTime=startingKey.getTime();
  channel=ChannelNameUtils.extractFromChannelUrl(group.getChannelUrl());
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + group.getName() + ""String_Node_Str"").build();
  ExecutorService executorService=Executors.newSingleThreadExecutor(factory);
  executorService.submit(new Runnable(){
    @Override public void run(){
      try {
        doWork();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + channel,e);
      }
    }
    private void doWork(){
      while (!shouldExit.get()) {
        DateTime latestStableInChannel=getLatestStable();
        logger.trace(""String_Node_Str"",channel,lastQueryTime,latestStableInChannel);
        if (lastQueryTime.isBefore(latestStableInChannel)) {
          TimeUtil.Unit unit=getStepUnit(latestStableInChannel);
          logger.trace(""String_Node_Str"",channel,unit,lastQueryTime);
          TimeQuery query=TimeQuery.builder().channelName(channel).startTime(lastQueryTime).unit(unit).build();
          query.trace(false);
          addKeys(channelService.queryByTime(query));
          lastQueryTime=lastQueryTime.plus(unit.getDuration());
        }
 else {
          Duration duration=new Duration(latestStableInChannel,lastQueryTime);
          logger.trace(""String_Node_Str"",duration.getMillis());
          Sleeper.sleep(duration.getMillis());
        }
      }
    }
    private void addKeys(    Collection<ContentKey> keys){
      logger.trace(""String_Node_Str"",channel,keys);
      try {
        for (        ContentKey key : keys) {
          if (key.compareTo(startingKey) > 0) {
            queue.put(key);
          }
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"" + e.getMessage());
        throw new RuntimeInterruptedException(e);
      }
    }
  }
);
}"
61835,"public long getLastUpdated(){
  Collection<ContentKey> keys=channelService.getKeys(DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build());
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}","public long getLastUpdated(){
  DirectionQuery query=DirectionQuery.builder().contentKey(new ContentKey()).ttlDays(historicalDays).count(1).channelName(channel.getName()).build();
  query.trace(false);
  Collection<ContentKey> keys=channelService.getKeys(query);
  if (!keys.isEmpty()) {
    ContentKey contentKey=keys.iterator().next();
    try {
      int sequence=Integer.parseInt(contentKey.getHash());
      return sequenceFinder.searchForLastUpdated(channel,sequence,historicalDays + 1,TimeUnit.DAYS);
    }
 catch (    NumberFormatException e) {
      logger.warn(""String_Node_Str"",contentKey);
    }
  }
  return sequenceFinder.searchForLastUpdated(channel,START_VALUE,historicalDays,TimeUnit.DAYS);
}"
61836,"@Override public SortedSet<ContentKey> query(DirectionQuery query){
  SortedSet<ContentKey> orderedKeys=new TreeSet<>();
  ContentKey startKey=query.getContentKey();
  DateTime startTime=startKey.getTime();
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (queryByTime.size() < query.getCount()) {
    startTime=query.isNext() ? startTime.plusDays(1) : startTime.minusDays(1);
    queryByTime.addAll(queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS));
  }
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return orderedKeys;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return orderedKeys;
}","private boolean query(DirectionQuery query,SortedSet<ContentKey> orderedKeys,ContentKey startKey,DateTime startTime){
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return true;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return false;
}"
61837,"public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
  query(channel,keys,3,3,false,start.plusHours(8));
}","public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
}"
61838,"@Override public SortedSet<ContentKey> query(DirectionQuery query){
  SortedSet<ContentKey> orderedKeys=new TreeSet<>();
  ContentKey startKey=query.getContentKey();
  DateTime startTime=startKey.getTime();
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (queryByTime.size() < query.getCount()) {
    startTime=query.isNext() ? startTime.plusDays(1) : startTime.minusDays(1);
    queryByTime.addAll(queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS));
  }
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return orderedKeys;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return orderedKeys;
}","private boolean query(DirectionQuery query,SortedSet<ContentKey> orderedKeys,ContentKey startKey,DateTime startTime){
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return true;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return false;
}"
61839,"public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
  query(channel,keys,3,3,false,start.plusHours(8));
}","public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
}"
61840,"@Override public SortedSet<ContentKey> query(DirectionQuery query){
  SortedSet<ContentKey> orderedKeys=new TreeSet<>();
  ContentKey startKey=query.getContentKey();
  DateTime startTime=startKey.getTime();
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (queryByTime.size() < query.getCount()) {
    startTime=query.isNext() ? startTime.plusDays(1) : startTime.minusDays(1);
    queryByTime.addAll(queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS));
  }
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return orderedKeys;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return orderedKeys;
}","private boolean query(DirectionQuery query,SortedSet<ContentKey> orderedKeys,ContentKey startKey,DateTime startTime){
  Collection<ContentKey> queryByTime=queryByTime(query.getChannelName(),startTime,TimeUtil.Unit.DAYS);
  if (query.isNext()) {
    DateTime stableTime=TimeUtil.time(query.isStable());
    for (    ContentKey contentKey : new TreeSet<>(queryByTime)) {
      if (contentKey.compareTo(startKey) > 0 && contentKey.getTime().isBefore(stableTime)) {
        orderedKeys.add(contentKey);
        if (orderedKeys.size() == query.getCount()) {
          return true;
        }
      }
    }
  }
 else {
    PreviousUtil.addToPrevious(query,queryByTime,orderedKeys);
  }
  return false;
}"
61841,"public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
  query(channel,keys,3,3,false,start.plusHours(8));
}","public void testDirectionQuery() throws Exception {
  String channel=""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(20);
  List<ContentKey> keys=new ArrayList<>();
  DateTime start=new DateTime(2014,11,14,22,27,DateTimeZone.UTC);
  for (int i=0; i < 7; i++) {
    ContentKey key=new ContentKey(start.plusHours(i),""String_Node_Str"" + i);
    keys.add(key);
    logger.info(""String_Node_Str"" + key);
    contentDao.write(channel,createContent(key));
  }
  logger.info(""String_Node_Str"",keys.size(),keys);
  query(channel,keys,20,7,true,start.minusMinutes(1));
  query(channel,keys,3,3,true,start.minusMinutes(1));
  query(channel,keys,20,7,false,start.plusHours(8));
}"
61842,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61843,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61844,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61845,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61846,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61847,"public String readKeysInBucket(String path){
  String seconds=SpokePathUtil.second(path);
  Collection<File> files=filesInBucket(spokeFilePathPart(path),seconds);
  String keys=""String_Node_Str"";
  int i=0;
  for (  File file : files) {
    keys+=spokeKeyFromFile(file);
    if (i < files.size() - 1) {
      keys+=""String_Node_Str"";
      i++;
    }
  }
  return keys;
}","public String readKeysInBucket(String path){
  Collection<String> keys=keysInBucket(path);
  return StringUtils.join(keys,""String_Node_Str"");
}"
61848,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<String> keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(7,keys.size());
  logger.info(""String_Node_Str"" + keys);
  assertTrue(keys.contains(path1));
  assertTrue(keys.contains(path2));
  assertTrue(keys.contains(path3));
  keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(5,keys.size());
}"
61849,"public String readKeysInBucket(String path){
  String seconds=SpokePathUtil.second(path);
  Collection<File> files=filesInBucket(spokeFilePathPart(path),seconds);
  String keys=""String_Node_Str"";
  int i=0;
  for (  File file : files) {
    keys+=spokeKeyFromFile(file);
    if (i < files.size() - 1) {
      keys+=""String_Node_Str"";
      i++;
    }
  }
  return keys;
}","public String readKeysInBucket(String path){
  Collection<String> keys=keysInBucket(path);
  return StringUtils.join(keys,""String_Node_Str"");
}"
61850,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<String> keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(7,keys.size());
  logger.info(""String_Node_Str"" + keys);
  assertTrue(keys.contains(path1));
  assertTrue(keys.contains(path2));
  assertTrue(keys.contains(path3));
  keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(5,keys.size());
}"
61851,"public String readKeysInBucket(String path){
  String seconds=SpokePathUtil.second(path);
  Collection<File> files=filesInBucket(spokeFilePathPart(path),seconds);
  String keys=""String_Node_Str"";
  int i=0;
  for (  File file : files) {
    keys+=spokeKeyFromFile(file);
    if (i < files.size() - 1) {
      keys+=""String_Node_Str"";
      i++;
    }
  }
  return keys;
}","public String readKeysInBucket(String path){
  Collection<String> keys=keysInBucket(path);
  return StringUtils.join(keys,""String_Node_Str"");
}"
61852,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<String> keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(7,keys.size());
  logger.info(""String_Node_Str"" + keys);
  assertTrue(keys.contains(path1));
  assertTrue(keys.contains(path2));
  assertTrue(keys.contains(path3));
  keys=spokeStore.keysInBucket(""String_Node_Str"");
  assertEquals(5,keys.size());
}"
61853,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61854,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61855,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61856,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61857,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61858,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61859,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61860,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61861,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61862,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61863,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61864,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61865,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61866,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61867,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61868,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61869,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61870,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61871,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61872,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61873,"File adjacentPath(File file,boolean findNext){
  String parentPath=file.getParent();
  File parentFolder=new File(parentPath).getAbsoluteFile();
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=nextPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=previousPath(parentFolder);
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return nextPath;
}","String adjacentPath(String keyPart,boolean findNext){
  File file=spokeFilePathPart(keyPart);
  File parentFolder=file.getParentFile();
  String parentKey=spokeKeyFromFile(parentFolder);
  File[] files=parentFolder.listFiles();
  if (files == null || files.length == 0)   return null;
  Arrays.sort(files);
  int i=Arrays.binarySearch(files,file);
  File nextPath;
  if (findNext) {
    if (i + 1 < files.length) {
      nextPath=files[i + 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(nextPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,0);
    }
  }
 else {
    if (i > 0) {
      nextPath=files[i - 1];
    }
 else {
      File adjacentParent=spokeFilePathPart(previousPath(parentKey));
      nextPath=nthFileInFolder(adjacentParent,-1);
    }
  }
  return spokeKeyFromFile(nextPath);
}"
61874,"Collection<File> adjacentNFiles(File path,int count,boolean next){
  path=next ? nextPath(path) : previousPath(path);
  if (path == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(path);
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  int i=Arrays.binarySearch(hourFileArray,path);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}","Collection<File> adjacentNFiles(File path,int count,boolean next){
  String key=spokeKeyFromFile(path);
  key=next ? nextPath(key) : previousPath(key);
  if (key == null)   return new ArrayList<>(0);
  File hourPath=SpokePathUtil.hourPathFolder(spokeFilePathPart(key));
  Collection<File> hourFiles=filesInBucket(hourPath,SpokePathUtil.second(path.getAbsolutePath()));
  File[] hourFileArray=new File[hourFiles.size()];
  hourFileArray=hourFiles.toArray(hourFileArray);
  Arrays.sort(hourFileArray);
  File[] adjacentFiles;
  File searchForThisFile=spokeFilePathPart(key);
  int i=Arrays.binarySearch(hourFileArray,searchForThisFile);
  if (next) {
    int nextCompliment=hourFileArray.length - i;
    int to=nextCompliment > count ? i + count : hourFileArray.length - 1;
    to=to == i ? to + 1 : to;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,i,to);
  }
 else {
    int from=i < count ? 0 : i - count;
    i=from == i ? i + 1 : i;
    adjacentFiles=Arrays.copyOfRange(hourFileArray,from,i);
  }
  Arrays.sort(adjacentFiles);
  ArrayList<File> result=new ArrayList<>();
  List<File> temp=Arrays.asList((File[])adjacentFiles);
  result.addAll(temp);
  if (adjacentFiles.length == count)   return result;
  File nextPath=next ? Iterables.getLast(result,null) : Iterables.getFirst(result,null);
  result.addAll(adjacentNFiles(nextPath,count - result.size(),next));
  return result;
}"
61875,"public String previousPath(String path){
  return spokeKeyFromFile(previousPath(spokeFilePathPart(path)));
}","String previousPath(String path){
  return adjacentPath(path,false);
}"
61876,"public String nextPath(String path){
  return spokeKeyFromFile(nextPath(spokeFilePathPart(path)));
}","String nextPath(String path){
  return adjacentPath(path,true);
}"
61877,"@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1File,spokeStore.nextPath(nextSecondFile));
  files=spokeStore.nextNKeys(path1File,4);
  assertEquals(4,files.size());
  files=spokeStore.previousNKeys(nexthour1File,3);
  assertEquals(3,files.size());
}","@Test public void testAdjacentPaths() throws Exception {
  String previousSecond=""String_Node_Str"";
  String path1=""String_Node_Str"";
  File path1File=makeFile(path1);
  String path2=""String_Node_Str"";
  File path2File=makeFile(path2);
  String path3=""String_Node_Str"";
  File path3File=makeFile(path3);
  String nextSecond=""String_Node_Str"";
  File nextSecondFile=makeFile(nextSecond);
  spokeStore.write(path1,BYTES);
  spokeStore.write(path2,BYTES);
  spokeStore.write(path3,BYTES);
  spokeStore.write(previousSecond,BYTES);
  spokeStore.write(nextSecond,BYTES);
  assertEquals(path3,spokeStore.nextPath(path2));
  assertEquals(path1,spokeStore.previousPath(path2));
  String previousMillisecond=""String_Node_Str"";
  spokeStore.write(previousMillisecond,BYTES);
  String nextMillisecond=""String_Node_Str"";
  spokeStore.write(nextMillisecond,BYTES);
  assertEquals(spokeStore.nextPath(path3),nextMillisecond);
  assertEquals(spokeStore.previousPath(path1),previousMillisecond);
  Collection<File> files=spokeStore.filesInBucket(new File(tempDir + ""String_Node_Str""),null);
  assertEquals(7,files.size());
  logger.info(""String_Node_Str"" + files);
  assertTrue(files.contains(path1File));
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  files=spokeStore.filesInBucket(spokeStore.spokeFilePathPart(""String_Node_Str""),""String_Node_Str"");
  assertEquals(5,files.size());
  files=spokeStore.nextNKeys(path1File,2);
  assertEquals(2,files.size());
  assertTrue(files.contains(path2File));
  assertTrue(files.contains(path3File));
  String nexthour1=""String_Node_Str"";
  spokeStore.write(nexthour1,BYTES);
  File nexthour1File=makeFile(nexthour1);
  assertEquals(nexthour1,spokeStore.nextPath(nextSecond));
}"
61878,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime lastTime=lastCompleted.get(getValuePath(),TimeUtil.now());
    Sleeper.sleep(getSleep(lastTime,TimeUtil.now()));
    DateTime nextTime=lastTime.plusMinutes(1);
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime nextTime=lastCompleted.get(getValuePath(),TimeUtil.now()).plusMinutes(1);
    Sleeper.sleep(getSleep(nextTime,TimeUtil.now()));
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}"
61879,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime lastTime=lastCompleted.get(getValuePath(),TimeUtil.now());
    Sleeper.sleep(getSleep(lastTime,TimeUtil.now()));
    DateTime nextTime=lastTime.plusMinutes(1);
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime nextTime=lastCompleted.get(getValuePath(),TimeUtil.now()).plusMinutes(1);
    Sleeper.sleep(getSleep(nextTime,TimeUtil.now()));
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}"
61880,"@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime lastTime=lastCompleted.get(getValuePath(),TimeUtil.now());
    Sleeper.sleep(getSleep(lastTime,TimeUtil.now()));
    DateTime nextTime=lastTime.plusMinutes(1);
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}","@Override public void takeLeadership(AtomicBoolean hasLeadership){
  while (hasLeadership.get()) {
    DateTime nextTime=lastCompleted.get(getValuePath(),TimeUtil.now()).plusMinutes(1);
    Sleeper.sleep(getSleep(nextTime,TimeUtil.now()));
    logger.debug(""String_Node_Str"",nextTime);
    Collection<ContentKey> contentKeys=cacheContentDao.queryByTime(channel,nextTime,TimeUtil.Unit.MINUTES);
    for (    ContentKey contentKey : contentKeys) {
      s3WriteQueue.add(new ChannelContentKey(channel,contentKey));
    }
    lastCompleted.update(getValuePath(),nextTime);
  }
}"
61881,"@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"",newName=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}","@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}"
61882,"@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"",newName=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}","@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}"
61883,"@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"",newName=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}","@Path(""String_Node_Str"") @EventTimed(name=""String_Node_Str"") @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @GET public Response getMillis(@PathParam(""String_Node_Str"") String channelName,@PathParam(""String_Node_Str"") int year,@PathParam(""String_Node_Str"") int month,@PathParam(""String_Node_Str"") int day,@PathParam(""String_Node_Str"") int hour,@PathParam(""String_Node_Str"") int minute,@PathParam(""String_Node_Str"") int second,@PathParam(""String_Node_Str"") int millis){
  DateTime startTime=new DateTime(year,month,day,hour,minute,second,millis,DateTimeZone.UTC);
  Collection<ContentKey> keys=channelService.getKeys(channelName,startTime,startTime);
  return getResponse(channelName,TimeUtil.millis(startTime.minusMillis(1)),TimeUtil.millis(startTime.plusMillis(1)),keys);
}"
61884,"private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}","private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}"
61885,"@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}","@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}"
61886,"private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.debug(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}","private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.trace(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}"
61887,"private void send(final long next) throws InterruptedException {
  logger.debug(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.debug(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(final long next) throws InterruptedException {
  logger.trace(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.trace(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61888,"private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}","private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}"
61889,"@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}","@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}"
61890,"private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.debug(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}","private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.trace(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}"
61891,"private void send(final long next) throws InterruptedException {
  logger.debug(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.debug(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(final long next) throws InterruptedException {
  logger.trace(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.trace(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61892,"private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}","private void makeCall(final ObjectNode response) throws ExecutionException, RetryException {
  retryer.call(new Callable<ClientResponse>(){
    @Override public ClientResponse call() throws Exception {
      if (!hasLeadership.get()) {
        logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
        return null;
      }
      logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
      return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
    }
  }
);
}"
61893,"@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}","@Override public ClientResponse call() throws Exception {
  if (!hasLeadership.get()) {
    logger.debug(""String_Node_Str"",group.getCallbackUrl(),group.getName(),response);
    return null;
  }
  logger.debug(""String_Node_Str"",group.getCallbackUrl(),response);
  return client.resource(group.getCallbackUrl()).type(MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class,response.toString());
}"
61894,"private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.debug(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}","private long sendInProcess(long lastCompletedId) throws InterruptedException {
  Set<Long> inProcessSet=inProcess.getSet();
  logger.trace(""String_Node_Str"",inProcessSet,group.getName());
  for (  Long toSend : inProcessSet) {
    if (toSend < lastCompletedId) {
      send(toSend);
    }
 else {
      inProcess.remove(toSend);
    }
  }
  return lastCompletedId;
}"
61895,"private void send(final long next) throws InterruptedException {
  logger.debug(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.debug(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}","private void send(final long next) throws InterruptedException {
  logger.trace(""String_Node_Str"",next,group.getName());
  semaphore.acquire();
  executorService.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      inProcess.add(next);
      try {
        makeTimedCall(createResponse(next));
        lastCompleted.updateIncrease(next,getValuePath());
        inProcess.remove(next);
        logger.trace(""String_Node_Str"",next,group.getName());
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"" + next + ""String_Node_Str""+ group.getName(),e);
      }
 finally {
        semaphore.release();
      }
      return null;
    }
  }
);
}"
61896,"public Builder withTags(Collection<String> tags){
  this.tags.addAll(tags);
  return this;
}","public Builder withTags(Collection<String> tags){
  this.tags.clear();
  this.tags.addAll(tags);
  return this;
}"
61897,"@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration newConfig=ChannelConfiguration.builder().withChannelConfiguration(oldConfig).withUpdateConfig(ChannelConfiguration.fromJson(json)).build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}","@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration.Builder builder=ChannelConfiguration.builder().withChannelConfiguration(oldConfig);
  JsonNode rootNode=mapper.readTree(json);
  if (rootNode.has(""String_Node_Str"")) {
    builder.withDescription(rootNode.get(""String_Node_Str"").asText());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlDays(rootNode.get(""String_Node_Str"").asLong());
  }
 else   if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlMillis(rootNode.get(""String_Node_Str"").asLong());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withContentKiloBytes(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withPeakRequestRate(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    Set<String> tags=new HashSet<>();
    JsonNode tagsNode=rootNode.get(""String_Node_Str"");
    for (    JsonNode tagNode : tagsNode) {
      tags.add(tagNode.asText());
    }
    builder.withTags(tags);
  }
  ChannelConfiguration newConfig=builder.build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}"
61898,"public Builder withTags(Collection<String> tags){
  this.tags.addAll(tags);
  return this;
}","public Builder withTags(Collection<String> tags){
  this.tags.clear();
  this.tags.addAll(tags);
  return this;
}"
61899,"@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration newConfig=ChannelConfiguration.builder().withChannelConfiguration(oldConfig).withUpdateConfig(ChannelConfiguration.fromJson(json)).build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}","@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration.Builder builder=ChannelConfiguration.builder().withChannelConfiguration(oldConfig);
  JsonNode rootNode=mapper.readTree(json);
  if (rootNode.has(""String_Node_Str"")) {
    builder.withDescription(rootNode.get(""String_Node_Str"").asText());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlDays(rootNode.get(""String_Node_Str"").asLong());
  }
 else   if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlMillis(rootNode.get(""String_Node_Str"").asLong());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withContentKiloBytes(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withPeakRequestRate(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    Set<String> tags=new HashSet<>();
    JsonNode tagsNode=rootNode.get(""String_Node_Str"");
    for (    JsonNode tagNode : tagsNode) {
      tags.add(tagNode.asText());
    }
    builder.withTags(tags);
  }
  ChannelConfiguration newConfig=builder.build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}"
61900,"public Builder withTags(Collection<String> tags){
  this.tags.addAll(tags);
  return this;
}","public Builder withTags(Collection<String> tags){
  this.tags.clear();
  this.tags.addAll(tags);
  return this;
}"
61901,"@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration newConfig=ChannelConfiguration.builder().withChannelConfiguration(oldConfig).withUpdateConfig(ChannelConfiguration.fromJson(json)).build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}","@PATCH @Timed @ExceptionMetered @PerChannelTimed(operationName=""String_Node_Str"",channelNameParameter=""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response updateMetadata(@PathParam(""String_Node_Str"") String channelName,String json) throws Exception {
  if (noSuchChannel(channelName)) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  ChannelConfiguration oldConfig=channelService.getChannelConfiguration(channelName);
  ChannelConfiguration.Builder builder=ChannelConfiguration.builder().withChannelConfiguration(oldConfig);
  JsonNode rootNode=mapper.readTree(json);
  if (rootNode.has(""String_Node_Str"")) {
    builder.withDescription(rootNode.get(""String_Node_Str"").asText());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlDays(rootNode.get(""String_Node_Str"").asLong());
  }
 else   if (rootNode.has(""String_Node_Str"")) {
    builder.withTtlMillis(rootNode.get(""String_Node_Str"").asLong());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withContentKiloBytes(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    builder.withPeakRequestRate(rootNode.get(""String_Node_Str"").asInt());
  }
  if (rootNode.has(""String_Node_Str"")) {
    Set<String> tags=new HashSet<>();
    JsonNode tagsNode=rootNode.get(""String_Node_Str"");
    for (    JsonNode tagNode : tagsNode) {
      tags.add(tagNode.asText());
    }
    builder.withTags(tags);
  }
  ChannelConfiguration newConfig=builder.build();
  newConfig=channelService.updateChannel(newConfig);
  URI channelUri=linkBuilder.buildChannelUri(newConfig,uriInfo);
  Linked<ChannelConfiguration> linked=linkBuilder.buildChannelLinks(newConfig,channelUri);
  return Response.ok(channelUri).entity(linked).build();
}"
61902,"@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    Collection<ReplicationDomain> domains=replicationDao.getDomains(false);
    for (    ReplicationDomain domain : domains) {
      if (domain.getExcludeExcept().contains(channelName)) {
        throw new ReplicatingChannelException(channelName + ""String_Node_Str"");
      }
    }
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}","@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    replicationValidator.checkIfReplicating(channelName);
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}"
61903,"@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationDao replicationDao){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationDao=replicationDao;
}","@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationValidator replicationValidator){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationValidator=replicationValidator;
}"
61904,"public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  this.description=builder.description;
}","public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  if (builder.description == null) {
    this.description=""String_Node_Str"";
  }
 else {
    this.description=builder.description;
  }
}"
61905,"void create(String domain,ReplicationDomain config);",void create(ReplicationDomain domain);
61906,"@Override public void create(final String domain,final ReplicationDomain config){
  if (!config.isValid()) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      config.setDomain(domain);
      replicationDao.upsert(config);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}","@Override public void create(final ReplicationDomain domain){
  replicationValidator.validateDomain(domain);
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      replicationDao.upsert(domain);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}"
61907,"@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
}","@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator,ReplicationValidator replicationValidator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
  this.replicationValidator=replicationValidator;
}"
61908,"@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationService.create(domain,replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationDomain.setDomain(domain);
  replicationService.create(replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}"
61909,"@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    Collection<ReplicationDomain> domains=replicationDao.getDomains(false);
    for (    ReplicationDomain domain : domains) {
      if (domain.getExcludeExcept().contains(channelName)) {
        throw new ReplicatingChannelException(channelName + ""String_Node_Str"");
      }
    }
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}","@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    replicationValidator.checkIfReplicating(channelName);
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}"
61910,"@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationDao replicationDao){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationDao=replicationDao;
}","@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationValidator replicationValidator){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationValidator=replicationValidator;
}"
61911,"public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  this.description=builder.description;
}","public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  if (builder.description == null) {
    this.description=""String_Node_Str"";
  }
 else {
    this.description=builder.description;
  }
}"
61912,"void create(String domain,ReplicationDomain config);",void create(ReplicationDomain domain);
61913,"@Override public void create(final String domain,final ReplicationDomain config){
  if (!config.isValid()) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      config.setDomain(domain);
      replicationDao.upsert(config);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}","@Override public void create(final ReplicationDomain domain){
  replicationValidator.validateDomain(domain);
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      replicationDao.upsert(domain);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}"
61914,"@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
}","@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator,ReplicationValidator replicationValidator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
  this.replicationValidator=replicationValidator;
}"
61915,"@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationService.create(domain,replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationDomain.setDomain(domain);
  replicationService.create(replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}"
61916,"@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (!content.getContentKey().isPresent()) {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}","@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (content.getContentKey().isPresent()) {
    keyGenerator.setLatest(channelName,content.getContentKey().get());
  }
 else {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}"
61917,"@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    Collection<ReplicationDomain> domains=replicationDao.getDomains(false);
    for (    ReplicationDomain domain : domains) {
      if (domain.getExcludeExcept().contains(channelName)) {
        throw new ReplicatingChannelException(channelName + ""String_Node_Str"");
      }
    }
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}","@Override public InsertedContentKey insert(String channelName,Content content){
  if (!content.getContentKey().isPresent()) {
    replicationValidator.checkIfReplicating(channelName);
  }
  ChannelConfiguration configuration=channelConfigurationDao.getChannelConfiguration(channelName);
  return getContentService(channelName).insert(configuration,content);
}"
61918,"@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationDao replicationDao){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationDao=replicationDao;
}","@Inject public ChannelServiceImpl(ContentServiceFinder contentServiceFinder,ChannelConfigurationDao channelConfigurationDao,CreateChannelValidator createChannelValidator,TimeIndexProcessor timeIndexProcessor,ChannelReplicator channelReplicator,ReplicationValidator replicationValidator){
  this.contentServiceFinder=contentServiceFinder;
  this.channelConfigurationDao=channelConfigurationDao;
  this.createChannelValidator=createChannelValidator;
  this.timeIndexProcessor=timeIndexProcessor;
  this.channelReplicator=channelReplicator;
  this.replicationValidator=replicationValidator;
}"
61919,"public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  this.description=builder.description;
}","public ChannelConfiguration(Builder builder){
  this.name=builder.name;
  this.creationDate=builder.creationDate;
  this.type=builder.type;
  this.contentSizeKB=builder.contentSizeKB;
  this.peakRequestRateSeconds=builder.peakRequestRateSeconds;
  this.ttlDays=builder.ttlDays;
  if (builder.ttlMillis == null) {
    this.ttlMillis=TimeUnit.DAYS.toMillis(ttlDays);
  }
 else {
    this.ttlMillis=builder.ttlMillis;
  }
  if (builder.description == null) {
    this.description=""String_Node_Str"";
  }
 else {
    this.description=builder.description;
  }
}"
61920,"void create(String domain,ReplicationDomain config);",void create(ReplicationDomain domain);
61921,"@Override public void create(final String domain,final ReplicationDomain config){
  if (!config.isValid()) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      config.setDomain(domain);
      replicationDao.upsert(config);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}","@Override public void create(final ReplicationDomain domain){
  replicationValidator.validateDomain(domain);
  curatorLock.runWithLock(new Lockable(){
    @Override public void runWithLock() throws Exception {
      replicationDao.upsert(domain);
    }
  }
,LOCK_PATH,1,TimeUnit.MINUTES);
  notifyWatchers();
}"
61922,"@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
}","@Inject public ReplicationServiceImpl(ReplicationDao replicationDao,ChannelService channelService,ChannelUtils channelUtils,CuratorLock curatorLock,CuratorFramework curator,Replicator replicator,ReplicationValidator replicationValidator){
  this.replicationDao=replicationDao;
  this.channelService=channelService;
  this.channelUtils=channelUtils;
  this.curatorLock=curatorLock;
  this.curator=curator;
  this.replicator=replicator;
  this.replicationValidator=replicationValidator;
}"
61923,"@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationService.create(domain,replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response putDomain(@PathParam(""String_Node_Str"") String domain,ReplicationDomain replicationDomain,@HeaderParam(""String_Node_Str"") String host){
  logger.info(""String_Node_Str"" + domain + ""String_Node_Str""+ replicationDomain+ ""String_Node_Str""+ host);
  if (domain.equalsIgnoreCase(host)) {
    return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
  }
  replicationDomain.setDomain(domain);
  replicationService.create(replicationDomain);
  return Response.created(uriInfo.getRequestUri()).entity(replicationDomain).build();
}"
61924,"@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (!content.getContentKey().isPresent()) {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}","@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (content.getContentKey().isPresent()) {
    keyGenerator.setLatest(channelName,content.getContentKey().get());
  }
 else {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}"
61925,"@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (!content.getContentKey().isPresent()) {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}","@Override public InsertedContentKey write(String channelName,Content content,long ttlDays){
  if (content.getContentKey().isPresent()) {
    keyGenerator.setLatest(channelName,content.getContentKey().get());
  }
 else {
    content.setContentKey(keyGenerator.newKey(channelName));
  }
  ContentKey key=content.getContentKey().get();
  DateTime dateTime=new DateTime(content.getMillis());
  writeS3(channelName,content,key);
  writeIndex(channelName,dateTime,key);
  return new InsertedContentKey(key,dateTime.toDate());
}"
61926,"private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    channelService.insert(channel.getName(),iterator.next());
  }
}","private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    Optional<Content> optionalContent=iterator.next();
    if (optionalContent.isPresent()) {
      channelService.insert(channel.getName(),optionalContent.get());
    }
  }
}"
61927,"public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.debug(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}","public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}"
61928,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Optional<Content> next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  if (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional;
}"
61929,"@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channelUrl,throwable);
  }
  exit();
}","@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channel,throwable);
  }
  exit();
}"
61930,"@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason);
  exit();
}","@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason + ""String_Node_Str""+ channel);
  exit();
}"
61931,"@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
    }
    signal();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channelUrl,e);
  }
}","@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",channel,sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
      signal();
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channel,e);
  }
}"
61932,"public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int i=0;
  int maxRetries=3;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  while (i < maxRetries) {
    i++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,i);
        if (i >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),i);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * i);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}","public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int maxRetries=5;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  int attempt=0;
  while (attempt < maxRetries) {
    attempt++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,attempt);
        if (attempt >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),attempt);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * 2 ^ attempt);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}"
61933,"@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(content).thenReturn(content).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}","@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  Optional<Content> optional=Optional.of(content);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(optional).thenReturn(optional).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}"
61934,"public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
    Content next=iterator.next();
  }
  logger.info(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
  }
  logger.info(""String_Node_Str"");
}"
61935,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next().get();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61936,"private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    channelService.insert(channel.getName(),iterator.next());
  }
}","private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    Optional<Content> optionalContent=iterator.next();
    if (optionalContent.isPresent()) {
      channelService.insert(channel.getName(),optionalContent.get());
    }
  }
}"
61937,"public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.debug(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}","public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}"
61938,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Optional<Content> next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  if (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional;
}"
61939,"@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channelUrl,throwable);
  }
  exit();
}","@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channel,throwable);
  }
  exit();
}"
61940,"@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason);
  exit();
}","@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason + ""String_Node_Str""+ channel);
  exit();
}"
61941,"@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
    }
    signal();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channelUrl,e);
  }
}","@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",channel,sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
      signal();
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channel,e);
  }
}"
61942,"public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int i=0;
  int maxRetries=3;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  while (i < maxRetries) {
    i++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,i);
        if (i >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),i);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * i);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}","public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int maxRetries=5;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  int attempt=0;
  while (attempt < maxRetries) {
    attempt++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,attempt);
        if (attempt >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),attempt);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * 2 ^ attempt);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}"
61943,"@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(content).thenReturn(content).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}","@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  Optional<Content> optional=Optional.of(content);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(optional).thenReturn(optional).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}"
61944,"public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
    Content next=iterator.next();
  }
  logger.info(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
  }
  logger.info(""String_Node_Str"");
}"
61945,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next().get();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61946,"private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    channelService.insert(channel.getName(),iterator.next());
  }
}","private void replicate(){
  long sequence=getStartingSequence();
  if (sequence == ChannelUtils.NOT_FOUND) {
    return;
  }
  logger.info(""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ sequence);
  iterator=sequenceIteratorFactory.create(sequence,channel);
  while (iterator.hasNext() && curatorLock.shouldKeepWorking()) {
    Optional<Content> optionalContent=iterator.next();
    if (optionalContent.isPresent()) {
      channelService.insert(channel.getName(),optionalContent.get());
    }
  }
}"
61947,"public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.debug(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}","public Optional<Long> getLatestSequence(String channelUrl){
  channelUrl=appendSlash(channelUrl);
  ClientResponse response=noRedirectsClient.resource(channelUrl + ""String_Node_Str"").accept(MediaType.WILDCARD_TYPE).head();
  if (response.getStatus() != Response.Status.SEE_OTHER.getStatusCode()) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ response);
    return Optional.absent();
  }
  String location=response.getLocation().toString();
  String substring=location.substring(channelUrl.length());
  return Optional.of(Long.parseLong(substring));
}"
61948,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Optional<Content> next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  if (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional;
}"
61949,"@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channelUrl,throwable);
  }
  exit();
}","@OnError public void onError(Throwable throwable){
  if (throwable.getClass().isAssignableFrom(SocketTimeoutException.class) || throwable.getClass().isAssignableFrom(EOFException.class)) {
    logger.info(""String_Node_Str"" + channel + ""String_Node_Str""+ throwable.getMessage());
  }
 else {
    logger.warn(""String_Node_Str"" + channel,throwable);
  }
  exit();
}"
61950,"@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason);
  exit();
}","@OnClose public void onClose(CloseReason reason){
  logger.info(""String_Node_Str"" + reason + ""String_Node_Str""+ channel);
  exit();
}"
61951,"@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
    }
    signal();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channelUrl,e);
  }
}","@OnMessage public void onMessage(String message){
  try {
    long sequence=Long.parseLong(StringUtils.substringAfterLast(message,""String_Node_Str""));
    logger.debug(""String_Node_Str"",channel,sequence);
    if (sequence > latest.get()) {
      latest.set(sequence);
      signal();
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + message + ""String_Node_Str""+ channel,e);
  }
}"
61952,"public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int i=0;
  int maxRetries=3;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  while (i < maxRetries) {
    i++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,i);
        if (i >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),i);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * i);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}","public ClientResponse handle(ClientRequest clientRequest) throws ClientHandlerException {
  int maxRetries=5;
  int sleep=1000;
  ClientHandlerException lastCause=null;
  int attempt=0;
  while (attempt < maxRetries) {
    attempt++;
    try {
      ClientResponse response=getNext().handle(clientRequest);
      if (response.getStatus() >= 500) {
        logger.info(""String_Node_Str"",response,attempt);
        if (attempt >= maxRetries) {
          return response;
        }
      }
 else {
        return response;
      }
    }
 catch (    ClientHandlerException e) {
      if (e.getCause() == null) {
        throw e;
      }
      if (UnknownHostException.class.isAssignableFrom(e.getCause().getClass())) {
        throw e;
      }
      lastCause=e;
      logger.info(""String_Node_Str"",clientRequest.getURI().toString(),attempt);
      logger.debug(clientRequest.getURI().toString() + ""String_Node_Str"",e);
      Sleeper.sleep(sleep * 2 ^ attempt);
    }
  }
  String msg=""String_Node_Str"" + maxRetries + ""String_Node_Str""+ clientRequest.getURI();
  logger.warn(msg);
  throw lastCause;
}"
61953,"@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(content).thenReturn(content).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}","@Test public void testLifeCycleNew() throws Exception {
  Content content=mock(Content.class);
  Optional<Content> optional=Optional.of(content);
  when(sequenceIterator.hasNext()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(sequenceIterator.next()).thenReturn(optional).thenReturn(optional).thenReturn(null);
  when(channelUtils.getLatestSequence(URL)).thenReturn(Optional.<Long>absent());
  replicator.verifyRemoteChannel();
  replicator.runWithLock();
  verify(channelService).createChannel(configuration);
  verify(channelService,new Times(2)).insert(CHANNEL,content);
}"
61954,"public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
    Content next=iterator.next();
  }
  logger.info(""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  Client noRedirects=GuiceContext.HubCommonModule.buildJerseyClientNoRedirects();
  Client follows=GuiceContext.HubCommonModule.buildJerseyClient();
  ChannelUtils channelUtils=new ChannelUtils(noRedirects,follows);
  ClientContainer container=new ClientContainer();
  container.start();
  MetricRegistry metricRegistry=new MetricRegistry();
  ConsoleReporter reporter=ConsoleReporter.forRegistry(metricRegistry).build();
  reporter.start(1,TimeUnit.SECONDS);
  Channel testy10=new Channel(""String_Node_Str"",""String_Node_Str"");
  SequenceIterator iterator=new SequenceIterator(700457,channelUtils,testy10,container,metricRegistry);
  while (iterator.hasNext()) {
  }
  logger.info(""String_Node_Str"");
}"
61955,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next().get();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61956,"@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  for (int i=3; i < 10; i++) {
    String data=""String_Node_Str"" + i;
    insert(data);
    check(iterator,data);
  }
}","@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  int end=insertAndCheck(iterator,3);
  iterator.exit();
  iterator=factory.create(iterator.getCurrent(),channel);
  insertAndCheck(iterator,end);
}"
61957,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61958,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61959,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61960,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61961,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61962,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61963,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61964,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61965,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61966,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61967,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61968,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61969,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61970,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61971,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61972,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61973,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61974,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61975,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61976,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61977,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61978,"@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  for (int i=3; i < 10; i++) {
    String data=""String_Node_Str"" + i;
    insert(data);
    check(iterator,data);
  }
}","@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  int end=insertAndCheck(iterator,3);
  iterator.exit();
  iterator=factory.create(iterator.getCurrent(),channel);
  insertAndCheck(iterator,end);
}"
61979,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61980,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61981,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61982,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61983,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61984,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61985,"@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  for (int i=3; i < 10; i++) {
    String data=""String_Node_Str"" + i;
    insert(data);
    check(iterator,data);
  }
}","@Test public void testSimple() throws Exception {
  Channel channel=new Channel(channelName,channelUrl);
  SequenceIterator iterator=factory.create(999,channel);
  check(iterator,""String_Node_Str"");
  check(iterator,""String_Node_Str"");
  int end=insertAndCheck(iterator,3);
  iterator.exit();
  iterator=factory.create(iterator.getCurrent(),channel);
  insertAndCheck(iterator,end);
}"
61986,"private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}","private void check(SequenceIterator iterator,String data){
  assertTrue(iterator.hasNext());
  Content content=iterator.next();
  logger.debug(""String_Node_Str"" + new String(content.getData()) + ""String_Node_Str""+ content.getContentKey().get());
  assertNotNull(content);
  assertArrayEquals(data.getBytes(),content.getData());
}"
61987,"@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}","@VisibleForTesting boolean verifyRemoteChannel(){
  try {
    Optional<ChannelConfiguration> optionalConfig=channelUtils.getConfiguration(channel.getUrl());
    if (!optionalConfig.isPresent()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    configuration=optionalConfig.get();
    logger.debug(""String_Node_Str"" + configuration);
    if (!configuration.isSequence()) {
      message=""String_Node_Str"" + channel.getUrl();
      logger.warn(message);
      return false;
    }
    return true;
  }
 catch (  IOException e) {
    message=""String_Node_Str"" + channel.getUrl() + ""String_Node_Str""+ e.getMessage();
    logger.warn(message);
    return false;
  }
}"
61988,"private ClientResponse getResponse(String url){
  return noRedirectsClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}","private ClientResponse getResponse(String url){
  return followClient.resource(url).accept(MediaType.WILDCARD_TYPE).header(HttpHeaders.ACCEPT_ENCODING,""String_Node_Str"").get(ClientResponse.class);
}"
61989,"public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.debug(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}","public Optional<Content> getContent(String channelUrl,long sequence){
  ClientResponse response=getResponse(appendSlash(channelUrl) + sequence);
  if (response.getStatus() != Response.Status.OK.getStatusCode()) {
    logger.info(""String_Node_Str"" + response);
    return Optional.absent();
  }
  Content content=Content.builder().withContentKey(new SequenceContentKey(sequence)).withContentType(response.getHeaders().getFirst(HttpHeaders.CONTENT_TYPE)).withContentLanguage(response.getHeaders().getFirst(Headers.LANGUAGE)).withData(response.getEntity(byte[].class)).withMillis(getCreationDate(response).getMillis()).build();
  return Optional.of(content);
}"
61990,"@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}","@Override public Content next(){
  Optional<Content> optional=channelUtils.getContent(channelUrl,current);
  while (!optional.isPresent()) {
    logger.warn(""String_Node_Str"" + channelUrl + ""String_Node_Str""+ current);
    current++;
    optional=channelUtils.getContent(channelUrl,current);
  }
  return optional.get();
}"
61991,"private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}","private void startMetrics(){
  String name=""String_Node_Str"" + URI.create(channelUrl).getHost() + ""String_Node_Str""+ channel.getName()+ ""String_Node_Str"";
  metricRegistry.remove(name);
  metricRegistry.register(name,new Gauge<Long>(){
    @Override public Long getValue(){
      long delta=getDelta();
      logger.info(""String_Node_Str"" + delta);
      return delta;
    }
  }
);
}"
61992,"@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
).start();
}","@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  threadPoolExecutor.execute(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
);
}"
61993,"@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
).start();
}","@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  threadPoolExecutor.execute(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
);
}"
61994,"@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
).start();
}","@Override public void publish(final String channelName,final ContentKey key){
  final MessageListener<String> listener=messageListenerMap.get(channelName);
  if (listener == null) {
    return;
  }
  threadPoolExecutor.execute(new Runnable(){
    @Override public void run(){
      Message<String> message=new Message<>(channelName,key.keyToString(),System.currentTimeMillis(),null);
      listener.onMessage(message);
    }
  }
);
}"
61995,"private int getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return 0;
  }
  return (int)(channelConfiguration.getTtlMillis() / 1000);
}","private Optional<Integer> getTtlSeconds(String channelName){
  ChannelConfiguration channelConfiguration=getChannelConfiguration(channelName);
  if (null == channelConfiguration) {
    return Optional.absent();
  }
  Long ttlMillis=channelConfiguration.getTtlMillis();
  return ttlMillis == null ? Optional.<Integer>absent() : Optional.of((int)(ttlMillis / 1000));
}"
61996,"@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  int ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}","@Override public ValueInsertionResult insert(String channelName,Optional<String> contentType,Optional<String> contentLanguage,byte[] data){
  logger.debug(""String_Node_Str"" + data.length + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ channelName);
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,contentLanguage,data,timeProvider.getMillis());
  Optional<Integer> ttlSeconds=getTtlSeconds(channelName);
  ValueInsertionResult result=cassandraValueWriter.write(channelName,value,ttlSeconds);
  DataHubKey insertedKey=result.getKey();
  setLastUpdateKey(channelName,insertedKey);
  if (insertedKey.isNewRow()) {
    channelsCollection.updateLatestRowKey(channelName,result.getRowKey());
  }
  return result;
}"
61997,"public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,int ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=hector.createColumn(columnName,columnValue,ttlSeconds,StringSerializer.get(),DataHubCompositeValueSerializer.get());
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}","public ValueInsertionResult write(String channelName,DataHubCompositeValue columnValue,Optional<Integer> ttlSeconds){
  Mutator<String> mutator=connector.buildMutator(StringSerializer.get());
  DataHubKey key=keyGenerator.newKey(channelName);
  String columnName=keyRenderer.keyToString(key);
  HColumn<String,DataHubCompositeValue> column=createColumn(columnValue,ttlSeconds,columnName);
  String rowKey=rowKeyStrategy.buildKey(channelName,key);
  try {
    mutator.insert(rowKey,DATA_HUB_COLUMN_FAMILY_NAME,column);
  }
 catch (  HInvalidRequestException e) {
    throw maybePromoteToNoSuchChannel(e,channelName);
  }
  return new ValueInsertionResult(key,rowKey,timeProvider.getDate());
}"
61998,"@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert_lastUpdateCacheMiss() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  long millis=90210L;
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(timeProvider.getMillis()).thenReturn(millis);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,null,null,timeProvider){
    @Override public Optional<DataHubKey> findLastUpdatedKey(    String channelName){
      return Optional.absent();
    }
  }
;
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
61999,"@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,0)).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}","@Test public void testInsert() throws Exception {
  DataHubKey key=new DataHubKey((short)1003);
  String channelName=""String_Node_Str"";
  byte[] data=""String_Node_Str"".getBytes();
  long millis=90210L;
  Optional<String> contentType=Optional.of(""String_Node_Str"");
  DataHubCompositeValue value=new DataHubCompositeValue(contentType,Optional.<String>absent(),data,millis);
  ValueInsertionResult expected=new ValueInsertionResult(key,null,null);
  DataHubKey lastUpdateKey=new DataHubKey((short)1000);
  CassandraChannelsCollection channelsCollection=mock(CassandraChannelsCollection.class);
  CassandraValueWriter inserter=mock(CassandraValueWriter.class);
  CassandraValueReader reader=mock(CassandraValueReader.class);
  ConcurrentMap<String,DataHubKey> lastUpdatedMap=mock(ConcurrentMap.class);
  TimeProvider timeProvider=mock(TimeProvider.class);
  LastKeyFinder lastUpdatedKeyFinder=mock(LastKeyFinder.class);
  ChannelConfiguration channelConfig=mock(ChannelConfiguration.class);
  when(channelsCollection.getChannelConfiguration(channelName)).thenReturn(channelConfig);
  when(channelConfig.getTtlMillis()).thenReturn(millis);
  when(timeProvider.getMillis()).thenReturn(millis);
  when(inserter.write(channelName,value,Optional.of((int)millis / 1000))).thenReturn(new ValueInsertionResult(key,null,null));
  when(lastUpdatedKeyFinder.queryForLatestKey(channelName)).thenReturn(lastUpdateKey);
  CassandraChannelDao testClass=new CassandraChannelDao(channelsCollection,inserter,reader,lastUpdatedMap,lastUpdatedKeyFinder,null,timeProvider);
  ValueInsertionResult result=testClass.insert(channelName,contentType,Optional.<String>absent(),data);
  assertEquals(expected,result);
}"
62000,"@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,0);
}","@Test(expected=HInvalidRequestException.class) public void testOtherExceptionMessages() throws Exception {
  DataHubCompositeValue value=new DataHubCompositeValue(CONTENT_TYPE,CONTENT_LANGUAGE,DATA,0L);
  String columnName=keyRenderer.keyToString(DATA_HUB_KEY);
  when(hector.createColumn(columnName,value,0,StringSerializer.get(),DataHubCompositeValueSerializer.get())).thenReturn(column);
  when(rowStrategy.buildKey(CHANNEL_NAME,DATA_HUB_KEY)).thenReturn(ROW_KEY);
  when(keyGenerator.newKey(CHANNEL_NAME)).thenReturn(DATA_HUB_KEY);
  when(mutator.insert(ROW_KEY,DATA_HUB_COLUMN_FAMILY_NAME,column)).thenThrow(new HInvalidRequestException(""String_Node_Str""));
  CassandraValueWriter testClass=new CassandraValueWriter(connector,hector,rowStrategy,keyGenerator,keyRenderer,mock(TimeProvider.class));
  testClass.write(CHANNEL_NAME,value,Optional.of(0));
}"
