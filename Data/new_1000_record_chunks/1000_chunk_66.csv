record_number,buggy_code,fixed_code
65001,"public boolean isOwningNode(XPathFragment xPathFragment){
  return xPathFragment.isAttribute() || xPathFragment.nameIsText();
}","public boolean isOwningNode(XPathFragment xPathFragment){
  return xPathFragment.hasAttribute || xPathFragment.nameIsText;
}"
65002,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.hasAttribute) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}"
65003,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText()) {
    return;
  }
  Object value;
  if (unmarshalRecord.getCharacters().length() == 0) {
    value=this.getMapping().getNullValue();
  }
 else {
    value=unmarshalRecord.getCharacters().toString();
  }
  unmarshalRecord.resetStringBuffer();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,unmarshalRecord.getSession(),unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText) {
    return;
  }
  Object value;
  if (unmarshalRecord.getCharacters().length() == 0) {
    value=this.getMapping().getNullValue();
  }
 else {
    value=unmarshalRecord.getCharacters().toString();
  }
  unmarshalRecord.resetStringBuffer();
  AbstractSession session=unmarshalRecord.getSession();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,unmarshalRecord.getSession(),unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}"
65004,"private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"")) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.namespaceDeclaration(prefix,namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}","private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(XMLConstants.EMPTY_STRING)) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + XMLConstants.COLON + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.namespaceDeclaration(prefix,namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}"
65005,"public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
  Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,unmarshalRecord.getSession(),unmarshalRecord);
  xmlDirectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),convertedValue);
}","public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  AbstractSession session=unmarshalRecord.getSession();
  Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),unmarshalRecord);
  Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,session,unmarshalRecord);
  xmlDirectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),convertedValue);
}"
65006,"public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      XPathQName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.initializeRecord(null);
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  XMLReader xmlReader=unmarshalRecord.getXMLReader();
  xmlReader.setContentHandler(childRecord);
  xmlReader.setLexicalHandler(childRecord);
}","public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    AbstractSession session=unmarshalRecord.getSession();
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
    if (classValue == null) {
      XPathQName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.initializeRecord(null);
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  XMLReader xmlReader=unmarshalRecord.getXMLReader();
  xmlReader.setContentHandler(childRecord);
  xmlReader.setLexicalHandler(childRecord);
}"
65007,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(descriptor.getJavaClass() == value.getClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeCollectionMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(descriptor.getJavaClass() == value.getClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65008,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65009,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65010,"/** 
 * Replaces any CR, Tab or LF characters in the string with a single ' ' character.
 */
public String normalizeStringValue(String value){
  int i=0;
  while (i < value.length()) {
    if (isWhitespace(value.charAt(i),false)) {
      break;
    }
    i++;
  }
  if (i == value.length()) {
    return value;
  }
  char[] buffer=value.toCharArray();
  buffer[i]=' ';
  i++;
  for (; i < value.length(); i++) {
    if (isWhitespace(buffer[i],false)) {
      buffer[i]=' ';
    }
  }
  return new String(buffer);
}","/** 
 * Replaces any CR, Tab or LF characters in the string with a single ' ' character.
 */
public String normalizeStringValue(String value){
  int i=0;
  int length=value.length();
  while (i < length) {
    if (isWhitespace(value.charAt(i),false)) {
      break;
    }
    i++;
  }
  if (i == length) {
    return value;
  }
  char[] buffer=value.toCharArray();
  buffer[i]=' ';
  i++;
  for (; i < length; i++) {
    if (isWhitespace(buffer[i],false)) {
      buffer[i]=' ';
    }
  }
  return new String(buffer);
}"
65011,"public boolean hasLeafElementType(){
  return getLeafElementType() != null;
}","public boolean hasLeafElementType(){
  return leafElementType != null;
}"
65012,"public boolean qNameEquals(Object object){
  try {
    if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    return ((localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean qNameEquals(Object object){
  try {
    if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    return ((localName == xPathFragment.localName) || ((localName != null) && localName.equals(xPathFragment.localName))) && ((namespaceURI == xPathFragment.namespaceURI) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.namespaceURI))) && (nameIsText == xPathFragment.nameIsText);
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
65013,"public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    if (namespaceAware && xPathFragment.isNamespaceAware()) {
      if (namespaceURI == null) {
        if (xPathFragment.getNamespaceURI() != null) {
          return false;
        }
      }
 else {
        if (xPathFragment.getNamespaceURI() == null) {
          return false;
        }
 else         if (namespaceURI != xPathFragment.getNamespaceURI() && !(namespaceURI.equals(xPathFragment.getNamespaceURI()))) {
          return false;
        }
      }
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (getLocalName() == xPathFragment.getLocalName()) || ((getLocalName() != null) && getLocalName().equals(xPathFragment.getLocalName()))) && (this.indexValue == xPathFragment.getIndexValue()) && (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.predicate) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.predicate)) {
      return false;
    }
    if (namespaceAware && xPathFragment.isNamespaceAware()) {
      if (namespaceURI == null) {
        if (xPathFragment.namespaceURI != null) {
          return false;
        }
      }
 else {
        if (xPathFragment.namespaceURI == null) {
          return false;
        }
 else         if (namespaceURI != xPathFragment.namespaceURI && !(namespaceURI.equals(xPathFragment.namespaceURI))) {
          return false;
        }
      }
    }
    return ((nameIsText && xPathFragment.nameIsText) || (localName == xPathFragment.localName) || ((localName != null) && localName.equals(xPathFragment.localName))) && (this.indexValue == xPathFragment.indexValue) && (nameIsText == xPathFragment.nameIsText);
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
65014,"/** 
 * INTERNAL: Allows for subclasses to convert the attribute value.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session,XMLRecord record){
  boolean isNullRepresentedByEmptyNode=getNullPolicy().isNullRepresentedByEmptyNode();
  boolean isNullRepresentedByXsiNil=getNullPolicy().isNullRepresentedByXsiNil();
  if (XMLConstants.EMPTY_STRING.equals(fieldValue) && isNullRepresentedByEmptyNode) {
    fieldValue=null;
  }
 else   if (null == fieldValue && !isNullRepresentedByEmptyNode) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
  Object attributeValue=fieldValue;
  if (attributeValue == XMLRecord.noEntry) {
    if (!getNullPolicy().getIsSetPerformedForAbsentNode()) {
      return attributeValue;
    }
 else {
      fieldValue=null;
      attributeValue=null;
    }
  }
  if (attributeValue == XMLRecord.NIL && isNullRepresentedByXsiNil) {
    fieldValue=null;
    attributeValue=null;
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      attributeValue=((XMLConverter)getConverter()).convertDataValueToObjectValue(attributeValue,session,record.getUnmarshaller());
    }
 else {
      attributeValue=getConverter().convertDataValueToObjectValue(attributeValue,session);
    }
  }
 else {
    if ((attributeValue == null) || (attributeValue.getClass() != this.attributeObjectClassification)) {
      try {
        attributeValue=session.getDatasourcePlatform().convertObject(attributeValue,this.attributeClassification);
      }
 catch (      ConversionException e) {
        throw ConversionException.couldNotBeConverted(this,getDescriptor(),e);
      }
    }
  }
  if (attributeValue == null) {
    attributeValue=this.nullValue;
  }
  return attributeValue;
}","/** 
 * INTERNAL: Allows for subclasses to convert the attribute value.
 */
public Object getAttributeValue(Object fieldValue,AbstractSession session,XMLRecord record){
  boolean isNullRepresentedByEmptyNode=nullPolicy.isNullRepresentedByEmptyNode();
  boolean isNullRepresentedByXsiNil=nullPolicy.isNullRepresentedByXsiNil();
  if (XMLConstants.EMPTY_STRING.equals(fieldValue) && isNullRepresentedByEmptyNode) {
    fieldValue=null;
  }
 else   if (null == fieldValue && !isNullRepresentedByEmptyNode) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
  Object attributeValue=fieldValue;
  if (attributeValue == XMLRecord.noEntry) {
    if (!getNullPolicy().getIsSetPerformedForAbsentNode()) {
      return attributeValue;
    }
 else {
      fieldValue=null;
      attributeValue=null;
    }
  }
  if (attributeValue == XMLRecord.NIL && isNullRepresentedByXsiNil) {
    fieldValue=null;
    attributeValue=null;
  }
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      attributeValue=((XMLConverter)converter).convertDataValueToObjectValue(attributeValue,session,record.getUnmarshaller());
    }
 else {
      attributeValue=converter.convertDataValueToObjectValue(attributeValue,session);
    }
  }
 else {
    if ((attributeValue == null) || (attributeValue.getClass() != this.attributeObjectClassification)) {
      try {
        attributeValue=session.getDatasourcePlatform().convertObject(attributeValue,this.attributeClassification);
      }
 catch (      ConversionException e) {
        throw ConversionException.couldNotBeConverted(this,getDescriptor(),e);
      }
    }
  }
  if (attributeValue == null) {
    attributeValue=this.nullValue;
  }
  return attributeValue;
}"
65015,"/** 
 * INTERNAL: Convert the attribute value to a field value. Process any converter if defined, and check for null values.
 */
public Object getFieldValue(Object attributeValue,AbstractSession session,XMLRecord record){
  Object fieldValue=attributeValue;
  if ((this.nullValue != null) && (this.nullValue.equals(fieldValue)) && !((XMLField)getField()).isRequired()) {
    return null;
  }
  if (hasConverter()) {
    if (getConverter() instanceof XMLConverter) {
      fieldValue=((XMLConverter)getConverter()).convertObjectValueToDataValue(fieldValue,session,record.getMarshaller());
    }
 else {
      fieldValue=getConverter().convertObjectValueToDataValue(fieldValue,session);
    }
  }
  Class fieldClassification=getFieldClassification(getField());
  if ((fieldValue != null) && (fieldClassification != fieldValue.getClass())) {
    try {
      fieldValue=session.getPlatform(descriptor.getJavaClass()).convertObject(fieldValue,fieldClassification);
    }
 catch (    ConversionException exception) {
      throw ConversionException.couldNotBeConverted(this,descriptor,exception);
    }
  }
  return fieldValue;
}","/** 
 * INTERNAL: Convert the attribute value to a field value. Process any converter if defined, and check for null values.
 */
public Object getFieldValue(Object attributeValue,AbstractSession session,XMLRecord record){
  Object fieldValue=attributeValue;
  if ((this.nullValue != null) && (this.nullValue.equals(fieldValue)) && !((XMLField)field).isRequired()) {
    return null;
  }
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      fieldValue=((XMLConverter)converter).convertObjectValueToDataValue(fieldValue,session,record.getMarshaller());
    }
 else {
      fieldValue=converter.convertObjectValueToDataValue(fieldValue,session);
    }
  }
  Class fieldClassification=getFieldClassification(field);
  if ((fieldValue != null) && (fieldClassification != fieldValue.getClass())) {
    try {
      fieldValue=session.getPlatform(descriptor.getJavaClass()).convertObject(fieldValue,fieldClassification);
    }
 catch (    ConversionException exception) {
      throw ConversionException.couldNotBeConverted(this,descriptor,exception);
    }
  }
  return fieldValue;
}"
65016,"/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(XMLRecord record,Object object,XMLField field,AbstractSession session){
  if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
    record.put(field,XMLRecord.NIL);
    return true;
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      Node element=XPathEngine.getInstance().createUnownedElement(record.getDOM(),field);
      DOMRecord nestedRow=new DOMRecord(element);
      record.put(field,nestedRow);
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(XMLRecord record,Object object,XMLField field,AbstractSession session){
  if (marshalNullRepresentation.equals(XMLNullRepresentationType.XSI_NIL)) {
    record.put(field,XMLRecord.NIL);
    return true;
  }
 else {
    if (marshalNullRepresentation.equals(XMLNullRepresentationType.EMPTY_NODE)) {
      Node element=XPathEngine.getInstance().createUnownedElement(record.getDOM(),field);
      DOMRecord nestedRow=new DOMRecord(element);
      record.put(field,nestedRow);
      return true;
    }
 else {
      return false;
    }
  }
}"
65017,"public void directMarshal(DatabaseField field,XMLRecord record,Object object){
  Object fieldValue=null;
  if (getMarshalNullRepresentation() == XMLNullRepresentationType.EMPTY_NODE) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
 else {
    if (!(((XMLField)field).getLastXPathFragment().isAttribute())) {
      if (getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
        fieldValue=XMLRecord.NIL;
      }
    }
  }
  record.put(field,fieldValue);
}","public void directMarshal(DatabaseField field,XMLRecord record,Object object){
  Object fieldValue=null;
  if (marshalNullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
 else {
    if (!(((XMLField)field).getLastXPathFragment().isAttribute())) {
      if (marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL) {
        fieldValue=XMLRecord.NIL;
      }
    }
  }
  record.put(field,fieldValue);
}"
65018,"public void xPathNode(XPathNode xPathNode,NullCapableValue nullCapableValue){
  if (!(isNullRepresentedByXsiNil() || getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL))) {
    if (xPathNode.getXPathFragment().isAttribute()) {
      return;
    }
  }
  XPathNode parentNode=xPathNode.getParent();
  if (isNullRepresentedByXsiNil() || getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
    XPathFragment xPathFragment=new XPathFragment();
    xPathFragment.setXPath('@' + XMLConstants.SCHEMA_NIL_ATTRIBUTE);
    xPathFragment.setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    NodeValue aNodeValue=new NillableNodeValue(nullCapableValue);
    parentNode.addChild(xPathFragment,aNodeValue,null);
  }
 else {
    NodeValue aNodeValue=new OptionalNodeValue(nullCapableValue);
    parentNode.setNodeValue(aNodeValue);
  }
}","public void xPathNode(XPathNode xPathNode,NullCapableValue nullCapableValue){
  if (!(isNullRepresentedByXsiNil() || marshalNullRepresentation.equals(XMLNullRepresentationType.XSI_NIL))) {
    if (xPathNode.getXPathFragment().isAttribute()) {
      return;
    }
  }
  XPathNode parentNode=xPathNode.getParent();
  if (isNullRepresentedByXsiNil() || marshalNullRepresentation.equals(XMLNullRepresentationType.XSI_NIL)) {
    XPathFragment xPathFragment=new XPathFragment();
    xPathFragment.setXPath('@' + XMLConstants.SCHEMA_NIL_ATTRIBUTE);
    xPathFragment.setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    NodeValue aNodeValue=new NillableNodeValue(nullCapableValue);
    parentNode.addChild(xPathFragment,aNodeValue,null);
  }
 else {
    NodeValue aNodeValue=new OptionalNodeValue(nullCapableValue);
    parentNode.setNodeValue(aNodeValue);
  }
}"
65019,"public void endDocument() throws SAXException {
  if (getUnmarshaller().getIDResolver() != null && getParentRecord() == null) {
    getUnmarshaller().getIDResolver().endDocument();
  }
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
  try {
    if (null != treeObjectBuilder.getContainerValues()) {
      for (int i=0; i < treeObjectBuilder.getContainerValues().size(); i++) {
        ContainerValue cv=((ContainerValue)treeObjectBuilder.getContainerValues().get(i));
        cv.setContainerInstance(currentObject,containerInstances[cv.getIndex()]);
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,session,true);
      }
    }
    if (getUnmarshaller().getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    if (xmlDescriptor.hasEventManager()) {
      DescriptorEventManager eventManager=xmlDescriptor.getEventManager();
      if (null != eventManager && eventManager.hasAnyEventListeners()) {
        DescriptorEvent event=new DescriptorEvent(currentObject);
        event.setSession(session);
        event.setRecord(this);
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
        eventManager.executeEvent(event);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      if (null != primaryKeyFields) {
        int primaryKeyFieldsSize=primaryKeyFields.size();
        if (primaryKeyFieldsSize > 0) {
          CacheId pk=(CacheId)treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
          for (int x=0; x < primaryKeyFieldsSize; x++) {
            Object value=pk.getPrimaryKey()[x];
            if (null == value) {
              XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
              pk.set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
            }
          }
          CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor,false);
          key.setRecord(this);
          key.setObject(currentObject);
          key.releaseDeferredLock();
          if (getUnmarshaller().getIDResolver() != null) {
            try {
              if (primaryKeyFieldsSize > 1) {
                Map<String,Object> idWrapper=new HashMap<String,Object>();
                for (int x=0; x < primaryKeyFieldsSize; x++) {
                  String idName=xmlDescriptor.getPrimaryKeyFieldNames().elementAt(x);
                  Object idValue=pk.getPrimaryKey()[x];
                  idWrapper.put(idName,idValue);
                }
                getUnmarshaller().getIDResolver().bind(idWrapper,currentObject);
              }
 else {
                getUnmarshaller().getIDResolver().bind(pk.getPrimaryKey()[0],currentObject);
              }
            }
 catch (            SAXException e) {
              throw XMLMarshalException.unmarshalException(e);
            }
          }
        }
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
  if (getXmlLocation() != null && ((XMLDescriptor)xmlDescriptor).getLocationAccessor() != null) {
    ((XMLDescriptor)xmlDescriptor).getLocationAccessor().setAttributeValueInObject(getCurrentObject(),getXmlLocation());
  }
}","public void endDocument() throws SAXException {
  if (unmarshaller.getIDResolver() != null && parentRecord == null) {
    unmarshaller.getIDResolver().endDocument();
  }
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
  try {
    if (null != treeObjectBuilder.getContainerValues()) {
      for (int i=0; i < treeObjectBuilder.getContainerValues().size(); i++) {
        ContainerValue cv=((ContainerValue)treeObjectBuilder.getContainerValues().get(i));
        cv.setContainerInstance(currentObject,containerInstances[cv.getIndex()]);
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,session,true);
      }
    }
    if (unmarshaller.getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        unmarshaller.getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        unmarshaller.getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    if (xmlDescriptor.hasEventManager()) {
      DescriptorEventManager eventManager=xmlDescriptor.getEventManager();
      if (null != eventManager && eventManager.hasAnyEventListeners()) {
        DescriptorEvent event=new DescriptorEvent(currentObject);
        event.setSession(session);
        event.setRecord(this);
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
        eventManager.executeEvent(event);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      if (null != primaryKeyFields) {
        int primaryKeyFieldsSize=primaryKeyFields.size();
        if (primaryKeyFieldsSize > 0) {
          CacheId pk=(CacheId)treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
          for (int x=0; x < primaryKeyFieldsSize; x++) {
            Object value=pk.getPrimaryKey()[x];
            if (null == value) {
              XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
              pk.set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
            }
          }
          CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor,false);
          key.setRecord(this);
          key.setObject(currentObject);
          key.releaseDeferredLock();
          if (getUnmarshaller().getIDResolver() != null) {
            try {
              if (primaryKeyFieldsSize > 1) {
                Map<String,Object> idWrapper=new HashMap<String,Object>();
                for (int x=0; x < primaryKeyFieldsSize; x++) {
                  String idName=xmlDescriptor.getPrimaryKeyFieldNames().elementAt(x);
                  Object idValue=pk.getPrimaryKey()[x];
                  idWrapper.put(idName,idValue);
                }
                getUnmarshaller().getIDResolver().bind(idWrapper,currentObject);
              }
 else {
                getUnmarshaller().getIDResolver().bind(pk.getPrimaryKey()[0],currentObject);
              }
            }
 catch (            SAXException e) {
              throw XMLMarshalException.unmarshalException(e);
            }
          }
        }
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
  if (getXmlLocation() != null && ((XMLDescriptor)xmlDescriptor).getLocationAccessor() != null) {
    ((XMLDescriptor)xmlDescriptor).getLocationAccessor().setAttributeValueInObject(getCurrentObject(),getXmlLocation());
  }
}"
65020,"public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if (getParentRecord() != null && getParentRecord().getDocumentLocator() != null) {
      this.documentLocator=getParentRecord().getDocumentLocator();
    }
    if (documentLocator != null) {
      if (xmlDescriptor.getLocationAccessor() != null) {
        setXmlLocation(new Locator2Impl(documentLocator));
      }
    }
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containerInstances=new Object[containerValues.size()];
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        if (containerValue.getReuseContainer() && !(containerValue.getMapping().getAttributeAccessor().isReadOnly())) {
          getContainerInstance(containerValue,false);
        }
        if (containerValue.isDefaultEmptyContainer()) {
          getContainerInstance(containerValue,true);
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if (parentRecord != null && parentRecord.getDocumentLocator() != null) {
      this.documentLocator=parentRecord.getDocumentLocator();
    }
    if (documentLocator != null) {
      if (xmlDescriptor.getLocationAccessor() != null) {
        setXmlLocation(new Locator2Impl(documentLocator));
      }
    }
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containerInstances=new Object[containerValues.size()];
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        if (containerValue.getReuseContainer() && !(containerValue.getMapping().getAttributeAccessor().isReadOnly())) {
          getContainerInstance(containerValue,false);
        }
        if (containerValue.isDefaultEmptyContainer()) {
          getContainerInstance(containerValue,true);
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65021,"public Object get(DatabaseField key){
  XMLField xmlField=this.convertToXMLField(key);
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  NamespaceResolver namespaceResolver=xmlField.getNamespaceResolver();
  String namespaceURI=lastFragment.getNamespaceURI();
  if (namespaceURI == null) {
    namespaceURI=XMLConstants.EMPTY_STRING;
    if (null != namespaceResolver && !(lastFragment.isAttribute() && lastFragment.getPrefix() == null)) {
      namespaceURI=namespaceResolver.resolveNamespacePrefix(lastFragment.getPrefix());
      if (null == namespaceURI) {
        namespaceURI=XMLConstants.EMPTY_STRING;
      }
    }
  }
  if (isNamespaceAware()) {
    return attributes.getValue(namespaceURI,lastFragment.getLocalName());
  }
  return attributes.getValue(lastFragment.getLocalName());
}","public Object get(DatabaseField key){
  XMLField xmlField=this.convertToXMLField(key);
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  String namespaceURI=lastFragment.getNamespaceURI();
  if (namespaceURI == null) {
    NamespaceResolver namespaceResolver=xmlField.getNamespaceResolver();
    namespaceURI=XMLConstants.EMPTY_STRING;
    if (null != namespaceResolver && !(lastFragment.isAttribute() && lastFragment.getPrefix() == null)) {
      namespaceURI=namespaceResolver.resolveNamespacePrefix(lastFragment.getPrefix());
      if (null == namespaceURI) {
        namespaceURI=XMLConstants.EMPTY_STRING;
      }
    }
  }
  if (isNamespaceAware()) {
    return attributes.getValue(namespaceURI,lastFragment.getLocalName());
  }
  return attributes.getValue(lastFragment.getLocalName());
}"
65022,"public static SOAPElement getSOAPBodyElement(SOAPEnvelope envelope) throws SOAPException {
  NodeList nodes=envelope.getBody().getChildNodes();
  for (int i=0; i < nodes.getLength(); i++) {
    Node node=nodes.item(i);
    if (node instanceof SOAPBodyElement) {
      return (SOAPElement)node;
    }
  }
  return null;
}","public static SOAPElement getSOAPBodyElement(SOAPEnvelope envelope) throws SOAPException {
  for (@SuppressWarnings(""String_Node_Str"") Iterator it=envelope.getBody().getChildElements(); it.hasNext(); ) {
    Object node=it.next();
    if (node instanceof SOAPBodyElement) {
      return (SOAPElement)node;
    }
  }
  return null;
}"
65023,"/** 
 * Drop table constraints
 */
public void dropTableConstraints(Session session){
  if (!SchemaManager.FAST_TABLE_CREATOR && !useFastTableCreatorAfterInitialCreate) {
    if (session.getLogin().getPlatform().isOracle()) {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
 else {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * Drop table constraints
 */
public void dropTableConstraints(Session session){
  if (!SchemaManager.FAST_TABLE_CREATOR && !useFastTableCreatorAfterInitialCreate) {
    if (session.getLogin().getPlatform().isOracle()) {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
 else {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
  }
 else {
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
  }
}"
65024,"/** 
 * This method will return true for all inputs.  This means that  <i>MOXyJsonProvider</i> will always be used for the JSON binding.
 * @return true
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return true;
}","/** 
 * This method will return true for all inputs.  This means that  <i>MOXyJsonProvider</i> will always be used for the JSON binding.
 * @return true
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return supportsMediaType(mediaType);
}"
65025,"/** 
 * This method will return true for all inputs.  This means that  <i>MOXyJsonProvider</i> will always be used for the JSON binding.
 * @return true
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return true;
}","/** 
 * This method will return true for all inputs.  This means that  <i>MOXyJsonProvider</i> will always be used for the JSON binding.
 * @return true
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return supportsMediaType(mediaType);
}"
65026,"public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      return jaxbElement.getValue();
    }
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      Object value=jaxbElement.getValue();
      if (value instanceof ArrayList) {
        if (type.isAssignableFrom(value.getClass())) {
          return value;
        }
        ContainerPolicy containerPolicy=ContainerPolicy.buildPolicyFor(type);
        Object container=containerPolicy.containerInstance();
        for (        Object element : (Collection)value) {
          containerPolicy.addInto(element,container,null);
        }
        return container;
      }
 else {
        return value;
      }
    }
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
65027,"public void addJoinTests(){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Employee object=(Employee)manager.getObject(Employee.class,""String_Node_Str"");
  ReadObjectTest test=new ReadObjectTest(object);
  test.setName(""String_Node_Str"");
  ReadObjectQuery query=new ReadObjectQuery();
  query.setSelectionObject(object);
  query.addJoinedAttribute(""String_Node_Str"");
  test.setQuery(query);
  addTest(test);
  ReadObjectTest test1a=new ReadObjectTest(object);
  test1a.setName(""String_Node_Str"");
  ReadObjectQuery query1a=new ReadObjectQuery();
  query1a.setSelectionObject(object);
  query1a.addJoinedAttribute(""String_Node_Str"");
  query1a.addJoinedAttribute(""String_Node_Str"");
  test1a.setQuery(query1a);
  addTest(test1a);
  ReadObjectTest test1m=new ReadObjectTest(object);
  test1m.setName(""String_Node_Str"");
  ReadObjectQuery query1m=new ReadObjectQuery();
  query1m.setSelectionObject(object);
  query1m.addJoinedAttribute(query1m.getExpressionBuilder().anyOf(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  test1m=new ReadObjectTest(object);
  test1m.setName(""String_Node_Str"");
  query1m=new ReadObjectQuery();
  query1m.setSelectionObject(object);
  query1m.addJoinedAttribute(query1m.getExpressionBuilder().anyOfAllowingNone(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  addTest(new ReadAnyObjectJoinPhoneTest());
  Object person=manager.getObject(Engineer.class,""String_Node_Str"");
  ReadObjectTest test1b=new ReadObjectTest(person);
  test1b.setName(""String_Node_Str"");
  ReadObjectQuery query1b=new ReadObjectQuery();
  query1b.setSelectionObject(person);
  query1b.addJoinedAttribute(""String_Node_Str"");
  query1b.addJoinedAttribute(""String_Node_Str"");
  test1b.setQuery(query1b);
  addTest(test1b);
  ReadObjectTest test1bx=new ReadObjectTest(person);
  test1bx.setName(""String_Node_Str"");
  ReadObjectQuery query1bx=new ReadObjectQuery();
  query1bx.setSelectionObject(person);
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str"").getAllowingNull(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str"").getAllowingNull(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str""));
  test1bx.setQuery(query1bx);
  addTest(test1bx);
  ReadObjectTest test1c=new ReadObjectTest(object);
  test1c.setName(""String_Node_Str"");
  ReadObjectQuery query1c=new ReadObjectQuery();
  query1c.setSelectionObject(object);
  query1c.addJoinedAttribute(""String_Node_Str"");
  query1c.addJoinedAttribute(""String_Node_Str"");
  query1c.addJoinedAttribute(query1c.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test1c.setQuery(query1c);
  addTest(test1c);
  ReadAllTest test2=new ReadAllTest(Employee.class,12);
  test2.setName(""String_Node_Str"");
  ReadAllQuery query2=new ReadAllQuery();
  query2.setReferenceClass(Employee.class);
  query2.addJoinedAttribute(""String_Node_Str"");
  query2.addJoinedAttribute(query2.getExpressionBuilder().getAllowingNull(""String_Node_Str""));
  test2.setQuery(query2);
  addTest(test2);
  ReadAllTest testReadAll1m=new ReadAllTest(Employee.class,12);
  testReadAll1m.setName(""String_Node_Str"");
  ReadAllQuery queryReadAll1m=new ReadAllQuery();
  queryReadAll1m.setReferenceClass(Employee.class);
  queryReadAll1m.addJoinedAttribute(queryReadAll1m.getExpressionBuilder().anyOf(""String_Node_Str""));
  testReadAll1m.setQuery(queryReadAll1m);
  addTest(testReadAll1m);
  ReadAllTest testReadAll21m=new ReadAllTest(Employee.class,5);
  testReadAll21m.setName(""String_Node_Str"");
  ReadAllQuery queryReadAll21m=new ReadAllQuery();
  queryReadAll21m.setReferenceClass(Employee.class);
  Expression managedEmployee=queryReadAll21m.getExpressionBuilder().anyOf(""String_Node_Str"");
  queryReadAll21m.addJoinedAttribute(queryReadAll21m.getExpressionBuilder().anyOf(""String_Node_Str""));
  queryReadAll21m.addJoinedAttribute(managedEmployee);
  queryReadAll21m.addJoinedAttribute(managedEmployee.anyOf(""String_Node_Str""));
  testReadAll21m.setQuery(queryReadAll21m);
  addTest(testReadAll21m);
  ReadAllTest test2a=new ReadAllTest(Employee.class,2);
  test2a.setName(""String_Node_Str"");
  ReadAllQuery query2a=new ReadAllQuery();
  query2a.setReferenceClass(Employee.class);
  query2a.addJoinedAttribute(""String_Node_Str"");
  query2a.setSelectionCriteria(new ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test2a.setQuery(query2a);
  addTest(test2a);
  ReadObjectTest test2az=new ReadObjectTest(object);
  test2az.setName(""String_Node_Str"");
  ReadObjectQuery query2az=new ReadObjectQuery();
  query2az.setReferenceClass(Employee.class);
  query2az.addJoinedAttribute(""String_Node_Str"");
  query2az.setSQLString(""String_Node_Str"" + object.getId());
  test2az.setQuery(query2az);
  addTest(test2az);
  ReadAllTest test2ax=new ReadAllTest(Employee.class,2);
  test2ax.setName(""String_Node_Str"");
  ReadAllQuery query2ax=new ReadAllQuery();
  query2ax.setReferenceClass(Employee.class);
  query2ax.addJoinedAttribute(""String_Node_Str"");
  query2ax.setSQLString(""String_Node_Str"");
  test2ax.setQuery(query2ax);
  addTest(test2ax);
  ReadAllTest test2aa=new ReadAllTest(Employee.class,2);
  test2aa.setName(""String_Node_Str"");
  ReadAllQuery query2aa=new ReadAllQuery();
  query2aa.setReferenceClass(Employee.class);
  query2aa.useCursoredStream();
  query2aa.addJoinedAttribute(""String_Node_Str"");
  query2aa.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test2aa.setQuery(query2aa);
  addTest(test2aa);
  ReadAllJoinReadingTest test2b=new ReadAllJoinReadingTest(3,""String_Node_Str"");
  ReadAllQuery query2b=new ReadAllQuery();
  query2b.setReferenceClass(LargeProject.class);
  query2b.addJoinedAttribute(query2b.getExpressionBuilder().get(""String_Node_Str""));
  query2b.addJoinedAttribute(query2b.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test2b.setQuery(query2b);
  addTest(test2b);
  ReadAllTest ownerTest=new ReadAllTest(ObjectA.class,3);
  ownerTest.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery=new ReadAllQuery();
  ownerQuery.setReferenceClass(ObjectA.class);
  ownerQuery.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str""));
  ownerQuery.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str"").anyOf(""String_Node_Str""));
  ownerTest.setQuery(ownerQuery);
  addTest(ownerTest);
  ReadAllTest ownerTest3=new ReadAllTest(ObjectA.class,3);
  ownerTest3.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery3=new ReadAllQuery();
  ownerQuery3.setReferenceClass(ObjectA.class);
  ownerQuery3.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str""));
  Expression join=ownerQuery.getExpressionBuilder().get(""String_Node_Str"").anyOf(""String_Node_Str"");
  ownerQuery3.addJoinedAttribute(join);
  ownerQuery3.addJoinedAttribute(join.get(""String_Node_Str""));
  ownerTest3.setQuery(ownerQuery3);
  addTest(ownerTest3);
  ReadAllTest ownerTest2=new ReadAllTest(ObjectA.class,3);
  ownerTest2.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery2=new ReadAllQuery();
  ownerQuery2.setReferenceClass(ObjectA.class);
  ownerTest2.setQuery(ownerQuery2);
  addTest(ownerTest2);
  ReadAllTest test3=new ReadAllTest(LargeProject.class,3);
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(LargeProject.class);
  query3.useCursoredStream();
  query3.addJoinedAttribute(query3.getExpressionBuilder().get(""String_Node_Str""));
  query3.addJoinedAttribute(query3.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  addTest(new ReadObjectMappingJoinReadingTest());
  addTest(new MultipleJoinedAttributeQueryTest());
}","public void addJoinTests(){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Employee object=(Employee)manager.getObject(Employee.class,""String_Node_Str"");
  ReadObjectTest test=new ReadObjectTest(object);
  test.setName(""String_Node_Str"");
  ReadObjectQuery query=new ReadObjectQuery();
  query.setSelectionObject(object);
  query.addJoinedAttribute(""String_Node_Str"");
  test.setQuery(query);
  addTest(test);
  ReadObjectTest test1a=new ReadObjectTest(object);
  test1a.setName(""String_Node_Str"");
  ReadObjectQuery query1a=new ReadObjectQuery();
  query1a.setSelectionObject(object);
  query1a.addJoinedAttribute(""String_Node_Str"");
  query1a.addJoinedAttribute(""String_Node_Str"");
  test1a.setQuery(query1a);
  addTest(test1a);
  ReadObjectTest test1m=new ReadObjectTest(object);
  test1m.setName(""String_Node_Str"");
  ReadObjectQuery query1m=new ReadObjectQuery();
  query1m.setSelectionObject(object);
  query1m.addJoinedAttribute(query1m.getExpressionBuilder().anyOf(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  test1m=new ReadObjectTest(object);
  test1m.setName(""String_Node_Str"");
  query1m=new ReadObjectQuery();
  query1m.setSelectionObject(object);
  query1m.addJoinedAttribute(query1m.getExpressionBuilder().anyOfAllowingNone(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  addTest(new ReadAnyObjectJoinPhoneTest());
  Object person=manager.getObject(Engineer.class,""String_Node_Str"");
  ReadObjectTest test1b=new ReadObjectTest(person);
  test1b.setName(""String_Node_Str"");
  ReadObjectQuery query1b=new ReadObjectQuery();
  query1b.setSelectionObject(person);
  query1b.addJoinedAttribute(""String_Node_Str"");
  query1b.addJoinedAttribute(""String_Node_Str"");
  test1b.setQuery(query1b);
  addTest(test1b);
  ReadObjectTest test1bx=new ReadObjectTest(person);
  test1bx.setName(""String_Node_Str"");
  ReadObjectQuery query1bx=new ReadObjectQuery();
  query1bx.setSelectionObject(person);
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str"").getAllowingNull(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str"").getAllowingNull(""String_Node_Str""));
  query1bx.addJoinedAttribute(query1bx.getExpressionBuilder().get(""String_Node_Str""));
  test1bx.setQuery(query1bx);
  addTest(test1bx);
  ReadObjectTest test1c=new ReadObjectTest(object);
  test1c.setName(""String_Node_Str"");
  ReadObjectQuery query1c=new ReadObjectQuery();
  query1c.setSelectionObject(object);
  query1c.addJoinedAttribute(""String_Node_Str"");
  query1c.addJoinedAttribute(""String_Node_Str"");
  query1c.addJoinedAttribute(query1c.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test1c.setQuery(query1c);
  addTest(test1c);
  ReadAllTest test2=new ReadAllTest(Employee.class,12);
  test2.setName(""String_Node_Str"");
  ReadAllQuery query2=new ReadAllQuery();
  query2.setReferenceClass(Employee.class);
  query2.addJoinedAttribute(""String_Node_Str"");
  query2.addJoinedAttribute(query2.getExpressionBuilder().getAllowingNull(""String_Node_Str""));
  test2.setQuery(query2);
  addTest(test2);
  ReadAllTest testReadAll1m=new ReadAllTest(Employee.class,12);
  testReadAll1m.setName(""String_Node_Str"");
  ReadAllQuery queryReadAll1m=new ReadAllQuery();
  queryReadAll1m.setReferenceClass(Employee.class);
  queryReadAll1m.addJoinedAttribute(queryReadAll1m.getExpressionBuilder().anyOf(""String_Node_Str""));
  testReadAll1m.setQuery(queryReadAll1m);
  addTest(testReadAll1m);
  ReadAllTest testReadAll21m=new ReadAllTest(Employee.class,5);
  testReadAll21m.setName(""String_Node_Str"");
  ReadAllQuery queryReadAll21m=new ReadAllQuery();
  queryReadAll21m.setReferenceClass(Employee.class);
  Expression managedEmployee=queryReadAll21m.getExpressionBuilder().anyOf(""String_Node_Str"");
  queryReadAll21m.addJoinedAttribute(queryReadAll21m.getExpressionBuilder().anyOf(""String_Node_Str""));
  queryReadAll21m.addJoinedAttribute(managedEmployee);
  queryReadAll21m.addJoinedAttribute(managedEmployee.anyOf(""String_Node_Str""));
  testReadAll21m.setQuery(queryReadAll21m);
  addTest(testReadAll21m);
  ReadAllTest test2a=new ReadAllTest(Employee.class,2);
  test2a.setName(""String_Node_Str"");
  ReadAllQuery query2a=new ReadAllQuery();
  query2a.setReferenceClass(Employee.class);
  query2a.addJoinedAttribute(""String_Node_Str"");
  query2a.setSelectionCriteria(new ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test2a.setQuery(query2a);
  addTest(test2a);
  ReadObjectTest test2az=new ReadObjectTest(object);
  test2az.setName(""String_Node_Str"");
  ReadObjectQuery query2az=new ReadObjectQuery();
  query2az.setReferenceClass(Employee.class);
  query2az.addJoinedAttribute(""String_Node_Str"");
  query2az.setSQLString(""String_Node_Str"" + object.getId());
  test2az.setQuery(query2az);
  addTest(test2az);
  ReadAllTest test2ax=new ReadAllTest(Employee.class,2);
  test2ax.setName(""String_Node_Str"");
  ReadAllQuery query2ax=new ReadAllQuery();
  query2ax.setReferenceClass(Employee.class);
  query2ax.addJoinedAttribute(""String_Node_Str"");
  query2ax.setSQLString(""String_Node_Str"");
  test2ax.setQuery(query2ax);
  addTest(test2ax);
  ReadAllTest test2aa=new ReadAllTest(Employee.class,2);
  test2aa.setName(""String_Node_Str"");
  ReadAllQuery query2aa=new ReadAllQuery();
  query2aa.setReferenceClass(Employee.class);
  query2aa.useCursoredStream();
  query2aa.addJoinedAttribute(""String_Node_Str"");
  query2aa.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test2aa.setQuery(query2aa);
  addTest(test2aa);
  ReadAllJoinReadingTest test2b=new ReadAllJoinReadingTest(3,""String_Node_Str"");
  ReadAllQuery query2b=new ReadAllQuery();
  query2b.setReferenceClass(LargeProject.class);
  query2b.addJoinedAttribute(query2b.getExpressionBuilder().get(""String_Node_Str""));
  query2b.addJoinedAttribute(query2b.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test2b.setQuery(query2b);
  addTest(test2b);
  ReadAllTest ownerTest=new ReadAllTest(ObjectA.class,3);
  ownerTest.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery=new ReadAllQuery();
  ownerQuery.setReferenceClass(ObjectA.class);
  ownerQuery.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str""));
  ownerQuery.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str"").anyOf(""String_Node_Str""));
  ownerTest.setQuery(ownerQuery);
  addTest(ownerTest);
  ReadAllTest ownerTest3=new ReadAllTest(ObjectA.class,3);
  ownerTest3.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery3=new ReadAllQuery();
  ownerQuery3.setReferenceClass(ObjectA.class);
  ownerQuery3.addJoinedAttribute(ownerQuery.getExpressionBuilder().get(""String_Node_Str""));
  Expression join=ownerQuery.getExpressionBuilder().get(""String_Node_Str"").anyOf(""String_Node_Str"");
  ownerQuery3.addJoinedAttribute(join);
  ownerQuery3.addJoinedAttribute(join.get(""String_Node_Str""));
  ownerTest3.setQuery(ownerQuery3);
  addTest(ownerTest3);
  ReadAllTest ownerTest2=new ReadAllTest(ObjectA.class,3);
  ownerTest2.setName(""String_Node_Str"");
  ReadAllQuery ownerQuery2=new ReadAllQuery();
  ownerQuery2.setReferenceClass(ObjectA.class);
  ownerTest2.setQuery(ownerQuery2);
  addTest(ownerTest2);
  ReadAllTest test3=new ReadAllTest(LargeProject.class,3);
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(LargeProject.class);
  query3.useCursoredStream();
  query3.addJoinedAttribute(query3.getExpressionBuilder().get(""String_Node_Str""));
  query3.addJoinedAttribute(query3.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  addTest(new ReadObjectMappingJoinReadingTest());
  addTest(new MultipleJoinedAttributeQueryTest());
  addTest(new ComplexJoinedAttributeQueryTest());
}"
65028,"/** 
 * This method collects the Joined Mappings from the descriptor and initializes them. Excludes the mapping that are not in the passed mappingsAllowedToJoin set (if it's not null). 
 */
public void processJoinedMappings(AbstractSession session){
  Set<String> fetchGroupAttributes=null;
  FetchGroup fetchGroup=getBaseQuery().getExecutionFetchGroup();
  if (fetchGroup != null) {
    fetchGroupAttributes=fetchGroup.getAttributeNames();
  }
  ObjectBuilder objectBuilder=getDescriptor().getObjectBuilder();
  if (objectBuilder.hasJoinedAttributes()) {
    List mappingJoinedAttributes=objectBuilder.getJoinedAttributes();
    if (!hasJoinedAttributeExpressions()) {
      for (int i=0; i < mappingJoinedAttributes.size(); i++) {
        ForeignReferenceMapping mapping=(ForeignReferenceMapping)mappingJoinedAttributes.get(i);
        if (fetchGroupAttributes == null || fetchGroupAttributes.contains(mapping.getAttributeName())) {
          Expression expression=addJoinedMapping(mapping);
          if (expression != null) {
            prepareJoinExpression(expression,session);
          }
        }
      }
    }
 else {
      for (int i=0; i < mappingJoinedAttributes.size(); i++) {
        ForeignReferenceMapping mapping=(ForeignReferenceMapping)mappingJoinedAttributes.get(i);
        if (!isAttributeExpressionJoined(mapping)) {
          if (fetchGroupAttributes == null || fetchGroupAttributes.contains(mapping.getAttributeName())) {
            Expression expression=addJoinedMapping(mapping);
            if (expression != null) {
              prepareJoinExpression(expression,session);
            }
          }
        }
      }
    }
  }
}","/** 
 * This method collects the Joined Mappings from the descriptor and initializes them. Excludes the mapping that are not in the passed mappingsAllowedToJoin set (if it's not null). 
 */
public void processJoinedMappings(AbstractSession session){
  Set<String> fetchGroupAttributes=null;
  FetchGroup fetchGroup=getBaseQuery().getExecutionFetchGroup();
  if (fetchGroup != null) {
    fetchGroupAttributes=fetchGroup.getAttributeNames();
  }
  ObjectBuilder objectBuilder=getDescriptor().getObjectBuilder();
  if (objectBuilder.hasJoinedAttributes()) {
    List mappingJoinedAttributes=objectBuilder.getJoinedAttributes();
    if (!hasJoinedAttributeExpressions()) {
      for (int i=0; i < mappingJoinedAttributes.size(); i++) {
        ForeignReferenceMapping mapping=(ForeignReferenceMapping)mappingJoinedAttributes.get(i);
        if (fetchGroupAttributes == null || fetchGroupAttributes.contains(mapping.getAttributeName())) {
          addAndPrepareJoinedMapping(mapping,session);
        }
      }
    }
 else {
      for (int i=0; i < mappingJoinedAttributes.size(); i++) {
        ForeignReferenceMapping mapping=(ForeignReferenceMapping)mappingJoinedAttributes.get(i);
        if (!isAttributeExpressionJoined(mapping)) {
          if (fetchGroupAttributes == null || fetchGroupAttributes.contains(mapping.getAttributeName())) {
            addAndPrepareJoinedMapping(mapping,session);
          }
        }
      }
    }
  }
}"
65029,"/** 
 * Validate and prepare the join expression.
 */
protected void prepareJoinExpression(Expression expression,AbstractSession session){
  if (!expression.isQueryKeyExpression()) {
    throw QueryException.mappingForExpressionDoesNotSupportJoining(expression);
  }
  QueryKeyExpression objectExpression=(QueryKeyExpression)expression;
  objectExpression.getBuilder().setSession(session.getRootSession(null));
  if (objectExpression.getBuilder().getQueryClass() == null) {
    objectExpression.getBuilder().setQueryClass(this.descriptor.getJavaClass());
  }
  if ((objectExpression.getMapping() == null) || (!objectExpression.getMapping().isJoiningSupported())) {
    throw QueryException.mappingForExpressionDoesNotSupportJoining(objectExpression);
  }
  ObjectExpression baseExpression=objectExpression;
  while (!baseExpression.isExpressionBuilder()) {
    baseExpression.setShouldUseOuterJoinForMultitableInheritance(true);
    if (((QueryKeyExpression)baseExpression).shouldQueryToManyRelationship()) {
      setIsToManyJoinQuery(true);
    }
    if (baseExpression.shouldUseOuterJoin()) {
      setIsOuterJoinedAttributeQuery(true);
    }
    baseExpression=(ObjectExpression)baseExpression.getBaseExpression();
  }
}","/** 
 * Validate and prepare the join expression.
 */
protected Expression prepareJoinExpression(Expression expression,AbstractSession session){
  if (!expression.isQueryKeyExpression()) {
    throw QueryException.mappingForExpressionDoesNotSupportJoining(expression);
  }
  QueryKeyExpression objectExpression=(QueryKeyExpression)expression;
  if (objectExpression.getBuilder().getQueryClass() == null) {
    objectExpression=(QueryKeyExpression)objectExpression.rebuildOn(this.baseExpressionBuilder);
    if (objectExpression.getBuilder().getQueryClass() == null) {
      objectExpression.getBuilder().setQueryClass(this.descriptor.getJavaClass());
    }
  }
  objectExpression.getBuilder().setSession(session.getRootSession(null));
  if ((objectExpression.getMapping() == null) || (!objectExpression.getMapping().isJoiningSupported())) {
    throw QueryException.mappingForExpressionDoesNotSupportJoining(objectExpression);
  }
  ObjectExpression baseExpression=objectExpression;
  while (!baseExpression.isExpressionBuilder()) {
    baseExpression.setShouldUseOuterJoinForMultitableInheritance(true);
    if (((QueryKeyExpression)baseExpression).shouldQueryToManyRelationship()) {
      setIsToManyJoinQuery(true);
    }
    if (baseExpression.shouldUseOuterJoin()) {
      setIsOuterJoinedAttributeQuery(true);
    }
    baseExpression=(ObjectExpression)baseExpression.getBaseExpression();
  }
  return objectExpression;
}"
65030,"/** 
 * Validate and prepare join expressions.
 */
public void prepareJoinExpressions(AbstractSession session){
  setIsOuterJoinedAttributeQuery(false);
  Expression lastJoinedAttributeBaseExpression=null;
  List groupedExpressionList=new ArrayList(getJoinedAttributeExpressions().size());
  for (int index=0; index < getJoinedAttributeExpressions().size(); index++) {
    Expression expression=getJoinedAttributeExpressions().get(index);
    prepareJoinExpression(expression,session);
    lastJoinedAttributeBaseExpression=addExpressionAndBaseToGroupedList(expression,groupedExpressionList,lastJoinedAttributeBaseExpression);
  }
  this.setJoinedAttributeExpressions_(groupedExpressionList);
  for (int index=0; index < getJoinedMappingExpressions().size(); index++) {
    Expression expression=getJoinedMappingExpressions().get(index);
    prepareJoinExpression(expression,session);
  }
}","/** 
 * Validate and prepare join expressions.
 */
public void prepareJoinExpressions(AbstractSession session){
  setIsOuterJoinedAttributeQuery(false);
  Expression lastJoinedAttributeBaseExpression=null;
  List groupedExpressionList=new ArrayList(getJoinedAttributeExpressions().size());
  for (int index=0; index < getJoinedAttributeExpressions().size(); index++) {
    Expression expression=getJoinedAttributeExpressions().get(index);
    expression=prepareJoinExpression(expression,session);
    lastJoinedAttributeBaseExpression=addExpressionAndBaseToGroupedList(expression,groupedExpressionList,lastJoinedAttributeBaseExpression);
  }
  this.setJoinedAttributeExpressions_(groupedExpressionList);
  for (int index=0; index < getJoinedMappingExpressions().size(); index++) {
    Expression expression=getJoinedMappingExpressions().get(index);
    expression=prepareJoinExpression(expression,session);
    getJoinedMappingExpressions().set(index,expression);
  }
}"
65031,"/** 
 * Add the mapping for join fetch and return the expression being used.  
 */
public Expression addJoinedMapping(ForeignReferenceMapping mapping){
  Expression joinMappingExpression=null;
  if (mapping.isCollectionMapping()) {
    if (mapping.isInnerJoinFetched()) {
      joinMappingExpression=getBaseExpressionBuilder().anyOf(mapping.getAttributeName(),false);
    }
 else     if (mapping.isOuterJoinFetched()) {
      joinMappingExpression=getBaseExpressionBuilder().anyOfAllowingNone(mapping.getAttributeName(),false);
    }
    if (joinMappingExpression != null) {
      addJoinedMappingExpression(joinMappingExpression);
    }
  }
 else {
    if (mapping.isInnerJoinFetched()) {
      joinMappingExpression=getBaseExpressionBuilder().get(mapping.getAttributeName());
    }
 else     if (mapping.isOuterJoinFetched()) {
      joinMappingExpression=getBaseExpressionBuilder().getAllowingNull(mapping.getAttributeName());
    }
    addJoinedMappingExpression(joinMappingExpression);
  }
  return joinMappingExpression;
}","/** 
 * Add an attribute represented by the given attribute name to the list of joins for this query. Note: Mapping level joins are represented separately from query level joins.
 */
public void addJoinedMapping(String attributeName){
  addJoinedMappingExpression(this.baseExpressionBuilder.get(attributeName));
}"
65032,"/** 
 * {@inheritDoc}
 */
@Override protected void initialize(){
  super.initialize();
  registerChild(SimpleConditionalExpressionBNF.ID);
  registerChild(ConditionalExpressionBNF.ID);
}","/** 
 * {@inheritDoc}
 */
@Override protected void initialize(){
  super.initialize();
  setFallbackBNFId(PreLiteralExpressionBNF.ID);
  registerChild(SimpleConditionalExpressionBNF.ID);
  registerChild(ConditionalExpressionBNF.ID);
}"
65033,"/** 
 * {@inheritDoc}
 */
public JPQLQueryBNF getQueryBNF(){
  return queryBNF;
}","/** 
 * {@inheritDoc}
 */
public JPQLQueryBNF getQueryBNF(){
  return getQueryBNF(ConditionalPrimaryBNF.ID);
}"
65034,"/** 
 * Creates a new <code>NotExpression</code>.
 * @param parent The parent of this expression
 * @param queryBNF The BNF coming from the parent expression that was used to parse the query
 */
public NotExpression(AbstractExpression parent,JPQLQueryBNF queryBNF){
  super(parent,NOT);
  this.queryBNF=queryBNF;
}","/** 
 * Creates a new <code>NotExpression</code>.
 * @param parent The parent of this expression
 * @param queryBNF The BNF coming from the parent expression that was used to parse the query
 */
public NotExpression(AbstractExpression parent){
  super(parent,NOT);
}"
65035,"/** 
 * {@inheritDoc}
 */
@Override protected void parse(WordParser wordParser,boolean tolerant){
  identifier=wordParser.moveForward(NOT);
  hasSpaceAfterNot=wordParser.skipLeadingWhitespace() > 0;
  expression=parse(wordParser,queryBNF.getId(),tolerant);
}","/** 
 * {@inheritDoc}
 */
@Override protected void parse(WordParser wordParser,boolean tolerant){
  identifier=wordParser.moveForward(NOT);
  hasSpaceAfterNot=wordParser.skipLeadingWhitespace() > 0;
  expression=parse(wordParser,ConditionalPrimaryBNF.ID,tolerant);
}"
65036,"/** 
 * {@inheritDoc}
 */
@Override protected AbstractExpression buildExpression(AbstractExpression parent,WordParser wordParser,String word,JPQLQueryBNF queryBNF,AbstractExpression expression,boolean tolerant){
  int index=wordParser.position() + 3;
  index+=wordParser.whitespaceCount(index);
  if (wordParser.startsWithIdentifier(Expression.IN,index)) {
    expression=new InExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.LIKE,index)) {
    expression=new LikeExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.MEMBER,index)) {
    expression=new CollectionMemberExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.BETWEEN,index)) {
    expression=new BetweenExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.EXISTS,index)) {
    expression=new ExistsExpression(parent);
  }
 else {
    expression=new NotExpression(parent,queryBNF);
  }
  expression.parse(wordParser,tolerant);
  return expression;
}","/** 
 * {@inheritDoc}
 */
@Override protected AbstractExpression buildExpression(AbstractExpression parent,WordParser wordParser,String word,JPQLQueryBNF queryBNF,AbstractExpression expression,boolean tolerant){
  int index=wordParser.position() + 3;
  index+=wordParser.whitespaceCount(index);
  if (wordParser.startsWithIdentifier(Expression.IN,index)) {
    expression=new InExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.LIKE,index)) {
    expression=new LikeExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.MEMBER,index)) {
    expression=new CollectionMemberExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.BETWEEN,index)) {
    expression=new BetweenExpression(parent,expression);
  }
 else   if (wordParser.startsWithIdentifier(Expression.EXISTS,index)) {
    expression=new ExistsExpression(parent);
  }
 else {
    expression=new NotExpression(parent);
  }
  expression.parse(wordParser,tolerant);
  return expression;
}"
65037,"private JAXBContextState createContextState(Generator generator,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound,Map properties) throws Exception {
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  XMLContext xmlContext=new XMLContext(proj,loader,sessionEventListeners());
  ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(true);
  return new JAXBContextState(xmlContext,generator,typesToBeBound,properties);
}","private JAXBContextState createContextState(Generator generator,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound,Map properties) throws Exception {
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  XMLContext xmlContext=new XMLContext(proj,loader,sessionEventListeners());
  ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(true);
  for (  TypeMappingInfo typeMappingInfo : typesToBeBound) {
    Type typeMappingInfoType=typeMappingInfo.getType();
    if (typeMappingInfoType.getClass() == Class.class) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)proj.getClassDescriptor((Class)typeMappingInfoType);
      typeMappingInfo.setXmlDescriptor(xmlDescriptor);
    }
  }
  return new JAXBContextState(xmlContext,generator,typesToBeBound,properties);
}"
65038,"/** 
 * INTERNAL: Build a valid instance of java.util.Date from the given source object.
 * @param sourceObject    Valid instance of java.util.Date, String, java.sql.Timestamp, or Long
 */
protected java.util.Date convertObjectToUtilDate(Object sourceObject) throws ConversionException {
  java.util.Date date=null;
  if (sourceObject.getClass() == java.util.Date.class) {
    date=(java.util.Date)sourceObject;
  }
 else   if (sourceObject instanceof java.sql.Date) {
    date=Helper.utilDateFromSQLDate((java.sql.Date)sourceObject);
  }
 else   if (sourceObject instanceof java.sql.Time) {
    date=Helper.utilDateFromTime((java.sql.Time)sourceObject);
  }
 else   if (sourceObject instanceof String) {
    date=Helper.utilDateFromTimestamp(Helper.timestampFromString((String)sourceObject));
  }
 else   if (sourceObject instanceof java.sql.Timestamp) {
    date=Helper.utilDateFromTimestamp((java.sql.Timestamp)sourceObject);
  }
 else   if (sourceObject instanceof Calendar) {
    return ((Calendar)sourceObject).getTime();
  }
 else   if (sourceObject instanceof Long) {
    date=Helper.utilDateFromLong((Long)sourceObject);
  }
 else {
    throw ConversionException.couldNotBeConverted(sourceObject,ClassConstants.UTILDATE);
  }
  return date;
}","/** 
 * INTERNAL: Build a valid instance of java.util.Date from the given source object.
 * @param sourceObject    Valid instance of java.util.Date, String, java.sql.Timestamp, or Long
 */
protected java.util.Date convertObjectToUtilDate(Object sourceObject) throws ConversionException {
  java.util.Date date=null;
  if (sourceObject.getClass() == java.util.Date.class) {
    date=(java.util.Date)sourceObject;
  }
 else   if (sourceObject instanceof java.sql.Date) {
    date=Helper.utilDateFromSQLDate((java.sql.Date)sourceObject);
  }
 else   if (sourceObject instanceof java.sql.Time) {
    date=Helper.utilDateFromTime((java.sql.Time)sourceObject);
  }
 else   if (sourceObject instanceof String) {
    date=Helper.utilDateFromTimestamp(Helper.timestampFromString((String)sourceObject));
  }
 else   if (sourceObject instanceof java.sql.Timestamp) {
    date=Helper.utilDateFromTimestamp((java.sql.Timestamp)sourceObject);
  }
 else   if (sourceObject instanceof Calendar) {
    return ((Calendar)sourceObject).getTime();
  }
 else   if (sourceObject instanceof Long) {
    date=Helper.utilDateFromLong((Long)sourceObject);
  }
 else   if (sourceObject instanceof java.util.Date) {
    date=new java.util.Date(((java.util.Date)sourceObject).getTime());
  }
 else {
    throw ConversionException.couldNotBeConverted(sourceObject,ClassConstants.UTILDATE);
  }
  return date;
}"
65039,"/** 
 * Build descriptor and mappings for an OracleTableType argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTableTypeArg(DatabaseType dbType,Project oxProject,String objectTableName,String objectTableAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectTableAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectTableAlias,objectTableName + COLLECTION_WRAPPER_SUFFIX,nct.generateSchemaAlias(objectTableAlias),buildCustomQName(objectTableName,dbwsBuilder).getNamespaceURI());
  }
  boolean itemsMappingFound=xdesc.getMappingForAttributeName(ITEMS_MAPPING_ATTRIBUTE_NAME) == null ? false : true;
  if (!itemsMappingFound) {
    ObjectType nestedType=(ObjectType)((ObjectTableType)dbType).getEnclosedType();
    String nestedTypeAlias=nestedType.getTypeName().toLowerCase();
    String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
    addToOXProjectForObjectTypeArg(nestedType,oxProject,nestedTypeName,nestedTypeAlias);
    buildAndAddXMLCompositeCollectionMapping(xdesc,nestedTypeName);
  }
}","/** 
 * Build descriptor and mappings for an OracleTableType argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTableTypeArg(DatabaseType dbType,Project oxProject,String objectTableName,String objectTableAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectTableAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectTableAlias,objectTableName + COLLECTION_WRAPPER_SUFFIX,nct.generateSchemaAlias(objectTableAlias),buildCustomQName(objectTableName,dbwsBuilder).getNamespaceURI());
  }
  boolean itemsMappingFound=xdesc.getMappingForAttributeName(ITEMS_MAPPING_ATTRIBUTE_NAME) == null ? false : true;
  if (!itemsMappingFound) {
    DatabaseType nType=((ObjectTableType)dbType).getEnclosedType();
    if (nType.isObjectType()) {
      ObjectType oType=(ObjectType)nType;
      String nestedTypeAlias=oType.getTypeName().toLowerCase();
      String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
      addToOXProjectForObjectTypeArg(oType,oxProject,nestedTypeName,nestedTypeAlias);
      buildAndAddXMLCompositeCollectionMapping(xdesc,nestedTypeName);
    }
 else {
      buildAndAddXMLCompositeDirectCollectionMapping(xdesc,ITEMS_MAPPING_ATTRIBUTE_NAME,ITEM_MAPPING_NAME + SLASH + TEXT,getAttributeClassForDatabaseType(nType));
    }
  }
}"
65040,"/** 
 * Build descriptor and mappings for an OracleTableType argument.  The newly created descriptor will be added to the given OR project.
 */
protected void addToORProjectForObjectTableTypeArg(DatabaseType dbType,Project orProject,String objectTableName,String objectTableAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectTableAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectTableAlias,objectTableName + COLLECTION_WRAPPER_SUFFIX);
  }
  boolean itemsMappingFound=ordt.getMappingForAttributeName(ITEMS_MAPPING_ATTRIBUTE_NAME) == null ? false : true;
  if (!itemsMappingFound) {
    ObjectType nestedType=(ObjectType)((ObjectTableType)dbType).getEnclosedType();
    String nestedTypeAlias=nestedType.getTypeName().toLowerCase();
    String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
    addToORProjectForObjectTypeArg(nestedType,orProject,nestedTypeName,nestedTypeAlias);
    buildAndAddObjectArrayMapping(ordt,ITEMS_MAPPING_ATTRIBUTE_NAME,ITEMS_MAPPING_FIELD_NAME,nestedTypeName,nestedTypeAlias.toUpperCase());
  }
}","/** 
 * Build descriptor and mappings for an OracleTableType argument.  The newly created descriptor will be added to the given OR project.
 */
protected void addToORProjectForObjectTableTypeArg(DatabaseType dbType,Project orProject,String objectTableName,String objectTableAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectTableAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectTableAlias,objectTableName + COLLECTION_WRAPPER_SUFFIX);
  }
  boolean itemsMappingFound=ordt.getMappingForAttributeName(ITEMS_MAPPING_ATTRIBUTE_NAME) == null ? false : true;
  if (!itemsMappingFound) {
    DatabaseType nestedType=((ObjectTableType)dbType).getEnclosedType();
    if (nestedType.isObjectType()) {
      ObjectType oType=(ObjectType)nestedType;
      String nestedTypeAlias=oType.getTypeName().toLowerCase();
      String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
      addToORProjectForObjectTypeArg(oType,orProject,nestedTypeName,nestedTypeAlias);
      buildAndAddObjectArrayMapping(ordt,ITEMS_MAPPING_ATTRIBUTE_NAME,ITEMS_MAPPING_FIELD_NAME,nestedTypeName,nestedTypeAlias.toUpperCase());
    }
 else {
      buildAndAddArrayMapping(ordt,ITEMS_MAPPING_ATTRIBUTE_NAME,ITEMS_MAPPING_FIELD_NAME,objectTableAlias.toUpperCase());
    }
  }
}"
65041,"public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    boolean isPrimitiveWrapper=isPrimitiveWrapper(clazz);
    UnmarshalRecord unmarshalRecord;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    if (isPrimitiveWrapper) {
      unmarshalRecord=new XMLRootRecord(clazz);
      unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
    }
 else     if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      xmlReader.parse(inputSource);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      session=xmlContext.getReadSession(clazz);
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    setContentHandler(extendedXMLReader,unmarshalRecord);
    extendedXMLReader.setLexicalHandler(unmarshalRecord);
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}","public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    UnmarshalRecord unmarshalRecord=null;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    boolean isPrimitiveWrapper=false;
    if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      xmlReader.parse(inputSource);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      try {
        session=xmlContext.getReadSession(clazz);
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
        unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
      }
 catch (      XMLMarshalException xme) {
        if (xme.getErrorCode() == XMLMarshalException.DESCRIPTOR_NOT_FOUND_IN_PROJECT) {
          isPrimitiveWrapper=isPrimitiveWrapper(clazz);
          if (isPrimitiveWrapper) {
            unmarshalRecord=new XMLRootRecord(clazz);
            unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
          }
 else {
            throw xme;
          }
        }
 else {
          throw xme;
        }
      }
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    setContentHandler(extendedXMLReader,unmarshalRecord);
    extendedXMLReader.setLexicalHandler(unmarshalRecord);
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65042,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
          if (unmarshalRecord.isNil()) {
            getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil() && unmarshalRecord.isNil()) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
65043,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (xmlField.getLastXPathFragment().nameIsText()) {
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      String namespaceURI=null;
      int colonIndex=type.indexOf(XMLConstants.COLON);
      if (colonIndex > -1) {
        String prefix=type.substring(0,colonIndex);
        namespaceURI=unmarshalRecord.resolveNamespacePrefix(prefix);
        type=type.substring(colonIndex + 1);
      }
      unmarshalRecord.setTypeQName(new QName(namespaceURI,type));
    }
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil() && xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
  }
 else   if (xmlField.getLastXPathFragment().isAttribute()) {
    if (!this.xmlCompositeDirectCollectionMapping.usesSingleNode()) {
      String namespaceURI=xmlField.getLastXPathFragment().getNamespaceURI();
      if (namespaceURI == null) {
        namespaceURI=XMLConstants.EMPTY_STRING;
      }
      String value=atts.getValue(namespaceURI,xmlField.getLastXPathFragment().getLocalName());
      Object collection=unmarshalRecord.getContainerInstance(this);
      addUnmarshalValue(unmarshalRecord,value,collection);
    }
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (xmlField.getLastXPathFragment().nameIsText()) {
    String type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (null != type) {
      String namespaceURI=null;
      int colonIndex=type.indexOf(XMLConstants.COLON);
      if (colonIndex > -1) {
        String prefix=type.substring(0,colonIndex);
        namespaceURI=unmarshalRecord.resolveNamespacePrefix(prefix);
        type=type.substring(colonIndex + 1);
      }
      unmarshalRecord.setTypeQName(new QName(namespaceURI,type));
    }
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil() && unmarshalRecord.isNil()) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
  }
 else   if (xmlField.getLastXPathFragment().isAttribute()) {
    if (!this.xmlCompositeDirectCollectionMapping.usesSingleNode()) {
      String namespaceURI=xmlField.getLastXPathFragment().getNamespaceURI();
      if (namespaceURI == null) {
        namespaceURI=XMLConstants.EMPTY_STRING;
      }
      String value=atts.getValue(namespaceURI,xmlField.getLastXPathFragment().getLocalName());
      Object collection=unmarshalRecord.getContainerInstance(this);
      addUnmarshalValue(unmarshalRecord,value,collection);
    }
  }
  return true;
}"
65044,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    if (unmarshalRecord.isNil() || xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(unmarshalRecord.getAttributes())) {
      return;
    }
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    value=null;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  if (value != null && value.getClass() == ClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    if (unmarshalRecord.isNil()) {
      return;
    }
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    value=null;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  if (value != null && value.getClass() == ClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
65045,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil() && unmarshalRecord.isNil()) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
65046,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node && xPathNode.getTextNode() != null) {
      if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
        node=xPathNode.getTextNode();
      }
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if ((qname != null) && (qname.length() > 0)) {
              int idx=qname.indexOf(XMLConstants.COLON);
              if (idx > 0) {
                attLocalName=qname.substring(idx + 1,qname.length());
                String attPrefix=qname.substring(0,idx);
                if (attPrefix.equals(XMLConstants.XMLNS)) {
                  attNamespace=XMLConstants.XMLNS_URL;
                }
              }
 else {
                attLocalName=qname;
                if (attLocalName.equals(XMLConstants.XMLNS)) {
                  attNamespace=XMLConstants.XMLNS_URL;
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node && xPathNode.getTextNode() != null) {
      if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
        node=xPathNode.getTextNode();
      }
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) != null;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if ((qname != null) && (qname.length() > 0)) {
              int idx=qname.indexOf(XMLConstants.COLON);
              if (idx > 0) {
                attLocalName=qname.substring(idx + 1,qname.length());
                String attPrefix=qname.substring(0,idx);
                if (attPrefix.equals(XMLConstants.XMLNS)) {
                  attNamespace=XMLConstants.XMLNS_URL;
                }
              }
 else {
                attLocalName=qname;
                if (attLocalName.equals(XMLConstants.XMLNS)) {
                  attNamespace=XMLConstants.XMLNS_URL;
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65047,"@Test public final void test_TypeExpression_InvalidExpression() throws Exception {
  String jpqlQuery=""String_Node_Str"";
  int startPosition=""String_Node_Str"".length();
  int endPosition=""String_Node_Str"".length();
  List<JPQLQueryProblem> problems=validate(jpqlQuery);
  testHasOnlyOneProblem(problems,TypeExpression_InvalidExpression,startPosition,endPosition);
}","@Test public final void test_TypeExpression_InvalidExpression() throws Exception {
  String jpqlQuery=""String_Node_Str"";
  List<JPQLQueryProblem> problems=validate(jpqlQuery);
  testDoesNotHaveProblem(problems,TypeExpression_InvalidExpression);
}"
65048,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_EMP_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_EMP_TABLE.length; i++) {
        stmt.addBatch(POPULATE_EMP_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_REF_CURSOR_PKG2,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_PKG,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
  for (  String ddl : builder.getTypeDDL()) {
    runDdl(conn,ddl,ddlDebug);
  }
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_EMP_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_EMP_TABLE.length; i++) {
        stmt.addBatch(POPULATE_EMP_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_REF_CURSOR_PKG3,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_PKG2,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_PKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_PKG,ddlDebug);
    runDdl(conn,CREATE_REF_CURSOR_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
  for (  String ddl : builder.getTypeDDL()) {
    runDdl(conn,ddl,ddlDebug);
  }
}"
65049,"public void testCursorFromOtherPkgFunc(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(EMP_TABLE_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void testCursorFromOtherPkgFunc(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",101);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(EMP_101_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65050,"@AfterClass public static void tearDown(){
  for (  String ddl : builder.getTypeDropDDL()) {
    try {
      int lastIdx=ddl.lastIndexOf(""String_Node_Str"");
      if (lastIdx == (ddl.length() - 1)) {
        ddl=ddl.substring(0,ddl.length() - 1);
      }
    }
 catch (    Exception xxx) {
    }
    runDdl(conn,ddl,ddlDebug);
  }
  if (ddlDrop) {
    runDdl(conn,DROP_REF_CURSOR_BODY,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG2,ddlDebug);
    runDdl(conn,DROP_EMP_TABLE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  for (  String ddl : builder.getTypeDropDDL()) {
    try {
      int lastIdx=ddl.lastIndexOf(""String_Node_Str"");
      if (lastIdx == (ddl.length() - 1)) {
        ddl=ddl.substring(0,ddl.length() - 1);
      }
    }
 catch (    Exception xxx) {
    }
    runDdl(conn,ddl,ddlDebug);
  }
  if (ddlDrop) {
    runDdl(conn,DROP_REF_CURSOR_BODY,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG2_BODY,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG2,ddlDebug);
    runDdl(conn,DROP_REF_CURSOR_PKG3,ddlDebug);
    runDdl(conn,DROP_EMP_TABLE,ddlDebug);
  }
}"
65051,"/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType.isPLSQLCursorType()) {
    if (dType.isArgumentType()) {
      dType=((ArgumentType)dType).getEnclosedType();
    }
    PLSQLCursorType pType=(PLSQLCursorType)dType;
    String typeName=pType.getCursorName();
    if (catalog != null) {
      typeName=(catalog + DOT).concat(typeName);
    }
    return new PLSQLCursor(typeName);
  }
  if (dType.isArgumentType()) {
    dType=((ArgumentType)dType).getEnclosedType();
  }
 else   if (dType.isTYPEType()) {
    dType=((TYPEType)dType).getEnclosedType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=typeName.contains(PERCENT) ? typeName.replace(PERCENT,UNDERSCORE) : typeName;
    String javaTypeName=compatibleType.toLowerCase();
    if (dType.isPLSQLType()) {
      if (catalog != null && !typeName.contains(ROWTYPE_STR)) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType.isPLSQLRecordType()) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getEnclosedType().isPrecisionType()) {
            PrecisionType precisionType=(PrecisionType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getEnclosedType().isSizedType()) {
            SizedType sizedType=(SizedType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getEnclosedType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getEnclosedType(),catalog));
      return plsqlCollection;
    }
    if (dType.isVArrayType()) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType.isObjectType()) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(getGeneratedJavaClassName(javaTypeName,dbwsBuilder.getProjectName()));
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getEnclosedType()));
      }
      return objType;
    }
    if (dType.isObjectTableType()) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType.isScalar()) {
    org.eclipse.persistence.internal.helper.DatabaseType theType=OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseType)dType).getTypeName());
    if (theType != null) {
      return theType;
    }
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}","/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType.isPLSQLType()) {
    PLSQLType pType=(PLSQLType)dType;
    catalog=pType.getParentType().getPackageName();
  }
  if (dType.isPLSQLCursorType()) {
    if (dType.isArgumentType()) {
      dType=((ArgumentType)dType).getEnclosedType();
    }
    PLSQLCursorType pType=(PLSQLCursorType)dType;
    String typeName=pType.getCursorName();
    if (catalog != null) {
      typeName=(catalog + DOT).concat(typeName);
    }
    return new PLSQLCursor(typeName);
  }
  if (dType.isArgumentType()) {
    dType=((ArgumentType)dType).getEnclosedType();
  }
 else   if (dType.isTYPEType()) {
    dType=((TYPEType)dType).getEnclosedType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=typeName.contains(PERCENT) ? typeName.replace(PERCENT,UNDERSCORE) : typeName;
    String javaTypeName=compatibleType.toLowerCase();
    if (dType.isPLSQLType()) {
      if (catalog != null && !typeName.contains(ROWTYPE_STR)) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType.isPLSQLRecordType()) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getEnclosedType().isPrecisionType()) {
            PrecisionType precisionType=(PrecisionType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getEnclosedType().isSizedType()) {
            SizedType sizedType=(SizedType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getEnclosedType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getEnclosedType(),catalog));
      return plsqlCollection;
    }
    if (dType.isVArrayType()) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType.isObjectType()) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(getGeneratedJavaClassName(javaTypeName,dbwsBuilder.getProjectName()));
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getEnclosedType()));
      }
      return objType;
    }
    if (dType.isObjectTableType()) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType.isScalar()) {
    org.eclipse.persistence.internal.helper.DatabaseType theType=OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseType)dType).getTypeName());
    if (theType != null) {
      return theType;
    }
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}"
65052,"private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    rootFragment=new XPathFragment(xmlRootLocalName,marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
    rootFragment.setNamespaceURI(xmlRootUri);
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setPrefix(xmlRootPrefix);
        }
      }
 else {
        if (marshalRecord.isNamespaceAware()) {
          String xmlRootPrefix=""String_Node_Str"";
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
          rootFragment.setXPath(xmlRootPrefix + marshalRecord.getNamespaceSeparator() + xmlRootLocalName);
        }
 else {
          rootFragment.setXPath(xmlRootLocalName);
        }
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}","private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    rootFragment=new XPathFragment();
    rootFragment.setLocalName(xmlRootLocalName);
    rootFragment.setNamespaceURI(xmlRootUri);
    rootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    rootFragment.setNamespaceSeparator(marshalRecord.getNamespaceSeparator());
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setPrefix(xmlRootPrefix);
        }
      }
 else {
        if (marshalRecord.isNamespaceAware()) {
          String xmlRootPrefix=""String_Node_Str"";
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
          rootFragment.setXPath(xmlRootPrefix + marshalRecord.getNamespaceSeparator() + xmlRootLocalName);
        }
 else {
          rootFragment.setXPath(xmlRootLocalName);
        }
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}"
65053,"public ValidatingMarshalRecord(MarshalRecord marshalRecord,XMLMarshaller xmlMarshaller){
  this.marshalRecord=marshalRecord;
  Schema schema=xmlMarshaller.getSchema();
  ValidatorHandler validatorHandler=schema.newValidatorHandler();
  validatorHandler.setErrorHandler(new ValidatingMarshalRecordErrorHandler(marshalRecord,xmlMarshaller.getErrorHandler()));
  validatingRecord=new ContentHandlerRecord();
  validatingRecord.setMarshaller(xmlMarshaller);
  validatingRecord.setContentHandler(validatorHandler);
}","public ValidatingMarshalRecord(MarshalRecord marshalRecord,XMLMarshaller xmlMarshaller){
  this.marshalRecord=marshalRecord;
  Schema schema=xmlMarshaller.getSchema();
  ValidatorHandler validatorHandler=schema.newValidatorHandler();
  validatorHandler.setErrorHandler(new ValidatingMarshalRecordErrorHandler(marshalRecord,xmlMarshaller.getErrorHandler()));
  if (xmlMarshaller.isFragment()) {
    try {
      validatorHandler.startDocument();
    }
 catch (    SAXException e) {
    }
  }
  validatingRecord=new ContentHandlerRecord();
  validatingRecord.setMarshaller(xmlMarshaller);
  validatingRecord.setContentHandler(validatorHandler);
}"
65054,"/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType.isPLSQLCursorType()) {
    if (dType.isArgumentType()) {
      dType=((ArgumentType)dType).getEnclosedType();
    }
    PLSQLCursorType pType=(PLSQLCursorType)dType;
    String typeName=pType.getCursorName();
    if (catalog != null) {
      typeName=(catalog + DOT).concat(typeName);
    }
    return new PLSQLCursor(typeName);
  }
  if (dType.isArgumentType()) {
    dType=((ArgumentType)dType).getEnclosedType();
  }
 else   if (dType.isTYPEType()) {
    dType=((TYPEType)dType).getEnclosedType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=typeName.contains(PERCENT) ? typeName.replace(PERCENT,UNDERSCORE) : typeName;
    String javaTypeName=(dType.getTypeName()).toLowerCase();
    if (dType.isPLSQLType()) {
      if (catalog != null && !typeName.contains(ROWTYPE_STR)) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType.isPLSQLRecordType()) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getEnclosedType().isPrecisionType()) {
            PrecisionType precisionType=(PrecisionType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getEnclosedType().isSizedType()) {
            SizedType sizedType=(SizedType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getEnclosedType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getEnclosedType(),catalog));
      return plsqlCollection;
    }
    if (dType.isVArrayType()) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType.isObjectType()) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(getGeneratedJavaClassName(javaTypeName,dbwsBuilder.getProjectName()));
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getEnclosedType()));
      }
      return objType;
    }
    if (dType.isObjectTableType()) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType.isScalar()) {
    org.eclipse.persistence.internal.helper.DatabaseType theType=OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseType)dType).getTypeName());
    if (theType != null) {
      return theType;
    }
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}","/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType.isPLSQLCursorType()) {
    if (dType.isArgumentType()) {
      dType=((ArgumentType)dType).getEnclosedType();
    }
    PLSQLCursorType pType=(PLSQLCursorType)dType;
    String typeName=pType.getCursorName();
    if (catalog != null) {
      typeName=(catalog + DOT).concat(typeName);
    }
    return new PLSQLCursor(typeName);
  }
  if (dType.isArgumentType()) {
    dType=((ArgumentType)dType).getEnclosedType();
  }
 else   if (dType.isTYPEType()) {
    dType=((TYPEType)dType).getEnclosedType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=typeName.contains(PERCENT) ? typeName.replace(PERCENT,UNDERSCORE) : typeName;
    String javaTypeName=compatibleType.toLowerCase();
    if (dType.isPLSQLType()) {
      if (catalog != null && !typeName.contains(ROWTYPE_STR)) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType.isPLSQLRecordType()) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getEnclosedType().isPrecisionType()) {
            PrecisionType precisionType=(PrecisionType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getEnclosedType().isSizedType()) {
            SizedType sizedType=(SizedType)fld.getEnclosedType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getEnclosedType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getEnclosedType(),catalog));
      return plsqlCollection;
    }
    if (dType.isVArrayType()) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType.isObjectType()) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(getGeneratedJavaClassName(javaTypeName,dbwsBuilder.getProjectName()));
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getEnclosedType()));
      }
      return objType;
    }
    if (dType.isObjectTableType()) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType.isScalar()) {
    org.eclipse.persistence.internal.helper.DatabaseType theType=OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseType)dType).getTypeName());
    if (theType != null) {
      return theType;
    }
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}"
65055,"public static QName buildCustomQName(String typeString,DBWSBuilder builder){
  QName qName=null;
  String nsURI=null;
  String prefix=null;
  String localPart=null;
  int colonIdx=typeString.indexOf(COLON);
  if (colonIdx > 0) {
    prefix=typeString.substring(0,colonIdx);
    nsURI=builder.schema.getNamespaceResolver().resolveNamespacePrefix(prefix);
    if (prefix.equalsIgnoreCase(SCHEMA_PREFIX)) {
      nsURI=W3C_XML_SCHEMA_NS_URI;
    }
 else {
      nsURI=DEFAULT_NS_PREFIX;
    }
    localPart=typeString.substring(colonIdx + 1);
    if (W3C_XML_SCHEMA_NS_URI.equals(nsURI)) {
      qName=SCHEMA_QNAMES.get(localPart);
      if (qName == null) {
        qName=new QName(W3C_XML_SCHEMA_NS_URI,localPart,prefix == null ? DEFAULT_NS_PREFIX : prefix);
      }
    }
 else {
      qName=new QName(nsURI == null ? NULL_NS_URI : nsURI,localPart,prefix == null ? DEFAULT_NS_PREFIX : prefix);
    }
  }
 else {
    qName=qNameFromString(OPEN_PAREN + builder.getTargetNamespace() + CLOSE_PAREN+ typeString,builder.schema);
  }
  return qName;
}","public static QName buildCustomQName(String typeString,DBWSBuilder builder){
  if (typeString.contains(PERCENT)) {
    typeString=typeString.replace(PERCENT,UNDERSCORE);
  }
  QName qName=null;
  String nsURI=null;
  String prefix=null;
  String localPart=null;
  int colonIdx=typeString.indexOf(COLON);
  if (colonIdx > 0) {
    prefix=typeString.substring(0,colonIdx);
    nsURI=builder.schema.getNamespaceResolver().resolveNamespacePrefix(prefix);
    if (prefix.equalsIgnoreCase(SCHEMA_PREFIX)) {
      nsURI=W3C_XML_SCHEMA_NS_URI;
    }
 else {
      nsURI=DEFAULT_NS_PREFIX;
    }
    localPart=typeString.substring(colonIdx + 1);
    if (W3C_XML_SCHEMA_NS_URI.equals(nsURI)) {
      qName=SCHEMA_QNAMES.get(localPart);
      if (qName == null) {
        qName=new QName(W3C_XML_SCHEMA_NS_URI,localPart,prefix == null ? DEFAULT_NS_PREFIX : prefix);
      }
    }
 else {
      qName=new QName(nsURI == null ? NULL_NS_URI : nsURI,localPart,prefix == null ? DEFAULT_NS_PREFIX : prefix);
    }
  }
 else {
    qName=qNameFromString(OPEN_PAREN + builder.getTargetNamespace() + CLOSE_PAREN+ typeString,builder.schema);
  }
  return qName;
}"
65056,"/** 
 * Build an XMLDescriptor based on a given descriptor alias, java class name schema alias, and target namespace.
 */
protected XMLDescriptor buildNewXMLDescriptor(String objectAlias,String javaClassName,String userType,String targetNamespace){
  XMLDescriptor xdesc=new XMLDescriptor();
  xdesc.setAlias(objectAlias);
  xdesc.setJavaClassName(javaClassName);
  xdesc.getQueryManager();
  XMLSchemaURLReference schemaReference=new XMLSchemaURLReference();
  schemaReference.setSchemaContext(SLASH + userType);
  schemaReference.setType(org.eclipse.persistence.platform.xml.XMLSchemaReference.COMPLEX_TYPE);
  xdesc.setSchemaReference(schemaReference);
  NamespaceResolver nr=new NamespaceResolver();
  nr.setDefaultNamespaceURI(targetNamespace);
  xdesc.setNamespaceResolver(nr);
  if (userType.contains(PERCENT)) {
    xdesc.setDefaultRootElement(userType.replace(PERCENT,UNDERSCORE));
  }
 else {
    xdesc.setDefaultRootElement(userType);
  }
  return xdesc;
}","/** 
 * Build an XMLDescriptor based on a given descriptor alias, java class name schema alias, and target namespace.
 */
protected XMLDescriptor buildNewXMLDescriptor(String objectAlias,String javaClassName,String userType,String targetNamespace){
  XMLDescriptor xdesc=new XMLDescriptor();
  xdesc.setAlias(objectAlias);
  xdesc.setJavaClassName(javaClassName);
  xdesc.getQueryManager();
  XMLSchemaURLReference schemaReference=new XMLSchemaURLReference();
  schemaReference.setSchemaContext(SLASH + userType);
  schemaReference.setType(org.eclipse.persistence.platform.xml.XMLSchemaReference.COMPLEX_TYPE);
  xdesc.setSchemaReference(schemaReference);
  NamespaceResolver nr=new NamespaceResolver();
  nr.setDefaultNamespaceURI(targetNamespace);
  xdesc.setNamespaceResolver(nr);
  xdesc.setDefaultRootElement(userType);
  return xdesc;
}"
65057,"public void addToOROXProjectsForComplexTypes(List<CompositeDatabaseType> types,Project orProject,Project oxProject){
  for (  DatabaseType dbType : types) {
    String name;
    String alias;
    if (dbType.isPLSQLType()) {
      String catalogPattern=((PLSQLType)dbType).getParentType().getPackageName();
      String targetTypeName;
      if (catalogPattern == null) {
        name=dbType.getTypeName();
        targetTypeName=dbType.getTypeName();
      }
 else {
        name=catalogPattern + DOT + dbType.getTypeName();
        targetTypeName=catalogPattern + UNDERSCORE + dbType.getTypeName();
      }
      alias=targetTypeName.toLowerCase();
      if (dbType.isPLSQLRecordType()) {
        addToOXProjectForPLSQLRecordArg(dbType,oxProject,name,alias,targetTypeName,catalogPattern);
        addToORProjectForPLSQLRecordArg(dbType,orProject,name,alias,targetTypeName,catalogPattern);
      }
 else {
        addToOXProjectForPLSQLTableArg(dbType,oxProject,name,alias,targetTypeName,catalogPattern);
        addToORProjectForPLSQLTableArg(dbType,orProject,name,alias,targetTypeName,catalogPattern);
      }
    }
 else {
      if (Util.isTypeComplex(dbType)) {
        name=getGeneratedJavaClassName(dbType.getTypeName().toLowerCase(),dbwsBuilder.getProjectName());
      }
 else {
        name=dbType.getTypeName();
      }
      alias=dbType.getTypeName().toLowerCase();
      if (dbType.isVArrayType()) {
        addToOXProjectForVArrayArg(dbType,oxProject,name,alias);
        addToORProjectForVArrayArg(dbType,orProject,name,alias);
      }
 else       if (dbType.isObjectType()) {
        addToOXProjectForObjectTypeArg(dbType,oxProject,name,alias);
        addToORProjectForObjectTypeArg(dbType,orProject,name,alias);
      }
 else       if (dbType.isObjectTableType()) {
        addToOXProjectForObjectTableTypeArg(dbType,oxProject,name,alias);
        addToORProjectForObjectTableTypeArg(dbType,orProject,name,alias);
      }
    }
  }
}","public void addToOROXProjectsForComplexTypes(List<CompositeDatabaseType> types,Project orProject,Project oxProject){
  for (  DatabaseType dbType : types) {
    String name;
    String alias;
    if (dbType.isPLSQLType()) {
      String catalogPattern=((PLSQLType)dbType).getParentType().getPackageName();
      String targetTypeName;
      if (catalogPattern == null) {
        name=dbType.getTypeName();
        targetTypeName=dbType.getTypeName();
      }
 else {
        name=catalogPattern + DOT + dbType.getTypeName();
        targetTypeName=catalogPattern + UNDERSCORE + dbType.getTypeName();
      }
      alias=targetTypeName.toLowerCase();
      name=name.replace(PERCENT,UNDERSCORE);
      targetTypeName=targetTypeName.replace(PERCENT,UNDERSCORE);
      if (dbType.isPLSQLRecordType()) {
        addToOXProjectForPLSQLRecordArg(dbType,oxProject,name,alias,targetTypeName,catalogPattern);
        addToORProjectForPLSQLRecordArg(dbType,orProject,name,alias,targetTypeName,catalogPattern);
      }
 else {
        addToOXProjectForPLSQLTableArg(dbType,oxProject,name,alias,targetTypeName,catalogPattern);
        addToORProjectForPLSQLTableArg(dbType,orProject,name,alias,targetTypeName,catalogPattern);
      }
    }
 else {
      if (Util.isTypeComplex(dbType)) {
        name=getGeneratedJavaClassName(dbType.getTypeName().toLowerCase(),dbwsBuilder.getProjectName());
      }
 else {
        name=dbType.getTypeName();
      }
      alias=dbType.getTypeName().toLowerCase();
      if (dbType.isVArrayType()) {
        addToOXProjectForVArrayArg(dbType,oxProject,name,alias);
        addToORProjectForVArrayArg(dbType,orProject,name,alias);
      }
 else       if (dbType.isObjectType()) {
        addToOXProjectForObjectTypeArg(dbType,oxProject,name,alias);
        addToORProjectForObjectTypeArg(dbType,orProject,name,alias);
      }
 else       if (dbType.isObjectTableType()) {
        addToOXProjectForObjectTableTypeArg(dbType,oxProject,name,alias);
        addToORProjectForObjectTableTypeArg(dbType,orProject,name,alias);
      }
    }
  }
}"
65058,"public void endPrefixMappings(NamespaceResolver namespaceResolver){
  if (namespaceResolver != null && namespaceResolver.hasPrefixesToNamespaces()) {
    for (    Entry<String,String> entry : namespaceResolver.getPrefixesToNamespaces().entrySet()) {
      endPrefixMapping(entry.getKey());
    }
  }
}","public void endPrefixMappings(NamespaceResolver namespaceResolver){
}"
65059,"public void populate(DatabaseSession session){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Cat cat=Cat.example1();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  Dog dog=Dog.example1();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  cat=Cat.example2();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  dog=Dog.example2();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  cat=Cat.example3();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  dog=Dog.example3();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  Company company=Company.example1();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  manager.registerObject(((Vector)company.getVehicles().getValue()).firstElement(),""String_Node_Str"");
  company=Company.example2();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  company=Company.example3();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  Person person=Person.example1();
  session.writeObject(person);
  manager.registerObject(person,""String_Node_Str"");
  session.writeObject(A_King2.exp1());
  session.writeObject(A_King2.exp2());
  session.writeObject(A_1_King2.exp3());
  session.writeObject(A_2_King2.exp4());
  session.writeObject(A_2_1_King2.exp5());
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  person=Person.example2();
  unitOfWork.registerObject(person);
  unitOfWork.commit();
  manager.registerObject(person,""String_Node_Str"");
  manager.registerObject(person.bestFriend,""String_Node_Str"");
  manager.registerObject(person.representitive,""String_Node_Str"");
  person=Person.example3();
  session.writeObject(person);
  manager.registerObject(person,""String_Node_Str"");
  Computer computer=Computer.example1();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example2();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example3();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example4();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example5();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  JavaProgrammer JP=JavaProgrammer.example1();
  session.writeObject(JP);
  manager.registerObject(JP,""String_Node_Str"");
  JP=JavaProgrammer.example2();
  session.writeObject(JP);
  manager.registerObject(JP,""String_Node_Str"");
  unitOfWork=session.acquireUnitOfWork();
  Alligator alligator=new Alligator();
  alligator.setFavoriteSwamp(""String_Node_Str"");
  alligator.setLatestVictim(JavaProgrammer.steve());
  unitOfWork.registerObject(alligator);
  manager.registerObject(alligator,""String_Node_Str"");
  unitOfWork.commit();
  unitOfWork=session.acquireUnitOfWork();
  Entomologist bugguy=new Entomologist();
  bugguy.setId((int)System.currentTimeMillis());
  bugguy.setName(""String_Node_Str"");
  bugguy=(Entomologist)unitOfWork.registerObject(bugguy);
  Insect insect=new GrassHopper();
  insect.setIn_numberOfLegs(4);
  insect.setEntomologist(bugguy);
  bugguy.getInsectCollection().add(insect);
  unitOfWork.commit();
}","public void populate(DatabaseSession session){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Cat cat=Cat.example1();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  Dog dog=Dog.example1();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  cat=Cat.example2();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  dog=Dog.example2();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  cat=Cat.example3();
  session.writeObject(cat);
  manager.registerObject(cat,""String_Node_Str"");
  dog=Dog.example3();
  session.writeObject(dog);
  manager.registerObject(dog,""String_Node_Str"");
  Company company=Company.example1();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  manager.registerObject(((Vector)company.getVehicles().getValue()).firstElement(),""String_Node_Str"");
  company=Company.example2();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  company=Company.example3();
  session.writeObject(company);
  manager.registerObject(company,""String_Node_Str"");
  Person person=Person.example1();
  session.writeObject(person);
  manager.registerObject(person,""String_Node_Str"");
  session.writeObject(A_King2.exp1());
  session.writeObject(A_King2.exp2());
  session.writeObject(A_1_King2.exp3());
  session.writeObject(A_2_King2.exp4());
  session.writeObject(A_2_1_King2.exp5());
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  person=Person.example2();
  unitOfWork.registerObject(person);
  unitOfWork.commit();
  manager.registerObject(person,""String_Node_Str"");
  manager.registerObject(person.bestFriend,""String_Node_Str"");
  manager.registerObject(person.representitive,""String_Node_Str"");
  person=Person.example3();
  session.writeObject(person);
  manager.registerObject(person,""String_Node_Str"");
  Computer computer=Computer.example1();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example2();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example3();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example4();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  computer=Computer.example5();
  session.writeObject(computer);
  manager.registerObject(computer,""String_Node_Str"");
  JavaProgrammer JP=JavaProgrammer.example1();
  session.writeObject(JP);
  manager.registerObject(JP,""String_Node_Str"");
  JP=JavaProgrammer.example2();
  session.writeObject(JP);
  manager.registerObject(JP,""String_Node_Str"");
  unitOfWork=session.acquireUnitOfWork();
  Alligator alligator=new Alligator();
  alligator.setFavoriteSwamp(""String_Node_Str"");
  alligator.setLatestVictim(JavaProgrammer.steve());
  unitOfWork.registerObject(alligator);
  manager.registerObject(alligator,""String_Node_Str"");
  unitOfWork.commit();
  unitOfWork=session.acquireUnitOfWork();
  Entomologist bugguy=new Entomologist();
  bugguy.setId((int)System.currentTimeMillis());
  bugguy.setName(""String_Node_Str"");
  bugguy=(Entomologist)unitOfWork.registerObject(bugguy);
  GrassHopper insect=new GrassHopper();
  insect.setIn_numberOfLegs(4);
  insect.setGh_maximumJump(5);
  insect.setEntomologist(bugguy);
  bugguy.getInsectCollection().add(insect);
  unitOfWork.commit();
}"
65060,"public static TestSuite getReadAllTestSuite(){
  TestSuite suite=getSRGReadAllTestSuite();
  suite.addTest(new QueryInheritanceTest());
  suite.addTest(new JoinWithSecondaryTableTest());
  return suite;
}","public static TestSuite getReadAllTestSuite(){
  TestSuite suite=getSRGReadAllTestSuite();
  suite.addTest(new QueryInheritanceTest());
  suite.addTest(new JoinWithSecondaryTableTest());
  suite.addTest(new PaginationInheritanceTest());
  return suite;
}"
65061,"/** 
 * Return the appropriate select statement containing the fields in the table.
 */
protected SQLSelectStatement buildNormalSelectStatement(){
  Map clonedExpressions=new IdentityHashMap();
  SQLSelectStatement selectStatement=buildBaseSelectStatement(false,clonedExpressions);
  ObjectLevelReadQuery query=((ObjectLevelReadQuery)getQuery());
  if (getDescriptor().hasInheritance()) {
    getDescriptor().getInheritancePolicy().appendWithAllSubclassesExpression(selectStatement);
    if ((!query.isReportQuery()) && query.shouldOuterJoinSubclasses()) {
      selectStatement.getExpressionBuilder().setShouldUseOuterJoinForMultitableInheritance(true);
    }
  }
  selectStatement.setFields(getSelectionFields(selectStatement,true));
  selectStatement.normalize(getSession(),getDescriptor(),clonedExpressions);
  if (((ObjectLevelReadQuery)getQuery()).hasJoining()) {
    ((ObjectLevelReadQuery)getQuery()).getJoinedAttributeManager().computeJoiningMappingIndexes(true,getSession(),0);
  }
  return selectStatement;
}","/** 
 * Return the appropriate select statement containing the fields in the table.
 */
protected SQLSelectStatement buildNormalSelectStatement(){
  Map clonedExpressions=new IdentityHashMap();
  SQLSelectStatement selectStatement=buildBaseSelectStatement(false,clonedExpressions);
  ObjectLevelReadQuery query=((ObjectLevelReadQuery)getQuery());
  boolean includeAllSubclassesFields=true;
  if (getDescriptor().hasInheritance()) {
    getDescriptor().getInheritancePolicy().appendWithAllSubclassesExpression(selectStatement);
    if ((!query.isReportQuery()) && query.shouldOuterJoinSubclasses()) {
      selectStatement.getExpressionBuilder().setShouldUseOuterJoinForMultitableInheritance(true);
    }
    includeAllSubclassesFields=shouldIncludeAllSubclassFields(selectStatement);
  }
  selectStatement.setFields(getSelectionFields(selectStatement,includeAllSubclassesFields));
  selectStatement.normalize(getSession(),getDescriptor(),clonedExpressions);
  if (((ObjectLevelReadQuery)getQuery()).hasJoining()) {
    ((ObjectLevelReadQuery)getQuery()).getJoinedAttributeManager().computeJoiningMappingIndexes(true,getSession(),0);
  }
  return selectStatement;
}"
65062,"public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  if (descriptor.hasInheritance() && !xsiTypeIndicatorField) {
    xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      if (leafType == null && referenceDescriptor == null) {
        QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
        writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        if (leafType != null) {
          QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
          if (!ctxQName.equals(leafType)) {
            QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
            writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      Object classIndicatorValueObject=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      QName classIndicatorQName=null;
      if (classIndicatorValueObject instanceof QName) {
        classIndicatorQName=(QName)classIndicatorValueObject;
      }
 else {
        String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
        int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
        String localName=null;
        String prefix=null;
        if (nsindex != -1) {
          localName=classIndicatorValue.substring(nsindex + 1);
          prefix=classIndicatorValue.substring(0,nsindex);
        }
 else {
          localName=classIndicatorValue;
        }
        String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        classIndicatorQName=new QName(namespaceURI,localName);
      }
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        if (xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        }
 else {
          writeXsiTypeAttribute(xmlDescriptor,record,classIndicatorQName,addToNamespaceResolver);
        }
        return true;
      }
      return false;
    }
  }
  return false;
}","public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  if (descriptor.hasInheritance() && !xsiTypeIndicatorField) {
    xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
    return true;
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      if (leafType == null && referenceDescriptor == null) {
        QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
        writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        if (leafType != null) {
          QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
          if (!ctxQName.equals(leafType)) {
            QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
            writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      Object classIndicatorValueObject=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      QName classIndicatorQName=null;
      if (classIndicatorValueObject instanceof QName) {
        classIndicatorQName=(QName)classIndicatorValueObject;
      }
 else {
        String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
        int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
        String localName=null;
        String prefix=null;
        if (nsindex != -1) {
          localName=classIndicatorValue.substring(nsindex + 1);
          prefix=classIndicatorValue.substring(0,nsindex);
        }
 else {
          localName=classIndicatorValue;
        }
        String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        classIndicatorQName=new QName(namespaceURI,localName);
      }
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        if (xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        }
 else {
          writeXsiTypeAttribute(xmlDescriptor,record,classIndicatorQName,addToNamespaceResolver);
        }
        return true;
      }
      return false;
    }
  }
  return false;
}"
65063,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
  }
  if (null != primaryKeyFields) {
    for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
      XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
      pkField.setNamespaceResolver(this.namespaceResolver);
      pkField.initialize();
    }
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    parentDescriptor.initialize(session);
    if (parentDescriptor.hasEventManager()) {
      getEventManager();
    }
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isObjectReferenceMapping()) {
      this.hasReferenceMappings=true;
    }
    if (mapping instanceof XMLChoiceObjectMapping) {
      XMLChoiceObjectMapping choiceMapping=((XMLChoiceObjectMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    if (mapping instanceof XMLChoiceCollectionMapping) {
      XMLChoiceCollectionMapping choiceMapping=((XMLChoiceCollectionMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  if (eventManager != null) {
    eventManager.initialize(session);
  }
  if (copyPolicy != null) {
    copyPolicy.initialize(session);
  }
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
  if (getInheritancePolicyOrNull() != null && getInheritancePolicy().getParentDescriptor() != null) {
    XMLDescriptor d=(XMLDescriptor)getInheritancePolicy().getParentDescriptor();
    locationAccessor=d.getLocationAccessor();
  }
  if (locationAccessor != null) {
    locationAccessor.initializeAttributes(getJavaClass());
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    if (hasInheritance() && isChildDescriptor()) {
      XMLField parentField=((XMLDescriptor)getInheritancePolicy().getParentDescriptor()).getDefaultRootElementField();
      if (parentField == null || (parentField != null && !defaultRootElementField.getXPathFragment().equals(parentField.getXPathFragment()))) {
        setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
      }
    }
 else {
      setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
    }
  }
  if (null != primaryKeyFields) {
    for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
      XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
      pkField.setNamespaceResolver(this.namespaceResolver);
      pkField.initialize();
    }
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    parentDescriptor.initialize(session);
    if (parentDescriptor.hasEventManager()) {
      getEventManager();
    }
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isObjectReferenceMapping()) {
      this.hasReferenceMappings=true;
    }
    if (mapping instanceof XMLChoiceObjectMapping) {
      XMLChoiceObjectMapping choiceMapping=((XMLChoiceObjectMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    if (mapping instanceof XMLChoiceCollectionMapping) {
      XMLChoiceCollectionMapping choiceMapping=((XMLChoiceCollectionMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  if (eventManager != null) {
    eventManager.initialize(session);
  }
  if (copyPolicy != null) {
    copyPolicy.initialize(session);
  }
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
  if (getInheritancePolicyOrNull() != null && getInheritancePolicy().getParentDescriptor() != null) {
    XMLDescriptor d=(XMLDescriptor)getInheritancePolicy().getParentDescriptor();
    locationAccessor=d.getLocationAccessor();
  }
  if (locationAccessor != null) {
    locationAccessor.initializeAttributes(getJavaClass());
  }
}"
65064,"public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    return unmarshaller.unmarshal(new StreamSource(entityStream),domainClass).getValue();
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    return unmarshaller.unmarshal(jsonSource,domainClass).getValue();
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
65065,"public final void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public final void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
65066,"private XPathFragment getXPathFragmentForValue(Object value,MarshalRecord marshalRecord,XMLMarshaller marshaller){
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    XMLRoot xmlRootValue=(XMLRoot)value;
    XPathFragment xmlRootFragment=new XPathFragment(xmlRootValue.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
    xmlRootFragment.setNamespaceURI(xmlRootValue.getNamespaceURI());
    return xmlRootFragment;
  }
  if (value instanceof Node) {
    XPathFragment frag=null;
    Node n=(Node)value;
    if (n.getNodeType() == Node.ELEMENT_NODE) {
      Element elem=(Element)n;
      String local=elem.getLocalName();
      if (local == null) {
        local=elem.getNodeName();
      }
      String prefix=elem.getPrefix();
      if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
        frag=new XPathFragment(prefix + marshalRecord.getNamespaceSeparator() + elem.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
 else {
        frag=new XPathFragment(local,marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
    }
 else     if (n.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attr=(Attr)n;
      attr.getLocalName();
      String prefix=attr.getPrefix();
      if (prefix != null && prefix.equals(XMLConstants.EMPTY_STRING)) {
        frag=new XPathFragment(prefix + marshalRecord.getNamespaceSeparator() + attr.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
 else {
        frag=new XPathFragment(attr.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
    }
 else     if (n.getNodeType() == Node.TEXT_NODE) {
      return SIMPLE_FRAGMENT;
    }
    return frag;
  }
  AbstractSession childSession=null;
  try {
    childSession=marshaller.getXMLContext().getSession(value);
  }
 catch (  XMLMarshalException e) {
    return SIMPLE_FRAGMENT;
  }
  XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(value);
  String defaultRootElementString=descriptor.getDefaultRootElement();
  if (defaultRootElementString != null) {
    return new XPathFragment(defaultRootElementString);
  }
  return null;
}","private XPathFragment getXPathFragmentForValue(Object value,MarshalRecord marshalRecord,XMLMarshaller marshaller){
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    XMLRoot xmlRootValue=(XMLRoot)value;
    XPathFragment xmlRootFragment=new XPathFragment(xmlRootValue.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
    xmlRootFragment.setNamespaceURI(xmlRootValue.getNamespaceURI());
    return xmlRootFragment;
  }
  if (value instanceof Node) {
    XPathFragment frag=null;
    Node n=(Node)value;
    if (n.getNodeType() == Node.ELEMENT_NODE) {
      Element elem=(Element)n;
      String local=elem.getLocalName();
      if (local == null) {
        local=elem.getNodeName();
      }
      String prefix=elem.getPrefix();
      if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
        frag=new XPathFragment(prefix + marshalRecord.getNamespaceSeparator() + elem.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
 else {
        frag=new XPathFragment(local,marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
    }
 else     if (n.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attr=(Attr)n;
      attr.getLocalName();
      String prefix=attr.getPrefix();
      if (prefix != null && prefix.equals(XMLConstants.EMPTY_STRING)) {
        frag=new XPathFragment(prefix + marshalRecord.getNamespaceSeparator() + attr.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
 else {
        frag=new XPathFragment(attr.getLocalName(),marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
      }
    }
 else     if (n.getNodeType() == Node.TEXT_NODE) {
      return SIMPLE_FRAGMENT;
    }
    return frag;
  }
  AbstractSession childSession=null;
  try {
    childSession=marshaller.getXMLContext().getSession(value);
  }
 catch (  XMLMarshalException e) {
    return SIMPLE_FRAGMENT;
  }
  if (childSession != null) {
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (defaultRootElementString != null) {
      return new XPathFragment(defaultRootElementString);
    }
  }
  return null;
}"
65067,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=getConvertedValue(value,marshalRecord,session);
  if (value.getClass() == ClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
    if (frag != null) {
      frag=getOwningFragment(associatedNodeValue,frag);
      NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
      return marshalSingleValueWithNodeValue(frag,marshalRecord,object,value,session,namespaceResolver,marshalContext,unwrappedNodeValue);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=getConvertedValue(value,marshalRecord,session);
  if (value != null && value.getClass() == ClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
    if (frag != null) {
      frag=getOwningFragment(associatedNodeValue,frag);
      NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
      return marshalSingleValueWithNodeValue(frag,marshalRecord,object,value,session,namespaceResolver,marshalContext,unwrappedNodeValue);
    }
  }
  return true;
}"
65068,"private NodeValue getNodeValueForValue(Object value){
  XMLField associatedField=null;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
  }
  if (associatedField == null) {
    List<XMLField> sourceFields=xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
    }
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  return null;
}","private NodeValue getNodeValueForValue(Object value){
  if (value == null) {
    Iterator<NodeValue> nodeValues=fieldToNodeValues.values().iterator();
    while (nodeValues.hasNext()) {
      XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalNodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)nodeValues.next();
      NodeValue nextNodeValue=unmarshalNodeValue.getChoiceElementMarshalNodeValue();
      if (nextNodeValue instanceof MappingNodeValue) {
        DatabaseMapping nextMapping=((MappingNodeValue)nextNodeValue).getMapping();
        if (nextMapping.isAbstractCompositeCollectionMapping()) {
          if (((XMLCompositeCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
          if (((XMLCompositeDirectCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
          if (((XMLBinaryDataCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
      }
    }
    return null;
  }
  XMLField associatedField=null;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
  }
  if (associatedField == null) {
    List<XMLField> sourceFields=xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
    }
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  return null;
}"
65069,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,false);
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,false);
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          break;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65070,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
65071,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeCollectionMapping,(XMLConverter)xmlCompositeCollectionMapping.getConverter(),unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping.getConverter(),xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.setChildRecord(null);
}"
65072,"public String getValueToWrite(QName schemaType,Object value,XMLConversionManager xmlConversionManager){
  if (schemaType != null && XMLConstants.QNAME_QNAME.equals(schemaType)) {
    return getStringForQName((QName)value);
  }
 else   if (value.getClass() == String.class) {
    return (String)value;
  }
  return (String)xmlConversionManager.convertObject(value,ClassConstants.STRING,schemaType);
}","public String getValueToWrite(QName schemaType,Object value,XMLConversionManager xmlConversionManager){
  if (value == null) {
    return null;
  }
  if (schemaType != null && XMLConstants.QNAME_QNAME.equals(schemaType)) {
    return getStringForQName((QName)value);
  }
 else   if (value.getClass() == String.class) {
    return (String)value;
  }
  return (String)xmlConversionManager.convertObject(value,ClassConstants.STRING,schemaType);
}"
65073,"/** 
 * INTERNAL:
 */
public XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName,Attributes attributes){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment predicateFragment=new XPathFragment();
      predicateFragment.setNamespaceAware(isNamespaceAware());
      predicateFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      predicateFragment.setLocalName(xPathFragment.getLocalName());
      predicateFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
      if (null == resultNode) {
        predicateFragment.setIndexValue(-1);
        for (int x=0, length=attributes.getLength(); x < length; x++) {
          XPathFragment conditionFragment=new XPathFragment();
          conditionFragment.setLocalName(attributes.getLocalName(x));
          conditionFragment.setNamespaceURI(attributes.getURI(x));
          conditionFragment.setAttribute(true);
          XPathPredicate condition=new XPathPredicate(conditionFragment,attributes.getValue(x));
          predicateFragment.setPredicate(condition);
          resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
          if (null != resultNode) {
            break;
          }
        }
        if (null == resultNode) {
          resultNode=xPathNode.getAnyNode();
        }
      }
    }
    return resultNode;
  }
  return null;
}","/** 
 * INTERNAL:
 */
public XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName,Attributes attributes){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment predicateFragment=new XPathFragment();
      predicateFragment.setNamespaceAware(isNamespaceAware());
      predicateFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      predicateFragment.setLocalName(xPathFragment.getLocalName());
      predicateFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
      if (null == resultNode) {
        predicateFragment.setIndexValue(-1);
        if (attributes != null) {
          for (int x=0, length=attributes.getLength(); x < length; x++) {
            XPathFragment conditionFragment=new XPathFragment();
            conditionFragment.setLocalName(attributes.getLocalName(x));
            conditionFragment.setNamespaceURI(attributes.getURI(x));
            conditionFragment.setAttribute(true);
            XPathPredicate condition=new XPathPredicate(conditionFragment,attributes.getValue(x));
            predicateFragment.setPredicate(condition);
            resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
            if (null != resultNode) {
              break;
            }
          }
        }
        if (null == resultNode) {
          resultNode=xPathNode.getAnyNode();
        }
      }
    }
    return resultNode;
  }
  return null;
}"
65074,"@Override protected void closeComplex() throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab());
  }
  writer.write('}');
}","@Override protected void closeComplex() throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  writer.write('}');
}"
65075,"@Override protected void writeKey(XPathFragment xPathFragment) throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab());
  }
  super.writeKey(xPathFragment);
}","@Override protected void writeKey(XPathFragment xPathFragment) throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  super.writeKey(xPathFragment);
}"
65076,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65077,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    nonStringCharacters(node.getNodeValue());
  }
 else {
    try {
      JSONFormattedWriterRecordContentHandler wrcHandler=new JSONFormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue(),false,false);
  }
 else {
    try {
      JSONFormattedWriterRecordContentHandler wrcHandler=new JSONFormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
65078,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writeValue(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writeValue(tab(),false);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65079,"/** 
 * INTERNAL:
 */
public void nilComplex(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  closeStartGroupingElements(groupingFragment);
  openStartElement(xPathFragment,namespaceResolver);
  nonStringCharacters(NULL);
  endElement(xPathFragment,namespaceResolver);
}","/** 
 * INTERNAL:
 */
public void nilComplex(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  closeStartGroupingElements(groupingFragment);
  openStartElement(xPathFragment,namespaceResolver);
  characters(NULL,false,false);
  endElement(xPathFragment,namespaceResolver);
}"
65080,"/** 
 * INTERNAL:
 */
public void nilSimple(NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  nonStringCharacters(NULL);
  closeStartGroupingElements(groupingFragment);
}","/** 
 * INTERNAL:
 */
public void nilSimple(NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  characters(NULL,false,false);
  closeStartGroupingElements(groupingFragment);
}"
65081,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=this.getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    String namespaceURI=attr.getNamespaceURI();
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    nonStringCharacters(node.getNodeValue());
  }
 else {
    try {
      JSONWriterRecordContentHandler wrcHandler=new JSONWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=this.getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    String namespaceURI=attr.getNamespaceURI();
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue(),false,false);
  }
 else {
    try {
      JSONWriterRecordContentHandler wrcHandler=new JSONWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(""String_Node_Str"",wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
65082,"public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  xPathFragment.setAttribute(true);
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,null,false);
  endElement(xPathFragment,namespaceResolver);
}","public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  xPathFragment.setAttribute(true);
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,null,false,true);
  endElement(xPathFragment,namespaceResolver);
}"
65083,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character) || !encoder.canEncode(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute){
  try {
    if (characterEscapeHandler != null) {
      try {
        characterEscapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character) || !encoder.canEncode(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65084,"/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  encoder=Charset.forName(marshaller.getEncoding()).newEncoder();
  if (marshaller.getValueWrapper() != null) {
    textWrapperFragment=new XPathFragment(marshaller.getValueWrapper());
  }
}","/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  encoder=Charset.forName(marshaller.getEncoding()).newEncoder();
  if (marshaller.getValueWrapper() != null) {
    textWrapperFragment=new XPathFragment(marshaller.getValueWrapper());
  }
  characterEscapeHandler=marshaller.getCharacterEscapeHandler();
}"
65085,"@Override protected Map getProperties(){
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(BINDINGS);
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(inputStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  return properties;
}","@Override protected Map getProperties(){
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(BINDINGS);
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(inputStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,new HashMap<String,Source>());
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataSourceMap);
  return properties;
}"
65086,"public void testCreateContextFromOXM() throws JAXBException {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(EXAMPLE_OXM);
  if (iStream == null) {
    fail(""String_Node_Str"" + EXAMPLE_OXM + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON_CLASS_NAME);
  assertNotNull(person);
}","public void testCreateContextFromOXM() throws JAXBException {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(EXAMPLE_OXM);
  if (iStream == null) {
    fail(""String_Node_Str"" + EXAMPLE_OXM + ""String_Node_Str"");
  }
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(iStream));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataSourceMap);
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,new HashMap<String,Source>());
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  DynamicEntity person=jaxbContext.newDynamicEntity(PERSON_CLASS_NAME);
  assertNotNull(person);
}"
65087,"public Map getProperties(){
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(inputStream));
  Map<String,Map<String,Source>> properties=new HashMap<String,Map<String,Source>>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  return properties;
}","public Map getProperties(){
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  HashMap<String,Source> metadataSourceMap=new HashMap<String,Source>();
  metadataSourceMap.put(""String_Node_Str"",new StreamSource(inputStream));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataSourceMap);
  properties.put(JAXBContextFactory.ANNOTATION_HELPER_KEY,""String_Node_Str"");
  properties.put(JAXBContextProperties.ANNOTATION_HELPER,new AnnotationHelper());
  return properties;
}"
65088,"public Map getProperties(){
  Map props=new HashMap();
  props.put(JAXBContextFactory.DEFAULT_TARGET_NAMESPACE_KEY,""String_Node_Str"");
  return props;
}","public Map getProperties(){
  Map props=new HashMap();
  props.put(JAXBContextFactory.DEFAULT_TARGET_NAMESPACE_KEY,""String_Node_Str"");
  props.put(JAXBContextProperties.DEFAULT_TARGET_NAMESPACE,""String_Node_Str"");
  return props;
}"
65089,"/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value;
  if (properties != null && ((value=properties.get(ECLIPSELINK_OXM_XML_KEY)) != null)) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)value;
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader,properties);
              if (binding != null) {
                xmlBindings.add(binding);
              }
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader,properties);
            if (binding != null) {
              xmlBindings.add(binding);
            }
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader,properties);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader,properties);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}","/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be JAXBContextProperties.OXM_METADATA_SOURCE, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.lang.String - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.eclipse.persistence.jaxb.metadata.MetadataSource - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value=null;
  if (properties != null) {
    if ((value=properties.get(JAXBContextProperties.OXM_METADATA_SOURCE)) == null) {
      value=properties.get(ECLIPSELINK_OXM_XML_KEY);
    }
  }
  if (value != null) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)value;
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader,properties);
              if (binding != null) {
                xmlBindings.add(binding);
              }
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader,properties);
            if (binding != null) {
              xmlBindings.add(binding);
            }
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader,properties);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader,properties);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}"
65090,"/** 
 * Create a <tt>DynamicJAXBContext</tt>, using an EclipseLink OXM file as the metadata source.
 * @param classLoader The application's current class loader, which will be used to first lookup classes to see if they exist before new <tt>DynamicTypes</tt> are generated.  Can be <tt>null</tt>, in which case <tt>Thread.currentThread().getContextClassLoader()</tt> will be used.
 * @param properties Map of properties to use when creating a new <tt>DynamicJAXBContext</tt>.  This map must contain a key of JAXBContext.ECLIPSELINK_OXM_XML_KEY, which can have several possible values: <ul> <li>One of the following, pointing to your OXM file: <tt>java.io.File</tt>, <tt>java.io.InputStream</tt>, <tt>java.io.Reader</tt>, <tt>java.net.URL</tt>,<br> <tt>javax.xml.stream.XMLEventReader</tt>, <tt>javax.xml.stream.XMLStreamReader</tt>, <tt>javax.xml.transform.Source</tt>,<br> <tt>org.w3c.dom.Node</tt>, or <tt>org.xml.sax.InputSource</tt>. <li>A <tt>List</tt> of objects from the set above. <li>A <tt>Map&lt;String, Object&gt;</tt>, where <tt>String</tt> is a package name, and <tt>Object</tt> is the pointer to the OXM file, from the set<br> of possibilities above.  If using this option, a <tt>package-name</tt> element is not required in the <tt>xml-bindings</tt> element of your OXM file. </ul>
 * @return A new instance of <tt>DynamicJAXBContext</tt>.
 * @throws JAXBException if an error was encountered while creating the <tt>DynamicJAXBContext</tt>.
 */
public static DynamicJAXBContext createContextFromOXM(ClassLoader classLoader,Map<String,?> properties) throws JAXBException {
  if (properties == null || properties.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY) == null) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.oxmKeyNotFound());
  }
  return new DynamicJAXBContext(new MetadataContextInput(properties,classLoader));
}","/** 
 * Create a <tt>DynamicJAXBContext</tt>, using an EclipseLink OXM file as the metadata source.
 * @param classLoader The application's current class loader, which will be used to first lookup classes to see if they exist before new <tt>DynamicTypes</tt> are generated.  Can be <tt>null</tt>, in which case <tt>Thread.currentThread().getContextClassLoader()</tt> will be used.
 * @param properties Map of properties to use when creating a new <tt>DynamicJAXBContext</tt>.  This map must contain a key of JAXBContextProperties.OXM_METADATA_SOURCE, which can have several possible values: <ul> <li>One of the following, pointing to your OXM file: <tt>java.io.File</tt>, <tt>java.io.InputStream</tt>, <tt>java.io.Reader</tt>, <tt>java.net.URL</tt>,<br> <tt>javax.xml.stream.XMLEventReader</tt>, <tt>javax.xml.stream.XMLStreamReader</tt>, <tt>javax.xml.transform.Source</tt>,<br> <tt>org.w3c.dom.Node</tt>, or <tt>org.xml.sax.InputSource</tt>. <li>A <tt>List</tt> of objects from the set above. <li>A <tt>Map&lt;String, Object&gt;</tt>, where <tt>String</tt> is a package name, and <tt>Object</tt> is the pointer to the OXM file, from the set<br> of possibilities above.  If using this option, a <tt>package-name</tt> element is not required in the <tt>xml-bindings</tt> element of your OXM file. </ul>
 * @return A new instance of <tt>DynamicJAXBContext</tt>.
 * @throws JAXBException if an error was encountered while creating the <tt>DynamicJAXBContext</tt>.
 */
public static DynamicJAXBContext createContextFromOXM(ClassLoader classLoader,Map<String,?> properties) throws JAXBException {
  if (properties == null || (properties.get(JAXBContextProperties.OXM_METADATA_SOURCE) == null && properties.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY) == null)) {
    throw new JAXBException(org.eclipse.persistence.exceptions.JAXBException.oxmKeyNotFound());
  }
  return new DynamicJAXBContext(new MetadataContextInput(properties,classLoader));
}"
65091,"@Override public void postInitialize(AbstractSession session) throws DescriptorException {
  DatabaseMapping mapping=getReferenceDescriptor().getMappingForAttributeName(this.mappedBy);
  if (mapping instanceof XMLCompositeCollectionMapping) {
    XMLCompositeCollectionMapping oppositeMapping=(XMLCompositeCollectionMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLCompositeObjectMapping) {
    XMLCompositeObjectMapping oppositeMapping=(XMLCompositeObjectMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLObjectReferenceMapping) {
    XMLObjectReferenceMapping oppositeMapping=(XMLObjectReferenceMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLChoiceObjectMapping) {
    XMLChoiceObjectMapping oppositeMapping=(XMLChoiceObjectMapping)mapping;
    Collection<XMLMapping> nestedMappings=oppositeMapping.getChoiceElementMappings().values();
    for (    XMLMapping next : nestedMappings) {
      if (next instanceof XMLCompositeObjectMapping) {
        XMLCompositeObjectMapping compositeMapping=((XMLCompositeObjectMapping)next);
        if (compositeMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          compositeMapping.setInverseReferenceMapping(this);
        }
      }
 else       if (next instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping refMapping=((XMLObjectReferenceMapping)next);
        if (refMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          refMapping.setInverseReferenceMapping(this);
        }
      }
    }
  }
  if (mapping instanceof XMLChoiceCollectionMapping) {
    XMLChoiceCollectionMapping oppositeMapping=(XMLChoiceCollectionMapping)mapping;
    Collection<XMLMapping> nestedMappings=oppositeMapping.getChoiceElementMappings().values();
    for (    XMLMapping next : nestedMappings) {
      if (next instanceof XMLCompositeCollectionMapping) {
        XMLCompositeCollectionMapping compositeMapping=((XMLCompositeCollectionMapping)next);
        if (compositeMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          compositeMapping.setInverseReferenceMapping(this);
        }
      }
 else       if (next instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping refMapping=((XMLCollectionReferenceMapping)next);
        if (refMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          refMapping.setInverseReferenceMapping(this);
        }
      }
    }
  }
}","@Override public void postInitialize(AbstractSession session) throws DescriptorException {
  DatabaseMapping mapping=getReferenceDescriptor().getMappingForAttributeName(this.mappedBy);
  if (mapping instanceof XMLCompositeCollectionMapping) {
    XMLCompositeCollectionMapping oppositeMapping=(XMLCompositeCollectionMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLCompositeObjectMapping) {
    XMLCompositeObjectMapping oppositeMapping=(XMLCompositeObjectMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLObjectReferenceMapping) {
    XMLObjectReferenceMapping oppositeMapping=(XMLObjectReferenceMapping)mapping;
    oppositeMapping.setInverseReferenceMapping(this);
  }
  if (mapping instanceof XMLChoiceObjectMapping) {
    XMLChoiceObjectMapping oppositeMapping=(XMLChoiceObjectMapping)mapping;
    Collection<XMLMapping> nestedMappings=oppositeMapping.getChoiceElementMappings().values();
    for (    XMLMapping next : nestedMappings) {
      if (next instanceof XMLCompositeObjectMapping) {
        XMLCompositeObjectMapping compositeMapping=((XMLCompositeObjectMapping)next);
        if (compositeMapping.getReferenceClass() == this.getDescriptor().getJavaClass() || this.getDescriptor().getJavaClass().isAssignableFrom(compositeMapping.getReferenceClass())) {
          compositeMapping.setInverseReferenceMapping(this);
        }
      }
 else       if (next instanceof XMLObjectReferenceMapping) {
        XMLObjectReferenceMapping refMapping=((XMLObjectReferenceMapping)next);
        if (refMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          refMapping.setInverseReferenceMapping(this);
        }
      }
    }
  }
  if (mapping instanceof XMLChoiceCollectionMapping) {
    XMLChoiceCollectionMapping oppositeMapping=(XMLChoiceCollectionMapping)mapping;
    Collection<XMLMapping> nestedMappings=oppositeMapping.getChoiceElementMappings().values();
    for (    XMLMapping next : nestedMappings) {
      if (next instanceof XMLCompositeCollectionMapping) {
        XMLCompositeCollectionMapping compositeMapping=((XMLCompositeCollectionMapping)next);
        if (compositeMapping.getReferenceClass() == this.getDescriptor().getJavaClass() || this.getDescriptor().getJavaClass().isAssignableFrom(compositeMapping.getReferenceClass())) {
          compositeMapping.setInverseReferenceMapping(this);
        }
      }
 else       if (next instanceof XMLCollectionReferenceMapping) {
        XMLCollectionReferenceMapping refMapping=((XMLCollectionReferenceMapping)next);
        if (refMapping.getReferenceClass() == this.getDescriptor().getJavaClass()) {
          refMapping.setInverseReferenceMapping(this);
        }
      }
    }
  }
}"
65092,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=reference.getContainer();
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=reference.getContainer();
      createPKVectorsFromMap(reference,mapping);
      if (reference.getPrimaryKey() == null) {
        continue;
      }
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
}"
65093,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod == null && !(hasJAXBAnnotations(getMethod))) {
        isPropertyTransient=true;
      }
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod == null && !(hasJAXBAnnotations(setMethod))) {
        isPropertyTransient=true;
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod == null && !(hasJAXBAnnotations(getMethod))) {
        isPropertyTransient=true;
      }
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod == null && !(hasJAXBAnnotations(setMethod))) {
        isPropertyTransient=true;
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
65094,"public void testMarshallerJsonIncludeRoot() throws Exception {
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  m.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,true);
  assertTrue((Boolean)m.getProperty(MarshallerProperties.JSON_INCLUDE_ROOT));
  m.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  assertFalse((Boolean)m.getProperty(MarshallerProperties.JSON_INCLUDE_ROOT));
}","public void testMarshallerJsonIncludeRoot() throws Exception {
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  m.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,true);
  assertTrue((Boolean)m.getProperty(MarshallerProperties.JSON_INCLUDE_ROOT));
  m.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  assertFalse((Boolean)m.getProperty(MarshallerProperties.JSON_INCLUDE_ROOT));
  try {
    m.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65095,"public void testMarshallerJsonAttributePrefix() throws Exception {
  m.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX));
}","public void testMarshallerJsonAttributePrefix() throws Exception {
  m.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX));
  m.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,null);
  assertNull(m.getProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX));
}"
65096,"public void testMarshallerMediaTypeEnum() throws Exception {
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,m.getProperty(MarshallerProperties.MEDIA_TYPE));
}","public void testMarshallerMediaTypeEnum() throws Exception {
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,m.getProperty(MarshallerProperties.MEDIA_TYPE));
  try {
    m.setProperty(MarshallerProperties.MEDIA_TYPE,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65097,"public void testUnmarshallerJsonValueWrapper() throws Exception {
  u.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,""String_Node_Str"");
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER));
}","public void testUnmarshallerJsonValueWrapper() throws Exception {
  u.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,""String_Node_Str"");
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER));
  u.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,null);
  assertNull(u.getProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER));
}"
65098,"public void testMarshallerXmlDeclaration() throws Exception {
  String XML_DECLARATION=""String_Node_Str"";
  m.setProperty(XML_DECLARATION,true);
  assertTrue((Boolean)m.getProperty(XML_DECLARATION));
  m.setProperty(XML_DECLARATION,false);
  assertFalse((Boolean)m.getProperty(XML_DECLARATION));
}","public void testMarshallerXmlDeclaration() throws Exception {
  String XML_DECLARATION=""String_Node_Str"";
  m.setProperty(XML_DECLARATION,true);
  assertTrue((Boolean)m.getProperty(XML_DECLARATION));
  m.setProperty(XML_DECLARATION,false);
  assertFalse((Boolean)m.getProperty(XML_DECLARATION));
  try {
    m.setProperty(XML_DECLARATION,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65099,"public void testUnmarshallerIdResolver() throws Exception {
  String SUN_ID_RESOLVER=""String_Node_Str"";
  String SUN_JSE_ID_RESOLVER=""String_Node_Str"";
  IDResolver resolver=new MyIDResolver();
  u.setProperty(UnmarshallerProperties.ID_RESOLVER,resolver);
  assertEquals(resolver,u.getProperty(UnmarshallerProperties.ID_RESOLVER));
  Object nonELResolver=new NonELIDResolver();
  u.setProperty(SUN_ID_RESOLVER,nonELResolver);
  assertEquals(nonELResolver,u.getProperty(SUN_ID_RESOLVER));
  u.setProperty(SUN_JSE_ID_RESOLVER,nonELResolver);
  assertEquals(nonELResolver,u.getProperty(SUN_JSE_ID_RESOLVER));
}","public void testUnmarshallerIdResolver() throws Exception {
  String SUN_ID_RESOLVER=""String_Node_Str"";
  String SUN_JSE_ID_RESOLVER=""String_Node_Str"";
  IDResolver resolver=new MyIDResolver();
  u.setProperty(UnmarshallerProperties.ID_RESOLVER,resolver);
  assertEquals(resolver,u.getProperty(UnmarshallerProperties.ID_RESOLVER));
  Object nonELResolver=new NonELIDResolver();
  u.setProperty(SUN_ID_RESOLVER,nonELResolver);
  assertEquals(nonELResolver,u.getProperty(SUN_ID_RESOLVER));
  u.setProperty(SUN_JSE_ID_RESOLVER,nonELResolver);
  assertEquals(nonELResolver,u.getProperty(SUN_JSE_ID_RESOLVER));
  u.setProperty(SUN_JSE_ID_RESOLVER,null);
  assertNull(u.getProperty(SUN_JSE_ID_RESOLVER));
}"
65100,"public void testUnmarshallerJsonIncludeRoot() throws Exception {
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  u.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,true);
  assertTrue((Boolean)u.getProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT));
  u.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,false);
  assertFalse((Boolean)u.getProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT));
}","public void testUnmarshallerJsonIncludeRoot() throws Exception {
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  u.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,true);
  assertTrue((Boolean)u.getProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT));
  u.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,false);
  assertFalse((Boolean)u.getProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT));
  try {
    u.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65101,"public void testUnmarshallerJsonNamespacePrefixMapper() throws Exception {
  NamespacePrefixMapper mapper=new MyPrefixMapper();
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
  HashMap<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,map);
  assertEquals(map,u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
}","public void testUnmarshallerJsonNamespacePrefixMapper() throws Exception {
  NamespacePrefixMapper mapper=new MyPrefixMapper();
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
  HashMap<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,map);
  assertEquals(map,u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,null);
  assertNull(u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
}"
65102,"public void testMarshallerSchemaLoc() throws Exception {
  m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_SCHEMA_LOCATION));
}","public void testMarshallerSchemaLoc() throws Exception {
  m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_SCHEMA_LOCATION));
  m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,null);
  assertNull(m.getProperty(Marshaller.JAXB_SCHEMA_LOCATION));
}"
65103,"public void testMarshallerIndentString() throws Exception {
  String SUN_INDENT_STRING=""String_Node_Str"";
  String SUN_JSE_INDENT_STRING=""String_Node_Str"";
  String myTab=""String_Node_Str"";
  m.setProperty(MarshallerProperties.INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(MarshallerProperties.INDENT_STRING));
  m.setProperty(SUN_INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(SUN_INDENT_STRING));
  m.setProperty(SUN_JSE_INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(SUN_JSE_INDENT_STRING));
}","public void testMarshallerIndentString() throws Exception {
  String SUN_INDENT_STRING=""String_Node_Str"";
  String SUN_JSE_INDENT_STRING=""String_Node_Str"";
  String myTab=""String_Node_Str"";
  m.setProperty(MarshallerProperties.INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(MarshallerProperties.INDENT_STRING));
  m.setProperty(SUN_INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(SUN_INDENT_STRING));
  m.setProperty(SUN_JSE_INDENT_STRING,myTab);
  assertEquals(myTab,m.getProperty(SUN_JSE_INDENT_STRING));
  m.setProperty(SUN_JSE_INDENT_STRING,null);
  assertNull(m.getProperty(SUN_JSE_INDENT_STRING));
  m.setProperty(SUN_INDENT_STRING,null);
  assertNull(m.getProperty(SUN_INDENT_STRING));
}"
65104,"public void testUnmarshallerJsonAttributePrefix() throws Exception {
  u.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,""String_Node_Str"");
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX));
}","public void testUnmarshallerJsonAttributePrefix() throws Exception {
  u.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,""String_Node_Str"");
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX));
  u.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,null);
  assertNull(u.getProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX));
}"
65105,"public void testMarshallerJsonNamespaceSeparator() throws Exception {
  assertEquals(XMLConstants.DOT,m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,'&');
  assertEquals('&',m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals('&',m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
}","public void testMarshallerJsonNamespaceSeparator() throws Exception {
  assertEquals(XMLConstants.DOT,m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,'&');
  assertEquals('&',m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals('&',m.getProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  try {
    m.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65106,"public void testMarshallerJsonValueWrapper() throws Exception {
  m.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.JSON_VALUE_WRAPPER));
}","public void testMarshallerJsonValueWrapper() throws Exception {
  m.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.JSON_VALUE_WRAPPER));
  m.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,null);
  assertEquals(null,m.getProperty(MarshallerProperties.JSON_VALUE_WRAPPER));
}"
65107,"public void testMarshallerNoNamespaceSchemaLoc() throws Exception {
  m.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION));
}","public void testMarshallerNoNamespaceSchemaLoc() throws Exception {
  m.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION));
  m.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,null);
  assertNull(m.getProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION));
}"
65108,"public void testUnmarshallerJsonNamespaceSeparator() throws Exception {
  assertEquals(XMLConstants.DOT,m.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,'&');
  assertEquals('&',m.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  m.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals('&',m.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
}","public void testUnmarshallerJsonNamespaceSeparator() throws Exception {
  assertEquals(XMLConstants.DOT,m.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,'&');
  assertEquals('&',u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals('&',u.getProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR));
  try {
    u.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65109,"public void testMarshallerJaxbFragment() throws Exception {
  m.setProperty(XMLConstants.JAXB_FRAGMENT,true);
  assertTrue((Boolean)m.getProperty(XMLConstants.JAXB_FRAGMENT));
  m.setProperty(XMLConstants.JAXB_FRAGMENT,false);
  assertFalse((Boolean)m.getProperty(XMLConstants.JAXB_FRAGMENT));
}","public void testMarshallerJaxbFragment() throws Exception {
  m.setProperty(XMLConstants.JAXB_FRAGMENT,true);
  assertTrue((Boolean)m.getProperty(XMLConstants.JAXB_FRAGMENT));
  m.setProperty(XMLConstants.JAXB_FRAGMENT,false);
  assertFalse((Boolean)m.getProperty(XMLConstants.JAXB_FRAGMENT));
  try {
    m.setProperty(Marshaller.JAXB_FRAGMENT,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65110,"public void testUnmarshallerMediaTypeString() throws Exception {
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
}","public void testUnmarshallerMediaTypeString() throws Exception {
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
  try {
    u.setProperty(MarshallerProperties.MEDIA_TYPE,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65111,"public void testMarshallerNamespacePrefixMapper() throws Exception {
  String SUN_NAMESPACE_PREFIX_MAPPER=""String_Node_Str"";
  String SUN_JSE_NAMESPACE_PREFIX_MAPPER=""String_Node_Str"";
  NamespacePrefixMapper mapper=new MyPrefixMapper();
  m.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
  m.setProperty(SUN_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(SUN_NAMESPACE_PREFIX_MAPPER));
  m.setProperty(SUN_JSE_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(SUN_JSE_NAMESPACE_PREFIX_MAPPER));
}","public void testMarshallerNamespacePrefixMapper() throws Exception {
  String SUN_NAMESPACE_PREFIX_MAPPER=""String_Node_Str"";
  String SUN_JSE_NAMESPACE_PREFIX_MAPPER=""String_Node_Str"";
  NamespacePrefixMapper mapper=new MyPrefixMapper();
  m.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
  m.setProperty(SUN_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(SUN_NAMESPACE_PREFIX_MAPPER));
  m.setProperty(SUN_JSE_NAMESPACE_PREFIX_MAPPER,mapper);
  assertEquals(mapper,m.getProperty(SUN_JSE_NAMESPACE_PREFIX_MAPPER));
  m.setProperty(SUN_NAMESPACE_PREFIX_MAPPER,null);
}"
65112,"public void testMarshallerFormattedOutput() throws Exception {
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  assertTrue((Boolean)m.getProperty(Marshaller.JAXB_FORMATTED_OUTPUT));
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,false);
  assertFalse((Boolean)m.getProperty(Marshaller.JAXB_FORMATTED_OUTPUT));
}","public void testMarshallerFormattedOutput() throws Exception {
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  assertTrue((Boolean)m.getProperty(Marshaller.JAXB_FORMATTED_OUTPUT));
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,false);
  assertFalse((Boolean)m.getProperty(Marshaller.JAXB_FORMATTED_OUTPUT));
  try {
    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65113,"public void testMarshallerEncoding() throws Exception {
  m.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_ENCODING));
}","public void testMarshallerEncoding() throws Exception {
  m.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.getProperty(Marshaller.JAXB_ENCODING));
  m.setProperty(Marshaller.JAXB_ENCODING,null);
  assertNull(m.getProperty(Marshaller.JAXB_ENCODING));
}"
65114,"public void testMarshallerObjectIdentity() throws Exception {
  String prop=""String_Node_Str"";
  m.setProperty(prop,false);
  assertFalse((Boolean)m.getProperty(prop));
  m.setProperty(prop,true);
  assertTrue((Boolean)m.getProperty(prop));
}","public void testMarshallerObjectIdentity() throws Exception {
  String prop=""String_Node_Str"";
  m.setProperty(prop,false);
  assertFalse((Boolean)m.getProperty(prop));
  m.setProperty(prop,true);
  assertTrue((Boolean)m.getProperty(prop));
  try {
    m.setProperty(prop,null);
  }
 catch (  PropertyException pException) {
    return;
  }
  fail(""String_Node_Str"");
}"
65115,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
    return xmlMarshaller.isEqualUsingIdenity();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
    return xmlMarshaller.isEqualUsingIdenity();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    if (wrapper == null) {
      return null;
    }
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65116,"/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
      xmlMarshaller.setEqualUsingIdenity(((Boolean)value).booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setNamespacePrefixMapper(null);
      }
 else       if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setNamespacePrefixMapper(null);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
      }
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      xmlMarshaller.setEqualUsingIdenity(((Boolean)value).booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      xmlMarshaller.setMediaType(mType);
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      if (value == null) {
        throw new PropertyException(key,XMLConstants.EMPTY_STRING);
      }
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65117,"private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(XMLConstants.DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
  includeRoot=true;
  indentString=""String_Node_Str"";
}","private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(XMLConstants.DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
  includeRoot=true;
  marshalEmptyCollections=true;
  indentString=""String_Node_Str"";
}"
65118,"public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    return unmarshaller.unmarshal(new StreamSource(entityStream),domainClass).getValue();
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public final Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    return unmarshaller.unmarshal(new StreamSource(entityStream),domainClass).getValue();
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
65119,"/** 
 * Specify if the root node should be included in the JSON message (default is false).
 * @param includeRoot - true if the message includes the root node, else false.
 */
public void setIncludeRoot(boolean includeRoot){
  this.includeRoot=includeRoot;
}","/** 
 * Specify if the root node should be included in the JSON message (default is false).
 * @param includeRoot - true if the message includes the root node, else false.
 * @see org.eclipse.persistence.jaxb.MarshallerPropertes.JSON_INCLUDE_ROOT
 * @see org.eclipse.persistence.jaxb.UnmarshallerPropertes.JSON_INCLUDE_ROOT
 */
public void setIncludeRoot(boolean includeRoot){
  this.includeRoot=includeRoot;
}"
65120,"public final void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public final void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
65121,"/** 
 * @return true if the root node is included in the JSON message (default isfalse).
 */
public boolean isIncludeRoot(){
  return includeRoot;
}","/** 
 * @return true if the root node is included in the JSON message (default isfalse).
 * @see org.eclipse.persistence.jaxb.MarshallerPropertes.JSON_INCLUDE_ROOT
 * @see org.eclipse.persistence.jaxb.UnmarshallerPropertes.JSON_INCLUDE_ROOT
 */
public boolean isIncludeRoot(){
  return includeRoot;
}"
65122,"/** 
 * INTERNAL: Add abstract class indicator information to the database row.  This is required when building a row for an insert or an update of a concrete child descriptor.
 */
public void addClassIndicatorFieldToRow(AbstractRecord databaseRow){
  if (hasClassExtractor()) {
    return;
  }
  DatabaseField field=getClassIndicatorField();
  Object value=getClassIndicatorValue();
  boolean namespaceAware=((XMLRecord)databaseRow).isNamespaceAware() || ((XMLRecord)databaseRow).hasCustomNamespaceMapper();
  if (!namespaceAware && value instanceof String) {
    int colonIndex=((String)value).indexOf(XMLConstants.COLON);
    if (colonIndex > -1) {
      value=((String)value).substring(colonIndex + 1);
    }
  }
 else   if (namespaceAware && value instanceof String) {
    if (((XMLRecord)databaseRow).getNamespaceSeparator() != XMLConstants.COLON) {
      value=((String)value).replace(XMLConstants.COLON,((XMLRecord)databaseRow).getNamespaceSeparator());
    }
  }
  databaseRow.put(field,value);
}","/** 
 * INTERNAL: Add abstract class indicator information to the database row.  This is required when building a row for an insert or an update of a concrete child descriptor.
 */
public void addClassIndicatorFieldToRow(AbstractRecord databaseRow){
  if (hasClassExtractor()) {
    return;
  }
  DatabaseField field=getClassIndicatorField();
  Object value=getClassIndicatorValue();
  if (usesXsiType) {
    boolean namespaceAware=((XMLRecord)databaseRow).isNamespaceAware() || ((XMLRecord)databaseRow).hasCustomNamespaceMapper();
    if (value instanceof String) {
      if (namespaceAware) {
        if (((XMLRecord)databaseRow).getNamespaceSeparator() != XMLConstants.COLON) {
          value=((String)value).replace(XMLConstants.COLON,((XMLRecord)databaseRow).getNamespaceSeparator());
        }
      }
 else {
        int colonIndex=((String)value).indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          value=((String)value).substring(colonIndex + 1);
        }
      }
    }
  }
  databaseRow.put(field,value);
}"
65123,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  XPathNode node=rootXPathNode;
  MarshalRecord marshalRecord=(MarshalRecord)record;
  QName schemaType=null;
  if (marshalRecord.getCycleDetectionStack().contains(object)) {
    if (cycleRecoverableClass == null) {
      initCycleRecoverableClasses();
    }
    if (cycleRecoverableClass.isAssignableFrom(object.getClass())) {
      try {
        Object jaxbMarshaller=marshaller.getProperty(XMLConstants.JAXB_MARSHALLER);
        Object contextProxy=CycleRecoverableContextProxy.getProxy(cycleRecoverableContextClass,jaxbMarshaller);
        Method onCycleDetectedMethod=object.getClass().getMethod(ON_CYCLE_DETECTED,new Class[]{cycleRecoverableContextClass});
        object=PrivilegedAccessHelper.invokeMethod(onCycleDetectedMethod,object,new Object[]{contextProxy});
      }
 catch (      Exception e) {
        throw XMLMarshalException.marshalException(e);
      }
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(object.getClass());
      if (xmlDescriptor != null) {
        node=((TreeObjectBuilder)xmlDescriptor.getObjectBuilder()).getRootXPathNode();
      }
 else {
        node=null;
      }
      marshalRecord.getCycleDetectionStack().push(object);
      if (xmlDescriptor != descriptor) {
        if (xmlDescriptor == null) {
          schemaType=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        }
 else {
          schemaType=xmlDescriptor.getSchemaReference().getSchemaContextAsQName();
        }
        writeXsiTypeAttribute(xmlDescriptor,(XMLRecord)record,schemaType,false);
      }
    }
 else {
      marshalRecord.getCycleDetectionStack().push(object);
      throw XMLMarshalException.objectCycleDetected(marshalRecord.getCycleDetectionStack().getCycleString());
    }
  }
 else {
    marshalRecord.getCycleDetectionStack().push(object);
  }
  NamespaceResolver namespaceResolver=null;
  if (xmlDescriptor != null) {
    namespaceResolver=xmlDescriptor.getNamespaceResolver();
  }
  MarshalContext marshalContext=null;
  if (xmlDescriptor != null && xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    if (node == null) {
      XPathNode n=new XPathNode();
      XMLCompositeObjectMapping m=new XMLCompositeObjectMapping();
      m.setXPath(""String_Node_Str"");
      XMLCompositeObjectMappingNodeValue nv=new XMLCompositeObjectMappingNodeValue(m);
      n.setMarshalNodeValue(nv);
      nv.marshalSingleValue(new XPathFragment(""String_Node_Str""),marshalRecord,null,object,session,namespaceResolver,marshalContext);
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(node); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,node);
        xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
      }
    }
  }
  marshalRecord.getCycleDetectionStack().pop();
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  XPathNode node=rootXPathNode;
  MarshalRecord marshalRecord=(MarshalRecord)record;
  QName schemaType=null;
  if (marshalRecord.getCycleDetectionStack().contains(object,marshaller.isEqualUsingIdenity())) {
    if (cycleRecoverableClass == null) {
      initCycleRecoverableClasses();
    }
    if (cycleRecoverableClass.isAssignableFrom(object.getClass())) {
      try {
        Object jaxbMarshaller=marshaller.getProperty(XMLConstants.JAXB_MARSHALLER);
        Object contextProxy=CycleRecoverableContextProxy.getProxy(cycleRecoverableContextClass,jaxbMarshaller);
        Method onCycleDetectedMethod=object.getClass().getMethod(ON_CYCLE_DETECTED,new Class[]{cycleRecoverableContextClass});
        object=PrivilegedAccessHelper.invokeMethod(onCycleDetectedMethod,object,new Object[]{contextProxy});
      }
 catch (      Exception e) {
        throw XMLMarshalException.marshalException(e);
      }
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(object.getClass());
      if (xmlDescriptor != null) {
        node=((TreeObjectBuilder)xmlDescriptor.getObjectBuilder()).getRootXPathNode();
      }
 else {
        node=null;
      }
      marshalRecord.getCycleDetectionStack().push(object);
      if (xmlDescriptor != descriptor) {
        if (xmlDescriptor == null) {
          schemaType=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        }
 else {
          schemaType=xmlDescriptor.getSchemaReference().getSchemaContextAsQName();
        }
        writeXsiTypeAttribute(xmlDescriptor,(XMLRecord)record,schemaType,false);
      }
    }
 else {
      marshalRecord.getCycleDetectionStack().push(object);
      throw XMLMarshalException.objectCycleDetected(marshalRecord.getCycleDetectionStack().getCycleString());
    }
  }
 else {
    marshalRecord.getCycleDetectionStack().push(object);
  }
  NamespaceResolver namespaceResolver=null;
  if (xmlDescriptor != null) {
    namespaceResolver=xmlDescriptor.getNamespaceResolver();
  }
  MarshalContext marshalContext=null;
  if (xmlDescriptor != null && xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    if (node == null) {
      XPathNode n=new XPathNode();
      XMLCompositeObjectMapping m=new XMLCompositeObjectMapping();
      m.setXPath(""String_Node_Str"");
      XMLCompositeObjectMappingNodeValue nv=new XMLCompositeObjectMappingNodeValue(m);
      n.setMarshalNodeValue(nv);
      nv.marshalSingleValue(new XPathFragment(""String_Node_Str""),marshalRecord,null,object,session,namespaceResolver,marshalContext);
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(node); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,node);
        xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
      }
    }
  }
  marshalRecord.getCycleDetectionStack().pop();
  return record;
}"
65124,"public boolean contains(Object item){
  for (  E e : data) {
    if (e == item) {
      return true;
    }
  }
  return false;
}","public boolean contains(Object item,boolean equalsUsingIdentity){
  if (equalsUsingIdentity) {
    for (    E e : data) {
      if (e == item) {
        return true;
      }
    }
  }
 else {
    for (    E e : data) {
      if (e.equals(item)) {
        return true;
      }
    }
  }
  return false;
}"
65125,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
    return xmlMarshaller.isEqualUsingIdenity();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65126,"/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
      xmlMarshaller.setEqualUsingIdenity(((Boolean)value).booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65127,"/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  references=new ArrayList();
  referencedContainers=new HashMap<ReferenceKey,Object>();
  lookupKey=new ReferenceKey(null,null);
}","/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  references=new ArrayList();
  lookupKey=new ReferenceKey(null,null);
}"
65128,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=this.getContainerForMapping(mapping,referenceSourceObject);
      if (container == null) {
        if (mapping.getReuseContainer()) {
          container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
        }
        if (null == container) {
          container=cPolicy.containerInstance();
        }
        this.referencedContainers.put(new ReferenceKey(referenceSourceObject,mapping),container);
      }
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
  referencedContainers=new HashMap<ReferenceKey,Object>();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=reference.getContainer();
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
}"
65129,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    List mixedValues=new ArrayList();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        nextValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      }
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        if (frag == SIMPLE_FRAGMENT) {
          mixedValues.add(nextValue);
        }
 else {
          int index=frags.indexOf(frag);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            frags.add(frag);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedValues.size() > 0) {
      frags.add(SIMPLE_FRAGMENT);
      values.add(mixedValues);
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      }
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlAnyCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    List mixedValues=new ArrayList();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        nextValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      }
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        if (frag == SIMPLE_FRAGMENT) {
          mixedValues.add(nextValue);
        }
 else {
          int index=frags.indexOf(frag);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            frags.add(frag);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedValues.size() > 0) {
      frags.add(SIMPLE_FRAGMENT);
      values.add(mixedValues);
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      }
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}"
65130,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return false;
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65131,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlChoiceCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
65132,"/** 
 * @override
 * @param xPathFragment
 * @param unmarshalRecord
 * @param atts
 */
public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  if (xmlField.getLastXPathFragment().isAttribute()) {
    if (!this.xmlCollectionReferenceMapping.usesSingleNode()) {
      String namespaceURI=xmlField.getLastXPathFragment().getNamespaceURI();
      String value;
      if (namespaceURI == null) {
        value=atts.getValue(xmlField.getLastXPathFragment().getLocalName());
      }
 else {
        value=atts.getValue(namespaceURI,xmlField.getLastXPathFragment().getLocalName());
      }
      xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,value,unmarshalRecord.getSession());
      return true;
    }
  }
  return true;
}","/** 
 * @override
 * @param xPathFragment
 * @param unmarshalRecord
 * @param atts
 */
public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  if (xmlField.getLastXPathFragment().isAttribute()) {
    if (!this.xmlCollectionReferenceMapping.usesSingleNode()) {
      String namespaceURI=xmlField.getLastXPathFragment().getNamespaceURI();
      String value;
      if (namespaceURI == null) {
        value=atts.getValue(xmlField.getLastXPathFragment().getLocalName());
      }
 else {
        value=atts.getValue(namespaceURI,xmlField.getLastXPathFragment().getLocalName());
      }
      xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,value,unmarshalRecord.getSession(),unmarshalRecord.getContainerInstance(this));
      return true;
    }
  }
  return true;
}"
65133,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,false);
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65134,"/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession());
  }
}","/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    Object container=unmarshalRecord.getContainerInstance(this);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession(),container);
  }
}"
65135,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlCompositeCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65136,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if ((xmlCompositeDirectCollectionMapping.usesSingleNode() && !xmlCompositeDirectCollectionMapping.isDefaultEmptyContainer()) || xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.usesSingleNode() && !xmlCompositeDirectCollectionMapping.isDefaultEmptyContainer()) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null);
    }
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65137,"private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=localName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=localName.substring(0,nsIndex);
            localName=localName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
          if (localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
            break;
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
String uri=XMLConstants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
parentLocalName=parentLocalName.substring(nsIndex + 1);
uri=namespaces.resolveNamespacePrefix(prefix);
}
}
boolean isTextValue=isTextValue(parentLocalName);
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (!isTextValue) {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
parse(nextChildTree);
if (!isTextValue) {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=localName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=localName.substring(0,nsIndex);
            localName=localName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
          if (localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
            break;
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=XMLConstants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
parentLocalName=parentLocalName.substring(nsIndex + 1);
uri=namespaces.resolveNamespacePrefix(prefix);
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (!isTextValue) {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
parse(nextChildTree);
if (!isTextValue) {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
65138,"@Override protected Attribute[] attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new Attribute[1];
      attributes[0]=new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      ArrayList<Attribute> attributesList=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=attributeLocalName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=attributeLocalName.substring(0,nsIndex);
            attributeLocalName=attributeLocalName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        Tree childValueTree=childTree.getChild(1);
        if (childValueTree.getType() == JSONLexer.ARRAY) {
          for (int y=0, size=childValueTree.getChildCount(); y < size; y++) {
            CommonTree nextChildTree=(CommonTree)childValueTree.getChild(y);
            addSimpleAttribute(attributesList,uri,attributeLocalName,nextChildTree);
          }
        }
 else {
          addSimpleAttribute(attributesList,uri,attributeLocalName,childValueTree);
        }
      }
      attributes=attributesList.toArray(new Attribute[attributesList.size()]);
    }
 else {
      attributes=NO_ATTRIBUTES;
    }
  }
  return attributes;
}","@Override protected Attribute[] attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new Attribute[1];
      attributes[0]=new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      ArrayList<Attribute> attributesList=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=attributeLocalName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=attributeLocalName.substring(0,nsIndex);
            attributeLocalName=attributeLocalName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        Tree childValueTree=childTree.getChild(1);
        if (childValueTree.getType() == JSONLexer.ARRAY) {
          int size=childValueTree.getChildCount();
          if (size == 0) {
            attributesList.add(new Attribute(uri,attributeLocalName,attributeLocalName,""String_Node_Str""));
          }
          for (int y=0; y < size; y++) {
            CommonTree nextChildTree=(CommonTree)childValueTree.getChild(y);
            addSimpleAttribute(attributesList,uri,attributeLocalName,nextChildTree);
          }
        }
 else {
          addSimpleAttribute(attributesList,uri,attributeLocalName,childValueTree);
        }
      }
      attributes=attributesList.toArray(new Attribute[attributesList.size()]);
    }
 else {
      attributes=NO_ATTRIBUTES;
    }
  }
  return attributes;
}"
65139,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed) throws DatabaseException {
  List<XMLEntry> values=((DOMRecord)row).getValuesIndicatingNoEntry(this.getFields());
  Object container=getContainerPolicy().containerInstance(values.size());
  for (  XMLEntry next : values) {
    XMLField valueField=next.getXMLField();
    DatabaseMapping nextMapping=(DatabaseMapping)this.choiceElementMappings.get(valueField);
    Converter converter=getConverter();
    if (nextMapping.isAbstractCompositeCollectionMapping()) {
      XMLCompositeCollectionMapping xmlMapping=(XMLCompositeCollectionMapping)nextMapping;
      Object value=xmlMapping.buildObjectFromNestedRow((AbstractRecord)next.getValue(),joinManager,sourceQuery,executionSession,isTargetProtected);
      if (converter != null) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertDataValueToObjectValue(value,executionSession,((XMLRecord)row).getUnmarshaller());
        }
 else {
          value=converter.convertDataValueToObjectValue(value,executionSession);
        }
      }
      getContainerPolicy().addInto(value,container,executionSession);
    }
 else     if (nextMapping instanceof XMLCompositeDirectCollectionMapping) {
      XMLCompositeDirectCollectionMapping xmlMapping=(XMLCompositeDirectCollectionMapping)nextMapping;
      Object value=next.getValue();
      if (converter != null) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertDataValueToObjectValue(value,executionSession,((XMLRecord)row).getUnmarshaller());
        }
 else {
          value=converter.convertDataValueToObjectValue(value,executionSession);
        }
      }
      getContainerPolicy().addInto(value,container,executionSession);
    }
  }
  ArrayList<XMLMapping> processedMappings=new ArrayList<XMLMapping>();
  for (  XMLMapping mapping : choiceElementMappings.values()) {
    if (((DatabaseMapping)mapping).isObjectReferenceMapping() && !(processedMappings.contains(mapping))) {
      ((DatabaseMapping)mapping).readFromRowIntoObject(row,joinManager,((XMLRecord)row).getCurrentObject(),cacheKey,sourceQuery,executionSession,isTargetProtected);
      processedMappings.add(mapping);
    }
  }
  return container;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed) throws DatabaseException {
  List<XMLEntry> values=((DOMRecord)row).getValuesIndicatingNoEntry(this.getFields());
  Object container=getContainerPolicy().containerInstance(values.size());
  for (  XMLEntry next : values) {
    XMLField valueField=next.getXMLField();
    DatabaseMapping nextMapping=(DatabaseMapping)this.choiceElementMappings.get(valueField);
    Converter converter=getConverter();
    if (nextMapping.isAbstractCompositeCollectionMapping()) {
      XMLCompositeCollectionMapping xmlMapping=(XMLCompositeCollectionMapping)nextMapping;
      Object value=xmlMapping.buildObjectFromNestedRow((AbstractRecord)next.getValue(),joinManager,sourceQuery,executionSession,isTargetProtected);
      if (converter != null) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertDataValueToObjectValue(value,executionSession,((XMLRecord)row).getUnmarshaller());
        }
 else {
          value=converter.convertDataValueToObjectValue(value,executionSession);
        }
      }
      getContainerPolicy().addInto(value,container,executionSession);
    }
 else     if (nextMapping instanceof XMLCompositeDirectCollectionMapping) {
      XMLCompositeDirectCollectionMapping xmlMapping=(XMLCompositeDirectCollectionMapping)nextMapping;
      Object value=next.getValue();
      if (converter != null) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertDataValueToObjectValue(value,executionSession,((XMLRecord)row).getUnmarshaller());
        }
 else {
          value=converter.convertDataValueToObjectValue(value,executionSession);
        }
      }
      getContainerPolicy().addInto(value,container,executionSession);
    }
  }
  ArrayList<XMLMapping> processedMappings=new ArrayList<XMLMapping>();
  for (  XMLMapping mapping : choiceElementMappings.values()) {
    if (((DatabaseMapping)mapping).isObjectReferenceMapping() && ((DatabaseMapping)mapping).isCollectionMapping() && !(processedMappings.contains(mapping))) {
      ((XMLCollectionReferenceMapping)mapping).readFromRowIntoObject(row,joinManager,((XMLRecord)row).getCurrentObject(),cacheKey,sourceQuery,executionSession,isTargetProtected,container);
      processedMappings.add(mapping);
    }
  }
  return container;
}"
65140,"/** 
 * Determines whether the given variable is a valid Java identifier, which means it follows the Java specification. The first letter has to be a Java identifier start and the others have to be Java identifier parts.
 * @param variable The variable to validate
 * @return <code>true</code> if the given variable follows the Java identifier specification;<code>false</code> otherwise
 */
protected boolean isValidJavaIdentifier(String variable){
  for (int index=0, count=variable.length(); index < count; index++) {
    int character=variable.charAt(index);
    if ((index == 0) && !Character.isJavaIdentifierStart(character)) {
      return false;
    }
 else     if ((index > 0) && !Character.isJavaIdentifierPart(character)) {
      return false;
    }
  }
  return true;
}","/** 
 * Determines whether the given variable is a valid Java identifier, which means it follows the Java specification. The first letter has to be a Java identifier start and the others have to be Java identifier parts.
 * @param variable The variable to validate
 * @return <code>true</code> if the given variable follows the Java identifier specification;<code>false</code> otherwise
 */
protected boolean isValidJavaIdentifier(String variable){
  for (int index=0, count=variable.length(); index < count; index++) {
    int character=variable.charAt(index);
    if ((index == 0) && !Character.isJavaIdentifierStart(character)) {
      return false;
    }
    if ((index > 0) && !Character.isJavaIdentifierPart(character)) {
      return false;
    }
  }
  return true;
}"
65141,"protected AbstractSingleEncapsulatedExpressionHelper<FunctionExpression> buildFunctionExpressionHelper(){
  return new AbstractSingleEncapsulatedExpressionHelper<FunctionExpression>(){
    @Override public String[] arguments(    FunctionExpression expression){
      return new String[]{expression.getIdentifier()};
    }
    @Override @SuppressWarnings(""String_Node_Str"") protected String encapsulatedExpressionInvalidKey(    FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
          Expression children=expression.getExpression();
          int childrenCount=getChildren(children).size();
          if (childrenCount > 1) {
            return FunctionExpression_MoreThanOneExpression;
          }
        }
case ZERO:
{
        return FunctionExpression_HasExpression;
      }
default :
{
      return FunctionExpression_InvalidExpression;
    }
}
}
@Override @SuppressWarnings(""String_Node_Str"") protected String encapsulatedExpressionMissingKey(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
    Expression children=expression.getExpression();
    int childrenCount=getChildren(children).size();
    if (childrenCount == 0) {
      return FunctionExpression_MissingOneExpression;
    }
  }
default :
{
  return FunctionExpression_MissingExpression;
}
}
}
@Override protected boolean isEncapsulatedExpressionMissing(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
case ONE_OR_MANY:
{
return !expression.hasExpression();
}
default :
{
return false;
}
}
}
@Override protected boolean isEncapsulatedExpressionValid(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
return isValid(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
case ONE_OR_MANY:
{
return isValidWithChildCollectionBypass(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
case ZERO_OR_ONE:
{
return !expression.hasExpression() || isValid(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
default :
{
return true;
}
}
}
public String leftParenthesisMissingKey(FunctionExpression expression){
return FunctionExpression_MissingLeftParenthesis;
}
@Override protected int lengthBeforeEncapsulatedExpression(FunctionExpression expression){
return expression.getFunctionName().length() + (expression.hasComma() ? 1 : 0) + (expression.hasSpaceAfterComma() ? 1 : 0);
}
public String rightParenthesisMissingKey(FunctionExpression expression){
return FunctionExpression_MissingRightParenthesis;
}
}
;
}","protected AbstractSingleEncapsulatedExpressionHelper<FunctionExpression> buildFunctionExpressionHelper(){
  return new AbstractSingleEncapsulatedExpressionHelper<FunctionExpression>(){
    @Override public String[] arguments(    FunctionExpression expression){
      return new String[]{expression.getIdentifier()};
    }
    @Override @SuppressWarnings(""String_Node_Str"") protected String encapsulatedExpressionInvalidKey(    FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
          Expression children=expression.getExpression();
          int childrenCount=getChildren(children).size();
          if (childrenCount > 1) {
            return FunctionExpression_MoreThanOneExpression;
          }
        }
case ZERO:
{
        return FunctionExpression_HasExpression;
      }
default :
{
      return FunctionExpression_InvalidExpression;
    }
}
}
@Override @SuppressWarnings(""String_Node_Str"") protected String encapsulatedExpressionMissingKey(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
    Expression children=expression.getExpression();
    int childrenCount=getChildren(children).size();
    if (childrenCount == 0) {
      return FunctionExpression_MissingOneExpression;
    }
  }
default :
{
  return FunctionExpression_MissingExpression;
}
}
}
@Override protected boolean isEncapsulatedExpressionMissing(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
case ONE_OR_MANY:
return !expression.hasExpression();
default :
return false;
}
}
@Override protected boolean isEncapsulatedExpressionValid(FunctionExpression expression){
switch (expression.getParameterCount()) {
case ONE:
{
return isValid(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
case ONE_OR_MANY:
{
return isValidWithChildCollectionBypass(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
case ZERO_OR_ONE:
{
return !expression.hasExpression() || isValid(expression.getExpression(),expression.encapsulatedExpressionBNF());
}
default :
{
return true;
}
}
}
public String leftParenthesisMissingKey(FunctionExpression expression){
return FunctionExpression_MissingLeftParenthesis;
}
@Override protected int lengthBeforeEncapsulatedExpression(FunctionExpression expression){
return expression.getFunctionName().length() + (expression.hasComma() ? 1 : 0) + (expression.hasSpaceAfterComma() ? 1 : 0);
}
public String rightParenthesisMissingKey(FunctionExpression expression){
return FunctionExpression_MissingRightParenthesis;
}
}
;
}"
65142,"/** 
 * Validates the given   {@link AbstractSchemaName}. The tests to perform are: <ul> <li>Check to see the actual entity associated with the entity name does exist.</li> <li>If the abstract schema name is actually a path expression (which can be defined in a subquery but is always parsed as an abstract schema name), then make sure the path expression is resolving to a relationship mapping.</li> </ul>
 * @param expression The {@link AbstractSchemaName} to validate
 * @return <code>true</code> if the entity name was resolved; <code>false</code> otherwise
 */
protected boolean validateAbstractSchemaName(AbstractSchemaName expression){
  String abstractSchemaName=expression.getText();
  Object managedType=helper.getEntityNamed(abstractSchemaName);
  boolean valid=true;
  if (managedType == null) {
    IdentificationVariable identificationVariable=findVirtualIdentificationVariable(expression);
    String variableName=(identificationVariable != null) ? identificationVariable.getText() : null;
    if (ExpressionTools.stringIsNotEmpty(variableName)) {
      Object mapping=helper.resolveMapping(variableName,abstractSchemaName);
      Object type=helper.getMappingType(mapping);
      if (!helper.isTypeResolvable(type)) {
        addProblem(expression,StateFieldPathExpression_NotResolvable,abstractSchemaName);
        valid=false;
      }
 else       if (!helper.isRelationshipMapping(mapping)) {
        addProblem(expression,PathExpression_NotRelationshipMapping,abstractSchemaName);
        valid=false;
      }
    }
 else {
      addProblem(expression,AbstractSchemaName_Invalid,abstractSchemaName);
      valid=false;
    }
  }
  return valid;
}","/** 
 * Validates the given   {@link AbstractSchemaName}. The tests to perform are: <ul> <li>Check to see the actual entity associated with the entity name does exist.</li> <li>If the abstract schema name is actually a path expression (which can be defined in a subquery but is always parsed as an abstract schema name), then make sure the path expression is resolving to a relationship mapping.</li> </ul>
 * @param expression The {@link AbstractSchemaName} to validate
 * @return <code>true</code> if the entity name was resolved; <code>false</code> otherwise
 */
protected boolean validateAbstractSchemaName(AbstractSchemaName expression){
  String abstractSchemaName=expression.getText();
  Object managedType=helper.getEntityNamed(abstractSchemaName);
  boolean valid=true;
  if (managedType == null) {
    IdentificationVariable identificationVariable=findVirtualIdentificationVariable(expression);
    String variableName=(identificationVariable != null) ? identificationVariable.getText() : null;
    if (ExpressionTools.stringIsNotEmpty(variableName)) {
      Object mapping=helper.resolveMapping(variableName,abstractSchemaName);
      Object type=helper.getMappingType(mapping);
      if (!helper.isTypeResolvable(type)) {
        if (isSubquery(expression)) {
          addProblem(expression,StateFieldPathExpression_NotResolvable,abstractSchemaName);
        }
 else {
          addProblem(expression,AbstractSchemaName_Invalid,abstractSchemaName);
        }
        valid=false;
      }
 else       if (!helper.isRelationshipMapping(mapping)) {
        addProblem(expression,PathExpression_NotRelationshipMapping,abstractSchemaName);
        valid=false;
      }
    }
 else {
      addProblem(expression,AbstractSchemaName_Invalid,abstractSchemaName);
      valid=false;
    }
  }
  return valid;
}"
65143,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
    return xmlMarshaller.isEqualUsingIdenity();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
    return xmlMarshaller.isEqualUsingIdenity();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65144,"/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
      xmlMarshaller.setEqualUsingIdenity(((Boolean)value).booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException 
 * @see org.eclipse.persistence.jaxb.MarshallerProperties
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS.equals(key)) {
      xmlMarshaller.setMarshalEmptyCollections((Boolean)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (OBJECT_IDENTITY_CYCLE_DETECTION.equals(key)) {
      xmlMarshaller.setEqualUsingIdenity(((Boolean)value).booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65145,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    return xmlUnmarshaller.getMediaType();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    return xmlUnmarshaller.getAttributePrefix();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_INCLUDE_ROOT)) {
    return xmlUnmarshaller.isIncludeRoot();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR)) {
    return xmlUnmarshaller.getNamespaceSeparator();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER)) {
    if (xmlUnmarshaller.getNamespaceResolver() == null) {
      return null;
    }
    if (xmlUnmarshaller.getNamespaceResolver() instanceof PrefixMapperNamespaceResolver) {
      PrefixMapperNamespaceResolver wrapper=(PrefixMapperNamespaceResolver)xmlUnmarshaller.getNamespaceResolver();
      return wrapper.getPrefixMapper();
    }
 else {
      Map<String,String> nsMap=new HashMap<String,String>();
      Map<String,String> prefixesToNS=xmlUnmarshaller.getNamespaceResolver().getPrefixesToNamespaces();
      Iterator<Entry<String,String>> namesapcesIter=prefixesToNS.entrySet().iterator();
      for (int i=0; i < prefixesToNS.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nsMap.put(nextEntry.getValue(),nextEntry.getKey());
      }
      return nsMap;
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_VALUE_WRAPPER)) {
    return xmlUnmarshaller.getValueWrapper();
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    return xmlUnmarshaller.getIDResolver();
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    IDResolverWrapper wrapper=(IDResolverWrapper)xmlUnmarshaller.getIDResolver();
    return wrapper.getResolver();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 * @see org.eclipse.persistence.jaxb.UnmarshallerProperties
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    return xmlUnmarshaller.getMediaType();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    return xmlUnmarshaller.getAttributePrefix();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_INCLUDE_ROOT)) {
    return xmlUnmarshaller.isIncludeRoot();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR)) {
    return xmlUnmarshaller.getNamespaceSeparator();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER)) {
    if (xmlUnmarshaller.getNamespaceResolver() == null) {
      return null;
    }
    if (xmlUnmarshaller.getNamespaceResolver() instanceof PrefixMapperNamespaceResolver) {
      PrefixMapperNamespaceResolver wrapper=(PrefixMapperNamespaceResolver)xmlUnmarshaller.getNamespaceResolver();
      return wrapper.getPrefixMapper();
    }
 else {
      Map<String,String> nsMap=new HashMap<String,String>();
      Map<String,String> prefixesToNS=xmlUnmarshaller.getNamespaceResolver().getPrefixesToNamespaces();
      Iterator<Entry<String,String>> namesapcesIter=prefixesToNS.entrySet().iterator();
      for (int i=0; i < prefixesToNS.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nsMap.put(nextEntry.getValue(),nextEntry.getKey());
      }
      return nsMap;
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_VALUE_WRAPPER)) {
    return xmlUnmarshaller.getValueWrapper();
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    return xmlUnmarshaller.getIDResolver();
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    IDResolverWrapper wrapper=(IDResolverWrapper)xmlUnmarshaller.getIDResolver();
    return wrapper.getResolver();
  }
  throw new PropertyException(key);
}"
65146,"/** 
 * Set a property on the JAXBUnmarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.      
 */
public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    MediaType mType=null;
    if (value instanceof MediaType) {
      mType=(MediaType)value;
    }
 else     if (value instanceof String) {
      mType=MediaType.getMediaType((String)value);
    }
    if (mType != null) {
      xmlUnmarshaller.setMediaType(mType);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    xmlUnmarshaller.setAttributePrefix((String)value);
  }
 else   if (UnmarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    xmlUnmarshaller.setIncludeRoot((Boolean)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    if (value instanceof Map) {
      Map<String,String> namespaces=(Map<String,String>)value;
      NamespaceResolver nr=new NamespaceResolver();
      Iterator<Entry<String,String>> namesapcesIter=namespaces.entrySet().iterator();
      for (int i=0; i < namespaces.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nr.put(nextEntry.getValue(),nextEntry.getKey());
      }
      xmlUnmarshaller.setNamespaceResolver(nr);
    }
 else     if (value instanceof NamespacePrefixMapper) {
      xmlUnmarshaller.setNamespaceResolver(new PrefixMapperNamespaceResolver((NamespacePrefixMapper)value,null));
    }
  }
 else   if (UnmarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    xmlUnmarshaller.setValueWrapper((String)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    xmlUnmarshaller.setNamespaceSeparator((Character)value);
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    setIDResolver((IDResolver)value);
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    setIDResolver(new IDResolverWrapper(value));
  }
 else {
    throw new PropertyException(key,value);
  }
}","/** 
 * Set a property on the JAXBUnmarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException.
 * @see org.eclipse.persistence.jaxb.UnmarshallerProperties
 */
public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    MediaType mType=null;
    if (value instanceof MediaType) {
      mType=(MediaType)value;
    }
 else     if (value instanceof String) {
      mType=MediaType.getMediaType((String)value);
    }
    if (mType != null) {
      xmlUnmarshaller.setMediaType(mType);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    xmlUnmarshaller.setAttributePrefix((String)value);
  }
 else   if (UnmarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    xmlUnmarshaller.setIncludeRoot((Boolean)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    if (value instanceof Map) {
      Map<String,String> namespaces=(Map<String,String>)value;
      NamespaceResolver nr=new NamespaceResolver();
      Iterator<Entry<String,String>> namesapcesIter=namespaces.entrySet().iterator();
      for (int i=0; i < namespaces.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nr.put(nextEntry.getValue(),nextEntry.getKey());
      }
      xmlUnmarshaller.setNamespaceResolver(nr);
    }
 else     if (value instanceof NamespacePrefixMapper) {
      xmlUnmarshaller.setNamespaceResolver(new PrefixMapperNamespaceResolver((NamespacePrefixMapper)value,null));
    }
  }
 else   if (UnmarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    xmlUnmarshaller.setValueWrapper((String)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    xmlUnmarshaller.setNamespaceSeparator((Character)value);
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    setIDResolver((IDResolver)value);
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    setIDResolver(new IDResolverWrapper(value));
  }
 else {
    throw new PropertyException(key,value);
  }
}"
65147,"public Object getObject(String colName,java.util.Map map){
  return getObject(colName);
}","public <T>T getObject(int columnIndex,Class<T> type){
  return null;
}"
65148,"/** 
 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language. If the value is an SQL <code>NULL</code>, the driver returns a Java <code>null</code>. This method uses the specified <code>Map</code> object for custom mapping if appropriate.
 * @param colName the name of the column from which to retrieve the value
 * @param map a <code>java.util.Map</code> object that contains the mappingfrom SQL type names to classes in the Java programming language
 * @return an <code>Object</code> representing the SQL value in thespecified column
 * @exception SQLException if a database access error occurs
 * @since 1.2
 */
public Object getObject(String colName,java.util.Map map){
  return getObject(colName);
}","public <T>T getObject(int columnIndex,Class<T> type){
  return null;
}"
65149,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.DotTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(NoMappingsTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.defaultns.emptyprefix.DefaultNamespaceEmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNoDomTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(IDResolverTestCases.class);
  suite.addTestSuite(NonELIDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.attachments.contenttype.ContentTypeTestCases.class);
  suite.addTestSuite(XmlElementRefWithNamespaceTests.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.DotTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(NoMappingsTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.defaultns.emptyprefix.DefaultNamespaceEmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNoDomTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(IDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.attachments.contenttype.ContentTypeTestCases.class);
  suite.addTestSuite(XmlElementRefWithNamespaceTests.class);
  return suite;
}"
65150,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(NonELPrefixMapperTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  suite.addTest(SunCompatibilityTestSuite.suite());
  suite.addTestSuite(JAXBEmployeeTestCases.class);
  suite.addTestSuite(JAXBEmployeeNoWrapperTestCases.class);
  suite.addTestSuite(JAXBEmployeeNSTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  suite.addTest(SunCompatibilityTestSuite.suite());
  suite.addTestSuite(JAXBEmployeeTestCases.class);
  suite.addTestSuite(JAXBEmployeeNoWrapperTestCases.class);
  suite.addTestSuite(JAXBEmployeeNSTestCases.class);
  return suite;
}"
65151,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(CycleRecoverableTestCases.class);
  suite.addTestSuite(ClassLevelAccessorTestCases.class);
  suite.addTestSuite(PackageLevelAccessorTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(CycleRecoverableTestCases.class);
  suite.addTestSuite(ClassLevelAccessorTestCases.class);
  suite.addTestSuite(PackageLevelAccessorTestCases.class);
  suite.addTestSuite(NonELIDResolverTestCases.class);
  suite.addTestSuite(NonELPrefixMapperTestCases.class);
  suite.addTest(XmlLocationTestSuite.suite());
  return suite;
}"
65152,"public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    if (fieldToClassMappings.get(entry.getKey()) == null) {
      fieldToClassMappings.put(entry.getKey(),elementType);
    }
  }
  for (  Entry<String,XMLField> next : this.classNameToFieldMappings.entrySet()) {
    String className=next.getKey();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    classToFieldMappings.put(elementType,next.getValue());
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
}","public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    mapping.convertClassNamesToClasses(classLoader);
    if (fieldToClassMappings.get(entry.getKey()) == null) {
      fieldToClassMappings.put(entry.getKey(),elementType);
    }
  }
  for (  Entry<String,XMLField> next : this.classNameToFieldMappings.entrySet()) {
    String className=next.getKey();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    classToFieldMappings.put(elementType,next.getValue());
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
}"
65153,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}"
65154,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.fieldToClassMappings.size() == 0) {
    this.convertClassNamesToClasses(((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).getLoader());
  }
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      ((XMLDirectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else     if (nextMapping instanceof XMLObjectReferenceMapping) {
      ((XMLObjectReferenceMapping)nextMapping).setIsWriteOnly(this.isWriteOnly);
    }
 else     if (nextMapping instanceof XMLBinaryDataMapping) {
      ((XMLBinaryDataMapping)nextMapping).setIsCDATA(this.isWriteOnly);
      if (converter != null) {
        ((XMLBinaryDataMapping)nextMapping).setConverter(converter);
      }
    }
 else {
      ((XMLCompositeObjectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  Iterator<XMLMapping> mappings=getChoiceElementMappings().values().iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractDirectMapping()) {
      ((XMLDirectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractDirectMapping)nextMapping).setConverter(converter);
      }
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=(QName)xmlConversionManager.getDefaultJavaTypes().get(nextMapping.getAttributeClassification());
      if (schemaType != null && ((XMLField)nextMapping.getField()).getSchemaType() == null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
    }
 else     if (nextMapping instanceof XMLObjectReferenceMapping) {
      ((XMLObjectReferenceMapping)nextMapping).setIsWriteOnly(this.isWriteOnly);
    }
 else     if (nextMapping instanceof XMLBinaryDataMapping) {
      ((XMLBinaryDataMapping)nextMapping).setIsCDATA(this.isWriteOnly);
      if (converter != null) {
        ((XMLBinaryDataMapping)nextMapping).setConverter(converter);
      }
    }
 else {
      ((XMLCompositeObjectMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
      if (converter != null) {
        ((AbstractCompositeObjectMapping)nextMapping).setConverter(converter);
      }
    }
    nextMapping.initialize(session);
  }
}"
65155,"public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    if (fieldToClassMappings.get(entry.getKey()) == null) {
      fieldToClassMappings.put(entry.getKey(),elementType);
    }
  }
  for (  Entry<String,XMLField> next : this.classNameToFieldMappings.entrySet()) {
    String className=next.getKey();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    classToFieldMappings.put(elementType,next.getValue());
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
  if (classNameToConverter != null) {
    if (this.classToConverter == null) {
      this.classToConverter=new HashMap<Class,Converter>();
    }
    for (    Entry<String,Converter> next : classNameToConverter.entrySet()) {
      String className=next.getKey();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.classToConverter.put(elementType,next.getValue());
    }
  }
}","public void convertClassNamesToClasses(ClassLoader classLoader){
  Iterator<Entry<XMLField,String>> entries=fieldToClassNameMappings.entrySet().iterator();
  while (entries.hasNext()) {
    Map.Entry<XMLField,String> entry=entries.next();
    String className=entry.getValue();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    XMLMapping mapping=this.choiceElementMappings.get(entry.getKey());
    mapping.convertClassNamesToClasses(classLoader);
    if (fieldToClassMappings.get(entry.getKey()) == null) {
      fieldToClassMappings.put(entry.getKey(),elementType);
    }
  }
  for (  Entry<String,XMLField> next : this.classNameToFieldMappings.entrySet()) {
    String className=next.getKey();
    Class elementType=null;
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        try {
          elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
        }
 catch (        PrivilegedActionException exception) {
          throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
        }
      }
 else {
        elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
      }
    }
 catch (    ClassNotFoundException exc) {
      throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
    }
    classToFieldMappings.put(elementType,next.getValue());
  }
  if (classNameToSourceFieldsMappings != null) {
    Iterator<Entry<String,List<XMLField>>> sourceFieldEntries=classNameToSourceFieldsMappings.entrySet().iterator();
    while (sourceFieldEntries.hasNext()) {
      Entry<String,List<XMLField>> nextEntry=sourceFieldEntries.next();
      String className=nextEntry.getKey();
      List<XMLField> fields=nextEntry.getValue();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.getClassToSourceFieldsMappings().put(elementType,fields);
    }
  }
  if (classNameToConverter != null) {
    if (this.classToConverter == null) {
      this.classToConverter=new HashMap<Class,Converter>();
    }
    for (    Entry<String,Converter> next : classNameToConverter.entrySet()) {
      String className=next.getKey();
      Class elementType=null;
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            elementType=(Class)AccessController.doPrivileged(new PrivilegedClassForName(className,true,classLoader));
          }
 catch (          PrivilegedActionException exception) {
            throw ValidationException.classNotFoundWhileConvertingClassNames(className,exception.getException());
          }
        }
 else {
          elementType=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(className,true,classLoader);
        }
      }
 catch (      ClassNotFoundException exc) {
        throw ValidationException.classNotFoundWhileConvertingClassNames(className,exc);
      }
      this.classToConverter.put(elementType,next.getValue());
    }
  }
}"
65156,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      try {
        xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      }
 catch (      EclipseLinkException e) {
        SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
        xmlReader.getErrorHandler().warning(saxParseException);
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      try {
        xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
      }
 catch (      EclipseLinkException e) {
        SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),documentLocator,e);
        xmlReader.getErrorHandler().warning(saxParseException);
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}"
65157,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
 else {
    marshalRecord.marshalWithoutRootElement(treeObjectBuilder,object,descriptor,root,isXMLRoot);
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          String typeValue=type.getLocalPart();
          if (marshalRecord.isNamespaceAware()) {
            typeValue=XMLConstants.SCHEMA_PREFIX + marshalRecord.getNamespaceSeparator() + typeValue;
          }
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (getXmlHeader() != null) {
    marshalRecord.writeHeader();
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
 else {
    marshalRecord.marshalWithoutRootElement(treeObjectBuilder,object,descriptor,root,isXMLRoot);
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          String typeValue=type.getLocalPart();
          if (marshalRecord.isNamespaceAware()) {
            typeValue=XMLConstants.SCHEMA_PREFIX + marshalRecord.getNamespaceSeparator() + typeValue;
          }
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65158,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (XML_HEADERS.equals(key)) {
    return xmlMarshaller.getXmlHeader();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65159,"/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_HEADERS.equals(key)) {
      xmlMarshaller.setXmlHeader((String)value);
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65160,"/** 
 * INTERNAL: Convenience method that sets up class indicator and @sdoRef attribute.
 * @param xdesc
 * @param pCls
 */
private void addClassIndicator(XMLDescriptor xdesc,Class pCls,boolean isInheritanceRoot){
  XMLField field=(XMLField)getXmlDescriptor().buildField(""String_Node_Str"");
  xdesc.getInheritancePolicy().setClassIndicatorField(field);
  String parentIndicator=getName();
  String parentPrefix=xdesc.getNamespaceResolver().resolveNamespaceURI(getURI());
  if (parentPrefix != null) {
    parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
  }
  xdesc.getInheritancePolicy().addClassIndicator(pCls,parentIndicator);
  if (xdesc.getMappingForAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME) == null) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xdesc.addMapping(sdoRefMapping);
  }
}","/** 
 * INTERNAL: Convenience method that sets up class indicator and @sdoRef attribute.
 * @param xdesc
 * @param pCls
 */
private void addClassIndicator(XMLDescriptor xdesc,Class pCls,boolean isInheritanceRoot){
  XMLField field=(XMLField)getXmlDescriptor().buildField(""String_Node_Str"");
  field.initialize();
  xdesc.getInheritancePolicy().setClassIndicatorField(field);
  String parentIndicator=getName();
  String parentPrefix=xdesc.getNamespaceResolver().resolveNamespaceURI(getURI());
  if (parentPrefix != null) {
    parentIndicator=parentPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + parentIndicator;
  }
  xdesc.getInheritancePolicy().addClassIndicator(pCls,parentIndicator);
  if (xdesc.getMappingForAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME) == null) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xdesc.addMapping(sdoRefMapping);
  }
}"
65161,"public boolean isOwningNode(XPathFragment xPathFragment){
  XPathFragment nextFragment=xPathFragment.getNextFragment();
  if (nextFragment == null) {
    return xPathFragment.isAttribute() || xPathFragment.nameIsText();
  }
 else {
    return (nextFragment != null) && (nextFragment.nameIsText() || nextFragment.isAttribute());
  }
}","public boolean isOwningNode(XPathFragment xPathFragment){
  XPathFragment nextFragment=xPathFragment.getNextFragment();
  if (nextFragment == null || xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    return xPathFragment.isAttribute() || xPathFragment.nameIsText();
  }
 else {
    return (nextFragment != null) && (nextFragment.nameIsText() || nextFragment.isAttribute());
  }
}"
65162,"@Test public void emprecRefCursorTest2(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(NAMES_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void emprecRefCursorTest2(){
  XMLUnmarshaller unmarshaller=xrService.getXMLContext().createUnmarshaller();
  Object inputTab=unmarshaller.unmarshal(new StringReader(TABLE2_XML));
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",inputTab);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(NAMES_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65163,"@Test public void strongRefCursorTest2(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(MIKE_NAMES_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void strongRefCursorTest2(){
  XMLUnmarshaller unmarshaller=xrService.getXMLContext().createUnmarshaller();
  Object inputTab=unmarshaller.unmarshal(new StringReader(TABLE_XML));
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",inputTab);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(MIKE_NAMES_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65164,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_TAB1_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_TAB1_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRC_CURSOR_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65165,"protected ClassDescriptor buildDatabaseTypeWrapperDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseTypeWrapper.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(JDBCTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SimplePLSQLTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLRecordWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLCollectionWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleArrayTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleObjectTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  return descriptor;
}","protected ClassDescriptor buildDatabaseTypeWrapperDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseTypeWrapper.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(JDBCTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SimplePLSQLTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLRecordWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLCollectionWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleArrayTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleObjectTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLCursorWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  return descriptor;
}"
65166,"/** 
 * Wrap the type in a type wrapper to handle XML conversion.
 */
public static DatabaseTypeWrapper wrapType(DatabaseType databaseType){
  if (databaseType.isComplexDatabaseType()) {
    ComplexDatabaseType complexType=(ComplexDatabaseType)databaseType;
    if (complexType.isJDBCType()) {
      if (complexType.isCollection()) {
        return new OracleArrayTypeWrapper(databaseType);
      }
      return new OracleObjectTypeWrapper(databaseType);
    }
 else     if (complexType.isRecord()) {
      return new PLSQLRecordWrapper(databaseType);
    }
 else     if (complexType.isCollection()) {
      return new PLSQLCollectionWrapper(databaseType);
    }
  }
 else   if (databaseType.isJDBCType()) {
    return new JDBCTypeWrapper(databaseType);
  }
 else {
    return new SimplePLSQLTypeWrapper(databaseType);
  }
  return null;
}","/** 
 * Wrap the type in a type wrapper to handle XML conversion.
 */
public static DatabaseTypeWrapper wrapType(DatabaseType databaseType){
  if (databaseType.isComplexDatabaseType()) {
    ComplexDatabaseType complexType=(ComplexDatabaseType)databaseType;
    if (complexType.isJDBCType()) {
      if (complexType.isCollection()) {
        return new OracleArrayTypeWrapper(databaseType);
      }
      return new OracleObjectTypeWrapper(databaseType);
    }
    if (complexType.isRecord()) {
      return new PLSQLRecordWrapper(databaseType);
    }
    if (complexType.isCollection()) {
      return new PLSQLCollectionWrapper(databaseType);
    }
    if (complexType.isCursor()) {
      return new PLSQLCursorWrapper(databaseType);
    }
  }
 else   if (databaseType.isJDBCType()) {
    return new JDBCTypeWrapper(databaseType);
  }
 else {
    return new SimplePLSQLTypeWrapper(databaseType);
  }
  return null;
}"
65167,"@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildObjectTypeFieldAssociationDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildOracleArrayTypeWrapperDescriptor());
  addDescriptor(buildOracleObjectTypeWrapperDescriptor());
  addDescriptor(buildPLSQLrecordWrapperDescriptor());
  addDescriptor(buildPLSQLCollectionWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLStoredFunctionCallDescriptor());
  addDescriptor(buildOracleArrayTypeDescriptor());
  addDescriptor(buildOracleObjectTypeDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildPLSQLCollectionDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
  addDescriptor(buildDocumentPreservationPolicyDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyDescriptor());
  addDescriptor(buildXMLBinderPolicyDescriptor());
  addDescriptor(buildNodeOrderingPolicyDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyDescriptor());
}","@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildObjectTypeFieldAssociationDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildOracleArrayTypeWrapperDescriptor());
  addDescriptor(buildOracleObjectTypeWrapperDescriptor());
  addDescriptor(buildPLSQLCursorWrapperDescriptor());
  addDescriptor(buildPLSQLrecordWrapperDescriptor());
  addDescriptor(buildPLSQLCollectionWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLStoredFunctionCallDescriptor());
  addDescriptor(buildOracleArrayTypeDescriptor());
  addDescriptor(buildOracleObjectTypeDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildPLSQLCollectionDescriptor());
  addDescriptor(buildPLSQLCursorDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
  addDescriptor(buildDocumentPreservationPolicyDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyDescriptor());
  addDescriptor(buildXMLBinderPolicyDescriptor());
  addDescriptor(buildNodeOrderingPolicyDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyDescriptor());
}"
65168,"/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof OracleObjectType) {
          super.addNamedArgument(inArg.name,inArg.name,Types.STRUCT,complexType.getCompatibleType());
        }
 else         if (complexType instanceof OracleArrayType) {
          DatabaseType nestedType=((OracleArrayType)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(Types.STRUCT);
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    DatabaseType type=outArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (outArg.outIndex != MIN_VALUE) {
        if (complexType instanceof OracleArrayType) {
          DatabaseType nestedType=((OracleArrayType)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(Types.STRUCT);
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
          }
        }
 else         if (complexType instanceof OracleObjectType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,Types.STRUCT,complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (complexType.hasCompatibleType()) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
        }
 else {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
        }
      }
    }
  }
}","/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof OracleObjectType) {
          super.addNamedArgument(inArg.name,inArg.name,Types.STRUCT,complexType.getCompatibleType());
        }
 else         if (complexType instanceof OracleArrayType) {
          DatabaseType nestedType=((OracleArrayType)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(Types.STRUCT);
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    if (outArg.cursorOutput) {
      super.useNamedCursorOutputAsResultSet(outArg.name);
    }
 else {
      DatabaseType type=outArg.databaseType;
      if (!type.isComplexDatabaseType()) {
        super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
      }
 else {
        ComplexDatabaseType complexType=(ComplexDatabaseType)type;
        if (outArg.outIndex != MIN_VALUE) {
          if (complexType instanceof OracleArrayType) {
            DatabaseType nestedType=((OracleArrayType)complexType).getNestedType();
            if (nestedType != null) {
              ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
              nestedField.setSqlType(Types.STRUCT);
              if (nestedType.isComplexDatabaseType()) {
                ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
                nestedField.setType(complexNestedType.getJavaType());
                nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
              }
              super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType(),nestedField);
            }
 else {
              super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
            }
          }
 else           if (complexType instanceof OracleObjectType) {
            super.addNamedOutputArgument(outArg.name,outArg.name,Types.STRUCT,complexType.getTypeName(),complexType.getJavaType());
          }
 else           if (complexType instanceof PLSQLCollection) {
            DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
            if (nestedType != null) {
              ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
              nestedField.setSqlType(nestedType.getConversionCode());
              if (nestedType.isComplexDatabaseType()) {
                ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
                nestedField.setType(complexNestedType.getJavaType());
                nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
              }
              super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
            }
 else {
              super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
            }
          }
 else           if (complexType.hasCompatibleType()) {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
          }
        }
      }
    }
  }
}"
65169,"/** 
 * INTERNAL Add the nested function string required for the type and its subtypes. The functions must be added in inverse order to resolve dependencies.
 */
protected void addNestedFunctionsForArgument(List functions,PLSQLargument argument,DatabaseType databaseType,Set<DatabaseType> processed){
  if ((databaseType == null) || !databaseType.isComplexDatabaseType() || databaseType.isJDBCType()|| processed.contains(databaseType)) {
    return;
  }
  ComplexDatabaseType type=(ComplexDatabaseType)databaseType;
  if (!type.hasCompatibleType()) {
    return;
  }
  processed.add(type);
  if (type instanceof PLSQLCollection) {
    DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
    addNestedFunctionsForArgument(functions,argument,nestedType,processed);
  }
 else   if (type instanceof PLSQLrecord) {
    for (    PLSQLargument field : ((PLSQLrecord)type).getFields()) {
      DatabaseType nestedType=field.databaseType;
      addNestedFunctionsForArgument(functions,argument,nestedType,processed);
    }
  }
  TypeInfo info=this.typesInfo.get(type.getTypeName());
  if (info == null) {
    info=generateNestedFunction(type,argument.isNonAssociative);
  }
  if (argument.direction == IN) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
  }
 else   if (argument.direction == INOUT) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
 else   if (argument.direction == OUT) {
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
}","/** 
 * INTERNAL Add the nested function string required for the type and its subtypes. The functions must be added in inverse order to resolve dependencies.
 */
protected void addNestedFunctionsForArgument(List functions,PLSQLargument argument,DatabaseType databaseType,Set<DatabaseType> processed){
  if ((databaseType == null) || !databaseType.isComplexDatabaseType() || databaseType.isJDBCType()|| argument.cursorOutput|| processed.contains(databaseType)) {
    return;
  }
  ComplexDatabaseType type=(ComplexDatabaseType)databaseType;
  if (!type.hasCompatibleType()) {
    return;
  }
  processed.add(type);
  if (type instanceof PLSQLCollection) {
    DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
    addNestedFunctionsForArgument(functions,argument,nestedType,processed);
  }
 else   if (type instanceof PLSQLrecord) {
    for (    PLSQLargument field : ((PLSQLrecord)type).getFields()) {
      DatabaseType nestedType=field.databaseType;
      addNestedFunctionsForArgument(functions,argument,nestedType,processed);
    }
  }
  TypeInfo info=this.typesInfo.get(type.getTypeName());
  if (info == null) {
    info=generateNestedFunction(type,argument.isNonAssociative);
  }
  if (argument.direction == IN) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
  }
 else   if (argument.direction == INOUT) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
 else   if (argument.direction == OUT) {
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
}"
65170,"/** 
 * Allows the parser validation level to be set.
 * @param level The validation levels are defined in {@link ParserValidationType}
 */
public void setValidationLevel(String validationLevel){
  this.validationLevel=validationLevel;
}","/** 
 * {@inheritDoc}
 */
public void setValidationLevel(String validationLevel){
  this.validationLevel=validationLevel;
}"
65171,"private void addAttribute(String generateName,Expression queryExpression,Class<?> type){
  if (resultVariable != null) {
    generateName=resultVariable;
    queryContext.addQueryExpression(resultVariable,queryExpression);
  }
  query.addAttribute(generateName,queryExpression,type);
}","private void addAttribute(String generateName,Expression queryExpression,Class<?> type){
  if (resultVariable != null) {
    generateName=resultVariable;
    queryContext.addQueryExpression(resultVariable.toUpperCase(),queryExpression);
  }
  query.addAttribute(generateName,queryExpression,type);
}"
65172,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=XMLConstants.EMPTY_STRING;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}","@Override public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=XMLConstants.EMPTY_STRING;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}"
65173,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return false;
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65174,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=getConvertedValue(value,marshalRecord,session);
  Object fieldValue=value;
  if (value instanceof XMLRoot) {
    fieldValue=((XMLRoot)value).getObject();
  }
 else   if (value.getClass() == ClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
    if (frag != null) {
      frag=getOwningFragment(associatedNodeValue,frag);
      NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
      unwrappedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=getConvertedValue(value,marshalRecord,session);
  if (value.getClass() == ClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
    if (frag != null) {
      frag=getOwningFragment(associatedNodeValue,frag);
      NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
      return marshalSingleValueWithNodeValue(frag,marshalRecord,object,value,session,namespaceResolver,marshalContext,unwrappedNodeValue);
    }
  }
  return true;
}"
65175,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          associatedNodeValue.marshalSingleValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
65176,"protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : unmarshalRecord.getPrefixesForFragment().entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}","protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + unmarshalRecord.getNamespaceSeparator() + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : unmarshalRecord.getPrefixesForFragment().entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}"
65177,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position.isNeedToOpenComplex()) {
        writer.write('{');
        position.setNeedToOpenComplex(false);
        position.setNeedToCloseComplex(true);
      }
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (newLevel != null && nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
        }
 else {
          writer.write('[');
          writer.write(' ');
        }
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65178,"/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position != null && position.needToOpenComplex) {
        writer.write('{');
        position.needToOpenComplex=false;
        position.needToCloseComplex=true;
      }
      writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
          position.setEmptyCollection(false);
        }
 else {
          writer.write('[');
          position.setEmptyCollection(false);
        }
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position != null && position.needToOpenComplex) {
      writer.write('{');
      position.needToOpenComplex=false;
      position.needToCloseComplex=true;
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65179,"/** 
 * INTERNAL:
 */
public void nilComplex(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  closeStartGroupingElements(groupingFragment);
  openStartElement(xPathFragment,namespaceResolver,false);
  nonStringCharacters(NULL);
  endElement(xPathFragment,namespaceResolver,false);
}","/** 
 * INTERNAL:
 */
public void nilComplex(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  XPathFragment groupingFragment=openStartGroupingElements(namespaceResolver);
  closeStartGroupingElements(groupingFragment);
  openStartElement(xPathFragment,namespaceResolver);
  nonStringCharacters(NULL);
  endElement(xPathFragment,namespaceResolver);
}"
65180,"/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  encoder=Charset.forName(marshaller.getEncoding()).newEncoder();
}","/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  encoder=Charset.forName(marshaller.getEncoding()).newEncoder();
  if (marshaller.getValueWrapper() != null) {
    textWrapperFragment=new XPathFragment(marshaller.getValueWrapper());
  }
}"
65181,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  if (indicator == null) {
    return null;
  }
  Class concreteClass;
  if (indicator instanceof String) {
    String indicatorValue=(String)indicator;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null) {
          concreteClass=(Class)this.classIndicatorMapping.get(new XPathQName(((XMLRecord)rowFromDatabase).getNamespaceResolver().getDefaultNamespaceURI(),indicatorValue,namespaceAware));
        }
 else {
          XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
          concreteClass=(Class)this.classIndicatorMapping.get(qname);
        }
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(indicator);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(indicator,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  if (indicator == null) {
    return null;
  }
  Class concreteClass;
  if (indicator instanceof String) {
    String indicatorValue=(String)indicator;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware && usesXsiType) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null) {
          concreteClass=(Class)this.classIndicatorMapping.get(new XPathQName(((XMLRecord)rowFromDatabase).getNamespaceResolver().getDefaultNamespaceURI(),indicatorValue,namespaceAware));
        }
 else {
          XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
          concreteClass=(Class)this.classIndicatorMapping.get(qname);
        }
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(indicator);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(indicator,getDescriptor());
  }
  return concreteClass;
}"
65182,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1 && namespaceResolver != null) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && frag.getPrefix() != null && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      XPathFragment frag=((XMLField)getClassIndicatorField()).getXPathFragment();
      if (frag.getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && frag.getNamespaceURI() != null && frag.getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
        usesXsiType=true;
      }
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        if (!usesXsiType || namespaceResolver == null) {
          qname=new XPathQName(indicatorValue,true);
        }
 else {
          int index=indicatorValue.indexOf(XMLConstants.COLON);
          if (index != -1 && namespaceResolver != null) {
            String prefix=indicatorValue.substring(0,index);
            String localPart=indicatorValue.substring(index + 1);
            String uri=namespaceResolver.resolveNamespacePrefix(prefix);
            qname=new XPathQName(uri,localPart,true);
          }
 else {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && frag.getPrefix() != null && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65183,"/** 
 * Handle xml-inverse-reference.
 * @param xmlInverseReference
 * @param oldProperty
 * @return
 */
private Property processXmlInverseReference(XmlInverseReference xmlInverseReference,Property oldProperty){
  oldProperty.setInverseReference(true);
  oldProperty.setInverseReferencePropertyName(xmlInverseReference.getMappedBy());
  if (xmlInverseReference.getXmlAccessMethods() != null) {
    oldProperty.setInverseReferencePropertyGetMethodName(xmlInverseReference.getXmlAccessMethods().getGetMethod());
    oldProperty.setInverseReferencePropertySetMethodName(xmlInverseReference.getXmlAccessMethods().getSetMethod());
  }
  if (xmlInverseReference.getXmlProperties() != null && xmlInverseReference.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlInverseReference.getXmlProperties().getXmlProperty()));
  }
  if (!xmlInverseReference.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlInverseReference.getContainerType());
  }
  if (!xmlInverseReference.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlInverseReference.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  return oldProperty;
}","/** 
 * Handle xml-inverse-reference.
 * @param xmlInverseReference
 * @param oldProperty
 * @return
 */
private Property processXmlInverseReference(XmlInverseReference xmlInverseReference,Property oldProperty,TypeInfo info){
  resetProperty(oldProperty,info);
  oldProperty.setInverseReference(true);
  oldProperty.setInverseReferencePropertyName(xmlInverseReference.getMappedBy());
  if (xmlInverseReference.getXmlAccessMethods() != null) {
    oldProperty.setInverseReferencePropertyGetMethodName(xmlInverseReference.getXmlAccessMethods().getGetMethod());
    oldProperty.setInverseReferencePropertySetMethodName(xmlInverseReference.getXmlAccessMethods().getSetMethod());
  }
  if (xmlInverseReference.getXmlProperties() != null && xmlInverseReference.getXmlProperties().getXmlProperty().size() > 0) {
    oldProperty.setUserProperties(createUserPropertyMap(xmlInverseReference.getXmlProperties().getXmlProperty()));
  }
  if (!xmlInverseReference.getContainerType().equals(DEFAULT)) {
    setContainerType(oldProperty,xmlInverseReference.getContainerType());
  }
  if (!xmlInverseReference.getType().equals(DEFAULT)) {
    JavaClass pType=jModelInput.getJavaModel().getClass(xmlInverseReference.getType());
    if (aProcessor.isCollectionType(oldProperty.getType())) {
      oldProperty.setGenericType(pType);
    }
 else {
      oldProperty.setType(pType);
    }
    oldProperty.setHasXmlElementType(true);
    if (aProcessor.shouldGenerateTypeInfo(pType) && aProcessor.getTypeInfo().get(pType.getQualifiedName()) == null) {
      aProcessor.buildNewTypeInfo(new JavaClass[]{pType});
    }
  }
  return oldProperty;
}"
65184,"/** 
 * Process a given JavaAtribute.
 * @param javaAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processJavaAttribute(TypeInfo typeInfo,JavaAttribute javaAttribute,Property oldProperty,NamespaceInfo nsInfo,JavaType javaType){
  if (javaAttribute instanceof XmlAnyAttribute) {
    return processXmlAnyAttribute((XmlAnyAttribute)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlAnyElement) {
    return processXmlAnyElement((XmlAnyElement)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlAttribute) {
    return processXmlAttribute((XmlAttribute)javaAttribute,oldProperty,typeInfo,nsInfo,javaType);
  }
  if (javaAttribute instanceof XmlElement) {
    return processXmlElement((XmlElement)javaAttribute,oldProperty,typeInfo,nsInfo,javaType);
  }
  if (javaAttribute instanceof XmlElements) {
    return processXmlElements((XmlElements)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlElementRef) {
    return processXmlElementRef((XmlElementRef)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlElementRefs) {
    return processXmlElementRefs((XmlElementRefs)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlTransient) {
    return processXmlTransient((XmlTransient)javaAttribute,oldProperty);
  }
  if (javaAttribute instanceof XmlValue) {
    return processXmlValue((XmlValue)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlJavaTypeAdapter) {
    return processXmlJavaTypeAdapter((XmlJavaTypeAdapter)javaAttribute,oldProperty);
  }
  if (javaAttribute instanceof XmlInverseReference) {
    return processXmlInverseReference((XmlInverseReference)javaAttribute,oldProperty);
  }
  if (javaAttribute instanceof XmlTransformation) {
    return processXmlTransformation((XmlTransformation)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlJoinNodes) {
    return processXmlJoinNodes((XmlJoinNodes)javaAttribute,oldProperty);
  }
  getLogger().logWarning(""String_Node_Str"",new Object[]{javaAttribute.getClass()});
  return null;
}","/** 
 * Process a given JavaAtribute.
 * @param javaAttribute
 * @param oldProperty
 * @param nsInfo
 * @return
 */
private Property processJavaAttribute(TypeInfo typeInfo,JavaAttribute javaAttribute,Property oldProperty,NamespaceInfo nsInfo,JavaType javaType){
  if (javaAttribute instanceof XmlAnyAttribute) {
    return processXmlAnyAttribute((XmlAnyAttribute)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlAnyElement) {
    return processXmlAnyElement((XmlAnyElement)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlAttribute) {
    return processXmlAttribute((XmlAttribute)javaAttribute,oldProperty,typeInfo,nsInfo,javaType);
  }
  if (javaAttribute instanceof XmlElement) {
    return processXmlElement((XmlElement)javaAttribute,oldProperty,typeInfo,nsInfo,javaType);
  }
  if (javaAttribute instanceof XmlElements) {
    return processXmlElements((XmlElements)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlElementRef) {
    return processXmlElementRef((XmlElementRef)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlElementRefs) {
    return processXmlElementRefs((XmlElementRefs)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlTransient) {
    return processXmlTransient((XmlTransient)javaAttribute,oldProperty);
  }
  if (javaAttribute instanceof XmlValue) {
    return processXmlValue((XmlValue)javaAttribute,oldProperty,typeInfo,javaType);
  }
  if (javaAttribute instanceof XmlJavaTypeAdapter) {
    return processXmlJavaTypeAdapter((XmlJavaTypeAdapter)javaAttribute,oldProperty);
  }
  if (javaAttribute instanceof XmlInverseReference) {
    return processXmlInverseReference((XmlInverseReference)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlTransformation) {
    return processXmlTransformation((XmlTransformation)javaAttribute,oldProperty,typeInfo);
  }
  if (javaAttribute instanceof XmlJoinNodes) {
    return processXmlJoinNodes((XmlJoinNodes)javaAttribute,oldProperty);
  }
  getLogger().logWarning(""String_Node_Str"",new Object[]{javaAttribute.getClass()});
  return null;
}"
65185,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}"
65186,"/** 
 * Validates the left and right expressions of the given   {@link ComparisonExpression}. The tests to perform are: <ul> <li>If the comparison operator is either '=' or '<>'. The expressions can only be <ul> <li>Two identification variables;</li> <li>Two path expressions resolving to an association field;</li> <li>One can be a path expression resolving to a basic field and the other one has to resolve to a basic value.</li> </ul> </li> <li>If the comparison operator is either '<', '<=', '>=', '>'. The expressions cannot be <ul> <li>Two identification variables;</li> <li>Two path expressions resolving to an association field;</li> </ul> </li> </ul>
 * @param expression The {@link ConcatExpression} to validate by validating itsleft and right expressions
 * @return The status of the comparison between the left and right expression: <code>true</code>if the two expressions pass the rules defined by this method; <code>false</code> otherwise
 */
protected boolean validateComparisonExpression(ComparisonExpression expression){
  Expression leftExpression=expression.getLeftExpression();
  Expression rightExpression=expression.getRightExpression();
  boolean valid=true;
  ComparisonExpressionVisitor validator=getComparisonExpressionVisitor();
  try {
    validator.validatingLeftExpression=true;
    leftExpression.accept(validator);
    validator.validatingLeftExpression=false;
    rightExpression.accept(validator);
    if (isOrderComparison(expression)) {
      if (validator.leftIdentificationVariable && validator.leftIdentificationVariableValid) {
        IdentificationVariable variable=(IdentificationVariable)leftExpression;
        if (!isIdentificationVariableValidInComparison(variable)) {
          addProblem(leftExpression,ComparisonExpression_IdentificationVariable,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.leftStateFieldPathExpression && validator.leftStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(leftExpression);
        if ((mapping != null) && !helper.isPropertyMapping(mapping)) {
          addProblem(leftExpression,ComparisonExpression_AssociationField,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
      if (validator.rightIdentificationVariable && validator.rightIdentificationVariableValid) {
        IdentificationVariable variable=(IdentificationVariable)rightExpression;
        if (!isIdentificationVariableValidInComparison(variable)) {
          addProblem(rightExpression,ComparisonExpression_IdentificationVariable,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.rightStateFieldPathExpression && validator.rightStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(rightExpression);
        if ((mapping != null) && !helper.isPropertyMapping(mapping)) {
          addProblem(rightExpression,ComparisonExpression_AssociationField,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
    }
 else {
      if (validator.leftIdentificationVariable && validator.leftIdentificationVariableValid && validator.rightStateFieldPathExpression&& validator.rightStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(rightExpression);
        if ((mapping != null) && helper.isPropertyMapping(mapping)) {
          addProblem(rightExpression,ComparisonExpression_BasicField,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.rightIdentificationVariable && validator.rightIdentificationVariableValid && validator.leftStateFieldPathExpression&& validator.leftStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(leftExpression);
        if ((mapping != null) && helper.isPropertyMapping(mapping)) {
          addProblem(leftExpression,ComparisonExpression_BasicField,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
    }
    return valid;
  }
  finally {
    validator.dispose();
  }
}","/** 
 * Validates the left and right expressions of the given   {@link ComparisonExpression}. The tests to perform are: <ul> <li>If the comparison operator is either '=' or '<>'. The expressions can only be <ul> <li>Two identification variables;</li> <li>Two path expressions resolving to an association field;</li> <li>One can be a path expression resolving to a basic field and the other one has to resolve to a basic value.</li> </ul> </li> <li>If the comparison operator is either '<', '<=', '>=', '>'. The expressions cannot be <ul> <li>Two identification variables;</li> <li>Two path expressions resolving to an association field;</li> </ul> </li> </ul>
 * @param expression The {@link ConcatExpression} to validate by validating itsleft and right expressions
 * @return The status of the comparison between the left and right expression: <code>true</code>if the two expressions pass the rules defined by this method; <code>false</code> otherwise
 */
protected boolean validateComparisonExpression(ComparisonExpression expression){
  Expression leftExpression=expression.getLeftExpression();
  Expression rightExpression=expression.getRightExpression();
  boolean valid=true;
  ComparisonExpressionVisitor validator=getComparisonExpressionVisitor();
  try {
    validator.validatingLeftExpression=true;
    leftExpression.accept(validator);
    validator.validatingLeftExpression=false;
    rightExpression.accept(validator);
    if (isOrderComparison(expression)) {
      if (validator.leftIdentificationVariable && validator.leftIdentificationVariableValid) {
        IdentificationVariable variable=(IdentificationVariable)leftExpression;
        if (!isIdentificationVariableValidInComparison(variable)) {
          addProblem(leftExpression,ComparisonExpression_IdentificationVariable,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.leftStateFieldPathExpression && validator.leftStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(leftExpression);
        if ((mapping != null) && !helper.isPropertyMapping(mapping)) {
          addProblem(leftExpression,ComparisonExpression_AssociationField,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
      if (validator.rightIdentificationVariable && validator.rightIdentificationVariableValid) {
        IdentificationVariable variable=(IdentificationVariable)rightExpression;
        if (!isIdentificationVariableValidInComparison(variable)) {
          addProblem(rightExpression,ComparisonExpression_IdentificationVariable,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.rightStateFieldPathExpression && validator.rightStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(rightExpression);
        if ((mapping != null) && !helper.isPropertyMapping(mapping)) {
          addProblem(rightExpression,ComparisonExpression_AssociationField,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
    }
 else {
      if (validator.leftIdentificationVariable && validator.leftIdentificationVariableValid && validator.rightStateFieldPathExpression&& validator.rightStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(rightExpression);
        IdentificationVariable variable=(IdentificationVariable)leftExpression;
        if ((mapping != null) && helper.isPropertyMapping(mapping) && !isIdentificationVariableValidInComparison(variable)) {
          addProblem(rightExpression,ComparisonExpression_BasicField,rightExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
 else       if (validator.rightIdentificationVariable && validator.rightIdentificationVariableValid && validator.leftStateFieldPathExpression&& validator.leftStateFieldPathExpressionValid) {
        Object mapping=helper.resolveMapping(leftExpression);
        IdentificationVariable variable=(IdentificationVariable)rightExpression;
        if ((mapping != null) && helper.isPropertyMapping(mapping) && !isIdentificationVariableValidInComparison(variable)) {
          addProblem(leftExpression,ComparisonExpression_BasicField,leftExpression.toActualText(),expression.getComparisonOperator());
          valid=false;
        }
      }
    }
    return valid;
  }
  finally {
    validator.dispose();
  }
}"
65187,"public JSONFormattedWriterRecord(){
  numberOfTabs=1;
  complexType=true;
  isLastEventText=false;
  space=""String_Node_Str"";
}","public JSONFormattedWriterRecord(){
  numberOfTabs=0;
  complexType=true;
  isLastEventText=false;
  space=""String_Node_Str"";
}"
65188,"/** 
 * INTERNAL:
 */
@Override public void endDocument(){
  try {
    if (levels.size() != 1) {
      writer.write(Helper.cr());
    }
    super.endDocument();
    if (levels.isEmpty()) {
      writer.write(Helper.cr());
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
@Override public void endDocument(){
  numberOfTabs--;
  super.endDocument();
}"
65189,"@Override public void endCollection(){
  try {
    writer.write(' ');
    super.endCollection();
    if (levels.size() == 1) {
      writer.write(Helper.cr());
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","@Override public void endCollection(){
  try {
    writer.write(' ');
    super.endCollection();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65190,"@Override public void initializeCall(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
  StoredProcedureCall spCall=createCall();
  if (getName() != null) {
    spCall.setProcedureName(getName());
  }
 else {
    spCall.setProcedureName(queryOperation.getName());
  }
  QName resultType=queryOperation.getResultType();
  if ((getInOutArguments().size() + getOutArguments().size()) > 1 && !queryOperation.isSimpleXMLFormat()) {
    throw DBWSException.multipleOutputArgumentsOnlySupportedForSimpleXML();
  }
  for (  Parameter p : queryOperation.getParameters()) {
    ProcedureArgument arg=findInOutArgument(p.getName());
    String argName=p.getName();
    if (arg != null) {
      argName=arg.getName();
    }
    if (arg != null && arg instanceof ProcedureOutputArgument) {
      if (isCursorType(xrService,p.getType())) {
        throw DBWSException.inoutCursorArgumentsNotSupported();
      }
      spCall.addNamedInOutputArgument(argName,p.getName());
    }
 else {
      spCall.addNamedArgument(argName,p.getName());
    }
  }
  if (queryOperation.hasResponse()) {
    if (!queryOperation.isSimpleXMLFormat() || (spCall.isStoredFunctionCall() && !isCursorType(xrService,resultType))) {
      setSingleResult(xrService,spCall,resultType);
    }
 else {
      if (spCall.isStoredFunctionCall() && isCursorType(xrService,resultType)) {
        spCall.useUnnamedCursorOutputAsResultSet();
      }
 else       if (getOutArguments().isEmpty()) {
        spCall.setReturnsResultSet(true);
      }
 else {
        for (        ProcedureOutputArgument arg : getOutArguments()) {
          if (arg.getResultType() != null && isCursorType(xrService,arg.getResultType())) {
            spCall.useNamedCursorOutputAsResultSet(arg.getName());
          }
 else {
            spCall.addNamedOutputArgument(arg.getName());
          }
        }
      }
    }
  }
  databaseQuery.setCall(spCall);
}","@SuppressWarnings(""String_Node_Str"") @Override public void initializeCall(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
  StoredProcedureCall spCall=createCall();
  if (getName() != null) {
    spCall.setProcedureName(getName());
  }
 else {
    spCall.setProcedureName(queryOperation.getName());
  }
  QName resultType=queryOperation.getResultType();
  if ((getInOutArguments().size() + getOutArguments().size()) > 1 && !queryOperation.isSimpleXMLFormat()) {
    throw DBWSException.multipleOutputArgumentsOnlySupportedForSimpleXML();
  }
  for (  Parameter p : queryOperation.getParameters()) {
    ProcedureArgument arg=findInOutArgument(p.getName());
    String argName=p.getName();
    if (arg != null) {
      argName=arg.getName();
    }
    if (arg != null && arg instanceof ProcedureOutputArgument) {
      if (isCursorType(xrService,p.getType())) {
        throw DBWSException.inoutCursorArgumentsNotSupported();
      }
      spCall.addNamedInOutputArgument(argName,p.getName());
    }
 else {
      spCall.addNamedArgument(argName,p.getName());
    }
  }
  if (queryOperation.hasResponse()) {
    if (!queryOperation.isSimpleXMLFormat() || (spCall.isStoredFunctionCall() && !isCursorType(xrService,resultType))) {
      setSingleResult(xrService,spCall,resultType);
    }
 else {
      if (spCall.isStoredFunctionCall() && isCursorType(xrService,resultType)) {
        spCall.setIsCursorOutputProcedure(true);
        spCall.getParameters().remove(0);
        spCall.getParameters().add(0,new DatabaseField(CURSOR_STR));
      }
 else       if (getOutArguments().isEmpty()) {
        spCall.setReturnsResultSet(true);
      }
 else {
        for (        ProcedureOutputArgument arg : getOutArguments()) {
          if (arg.getResultType() != null && isCursorType(xrService,arg.getResultType())) {
            spCall.useNamedCursorOutputAsResultSet(arg.getName());
          }
 else {
            spCall.addNamedOutputArgument(arg.getName());
          }
        }
      }
    }
  }
  databaseQuery.setCall(spCall);
}"
65191,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_TAB1_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_TAB1_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65192,"private boolean isTextValue(String localName){
  XPathNode currentNode=((UnmarshalRecord)contentHandler).getXPathNode();
  return ((currentNode.getNonAttributeChildrenMap() == null || currentNode.getNonAttributeChildrenMap().size() == 0 || (currentNode.getNonAttributeChildrenMap().size() == 1 && currentNode.getTextNode() != null)) && textWrapper != null && textWrapper.equals(localName));
}","private boolean isTextValue(String localName){
  XPathNode currentNode=((UnmarshalRecord)contentHandler).getXPathNode();
  if (currentNode == null) {
    return textWrapper != null && textWrapper.equals(localName);
  }
  return ((currentNode.getNonAttributeChildrenMap() == null || currentNode.getNonAttributeChildrenMap().size() == 0 || (currentNode.getNonAttributeChildrenMap().size() == 1 && currentNode.getTextNode() != null)) && textWrapper != null && textWrapper.equals(localName));
}"
65193,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_WEAKLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_WEAKLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_WEAKLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_WEAKLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WEAKLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65194,"public void testCreateMarshallerSetMediaTypeJSONString() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  Marshaller m=ctx.createMarshaller();
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
}","public void testCreateMarshallerSetMediaTypeJSONString() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  Marshaller m=ctx.createMarshaller();
  m.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,m.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_JSON,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
}"
65195,"public void testCreateContextWithNullMediaType() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  Map props=new HashMap();
  props.put(JAXBContextProperties.MEDIA_TYPE,null);
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  JAXBMarshaller m=(JAXBMarshaller)ctx.createMarshaller();
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
  JAXBUnmarshaller u=(JAXBUnmarshaller)ctx.createUnmarshaller();
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}","public void testCreateContextWithNullMediaType() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  Map props=new HashMap();
  props.put(JAXBContextProperties.MEDIA_TYPE,null);
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  JAXBMarshaller m=(JAXBMarshaller)ctx.createMarshaller();
  assertEquals(MediaType.APPLICATION_XML,m.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
  JAXBUnmarshaller u=(JAXBUnmarshaller)ctx.createUnmarshaller();
  assertEquals(MediaType.APPLICATION_XML,u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}"
65196,"public void testCreateContextWithNoMediaType() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  JAXBMarshaller m=(JAXBMarshaller)ctx.createMarshaller();
  assertEquals(""String_Node_Str"",m.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
  JAXBUnmarshaller u=(JAXBUnmarshaller)ctx.createUnmarshaller();
  assertEquals(""String_Node_Str"",u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}","public void testCreateContextWithNoMediaType() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  JAXBMarshaller m=(JAXBMarshaller)ctx.createMarshaller();
  assertEquals(MediaType.APPLICATION_XML,m.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBMarshaller)m).getXMLMarshaller().getMediaType());
  JAXBUnmarshaller u=(JAXBUnmarshaller)ctx.createUnmarshaller();
  assertEquals(MediaType.APPLICATION_XML,u.getProperty(UnmarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_XML,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}"
65197,"public void testCreateUnmarshallerSetMediaTypeJSONString() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  Unmarshaller u=ctx.createUnmarshaller();
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}","public void testCreateUnmarshallerSetMediaTypeJSONString() throws JAXBException {
  Class[] classes=new Class[1];
  classes[0]=Employee.class;
  JAXBContext ctx=JAXBContextFactory.createContext(classes,null);
  Unmarshaller u=ctx.createUnmarshaller();
  u.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  assertEquals(MediaType.APPLICATION_JSON,u.getProperty(MarshallerProperties.MEDIA_TYPE));
  assertEquals(MediaType.APPLICATION_JSON,((JAXBUnmarshaller)u).getXMLUnmarshaller().getMediaType());
}"
65198,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType().getName();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType();
  }
 else   if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    return xmlMarshaller.getNamespaceSeparator();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65199,"/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=MediaType.getMediaTypeByName((String)value);
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","/** 
 * Set a property on the JAXBMarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.   
 */
public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.NAMESPACE_PREFIX_MAPPER.equals(key)) {
      if (value instanceof Map) {
        NamespacePrefixMapper namespacePrefixMapper=new MapNamespacePrefixMapper((Map)value);
        xmlMarshaller.setNamespacePrefixMapper(namespacePrefixMapper);
      }
 else {
        xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
      }
    }
 else     if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (MarshallerProperties.INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
      xmlMarshaller.setIndentString((String)value);
    }
 else     if (MarshallerProperties.CHARACTER_ESCAPE_HANDLER.equals(key)) {
      xmlMarshaller.setCharacterEscapeHandler((CharacterEscapeHandler)value);
    }
 else     if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
      if (value == null) {
        xmlMarshaller.setCharacterEscapeHandler(null);
      }
 else {
        xmlMarshaller.setCharacterEscapeHandler(new CharacterEscapeHandlerWrapper(value));
      }
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (MarshallerProperties.MEDIA_TYPE.equals(key)) {
      MediaType mType=null;
      if (value instanceof MediaType) {
        mType=(MediaType)value;
      }
 else       if (value instanceof String) {
        mType=MediaType.getMediaType((String)value);
      }
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (MarshallerProperties.JSON_ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (MarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (MarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else     if (MarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
      xmlMarshaller.setNamespaceSeparator((Character)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65200,"/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    return xmlUnmarshaller.getMediaType().getName();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    return xmlUnmarshaller.getAttributePrefix();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_INCLUDE_ROOT)) {
    return xmlUnmarshaller.isIncludeRoot();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR)) {
    return xmlUnmarshaller.getNamespaceSeparator();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER)) {
    if (xmlUnmarshaller.getNamespaceResolver() == null) {
      return null;
    }
    if (xmlUnmarshaller.getNamespaceResolver() instanceof PrefixMapperNamespaceResolver) {
      PrefixMapperNamespaceResolver wrapper=(PrefixMapperNamespaceResolver)xmlUnmarshaller.getNamespaceResolver();
      return wrapper.getPrefixMapper();
    }
 else {
      Map<String,String> nsMap=new HashMap<String,String>();
      Map<String,String> prefixesToNS=xmlUnmarshaller.getNamespaceResolver().getPrefixesToNamespaces();
      Iterator<Entry<String,String>> namesapcesIter=prefixesToNS.entrySet().iterator();
      for (int i=0; i < prefixesToNS.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nsMap.put(nextEntry.getValue(),nextEntry.getKey());
      }
      return nsMap;
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_VALUE_WRAPPER)) {
    return xmlUnmarshaller.getValueWrapper();
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    return xmlUnmarshaller.getIDResolver();
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    IDResolverWrapper wrapper=(IDResolverWrapper)xmlUnmarshaller.getIDResolver();
    return wrapper.getResolver();
  }
  throw new PropertyException(key);
}","/** 
 * Get a property from the JAXBMarshaller. Attempting to get any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.  
 */
public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    return xmlUnmarshaller.getMediaType();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    return xmlUnmarshaller.getAttributePrefix();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_INCLUDE_ROOT)) {
    return xmlUnmarshaller.isIncludeRoot();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR)) {
    return xmlUnmarshaller.getNamespaceSeparator();
  }
 else   if (key.equals(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER)) {
    if (xmlUnmarshaller.getNamespaceResolver() == null) {
      return null;
    }
    if (xmlUnmarshaller.getNamespaceResolver() instanceof PrefixMapperNamespaceResolver) {
      PrefixMapperNamespaceResolver wrapper=(PrefixMapperNamespaceResolver)xmlUnmarshaller.getNamespaceResolver();
      return wrapper.getPrefixMapper();
    }
 else {
      Map<String,String> nsMap=new HashMap<String,String>();
      Map<String,String> prefixesToNS=xmlUnmarshaller.getNamespaceResolver().getPrefixesToNamespaces();
      Iterator<Entry<String,String>> namesapcesIter=prefixesToNS.entrySet().iterator();
      for (int i=0; i < prefixesToNS.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nsMap.put(nextEntry.getValue(),nextEntry.getKey());
      }
      return nsMap;
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_VALUE_WRAPPER)) {
    return xmlUnmarshaller.getValueWrapper();
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    return xmlUnmarshaller.getIDResolver();
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    IDResolverWrapper wrapper=(IDResolverWrapper)xmlUnmarshaller.getIDResolver();
    return wrapper.getResolver();
  }
  throw new PropertyException(key);
}"
65201,"/** 
 * Set a property on the JAXBUnmarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.      
 */
public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    MediaType mType=MediaType.getMediaTypeByName((String)value);
    if (mType != null) {
      xmlUnmarshaller.setMediaType(mType);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    xmlUnmarshaller.setAttributePrefix((String)value);
  }
 else   if (UnmarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    xmlUnmarshaller.setIncludeRoot((Boolean)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    if (value instanceof Map) {
      Map<String,String> namespaces=(Map<String,String>)value;
      NamespaceResolver nr=new NamespaceResolver();
      Iterator<Entry<String,String>> namesapcesIter=namespaces.entrySet().iterator();
      for (int i=0; i < namespaces.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nr.put(nextEntry.getValue(),nextEntry.getKey());
      }
      xmlUnmarshaller.setNamespaceResolver(nr);
    }
 else     if (value instanceof NamespacePrefixMapper) {
      xmlUnmarshaller.setNamespaceResolver(new PrefixMapperNamespaceResolver((NamespacePrefixMapper)value,null));
    }
  }
 else   if (UnmarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    xmlUnmarshaller.setValueWrapper((String)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    xmlUnmarshaller.setNamespaceSeparator((Character)value);
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    setIDResolver((IDResolver)value);
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    setIDResolver(new IDResolverWrapper(value));
  }
 else {
    throw new PropertyException(key,value);
  }
}","/** 
 * Set a property on the JAXBUnmarshaller. Attempting to set any unsupported property will result in a javax.xml.bind.PropertyException  See <a href=""#supportedProps"">Supported Properties</a>.      
 */
public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(UnmarshallerProperties.MEDIA_TYPE)) {
    MediaType mType=null;
    if (value instanceof MediaType) {
      mType=(MediaType)value;
    }
 else     if (value instanceof String) {
      mType=MediaType.getMediaType((String)value);
    }
    if (mType != null) {
      xmlUnmarshaller.setMediaType(mType);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else   if (key.equals(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX)) {
    xmlUnmarshaller.setAttributePrefix((String)value);
  }
 else   if (UnmarshallerProperties.JSON_INCLUDE_ROOT.equals(key)) {
    xmlUnmarshaller.setIncludeRoot((Boolean)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    if (value instanceof Map) {
      Map<String,String> namespaces=(Map<String,String>)value;
      NamespaceResolver nr=new NamespaceResolver();
      Iterator<Entry<String,String>> namesapcesIter=namespaces.entrySet().iterator();
      for (int i=0; i < namespaces.size(); i++) {
        Entry<String,String> nextEntry=namesapcesIter.next();
        nr.put(nextEntry.getValue(),nextEntry.getKey());
      }
      xmlUnmarshaller.setNamespaceResolver(nr);
    }
 else     if (value instanceof NamespacePrefixMapper) {
      xmlUnmarshaller.setNamespaceResolver(new PrefixMapperNamespaceResolver((NamespacePrefixMapper)value,null));
    }
  }
 else   if (UnmarshallerProperties.JSON_VALUE_WRAPPER.equals(key)) {
    xmlUnmarshaller.setValueWrapper((String)value);
  }
 else   if (UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR.equals(key)) {
    xmlUnmarshaller.setNamespaceSeparator((Character)value);
  }
 else   if (UnmarshallerProperties.ID_RESOLVER.equals(key)) {
    setIDResolver((IDResolver)value);
  }
 else   if (SUN_ID_RESOLVER.equals(key) || SUN_JSE_ID_RESOLVER.equals(key)) {
    setIDResolver(new IDResolverWrapper(value));
  }
 else {
    throw new PropertyException(key,value);
  }
}"
65202,"@SuppressWarnings(""String_Node_Str"") @Test public void strongRefCursorTest(){
}","@Test public void strongRefCursorTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(MIKE_NAMES_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65203,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE.length; i++) {
        stmt.addBatch(POPULATE_STRONGLY_TYPED_REF_CURSOR_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_TAB1_SHADOW_TYPE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE_BODY,ddlDebug);
  }
  username=System.getProperty(DATABASE_USERNAME_KEY,DEFAULT_DATABASE_USERNAME);
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65204,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,DROP_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_STRONGLY_TYPED_REF_CURSOR_TEST_PACKAGE,ddlDebug);
    runDdl(conn,DROP_STRONGLY_TYPED_REF_CURSOR_TABLE,ddlDebug);
    runDdl(conn,DROP_TAB1_SHADOW_TYPE,ddlDebug);
  }
}"
65205,"/** 
 * Indicates if a given DatabaseType is considered 'complex', i.e. is one of PLSQLRecordType, PLSQLCollectionType, VArrayType,  ObjectType, or NestedTableType
 */
public static boolean isTypeComplex(DatabaseType dbType){
  return dbType.isPLSQLType() || (dbType.isPLSQLCursorType() && !((PLSQLCursorType)dbType).isWeaklyTyped()) || dbType.isVArrayType()|| dbType.isObjectType()|| dbType.isObjectTableType();
}","/** 
 * Indicates if a given DatabaseType is considered 'complex', i.e. is one of PLSQLRecordType, PLSQLCollectionType, VArrayType,  ObjectType, or NestedTableType
 */
public static boolean isTypeComplex(DatabaseType dbType){
  return dbType.isPLSQLType() || dbType.isVArrayType() || dbType.isObjectType()|| dbType.isObjectTableType();
}"
65206,"public DynamicXMLMetadataSource(String persistenceUnitName,Server session,String packageName){
  ObjectFactory objectFactory=new ObjectFactory();
  xmlBindings=new XmlBindings();
  xmlBindings.setPackageName(packageName);
  JavaTypes javaTypes=new JavaTypes();
  xmlBindings.setJavaTypes(javaTypes);
  XmlSchema xmlSchema=new XmlSchema();
  XmlNs atomNs=new XmlNs();
  atomNs.setPrefix(LINK_PREFIX);
  atomNs.setNamespaceUri(LINK_NAMESPACE_URI);
  xmlSchema.getXmlNs().add(atomNs);
  xmlBindings.setXmlSchema(xmlSchema);
  for (  ClassDescriptor ormDescriptor : session.getProject().getOrderedDescriptors()) {
    String descriptorPackageName=ormDescriptor.getJavaClassName().substring(0,ormDescriptor.getJavaClassName().lastIndexOf('.'));
    if (descriptorPackageName.equals(packageName)) {
      javaTypes.getJavaType().add(createJAXBType(ormDescriptor,objectFactory));
    }
  }
}","public DynamicXMLMetadataSource(String persistenceUnitName,Server session,String packageName){
  System.out.println(""String_Node_Str"" + packageName);
  ObjectFactory objectFactory=new ObjectFactory();
  xmlBindings=new XmlBindings();
  xmlBindings.setPackageName(packageName);
  JavaTypes javaTypes=new JavaTypes();
  xmlBindings.setJavaTypes(javaTypes);
  XmlSchema xmlSchema=new XmlSchema();
  XmlNs atomNs=new XmlNs();
  atomNs.setPrefix(LINK_PREFIX);
  atomNs.setNamespaceUri(LINK_NAMESPACE_URI);
  xmlSchema.getXmlNs().add(atomNs);
  xmlBindings.setXmlSchema(xmlSchema);
  for (  ClassDescriptor ormDescriptor : session.getProject().getOrderedDescriptors()) {
    System.out.println(""String_Node_Str"" + packageName);
    System.out.println(""String_Node_Str"" + ormDescriptor);
    System.out.println(""String_Node_Str"" + ormDescriptor.getJavaClassName());
    String descriptorPackageName=""String_Node_Str"";
    if (ormDescriptor.getJavaClassName().lastIndexOf('.') > 0) {
      descriptorPackageName=ormDescriptor.getJavaClassName().substring(0,ormDescriptor.getJavaClassName().lastIndexOf('.'));
    }
    if (descriptorPackageName.equals(packageName)) {
      javaTypes.getJavaType().add(createJAXBType(ormDescriptor,objectFactory));
    }
  }
}"
65207,"@Test public void testWarningLogs(){
  assertTrue(""String_Node_Str"",dbwsLogger.hasWarnings());
  List<String> warnings=dbwsLogger.getWarnings();
  assertTrue(""String_Node_Str"" + warnings.size() + ""String_Node_Str"",warnings.size() == 2);
  assertTrue(""String_Node_Str"" + WARNING_MSG_1 + ""String_Node_Str""+ warnings.get(0)+ ""String_Node_Str"",WARNING_MSG_1.equals(warnings.get(0)));
  assertTrue(""String_Node_Str"" + WARNING_MSG_2 + ""String_Node_Str""+ warnings.get(1)+ ""String_Node_Str"",WARNING_MSG_2.equals(warnings.get(1)));
}","@Test public void testWarningLogs(){
  assertTrue(""String_Node_Str"",dbwsLogger.hasWarnings());
  List<String> warnings=dbwsLogger.getWarnings();
  assertTrue(""String_Node_Str"" + warnings.size() + ""String_Node_Str"",warnings.size() == 2);
  assertTrue(""String_Node_Str"" + WARNING_MSG_1 + ""String_Node_Str""+ warnings.get(0)+ ""String_Node_Str"",WARNING_MSG_1.equalsIgnoreCase(warnings.get(0)));
  assertTrue(""String_Node_Str"" + WARNING_MSG_2 + ""String_Node_Str""+ warnings.get(1)+ ""String_Node_Str"",WARNING_MSG_2.equalsIgnoreCase(warnings.get(1)));
}"
65208,"private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null);
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    SAXUnmarshallerHandler rootContentHandler=null;
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      rootContentHandler=(SAXUnmarshallerHandler)getContentHandler();
    }
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        Object unmarshalledObject=unmarshalRecord.getCurrentObject();
        if (includeRoot && unmarshalClass != null) {
          XMLRoot xmlRoot=new XMLRoot();
          xmlRoot.setNamespaceURI(unmarshalRecord.getRootElementNamespaceUri());
          xmlRoot.setLocalName(unmarshalRecord.getLocalName());
          xmlRoot.setObject(unmarshalledObject);
          unmarshalledObject=xmlRoot;
        }
        list.add(unmarshalledObject);
        unmarshalRecord.setCurrentObject(null);
        unmarshalRecord.setRootElementName(null);
        unmarshalRecord.setLocalName(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
      ((UnmarshalRecord)getContentHandler()).setRootElementName(XMLConstants.EMPTY_STRING);
      ((UnmarshalRecord)getContentHandler()).setLocalName(XMLConstants.EMPTY_STRING);
      if (rootContentHandler != null) {
        rootContentHandler.setObject(list);
      }
    }
  }
}","private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (children == 0 && unmarshalClass == null) {
      return;
    }
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
      for (int x=0, size=children; x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null);
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    SAXUnmarshallerHandler rootContentHandler=null;
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      rootContentHandler=(SAXUnmarshallerHandler)getContentHandler();
    }
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        Object unmarshalledObject=unmarshalRecord.getCurrentObject();
        if (includeRoot && unmarshalClass != null) {
          XMLRoot xmlRoot=new XMLRoot();
          xmlRoot.setNamespaceURI(unmarshalRecord.getRootElementNamespaceUri());
          xmlRoot.setLocalName(unmarshalRecord.getLocalName());
          xmlRoot.setObject(unmarshalledObject);
          unmarshalledObject=xmlRoot;
        }
        list.add(unmarshalledObject);
        unmarshalRecord.setCurrentObject(null);
        unmarshalRecord.setRootElementName(null);
        unmarshalRecord.setLocalName(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
      ((UnmarshalRecord)getContentHandler()).setRootElementName(XMLConstants.EMPTY_STRING);
      ((UnmarshalRecord)getContentHandler()).setLocalName(XMLConstants.EMPTY_STRING);
      if (rootContentHandler != null) {
        rootContentHandler.setObject(list);
      }
    }
  }
}"
65209,"public void marshalWithoutRootElement(TreeObjectBuilder treeObjectBuilder,Object object,XMLDescriptor descriptor,XMLRoot root,boolean isXMLRoot){
  treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(this,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
  treeObjectBuilder.marshalAttributes(this,object,session);
}","public void marshalWithoutRootElement(TreeObjectBuilder treeObjectBuilder,Object object,XMLDescriptor descriptor,XMLRoot root,boolean isXMLRoot){
  if (treeObjectBuilder != null) {
    treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(this,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
    treeObjectBuilder.marshalAttributes(this,object,session);
  }
}"
65210,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JSONAttributePrefixOnContextTestCases.class);
  suite.addTestSuite(JSONAttributePrefixEmptyStringTestCases.class);
  suite.addTestSuite(JSONAttributePrefixOnMarshallerTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementIncludeRootFalseTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementInheritanceTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(DifferentNamespacesTestCases.class);
  suite.addTestSuite(NamespacesOnContextTestCases.class);
  suite.addTestSuite(NamespacesOnUnmarshalOnlyTestCases.class);
  suite.addTestSuite(NoRootElementTestCases.class);
  suite.addTestSuite(NoRootElementNSTestCases.class);
  suite.addTestSuite(NamespaceInheritanceTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorContextTestCases.class);
  suite.addTestSuite(IncludeRootFalseWithXMLRootElementTestCases.class);
  suite.addTestSuite(IncludeRootTrueWithXMLRootElementTestCases.class);
  suite.addTestSuite(XMLValuePropTestCases.class);
  suite.addTestSuite(XMLValuePropDifferentTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(EscapeCharactersTestCases.class);
  suite.addTestSuite(UsAsciiTestCases.class);
  suite.addTest(RootLevelListTestCases.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JSONAttributePrefixOnContextTestCases.class);
  suite.addTestSuite(JSONAttributePrefixEmptyStringTestCases.class);
  suite.addTestSuite(JSONAttributePrefixOnMarshallerTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementIncludeRootFalseTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementInheritanceTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(DifferentNamespacesTestCases.class);
  suite.addTestSuite(NamespacesOnContextTestCases.class);
  suite.addTestSuite(NamespacesOnUnmarshalOnlyTestCases.class);
  suite.addTestSuite(NoRootElementTestCases.class);
  suite.addTestSuite(NoRootElementNSTestCases.class);
  suite.addTestSuite(NamespaceInheritanceTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorContextTestCases.class);
  suite.addTestSuite(IncludeRootFalseWithXMLRootElementTestCases.class);
  suite.addTestSuite(IncludeRootTrueWithXMLRootElementTestCases.class);
  suite.addTestSuite(XMLValuePropTestCases.class);
  suite.addTestSuite(XMLValuePropDifferentTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(EscapeCharactersTestCases.class);
  suite.addTestSuite(UsAsciiTestCases.class);
  suite.addTest(RootLevelListTestCases.suite());
  suite.addTestSuite(EmptyNullMarshalUnmarshalTestCases.class);
  return suite;
}"
65211,"public String resolveNamespacePrefix(Node contextNode,String namespacePrefix) throws XMLPlatformException {
  if (null == namespacePrefix) {
    if (null == contextNode.getPrefix()) {
      return contextNode.getNamespaceURI();
    }
  }
 else   if (namespacePrefix.equals(contextNode.getPrefix())) {
    return contextNode.getNamespaceURI();
  }
  if (contextNode.getNodeType() == Node.ELEMENT_NODE) {
    Element contextElement=(Element)contextNode;
    Attr namespaceDeclaration=contextElement.getAttributeNode(""String_Node_Str"" + namespacePrefix);
    if (null != namespaceDeclaration) {
      return namespaceDeclaration.getValue();
    }
  }
  Node parentNode=contextNode.getParentNode();
  if (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
    return resolveNamespacePrefix(parentNode,namespacePrefix);
  }
  return null;
}","public String resolveNamespacePrefix(Node contextNode,String namespacePrefix) throws XMLPlatformException {
  if (null == namespacePrefix) {
    if (null == contextNode.getPrefix()) {
      return contextNode.getNamespaceURI();
    }
  }
 else   if (namespacePrefix.equals(contextNode.getPrefix())) {
    return contextNode.getNamespaceURI();
  }
  if (contextNode.getNodeType() == Node.ELEMENT_NODE) {
    Element contextElement=(Element)contextNode;
    Attr namespaceDeclaration=null;
    if (namespacePrefix != null) {
      namespaceDeclaration=contextElement.getAttributeNode(""String_Node_Str"" + namespacePrefix);
    }
 else {
      namespaceDeclaration=contextElement.getAttributeNode(XMLConstants.XMLNS);
    }
    if (null != namespaceDeclaration) {
      return namespaceDeclaration.getValue();
    }
  }
  Node parentNode=contextNode.getParentNode();
  if (parentNode != null && parentNode.getNodeType() == Node.ELEMENT_NODE) {
    return resolveNamespacePrefix(parentNode,namespacePrefix);
  }
  return null;
}"
65212,"/** 
 * Create the control XmlAnyAttributeSubTypeMapModel.
 */
public Object getControlObject(){
  XmlAnyAttributeSubTypeMapModel anyAttributeSubTypeMapModel=new XmlAnyAttributeSubTypeMapModel();
  HashMap children=new HashMap();
  QName qname=new QName(OTHER_NS,CHILD1_NAME);
  children.put(qname,NAME_1);
  qname=new QName(OTHER_NS,CHILD2_NAME);
  children.put(qname,NAME_2);
  anyAttributeSubTypeMapModel.children=children;
  return anyAttributeSubTypeMapModel;
}","/** 
 * Create the control XmlAnyAttributeSubTypeMapModel.
 */
public Object getControlObject(){
  XmlAnyAttributeSubTypeMapModel anyAttributeSubTypeMapModel=new XmlAnyAttributeSubTypeMapModel();
  LinkedHashMap children=new LinkedHashMap();
  QName qname=new QName(OTHER_NS,CHILD1_NAME);
  children.put(qname,NAME_1);
  qname=new QName(OTHER_NS,CHILD2_NAME);
  children.put(qname,NAME_2);
  anyAttributeSubTypeMapModel.children=children;
  return anyAttributeSubTypeMapModel;
}"
65213,"public HashMap<QName,String> getChildren(){
  return children;
}","public Map<QName,String> getChildren(){
  return children;
}"
65214,"public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  XmlAnyAttributeSubTypeMapModel modelObj;
  try {
    modelObj=(XmlAnyAttributeSubTypeMapModel)obj;
  }
 catch (  ClassCastException e) {
    return false;
  }
  HashMap thisChildren=this.children;
  HashMap otherChildren=modelObj.children;
  if (thisChildren == null) {
    return (otherChildren == null || otherChildren.size() == 0);
  }
  if (otherChildren == null) {
    return (thisChildren.size() == 0);
  }
  if (thisChildren.size() != otherChildren.size()) {
    return false;
  }
  Iterator values1=thisChildren.keySet().iterator();
  while (values1.hasNext()) {
    Object key1=values1.next();
    Object value1=thisChildren.get(key1);
    Object value2=otherChildren.get(key1);
    if (!(value1.equals(value2))) {
      return false;
    }
  }
  return true;
}","public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  XmlAnyAttributeSubTypeMapModel modelObj;
  try {
    modelObj=(XmlAnyAttributeSubTypeMapModel)obj;
  }
 catch (  ClassCastException e) {
    return false;
  }
  Map thisChildren=this.children;
  Map otherChildren=modelObj.children;
  if (thisChildren == null) {
    return (otherChildren == null || otherChildren.size() == 0);
  }
  if (otherChildren == null) {
    return (thisChildren.size() == 0);
  }
  if (thisChildren.size() != otherChildren.size()) {
    return false;
  }
  Iterator values1=thisChildren.keySet().iterator();
  while (values1.hasNext()) {
    Object key1=values1.next();
    Object value1=thisChildren.get(key1);
    Object value2=otherChildren.get(key1);
    if (!(value1.equals(value2))) {
      return false;
    }
  }
  return true;
}"
65215,"public void setChildren(HashMap<QName,String> children){
  this.children=children;
}","public void setChildren(Map<QName,String> children){
  this.children=children;
}"
65216,"public void marshallEntity(Object object,MediaType mediaType,OutputStream output) throws JAXBException {
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.JSON_INCLUDE_ROOT,false);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setListener(new Marshaller.Listener(){
    @Override public void beforeMarshal(    Object source){
      if (source instanceof DynamicEntity) {
        DynamicEntityImpl sourceImpl=(DynamicEntityImpl)source;
        PropertyChangeListener listener=sourceImpl._persistence_getPropertyChangeListener();
        sourceImpl._persistence_setPropertyChangeListener(null);
        ((DynamicEntity)source).set(""String_Node_Str"",source);
        sourceImpl._persistence_setPropertyChangeListener(listener);
      }
    }
  }
);
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(""String_Node_Str"");
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
 else {
    marshaller.marshal(object,output);
  }
}","public void marshallEntity(Object object,MediaType mediaType,OutputStream output) throws JAXBException {
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setListener(new Marshaller.Listener(){
    @Override public void beforeMarshal(    Object source){
      if (source instanceof DynamicEntity) {
        DynamicEntityImpl sourceImpl=(DynamicEntityImpl)source;
        PropertyChangeListener listener=sourceImpl._persistence_getPropertyChangeListener();
        sourceImpl._persistence_setPropertyChangeListener(null);
        ((DynamicEntity)source).set(""String_Node_Str"",source);
        sourceImpl._persistence_setPropertyChangeListener(listener);
      }
    }
  }
);
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(""String_Node_Str"");
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }
 else {
    marshaller.marshal(object,output);
  }
}"
65217,"public Object unmarshalEntity(String type,String tenantId,MediaType acceptedMedia,InputStream in) throws JAXBException {
  Unmarshaller unmarshaller=getJAXBContext().createUnmarshaller();
  unmarshaller.setProperty(JAXBContext.JSON_INCLUDE_ROOT,Boolean.FALSE);
  unmarshaller.setProperty(MEDIA_TYPE,acceptedMedia.toString());
  unmarshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  JAXBElement<?> element=unmarshaller.unmarshal(new StreamSource(in),getClass(type));
  return element.getValue();
}","public Object unmarshalEntity(String type,String tenantId,MediaType acceptedMedia,InputStream in) throws JAXBException {
  Unmarshaller unmarshaller=getJAXBContext().createUnmarshaller();
  unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,Boolean.FALSE);
  unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,acceptedMedia.toString());
  unmarshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  JAXBElement<?> element=unmarshaller.unmarshal(new StreamSource(in),getClass(type));
  return element.getValue();
}"
65218,"protected SessionBeanCall unmarshallSessionBeanCall(InputStream data) throws JAXBException {
  Class[] jaxbClasses=new Class[]{SessionBeanCall.class};
  JAXBContext context=(JAXBContext)JAXBContextFactory.createContext(jaxbClasses,null);
  Unmarshaller unmarshaller=context.createUnmarshaller();
  unmarshaller.setProperty(JAXBContext.JSON_INCLUDE_ROOT,Boolean.FALSE);
  unmarshaller.setProperty(MEDIA_TYPE,MediaType.APPLICATION_JSON);
  StreamSource ss=new StreamSource(data);
  return unmarshaller.unmarshal(ss,SessionBeanCall.class).getValue();
}","protected SessionBeanCall unmarshallSessionBeanCall(InputStream data) throws JAXBException {
  Class[] jaxbClasses=new Class[]{SessionBeanCall.class};
  JAXBContext context=(JAXBContext)JAXBContextFactory.createContext(jaxbClasses,null);
  Unmarshaller unmarshaller=context.createUnmarshaller();
  unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,Boolean.FALSE);
  unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
  StreamSource ss=new StreamSource(data);
  return unmarshaller.unmarshal(ss,SessionBeanCall.class).getValue();
}"
65219,"protected String marshallMetadata(Object metadata,String mediaType) throws JAXBException {
  Class[] jaxbClasses=new Class[]{Link.class,Attribute.class,Descriptor.class,LinkTemplate.class,PersistenceUnit.class,Query.class};
  JAXBContext context=(JAXBContext)JAXBContextFactory.createContext(jaxbClasses,null);
  Marshaller marshaller=context.createMarshaller();
  marshaller.setProperty(JAXBContext.JSON_INCLUDE_ROOT,Boolean.FALSE);
  marshaller.setProperty(MEDIA_TYPE,mediaType);
  StringWriter writer=new StringWriter();
  marshaller.marshal(metadata,writer);
  return writer.toString();
}","protected String marshallMetadata(Object metadata,String mediaType) throws JAXBException {
  Class[] jaxbClasses=new Class[]{Link.class,Attribute.class,Descriptor.class,LinkTemplate.class,PersistenceUnit.class,Query.class};
  JAXBContext context=(JAXBContext)JAXBContextFactory.createContext(jaxbClasses,null);
  Marshaller marshaller=context.createMarshaller();
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,Boolean.FALSE);
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType);
  StringWriter writer=new StringWriter();
  marshaller.marshal(metadata,writer);
  return writer.toString();
}"
65220,"public static Marshaller createMarshaller(PersistenceContext context,MediaType mediaType) throws JAXBException {
  Marshaller marshaller=context.getJAXBContext().createMarshaller();
  marshaller.setProperty(MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.JSON_INCLUDE_ROOT,false);
  marshaller.setAdapter(new LinkAdapter(context.getBaseURI().toString(),context));
  marshaller.setListener(new Marshaller.Listener(){
    @Override public void beforeMarshal(    Object source){
      if (source instanceof DynamicEntity) {
        DynamicEntityImpl sourceImpl=(DynamicEntityImpl)source;
        PropertyChangeListener listener=sourceImpl._persistence_getPropertyChangeListener();
        sourceImpl._persistence_setPropertyChangeListener(null);
        ((DynamicEntity)source).set(""String_Node_Str"",source);
        sourceImpl._persistence_setPropertyChangeListener(listener);
      }
    }
  }
);
  return marshaller;
}","public static Marshaller createMarshaller(PersistenceContext context,MediaType mediaType) throws JAXBException {
  Marshaller marshaller=context.getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setAdapter(new LinkAdapter(context.getBaseURI().toString(),context));
  marshaller.setListener(new Marshaller.Listener(){
    @Override public void beforeMarshal(    Object source){
      if (source instanceof DynamicEntity) {
        DynamicEntityImpl sourceImpl=(DynamicEntityImpl)source;
        PropertyChangeListener listener=sourceImpl._persistence_getPropertyChangeListener();
        sourceImpl._persistence_setPropertyChangeListener(null);
        ((DynamicEntity)source).set(""String_Node_Str"",source);
        sourceImpl._persistence_setPropertyChangeListener(listener);
      }
    }
  }
);
  return marshaller;
}"
65221,"public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,eventWriter);
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,eventWriter);
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
65222,"public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,writer);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  StringReader reader=new StringReader(writer.toString());
  InputSource inputSource=new InputSource(reader);
  Document testDocument=parser.parse(inputSource);
  writer.close();
  reader.close();
  objectToXMLDocumentTest(testDocument);
}","public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,writer);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  StringReader reader=new StringReader(writer.toString());
  InputSource inputSource=new InputSource(reader);
  Document testDocument=parser.parse(inputSource);
  writer.close();
  reader.close();
  objectToXMLDocumentTest(testDocument);
}"
65223,"public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,streamWriter);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,streamWriter);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
65224,"public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,builder);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}","public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,builder);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}"
65225,"public void testXMLToObjectFromXMLStreamReader() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(instream);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=getJAXBUnmarshaller().unmarshal(xmlStreamReader,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(xmlStreamReader);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}","public void testXMLToObjectFromXMLStreamReader() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(instream);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=getJAXBUnmarshaller().unmarshal(xmlStreamReader,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(xmlStreamReader);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}"
65226,"public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    StringReader reader=new StringReader(writer.toString());
    InputSource inputSource=new InputSource(reader);
    Document testDocument=parser.parse(inputSource);
    writer.close();
    reader.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
65227,"public void testXMLToObjectFromInputStream() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=((JAXBUnmarshaller)jaxbUnmarshaller).unmarshal(new StreamSource(instream),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(instream);
    }
    instream.close();
    xmlToObjectTest(testObject);
    if (getProperties() != null) {
      JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
      Unmarshaller jaxbUnmarshallerFromJSONBindings=jaxbContextFromJSONBindings.createUnmarshaller();
      jaxbUnmarshallerFromJSONBindings.setAttachmentUnmarshaller(jaxbUnmarshaller.getAttachmentUnmarshaller());
      jaxbUnmarshallerFromJSONBindings.setProperty(JAXBUnmarshaller.JSON_NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(JAXBUnmarshaller.JSON_NAMESPACE_PREFIX_MAPPER));
      Object testObject2=null;
      log(""String_Node_Str"");
      InputStream instream2=ClassLoader.getSystemResourceAsStream(resourceName);
      if (getUnmarshalClass() != null) {
        testObject2=((JAXBUnmarshaller)jaxbUnmarshallerFromJSONBindings).unmarshal(new StreamSource(instream2),getUnmarshalClass());
      }
 else {
        testObject2=jaxbUnmarshallerFromJSONBindings.unmarshal(instream2);
      }
      instream2.close();
      xmlToObjectTest(testObject2);
    }
  }
}","public void testXMLToObjectFromInputStream() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=((JAXBUnmarshaller)jaxbUnmarshaller).unmarshal(new StreamSource(instream),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(instream);
    }
    instream.close();
    xmlToObjectTest(testObject);
    if (getProperties() != null) {
      JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
      Unmarshaller jaxbUnmarshallerFromJSONBindings=jaxbContextFromJSONBindings.createUnmarshaller();
      jaxbUnmarshallerFromJSONBindings.setAttachmentUnmarshaller(jaxbUnmarshaller.getAttachmentUnmarshaller());
      jaxbUnmarshallerFromJSONBindings.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER));
      Object testObject2=null;
      log(""String_Node_Str"");
      InputStream instream2=ClassLoader.getSystemResourceAsStream(resourceName);
      if (getUnmarshalClass() != null) {
        testObject2=((JAXBUnmarshaller)jaxbUnmarshallerFromJSONBindings).unmarshal(new StreamSource(instream2),getUnmarshalClass());
      }
 else {
        testObject2=jaxbUnmarshallerFromJSONBindings.unmarshal(instream2);
      }
      instream2.close();
      xmlToObjectTest(testObject2);
    }
  }
}"
65228,"public void testXMLToObjectFromXMLStreamReaderEx() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(instream);
    ExtendedXMLStreamReaderReader xmlStreamReaderReaderEx=new ExtendedXMLStreamReaderReader();
    XMLStreamReaderInputSource xmlStreamReaderInputSource=new XMLStreamReaderInputSource(xmlStreamReader);
    SAXSource saxSource=new SAXSource(xmlStreamReaderReaderEx,xmlStreamReaderInputSource);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(saxSource,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(saxSource);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}","public void testXMLToObjectFromXMLStreamReaderEx() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLStreamReader xmlStreamReader=XML_INPUT_FACTORY.createXMLStreamReader(instream);
    ExtendedXMLStreamReaderReader xmlStreamReaderReaderEx=new ExtendedXMLStreamReaderReader();
    XMLStreamReaderInputSource xmlStreamReaderInputSource=new XMLStreamReaderInputSource(xmlStreamReader);
    SAXSource saxSource=new SAXSource(xmlStreamReaderReaderEx,xmlStreamReaderInputSource);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(saxSource,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(saxSource);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}"
65229,"private Map getPropertiesFromJSON() throws JAXBException {
  Map props=new HashMap(getProperties());
  if (props != null) {
    Object bindingFilesObject=props.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY);
    if (bindingFilesObject != null) {
      JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
      Unmarshaller u=jaxbContext.createUnmarshaller();
      Marshaller jsonMarshaller=jaxbContext.createMarshaller();
      jsonMarshaller.setProperty(JAXBMarshaller.MEDIA_TYPE,""String_Node_Str"");
      jsonMarshaller.setProperty(JAXBMarshaller.JSON_INCLUDE_ROOT,false);
      if (bindingFilesObject instanceof Map) {
        Map<String,Object> bindingFiles=(Map<String,Object>)bindingFilesObject;
        Iterator<String> keyIter=bindingFiles.keySet().iterator();
        while (keyIter.hasNext()) {
          String nextKey=keyIter.next();
          Object nextBindings=bindingFiles.get(nextKey);
          ;
          if (nextBindings instanceof List) {
            List nextList=(List)bindingFiles.get(nextKey);
            for (int i=0; i < nextList.size(); i++) {
              Object o=nextList.get(i);
              if (o instanceof Source) {
                Source nextSource=(Source)o;
                if (nextSource instanceof StreamSource) {
                  StreamSource ss=(StreamSource)nextSource;
                  StreamSource ss2=new StreamSource(ss.getInputStream());
                  Object unmarshalledFromXML=u.unmarshal(ss2);
                  StringWriter sw=new StringWriter();
                  StreamResult newResult=new StreamResult(sw);
                  jsonMarshaller.marshal(unmarshalledFromXML,newResult);
                  StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
                  nextList.set(i,newSource);
                }
              }
            }
          }
 else           if (nextBindings instanceof Source) {
            Object unmarshalledFromXML=u.unmarshal((Source)nextBindings);
            StringWriter sw=new StringWriter();
            StreamResult newResult=new StreamResult(sw);
            jsonMarshaller.marshal(unmarshalledFromXML,newResult);
            StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
            bindingFiles.put(nextKey,newSource);
          }
        }
      }
 else       if (bindingFilesObject instanceof List) {
        List bindingFilesList=(List)bindingFilesObject;
        for (int i=0; i < bindingFilesList.size(); i++) {
          Object next=bindingFilesList.get(i);
          Object unmarshalledFromXML=getXmlBindings(next);
          StringWriter sw=new StringWriter();
          StreamResult newResult=new StreamResult(sw);
          jsonMarshaller.marshal(unmarshalledFromXML,newResult);
          StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
          bindingFilesList.set(i,newSource);
        }
        props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,bindingFilesList);
      }
 else {
        Object unmarshalledFromXML=getXmlBindings(bindingFilesObject);
        StringWriter sw=new StringWriter();
        StreamResult newResult=new StreamResult(sw);
        jsonMarshaller.marshal(unmarshalledFromXML,newResult);
        StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
        props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,newSource);
      }
    }
  }
  return props;
}","private Map getPropertiesFromJSON() throws JAXBException {
  Map props=new HashMap(getProperties());
  if (props != null) {
    Object bindingFilesObject=props.get(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY);
    if (bindingFilesObject != null) {
      JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
      Unmarshaller u=jaxbContext.createUnmarshaller();
      Marshaller jsonMarshaller=jaxbContext.createMarshaller();
      jsonMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
      jsonMarshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
      if (bindingFilesObject instanceof Map) {
        Map<String,Object> bindingFiles=(Map<String,Object>)bindingFilesObject;
        Iterator<String> keyIter=bindingFiles.keySet().iterator();
        while (keyIter.hasNext()) {
          String nextKey=keyIter.next();
          Object nextBindings=bindingFiles.get(nextKey);
          ;
          if (nextBindings instanceof List) {
            List nextList=(List)bindingFiles.get(nextKey);
            for (int i=0; i < nextList.size(); i++) {
              Object o=nextList.get(i);
              if (o instanceof Source) {
                Source nextSource=(Source)o;
                if (nextSource instanceof StreamSource) {
                  StreamSource ss=(StreamSource)nextSource;
                  StreamSource ss2=new StreamSource(ss.getInputStream());
                  Object unmarshalledFromXML=u.unmarshal(ss2);
                  StringWriter sw=new StringWriter();
                  StreamResult newResult=new StreamResult(sw);
                  jsonMarshaller.marshal(unmarshalledFromXML,newResult);
                  StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
                  nextList.set(i,newSource);
                }
              }
            }
          }
 else           if (nextBindings instanceof Source) {
            Object unmarshalledFromXML=u.unmarshal((Source)nextBindings);
            StringWriter sw=new StringWriter();
            StreamResult newResult=new StreamResult(sw);
            jsonMarshaller.marshal(unmarshalledFromXML,newResult);
            StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
            bindingFiles.put(nextKey,newSource);
          }
        }
      }
 else       if (bindingFilesObject instanceof List) {
        List bindingFilesList=(List)bindingFilesObject;
        for (int i=0; i < bindingFilesList.size(); i++) {
          Object next=bindingFilesList.get(i);
          Object unmarshalledFromXML=getXmlBindings(next);
          StringWriter sw=new StringWriter();
          StreamResult newResult=new StreamResult(sw);
          jsonMarshaller.marshal(unmarshalledFromXML,newResult);
          StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
          bindingFilesList.set(i,newSource);
        }
        props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,bindingFilesList);
      }
 else {
        Object unmarshalledFromXML=getXmlBindings(bindingFilesObject);
        StringWriter sw=new StringWriter();
        StreamResult newResult=new StreamResult(sw);
        jsonMarshaller.marshal(unmarshalledFromXML,newResult);
        StreamSource newSource=new StreamSource(new StringReader(sw.toString()));
        props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,newSource);
      }
    }
  }
  return props;
}"
65230,"public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=parser.parse(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=parser.parse(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}"
65231,"public void testXMLToObjectFromNode() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    Node node=parser.parse(instream);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(node,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(node);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}","public void testXMLToObjectFromNode() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    Node node=parser.parse(instream);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(node,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(node);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}"
65232,"public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  jaxbMarshaller.marshal(objectToWrite,testDocument);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  jaxbMarshaller.marshal(objectToWrite,testDocument);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}"
65233,"public void testXMLToObjectFromXMLEventReader() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLEventReader xmlEventReader=XML_INPUT_FACTORY.createXMLEventReader(instream);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(xmlEventReader,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(xmlEventReader);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}","public void testXMLToObjectFromXMLEventReader() throws Exception {
  if (null != XML_INPUT_FACTORY && isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    XMLEventReader xmlEventReader=XML_INPUT_FACTORY.createXMLEventReader(instream);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(xmlEventReader,getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(xmlEventReader);
    }
    instream.close();
    xmlToObjectTest(testObject);
  }
}"
65234,"public void testUnmarshallerHandler() throws Exception {
  if (isUnmarshalTest()) {
    SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    SAXParser saxParser=saxParserFactory.newSAXParser();
    XMLReader xmlReader=saxParser.getXMLReader();
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    JAXBUnmarshallerHandler jaxbUnmarshallerHandler=(JAXBUnmarshallerHandler)jaxbUnmarshaller.getUnmarshallerHandler();
    xmlReader.setContentHandler(jaxbUnmarshallerHandler);
    InputStream inputStream=ClassLoader.getSystemResourceAsStream(resourceName);
    InputSource inputSource=new InputSource(inputStream);
    xmlReader.parse(inputSource);
    xmlToObjectTest(jaxbUnmarshallerHandler.getResult());
  }
}","public void testUnmarshallerHandler() throws Exception {
  if (isUnmarshalTest()) {
    SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    SAXParser saxParser=saxParserFactory.newSAXParser();
    XMLReader xmlReader=saxParser.getXMLReader();
    jaxbUnmarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    JAXBUnmarshallerHandler jaxbUnmarshallerHandler=(JAXBUnmarshallerHandler)jaxbUnmarshaller.getUnmarshallerHandler();
    xmlReader.setContentHandler(jaxbUnmarshallerHandler);
    InputStream inputStream=ClassLoader.getSystemResourceAsStream(resourceName);
    InputSource inputSource=new InputSource(inputStream);
    xmlReader.parse(inputSource);
    xmlToObjectTest(jaxbUnmarshallerHandler.getResult());
  }
}"
65235,"public void testXMLToObjectFromURL() throws Exception {
  if (isUnmarshalTest()) {
    java.net.URL url=ClassLoader.getSystemResource(resourceName);
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=((JAXBUnmarshaller)jaxbUnmarshaller).unmarshal(new StreamSource(url.openStream()),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(url);
    }
    xmlToObjectTest(testObject);
  }
}","public void testXMLToObjectFromURL() throws Exception {
  if (isUnmarshalTest()) {
    java.net.URL url=ClassLoader.getSystemResource(resourceName);
    jaxbUnmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=((JAXBUnmarshaller)jaxbUnmarshaller).unmarshal(new StreamSource(url.openStream()),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(url);
    }
    xmlToObjectTest(testObject);
  }
}"
65236,"public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=parser.parse(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(JAXBMarshaller.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(JAXBMarshaller.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}","public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=parser.parse(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}"
65237,"public void testRoundTrip() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=null;
    if (writeControlDocumentLocation != null) {
      instream=ClassLoader.getSystemResourceAsStream(writeControlDocumentLocation);
    }
 else {
      instream=ClassLoader.getSystemResourceAsStream(resourceName);
    }
    jaxbUnmarshaller.setProperty(org.eclipse.persistence.jaxb.JAXBContext.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(new StreamSource(instream),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(instream);
    }
    instream.close();
    xmlToObjectTest(testObject);
    objectToXMLStringWriter(testObject);
  }
}","public void testRoundTrip() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=null;
    if (writeControlDocumentLocation != null) {
      instream=ClassLoader.getSystemResourceAsStream(writeControlDocumentLocation);
    }
 else {
      instream=ClassLoader.getSystemResourceAsStream(resourceName);
    }
    jaxbUnmarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    Object testObject=null;
    if (getUnmarshalClass() != null) {
      testObject=jaxbUnmarshaller.unmarshal(new StreamSource(instream),getUnmarshalClass());
    }
 else {
      testObject=jaxbUnmarshaller.unmarshal(instream);
    }
    instream.close();
    xmlToObjectTest(testObject);
    objectToXMLStringWriter(testObject);
  }
}"
65238,"private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler,String textWrapper,Class unmarshalClass){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
  this.textWrapper=textWrapper;
  this.unmarshalClass=unmarshalClass;
}","public JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,Character namespaceSeparator,ErrorHandler errorHandler,String textWrapper,Class unmarshalClass){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  if (namespaceSeparator == null) {
    this.namespaceSeparator=XMLConstants.DOT;
  }
 else {
    this.namespaceSeparator=namespaceSeparator;
  }
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
  this.textWrapper=textWrapper;
  this.unmarshalClass=unmarshalClass;
}"
65239,"public JSONWriterRecord(){
  super();
  space=XMLConstants.EMPTY_STRING;
  namespaceSeparator=XMLConstants.DOT;
}","public JSONWriterRecord(){
  super();
  space=XMLConstants.EMPTY_STRING;
}"
65240,"public void setXMLReader(XMLReader xmlReader){
  this.xmlReader=xmlReader;
  namespaceAware=xmlReader.isNamespaceAware();
  namespaceSeparator=xmlReader.getNamespaceSeparator();
  if (xPathFragment != null) {
    xPathFragment.setNamespaceAware(isNamespaceAware());
  }
}","public void setXMLReader(XMLReader xmlReader){
  this.xmlReader=xmlReader;
  namespaceAware=xmlReader.isNamespaceAware();
  if (xPathFragment != null) {
    xPathFragment.setNamespaceAware(isNamespaceAware());
  }
}"
65241,"public XMLRecord(){
  super(null,null);
  namespaceResolver=new NamespaceResolver();
  namespaceSeparator=XMLConstants.COLON;
  namespaceAware=true;
}","public XMLRecord(){
  super(null,null);
  namespaceResolver=new NamespaceResolver();
  namespaceAware=true;
}"
65242,"/** 
 * INTERNAL: The character used to separate the prefix and uri portions when namespaces are present 
 * @since 2.4
 */
public char getNamespaceSeparator(){
  return namespaceSeparator;
}","/** 
 * INTERNAL: The character used to separate the prefix and uri portions when namespaces are present 
 * @since 2.4
 */
public char getNamespaceSeparator(){
  return XMLConstants.COLON;
}"
65243,"/** 
 * Creates a new EclipseLink   {@link Expression} by visiting the given JPQL {@link StateFieldPathExpression}. This method temporarily changes the null allowed flag if the state field is a foreign reference mapping
 * @param expression The {@link StateFieldPathExpression} to convert into an EclipseLink {@link Expression}
 * @return The EclipseLink {@link Expression} representation of that path expression
 */
Expression buildModifiedPathExpression(StateFieldPathExpression expression){
  PathResolver resolver=pathResolver();
  try {
    resolver.length=expression.pathSize();
    resolver.nullAllowed=false;
    resolver.localExpression=null;
    resolver.checkMappingType=true;
    expression.accept(resolver);
    return resolver.localExpression;
  }
  finally {
    resolver.length=-1;
    resolver.nullAllowed=false;
    resolver.checkMappingType=false;
    resolver.localExpression=null;
    resolver.descriptor=null;
    this.type[0]=null;
    this.typeExpression=false;
    this.queryExpression=null;
  }
}","/** 
 * Creates a new EclipseLink   {@link Expression} by visiting the given JPQL {@link StateFieldPathExpression}. This method temporarily changes the null allowed flag if the state field is a foreign reference mapping
 * @param expression The {@link StateFieldPathExpression} to convert into an EclipseLink {@link Expression}
 * @return The EclipseLink {@link Expression} representation of that path expression
 */
Expression buildModifiedPathExpression(StateFieldPathExpression expression){
  try {
    PathResolver resolver=new PathResolver();
    resolver.length=expression.pathSize();
    resolver.checkMappingType=true;
    expression.accept(resolver);
    return resolver.localExpression;
  }
  finally {
    this.type[0]=null;
    this.typeExpression=false;
    this.queryExpression=null;
  }
}"
65244,"private void visitInExpression(InExpression expression,Expression stateFieldPathExpression){
  InExpressionBuilder visitor=inExpressionBuilder();
  try {
    visitor.hasNot=expression.hasNot();
    visitor.singleInputParameter=expression.isSingleInputParameter();
    visitor.stateFieldPathExpression=stateFieldPathExpression;
    expression.getInItems().accept(visitor);
  }
  finally {
    visitor.hasNot=false;
    visitor.singleInputParameter=false;
    visitor.stateFieldPathExpression=null;
  }
}","private void visitInExpression(InExpression expression,Expression leftExpression){
  InExpressionBuilder visitor=new InExpressionBuilder();
  visitor.hasNot=expression.hasNot();
  visitor.singleInputParameter=expression.isSingleInputParameter();
  visitor.leftExpression=leftExpression;
  expression.getInItems().accept(visitor);
}"
65245,"/** 
 * Creates a new EclipseLink   {@link Expression} by visiting the given JPQL {@link CollectionValuedPathExpression} that is used in the <code><b>GROUP BY</b></code> clause.
 * @param expression The {@link CollectionValuedPathExpression} to convert into an EclipseLink{@link Expression}
 * @return The EclipseLink {@link Expression} representation of that path expression
 */
Expression buildGroupByExpression(CollectionValuedPathExpression expression){
  PathResolver resolver=pathResolver();
  try {
    resolver.length=expression.pathSize() - 1;
    resolver.nullAllowed=false;
    resolver.localExpression=null;
    resolver.checkMappingType=false;
    expression.accept(resolver);
    return resolver.localExpression;
  }
  finally {
    resolver.length=-1;
    resolver.descriptor=null;
    resolver.nullAllowed=false;
    resolver.checkMappingType=false;
    resolver.localExpression=null;
    this.type[0]=null;
    this.typeExpression=false;
    this.queryExpression=null;
  }
}","/** 
 * Creates a new EclipseLink   {@link Expression} by visiting the given JPQL {@link CollectionValuedPathExpression} that is used in the <code><b>GROUP BY</b></code> clause.
 * @param expression The {@link CollectionValuedPathExpression} to convert into an EclipseLink{@link Expression}
 * @return The EclipseLink {@link Expression} representation of that path expression
 */
Expression buildGroupByExpression(CollectionValuedPathExpression expression){
  try {
    PathResolver resolver=new PathResolver();
    resolver.length=expression.pathSize() - 1;
    resolver.nullAllowed=false;
    resolver.checkMappingType=false;
    expression.accept(resolver);
    return resolver.localExpression;
  }
  finally {
    this.type[0]=null;
    this.typeExpression=false;
    this.queryExpression=null;
  }
}"
65246,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}"
65247,"public void testValidateNoSchemaReference() throws JAXBException {
  Class[] classes={Address.class};
  JAXBContext jc=JAXBContextFactory.createContext(classes,null);
  Validator validator=jc.createValidator();
  assertTrue(validator.validate(new Address()));
}","public void testValidateNoSchemaReference() throws JAXBException {
  try {
    Class[] classes={Address.class};
    JAXBContext jc=JAXBContextFactory.createContext(classes,null);
    Validator validator=jc.createValidator();
    validator.validate(new Address());
  }
 catch (  ValidationException e) {
    XMLMarshalException xme=(XMLMarshalException)e.getLinkedException();
    XMLPlatformException xpe=(XMLPlatformException)xme.getInternalException();
    XMLMarshalException xme2=(XMLMarshalException)xpe.getInternalException();
    assertEquals(XMLMarshalException.ERROR_RESOLVING_XML_SCHEMA,xme2.getErrorCode());
    return;
  }
}"
65248,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        nextValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      }
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        int index=frags.indexOf(frag);
        if (index > -1) {
          values.get(index).add(nextValue);
        }
 else {
          frags.add(frag);
          List valuesList=new ArrayList();
          valuesList.add(nextValue);
          values.add(valuesList);
        }
      }
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      }
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    List mixedValues=new ArrayList();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        nextValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      }
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        if (frag == SIMPLE_FRAGMENT) {
          mixedValues.add(nextValue);
        }
 else {
          int index=frags.indexOf(frag);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            frags.add(frag);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedValues.size() > 0) {
      frags.add(SIMPLE_FRAGMENT);
      values.add(mixedValues);
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      }
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}"
65249,"public Object unmarshal(XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
    xmlReader.setContentHandler(saxDocumentBuilder);
    xmlReader.parse(inputSource);
    return xmlToObject(new DOMRecord(saxDocumentBuilder.getDocument()),clazz);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}","public Object unmarshal(XMLReader xmlReader,InputSource inputSource,Class clazz){
  if (xmlUnmarshaller.getMediaType() != MediaType.APPLICATION_XML) {
    throw XMLMarshalException.unsupportedMediaTypeForPlatform();
  }
  try {
    SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
    xmlReader.setContentHandler(saxDocumentBuilder);
    xmlReader.parse(inputSource);
    return xmlToObject(new DOMRecord(saxDocumentBuilder.getDocument()),clazz);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65250,"private XMLReader getXMLReader(){
  if (null == xmlReader) {
    try {
      xmlReader=new XMLReader(getSAXParser().getXMLReader());
      if (null != errorHandler) {
        xmlReader.setErrorHandler(errorHandler);
      }
      if (null != entityResolver) {
        xmlReader.setEntityResolver(entityResolver);
      }
      setValidationMode(getValidationMode());
      if (null != getSchema()) {
        xmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
      }
      return xmlReader;
    }
 catch (    Exception e) {
      throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
    }
  }
  return xmlReader;
}","private XMLReader getXMLReader(Class clazz){
  if (null == xmlReader) {
    if (xmlUnmarshaller.getMediaType() == MediaType.APPLICATION_JSON) {
      return new JSONReader(xmlUnmarshaller.getAttributePrefix(),xmlUnmarshaller.getNamespaceResolver(),xmlUnmarshaller.getNamespaceResolver() != null,xmlUnmarshaller.isIncludeRoot(),xmlUnmarshaller.getNamespaceSeparator(),xmlUnmarshaller.getErrorHandler(),xmlUnmarshaller.getValueWrapper(),clazz);
    }
    try {
      xmlReader=new XMLReader(getSAXParser().getXMLReader());
      if (null != errorHandler) {
        xmlReader.setErrorHandler(errorHandler);
      }
      if (null != entityResolver) {
        xmlReader.setEntityResolver(entityResolver);
      }
      setValidationMode(getValidationMode());
      if (null != getSchema()) {
        xmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
      }
      return xmlReader;
    }
 catch (    Exception e) {
      throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
    }
  }
  return xmlReader;
}"
65251,"private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null);
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        list.add(unmarshalRecord.getCurrentObject());
        unmarshalRecord.setCurrentObject(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
    }
  }
}","private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null);
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    SAXUnmarshallerHandler rootContentHandler=null;
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      rootContentHandler=(SAXUnmarshallerHandler)getContentHandler();
    }
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        Object unmarshalledObject=unmarshalRecord.getCurrentObject();
        if (includeRoot && unmarshalClass != null) {
          XMLRoot xmlRoot=new XMLRoot();
          xmlRoot.setNamespaceURI(unmarshalRecord.getRootElementNamespaceUri());
          xmlRoot.setLocalName(unmarshalRecord.getLocalName());
          xmlRoot.setObject(unmarshalledObject);
          unmarshalledObject=xmlRoot;
        }
        list.add(unmarshalledObject);
        unmarshalRecord.setCurrentObject(null);
        unmarshalRecord.setRootElementName(null);
        unmarshalRecord.setLocalName(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
      ((UnmarshalRecord)getContentHandler()).setRootElementName(XMLConstants.EMPTY_STRING);
      ((UnmarshalRecord)getContentHandler()).setLocalName(XMLConstants.EMPTY_STRING);
      if (rootContentHandler != null) {
        rootContentHandler.setObject(list);
      }
    }
  }
}"
65252,"private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler,String textWrapper){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
  this.textWrapper=textWrapper;
}","private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler,String textWrapper,Class unmarshalClass){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
  this.textWrapper=textWrapper;
  this.unmarshalClass=unmarshalClass;
}"
65253,"public java.lang.Boolean isMyBooleanWrapperTest(){
  return new Boolean(getBoolean(START_PROPERTY_INDEX + 51));
}","public java.lang.Boolean isMyBooleanWrapperTest(){
  return getBoolean(START_PROPERTY_INDEX + 50);
}"
65254,"public java.lang.Long getMyLongWrapperTest(){
  return getLong(START_PROPERTY_INDEX + 50);
}","public java.lang.Long getMyLongWrapperTest(){
  return getLong(START_PROPERTY_INDEX + 56);
}"
65255,"public void setMyLongWrapperTest(java.lang.Long value){
  set(START_PROPERTY_INDEX + 50,value);
}","public void setMyLongWrapperTest(java.lang.Long value){
  set(START_PROPERTY_INDEX + 56,value);
}"
65256,"public void setMyBooleanWrapperTest(java.lang.Boolean value){
  set(START_PROPERTY_INDEX + 51,value);
}","public void setMyBooleanWrapperTest(java.lang.Boolean value){
  set(START_PROPERTY_INDEX + 50,value);
}"
65257,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  return suite;
}"
65258,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLSimpleTestSuite(""String_Node_Str""));
  return suite;
}"
65259,"@POST @Consumes(MediaType.APPLICATION_XML) public void create(Address address){
  entityManager.persist(address);
}","@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void create(Address address){
  entityManager.persist(address);
}"
65260,"@PUT @Consumes(MediaType.APPLICATION_XML) public void update(Address address){
  entityManager.merge(address);
}","@PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void update(Address address){
  entityManager.merge(address);
}"
65261,"@SuppressWarnings(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_XML) @Path(""String_Node_Str"") public List<Customer> findCustomerByCity(@PathParam(""String_Node_Str"") String city){
  Query query=entityManager.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",city);
  return query.getResultList();
}","@SuppressWarnings(""String_Node_Str"") @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public List<Customer> findCustomerByCity(@PathParam(""String_Node_Str"") String city){
  Query query=entityManager.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",city);
  return query.getResultList();
}"
65262,"@POST @Consumes(MediaType.APPLICATION_XML) public void create(Customer customer){
  entityManager.persist(customer);
}","@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void create(Customer customer){
  entityManager.persist(customer);
}"
65263,"@PUT @Consumes(MediaType.APPLICATION_XML) public void update(Customer customer){
  entityManager.merge(customer);
}","@PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public void update(Customer customer){
  entityManager.merge(customer);
}"
65264,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_ROWTYPE_TEST_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_ROWTYPE_TEST_TABLE.length; i++) {
        stmt.addBatch(POPULATE_ROWTYPE_TEST_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_ROWTYPE_SHADOWTYPE,ddlDebug);
    runDdl(conn,CREATE_ROWTYPE_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_ROWTYPE_TEST_PACKAGE_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + ROWTYPE_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_ROWTYPE_TEST_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_ROWTYPE_TEST_TABLE.length; i++) {
        stmt.addBatch(POPULATE_ROWTYPE_TEST_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
    runDdl(conn,CREATE_ROWTYPE_TEST_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_ROWTYPE_TEST_PACKAGE_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + ROWTYPE_TEST_PACKAGE + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ROWTYPE_TEST_PACKAGE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
  for (  String ddl : builder.getTypeDDL()) {
    runDdl(conn,ddl,ddlDebug);
  }
}"
65265,"@AfterClass public static void tearDown(){
  String ddlDrop=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDrop)) {
    runDdl(conn,DROP_ROWTYPE_TEST_PACKAGE,ddlDebug);
    runDdl(conn,DROP_ROWTYPE_SHADOWTYPE,ddlDebug);
    runDdl(conn,DROP_ROWTYPE_TEST_TABLE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  String ddlDrop=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDrop)) {
    runDdl(conn,DROP_ROWTYPE_TEST_PACKAGE,ddlDebug);
    runDdl(conn,DROP_ROWTYPE_TEST_TABLE,ddlDebug);
  }
  for (  String ddl : builder.getTypeDropDDL()) {
    runDdl(conn,ddl,ddlDebug);
  }
}"
65266,"protected void updateNamespaces(QName qname,MarshalRecord marshalRecord,XMLField xmlField){
  if (qname != null) {
    if (xmlField != null) {
      if (xmlField.isTypedTextField()) {
        if (xmlField.getSchemaType() == null) {
          if (qname.equals(XMLConstants.STRING_QNAME)) {
            return;
          }
        }
 else {
          if (xmlField.isSchemaType(qname)) {
            return;
          }
        }
      }
 else {
        return;
      }
    }
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
    if ((prefix == null) || prefix.length() == 0) {
      if (XMLConstants.SCHEMA_URL.equals(qname.getNamespaceURI())) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      }
      marshalRecord.namespaceDeclaration(prefix,qname.getNamespaceURI());
    }
    String typeValue=prefix + XMLConstants.COLON + qname.getLocalPart();
    addTypeAttribute(marshalRecord,typeValue);
  }
}","protected void updateNamespaces(QName qname,MarshalRecord marshalRecord,XMLField xmlField){
  if (qname != null) {
    if (xmlField != null) {
      if (xmlField.isTypedTextField()) {
        if (xmlField.getSchemaType() == null) {
          if (qname.equals(XMLConstants.STRING_QNAME)) {
            return;
          }
        }
 else {
          if (xmlField.isSchemaType(qname)) {
            return;
          }
        }
      }
 else {
        return;
      }
    }
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
    if ((prefix == null) || prefix.length() == 0) {
      if (XMLConstants.SCHEMA_URL.equals(qname.getNamespaceURI())) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      }
      marshalRecord.namespaceDeclaration(prefix,qname.getNamespaceURI());
    }
    String typeValue=null;
    if (marshalRecord.isNamespaceAware()) {
      typeValue=prefix + marshalRecord.getNamespaceSeparator() + qname.getLocalPart();
    }
 else {
      typeValue=qname.getLocalPart();
    }
    addTypeAttribute(marshalRecord,typeValue);
  }
}"
65267,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        int index=nodeValues.indexOf(nodeValue);
        if (index > -1) {
          values.get(index).add(nextValue);
        }
 else {
          nodeValues.add(nodeValue);
          List valuesList=new ArrayList();
          valuesList.add(nextValue);
          values.add(valuesList);
        }
      }
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          associatedNodeValue.marshalSingleValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  if (marshalRecord.getMarshaller().getMediaType() == MediaType.APPLICATION_JSON) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=getConvertedValue(cp.next(iterator,session),marshalRecord,session);
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        marshalRecord.startCollection();
        for (int j=0; j < listValue.size(); j++) {
          associatedNodeValue.marshalSingleValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
65268,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(valueToSet,unmarshalRecord.getCurrentObject());
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        if (unmarshalRecord.isNamespaceAware()) {
          xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        }
 else {
          xsiType=element.getAttribute(XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
        }
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(unmarshalRecord.getNamespaceSeparator());
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
 else {
          if (!unmarshalRecord.isNamespaceAware()) {
            QName qName=new QName(XMLConstants.SCHEMA_URL,xsiType);
            Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
            if (theClass != null) {
              value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
            }
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(valueToSet,unmarshalRecord.getCurrentObject());
    }
  }
}"
65269,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=null;
    if (unmarshalRecord.isNamespaceAware()) {
      schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      schemaType=atts.getValue(XMLConstants.EMPTY_STRING,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment(schemaType,unmarshalRecord.getNamespaceSeparator(),unmarshalRecord.isNamespaceAware());
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=null;
    if (unmarshalRecord.isNamespaceAware()) {
      schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      schemaType=atts.getValue(XMLConstants.EMPTY_STRING,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment(schemaType,unmarshalRecord.getNamespaceSeparator(),unmarshalRecord.isNamespaceAware());
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
          if (!unmarshalRecord.isNamespaceAware()) {
            qname=new QName(XMLConstants.SCHEMA_URL,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}"
65270,"public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      if (aNodeValue instanceof XMLCompositeObjectMappingNodeValue) {
        if (null == selfChildren) {
          selfChildren=new ArrayList<XPathNode>();
        }
        selfChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}","public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      if (aNodeValue instanceof XMLCompositeObjectMappingNodeValue) {
        if (null == selfChildren) {
          selfChildren=new ArrayList<XPathNode>();
        }
        selfChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    if (anXPathFragment != null && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(anXPathFragment.getLocalName())) {
      hasTypeChild=true;
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}"
65271,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=null;
    if (xmlReader.isNamespaceAware()) {
      type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      type=atts.getValue(XMLConstants.EMPTY_STRING,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
      if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName()));
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      XPathQName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
      }
 else {
        rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshaller(unmarshaller);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setXMLReader(this.getXMLReader());
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator != null) {
            classValue=(Class)indicator;
          }
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null != atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setNil(true);
    }
    unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    unmarshalRecord.startDocument();
    unmarshalRecord.initializeRecord(null);
    xmlReader.setContentHandler(unmarshalRecord);
    xmlReader.setLexicalHandler(unmarshalRecord);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=null;
    if (xmlReader.isNamespaceAware()) {
      type=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      type=atts.getValue(XMLConstants.EMPTY_STRING,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
      if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        QName lookupQName=null;
        if (typeFragment.getNamespaceURI() == null) {
          lookupQName=new QName(XMLConstants.SCHEMA_URL,typeFragment.getLocalName());
        }
 else {
          lookupQName=new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName());
        }
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(lookupQName);
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      XPathQName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
      }
 else {
        rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(XMLDescriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (this.keepAsElementPolicy != UnmarshalKeepAsElementPolicy.KEEP_NONE_AS_ELEMENT) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.setUnmarshalRecord(unmappedContentHandlerWrapper);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getReadSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=new XMLRootRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((AbstractSession)unmarshaller.getXMLContext().getSession(0));
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecord(null);
      unmarshalRecord.setUnmarshaller(unmarshaller);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setXMLReader(this.getXMLReader());
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator != null) {
            classValue=(Class)indicator;
          }
        }
      }
      if (classValue != null) {
        xmlDescriptor=(XMLDescriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(locator);
    }
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    unmarshalRecord.setAttributes(atts);
    if (atts != null && null != atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      unmarshalRecord.setNil(true);
    }
    unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    unmarshalRecord.startDocument();
    unmarshalRecord.initializeRecord(null);
    xmlReader.setContentHandler(unmarshalRecord);
    xmlReader.setLexicalHandler(unmarshalRecord);
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65272,"private void parse(Tree tree) throws SAXException {
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String localName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        if (attributePrefix != null && localName.startsWith(attributePrefix)) {
          break;
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=localName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=localName.substring(0,nsIndex);
            localName=localName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
String uri=XMLConstants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
parentLocalName=parentLocalName.substring(nsIndex + 1);
uri=namespaces.resolveNamespacePrefix(prefix);
}
}
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
parse(nextChildTree);
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=localName.indexOf(namespaceSeparator);
          if (nsIndex > -1) {
            String prefix=localName.substring(0,nsIndex);
            localName=localName.substring(nsIndex + 1);
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
          if (localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(XMLConstants.SCHEMA_INSTANCE_URL)) {
            break;
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DescriptorNotFoundContentHandler) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
String uri=XMLConstants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
parentLocalName=parentLocalName.substring(nsIndex + 1);
uri=namespaces.resolveNamespacePrefix(prefix);
}
}
boolean isTextValue=isTextValue(parentLocalName);
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (!isTextValue) {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
parse(nextChildTree);
if (!isTextValue) {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
65273,"private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
}","private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler,String textWrapper){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
  this.textWrapper=textWrapper;
}"
65274,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
 else {
    marshalRecord.marshalWithoutRootElement(treeObjectBuilder,object,descriptor,root,isXMLRoot);
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
 else {
    marshalRecord.marshalWithoutRootElement(treeObjectBuilder,object,descriptor,root,isXMLRoot);
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          String typeValue=type.getLocalPart();
          if (marshalRecord.isNamespaceAware()) {
            typeValue=XMLConstants.SCHEMA_PREFIX + marshalRecord.getNamespaceSeparator() + typeValue;
          }
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65275,"private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    rootFragment=new XPathFragment();
    rootFragment.setLocalName(xmlRootLocalName);
    rootFragment.setNamespaceURI(xmlRootUri);
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setPrefix(xmlRootPrefix);
        }
      }
 else {
        String xmlRootPrefix=""String_Node_Str"";
        marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        rootFragment.setXPath(xmlRootPrefix + XMLConstants.COLON + xmlRootLocalName);
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}","private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    rootFragment=new XPathFragment(xmlRootLocalName,marshalRecord.getNamespaceSeparator(),marshalRecord.isNamespaceAware());
    rootFragment.setNamespaceURI(xmlRootUri);
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setPrefix(xmlRootPrefix);
        }
      }
 else {
        if (marshalRecord.isNamespaceAware()) {
          String xmlRootPrefix=""String_Node_Str"";
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
          rootFragment.setXPath(xmlRootPrefix + marshalRecord.getNamespaceSeparator() + xmlRootLocalName);
        }
 else {
          rootFragment.setXPath(xmlRootLocalName);
        }
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}"
65276,"public void testImageStarSpecified_ConentTypeImageGif() throws JAXBException {
  RootImageStar root=new RootImageStar();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    if (!(((XMLMarshalException)ex.getLinkedException()).getErrorCode() == XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE)) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}","public void testImageStarSpecified_ConentTypeImageGif() throws JAXBException {
  RootImageStar root=new RootImageStar();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    ConversionException ce=(ConversionException)ex.getLinkedException();
    XMLMarshalException me=(XMLMarshalException)ce.getInternalException();
    if (me.getErrorCode() != XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}"
65277,"public void testNoMimeTypeSpecied_ContentTypeImageGif() throws JAXBException {
  Root root=new Root();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    if (!(((XMLMarshalException)ex.getLinkedException()).getErrorCode() == XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE)) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}","public void testNoMimeTypeSpecied_ContentTypeImageGif() throws JAXBException {
  Root root=new Root();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    ConversionException ce=(ConversionException)ex.getLinkedException();
    XMLMarshalException me=(XMLMarshalException)ce.getInternalException();
    if (me.getErrorCode() != XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}"
65278,"public void testImageJpegSpecified_ConentTypeImageGif() throws JAXBException {
  RootImageJpeg root=new RootImageJpeg();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    if (!(((XMLMarshalException)ex.getLinkedException()).getErrorCode() == XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE)) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}","public void testImageJpegSpecified_ConentTypeImageGif() throws JAXBException {
  RootImageJpeg root=new RootImageJpeg();
  root.setMimeType(IMAGE_GIF);
  root.setImage(IMAGE);
  try {
    marshaller.marshal(root,new StringWriter());
  }
 catch (  MarshalException ex) {
    ConversionException ce=(ConversionException)ex.getLinkedException();
    XMLMarshalException me=(XMLMarshalException)ce.getInternalException();
    if (me.getErrorCode() != XMLMarshalException.NO_ENCODER_FOR_MIME_TYPE) {
      throw ex;
    }
 else {
      return;
    }
  }
  assertEquals(IMAGE_GIF,attachmentMarshaller.getMimeType());
}"
65279,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    for (int x=0, size=marshalContext.getNonAttributeChildrenSize(rootXPathNode); x < size; x++) {
      XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,rootXPathNode);
      xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
    }
  }
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  XPathNode node=rootXPathNode;
  MarshalRecord marshalRecord=(MarshalRecord)record;
  QName schemaType=null;
  if (marshalRecord.getCycleDetectionStack().contains(object)) {
    if (cycleRecoverableClass == null) {
      initCycleRecoverableClasses();
    }
    if (cycleRecoverableClass.isAssignableFrom(object.getClass())) {
      try {
        Object jaxbMarshaller=marshaller.getProperty(XMLConstants.JAXB_MARSHALLER);
        Object contextProxy=CycleRecoverableContextProxy.getProxy(cycleRecoverableContextClass,jaxbMarshaller);
        Method onCycleDetectedMethod=object.getClass().getMethod(ON_CYCLE_DETECTED,new Class[]{cycleRecoverableContextClass});
        object=PrivilegedAccessHelper.invokeMethod(onCycleDetectedMethod,object,new Object[]{contextProxy});
      }
 catch (      Exception e) {
        throw XMLMarshalException.marshalException(e);
      }
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(object.getClass());
      if (xmlDescriptor != null) {
        node=((TreeObjectBuilder)xmlDescriptor.getObjectBuilder()).getRootXPathNode();
      }
 else {
        node=null;
      }
      marshalRecord.getCycleDetectionStack().push(object);
      if (xmlDescriptor != descriptor) {
        if (xmlDescriptor == null) {
          schemaType=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        }
 else {
          schemaType=xmlDescriptor.getSchemaReference().getSchemaContextAsQName();
        }
        writeXsiTypeAttribute(xmlDescriptor,(XMLRecord)record,schemaType,false);
      }
    }
 else {
      marshalRecord.getCycleDetectionStack().push(object);
      throw XMLMarshalException.objectCycleDetected(marshalRecord.getCycleDetectionStack().getCycleString());
    }
  }
 else {
    marshalRecord.getCycleDetectionStack().push(object);
  }
  NamespaceResolver namespaceResolver=null;
  if (xmlDescriptor != null) {
    namespaceResolver=xmlDescriptor.getNamespaceResolver();
  }
  MarshalContext marshalContext=null;
  if (xmlDescriptor != null && xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    if (node == null) {
      XPathNode n=new XPathNode();
      XMLCompositeObjectMapping m=new XMLCompositeObjectMapping();
      m.setXPath(""String_Node_Str"");
      XMLCompositeObjectMappingNodeValue nv=new XMLCompositeObjectMappingNodeValue(m);
      n.setMarshalNodeValue(nv);
      nv.marshalSingleValue(new XPathFragment(""String_Node_Str""),marshalRecord,null,object,session,namespaceResolver,marshalContext);
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(node); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,node);
        xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
      }
    }
  }
  marshalRecord.getCycleDetectionStack().pop();
  return record;
}"
65280,"protected void writeXsiTypeAttribute(XMLDescriptor xmlDescriptor,XMLRecord row,String typeValue,boolean addToNamespaceResolver){
  XMLField xmlField=null;
  if (row.isNamespaceAware()) {
    String xsiPrefix=null;
    boolean generated=false;
    xsiPrefix=row.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (xsiPrefix == null) {
      xsiPrefix=xmlDescriptor.getNonNullNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
      generated=true;
      writeNamespace(row,xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL,addToNamespaceResolver);
    }
    xmlField=(XMLField)xmlDescriptor.buildField(XMLConstants.ATTRIBUTE + xsiPrefix + XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (generated) {
      xmlField.getLastXPathFragment().setGeneratedPrefix(true);
    }
  }
 else {
    xmlField=(XMLField)xmlDescriptor.buildField(XMLConstants.ATTRIBUTE + XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
  }
  xmlField.getLastXPathFragment().setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  row.add(xmlField,typeValue);
}","protected void writeXsiTypeAttribute(XMLRecord row,String typeValue,boolean addToNamespaceResolver){
  XMLField xmlField=null;
  if (row.isNamespaceAware()) {
    String xsiPrefix=null;
    boolean generated=false;
    xsiPrefix=row.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (xsiPrefix == null) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      generated=true;
      writeNamespace(row,xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL,addToNamespaceResolver);
    }
    xmlField=new XMLField(XMLConstants.ATTRIBUTE + xsiPrefix + XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (generated) {
      xmlField.getLastXPathFragment().setGeneratedPrefix(true);
    }
  }
 else {
    xmlField=new XMLField(XMLConstants.ATTRIBUTE + XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
  }
  xmlField.getLastXPathFragment().setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  row.add(xmlField,typeValue);
}"
65281,"/** 
 * Ensure that using unmarshal(XMLStreamReader, Class) works in a Dynamic context. Create a dummy Descriptor with a concrete Java class, add it to the session, and then try to unmarshal using that class.  An empty instance of that concrete class should be returned.
 */
public void testUnmarshalWithClass() throws Exception {
  ClassLoader classLoader=this.getClass().getClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(OXM_METADATA);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  DynamicJAXBContext jc=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  Unmarshaller unmarshaller=jc.createUnmarshaller();
  InputStream xmlStream=classLoader.getResourceAsStream(XML_RESOURCE_BEFORE);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  Document xsdDocument=docFactory.newDocumentBuilder().parse(xmlStream);
  Source domSource=new DOMSource(xsdDocument);
  XMLDescriptor dummy=new XMLDescriptor();
  dummy.setJavaClass(javax.swing.JLabel.class);
  jc.getXMLContext().getSession(0).addDescriptor(dummy);
  Object o=unmarshaller.unmarshal(domSource,javax.swing.JLabel.class);
  JAXBElement jelem=(JAXBElement)o;
  assertEquals(javax.swing.JLabel.class,jelem.getValue().getClass());
}","/** 
 * Ensure that using unmarshal(XMLStreamReader, Class) works in a Dynamic context. Create a dummy Descriptor with a concrete Java class, add it to the session, and then try to unmarshal using that class.  An empty instance of that concrete class should be returned.
 */
public void testUnmarshalWithClass() throws Exception {
  ClassLoader classLoader=this.getClass().getClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(OXM_METADATA);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,iStream);
  DynamicJAXBContext jc=DynamicJAXBContextFactory.createContextFromOXM(classLoader,properties);
  Unmarshaller unmarshaller=jc.createUnmarshaller();
  InputStream xmlStream=classLoader.getResourceAsStream(XML_RESOURCE_BEFORE);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  Document xsdDocument=docFactory.newDocumentBuilder().parse(xmlStream);
  Source domSource=new DOMSource(xsdDocument);
  XMLDescriptor dummy=new XMLDescriptor();
  dummy.setJavaClass(org.eclipse.persistence.testing.jaxb.employee.Employee.class);
  jc.getXMLContext().getSession(0).addDescriptor(dummy);
  Object o=unmarshaller.unmarshal(domSource,org.eclipse.persistence.testing.jaxb.employee.Employee.class);
  JAXBElement jelem=(JAXBElement)o;
  assertEquals(org.eclipse.persistence.testing.jaxb.employee.Employee.class,jelem.getValue().getClass());
}"
65282,"public JSONFormattedWriterRecord(){
  numberOfTabs=1;
  complexType=true;
  isLastEventText=false;
}","public JSONFormattedWriterRecord(){
  numberOfTabs=1;
  complexType=true;
  isLastEventText=false;
  space=""String_Node_Str"";
}"
65283,"/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position != null && position.needToOpenComplex) {
        writer.write('{');
        position.needToOpenComplex=false;
        position.needToCloseComplex=true;
      }
      writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
          position.setEmptyCollection(false);
        }
 else {
          writer.write('[');
          position.setEmptyCollection(false);
        }
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position != null && position.needToOpenComplex) {
        writer.write('{');
        position.needToOpenComplex=false;
        position.needToCloseComplex=true;
      }
      writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
          position.setEmptyCollection(false);
        }
 else {
          writer.write('[');
          position.setEmptyCollection(false);
        }
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65284,"public JSONWriterRecord(){
  super();
  namespaceSeparator=XMLConstants.DOT;
}","public JSONWriterRecord(){
  super();
  space=XMLConstants.EMPTY_STRING;
  namespaceSeparator=XMLConstants.DOT;
}"
65285,"protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.write(attributePrefix);
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.write(getNamespaceSeparator());
      }
    }
  }
  writer.write(xPathFragment.getLocalName());
  writer.write(""String_Node_Str"");
}","protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.write(attributePrefix);
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.write(getNamespaceSeparator());
      }
    }
  }
  writer.write(xPathFragment.getLocalName());
  writer.write(""String_Node_Str"");
  writer.write(space);
  writer.write(XMLConstants.COLON);
  writer.write(space);
}"
65286,"public void setup(){
  getAbstractSession().beginTransaction();
  postalCode=""String_Node_Str"";
  UnitOfWork uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.registerObject(new Address());
  uow.assignSequenceNumber(address);
  address.setPostalCode(postalCode);
  address.setCity(""String_Node_Str"");
  address.setCountry(""String_Node_Str"");
  uow.commit();
  getAbstractSession().commitTransaction();
  originalAddress=address;
}","public void setup(){
  if (!isSequenceNumberEnabled()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  getAbstractSession().beginTransaction();
  postalCode=""String_Node_Str"";
  UnitOfWork uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.registerObject(new Address());
  uow.assignSequenceNumber(address);
  address.setPostalCode(postalCode);
  address.setCity(""String_Node_Str"");
  address.setCountry(""String_Node_Str"");
  uow.commit();
  getAbstractSession().commitTransaction();
  originalAddress=address;
}"
65287,"public void reset(){
  UnitOfWork deleteUOW=getSession().acquireUnitOfWork();
  deleteUOW.deleteObject(deleteUOW.readObject(originalAddress));
  deleteUOW.deleteObject(deleteUOW.readObject(originalEmployee));
  deleteUOW.commit();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}","public void reset(){
  if (!isSequenceNumberEnabled()) {
    return;
  }
  UnitOfWork deleteUOW=getSession().acquireUnitOfWork();
  deleteUOW.deleteObject(deleteUOW.readObject(originalAddress));
  deleteUOW.deleteObject(deleteUOW.readObject(originalEmployee));
  deleteUOW.commit();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}"
65288,"/** 
 * Removed.  Requires a JSON parsing feature to detect incorrect data
 * @Test public void testCreateWrongType(){ WebResource webResource = client.resource(SERVER_URI + DEFAULT_PU + ""/entity/"" + ""StaticUser""); ByteArrayOutputStream os = new ByteArrayOutputStream(); try{ context.marshallEntity(new StaticBid(), MediaType.APPLICATION_JSON_TYPE, os);        } catch (JAXBException e){ fail(""Exception thrown unmarshalling: "" + e); } ClientResponse response = webResource.type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class, os.toString()); Status status = response.getClientResponseStatus(); assertTrue(""Wrong exception thrown for non-existant object read."", status.equals(Status.NOT_FOUND)); }
 */
@Test public void testCreateGarbage(){
  WebResource webResource=client.resource(SERVER_URI + DEFAULT_PU + ""String_Node_Str""+ ""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  byte[] b=""String_Node_Str"".getBytes();
  try {
    os.write(b);
  }
 catch (  IOException e) {
    fail(""String_Node_Str"" + e);
  }
  ClientResponse response=webResource.type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class,os.toString());
  Status status=response.getClientResponseStatus();
  assertTrue(""String_Node_Str"" + status,status.equals(Status.INTERNAL_SERVER_ERROR));
}","/** 
 * Removed.  Requires a JSON parsing feature to detect incorrect data
 * @Test public void testCreateWrongType(){ WebResource webResource = client.resource(SERVER_URI + DEFAULT_PU + ""/entity/"" + ""StaticUser""); ByteArrayOutputStream os = new ByteArrayOutputStream(); try{ context.marshallEntity(new StaticBid(), MediaType.APPLICATION_JSON_TYPE, os);        } catch (JAXBException e){ fail(""Exception thrown unmarshalling: "" + e); } ClientResponse response = webResource.type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class, os.toString()); Status status = response.getClientResponseStatus(); assertTrue(""Wrong exception thrown for non-existant object read."", status.equals(Status.NOT_FOUND)); }
 */
@Test public void testCreateGarbage(){
  WebResource webResource=client.resource(SERVER_URI + DEFAULT_PU + ""String_Node_Str""+ ""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  byte[] b=""String_Node_Str"".getBytes();
  try {
    os.write(b);
  }
 catch (  IOException e) {
    fail(""String_Node_Str"" + e);
  }
  ClientResponse response=webResource.type(MediaType.APPLICATION_JSON_TYPE).accept(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class,os.toString());
  Status status=response.getClientResponseStatus();
  assertTrue(""String_Node_Str"" + status,status.equals(Status.BAD_REQUEST));
}"
65289,"@BeforeClass public static void setup(){
  Map<String,Object> properties=new HashMap<String,Object>();
  ExamplePropertiesLoader.loadProperties(properties);
  properties.put(PersistenceUnitProperties.NON_JTA_DATASOURCE,null);
  properties.put(PersistenceUnitProperties.DDL_GENERATION,PersistenceUnitProperties.DROP_AND_CREATE);
  PersistenceFactory factory=new PersistenceFactory();
  factory.setMetadataStore(new DatabaseMetadataStore());
  factory.getMetadataStore().setProperties(properties);
  factory.getMetadataStore().clearMetadata();
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(DEFAULT_PU,properties);
  try {
    context=factory.bootstrapPersistenceContext(""String_Node_Str"",emf,new URI(""String_Node_Str""),false);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  populateDB(emf);
  client=Client.create();
}","@BeforeClass public static void setup(){
  Map<String,Object> properties=new HashMap<String,Object>();
  ExamplePropertiesLoader.loadProperties(properties);
  properties.put(PersistenceUnitProperties.NON_JTA_DATASOURCE,null);
  properties.put(PersistenceUnitProperties.JTA_DATASOURCE,null);
  properties.put(PersistenceUnitProperties.DDL_GENERATION,PersistenceUnitProperties.DROP_AND_CREATE);
  PersistenceFactory factory=new PersistenceFactory();
  factory.setMetadataStore(new DatabaseMetadataStore());
  factory.getMetadataStore().setProperties(properties);
  factory.getMetadataStore().clearMetadata();
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(DEFAULT_PU,properties);
  try {
    context=factory.bootstrapPersistenceContext(""String_Node_Str"",emf,new URI(""String_Node_Str""),false);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  populateDB(emf);
  client=Client.create();
}"
65290,"public void test(){
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  UnitOfWork rootUOW=getSession().acquireUnitOfWork();
  Address addressRO=(Address)getSession().readObject(Address.class,new ExpressionBuilder().get(""String_Node_Str"").equal(postalCode));
  if (addressRO == null) {
    throw new TestErrorException(""String_Node_Str"");
  }
  UnitOfWork nestedUOW=rootUOW.acquireUnitOfWork();
  nestedUOW.addReadOnlyClass(Address.class);
  Employee emp=(Employee)nestedUOW.registerObject(new Employee());
  emp.setFirstName(""String_Node_Str"");
  emp.setAddress(addressRO);
  nestedUOW.commit();
  rootUOW.commit();
}","public void test(){
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
  UnitOfWork rootUOW=getSession().acquireUnitOfWork();
  Address addressRO=(Address)getSession().readObject(Address.class,new ExpressionBuilder().get(""String_Node_Str"").equal(postalCode));
  if (addressRO == null) {
    throw new TestErrorException(""String_Node_Str"");
  }
  UnitOfWork nestedUOW=rootUOW.acquireUnitOfWork();
  nestedUOW.addReadOnlyClass(Address.class);
  Employee emp=(Employee)nestedUOW.registerObject(new Employee());
  nestedUOW.assignSequenceNumber(emp);
  emp.setFirstName(""String_Node_Str"");
  emp.setAddress(addressRO);
  nestedUOW.commit();
  rootUOW.commit();
  originalEmployee=emp;
}"
65291,"public void setup(){
  getAbstractSession().beginTransaction();
  postalCode=""String_Node_Str"";
  UnitOfWork uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.registerObject(new Address());
  address.setPostalCode(postalCode);
  address.setCity(""String_Node_Str"");
  address.setCountry(""String_Node_Str"");
  uow.commit();
  getAbstractSession().commitTransaction();
}","public void setup(){
  getAbstractSession().beginTransaction();
  postalCode=""String_Node_Str"";
  UnitOfWork uow=getSession().acquireUnitOfWork();
  Address address=(Address)uow.registerObject(new Address());
  uow.assignSequenceNumber(address);
  address.setPostalCode(postalCode);
  address.setCity(""String_Node_Str"");
  address.setCountry(""String_Node_Str"");
  uow.commit();
  getAbstractSession().commitTransaction();
  originalAddress=address;
}"
65292,"public void reset(){
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}","public void reset(){
  UnitOfWork deleteUOW=getSession().acquireUnitOfWork();
  deleteUOW.deleteObject(deleteUOW.readObject(originalAddress));
  deleteUOW.deleteObject(deleteUOW.readObject(originalEmployee));
  deleteUOW.commit();
  getSession().getIdentityMapAccessor().initializeAllIdentityMaps();
}"
65293,"/** 
 * {@inheritDoc}
 */
@Override protected AbstractSemanticValidator buildValidator(){
  return new DefaultSemanticValidator(buildSemanticValidatorHelper());
}","/** 
 * {@inheritDoc}
 */
@Override protected abstract AbstractSemanticValidator buildValidator();"
65294,"/** 
 * Validates the given   {@link StateFieldPathExpression}.
 * @param expression The {@link StateFieldPathExpression} the validate
 * @param associationFieldValid Determines whether an association field is a valid type
 * @return <code>true</code> if the given {@link StateFieldPathExpression} resolves to a validpath; <code>false</code> otherwise
 */
protected boolean validateStateFieldPathExpression(StateFieldPathExpression expression,boolean associationFieldValid){
  boolean valid=true;
  expression.getIdentificationVariable().accept(this);
  if (expression.hasIdentificationVariable() && !expression.endsWithDot()) {
    Object mapping=helper.resolveMapping(expression);
    if (mapping != null) {
      if (helper.isCollectionMapping(mapping)) {
        addProblem(expression,StateFieldPathExpression_CollectionType,expression.toParsedText());
        valid=false;
      }
 else       if (!associationFieldValid && helper.isRelationshipMapping(mapping)) {
        addProblem(expression,StateFieldPathExpression_AssociationField,expression.toParsedText());
        valid=false;
      }
 else       if (helper.isTransient(mapping)) {
        addProblem(expression,StateFieldPathExpression_NoMapping,expression.toParsedText());
        valid=false;
      }
    }
 else {
      Object type=helper.getType(expression);
      if (!helper.isTypeResolvable(type)) {
        addProblem(expression,StateFieldPathExpression_NotResolvable,expression.toParsedText());
        valid=false;
      }
 else       if (helper.isEnumType(type)) {
        String enumConstant=expression.getPath(expression.pathSize() - 1);
        boolean found=false;
        for (        String constant : helper.getEnumConstants(type)) {
          if (constant.equals(enumConstant)) {
            found=true;
            break;
          }
        }
        if (!found) {
          int startIndex=position(expression) + helper.getTypeName(type).length() + 1;
          int endIndex=startIndex + enumConstant.length();
          addProblem(expression,startIndex,endIndex,StateFieldPathExpression_InvalidEnumConstant,enumConstant);
          valid=false;
        }
        usedIdentificationVariables.remove(expression.getIdentificationVariable());
      }
 else {
        addProblem(expression,StateFieldPathExpression_NoMapping,expression.toParsedText());
        valid=false;
      }
    }
  }
  return valid;
}","/** 
 * Validates the given   {@link StateFieldPathExpression}.
 * @param expression The {@link StateFieldPathExpression} the validate
 * @param associationFieldValid Determines whether an association field is a valid type
 * @return <code>true</code> if the given {@link StateFieldPathExpression} resolves to a validpath; <code>false</code> otherwise
 */
protected boolean validateStateFieldPathExpression(StateFieldPathExpression expression,PathType pathType){
  boolean valid=true;
  expression.getIdentificationVariable().accept(this);
  if (expression.hasIdentificationVariable() && !expression.endsWithDot()) {
    Object mapping=helper.resolveMapping(expression);
    if (mapping != null) {
      if (helper.isCollectionMapping(mapping)) {
        if (pathType != PathType.ANY_FIELD_INCLUDING_COLLECTION) {
          addProblem(expression,StateFieldPathExpression_CollectionType,expression.toActualText());
          valid=false;
        }
      }
 else       if (helper.isTransient(mapping)) {
        addProblem(expression,StateFieldPathExpression_NoMapping,expression.toParsedText());
        valid=false;
      }
 else       if ((pathType == PathType.BASIC_FIELD_ONLY) && !helper.isPropertyMapping(mapping)) {
        addProblem(expression,StateFieldPathExpression_AssociationField,expression.toActualText());
        valid=false;
      }
    }
 else {
      Object type=helper.getType(expression);
      if (!helper.isTypeResolvable(type)) {
        addProblem(expression,StateFieldPathExpression_NotResolvable,expression.toParsedText());
        valid=false;
      }
 else       if (helper.isEnumType(type)) {
        String enumConstant=expression.getPath(expression.pathSize() - 1);
        boolean found=false;
        for (        String constant : helper.getEnumConstants(type)) {
          if (constant.equals(enumConstant)) {
            found=true;
            break;
          }
        }
        if (!found) {
          int startIndex=position(expression) + helper.getTypeName(type).length() + 1;
          int endIndex=startIndex + enumConstant.length();
          addProblem(expression,startIndex,endIndex,StateFieldPathExpression_InvalidEnumConstant,enumConstant);
          valid=false;
        }
        usedIdentificationVariables.remove(expression.getIdentificationVariable());
      }
 else {
        addProblem(expression,StateFieldPathExpression_NoMapping,expression.toParsedText());
        valid=false;
      }
    }
  }
  return valid;
}"
65295,"/** 
 * Validates the given   {@link validateSelectClause}. The default behavior does not require to semantically validate it.
 * @param expression The {@link validateSelectClause} to validate
 */
protected void validateSelectClause(SelectClause expression){
  super.visit(expression);
}","/** 
 * Validates the given   {@link validateSelectClause}. The default behavior does not require to semantically validate it.
 * @param expression The {@link validateSelectClause} to validate
 */
protected void validateSelectClause(SelectClause expression){
  Expression selectExpression=expression.getSelectExpression();
  StateFieldPathExpression pathExpression=getStateFieldPathExpression(selectExpression);
  if (pathExpression != null) {
    validateStateFieldPathExpression(pathExpression,selectClausePathExpressionPathType());
  }
 else {
    selectExpression.accept(this);
  }
}"
65296,"/** 
 * Validates the encapsulated expression of the given <code><b>SUBSTRING</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link SubstringExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateSubstringExpression(SubstringExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  expression.getThirdExpression().accept(this);
  return result;
}","/** 
 * Validates the encapsulated expression of the given <code><b>SUBSTRING</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link SubstringExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateSubstringExpression(SubstringExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,PathType.BASIC_FIELD_ONLY);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  expression.getThirdExpression().accept(this);
  return result;
}"
65297,"/** 
 * Validates the encapsulated expression of the given <code><b>LOCATE</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link LocateExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateLocateExpression(LocateExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  expression.getThirdExpression().accept(this);
  return result;
}","/** 
 * Validates the encapsulated expression of the given <code><b>LOCATE</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link LocateExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateLocateExpression(LocateExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,PathType.BASIC_FIELD_ONLY);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  expression.getThirdExpression().accept(this);
  return result;
}"
65298,"/** 
 * Validates the arithmetic factor expression. The test to perform is: <ul> <li>If the arithmetic factor is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link ArithmeticFactor} to validate
 * @return <code>false</code> if the arithmetic factor expression was validated and is invalid;<code>true</code> otherwise
 */
protected boolean validateArithmeticExpression(ArithmeticFactor expression){
  boolean valid=true;
  if (expression.hasExpression()) {
    Expression factor=expression.getExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(factor);
    if (pathExpression != null) {
      valid=validateStateFieldPathExpression(pathExpression,false);
    }
 else {
      factor.accept(this);
    }
  }
  return valid;
}","/** 
 * Validates the arithmetic factor expression. The test to perform is: <ul> <li>If the arithmetic factor is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link ArithmeticFactor} to validate
 * @return <code>false</code> if the arithmetic factor expression was validated and is invalid;<code>true</code> otherwise
 */
protected boolean validateArithmeticExpression(ArithmeticFactor expression){
  boolean valid=true;
  if (expression.hasExpression()) {
    Expression factor=expression.getExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(factor);
    if (pathExpression != null) {
      valid=validateStateFieldPathExpression(pathExpression,PathType.BASIC_FIELD_ONLY);
    }
 else {
      factor.accept(this);
    }
  }
  return valid;
}"
65299,"/** 
 * Validates the left and right expressions of the given comparison expression. The test to perform is: <ul> <li>If left or the right expressions are compared with [<, <=, >, >=] and it is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link ConcatExpression} to validate by validating its left and rightexpressions
 * @return A number indicating the validation result:<ul> <li>0: Both expressions are valid or were not validated;</li> <li>1: Only the left expression is invalid;</li> <li>2: Only the right expression is invalid;</li> <li>3: Both expressions are invalid.</li> </ul>
 */
protected int validateComparisonExpression(ComparisonExpression expression){
  int result=0;
  if (expression.hasLeftExpression() && expression.hasRightExpression()) {
    String comparison=expression.getComparisonOperator();
    if (comparison == Expression.LOWER_THAN || comparison == Expression.GREATER_THAN || comparison == Expression.LOWER_THAN_OR_EQUAL || comparison == Expression.GREATER_THAN_OR_EQUAL) {
      result=validateFunctionPathExpression(expression);
    }
  }
  if (isValid(result,0)) {
    expression.getLeftExpression().accept(this);
  }
  if (isValid(result,1)) {
    expression.getRightExpression().accept(this);
  }
  return result;
}","/** 
 * Validates the left and right expressions of the given comparison expression. The test to perform is: <ul> <li>If left or the right expressions are compared with [<, <=, >, >=] and it is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link ConcatExpression} to validate by validating its left and rightexpressions
 * @return A number indicating the validation result:<ul> <li>0: Both expressions are valid or were not validated;</li> <li>1: Only the left expression is invalid;</li> <li>2: Only the right expression is invalid;</li> <li>3: Both expressions are invalid.</li> </ul>
 */
protected int validateComparisonExpression(ComparisonExpression expression){
  int result=0;
  if (expression.hasLeftExpression() && expression.hasRightExpression()) {
    String comparison=expression.getComparisonOperator();
    if (comparison == Expression.LOWER_THAN || comparison == Expression.GREATER_THAN || comparison == Expression.LOWER_THAN_OR_EQUAL || comparison == Expression.GREATER_THAN_OR_EQUAL) {
      result=validateFunctionPathExpression(expression,PathType.ANY_FIELD);
    }
  }
  if (isValid(result,0)) {
    expression.getLeftExpression().accept(this);
  }
  if (isValid(result,1)) {
    expression.getRightExpression().accept(this);
  }
  return result;
}"
65300,"/** 
 * Validates the string expression of the given <code><b>LIKE</b></code> expression. The test to perform is: <ul> <li>If the string expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link LengthExpression} to validate by validating its string expression
 * @return <code>false</code> if the encapsulated expression was validated and is invalid;<code>true</code> otherwise
 */
protected int validateLikeExpression(LikeExpression expression){
  int result=0;
  if (expression.hasStringExpression()) {
    Expression stringExpression=expression.getStringExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(stringExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,0,valid);
    }
 else {
      stringExpression.accept(this);
    }
  }
  expression.getPatternValue().accept(this);
  expression.getEscapeCharacter().accept(this);
  return result;
}","/** 
 * Validates the string expression of the given <code><b>LIKE</b></code> expression. The test to perform is: <ul> <li>If the string expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link LengthExpression} to validate by validating its string expression
 * @return <code>false</code> if the encapsulated expression was validated and is invalid;<code>true</code> otherwise
 */
protected int validateLikeExpression(LikeExpression expression){
  int result=0;
  if (expression.hasStringExpression()) {
    Expression stringExpression=expression.getStringExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(stringExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,PathType.BASIC_FIELD_ONLY);
      updateStatus(result,0,valid);
    }
 else {
      stringExpression.accept(this);
    }
  }
  expression.getPatternValue().accept(this);
  expression.getEscapeCharacter().accept(this);
  return result;
}"
65301,"/** 
 * Validates the given   {@link CollectionMemberExpression}. Only the collection-valued path expression is validated.
 * @param expression The {@link CollectionMemberExpression} to validate
 * @return TODO
 */
protected int validateCollectionMemberExpression(CollectionMemberExpression expression){
  int result=0;
  if (expression.hasEntityExpression()) {
    Expression entityExpression=expression.getEntityExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(entityExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,true);
      updateStatus(result,0,valid);
    }
 else {
      entityExpression.accept(this);
    }
  }
  boolean valid=validateCollectionValuedPathExpression(expression.getCollectionValuedPathExpression(),true);
  updateStatus(result,1,valid);
  return result;
}","/** 
 * Validates the given   {@link CollectionMemberExpression}. Only the collection-valued path expression is validated.
 * @param expression The {@link CollectionMemberExpression} to validate
 * @return TODO
 */
protected int validateCollectionMemberExpression(CollectionMemberExpression expression){
  int result=0;
  if (expression.hasEntityExpression()) {
    Expression entityExpression=expression.getEntityExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(entityExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,PathType.ASSOCIATION_FIELD_ONLY);
      updateStatus(result,0,valid);
    }
 else {
      entityExpression.accept(this);
    }
  }
  boolean valid=validateCollectionValuedPathExpression(expression.getCollectionValuedPathExpression(),true);
  updateStatus(result,1,valid);
  return result;
}"
65302,"/** 
 * Validates the left and right expressions of the given compound expression. The test to perform is: <ul> <li>If the left or the right expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link CompoundExpression} to validate by validating its left and rightexpressions
 * @return A number indicating the validation result:<ul> <li>0: Both expressions are valid or were not validated;</li> <li>1: Only the left expression is invalid;</li> <li>2: Only the right expression is invalid;</li> <li>3: Both expressions are invalid.</li> </ul>
 */
protected int validateFunctionPathExpression(CompoundExpression expression){
  int result=0;
  if (expression.hasLeftExpression()) {
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(expression.getLeftExpression());
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,0,valid);
    }
  }
  if (expression.hasRightExpression()) {
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(expression.getRightExpression());
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,1,valid);
    }
  }
  return result;
}","/** 
 * Validates the left and right expressions of the given compound expression. The test to perform is: <ul> <li>If the left or the right expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> </ul>
 * @param expression The {@link CompoundExpression} to validate by validating its left and rightexpressions
 * @return A number indicating the validation result:<ul> <li>0: Both expressions are valid or were not validated;</li> <li>1: Only the left expression is invalid;</li> <li>2: Only the right expression is invalid;</li> <li>3: Both expressions are invalid.</li> </ul>
 */
protected int validateFunctionPathExpression(CompoundExpression expression,PathType pathType){
  int result=0;
  if (expression.hasLeftExpression()) {
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(expression.getLeftExpression());
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,pathType);
      updateStatus(result,0,valid);
    }
  }
  if (expression.hasRightExpression()) {
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(expression.getRightExpression());
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,pathType);
      updateStatus(result,1,valid);
    }
  }
  return result;
}"
65303,"/** 
 * Validates the encapsulated expression of the given <code><b>MOD</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link ModExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateModExpression(ModExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,false);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  return result;
}","/** 
 * Validates the encapsulated expression of the given <code><b>MOD</b></code> expression. The test to perform is: <ul> <li>If the encapsulated expression is a path expression, validation makes sure it is a basic mapping, an association field is not allowed.</li> <li>If the encapsulated expression is not a path expression, validation will be redirected to that expression but the returned status will not be changed.</li> </ul>
 * @param expression The {@link ModExpression} to validate by validating its encapsulated expression
 * @return TODO
 */
protected int validateModExpression(ModExpression expression){
  int result=0;
  if (expression.hasFirstExpression()) {
    Expression firstExpression=expression.getFirstExpression();
    StateFieldPathExpression pathExpression=getStateFieldPathExpression(firstExpression);
    if (pathExpression != null) {
      boolean valid=validateStateFieldPathExpression(pathExpression,PathType.BASIC_FIELD_ONLY);
      updateStatus(result,0,valid);
    }
 else {
      firstExpression.accept(this);
    }
  }
  expression.getSecondExpression().accept(this);
  return result;
}"
65304,"/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(XMLConstants.URI,XMLConstants.STRING_QNAME);
  return javaTypes;
}","/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(XMLConstants.URI,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.URL_Class,XMLConstants.ANY_URI_QNAME);
  return javaTypes;
}"
65305,"public void testSchemaGenTransient() throws Exception {
  JAXBException e=null;
  try {
    JAXBContext jaxbContext=JAXBContext.newInstance(TransientCar.class,Mazda.class);
  }
 catch (  javax.xml.bind.JAXBException ex) {
    e=(JAXBException)ex.getCause();
    assertTrue(""String_Node_Str"" + ex.getMessage(),e.getErrorCode() == JAXBException.DUPLICATE_PROPERTY_NAME);
  }
  if (e == null) {
    fail(""String_Node_Str"");
  }
}","public void testSchemaGenTransient() throws Exception {
  JAXBException e=null;
  try {
    JAXBContext jaxbContext=JAXBContext.newInstance(TransientCar.class,Mazda.class);
  }
 catch (  javax.xml.bind.JAXBException ex) {
    e=(JAXBException)ex.getCause();
    fail(""String_Node_Str"");
  }
}"
65306,"public ArrayList<Property> getPropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList<Property> returnList=new ArrayList<Property>();
  if (!info.isTransient()) {
    JavaClass superClass=cls.getSuperclass();
    if (null != superClass) {
      TypeInfo superClassInfo=typeInfo.get(superClass.getQualifiedName());
      while (superClassInfo != null && superClassInfo.isTransient()) {
        if (info.getXmlAccessType() == XmlAccessType.FIELD) {
          returnList.addAll(0,getFieldPropertiesForClass(superClass,superClassInfo,false));
        }
 else         if (info.getXmlAccessType() == XmlAccessType.PROPERTY) {
          returnList.addAll(0,getPropertyPropertiesForClass(superClass,superClassInfo,false));
        }
 else         if (info.getXmlAccessType() == XmlAccessType.PUBLIC_MEMBER) {
          returnList.addAll(0,getPublicMemberPropertiesForClass(superClass,superClassInfo));
        }
 else {
          returnList.addAll(0,getNoAccessTypePropertiesForClass(superClass,superClassInfo));
        }
        superClass=superClass.getSuperclass();
        superClassInfo=typeInfo.get(superClass.getQualifiedName());
      }
    }
  }
  if (info.isTransient()) {
    returnList.addAll(getNoAccessTypePropertiesForClass(cls,info));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.FIELD) {
    returnList.addAll(getFieldPropertiesForClass(cls,info,false));
    returnList.addAll(getPropertyPropertiesForClass(cls,info,false,true));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.PROPERTY) {
    returnList.addAll(getFieldPropertiesForClass(cls,info,false,true));
    returnList.addAll(getPropertyPropertiesForClass(cls,info,false));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.PUBLIC_MEMBER) {
    returnList.addAll(getPublicMemberPropertiesForClass(cls,info));
  }
 else {
    returnList.addAll(getNoAccessTypePropertiesForClass(cls,info));
  }
  return returnList;
}","public ArrayList<Property> getPropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList<Property> returnList=new ArrayList<Property>();
  if (!info.isTransient()) {
    JavaClass superClass=cls.getSuperclass();
    if (null != superClass) {
      TypeInfo superClassInfo=typeInfo.get(superClass.getQualifiedName());
      ArrayList<Property> superClassProperties;
      while (superClassInfo != null && superClassInfo.isTransient()) {
        if (info.getXmlAccessType() == XmlAccessType.FIELD) {
          superClassProperties=getFieldPropertiesForClass(superClass,superClassInfo,false);
        }
 else         if (info.getXmlAccessType() == XmlAccessType.PROPERTY) {
          superClassProperties=getPropertyPropertiesForClass(superClass,superClassInfo,false);
        }
 else         if (info.getXmlAccessType() == XmlAccessType.PUBLIC_MEMBER) {
          superClassProperties=getPublicMemberPropertiesForClass(superClass,superClassInfo);
        }
 else {
          superClassProperties=getNoAccessTypePropertiesForClass(superClass,superClassInfo);
        }
        superClass=superClass.getSuperclass();
        superClassInfo=typeInfo.get(superClass.getQualifiedName());
        for (        Property next : superClassProperties) {
          next.setIsSuperClassProperty(true);
        }
        returnList.addAll(0,superClassProperties);
      }
    }
  }
  if (info.isTransient()) {
    returnList.addAll(getNoAccessTypePropertiesForClass(cls,info));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.FIELD) {
    returnList.addAll(getFieldPropertiesForClass(cls,info,false));
    returnList.addAll(getPropertyPropertiesForClass(cls,info,false,true));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.PROPERTY) {
    returnList.addAll(getFieldPropertiesForClass(cls,info,false,true));
    returnList.addAll(getPropertyPropertiesForClass(cls,info,false));
  }
 else   if (info.getXmlAccessType() == XmlAccessType.PUBLIC_MEMBER) {
    returnList.addAll(getPublicMemberPropertiesForClass(cls,info));
  }
 else {
    returnList.addAll(getNoAccessTypePropertiesForClass(cls,info));
  }
  return returnList;
}"
65307,"/** 
 * Put a Property in the Map of Properties for this TypeInfo. Here, the original property is put in the originalProperties map, the  properties map, and the propertyList list.  It is assumed that the originalProperties map will remain unchanged during processing.
 */
public void addProperty(String name,Property property){
  if (originalProperties.get(name) != null) {
    Property existingProperty=originalProperties.get(name);
    if (existingProperty.isTransient() && property.isTransient()) {
      if (this.getXmlAccessType().equals(XmlAccessType.FIELD)) {
        if (!property.isMethodProperty()) {
          propertyList.remove(existingProperty);
        }
 else {
          return;
        }
      }
 else {
        if (property.isMethodProperty()) {
          propertyList.remove(existingProperty);
        }
 else {
          return;
        }
      }
    }
 else     if (existingProperty.isTransient()) {
      propertyList.remove(existingProperty);
    }
 else     if (property.isTransient()) {
      return;
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.duplicatePropertyName(name,this.getJavaClassName());
    }
  }
  originalProperties.put(name,property);
  properties.put(name,property);
  propertyNames.add(name);
  propertyList.add(property);
}","/** 
 * Put a Property in the Map of Properties for this TypeInfo. Here, the original property is put in the originalProperties map, the  properties map, and the propertyList list.  It is assumed that the originalProperties map will remain unchanged during processing.
 */
public void addProperty(String name,Property property){
  if (originalProperties.get(name) != null) {
    Property existingProperty=originalProperties.get(name);
    if (existingProperty.isTransient() && property.isTransient()) {
      if (this.getXmlAccessType().equals(XmlAccessType.FIELD)) {
        if (!property.isMethodProperty()) {
          propertyList.remove(existingProperty);
          propertyNames.remove(name);
        }
 else {
          return;
        }
      }
 else {
        if (property.isMethodProperty()) {
          propertyList.remove(existingProperty);
          propertyNames.remove(name);
        }
 else {
          return;
        }
      }
    }
 else     if (existingProperty.isTransient() || existingProperty.isSuperClassProperty()) {
      propertyList.remove(existingProperty);
      propertyNames.remove(name);
    }
 else     if (property.isTransient()) {
      return;
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.duplicatePropertyName(name,this.getJavaClassName());
    }
  }
  originalProperties.put(name,property);
  properties.put(name,property);
  propertyNames.add(name);
  propertyList.add(property);
}"
65308,"/** 
 * This method will append the union clause to the end of the select statement.
 */
public void appendUnionClauseToWriter(ExpressionSQLPrinter printer) throws IOException {
  if (!hasUnionExpressions()) {
    return;
  }
  for (Iterator expressionsEnum=getUnionExpressions().iterator(); expressionsEnum.hasNext(); ) {
    Expression expression=(Expression)expressionsEnum.next();
    printer.getWriter().write(""String_Node_Str"");
    expression.printSQL(printer);
  }
}","/** 
 * This method will append the union clause to the end of the select statement.
 */
public void appendUnionClauseToWriter(ExpressionSQLPrinter printer) throws IOException {
  if (!hasUnionExpressions()) {
    return;
  }
  for (Iterator expressionsEnum=getUnionExpressions().iterator(); expressionsEnum.hasNext(); ) {
    Expression expression=(Expression)expressionsEnum.next();
    printer.getWriter().write(""String_Node_Str"");
    expression.printSQL(printer);
    printer.printString(""String_Node_Str"");
  }
}"
65309,"/** 
 * Print the SQL representation of the statement on a stream.
 */
public Vector printSQL(ExpressionSQLPrinter printer){
  try {
    Vector selectFields=null;
    printer.setRequiresDistinct(shouldDistinctBeUsed());
    printer.printString(""String_Node_Str"");
    if (getHintString() != null) {
      printer.printString(getHintString());
      printer.printString(""String_Node_Str"");
    }
    if (shouldDistinctBeUsed()) {
      printer.printString(""String_Node_Str"");
    }
    selectFields=writeFieldsIn(printer);
    setUseUniqueFieldAliases(false);
    appendFromClauseToWriter(printer);
    if (!(getWhereClause() == null)) {
      printer.printString(""String_Node_Str"");
      printer.printExpression(getWhereClause());
    }
    if (hasHierarchicalQueryExpressions()) {
      appendHierarchicalQueryClauseToWriter(printer);
    }
    if (hasGroupByExpressions()) {
      appendGroupByClauseToWriter(printer);
    }
    if (hasHavingExpression()) {
      printer.printString(""String_Node_Str"");
      printer.printExpression(getHavingExpression());
    }
    if (hasOrderByExpressions()) {
      appendOrderClauseToWriter(printer);
    }
    if (printer.getPlatform().shouldPrintLockingClauseAfterWhereClause()) {
      if (getForUpdateClause() != null) {
        getForUpdateClause().printSQL(printer,this);
      }
    }
    if (hasUnionExpressions()) {
      appendUnionClauseToWriter(printer);
    }
    return selectFields;
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}","/** 
 * Print the SQL representation of the statement on a stream.
 */
public Vector printSQL(ExpressionSQLPrinter printer){
  try {
    Vector selectFields=null;
    printer.setRequiresDistinct(shouldDistinctBeUsed());
    if (hasUnionExpressions()) {
      int size=getUnionExpressions().size();
      for (int index=0; index < size; index++) {
        printer.printString(""String_Node_Str"");
      }
    }
    printer.printString(""String_Node_Str"");
    if (getHintString() != null) {
      printer.printString(getHintString());
      printer.printString(""String_Node_Str"");
    }
    if (shouldDistinctBeUsed()) {
      printer.printString(""String_Node_Str"");
    }
    selectFields=writeFieldsIn(printer);
    setUseUniqueFieldAliases(false);
    appendFromClauseToWriter(printer);
    if (!(getWhereClause() == null)) {
      printer.printString(""String_Node_Str"");
      printer.printExpression(getWhereClause());
    }
    if (hasHierarchicalQueryExpressions()) {
      appendHierarchicalQueryClauseToWriter(printer);
    }
    if (hasGroupByExpressions()) {
      appendGroupByClauseToWriter(printer);
    }
    if (hasHavingExpression()) {
      printer.printString(""String_Node_Str"");
      printer.printExpression(getHavingExpression());
    }
    if (hasOrderByExpressions()) {
      appendOrderClauseToWriter(printer);
    }
    if (printer.getPlatform().shouldPrintLockingClauseAfterWhereClause()) {
      if (getForUpdateClause() != null) {
        getForUpdateClause().printSQL(printer,this);
      }
    }
    if (hasUnionExpressions()) {
      appendUnionClauseToWriter(printer);
    }
    return selectFields;
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}"
65310,"/** 
 * INTERNAL: Return if the query is equal to the other. This is used to allow dynamic expression query SQL to be cached.
 */
@Override public boolean equals(Object object){
  if (this == object) {
    return true;
  }
  if ((object == null) || (!getClass().equals(object.getClass()))) {
    return false;
  }
  ObjectLevelReadQuery query=(ObjectLevelReadQuery)object;
  if ((!isExpressionQuery()) || (!isDefaultPropertiesQuery())) {
    return this == object;
  }
  if (!getExpressionBuilder().equals(query.getExpressionBuilder())) {
    return false;
  }
  if (hasJoining()) {
    if (!query.hasJoining()) {
      return false;
    }
    List joinedAttributes=getJoinedAttributeManager().getJoinedAttributeExpressions();
    List otherJoinedAttributes=query.getJoinedAttributeManager().getJoinedAttributeExpressions();
    int size=joinedAttributes.size();
    if (size != otherJoinedAttributes.size()) {
      return false;
    }
    for (int index=0; index < size; index++) {
      if (!joinedAttributes.get(index).equals(otherJoinedAttributes.get(index))) {
        return false;
      }
    }
  }
 else   if (query.hasJoining()) {
    return false;
  }
  if (hasOrderByExpressions()) {
    if (!query.hasOrderByExpressions()) {
      return false;
    }
    List orderBys=getOrderByExpressions();
    List otherOrderBys=query.getOrderByExpressions();
    int size=orderBys.size();
    if (size != otherOrderBys.size()) {
      return false;
    }
    for (int index=0; index < size; index++) {
      if (!orderBys.get(index).equals(otherOrderBys.get(index))) {
        return false;
      }
    }
  }
 else   if (query.hasOrderByExpressions()) {
    return false;
  }
  if (!((this.referenceClass == query.referenceClass) || ((this.referenceClass != null) && this.referenceClass.equals(query.referenceClass)))) {
    return false;
  }
  Expression selectionCriteria=getSelectionCriteria();
  Expression otherSelectionCriteria=query.getSelectionCriteria();
  return ((selectionCriteria == otherSelectionCriteria) || ((selectionCriteria != null) && selectionCriteria.equals(otherSelectionCriteria)));
}","/** 
 * INTERNAL: Return if the query is equal to the other. This is used to allow dynamic expression query SQL to be cached.
 */
@Override public boolean equals(Object object){
  if (this == object) {
    return true;
  }
  if ((object == null) || (!getClass().equals(object.getClass()))) {
    return false;
  }
  ObjectLevelReadQuery query=(ObjectLevelReadQuery)object;
  if ((!isExpressionQuery()) || (!isDefaultPropertiesQuery())) {
    return this == object;
  }
  if (!getExpressionBuilder().equals(query.getExpressionBuilder())) {
    return false;
  }
  if (this.distinctState != query.distinctState) {
    return false;
  }
  if (hasJoining()) {
    if (!query.hasJoining()) {
      return false;
    }
    List joinedAttributes=getJoinedAttributeManager().getJoinedAttributeExpressions();
    List otherJoinedAttributes=query.getJoinedAttributeManager().getJoinedAttributeExpressions();
    int size=joinedAttributes.size();
    if (size != otherJoinedAttributes.size()) {
      return false;
    }
    for (int index=0; index < size; index++) {
      if (!joinedAttributes.get(index).equals(otherJoinedAttributes.get(index))) {
        return false;
      }
    }
  }
 else   if (query.hasJoining()) {
    return false;
  }
  if (hasOrderByExpressions()) {
    if (!query.hasOrderByExpressions()) {
      return false;
    }
    List orderBys=getOrderByExpressions();
    List otherOrderBys=query.getOrderByExpressions();
    int size=orderBys.size();
    if (size != otherOrderBys.size()) {
      return false;
    }
    for (int index=0; index < size; index++) {
      if (!orderBys.get(index).equals(otherOrderBys.get(index))) {
        return false;
      }
    }
  }
 else   if (query.hasOrderByExpressions()) {
    return false;
  }
  if (!((this.referenceClass == query.referenceClass) || ((this.referenceClass != null) && this.referenceClass.equals(query.referenceClass)))) {
    return false;
  }
  Expression selectionCriteria=getSelectionCriteria();
  Expression otherSelectionCriteria=query.getSelectionCriteria();
  return ((selectionCriteria == otherSelectionCriteria) || ((selectionCriteria != null) && selectionCriteria.equals(otherSelectionCriteria)));
}"
65311,"/** 
 * INTERNAL: Return true if the query uses default properties. This is used to determine if this query is cacheable. i.e. does not use any properties that may conflict with another query with the same JPQL or selection criteria.
 */
@Override public boolean isDefaultPropertiesQuery(){
  return super.isDefaultPropertiesQuery() && (!this.isResultSetOptimizedQuery) && (isDefaultLock())&& (!isDistinctComputed())&& (!hasAdditionalFields())&& (!hasPartialAttributeExpressions())&& (!hasUnionExpressions())&& (!hasNonFetchJoinedAttributeExpressions())&& (this.fetchGroup == null)&& (this.fetchGroupName == null)&& (this.shouldUseDefaultFetchGroup);
}","/** 
 * INTERNAL: Return true if the query uses default properties. This is used to determine if this query is cacheable. i.e. does not use any properties that may conflict with another query with the same JPQL or selection criteria.
 */
@Override public boolean isDefaultPropertiesQuery(){
  return super.isDefaultPropertiesQuery() && (!this.isResultSetOptimizedQuery) && (isDefaultLock())&& (!hasAdditionalFields())&& (!hasPartialAttributeExpressions())&& (!hasUnionExpressions())&& (!hasNonFetchJoinedAttributeExpressions())&& (this.fetchGroup == null)&& (this.fetchGroupName == null)&& (this.shouldUseDefaultFetchGroup);
}"
65312,"/** 
 * INTERNAL: Copy all setting from the query. This is used to morph queries from one type to the other. By default this calls prepareFromQuery, but additional properties may be required to be copied as prepareFromQuery only copies properties that affect the SQL.
 */
@Override public void copyFromQuery(DatabaseQuery query){
  super.copyFromQuery(query);
  if (query.isObjectLevelReadQuery()) {
    ObjectLevelReadQuery readQuery=(ObjectLevelReadQuery)query;
    this.cacheUsage=readQuery.cacheUsage;
    this.isReadOnly=readQuery.isReadOnly;
    this.isResultSetOptimizedQuery=readQuery.isResultSetOptimizedQuery;
    this.shouldIncludeData=readQuery.shouldIncludeData;
    this.inMemoryQueryIndirectionPolicy=readQuery.inMemoryQueryIndirectionPolicy;
    this.lockModeType=readQuery.lockModeType;
    this.defaultBuilder=readQuery.defaultBuilder;
  }
}","/** 
 * INTERNAL: Copy all setting from the query. This is used to morph queries from one type to the other. By default this calls prepareFromQuery, but additional properties may be required to be copied as prepareFromQuery only copies properties that affect the SQL.
 */
@Override public void copyFromQuery(DatabaseQuery query){
  super.copyFromQuery(query);
  if (query.isObjectLevelReadQuery()) {
    ObjectLevelReadQuery readQuery=(ObjectLevelReadQuery)query;
    this.cacheUsage=readQuery.cacheUsage;
    this.isReadOnly=readQuery.isReadOnly;
    this.isResultSetOptimizedQuery=readQuery.isResultSetOptimizedQuery;
    this.shouldIncludeData=readQuery.shouldIncludeData;
    this.inMemoryQueryIndirectionPolicy=readQuery.inMemoryQueryIndirectionPolicy;
    this.lockModeType=readQuery.lockModeType;
    this.defaultBuilder=readQuery.defaultBuilder;
    this.distinctState=readQuery.distinctState;
  }
}"
65313,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLModifyTestSuite(""String_Node_Str""));
  return suite;
}"
65314,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
 else {
    marshalRecord.marshalWithoutRootElement(treeObjectBuilder,object,descriptor,root,isXMLRoot);
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65315,"public void buildOROXProjects(NamingConventionTransformer nct){
  this.nct=nct;
  String projectName=dbwsBuilder.getProjectName();
  Project orProject=new Project();
  orProject.setName(projectName + ""String_Node_Str"" + DBWS_OR_LABEL);
  Project oxProject=null;
  if (dbTables.isEmpty() && !dbwsBuilder.hasBuildSqlOperations()) {
    dbwsBuilder.logMessage(FINEST,""String_Node_Str"");
    oxProject=new SimpleXMLFormatProject();
  }
 else {
    oxProject=new Project();
  }
  oxProject.setName(projectName + ""String_Node_Str"" + DBWS_OX_LABEL);
  for (  TableType dbTable : dbTables) {
    String tableName=dbTable.getTableName();
    RelationalDescriptor desc=buildORDescriptor(tableName,dbwsBuilder.getProjectName(),dbwsBuilder.requireCRUDOperations,nct);
    orProject.addDescriptor(desc);
    XMLDescriptor xdesc=buildOXDescriptor(tableName,dbwsBuilder.getProjectName(),dbwsBuilder.getTargetNamespace(),nct);
    oxProject.addDescriptor(xdesc);
    for (    FieldType dbColumn : dbTable.getColumns()) {
      String columnName=dbColumn.getFieldName();
      ElementStyle style=nct.styleForElement(columnName);
      if (style == NONE) {
        continue;
      }
      dbwsBuilder.logMessage(FINE,""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
      DirectToFieldMapping orFieldMapping=buildORFieldMappingFromColumn(dbColumn,desc,dbwsBuilder.getDatabasePlatform(),nct);
      desc.addMapping(orFieldMapping);
      XMLDirectMapping oxFieldMapping=buildOXFieldMappingFromColumn(dbColumn,dbwsBuilder.getDatabasePlatform(),nct);
      xdesc.addMapping(oxFieldMapping);
      if (oxFieldMapping.getAttributeClassificationName() == APBYTE.getName()) {
        orFieldMapping.setAttributeClassificationName(APBYTE.getName());
      }
    }
    setUpFindQueries(tableName,desc);
  }
  finishUpProjects(orProject,oxProject);
}","/** 
 * Builds OR/OX projects, descriptors & mappings, based on a given list of types, as well as table(s) and secondary SQL.
 */
public void buildOROXProjects(NamingConventionTransformer nct,List<CompositeDatabaseType> types){
  this.nct=nct;
  String projectName=dbwsBuilder.getProjectName();
  Project orProject=new Project();
  orProject.setName(projectName + ""String_Node_Str"" + DBWS_OR_LABEL);
  Project oxProject=null;
  if (dbTables.isEmpty() && !dbwsBuilder.hasBuildSqlOperations()) {
    dbwsBuilder.logMessage(FINEST,""String_Node_Str"");
    oxProject=new SimpleXMLFormatProject();
  }
 else {
    oxProject=new Project();
  }
  oxProject.setName(projectName + ""String_Node_Str"" + DBWS_OX_LABEL);
  for (  TableType dbTable : dbTables) {
    String tableName=dbTable.getTableName();
    RelationalDescriptor desc=buildORDescriptor(tableName,dbwsBuilder.getProjectName(),dbwsBuilder.requireCRUDOperations,nct);
    orProject.addDescriptor(desc);
    XMLDescriptor xdesc=buildOXDescriptor(tableName,dbwsBuilder.getProjectName(),dbwsBuilder.getTargetNamespace(),nct);
    oxProject.addDescriptor(xdesc);
    for (    FieldType dbColumn : dbTable.getColumns()) {
      String columnName=dbColumn.getFieldName();
      ElementStyle style=nct.styleForElement(columnName);
      if (style == NONE) {
        continue;
      }
      dbwsBuilder.logMessage(FINE,""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName);
      DirectToFieldMapping orFieldMapping=buildORFieldMappingFromColumn(dbColumn,desc,dbwsBuilder.getDatabasePlatform(),nct);
      desc.addMapping(orFieldMapping);
      XMLDirectMapping oxFieldMapping=buildOXFieldMappingFromColumn(dbColumn,dbwsBuilder.getDatabasePlatform(),nct);
      xdesc.addMapping(oxFieldMapping);
      if (oxFieldMapping.getAttributeClassificationName() == APBYTE.getName()) {
        orFieldMapping.setAttributeClassificationName(APBYTE.getName());
      }
    }
    setUpFindQueries(tableName,desc);
  }
  finishUpProjects(orProject,oxProject,types);
}"
65316,"/** 
 * Complete project configuration.  Build descriptors for secondary SQL and complex arguments.  Set the projects on the DBWSBuilder instance.
 */
protected void finishUpProjects(Project orProject,Project oxProject){
  for (  OperationModel opModel : dbwsBuilder.operations) {
    if (opModel.hasBuildSql()) {
      addToOROXProjectsForBuildSql((ModelWithBuildSql)opModel,orProject,oxProject,nct);
    }
  }
  for (  OperationModel opModel : dbwsBuilder.operations) {
    if (opModel.isProcedureOperation()) {
      ProcedureOperationModel procedureOperation=(ProcedureOperationModel)opModel;
      if (procedureOperation.isPLSQLProcedureOperation() || procedureOperation.isAdvancedJDBCProcedureOperation()) {
        for (        ProcedureType procType : procedureOperation.getDbStoredProcedures()) {
          List<ArgumentType> args=getArgumentListForProcedureType(procType);
          boolean hasComplexArgs=hasComplexArgs(args);
          boolean hasPLSQLArgs=hasPLSQLArgs(args);
          boolean hasPLSQLScalarArgs=hasPLSQLScalarArgs(args);
          if (!procedureOperation.hasComplexArguments) {
            procedureOperation.setHasComplexArguments(hasComplexArgs);
          }
          if (hasComplexArgs || hasPLSQLScalarArgs) {
            addToOROXProjectsForComplexArgs(args,orProject,oxProject,procedureOperation);
            buildQueryForProcedureType(procType,orProject,oxProject,procedureOperation,hasPLSQLArgs);
          }
        }
      }
    }
  }
  DatabaseLogin databaseLogin=new DatabaseLogin();
  databaseLogin.removeProperty(""String_Node_Str"");
  databaseLogin.removeProperty(""String_Node_Str"");
  databaseLogin.setDriverClassName(null);
  databaseLogin.setConnectionString(null);
  orProject.setLogin(databaseLogin);
  XMLLogin xmlLogin=new XMLLogin();
  xmlLogin.setDatasourcePlatform(new DOMPlatform());
  xmlLogin.getProperties().remove(""String_Node_Str"");
  xmlLogin.getProperties().remove(""String_Node_Str"");
  oxProject.setLogin(xmlLogin);
  dbwsBuilder.setOrProject(orProject);
  dbwsBuilder.setOxProject(oxProject);
}","/** 
 * Complete project configuration.  Build descriptors for secondary SQL and complex arguments.  Set the projects on the DBWSBuilder instance.
 */
protected void finishUpProjects(Project orProject,Project oxProject,List<CompositeDatabaseType> typeList){
  for (  OperationModel opModel : dbwsBuilder.operations) {
    if (opModel.hasBuildSql()) {
      addToOROXProjectsForBuildSql((ModelWithBuildSql)opModel,orProject,oxProject,nct);
    }
  }
  addToOROXProjectsForComplexTypes(typeList,orProject,oxProject);
  for (  OperationModel opModel : dbwsBuilder.operations) {
    if (opModel.isProcedureOperation()) {
      ProcedureOperationModel procedureOperation=(ProcedureOperationModel)opModel;
      if (procedureOperation.isPLSQLProcedureOperation() || procedureOperation.isAdvancedJDBCProcedureOperation()) {
        for (        ProcedureType procType : procedureOperation.getDbStoredProcedures()) {
          List<ArgumentType> args=getArgumentListForProcedureType(procType);
          boolean hasComplexArgs=hasComplexArgs(args);
          boolean hasPLSQLArgs=hasPLSQLArgs(args);
          boolean hasPLSQLScalarArgs=hasPLSQLScalarArgs(args);
          if (!procedureOperation.hasComplexArguments) {
            procedureOperation.setHasComplexArguments(hasComplexArgs);
          }
          if (hasComplexArgs || hasPLSQLScalarArgs) {
            buildQueryForProcedureType(procType,orProject,oxProject,procedureOperation,hasPLSQLArgs);
          }
        }
      }
    }
  }
  DatabaseLogin databaseLogin=new DatabaseLogin();
  databaseLogin.removeProperty(""String_Node_Str"");
  databaseLogin.removeProperty(""String_Node_Str"");
  databaseLogin.setDriverClassName(null);
  databaseLogin.setConnectionString(null);
  orProject.setLogin(databaseLogin);
  XMLLogin xmlLogin=new XMLLogin();
  xmlLogin.setDatasourcePlatform(new DOMPlatform());
  xmlLogin.getProperties().remove(""String_Node_Str"");
  xmlLogin.getProperties().remove(""String_Node_Str"");
  oxProject.setLogin(xmlLogin);
  dbwsBuilder.setOrProject(orProject);
  dbwsBuilder.setOxProject(oxProject);
}"
65317,"public void build(OutputStream dbwsSchemaStream,OutputStream dbwsSessionsStream,OutputStream dbwsServiceStream,OutputStream dbwsOrStream,OutputStream dbwsOxStream,OutputStream swarefStream,OutputStream webXmlStream,OutputStream wsdlStream,OutputStream classProviderStream,OutputStream sourceProviderStream,OutputStream classProviderListenerStream,OutputStream sourceProviderListenerStream,Logger logger) throws WSDLException {
  this.logger=logger;
  xrServiceModel.setName(getProjectName());
  String sessionsFileName=getSessionsFileName();
  if (sessionsFileName != null && sessionsFileName.length() > 0) {
    xrServiceModel.setSessionsFile(sessionsFileName);
  }
  if (topTransformer == null) {
    ServiceLoader<NamingConventionTransformer> transformers=ServiceLoader.load(NamingConventionTransformer.class);
    Iterator<NamingConventionTransformer> transformerIter=transformers.iterator();
    topTransformer=transformerIter.next();
    LinkedList<NamingConventionTransformer> transformerList=new LinkedList<NamingConventionTransformer>();
    if (!((DefaultNamingConventionTransformer)topTransformer).isDefaultTransformer()) {
      for (; transformerIter.hasNext(); ) {
        NamingConventionTransformer nextTransformer=transformerIter.next();
        if (!((DefaultNamingConventionTransformer)nextTransformer).isDefaultTransformer()) {
          transformerList.addLast(nextTransformer);
        }
 else         if (nextTransformer instanceof SQLX2003Transformer) {
          transformerList.addLast(nextTransformer);
        }
      }
    }
 else {
      for (; transformerIter.hasNext(); ) {
        transformerList.addLast(transformerIter.next());
      }
    }
    NamingConventionTransformer nextTransformer=topTransformer;
    for (Iterator<NamingConventionTransformer> i=transformerList.iterator(); i.hasNext(); ) {
      NamingConventionTransformer nct=i.next();
      ((DefaultNamingConventionTransformer)nextTransformer).setNextTransformer(nct);
      nextTransformer=nct;
    }
  }
  packager.start();
  DBWSBuilderHelper helper=getBuilderHelper();
  helper.buildDbArtifacts();
  helper.buildOROXProjects(topTransformer);
  helper.buildSchema(topTransformer);
  helper.buildSessionsXML(dbwsSessionsStream);
  packager.setHasAttachments(hasAttachments());
  helper.buildDBWSModel(topTransformer,dbwsServiceStream);
  helper.writeAttachmentSchema(swarefStream);
  helper.buildWSDL(wsdlStream,topTransformer);
  helper.writeWebXML(webXmlStream);
  helper.generateDBWSProvider(sourceProviderStream,classProviderStream,sourceProviderListenerStream,classProviderListenerStream);
  helper.writeSchema(dbwsSchemaStream);
  helper.writeOROXProjects(dbwsOrStream,dbwsOxStream);
  packager.end();
}","public void build(OutputStream dbwsSchemaStream,OutputStream dbwsSessionsStream,OutputStream dbwsServiceStream,OutputStream dbwsOrStream,OutputStream dbwsOxStream,OutputStream swarefStream,OutputStream webXmlStream,OutputStream wsdlStream,OutputStream classProviderStream,OutputStream sourceProviderStream,OutputStream classProviderListenerStream,OutputStream sourceProviderListenerStream,Logger logger) throws WSDLException {
  this.logger=logger;
  xrServiceModel.setName(getProjectName());
  String sessionsFileName=getSessionsFileName();
  if (sessionsFileName != null && sessionsFileName.length() > 0) {
    xrServiceModel.setSessionsFile(sessionsFileName);
  }
  if (topTransformer == null) {
    ServiceLoader<NamingConventionTransformer> transformers=ServiceLoader.load(NamingConventionTransformer.class);
    Iterator<NamingConventionTransformer> transformerIter=transformers.iterator();
    topTransformer=transformerIter.next();
    LinkedList<NamingConventionTransformer> transformerList=new LinkedList<NamingConventionTransformer>();
    if (!((DefaultNamingConventionTransformer)topTransformer).isDefaultTransformer()) {
      for (; transformerIter.hasNext(); ) {
        NamingConventionTransformer nextTransformer=transformerIter.next();
        if (!((DefaultNamingConventionTransformer)nextTransformer).isDefaultTransformer()) {
          transformerList.addLast(nextTransformer);
        }
 else         if (nextTransformer instanceof SQLX2003Transformer) {
          transformerList.addLast(nextTransformer);
        }
      }
    }
 else {
      for (; transformerIter.hasNext(); ) {
        transformerList.addLast(transformerIter.next());
      }
    }
    NamingConventionTransformer nextTransformer=topTransformer;
    for (Iterator<NamingConventionTransformer> i=transformerList.iterator(); i.hasNext(); ) {
      NamingConventionTransformer nct=i.next();
      ((DefaultNamingConventionTransformer)nextTransformer).setNextTransformer(nct);
      nextTransformer=nct;
    }
  }
  packager.start();
  DBWSBuilderHelper helper=getBuilderHelper();
  helper.buildDbArtifacts();
  helper.buildOROXProjects(topTransformer,helper.buildTypesList(operations));
  helper.buildSchema(topTransformer);
  helper.buildSessionsXML(dbwsSessionsStream);
  packager.setHasAttachments(hasAttachments());
  helper.buildDBWSModel(topTransformer,dbwsServiceStream);
  helper.writeAttachmentSchema(swarefStream);
  helper.buildWSDL(wsdlStream,topTransformer);
  helper.writeWebXML(webXmlStream);
  helper.generateDBWSProvider(sourceProviderStream,classProviderStream,sourceProviderListenerStream,classProviderListenerStream);
  helper.writeSchema(dbwsSchemaStream);
  helper.writeOROXProjects(dbwsOrStream,dbwsOxStream);
  packager.end();
}"
65318,public void buildOROXProjects(NamingConventionTransformer nct);,"public void buildOROXProjects(NamingConventionTransformer nct,List<CompositeDatabaseType> types);"
65319,"/** 
 * Indicates if a given ArgumentType is considered 'complex', i.e. it has a data type that is one of PLSQLRecordType, PLSQLCollectionType, VArrayType, ObjectType, or NestedTableType
 */
public static boolean isArgComplex(ArgumentType argument){
  DatabaseType argType=argument.getEnclosedType();
  return argType.isPLSQLType() || (argType.isPLSQLCursorType() && !((PLSQLCursorType)argType).isWeaklyTyped()) || argType.isVArrayType()|| argType.isObjectType()|| argType.isObjectTableType();
}","/** 
 * Indicates if a given ArgumentType is considered 'complex', i.e. it has a data type that is one of PLSQLRecordType, PLSQLCollectionType, VArrayType, ObjectType, or NestedTableType
 */
public static boolean isArgComplex(ArgumentType argument){
  return isTypeComplex(argument.getEnclosedType());
}"
65320,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=null;
    if (unmarshalRecord.isNamespaceAware()) {
      schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      schemaType=atts.getValue(XMLConstants.EMPTY_STRING,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment(schemaType,unmarshalRecord.getNamespaceSeparator(),unmarshalRecord.isNamespaceAware());
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}"
65321,"private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,Tree childValueTree){
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
      String stringValue=childValueTree.getChild(0).getText();
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
      break;
    }
case JSONLexer.NUMBER:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
    break;
  }
case JSONLexer.TRUE:
{
  attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  break;
}
case JSONLexer.FALSE:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
break;
}
case JSONLexer.NULL:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,XMLConstants.EMPTY_STRING));
break;
}
}
}","private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,Tree childValueTree){
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
      String stringValue=JSONReader.string(childValueTree.getChild(0).getText());
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue));
      break;
    }
case JSONLexer.NUMBER:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
    break;
  }
case JSONLexer.TRUE:
{
  attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  break;
}
case JSONLexer.FALSE:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
break;
}
case JSONLexer.NULL:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,XMLConstants.EMPTY_STRING));
break;
}
}
}"
65322,"private String string(String string){
  string=string.substring(1,string.length() - 1);
  String returnString=""String_Node_Str"";
  int slashIndex=string.indexOf('\\');
  if (slashIndex == -1) {
    return string;
  }
  int position=0;
  while (slashIndex > -1) {
    String subString=string.substring(position,slashIndex);
    returnString+=subString;
    position=slashIndex;
    char nextChar=string.charAt(slashIndex + 1);
switch (nextChar) {
case 'b':
{
        position+=2;
        returnString+='\b';
        break;
      }
case 'r':
{
      position+=2;
      returnString+='\r';
      break;
    }
case 'f':
{
    position+=2;
    returnString+='\f';
    break;
  }
case 'n':
{
  position+=2;
  returnString+='\n';
  break;
}
case 't':
{
position+=2;
returnString+='\t';
break;
}
case '""':
{
position+=2;
returnString+='""';
break;
}
case '\\':
{
position+=2;
returnString+='\\';
break;
}
case '/':
{
position+=2;
returnString+='/';
break;
}
case 'u':
{
position+=6;
String hexValue=string.substring(slashIndex + 2,slashIndex + 6);
returnString+=Character.toString((char)Integer.parseInt(hexValue,16));
break;
}
}
slashIndex=string.indexOf('\\',position);
}
if (position < string.length()) {
String subString=string.substring(position,string.length());
returnString+=subString;
}
return returnString;
}","private static String string(String string){
  string=string.substring(1,string.length() - 1);
  String returnString=""String_Node_Str"";
  int slashIndex=string.indexOf('\\');
  if (slashIndex == -1) {
    return string;
  }
  int position=0;
  while (slashIndex > -1) {
    String subString=string.substring(position,slashIndex);
    returnString+=subString;
    position=slashIndex;
    char nextChar=string.charAt(slashIndex + 1);
switch (nextChar) {
case 'b':
{
        position+=2;
        returnString+='\b';
        break;
      }
case 'r':
{
      position+=2;
      returnString+='\r';
      break;
    }
case 'f':
{
    position+=2;
    returnString+='\f';
    break;
  }
case 'n':
{
  position+=2;
  returnString+='\n';
  break;
}
case 't':
{
position+=2;
returnString+='\t';
break;
}
case '""':
{
position+=2;
returnString+='""';
break;
}
case '\\':
{
position+=2;
returnString+='\\';
break;
}
case '/':
{
position+=2;
returnString+='/';
break;
}
case 'u':
{
position+=6;
String hexValue=string.substring(slashIndex + 2,slashIndex + 6);
returnString+=Character.toString((char)Integer.parseInt(hexValue,16));
break;
}
}
slashIndex=string.indexOf('\\',position);
}
if (position < string.length()) {
String subString=string.substring(position,string.length());
returnString+=subString;
}
return returnString;
}"
65323,"public JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
}","private JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware,boolean includeRoot,char namespaceSeparator,ErrorHandler errorHandler){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
  this.namespaceSeparator=namespaceSeparator;
  this.includeRoot=includeRoot;
  this.setErrorHandler(errorHandler);
}"
65324,"public void addPartialTests(){
  ReadAllPartialReadingTest test3=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test3.setName(""String_Node_Str"");
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(Employee.class);
  query3.dontMaintainCache();
  query3.addPartialAttribute(""String_Node_Str"");
  query3.addPartialAttribute(""String_Node_Str"");
  test3.setQuery(query3);
  addTest(test3);
  ReadAllPartialReadingTest test4=new ReadAllPartialReadingTest(1,""String_Node_Str"");
  test4.setName(""String_Node_Str"");
  ReadAllQuery query4=new ReadAllQuery();
  query4.setReferenceClass(Employee.class);
  query4.dontMaintainCache();
  query4.addPartialAttribute(""String_Node_Str"");
  query4.addPartialAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str"").equal(""String_Node_Str""));
  test4.setQuery(query4);
  addTest(test4);
  ReadAllPartialReadingTest test5=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test5.setName(""String_Node_Str"");
  ReadAllQuery query5=new ReadAllQuery();
  query5.setReferenceClass(Employee.class);
  query5.dontMaintainCache();
  query5.addPartialAttribute(query5.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  query5.addPartialAttribute(""String_Node_Str"");
  test5.setQuery(query5);
  addTest(test5);
  ReadAllPartialReadingTest test6=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test6.setName(""String_Node_Str"");
  ReadAllQuery query6=new ReadAllQuery();
  query6.useCursoredStream();
  query6.setReferenceClass(Employee.class);
  query6.dontMaintainCache();
  query6.addPartialAttribute(query6.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  query6.addPartialAttribute(""String_Node_Str"");
  test6.setQuery(query6);
  addTest(test6);
  ReadAllPartialReadingTest test1m=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test1m.setName(""String_Node_Str"");
  ReadAllQuery query1m=new ReadAllQuery();
  query1m.setReferenceClass(Employee.class);
  query1m.dontMaintainCache();
  Expression phones=query1m.getExpressionBuilder().anyOf(""String_Node_Str"");
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  ReadAllTest test9=new ReadAllTest(Employee.class,12);
  test9.setName(""String_Node_Str"");
  ReadAllQuery query9=new ReadAllQuery();
  query9.setReferenceClass(Employee.class);
  query9.dontMaintainCache();
  query9.addPartialAttribute(""String_Node_Str"");
  test9.setQuery(query9);
  addTest(test9);
  ReadAllPartialReadingTest test10=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test10.setName(""String_Node_Str"");
  ReadAllQuery query10=new ReadAllQuery();
  query10.setReferenceClass(Employee.class);
  query10.dontMaintainCache();
  query10.addPartialAttribute(""String_Node_Str"");
  test10.setQuery(query10);
  addTest(test10);
  ReadAllPartialReadingTest test11=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test11.setName(""String_Node_Str"");
  ReadAllQuery query11=new ReadAllQuery();
  query11.setReferenceClass(Employee.class);
  query11.dontMaintainCache();
  query11.addPartialAttribute(""String_Node_Str"");
  query11.addAscendingOrdering(""String_Node_Str"");
  test11.setQuery(query11);
  addTest(test11);
  ReadAllPartialReadingTest test12=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test12.setName(""String_Node_Str"");
  ReadAllQuery query12=new ReadAllQuery();
  query12.setReferenceClass(Employee.class);
  query12.dontMaintainCache();
  query12.addPartialAttribute(""String_Node_Str"");
  query12.addAscendingOrdering(""String_Node_Str"");
  test12.setQuery(query12);
  addTest(test12);
  ReadAllPartialReadingAddressTest test14=new ReadAllPartialReadingAddressTest(12,""String_Node_Str"");
  test14.setName(""String_Node_Str"");
  ReadAllQuery query14=new ReadAllQuery();
  query14.setReferenceClass(Address.class);
  query14.dontMaintainCache();
  query14.addPartialAttribute(""String_Node_Str"");
  query14.addAscendingOrdering(""String_Node_Str"");
  query14.useDistinct();
  test14.setQuery(query14);
  addTest(test14);
  ReadAllPartialReadingAddressTest test15=new ReadAllPartialReadingAddressTest(12,""String_Node_Str"");
  test15.setName(""String_Node_Str"");
  ReadAllQuery query15=new ReadAllQuery();
  query15.setReferenceClass(Employee.class);
  query15.dontMaintainCache();
  query15.addPartialAttribute(""String_Node_Str"");
  query15.addPartialAttribute(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test15.setQuery(query15);
  addTest(test15);
  addTest(new QueryValidationTest());
}","public void addPartialTests(){
  ReadAllPartialReadingTest test3=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test3.setName(""String_Node_Str"");
  ReadAllQuery query3=new ReadAllQuery();
  query3.setReferenceClass(Employee.class);
  query3.dontMaintainCache();
  query3.addPartialAttribute(""String_Node_Str"");
  query3.addPartialAttribute(""String_Node_Str"");
  test3.setQuery(query3);
  addTest(test3);
  ReadAllPartialReadingTest test4=new ReadAllPartialReadingTest(1,""String_Node_Str"");
  test4.setName(""String_Node_Str"");
  ReadAllQuery query4=new ReadAllQuery();
  query4.setReferenceClass(Employee.class);
  query4.dontMaintainCache();
  query4.addPartialAttribute(""String_Node_Str"");
  query4.addPartialAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str"").equal(""String_Node_Str""));
  test4.setQuery(query4);
  addTest(test4);
  ReadAllPartialReadingTest test5=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test5.setName(""String_Node_Str"");
  ReadAllQuery query5=new ReadAllQuery();
  query5.setReferenceClass(Employee.class);
  query5.dontMaintainCache();
  query5.addPartialAttribute(query5.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  query5.addPartialAttribute(""String_Node_Str"");
  test5.setQuery(query5);
  addTest(test5);
  ReadAllPartialReadingTest test6=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test6.setName(""String_Node_Str"");
  ReadAllQuery query6=new ReadAllQuery();
  query6.useCursoredStream();
  query6.setReferenceClass(Employee.class);
  query6.dontMaintainCache();
  query6.addPartialAttribute(query6.getExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  query6.addPartialAttribute(""String_Node_Str"");
  test6.setQuery(query6);
  addTest(test6);
  ReadAllPartialReadingTest test1m=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test1m.setName(""String_Node_Str"");
  ReadAllQuery query1m=new ReadAllQuery();
  query1m.setReferenceClass(Employee.class);
  query1m.dontMaintainCache();
  Expression phones=query1m.getExpressionBuilder().anyOf(""String_Node_Str"");
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  query1m.addPartialAttribute(phones.get(""String_Node_Str""));
  test1m.setQuery(query1m);
  addTest(test1m);
  ReadAllTest test9=new ReadAllTest(Employee.class,12);
  test9.setName(""String_Node_Str"");
  ReadAllQuery query9=new ReadAllQuery();
  query9.setReferenceClass(Employee.class);
  query9.dontMaintainCache();
  query9.addPartialAttribute(""String_Node_Str"");
  test9.setQuery(query9);
  addTest(test9);
  ReadAllPartialReadingTest test10=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test10.setName(""String_Node_Str"");
  ReadAllQuery query10=new ReadAllQuery();
  query10.setReferenceClass(Employee.class);
  query10.dontMaintainCache();
  query10.addPartialAttribute(""String_Node_Str"");
  test10.setQuery(query10);
  addTest(test10);
  ReadAllPartialReadingTest test11=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test11.setName(""String_Node_Str"");
  ReadAllQuery query11=new ReadAllQuery();
  query11.setReferenceClass(Employee.class);
  query11.dontMaintainCache();
  query11.addPartialAttribute(""String_Node_Str"");
  query11.addAscendingOrdering(""String_Node_Str"");
  test11.setQuery(query11);
  addTest(test11);
  ReadAllPartialReadingTest test12=new ReadAllPartialReadingTest(12,""String_Node_Str"");
  test12.setName(""String_Node_Str"");
  ReadAllQuery query12=new ReadAllQuery();
  query12.setReferenceClass(Employee.class);
  query12.dontMaintainCache();
  query12.addPartialAttribute(""String_Node_Str"");
  query12.addAscendingOrdering(""String_Node_Str"");
  test12.setQuery(query12);
  addTest(test12);
  ReadAllPartialReadingAddressTest test14=new ReadAllPartialReadingAddressTest(12,""String_Node_Str"");
  test14.setName(""String_Node_Str"");
  ReadAllQuery query14=new ReadAllQuery();
  query14.setReferenceClass(Address.class);
  query14.dontMaintainCache();
  query14.addPartialAttribute(""String_Node_Str"");
  query14.addAscendingOrdering(""String_Node_Str"");
  query14.useDistinct();
  test14.setQuery(query14);
  addTest(test14);
  ReadAllPartialReadingAddressTest test15=new ReadAllPartialReadingAddressTest(12,""String_Node_Str"");
  test15.setName(""String_Node_Str"");
  ReadAllQuery query15=new ReadAllQuery();
  query15.setReferenceClass(Employee.class);
  query15.dontMaintainCache();
  query15.addPartialAttribute(""String_Node_Str"");
  query15.addPartialAttribute(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str""));
  test15.setQuery(query15);
  addTest(test15);
  ReadAllPartialReadingAddressTest test16=new ReadAllPartialReadingAddressTest(26,""String_Node_Str"");
  test16.setName(""String_Node_Str"");
  ReadAllQuery query16=new ReadAllQuery();
  query16.setReferenceClass(PhoneNumber.class);
  query16.dontMaintainCache();
  query16.useDistinct();
  query16.addPartialAttribute(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").get(""String_Node_Str"").get(""String_Node_Str""));
  test16.setQuery(query16);
  addTest(test16);
  addTest(new QueryValidationTest());
}"
65325,"public void addBatchTests(BatchFetchType batchType){
  ReadAllBatchReadingTest testbb1=new ReadAllBatchReadingTest(12);
  testbb1.setName(""String_Node_Str"" + batchType);
  ReadAllQuery querybb1=new ReadAllQuery();
  querybb1.setBatchFetchType(batchType);
  querybb1.setReferenceClass(Employee.class);
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  testbb1.setQuery(querybb1);
  addTest(testbb1);
  ReadAllBatchReadingTest testbb2=new ReadAllBatchReadingTest(2);
  testbb2.setName(""String_Node_Str"" + batchType);
  ReadAllQuery querybb2=new ReadAllQuery();
  querybb2.setBatchFetchType(batchType);
  querybb2.setReferenceClass(Employee.class);
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  testbb2.setQuery(querybb2);
  addTest(testbb2);
  BatchReadingUnitOfWorkTest testbb3=new BatchReadingUnitOfWorkTest(batchType);
  addTest(testbb3);
  BatchReadingUnitOfWorkInTransactionTest testbb4=new BatchReadingUnitOfWorkInTransactionTest(batchType);
  addTest(testbb4);
  OneToManyBatchReadingTest testbb5=new OneToManyBatchReadingTest(batchType);
  addTest(testbb5);
  addTest(new BatchReadingTest(batchType));
  OneToManyBatchReadingCustomSelectionQueryTest testbb6=new OneToManyBatchReadingCustomSelectionQueryTest(batchType);
  addTest(testbb6);
  ReadAllBatchReadingTest test3=new ReadAllBatchReadingTest(2);
  test3.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query3=new ReadAllQuery();
  query3.setBatchFetchType(batchType);
  query3.setReferenceClass(Employee.class);
  query3.useCursoredStream();
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  query3.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  NestedOneToManyBatchReadAllTest test3_5=new NestedOneToManyBatchReadAllTest(org.eclipse.persistence.testing.models.collections.Restaurant.class,15);
  test3_5.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query3_5=new ReadAllQuery();
  query3_5.setBatchFetchType(batchType);
  query3_5.setReferenceClass(org.eclipse.persistence.testing.models.collections.Restaurant.class);
  query3_5.addBatchReadAttribute(""String_Node_Str"");
  test3_5.setQuery(query3_5);
  addTest(test3_5);
  ReadAllTest test4=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,3);
  test4.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query4=new ReadAllQuery();
  query4.setBatchFetchType(batchType);
  query4.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query4.addBatchReadAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(40000));
  test4.setQuery(query4);
  addTest(test4);
  addTest(new OneToOneBatchReadingTest(batchType));
  ReadAllTest test5=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,4);
  test5.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query5=new ReadAllQuery();
  query5.setBatchFetchType(batchType);
  query5.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query5.addBatchReadAttribute(""String_Node_Str"");
  query5.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(30000));
  test5.setQuery(query5);
  addTest(test5);
  addTest(new OneToManyBatchReadingTest(batchType));
  addTest(new NestedBatchReadingTest(batchType));
  addTest(new AggregateBatchReadingTest(batchType));
  addTest(new BatchReadingBatchReadExpressionTest(batchType));
  addTest(new BatchReadingWithInvalidQueryKeyTest(batchType));
  addTest(new BatchReadValueholderTest(batchType));
  addTest(new BatchReadingStackOverflowTest(batchType));
}","public void addBatchTests(BatchFetchType batchType){
  ReadAllBatchReadingTest testbb1=new ReadAllBatchReadingTest(12);
  testbb1.setName(""String_Node_Str"" + batchType);
  ReadAllQuery querybb1=new ReadAllQuery();
  querybb1.setBatchFetchType(batchType);
  querybb1.setReferenceClass(Employee.class);
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  testbb1.setQuery(querybb1);
  addTest(testbb1);
  ReadAllBatchReadingTest testbb2=new ReadAllBatchReadingTest(2);
  testbb2.setName(""String_Node_Str"" + batchType);
  ReadAllQuery querybb2=new ReadAllQuery();
  querybb2.setBatchFetchType(batchType);
  querybb2.setReferenceClass(Employee.class);
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.addBatchReadAttribute(""String_Node_Str"");
  querybb2.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  testbb2.setQuery(querybb2);
  addTest(testbb2);
  BatchReadingUnitOfWorkTest testbb3=new BatchReadingUnitOfWorkTest(batchType);
  addTest(testbb3);
  BatchReadingUnitOfWorkInTransactionTest testbb4=new BatchReadingUnitOfWorkInTransactionTest(batchType);
  addTest(testbb4);
  OneToManyBatchReadingTest testbb5=new OneToManyBatchReadingTest(batchType);
  addTest(testbb5);
  addTest(new BatchReadingTest(batchType));
  OneToManyBatchReadingCustomSelectionQueryTest testbb6=new OneToManyBatchReadingCustomSelectionQueryTest(batchType);
  addTest(testbb6);
  ReadAllBatchReadingTest test3=new ReadAllBatchReadingTest(2);
  test3.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query3=new ReadAllQuery();
  query3.setBatchFetchType(batchType);
  query3.setReferenceClass(Employee.class);
  query3.useCursoredStream();
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  query3.addBatchReadAttribute(""String_Node_Str"");
  querybb1.addBatchReadAttribute(""String_Node_Str"");
  query3.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").equal(""String_Node_Str""));
  test3.setQuery(query3);
  addTest(test3);
  NestedOneToManyBatchReadAllTest test3_5=new NestedOneToManyBatchReadAllTest(org.eclipse.persistence.testing.models.collections.Restaurant.class,15);
  test3_5.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query3_5=new ReadAllQuery();
  query3_5.setBatchFetchType(batchType);
  query3_5.setReferenceClass(org.eclipse.persistence.testing.models.collections.Restaurant.class);
  query3_5.addBatchReadAttribute(""String_Node_Str"");
  test3_5.setQuery(query3_5);
  addTest(test3_5);
  ReadAllTest test4=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,3);
  test4.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query4=new ReadAllQuery();
  query4.setBatchFetchType(batchType);
  query4.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query4.addBatchReadAttribute(""String_Node_Str"");
  query4.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(40000));
  test4.setQuery(query4);
  addTest(test4);
  addTest(new OneToOneBatchReadingTest(batchType));
  ReadAllTest test5=new ReadAllTest(org.eclipse.persistence.testing.models.insurance.Policy.class,4);
  test5.setName(""String_Node_Str"" + batchType);
  ReadAllQuery query5=new ReadAllQuery();
  query5.setBatchFetchType(batchType);
  query5.setReferenceClass(org.eclipse.persistence.testing.models.insurance.Policy.class);
  query5.addBatchReadAttribute(""String_Node_Str"");
  query5.setSelectionCriteria(new org.eclipse.persistence.expressions.ExpressionBuilder().get(""String_Node_Str"").greaterThan(30000));
  test5.setQuery(query5);
  addTest(test5);
  addTest(new OneToManyBatchReadingTest(batchType));
  addTest(new NestedBatchReadingTest(batchType));
  addTest(new NestedBatchReadingNPETest(batchType));
  addTest(new AggregateBatchReadingTest(batchType));
  addTest(new BatchReadingBatchReadExpressionTest(batchType));
  addTest(new BatchReadingWithInvalidQueryKeyTest(batchType));
  addTest(new BatchReadValueholderTest(batchType));
  addTest(new BatchReadingStackOverflowTest(batchType));
}"
65326,"/** 
 * INTERNAL: Extract the nested attribute expressions that apply to this mapping. This is used for partial objects and joining.
 * @param rootExpressionsAllowed true if newRoot itself can be one of theexpressions returned
 */
protected List<Expression> extractNestedExpressions(List<Expression> expressions,ExpressionBuilder newRoot,boolean rootExpressionsAllowed){
  List<Expression> nestedExpressions=new ArrayList(expressions.size());
  for (  Expression next : expressions) {
    if (!next.isQueryKeyExpression()) {
      continue;
    }
    QueryKeyExpression expression=(QueryKeyExpression)next;
    ObjectExpression base=expression;
    boolean afterBase=false;
    boolean done=false;
    ObjectExpression prevExpression=base;
    while (!base.getBaseExpression().isExpressionBuilder() && !done) {
      base=(ObjectExpression)base.getBaseExpression();
      while (!base.isExpressionBuilder() && base.getMapping().isAggregateObjectMapping()) {
        base=(ObjectExpression)base.getBaseExpression();
      }
      if (base.isExpressionBuilder()) {
        done=true;
        base=prevExpression;
      }
 else {
        prevExpression=base;
        afterBase=true;
      }
    }
    if (afterBase && base.getName().equals(getAttributeName())) {
      nestedExpressions.add(expression.rebuildOn(base,newRoot));
    }
 else     if (rootExpressionsAllowed && expression.getBaseExpression().isExpressionBuilder() && expression.getName().equals(getAttributeName())) {
      nestedExpressions.add(newRoot);
    }
  }
  return nestedExpressions;
}","/** 
 * INTERNAL: Extract the nested attribute expressions that apply to this mapping. This is used for partial objects and joining.
 * @param rootExpressionsAllowed true if newRoot itself can be one of theexpressions returned
 */
protected List<Expression> extractNestedExpressions(List<Expression> expressions,ExpressionBuilder newRoot,boolean rootExpressionsAllowed){
  List<Expression> nestedExpressions=new ArrayList(expressions.size());
  for (  Expression next : expressions) {
    if (!next.isQueryKeyExpression()) {
      continue;
    }
    QueryKeyExpression expression=(QueryKeyExpression)next;
    ObjectExpression base=expression;
    boolean afterBase=false;
    boolean done=false;
    ObjectExpression prevExpression=base;
    while (!base.getBaseExpression().isExpressionBuilder() && !done) {
      base=(ObjectExpression)base.getBaseExpression();
      while (!base.isExpressionBuilder() && (base.getMapping() != null && base.getMapping().isAggregateObjectMapping())) {
        base=(ObjectExpression)base.getBaseExpression();
      }
      if (base.isExpressionBuilder()) {
        done=true;
        base=prevExpression;
      }
 else {
        prevExpression=base;
        afterBase=true;
      }
    }
    if (afterBase && base.getName().equals(getAttributeName())) {
      nestedExpressions.add(expression.rebuildOn(base,newRoot));
    }
 else     if (rootExpressionsAllowed && expression.getBaseExpression().isExpressionBuilder() && expression.getName().equals(getAttributeName())) {
      nestedExpressions.add(newRoot);
    }
  }
  return nestedExpressions;
}"
65327,"/** 
 * Convert the object to the appropriate type by invoking the appropriate ConversionManager method
 * @param object - the object that must be converted
 * @param javaClass - the class that the object must be converted to
 * @exception - ConversionException, all exceptions will be thrown as this type.
 * @return - the newly converted object
 */
public Object convertObject(Object sourceObject,Class javaClass) throws ConversionException {
  if (sourceObject == null) {
    if (javaClass != null) {
      return getDefaultNullValue(javaClass);
    }
 else {
      return null;
    }
  }
  if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == ClassConstants.OBJECT)|| (javaClass == ClassConstants.BLOB)|| (javaClass == ClassConstants.CLOB)) {
    return sourceObject;
  }
  try {
    if (javaClass == ClassConstants.STRING) {
      return convertObjectToString(sourceObject);
    }
 else     if (javaClass == ClassConstants.UTILDATE) {
      return convertObjectToUtilDate(sourceObject);
    }
 else     if (javaClass == ClassConstants.SQLDATE) {
      return convertObjectToDate(sourceObject);
    }
 else     if (javaClass == ClassConstants.TIME) {
      return convertObjectToTime(sourceObject);
    }
 else     if (javaClass == ClassConstants.TIMESTAMP) {
      return convertObjectToTimestamp(sourceObject);
    }
 else     if ((javaClass == ClassConstants.CALENDAR) || (javaClass == ClassConstants.GREGORIAN_CALENDAR)) {
      return convertObjectToCalendar(sourceObject);
    }
 else     if ((javaClass == ClassConstants.CHAR) || (javaClass == ClassConstants.PCHAR && !(sourceObject instanceof Character))) {
      return convertObjectToChar(sourceObject);
    }
 else     if ((javaClass == ClassConstants.INTEGER) || (javaClass == ClassConstants.PINT && !(sourceObject instanceof Integer))) {
      return convertObjectToInteger(sourceObject);
    }
 else     if ((javaClass == ClassConstants.DOUBLE) || (javaClass == ClassConstants.PDOUBLE && !(sourceObject instanceof Double))) {
      return convertObjectToDouble(sourceObject);
    }
 else     if ((javaClass == ClassConstants.FLOAT) || (javaClass == ClassConstants.PFLOAT && !(sourceObject instanceof Float))) {
      return convertObjectToFloat(sourceObject);
    }
 else     if ((javaClass == ClassConstants.LONG) || (javaClass == ClassConstants.PLONG && !(sourceObject instanceof Long))) {
      return convertObjectToLong(sourceObject);
    }
 else     if ((javaClass == ClassConstants.SHORT) || (javaClass == ClassConstants.PSHORT && !(sourceObject instanceof Short))) {
      return convertObjectToShort(sourceObject);
    }
 else     if ((javaClass == ClassConstants.BYTE) || (javaClass == ClassConstants.PBYTE && !(sourceObject instanceof Byte))) {
      return convertObjectToByte(sourceObject);
    }
 else     if (javaClass == ClassConstants.BIGINTEGER) {
      return convertObjectToBigInteger(sourceObject);
    }
 else     if (javaClass == ClassConstants.BIGDECIMAL) {
      return convertObjectToBigDecimal(sourceObject);
    }
 else     if (javaClass == ClassConstants.NUMBER) {
      return convertObjectToNumber(sourceObject);
    }
 else     if ((javaClass == ClassConstants.BOOLEAN) || (javaClass == ClassConstants.PBOOLEAN && !(sourceObject instanceof Boolean))) {
      return convertObjectToBoolean(sourceObject);
    }
 else     if (javaClass == ClassConstants.APBYTE) {
      return convertObjectToByteArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.ABYTE) {
      return convertObjectToByteObjectArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.APCHAR) {
      return convertObjectToCharArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.ACHAR) {
      return convertObjectToCharacterArray(sourceObject);
    }
 else     if ((sourceObject.getClass() == ClassConstants.STRING) && (javaClass == ClassConstants.CLASS)) {
      return convertObjectToClass(sourceObject);
    }
  }
 catch (  ConversionException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw ConversionException.couldNotBeConverted(sourceObject,javaClass,e);
  }
  if ((((javaClass == ClassConstants.PBOOLEAN) && (sourceObject instanceof Boolean)) || ((javaClass == ClassConstants.PLONG) && (sourceObject instanceof Long)) || ((javaClass == ClassConstants.PINT) && (sourceObject instanceof Integer))|| ((javaClass == ClassConstants.PFLOAT) && (sourceObject instanceof Float))|| ((javaClass == ClassConstants.PDOUBLE) && (sourceObject instanceof Double))|| ((javaClass == ClassConstants.PBYTE) && (sourceObject instanceof Byte))|| ((javaClass == ClassConstants.PCHAR) && (sourceObject instanceof Character))|| ((javaClass == ClassConstants.PSHORT) && (sourceObject instanceof Short)))) {
    return sourceObject;
  }
  if (javaClass.isInstance(sourceObject)) {
    return sourceObject;
  }
  if (ClassConstants.NOCONVERSION.isAssignableFrom(javaClass)) {
    return sourceObject;
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}","/** 
 * Convert the object to the appropriate type by invoking the appropriate ConversionManager method
 * @param object - the object that must be converted
 * @param javaClass - the class that the object must be converted to
 * @exception - ConversionException, all exceptions will be thrown as this type.
 * @return - the newly converted object
 */
public Object convertObject(Object sourceObject,Class javaClass) throws ConversionException {
  if (sourceObject == null) {
    if (javaClass != null) {
      return getDefaultNullValue(javaClass);
    }
 else {
      return null;
    }
  }
  if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == ClassConstants.OBJECT)|| (javaClass == ClassConstants.BLOB)|| (javaClass == ClassConstants.CLOB)) {
    return sourceObject;
  }
  try {
    if (javaClass == ClassConstants.STRING) {
      return convertObjectToString(sourceObject);
    }
 else     if (javaClass == ClassConstants.UTILDATE) {
      return convertObjectToUtilDate(sourceObject);
    }
 else     if (javaClass == ClassConstants.SQLDATE) {
      return convertObjectToDate(sourceObject);
    }
 else     if (javaClass == ClassConstants.TIME) {
      return convertObjectToTime(sourceObject);
    }
 else     if (javaClass == ClassConstants.TIMESTAMP) {
      return convertObjectToTimestamp(sourceObject);
    }
 else     if ((javaClass == ClassConstants.CALENDAR) || (javaClass == ClassConstants.GREGORIAN_CALENDAR)) {
      return convertObjectToCalendar(sourceObject);
    }
 else     if ((javaClass == ClassConstants.CHAR) || (javaClass == ClassConstants.PCHAR && !(sourceObject instanceof Character))) {
      return convertObjectToChar(sourceObject);
    }
 else     if ((javaClass == ClassConstants.INTEGER) || (javaClass == ClassConstants.PINT && !(sourceObject instanceof Integer))) {
      return convertObjectToInteger(sourceObject);
    }
 else     if ((javaClass == ClassConstants.DOUBLE) || (javaClass == ClassConstants.PDOUBLE && !(sourceObject instanceof Double))) {
      return convertObjectToDouble(sourceObject);
    }
 else     if ((javaClass == ClassConstants.FLOAT) || (javaClass == ClassConstants.PFLOAT && !(sourceObject instanceof Float))) {
      return convertObjectToFloat(sourceObject);
    }
 else     if ((javaClass == ClassConstants.LONG) || (javaClass == ClassConstants.PLONG && !(sourceObject instanceof Long))) {
      return convertObjectToLong(sourceObject);
    }
 else     if ((javaClass == ClassConstants.SHORT) || (javaClass == ClassConstants.PSHORT && !(sourceObject instanceof Short))) {
      return convertObjectToShort(sourceObject);
    }
 else     if ((javaClass == ClassConstants.BYTE) || (javaClass == ClassConstants.PBYTE && !(sourceObject instanceof Byte))) {
      return convertObjectToByte(sourceObject);
    }
 else     if (javaClass == ClassConstants.BIGINTEGER) {
      return convertObjectToBigInteger(sourceObject);
    }
 else     if (javaClass == ClassConstants.BIGDECIMAL) {
      return convertObjectToBigDecimal(sourceObject);
    }
 else     if (javaClass == ClassConstants.NUMBER) {
      return convertObjectToNumber(sourceObject);
    }
 else     if ((javaClass == ClassConstants.BOOLEAN) || (javaClass == ClassConstants.PBOOLEAN && !(sourceObject instanceof Boolean))) {
      return convertObjectToBoolean(sourceObject);
    }
 else     if (javaClass == ClassConstants.APBYTE) {
      return convertObjectToByteArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.ABYTE) {
      return convertObjectToByteObjectArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.APCHAR) {
      return convertObjectToCharArray(sourceObject);
    }
 else     if (javaClass == ClassConstants.ACHAR) {
      return convertObjectToCharacterArray(sourceObject);
    }
 else     if ((sourceObject.getClass() == ClassConstants.STRING) && (javaClass == ClassConstants.CLASS)) {
      return convertObjectToClass(sourceObject);
    }
 else     if (javaClass == ClassConstants.URL_Class) {
      return convertObjectToUrl(sourceObject);
    }
  }
 catch (  ConversionException ce) {
    throw ce;
  }
catch (  Exception e) {
    throw ConversionException.couldNotBeConverted(sourceObject,javaClass,e);
  }
  if ((((javaClass == ClassConstants.PBOOLEAN) && (sourceObject instanceof Boolean)) || ((javaClass == ClassConstants.PLONG) && (sourceObject instanceof Long)) || ((javaClass == ClassConstants.PINT) && (sourceObject instanceof Integer))|| ((javaClass == ClassConstants.PFLOAT) && (sourceObject instanceof Float))|| ((javaClass == ClassConstants.PDOUBLE) && (sourceObject instanceof Double))|| ((javaClass == ClassConstants.PBYTE) && (sourceObject instanceof Byte))|| ((javaClass == ClassConstants.PCHAR) && (sourceObject instanceof Character))|| ((javaClass == ClassConstants.PSHORT) && (sourceObject instanceof Short)))) {
    return sourceObject;
  }
  if (javaClass.isInstance(sourceObject)) {
    return sourceObject;
  }
  if (ClassConstants.NOCONVERSION.isAssignableFrom(javaClass)) {
    return sourceObject;
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}"
65328,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DateAndTimeTestCases.class);
  suite.addTestSuite(QNameTestCases.class);
  suite.addTestSuite(Base64TestCases.class);
  suite.addTestSuite(ListTestCases.class);
  suite.addTestSuite(DoubleToBigDecimalTestCases.class);
  suite.addTestSuite(XMLGregorianCalendarTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(BooleanTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DateAndTimeTestCases.class);
  suite.addTestSuite(QNameTestCases.class);
  suite.addTestSuite(Base64TestCases.class);
  suite.addTestSuite(ListTestCases.class);
  suite.addTestSuite(DoubleToBigDecimalTestCases.class);
  suite.addTestSuite(XMLGregorianCalendarTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(BooleanTestCases.class);
  suite.addTestSuite(UrlTestCases.class);
  return suite;
}"
65329,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_MORECOMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_MORECOMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65330,"/** 
 * Build and return a Result instance based on a given ProcedureType and return type name.
 */
protected Result buildResultForStoredFunction(ProcedureType storedProcedure,String returnType){
  Result result=null;
  FunctionType storedFunction=(FunctionType)storedProcedure;
  ArgumentType rarg=storedFunction.getReturnArgument();
  DatabaseType rargDataType=rarg.getEnclosedType();
  if (rarg.getTypeName().contains(CURSOR_STR)) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
 else {
    result=new Result();
    int rargJdbcType=OTHER;
    if (rargDataType.isComposite()) {
      if (rargDataType.isObjectType()) {
        rargJdbcType=STRUCT;
      }
 else       if (rargDataType.isVArrayType() || rargDataType.isObjectTableType()) {
        rargJdbcType=ARRAY;
      }
    }
 else {
      rargJdbcType=Util.getJDBCTypeFromTypeName(rarg.getTypeName());
    }
switch (rargJdbcType) {
case OTHER:
      if (returnType == null) {
        returnType=rarg.getTypeName();
      }
    String packageName=storedProcedure.getCatalogName();
  String returnTypeName=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + returnType : returnType;
result.setType(buildCustomQName(returnTypeName,dbwsBuilder));
break;
case STRUCT:
case ARRAY:
if (returnType != null) {
result.setType(buildCustomQName(returnType,dbwsBuilder));
}
 else {
result.setType(ANY_QNAME);
}
break;
default :
result.setType(getXMLTypeFromJDBCType(rargJdbcType));
break;
}
}
return result;
}","/** 
 * Build and return a Result instance based on a given ProcedureType and return type name.
 */
protected Result buildResultForStoredFunction(ProcedureType storedProcedure,String returnType){
  Result result=null;
  FunctionType storedFunction=(FunctionType)storedProcedure;
  ArgumentType rarg=storedFunction.getReturnArgument();
  DatabaseType rargDataType=rarg.getEnclosedType();
  if (rarg.getTypeName().contains(CURSOR_STR)) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
 else {
    result=new Result();
    int rargJdbcType=OTHER;
    if (rargDataType.isComposite()) {
      if (rargDataType.isObjectType()) {
        rargJdbcType=STRUCT;
      }
 else       if (rargDataType.isVArrayType() || rargDataType.isObjectTableType()) {
        rargJdbcType=ARRAY;
      }
    }
 else {
      rargJdbcType=Util.getJDBCTypeFromTypeName(rarg.getTypeName());
    }
switch (rargJdbcType) {
case OTHER:
      if (returnType == null || returnType.length() == 0) {
        returnType=rargDataType.getTypeName();
      }
    String packageName=storedProcedure.getCatalogName();
  String returnTypeName=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + returnType : returnType;
result.setType(buildCustomQName(returnTypeName,dbwsBuilder));
break;
case STRUCT:
case ARRAY:
if (returnType == null || returnType.length() == 0) {
returnType=rargDataType.getTypeName().toLowerCase().concat(TYPE_STR);
}
result.setType(buildCustomQName(returnType,dbwsBuilder));
break;
default :
result.setType(getXMLTypeFromJDBCType(rargJdbcType));
break;
}
}
return result;
}"
65331,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (encoder.maxBytesPerChar() < 4 || value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    if (encoder.canEncode(character)) {
      writer.write(character);
    }
 else {
      writer.write(""String_Node_Str"");
      writer.write(String.valueOf((int)character));
      writer.write(';');
    }
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if ((null != encoder && encoder.maxBytesPerChar() < 4) || value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    if (encoder.canEncode(character)) {
      writer.write(character);
    }
 else {
      writer.write(""String_Node_Str"");
      writer.write(String.valueOf((int)character));
      writer.write(';');
    }
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65332,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.schematype.SchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.self.SelfTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.attributecollection.XmlPathCollectionAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.UnmappedCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.enumtype.EnumTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(JAXBDefaultNameTransformerTestCases.class);
  suite.addTestSuite(JAXBUpperNameTransformerTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XMLTransformationNoArgCtorTestCases.class);
  suite.addTestSuite(XMLTransformationNoArgCtorXMLBindingsTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.xmlvalue.XmlJoinNodesWithValueTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.XmlElementsJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.collection.XmlElementsJoinNodeTestCases.class);
  suite.addTest(PredicateTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlinlinebinarydata.XmlInlineBinaryDataTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.annotations.xmltransient.XmlTransientTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.qualified.QualfiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.emptystringns.EmptyStringNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.unqualified.UnqualfiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmllocation.XmlLocationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmllocation.XmlLocationNonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmllocation.XmlLocationErrorTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.annotations.xmlvalue.XmlValueTestSuite.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.XmlPathUnmappedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.schematype.SchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.self.SelfTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.attributecollection.XmlPathCollectionAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.XmlCDATAOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.cdata.UnmappedCDATATestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlwriteonly.XmlWriteOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlreadonly.XmlReadOnlyOverrideTestCases.class);
  suite.addTestSuite(XmlPathsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlpath.enumtype.EnumTestCases.class);
  suite.addTestSuite(XmlPathsOverrideTestCases.class);
  suite.addTestSuite(XmlNullPolicyTestCases.class);
  suite.addTestSuite(JAXBDefaultNameTransformerTestCases.class);
  suite.addTestSuite(JAXBUpperNameTransformerTestCases.class);
  suite.addTestSuite(XmlAccessMethodsTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlPropertyTestCases.class);
  suite.addTestSuite(XmlTransformationTestCases.class);
  suite.addTestSuite(XMLTransformationNoArgCtorTestCases.class);
  suite.addTestSuite(XMLTransformationNoArgCtorXMLBindingsTestCases.class);
  suite.addTestSuite(XmlTransformationMethodTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlcontainerproperty.ContainerPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.PropertyTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.required.RequiredAnnotationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmldiscriminator.XmlDiscriminatorTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.XmlJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmljoinnode.xmlvalue.XmlJoinNodesWithValueTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.XmlElementsJoinNodeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementsjoinnodes.collection.XmlElementsJoinNodeTestCases.class);
  suite.addTest(PredicateTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlinlinebinarydata.XmlInlineBinaryDataTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.annotations.xmltransient.XmlTransientTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.qualified.QualfiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.emptystringns.EmptyStringNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmlelementdecl.unqualified.UnqualfiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmllocation.XmlLocationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.annotations.xmllocation.XmlLocationErrorTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.annotations.xmlvalue.XmlValueTestSuite.suite());
  return suite;
}"
65333,"public void setName(int name){
  this.id=name;
}","@XmlElement public void setName(int name){
  this.id=name;
}"
65334,"public int getId(){
  return this.id;
}","@XmlElement public int getId(){
  return this.id;
}"
65335,"protected Object getControlObject(){
  Employee emp=new Employee(0);
  emp.firstName=""String_Node_Str"";
  emp.lastName=""String_Node_Str"";
  return emp;
}","protected Object getControlObject(){
  Employee emp=new Employee(666);
  emp.firstName=""String_Node_Str"";
  emp.lastName=""String_Node_Str"";
  return emp;
}"
65336,"protected Object getControlObject(){
  Employee emp=new Employee(0);
  return emp;
}","protected Object getControlObject(){
  Employee emp=new Employee(66);
  return emp;
}"
65337,"protected Object getControlObject(){
  Employee emp=new Employee(0);
  emp.firstName=""String_Node_Str"";
  emp.lastName=""String_Node_Str"";
  return emp;
}","protected Object getControlObject(){
  Employee emp=new Employee(666);
  emp.firstName=""String_Node_Str"";
  emp.lastName=""String_Node_Str"";
  return emp;
}"
65338,"public void setReadOnlyString(String string){
  this.readOnlyString=string;
}","@XmlElement public void setReadOnlyString(String string){
  this.readOnlyString=string;
}"
65339,"public String getWriteOnlyString(){
  return writeOnlyString;
}","@XmlElement public String getWriteOnlyString(){
  return writeOnlyString;
}"
65340,"public void setReadOnlyStringArray(String[] array){
  this.readOnlyStringArray=array;
}","@XmlElement public void setReadOnlyStringArray(String[] array){
  this.readOnlyStringArray=array;
}"
65341,"public String[] getWriteOnlyStringArray(){
  return writeOnlyStringArray;
}","@XmlElement public String[] getWriteOnlyStringArray(){
  return writeOnlyStringArray;
}"
65342,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod == null && !(hasJAXBAnnotations(getMethod))) {
        isPropertyTransient=true;
      }
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod == null && !(hasJAXBAnnotations(setMethod))) {
        isPropertyTransient=true;
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
65343,"/** 
 * Returns
 * @return
 */
Collection<IdentificationVariable> getResultVariables(){
  if (parent != null) {
    return parent.getResultVariables();
  }
  if (resultVariables == null) {
    resultVariables=new HashSet<IdentificationVariable>();
    ResultVariableVisitor visitor=new ResultVariableVisitor();
    queryContext.getJPQLExpression().accept(visitor);
  }
  return resultVariables;
}","/** 
 * Returns the variables that got defined in the select expression. This only applies to JPQL queries built for JPA 2.0 or later.
 * @return The variables identifying the select expressions, if any was defined or an empty setif none were defined
 */
Collection<IdentificationVariable> getResultVariables(){
  if (parent != null) {
    return parent.getResultVariables();
  }
  if (resultVariables == null) {
    resultVariables=new HashSet<IdentificationVariable>();
    ResultVariableVisitor visitor=new ResultVariableVisitor();
    queryContext.getJPQLExpression().accept(visitor);
  }
  return resultVariables;
}"
65344,"private void visitInExpression(InExpression expression,Expression stateFieldPathExpression){
  InExpressionBuilder visitor=inExpressionBuilder();
  try {
    visitor.hasNot=expression.hasNot();
    visitor.singleInputParameter=!expression.hasLeftParenthesis();
    visitor.stateFieldPathExpression=stateFieldPathExpression;
    expression.getInItems().accept(visitor);
  }
  finally {
    visitor.hasNot=false;
    visitor.singleInputParameter=false;
    visitor.stateFieldPathExpression=null;
  }
}","private void visitInExpression(InExpression expression,Expression stateFieldPathExpression){
  InExpressionBuilder visitor=inExpressionBuilder();
  try {
    visitor.hasNot=expression.hasNot();
    visitor.singleInputParameter=expression.isSingleInputParameter();
    visitor.stateFieldPathExpression=stateFieldPathExpression;
    expression.getInItems().accept(visitor);
  }
  finally {
    visitor.hasNot=false;
    visitor.singleInputParameter=false;
    visitor.stateFieldPathExpression=null;
  }
}"
65345,"private JPQLGrammar jpqlGrammar(){
  if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.EclipseLink) {
    return DefaultEclipseLinkJPQLGrammar.instance();
  }
 else   if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA10) {
    return JPQLGrammar1_0.instance();
  }
 else   if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA20) {
    return JPQLGrammar2_0.instance();
  }
 else   if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA21) {
    return JPQLGrammar2_1.instance();
  }
 else {
    return DefaultEclipseLinkJPQLGrammar.instance();
  }
}","private JPQLGrammar jpqlGrammar(){
  if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.EclipseLink) {
    return DefaultEclipseLinkJPQLGrammar.instance();
  }
  if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA10) {
    return JPQLGrammar1_0.instance();
  }
  if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA20) {
    return JPQLGrammar2_0.instance();
  }
  if (JPAQueryBuilderManager.systemQueryBuilderValidationLevel == ParserValidationType.JPA21) {
    return JPQLGrammar2_1.instance();
  }
  return DefaultEclipseLinkJPQLGrammar.instance();
}"
65346,"/** 
 * Converts the given   {@link org.eclipse.persistence.jpa.query.parser.Expression JPQL Expression}into an   {@link Expression}.
 * @param expression The {@link org.eclipse.persistence.jpa.query.parser.Expression JPQL Expression}to visit and to convert into an   {@link Expression}
 * @param type The given array will be used to store the type of the given expression
 * @return The {@link Expression} representing the given parsed expression
 */
Expression buildExpression(org.eclipse.persistence.jpa.jpql.parser.Expression expression,Class<?>[] type){
  return expressionBuilder().buildExpression(expression,type);
}","/** 
 * Converts the given   {@link org.eclipse.persistence.jpa.jpql.parser.Expression JPQL Expression}into an   {@link Expression}.
 * @param expression The {@link org.eclipse.persistence.jpa.jpql.parser.Expression JPQL Expression}to visit and to convert into an   {@link Expression}
 * @param type The given array will be used to store the type of the given expression
 * @return The {@link Expression} representing the given parsed expression
 */
Expression buildExpression(org.eclipse.persistence.jpa.jpql.parser.Expression expression,Class<?>[] type){
  return expressionBuilder().buildExpression(expression,type);
}"
65347,"/** 
 * Returns the type of the given   {@link QueryKey}, which is the persistent field type.
 * @param mapping The {@link QueryKey} to retrieve its persistent field type
 * @return The persistent field type
 */
Class<?> calculateQueryKeyType(QueryKey queryKey){
  return typeResolver().calculateQueryKeyType(queryKey);
}","/** 
 * Returns the type of the given   {@link QueryKey}, which is the persistent field type.
 * @param queryKey The {@link QueryKey} to retrieve its persistent field type
 * @return The persistent field type
 */
Class<?> calculateQueryKeyType(QueryKey queryKey){
  return typeResolver().calculateQueryKeyType(queryKey);
}"
65348,"/** 
 * Retrieves the external class for the given fully qualified class name.
 * @param name The fully qualified class name of the class to retrieve
 * @return The external form of the class to retrieve
 */
Class<?> getType(String typeName){
  return loadTypeImp(typeName);
}","/** 
 * Retrieves the external class for the given fully qualified class name.
 * @param typeName The fully qualified class name of the class to retrieve
 * @return The external form of the class to retrieve
 */
Class<?> getType(String typeName){
  return loadTypeImp(typeName);
}"
65349,"/** 
 * Changes the state of this context to use the given subquery. Once the subquery is created and populated,   {@link #disposeSubQueryContext()} has to be called.
 * @param currentQuery The parsed tree representation of the subquery that will become thecurrent  {@link DatabaseQuery}
 * @param query The {@link ReportQuery} for the subquery
 * @see #disposeSubQueryContext()
 */
void newSubQueryContext(org.eclipse.persistence.jpa.jpql.parser.Expression currentQuery,ReportQuery query){
  currentContext=new JPQLQueryContext(currentContext,currentQuery,query);
}","/** 
 * Changes the state of this context to use the given subquery. Once the subquery is created and populated,   {@link #disposeSubqueryContext()} has to be called.
 * @param currentQuery The parsed tree representation of the subquery that will become thecurrent  {@link DatabaseQuery}
 * @param query The {@link ReportQuery} for the subquery
 * @see #disposeSubqueryContext()
 */
void newSubQueryContext(org.eclipse.persistence.jpa.jpql.parser.Expression currentQuery,ReportQuery query){
  currentContext=new JPQLQueryContext(currentContext,currentQuery,query);
}"
65350,"/** 
 * Returns the type, if it can be determined, of the input parameter.
 * @param typeVisitor The visitor used to calculate the type of the {@link Expression} that wasfound to have the closest type of the input parameter
 * @return Either the closed type or {@link Object} if it can't be determined
 */
Class<?> getType(){
  if (ignoreType) {
    return Object.class;
  }
  if (expression == null) {
    if (type == null) {
      type=Object.class;
    }
    return type;
  }
  return queryContext.getType(expression);
}","/** 
 * Returns the type, if it can be determined, of the input parameter.
 * @return Either the closed type or {@link Object} if it can't be determined
 */
Class<?> getType(){
  if (ignoreType) {
    return Object.class;
  }
  if (expression == null) {
    if (type == null) {
      type=Object.class;
    }
    return type;
  }
  return queryContext.getType(expression);
}"
65351,"/** 
 * Creates a new <code>ParameterTypeVisitor</code>.
 * @param query The external form representing the JPQL query
 */
ParameterTypeVisitor(JPQLQueryContext queryContext){
  super();
  this.queryContext=queryContext;
}","/** 
 * Creates a new <code>ParameterTypeVisitor</code>.
 * @param queryContext The context used to query information about the application metadata andcached information
 */
ParameterTypeVisitor(JPQLQueryContext queryContext){
  super();
  this.queryContext=queryContext;
}"
65352,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character) || !encoder.canEncode(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65353,"/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
}","/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  encoder=Charset.forName(marshaller.getEncoding()).newEncoder();
}"
65354,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (encoder.maxBytesPerChar() < 4 || value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    if (encoder.canEncode(character)) {
      writer.write(character);
    }
 else {
      writer.write(""String_Node_Str"");
      writer.write(String.valueOf((int)character));
      writer.write(';');
    }
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65355,"/** 
 * {@inheritDoc}
 */
@Override public void visit(ValueExpression expression){
  this.expression=expression;
}","/** 
 * {@inheritDoc}
 */
@Override public void visit(WhenClause expression){
  super.visit(expression);
}"
65356,"private void visitCompoundExpression(CompoundExpression expression){
  Expression leftExpression=expression.getLeftExpression();
  Expression rightExpression=expression.getRightExpression();
  if (leftExpression.isAncestor(inputParameter)) {
    if (currentExpression == null) {
      currentExpression=expression;
      rightExpression.accept(this);
      currentExpression=null;
    }
 else {
      type=null;
      ignoreType=true;
      expression=null;
    }
  }
 else   if (rightExpression.isAncestor(inputParameter)) {
    if (currentExpression == null) {
      currentExpression=expression;
      leftExpression.accept(this);
      currentExpression=null;
    }
 else {
      type=null;
      ignoreType=true;
      expression=null;
    }
  }
 else {
    super.visit(expression);
  }
}","private void visitCompoundExpression(CompoundExpression expression){
  visitDoubleExpressions(expression,expression.getLeftExpression(),expression.getRightExpression(),true);
}"
65357,"@Override public void endCollection(){
  try {
    if (levels.size() == 1) {
      writer.write(']');
    }
 else {
      Level position=levels.peek();
      if (position != null && position.isCollection() && !position.isEmptyCollection()) {
        writer.write(']');
      }
      levels.peek().setCollection(false);
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","@Override public void endCollection(){
  try {
    if (levels.size() == 1) {
      writer.write(']');
    }
 else {
      Level position=levels.peek();
      if (position != null && position.isCollection() && !position.isEmptyCollection()) {
        writer.write(']');
      }
    }
    levels.peek().setCollection(false);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65358,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(MappedInnerClassTestCases.class);
  suite.addTestSuite(MappedInnerClassNoneTestCases.class);
  suite.addTestSuite(UnmappedInnerClassTestCases.class);
  suite.addTestSuite(InnerClassNotInContextTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(MappedInnerClassTestCases.class);
  suite.addTestSuite(MappedInnerClassNoneTestCases.class);
  suite.addTestSuite(UnmappedInnerClassTestCases.class);
  suite.addTestSuite(InnerClassNotInContextTestCases.class);
  suite.addTestSuite(UnreferencedInnerClassTestCases.class);
  return suite;
}"
65359,"/** 
 * Adds additional classes to the given List, from inner classes,
 * @XmlRegistry or @XmlSeeAlso.
 * @param javaClass
 * @param classesToProcess
 */
private void processClass(JavaClass javaClass,ArrayList<JavaClass> classesToProcess){
  if (shouldGenerateTypeInfo(javaClass)) {
    if (isXmlRegistry(javaClass)) {
      this.processObjectFactory(javaClass,classesToProcess);
    }
 else {
      classesToProcess.add(javaClass);
      TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
      if (info != null && info.isSetXmlSeeAlso()) {
        for (        String jClassName : info.getXmlSeeAlso()) {
          classesToProcess.add(helper.getJavaClass(jClassName));
        }
      }
      for (Iterator<JavaClass> jClassIt=javaClass.getDeclaredClasses().iterator(); jClassIt.hasNext(); ) {
        JavaClass innerClass=jClassIt.next();
        if (Modifier.isStatic(innerClass.getModifiers())) {
          if (shouldGenerateTypeInfo(innerClass)) {
            CompilerHelper.addClassToClassLoader(innerClass,helper.getClassLoader());
            TypeInfo tInfo=typeInfo.get(innerClass.getQualifiedName());
            if ((tInfo != null && !tInfo.isTransient()) || !helper.isAnnotationPresent(innerClass,XmlTransient.class)) {
              classesToProcess.add(innerClass);
            }
          }
        }
      }
    }
  }
}","/** 
 * Adds additional classes to the given List, from inner classes,
 * @XmlRegistry or @XmlSeeAlso.
 * @param javaClass
 * @param classesToProcess
 */
private void processClass(JavaClass javaClass,ArrayList<JavaClass> classesToProcess){
  if (shouldGenerateTypeInfo(javaClass)) {
    if (isXmlRegistry(javaClass)) {
      this.processObjectFactory(javaClass,classesToProcess);
    }
 else {
      classesToProcess.add(javaClass);
      TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
      if (info != null && info.isSetXmlSeeAlso()) {
        for (        String jClassName : info.getXmlSeeAlso()) {
          classesToProcess.add(helper.getJavaClass(jClassName));
        }
      }
    }
  }
}"
65360,"public MapValueAttributeAccessor(AttributeAccessor nestedAccessor,ContainerPolicy cp,Class generatedEntryClass,String mapClassName){
  this.nestedAccessor=nestedAccessor;
  this.mapClassName=mapClassName;
  this.containerPolicy=cp;
  this.generatedEntryClass=generatedEntryClass;
}","public MapValueAttributeAccessor(AttributeAccessor nestedAccessor,ContainerPolicy cp,Class generatedEntryClass,String mapClassName,ClassLoader classLoader){
  this.nestedAccessor=nestedAccessor;
  this.mapClassName=mapClassName;
  this.containerPolicy=cp;
  this.generatedEntryClass=generatedEntryClass;
  this.classLoader=classLoader;
}"
65361,"public void initializeAttributes(Class theJavaClass) throws DescriptorException {
  nestedAccessor.initializeAttributes(theJavaClass);
  if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
 else   if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
 else   if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
  try {
    mapClass=PrivilegedAccessHelper.getClassForName(mapClassName);
  }
 catch (  ClassNotFoundException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public void initializeAttributes(Class theJavaClass) throws DescriptorException {
  nestedAccessor.initializeAttributes(theJavaClass);
  if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
 else   if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
 else   if (mapClassName.equals(""String_Node_Str"")) {
    mapClassName=""String_Node_Str"";
  }
  try {
    mapClass=PrivilegedAccessHelper.getClassForName(mapClassName,true,classLoader);
  }
 catch (  ClassNotFoundException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
65362,"public XMLCompositeCollectionMapping generateMapMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  initializeXMLContainerMapping(mapping);
  XMLField field=getXPathForField(property,namespaceInfo,false);
  JavaClass descriptorClass=helper.getJavaClass(descriptor.getJavaClassName());
  JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
  if (mapValueClass.isAssignableFrom(descriptorClass)) {
    mapping.setXPath(""String_Node_Str"");
  }
 else {
    mapping.setXPath(field.getXPath() + ""String_Node_Str"");
  }
  Class generatedClass=generateMapEntryClassAndDescriptor(property,descriptor.getNonNullNamespaceResolver());
  mapping.setReferenceClass(generatedClass);
  String mapClassName=property.getType().getRawName();
  mapping.useCollectionClass(ArrayList.class);
  mapping.setAttributeAccessor(new MapValueAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),generatedClass,mapClassName));
  return mapping;
}","public XMLCompositeCollectionMapping generateMapMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLCompositeCollectionMapping mapping=new XMLCompositeCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  initializeXMLContainerMapping(mapping);
  XMLField field=getXPathForField(property,namespaceInfo,false);
  JavaClass descriptorClass=helper.getJavaClass(descriptor.getJavaClassName());
  JavaClass mapValueClass=helper.getJavaClass(MapValue.class);
  if (mapValueClass.isAssignableFrom(descriptorClass)) {
    mapping.setXPath(""String_Node_Str"");
  }
 else {
    mapping.setXPath(field.getXPath() + ""String_Node_Str"");
  }
  Class generatedClass=generateMapEntryClassAndDescriptor(property,descriptor.getNonNullNamespaceResolver());
  mapping.setReferenceClass(generatedClass);
  String mapClassName=property.getType().getRawName();
  mapping.useCollectionClass(ArrayList.class);
  mapping.setAttributeAccessor(new MapValueAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),generatedClass,mapClassName,helper.getClassLoader()));
  return mapping;
}"
65363,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '/':
{
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65364,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65365,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  XMLField toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  XMLField toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}"
65366,"public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  Object objectValue=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(xmlField,objectValue);
}","public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  Object objectValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(xmlField,objectValue);
}"
65367,"/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=xmlField.convertValueBasedOnSchemaType(value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession());
  }
}","/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession());
  }
}"
65368,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    if (unmarshalRecord.isNil() || xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(unmarshalRecord.getAttributes())) {
      return;
    }
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    value=null;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  if (value != null && value.getClass() == ClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    if (unmarshalRecord.isNil() || xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(unmarshalRecord.getAttributes())) {
      return;
    }
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    value=null;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  if (value != null && value.getClass() == ClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
65369,"@Override public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLDescriptor referenceDescriptor=(XMLDescriptor)getMapping().getReferenceDescriptor();
  TreeObjectBuilder treeObjectBuilder=(TreeObjectBuilder)referenceDescriptor.getObjectBuilder();
  MappingNodeValue textMappingNodeValue=(MappingNodeValue)treeObjectBuilder.getRootXPathNode().getTextNode().getNodeValue();
  DatabaseMapping textMapping=textMappingNodeValue.getMapping();
  Object childObject=referenceDescriptor.getInstantiationPolicy().buildNewInstance();
  if (textMapping.isAbstractDirectMapping()) {
    XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMappingNodeValue.getMapping();
    XMLField xmlField=(XMLField)xmlDirectMapping.getField();
    Object realValue=xmlField.convertValueBasedOnSchemaType(value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,unmarshalRecord.getSession(),unmarshalRecord);
    xmlDirectMapping.setAttributeValueInObject(childObject,convertedValue);
  }
 else {
    Object oldChildObject=unmarshalRecord.getCurrentObject();
    XMLCompositeObjectMapping nestedXMLCompositeObjectMapping=(XMLCompositeObjectMapping)textMappingNodeValue.getMapping();
    unmarshalRecord.setCurrentObject(childObject);
    textMappingNodeValue.attribute(unmarshalRecord,namespaceURI,localName,value);
    unmarshalRecord.setCurrentObject(oldChildObject);
  }
  setAttributeValue(childObject,unmarshalRecord);
}","@Override public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLDescriptor referenceDescriptor=(XMLDescriptor)getMapping().getReferenceDescriptor();
  TreeObjectBuilder treeObjectBuilder=(TreeObjectBuilder)referenceDescriptor.getObjectBuilder();
  MappingNodeValue textMappingNodeValue=(MappingNodeValue)treeObjectBuilder.getRootXPathNode().getTextNode().getNodeValue();
  DatabaseMapping textMapping=textMappingNodeValue.getMapping();
  Object childObject=referenceDescriptor.getInstantiationPolicy().buildNewInstance();
  if (textMapping.isAbstractDirectMapping()) {
    XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMappingNodeValue.getMapping();
    XMLField xmlField=(XMLField)xmlDirectMapping.getField();
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,unmarshalRecord.getSession(),unmarshalRecord);
    xmlDirectMapping.setAttributeValueInObject(childObject,convertedValue);
  }
 else {
    Object oldChildObject=unmarshalRecord.getCurrentObject();
    XMLCompositeObjectMapping nestedXMLCompositeObjectMapping=(XMLCompositeObjectMapping)textMappingNodeValue.getMapping();
    unmarshalRecord.setCurrentObject(childObject);
    textMappingNodeValue.attribute(unmarshalRecord,namespaceURI,localName,value);
    unmarshalRecord.setCurrentObject(oldChildObject);
  }
  setAttributeValue(childObject,unmarshalRecord);
}"
65370,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText()) {
    return;
  }
  Object value;
  if (unmarshalRecord.getCharacters().length() == 0) {
    value=this.getMapping().getNullValue();
  }
 else {
    value=unmarshalRecord.getCharacters().toString();
  }
  unmarshalRecord.resetStringBuffer();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,unmarshalRecord.getSession(),unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText()) {
    return;
  }
  Object value;
  if (unmarshalRecord.getCharacters().length() == 0) {
    value=this.getMapping().getNullValue();
  }
 else {
    value=unmarshalRecord.getCharacters().toString();
  }
  unmarshalRecord.resetStringBuffer();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,unmarshalRecord.getSession(),unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}"
65371,"public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  Object realValue=xmlField.convertValueBasedOnSchemaType(value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
  Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,unmarshalRecord.getSession(),unmarshalRecord);
  xmlDirectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),convertedValue);
}","public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  XMLField xmlField=(XMLField)xmlDirectMapping.getField();
  Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
  Object convertedValue=xmlDirectMapping.getAttributeValue(realValue,unmarshalRecord.getSession(),unmarshalRecord);
  xmlDirectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),convertedValue);
}"
65372,"/** 
 * Handle endElement operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's list of target primary key values.  Note that if a reference already exists  for the xmlObjectReferenceMapping's source object instance, we will simply add to the target pk value list.  The Reference object will  is stored on the ReferenceResolver associated with the UnmarshalRecord's session.
 */
public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlField.getLastXPathFragment().nameIsText()) {
    return;
  }
  Object value=unmarshalRecord.getCharacters().toString();
  unmarshalRecord.resetStringBuffer();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  xmlObjectReferenceMapping.buildReference(unmarshalRecord,xmlField,value,unmarshalRecord.getSession());
}","/** 
 * Handle endElement operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's list of target primary key values.  Note that if a reference already exists  for the xmlObjectReferenceMapping's source object instance, we will simply add to the target pk value list.  The Reference object will  is stored on the ReferenceResolver associated with the UnmarshalRecord's session.
 */
public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (!xmlField.getLastXPathFragment().nameIsText()) {
    return;
  }
  Object value=unmarshalRecord.getCharacters().toString();
  unmarshalRecord.resetStringBuffer();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  xmlObjectReferenceMapping.buildReference(unmarshalRecord,xmlField,value,unmarshalRecord.getSession());
}"
65373,"/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's list of target primary key values.  Note that if a reference already exists  for the xmlObjectReferenceMapping's source object instance, we will simply add to the target pk value list.  The Reference object will  is stored on the ReferenceResolver associated with the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=xmlField.convertValueBasedOnSchemaType(value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    xmlObjectReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession());
  }
}","/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's list of target primary key values.  Note that if a reference already exists  for the xmlObjectReferenceMapping's source object instance, we will simply add to the target pk value list.  The Reference object will  is stored on the ReferenceResolver associated with the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    xmlObjectReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession());
  }
}"
65374,"/** 
 * INTERNAL:
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  if (getSchemaType() != null) {
    if (XMLConstants.QNAME_QNAME.equals(getSchemaType())) {
      return xmlConversionManager.buildQNameFromString((String)value,record);
    }
 else {
      Class fieldType=getType();
      if (fieldType == null) {
        fieldType=getJavaClass(getSchemaType());
      }
      return xmlConversionManager.convertObject(value,fieldType,getSchemaType());
    }
  }
  return value;
}","/** 
 * INTERNAL: Called from DOMRecord and XMLReader.  MappingNodeValues call XMLReader which calls this method so that other XMLReader subclasses can override.
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  if (getSchemaType() != null) {
    if (XMLConstants.QNAME_QNAME.equals(getSchemaType())) {
      return xmlConversionManager.buildQNameFromString((String)value,record);
    }
 else {
      Class fieldType=getType();
      if (fieldType == null) {
        fieldType=getJavaClass(getSchemaType());
      }
      return xmlConversionManager.convertObject(value,fieldType,getSchemaType());
    }
  }
  return value;
}"
65375,"/** 
 * Set the element name.  This method will parse the qualified name in an attempt to set the localName fields.  ie: this could be  set to ""someLocalName"" or ""somePrefix:someLocalName""
 * @param name the new local name
 */
public void setLocalName(String name){
  int colonIdx=name.indexOf(XMLConstants.COLON);
  if (colonIdx > -1) {
    this.localName=name.substring(colonIdx + 1);
  }
 else {
    this.localName=name;
  }
}","/** 
 * Set the element name.  This method will parse the qualified name in an attempt to set the localName fields.  ie: this could be  set to ""someLocalName"" or ""somePrefix:someLocalName""
 * @param name the new local name
 */
public void setLocalName(String name){
  if (null == name) {
    this.localName=XMLConstants.EMPTY_STRING;
    return;
  }
  int colonIdx=name.indexOf(XMLConstants.COLON);
  if (colonIdx > -1) {
    this.localName=name.substring(colonIdx + 1);
  }
 else {
    this.localName=name;
  }
}"
65376,"/** 
 * Creates a new <code>AbstractModifyAllQueryBuilder</code>.
 * @param queryContext The context used to query information about the application metadata andcached information
 */
AbstractModifyAllQueryBuilder(JPQLQueryContext queryContext){
  super();
  this.queryContext=queryContext;
}","/** 
 * Creates a new <code>AbstractModifyAllQueryBuilder</code>.
 * @param queryContext The context used to query information about the application metadata andcached information
 * @param query The {@link ModifyAllQuery} to populate by using this visitor to visit the parsedtree representation of the JPQL query
 */
AbstractModifyAllQueryBuilder(JPQLQueryContext queryContext,ModifyAllQuery query){
  super();
  this.query=query;
  this.queryContext=queryContext;
}"
65377,"/** 
 * Returns the <b>JOIN</b> expressions that were part of the range variable declaration in the ordered they were parsed.
 * @return The ordered list of <b>JOIN</b> expressions or an empty collection if none waspresent
 */
public List<Join> getJoins(){
  return (joins == null) ? Collections.<Join>emptyList() : joins;
}","/** 
 * Returns the <b>JOIN</b> expressions that were part of the range variable declaration in the ordered they were parsed.
 * @return The ordered list of <b>JOIN</b> expressions or an empty collection if none was present
 */
public List<Join> getJoins(){
  return (joins == null) ? Collections.<Join>emptyList() : joins;
}"
65378,"void visitAbstractSelectStatement(AbstractSelectStatement expression){
  expression.getFromClause().accept(this);
  expression.getSelectClause().accept(this);
  if (expression.hasWhereClause()) {
    expression.getWhereClause().accept(this);
  }
  if (expression.hasGroupByClause()) {
    expression.getGroupByClause().accept(this);
  }
  if (expression.hasHavingClause()) {
    expression.getHavingClause().accept(this);
  }
}","void visitAbstractSelectStatement(AbstractSelectStatement expression){
  expression.getFromClause().accept(this);
  expression.getSelectClause().accept(this);
  if (expression.hasWhereClause()) {
    expression.getWhereClause().accept(this);
  }
}"
65379,"/** 
 * Creates a new <code>ReadAllQueryVisitor</code>.
 * @param queryContext The context used to query information about the application metadata andcached information
 */
AbstractReadAllQueryVisitor(JPQLQueryContext queryContext){
  super();
  this.queryContext=queryContext;
}","/** 
 * Creates a new <code>ReadAllQueryVisitor</code>.
 * @param queryContext The context used to query information about the application metadata andcached information
 */
AbstractReadAllQueryVisitor(JPQLQueryContext queryContext,ObjectLevelReadQuery query){
  super();
  this.query=query;
  this.queryContext=queryContext;
}"
65380,"void visitAbstractSelectClause(AbstractSelectClause expression){
  if (expression.hasDistinct() && !hasNotCountFunction(expression)) {
    query.useDistinct();
  }
  boolean buildNullForNullPK=hasOneToOneSelected(expression);
  query.setShouldBuildNullForNullPk(buildNullForNullPK);
}","void visitAbstractSelectClause(AbstractSelectClause expression){
  if (expression.hasDistinct()) {
    CountFunctionVisitor visitor=new CountFunctionVisitor();
    expression.accept(visitor);
    if (!visitor.hasCountFunction) {
      query.useDistinct();
    }
  }
  OneToOneSelectedVisitor visitor=new OneToOneSelectedVisitor();
  expression.accept(visitor);
  query.setShouldBuildNullForNullPk(visitor.oneToOneSelected);
}"
65381,"void visitAbstractFromClause(AbstractFromClause expression){
  Expression baseExpression=queryContext.getBaseExpression();
  ExpressionBuilder expressionBuilder=baseExpression.getBuilder();
  query.setExpressionBuilder(expressionBuilder);
  if (query.getReferenceClass() == null) {
    query.setReferenceClass(expressionBuilder.getQueryClass());
    query.changeDescriptor(queryContext.getSession());
  }
}","void visitAbstractFromClause(AbstractFromClause expression){
  Expression baseExpression=queryContext.getBaseExpression();
  ExpressionBuilder expressionBuilder=baseExpression.getBuilder();
  query.setExpressionBuilder(expressionBuilder);
  if (query.getReferenceClass() == null) {
    query.setReferenceClass(expressionBuilder.getQueryClass());
    query.changeDescriptor(queryContext.getSession());
  }
  JoinVisitor visitor=new JoinVisitor();
  expression.accept(visitor);
}"
65382,"/** 
 * {@inheritDoc}
 */
@Override public void visit(OrderByItem expression){
  Expression queryExpression=queryContext.buildExpression(expression.getExpression());
  if (expression.getOrdering() == Ordering.DESC) {
    query.addOrdering(queryExpression.descending());
  }
 else   if (expression.getOrdering() == Ordering.ASC) {
    query.addOrdering(queryExpression.ascending());
  }
 else {
    query.addOrdering(queryExpression);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void visit(ValueExpression expression){
  oneToOneSelected=true;
}"
65383,"private Object buildFragment(Property property,SDODataObject parentObject,SDODataObject value){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  XMLMarshaller xmlMarshaller=((SDOXMLHelper)helperContext.getXMLHelper()).getXmlMarshaller();
  Document doc=xmlPlatform.createDocument();
  XMLRoot root=new XMLRoot();
  root.setObject(value);
  root.setLocalName(property.getName());
  if (((SDOProperty)property).isNamespaceQualified()) {
    root.setNamespaceURI(parentObject.getType().getURI());
  }
  xmlMarshaller.marshal(root,doc);
  return doc.getDocumentElement();
}","private Object buildFragment(Property property,SDODataObject parentObject,SDODataObject value){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  XMLMarshaller xmlMarshaller=((SDOXMLHelper)helperContext.getXMLHelper()).getXmlContext().createMarshaller();
  Document doc=xmlPlatform.createDocument();
  XMLRoot root=new XMLRoot();
  root.setObject(value);
  root.setLocalName(property.getName());
  if (((SDOProperty)property).isNamespaceQualified()) {
    root.setNamespaceURI(parentObject.getType().getURI());
  }
  xmlMarshaller.marshal(root,doc);
  return doc.getDocumentElement();
}"
65384,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(NonELPrefixMapperTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(NonELPrefixMapperTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  return suite;
}"
65385,"public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (JAXBContext.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType().getName();
  }
  throw new PropertyException(key);
}","public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
 else   if (JAXB_FORMATTED_OUTPUT.equals(key)) {
    return xmlMarshaller.isFormattedOutput();
  }
 else   if (JAXB_ENCODING.equals(key)) {
    return xmlMarshaller.getEncoding();
  }
 else   if (JAXB_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getSchemaLocation();
  }
 else   if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
    return xmlMarshaller.getNoNamespaceSchemaLocation();
  }
 else   if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
    return xmlMarshaller.isFragment();
  }
 else   if (JAXBContext.MEDIA_TYPE.equals(key)) {
    return xmlMarshaller.getMediaType().getName();
  }
 else   if (NAMESPACE_PREFIX_MAPPER.equals(key)) {
    return xmlMarshaller.getNamespacePrefixMapper();
  }
 else   if (INDENT_STRING.equals(key) || SUN_INDENT_STRING.equals(key) || SUN_JSE_INDENT_STRING.equals(key)) {
    return xmlMarshaller.getIndentString();
  }
 else   if (CHARACTER_ESCAPE_HANDLER.equals(key)) {
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (XML_DECLARATION.equals(key)) {
    return !xmlMarshaller.isFragment();
  }
 else   if (JAXBContext.JSON_ATTRIBUTE_PREFIX.equals(key)) {
    return xmlMarshaller.getAttributePrefix();
  }
 else   if (JAXBContext.JSON_INCLUDE_ROOT.equals(key)) {
    return xmlMarshaller.isIncludeRoot();
  }
 else   if (JAXBContext.JSON_VALUE_WRAPPER.equals(key)) {
    return xmlMarshaller.getValueWrapper();
  }
 else   if (SUN_CHARACTER_ESCAPE_HANDLER.equals(key) || SUN_JSE_CHARACTER_ESCAPE_HANDLER.equals(key)) {
    if (xmlMarshaller.getCharacterEscapeHandler() instanceof CharacterEscapeHandlerWrapper) {
      CharacterEscapeHandlerWrapper wrapper=(CharacterEscapeHandlerWrapper)xmlMarshaller.getCharacterEscapeHandler();
      return wrapper.getHandler();
    }
    return xmlMarshaller.getCharacterEscapeHandler();
  }
 else   if (SUN_NAMESPACE_PREFIX_MAPPER.equals(key) || SUN_JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
    NamespacePrefixMapperWrapper wrapper=(NamespacePrefixMapperWrapper)xmlMarshaller.getNamespacePrefixMapper();
    return wrapper.getPrefixMapper();
  }
  throw new PropertyException(key);
}"
65386,"private String tab(){
  if (tab == null) {
    tab=getMarshaller().getIndentString();
  }
  return tab;
}","private byte[] tab(){
  if (tab == null) {
    String sTab=getMarshaller().getIndentString();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    writeValue(sTab,true,false,baos);
    tab=baos.toByteArray();
  }
  return tab;
}"
65387,"private void outputStreamWriteTab(){
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),true);
  }
}","private void outputStreamWriteTab(){
  for (int x=0; x < numberOfTabs; x++) {
    outputStreamWrite(tab());
  }
}"
65388,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writeValue(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65389,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writeValue(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65390,"private String tab(){
  if (tab == null) {
    tab=getMarshaller().getIndentString();
  }
  return tab;
}","private String tab(){
  if (tab == null) {
    CharArrayWriter out=new CharArrayWriter();
    writeValue(getMarshaller().getIndentString(),false,out);
    out.close();
    tab=out.toString();
  }
  return tab;
}"
65391,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writeValue(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65392,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writeValue(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65393,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,true,true);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,true,true,this.outputStream);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65394,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))));
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)));
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)));
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)));
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)));
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)));
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)));
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)));
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP);
            break;
          }
case '<':
{
          outputStreamWrite(LT);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT);
        break;
      }
default :
    outputStreamWrite((byte)character);
}
}
 else {
outputStreamWrite((byte)character);
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute,OutputStream os){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)),os);
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)),os);
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)),os);
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)),os);
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)),os);
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP,os);
            break;
          }
case '<':
{
          outputStreamWrite(LT,os);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT,os);
        break;
      }
default :
    outputStreamWrite((byte)character,os);
}
}
 else {
outputStreamWrite((byte)character,os);
}
}
}
}"
65395,"protected void outputStreamWrite(byte aByte){
  if (bufferIndex == BUFFER_SIZE) {
    try {
      outputStream.write(buffer,0,BUFFER_SIZE);
      bufferIndex=0;
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  buffer[bufferIndex++]=aByte;
}","protected void outputStreamWrite(byte aByte,OutputStream os){
  if (os != this.outputStream) {
    try {
      os.write(aByte);
      return;
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  if (bufferIndex == BUFFER_SIZE) {
    try {
      os.write(buffer,0,BUFFER_SIZE);
      bufferIndex=0;
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  buffer[bufferIndex++]=aByte;
}"
65396,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    writer.write(' ');
    writer.write(qName);
    writer.write('=');
    writer.write('\""');
    writeValue(value,true);
    writer.write('\""');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    writer.write(' ');
    writer.write(qName);
    writer.write('=');
    writer.write('\""');
    writeValue(value,true,this.writer);
    writer.write('\""');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65397,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65398,"public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class,MyTestType.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setIgnoringElementContentWhitespace(true);
  builderFactory.setNamespaceAware(true);
  DocumentBuilder parser=builderFactory.newDocumentBuilder();
  InputStream stream=new FileInputStream(new File(""String_Node_Str""));
  Document control=parser.parse(stream);
  stream=new FileInputStream(new File(tmpdir + ""String_Node_Str""));
  Document test=parser.parse(stream);
  JAXBXMLComparer xmlComparer=new JAXBXMLComparer();
  assertTrue(""String_Node_Str"",xmlComparer.isSchemaEqual(control,test));
}","public void testEmployeeSchemaGeneration() throws Exception {
  boolean exception=false;
  String msg=null;
  String src=""String_Node_Str"";
  String tmpdir=System.getenv(""String_Node_Str"");
  if (tmpdir == null) {
    tmpdir=System.getProperty(""String_Node_Str"");
  }
  try {
    Class[] jClasses=new Class[]{Address.class,Employee.class,PhoneNumber.class,Department.class,MyTestType.class};
    Generator gen=new Generator(new JavaModelInputImpl(jClasses,new JavaModelImpl(Thread.currentThread().getContextClassLoader())));
    gen.generateSchemaFiles(tmpdir,null);
    SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
    Schema theSchema=sFact.newSchema(new File(tmpdir + ""String_Node_Str""));
    Validator validator=theSchema.newValidator();
    StreamSource ss=new StreamSource(new File(src));
    validator.validate(ss);
  }
 catch (  Exception ex) {
    exception=true;
    msg=ex.toString();
  }
  assertTrue(""String_Node_Str"" + msg,exception == false);
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setIgnoringElementContentWhitespace(true);
  builderFactory.setNamespaceAware(true);
  DocumentBuilder parser=builderFactory.newDocumentBuilder();
  InputStream stream=new FileInputStream(new File(""String_Node_Str""));
  Document control=parser.parse(stream);
  stream=new FileInputStream(new File(tmpdir + ""String_Node_Str""));
  Document test=parser.parse(stream);
  JAXBXMLComparer xmlComparer=new JAXBXMLComparer();
  assertTrue(""String_Node_Str"",xmlComparer.isSchemaEqual(control,test));
}"
65399,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  suite.addTest(new InheritedModelJunitTest(""String_Node_Str""));
  return suite;
}"
65400,"public byte[] transform(ClassLoader loader,String className,Class classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws IllegalClassFormatException {
  Map classDetailsMap=this.classDetailsMap;
  Session session=this.session;
  if ((classDetailsMap == null) || (session == null)) {
    return null;
  }
  try {
    ClassDetails classDetails=(ClassDetails)classDetailsMap.get(Helper.toSlashedClassName(className));
    if (classDetails != null) {
      ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
      ClassReader classReader=new ClassReader(classfileBuffer);
      ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
      ClassWeaver classWeaver=new ClassWeaver(classWriter,classDetails);
      classReader.accept(classWeaver,0);
      if (classWeaver.alreadyWeaved) {
        ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        return null;
      }
      if (classWeaver.weaved) {
        byte[] bytes=classWriter.toByteArray();
        String outputPath=System.getProperty(SystemProperties.WEAVING_OUTPUT_PATH,""String_Node_Str"");
        if (!outputPath.equals(""String_Node_Str"")) {
          outputFile(className,bytes,outputPath);
        }
        if (classWeaver.weavedPersistenceEntity) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedChangeTracker) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedLazy) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedFetchGroups) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        return bytes;
      }
      ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
    }
  }
 catch (  Throwable exception) {
    ((AbstractSession)session).log(SessionLog.WARNING,SessionLog.WEAVER,EXCEPTION_WHILE_WEAVING,className,exception);
    ((AbstractSession)session).logThrowable(SessionLog.FINEST,SessionLog.WEAVER,exception);
  }
  return null;
}","public byte[] transform(ClassLoader loader,String className,Class classBeingRedefined,ProtectionDomain protectionDomain,byte[] classfileBuffer) throws IllegalClassFormatException {
  Map classDetailsMap=this.classDetailsMap;
  Session session=this.session;
  if ((classDetailsMap == null) || (session == null)) {
    return null;
  }
  try {
    ClassDetails classDetails=(ClassDetails)classDetailsMap.get(Helper.toSlashedClassName(className));
    if (classDetails != null) {
      ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
      ClassReader classReader=new ClassReader(classfileBuffer);
      ClassWriter classWriter=new ComputeClassWriter(loader,ClassWriter.COMPUTE_FRAMES);
      ClassWeaver classWeaver=new ClassWeaver(classWriter,classDetails);
      classReader.accept(classWeaver,0);
      if (classWeaver.alreadyWeaved) {
        ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        return null;
      }
      if (classWeaver.weaved) {
        byte[] bytes=classWriter.toByteArray();
        String outputPath=System.getProperty(SystemProperties.WEAVING_OUTPUT_PATH,""String_Node_Str"");
        if (!outputPath.equals(""String_Node_Str"")) {
          outputFile(className,bytes,outputPath);
        }
        if (classWeaver.weavedPersistenceEntity) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedChangeTracker) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedLazy) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        if (classWeaver.weavedFetchGroups) {
          ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        }
        ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
        return bytes;
      }
      ((AbstractSession)session).log(SessionLog.FINEST,SessionLog.WEAVER,""String_Node_Str"",className);
    }
  }
 catch (  Throwable exception) {
    ((AbstractSession)session).log(SessionLog.WARNING,SessionLog.WEAVER,EXCEPTION_WHILE_WEAVING,className,exception);
    ((AbstractSession)session).logThrowable(SessionLog.FINEST,SessionLog.WEAVER,exception);
  }
  return null;
}"
65401,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (!xmlCompositeDirectCollectionMapping.usesSingleNode() && xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if ((xmlCompositeDirectCollectionMapping.usesSingleNode() && !xmlCompositeDirectCollectionMapping.isDefaultEmptyContainer()) || xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65402,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((XMLRoot)originalValue).getSchemaType();
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters(qname,value,null,false);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65403,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65404,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((XMLRoot)originalValue).getSchemaType();
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    marshalRecord.characters(qname,value,null,false);
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65405,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor referenceDescriptor=super.findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,mapping,policy);
  if (referenceDescriptor == null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    QName qname=new QName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName());
    referenceDescriptor=xmlContext.getDescriptor(qname);
    if (referenceDescriptor != null && referenceDescriptor.isWrapper()) {
      referenceDescriptor=null;
    }
  }
  return referenceDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor referenceDescriptor=super.findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,mapping,policy);
  if (referenceDescriptor == null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    XPathQName xpathQName=new XPathQName(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),unmarshalRecord.isNamespaceAware());
    referenceDescriptor=xmlContext.getDescriptor(xpathQName);
    if (referenceDescriptor != null && referenceDescriptor.isWrapper()) {
      referenceDescriptor=null;
    }
  }
  return referenceDescriptor;
}"
65406,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(descriptor.getJavaClass() == value.getClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(descriptor.getJavaClass() == value.getClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65407,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65408,"public void characters(char[] ch,int start,int length) throws SAXException {
  if (isProcessingCData) {
    cdata(new String(ch,start,length));
    return;
  }
  if (new String(ch).trim().length() == 0) {
    return;
  }
  super.characters(ch,start,length);
  isLastEventText=true;
  complexType=false;
}","/** 
 * INTERNAL:
 */
public void characters(String value){
  super.characters(value);
  isLastEventText=true;
  complexType=false;
}"
65409,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writeValue(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XPathFragment xPathFragment=new XPathFragment(localName);
  xPathFragment.setNamespaceURI(namespaceURI);
  JSONFormattedWriterRecord.this.endElement(xPathFragment,namespaceResolver);
}"
65410,"WriterRecordContentHandler(){
  prefixMappings=new HashMap<String,String>();
}","WriterRecordContentHandler(){
}"
65411,"protected void writeComment(char[] chars,int start,int length){
  try {
    writer.write('<');
    writer.write('!');
    writer.write('-');
    writer.write('-');
    for (int x=start; x < length; x++) {
      writer.write(chars[x]);
    }
    writer.write('-');
    writer.write('-');
    writer.write('>');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writeComment(char[] chars,int start,int length){
}"
65412,"public void characters(CharSequence characters) throws SAXException {
  if (isProcessingCData) {
    cdata(characters.toString());
    return;
  }
  if (isStartElementOpen) {
    try {
      writer.write('>');
      isStartElementOpen=false;
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  writeValue(characters.toString());
}","public void characters(CharSequence characters) throws SAXException {
  JSONWriterRecord.this.characters(characters.toString());
}"
65413,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
    }
 else {
      writer.write('<');
      writer.write('/');
      writer.write(qName);
      writer.write('>');
    }
    isStartElementOpen=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XPathFragment xPathFragment=new XPathFragment(localName);
  xPathFragment.setNamespaceURI(namespaceURI);
  JSONWriterRecord.this.endElement(xPathFragment,namespaceResolver);
}"
65414,"public void startPrefixMapping(String prefix,String uri) throws SAXException {
  String namespaceUri=getNamespaceResolver().resolveNamespacePrefix(prefix);
  if (namespaceUri == null || !namespaceUri.equals(uri)) {
    prefixMappings.put(prefix,uri);
  }
}","public void startPrefixMapping(String prefix,String uri) throws SAXException {
}"
65415,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    writer.write('<');
    writer.write(qName);
    isStartElementOpen=true;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  XPathFragment xPathFragment=new XPathFragment(localName);
  xPathFragment.setNamespaceURI(namespaceURI);
  openStartElement(xPathFragment,namespaceResolver);
}"
65416,"protected void writeCharacters(char[] chars,int start,int length){
  try {
    for (int x=start; x < length; x++) {
      writer.write(chars[x]);
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","protected void writeCharacters(char[] chars,int start,int length){
  try {
    characters(chars,start,length);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65417,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
}"
65418,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}"
65419,"/** 
 * PUBLIC: Return the default root element name for the ClassDescriptor This value is stored in place of a table name This value is mandatory for all root objects
 * @param newDefaultRootElement the default root element to specify on this ClassDescriptor
 */
public void setDefaultRootElement(String newDefaultRootElement){
  if (setDefaultRootElementField(newDefaultRootElement)) {
    int index=getTableNames().indexOf(newDefaultRootElement);
    if (index == 0) {
      return;
    }
 else     if (index >= 0) {
      getTables().remove(index);
      getTables().add(0,new DatabaseTable(newDefaultRootElement));
    }
 else {
      getTables().add(0,new DatabaseTable(newDefaultRootElement));
    }
  }
}","/** 
 * PUBLIC: Return the default root element name for the ClassDescriptor This value is stored in place of a table name This value is mandatory for all root objects
 * @param newDefaultRootElement the default root element to specify on this ClassDescriptor
 */
public void setDefaultRootElement(String newDefaultRootElement){
  if (setDefaultRootElementField(newDefaultRootElement)) {
    int index=getTableNames().indexOf(newDefaultRootElement);
    if (index == 0) {
      return;
    }
    DatabaseTable databaseTable=new DatabaseTable();
    databaseTable.setUseDelimiters(false);
    databaseTable.setName(newDefaultRootElement);
    if (index >= 0) {
      getTables().remove(index);
      getTables().add(0,databaseTable);
    }
 else {
      getTables().add(0,databaseTable);
    }
  }
}"
65420,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLField xmlField=null;
    if (isCollection) {
      xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    }
 else {
      xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    }
    if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
      XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
      Object data=null;
      Class attributeClassification=null;
      if (isCollection) {
        attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
      }
 else {
        attributeClassification=mapping.getAttributeClassification();
      }
      if (attachmentUnmarshaller == null) {
        throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
      }
      if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
        data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
      }
 else {
        data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
      }
      data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
      if (this.converter != null) {
        Converter converter=this.converter;
        if (converter instanceof XMLConverter) {
          data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
        }
 else {
          data=converter.convertDataValueToObjectValue(data,record.getSession());
        }
      }
      if (isCollection) {
        if (data != null) {
          record.addAttributeValue((ContainerValue)nodeValue,data);
        }
      }
 else {
        record.setAttributeValue(data,mapping);
      }
      if (!xmlField.isSelfField()) {
        XMLReader xmlReader=record.getXMLReader();
        xmlReader.setContentHandler(record);
        xmlReader.setLexicalHandler(record);
      }
    }
 else {
      if (!xmlField.isSelfField()) {
        XMLReader xmlReader=record.getXMLReader();
        xmlReader.setContentHandler(record);
        xmlReader.setLexicalHandler(record);
        record.endElement(namespaceURI,localName,qName);
      }
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName)) {
    if (record.isNamespaceAware() && !XMLConstants.XOP_URL.equals(namespaceURI)) {
      return;
    }
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else   if (c_id == null) {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
65421,"@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(XMLConstants.EMPTY_STRING,HREF_ATTRIBUTE_NAME);
  }
 else   if (c_id == null) {
    XMLReader xmlReader=record.getXMLReader();
    xmlReader.setContentHandler(record);
    xmlReader.setLexicalHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}","@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName)) {
    if (record.isNamespaceAware()) {
      if (XMLConstants.XOP_URL.equals(namespaceURI)) {
        this.c_id=atts.getValue(XMLConstants.EMPTY_STRING,HREF_ATTRIBUTE_NAME);
      }
    }
 else {
      this.c_id=atts.getValue(XMLConstants.EMPTY_STRING,HREF_ATTRIBUTE_NAME);
    }
  }
 else   if (c_id == null) {
    XMLReader xmlReader=record.getXMLReader();
    xmlReader.setContentHandler(record);
    xmlReader.setLexicalHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}"
65422,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65423,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true,true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true,true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position.isNeedToOpenComplex()) {
        writer.write('{');
        position.setNeedToOpenComplex(false);
        position.setNeedToCloseComplex(true);
      }
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.writeKey(xPathFragment);
      if (position != null && position.isCollection()) {
        writer.write('[');
        writer.write(' ');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position.isNeedToOpenComplex()) {
        writer.write('{');
        position.setNeedToOpenComplex(false);
        position.setNeedToCloseComplex(true);
      }
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (newLevel != null && nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
        }
 else {
          writer.write('[');
          writer.write(' ');
        }
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65424,"/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true,true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true,true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position != null && position.needToOpenComplex) {
        writer.write('{');
        position.needToOpenComplex=false;
        position.needToCloseComplex=true;
      }
      writeKey(xPathFragment);
      if ((xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().nameIsText()) && position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position != null && position.needToOpenComplex) {
        writer.write('{');
        position.needToOpenComplex=false;
        position.needToCloseComplex=true;
      }
      writeKey(xPathFragment);
      if (position != null && position.isEmptyCollection()) {
        XPathFragment nextFragment=xPathFragment.getNextFragment();
        if (nextFragment != null && !nextFragment.nameIsText() && !nextFragment.isAttribute()) {
          newLevel.setEmptyCollection(true);
          newLevel.setCollection(true);
          position.setEmptyCollection(false);
        }
 else {
          writer.write('[');
          position.setEmptyCollection(false);
        }
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65425,"@Test public void createGroupTypeTest(){
  XMLUnmarshaller unmarshaller=xrService.getXMLContext().createUnmarshaller();
  Object personType1=unmarshaller.unmarshal(new StringReader(PTYPE_INPUT_XML));
  Object personType2=unmarshaller.unmarshal(new StringReader(PTYPE_INPUT2_XML));
  Object personType3=unmarshaller.unmarshal(new StringReader(PTYPE_INPUT3_XML));
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",personType1);
  invocation.setParameter(""String_Node_Str"",personType2);
  invocation.setParameter(""String_Node_Str"",personType3);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(NEW_PTABLE_OUTPUT2_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void createGroupTypeTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",""String_Node_Str"");
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(NEW_ETABLE_OUTPUT2_XML));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65426,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PERSONTYPE,ddlDebug);
    runDdl(conn,CREATE_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PERSONTYPE,ddlDebug);
    runDdl(conn,CREATE_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_MYEMPOBJECT,ddlDebug);
    runDdl(conn,CREATE_MYEMPOBJECT_TABLE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65427,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE,ddlDebug);
    runDdl(conn,DROP_MYEMPOBJECT_TABLE,ddlDebug);
    runDdl(conn,DROP_MYEMPOBJECT,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE,ddlDebug);
  }
}"
65428,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectName,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias,objectName);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        String targetTypeName2=fType.getEnclosedType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=ordt2 == null;
        if (buildDescriptor) {
          ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
        }
        if (fType.getEnclosedType().isObjectType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForObjectTypeArg(fType.getEnclosedType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
 else         if (fType.getEnclosedType().isVArrayType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForVArrayArg(fType.getEnclosedType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddArrayMapping(ordt,lFieldName,fieldName,getStructureNameForField(fType,null));
        }
 else         if (fType.getEnclosedType().isObjectTableType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
          }
          ObjectType nestedType=(ObjectType)((ObjectTableType)fType.getEnclosedType()).getEnclosedType();
          String nestedTypeAlias=nestedType.getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddObjectArrayMapping(ordt,lFieldName,fieldName,nestedTypeName,nestedTypeAlias.toUpperCase());
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectName,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias,objectName);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        String targetTypeName2=fType.getEnclosedType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=ordt2 == null;
        if (buildDescriptor) {
          ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
        }
        if (fType.getEnclosedType().isObjectType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForObjectTypeArg(fType.getEnclosedType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
 else         if (fType.getEnclosedType().isVArrayType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForVArrayArg(fType.getEnclosedType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddArrayMapping(ordt,lFieldName,fieldName,getStructureNameForField(fType,null));
        }
 else         if (fType.getEnclosedType().isObjectTableType()) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForObjectTableTypeArg(fType.getEnclosedType(),orProject,targetTypeName2,alias);
          }
          ObjectType nestedType=(ObjectType)((ObjectTableType)fType.getEnclosedType()).getEnclosedType();
          String nestedTypeAlias=nestedType.getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddObjectArrayMapping(ordt,lFieldName,fieldName,nestedTypeName,nestedTypeAlias.toUpperCase());
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}"
65429,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,objectName,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        String targetTypeName2=field.getEnclosedType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=xdesc2 == null;
        if (buildDescriptor) {
          xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
        }
        if (field.getEnclosedType().isObjectType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForObjectTypeArg(field.getEnclosedType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
 else         if (field.getEnclosedType().isVArrayType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForVArrayArg(field.getEnclosedType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeDirectCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + TEXT,getAttributeClassForDatabaseType(field.getEnclosedType()));
        }
 else         if (field.getEnclosedType().isObjectTableType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
          }
          String nestedTypeAlias=((ObjectTableType)field.getEnclosedType()).getEnclosedType().getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddXMLCompositeCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + ITEM_MAPPING_NAME,nestedTypeName);
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,objectName,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        String targetTypeName2=field.getEnclosedType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=xdesc2 == null;
        if (buildDescriptor) {
          xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
        }
        if (field.getEnclosedType().isObjectType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForObjectTypeArg(field.getEnclosedType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
 else         if (field.getEnclosedType().isVArrayType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForVArrayArg(field.getEnclosedType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeDirectCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + TEXT,getAttributeClassForDatabaseType(field.getEnclosedType()));
        }
 else         if (field.getEnclosedType().isObjectTableType()) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForObjectTableTypeArg(field.getEnclosedType(),oxProject,targetTypeName2,alias);
          }
          String nestedTypeAlias=((ObjectTableType)field.getEnclosedType()).getEnclosedType().getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddXMLCompositeCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + ITEM_MAPPING_NAME,nestedTypeName);
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}"
65430,"/** 
 * Set this Unmarshaller's custom IDResolver.
 * @see IDResolver
 * @since 2.4
 */
public void setIDResolver(IDResolver idResolver){
  this.idResolver=idResolver;
}","/** 
 * Set this Unmarshaller's custom IDResolver.
 * @see IDResolver
 * @since 2.3.3
 */
public void setIDResolver(IDResolver idResolver){
  this.idResolver=idResolver;
}"
65431,"/** 
 * Return this Unmarshaller's custom IDResolver.
 * @see IDResolver
 * @since 2.4
 * @return the custom IDResolver, or null if one has not been specified.
 */
public IDResolver getIDResolver(){
  return idResolver;
}","/** 
 * Return this Unmarshaller's custom IDResolver.
 * @see IDResolver
 * @since 2.3.3
 * @return the custom IDResolver, or null if one has not been specified.
 */
public IDResolver getIDResolver(){
  return idResolver;
}"
65432,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PERSONTYPE,ddlDebug);
    runDdl(conn,CREATE_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PERSONTYPE,ddlDebug);
    runDdl(conn,CREATE_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE,ddlDebug);
    runDdl(conn,CREATE_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE_PROC,ddlDebug);
    runDdl(conn,CREATE_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,CREATE_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65433,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE2_FUNC,ddlDebug);
    runDdl(conn,DROP_ADD_PERSONTYPE_TO_TABLE_PROC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE2_FUNC,ddlDebug);
    runDdl(conn,DROP_GET_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE_PROC,ddlDebug);
    runDdl(conn,DROP_GROUPTYPE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_PERSONTYPE,ddlDebug);
  }
}"
65434,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectName,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias,objectName);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        String targetTypeName2=fType.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=ordt2 == null;
        if (buildDescriptor) {
          ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
        }
        if (fType.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForObjectTypeArg(fType.getDataType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
 else         if (fType.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForVArrayArg(fType.getDataType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddArrayMapping(ordt,lFieldName,fieldName,getStructureNameForField(fType,null));
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectName,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias,objectName);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        String targetTypeName2=fType.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=ordt2 == null;
        if (buildDescriptor) {
          ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
        }
        if (fType.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForObjectTypeArg(fType.getDataType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
 else         if (fType.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToORProjectForVArrayArg(fType.getDataType(),orProject,ordt2.getJavaClassName(),alias);
          }
          buildAndAddArrayMapping(ordt,lFieldName,fieldName,getStructureNameForField(fType,null));
        }
 else         if (fType.getDataType() instanceof ObjectTableType) {
          if (buildDescriptor) {
            ordt2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
          }
          ObjectType nestedType=(ObjectType)((ObjectTableType)fType.getDataType()).getEnclosedType();
          String nestedTypeAlias=nestedType.getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddObjectArrayMapping(ordt,lFieldName,fieldName,nestedTypeName,nestedTypeAlias.toUpperCase());
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}"
65435,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,objectName,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        String targetTypeName2=field.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=xdesc2 == null;
        if (buildDescriptor) {
          xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
        }
        if (field.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForObjectTypeArg(field.getDataType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
 else         if (field.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForVArrayArg(field.getDataType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeDirectCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + TEXT,getAttributeClassForDatabaseType(field.getDataType()));
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,objectName,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        String targetTypeName2=field.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=xdesc2 == null;
        if (buildDescriptor) {
          xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
        }
        if (field.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForObjectTypeArg(field.getDataType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
 else         if (field.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
            addToOXProjectForVArrayArg(field.getDataType(),oxProject,xdesc2.getJavaClassName(),alias);
          }
          buildAndAddXMLCompositeDirectCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + TEXT,getAttributeClassForDatabaseType(field.getDataType()));
        }
 else         if (field.getDataType() instanceof ObjectTableType) {
          if (buildDescriptor) {
            xdesc2.setJavaClassName(getGeneratedJavaClassName(alias,dbwsBuilder.getProjectName()));
          }
          String nestedTypeAlias=((ObjectTableType)field.getDataType()).getEnclosedType().getTypeName().toLowerCase();
          String nestedTypeName=getGeneratedJavaClassName(nestedTypeAlias,dbwsBuilder.getProjectName());
          buildAndAddXMLCompositeCollectionMapping(xdesc,lFieldName,lFieldName + SLASH + ITEM_MAPPING_NAME,nestedTypeName);
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}"
65436,"public String getPackageName(){
  if (jClass.getPackage() != null) {
    return jClass.getPackage().getName();
  }
 else {
    String className=jClass.getCanonicalName();
    if (className != null) {
      int index=className.lastIndexOf(""String_Node_Str"");
      if (index > -1) {
        return className.substring(0,index);
      }
    }
  }
  return null;
}","public String getPackageName(){
  if (jClass.getPackage() != null) {
    return jClass.getPackage().getName();
  }
 else {
    Class nonInnerClass=jClass;
    Class enclosingClass=jClass.getEnclosingClass();
    while (enclosingClass != null) {
      nonInnerClass=enclosingClass;
      enclosingClass=nonInnerClass.getEnclosingClass();
    }
    String className=nonInnerClass.getCanonicalName();
    if (className != null) {
      int index=className.lastIndexOf(""String_Node_Str"");
      if (index > -1) {
        return className.substring(0,index);
      }
    }
  }
  return null;
}"
65437,"protected void updateNamespaces(QName qname,MarshalRecord marshalRecord,XMLField xmlField){
  if (qname != null) {
    if (xmlField != null) {
      if (xmlField.isTypedTextField()) {
        if (xmlField.getSchemaType() == null) {
          if (qname.equals(XMLConstants.STRING_QNAME)) {
            return;
          }
        }
 else {
          if (xmlField.isSchemaType(qname)) {
            return;
          }
        }
      }
 else {
        return;
      }
    }
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
    if ((prefix == null) || prefix.length() == 0) {
      if (XMLConstants.SCHEMA_URL.equals(qname.getNamespaceURI())) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      }
      marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,qname.getNamespaceURI());
    }
    String typeValue=prefix + XMLConstants.COLON + qname.getLocalPart();
    addTypeAttribute(marshalRecord,typeValue);
  }
}","protected void updateNamespaces(QName qname,MarshalRecord marshalRecord,XMLField xmlField){
  if (qname != null) {
    if (xmlField != null) {
      if (xmlField.isTypedTextField()) {
        if (xmlField.getSchemaType() == null) {
          if (qname.equals(XMLConstants.STRING_QNAME)) {
            return;
          }
        }
 else {
          if (xmlField.isSchemaType(qname)) {
            return;
          }
        }
      }
 else {
        return;
      }
    }
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(qname.getNamespaceURI());
    if ((prefix == null) || prefix.length() == 0) {
      if (XMLConstants.SCHEMA_URL.equals(qname.getNamespaceURI())) {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_PREFIX);
      }
 else {
        prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      }
      marshalRecord.namespaceDeclaration(prefix,qname.getNamespaceURI());
    }
    String typeValue=prefix + XMLConstants.COLON + qname.getLocalPart();
    addTypeAttribute(marshalRecord,typeValue);
  }
}"
65438,"protected void addTypeAttribute(MarshalRecord marshalRecord,String typeValue){
  String xsiPrefix=null;
  if (marshalRecord.getNamespaceResolver() != null) {
    xsiPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  if (xsiPrefix == null) {
    xsiPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}","protected void addTypeAttribute(MarshalRecord marshalRecord,String typeValue){
  String xsiPrefix=null;
  if (marshalRecord.getNamespaceResolver() != null) {
    xsiPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  if (xsiPrefix == null) {
    xsiPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}"
65439,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=directMapping.getFieldValue(objectValue,session);
  if ((null == fieldValue) || (null == namespaceResolver)) {
    return false;
  }
  XMLField xmlField=(XMLField)directMapping.getField();
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  if (null == schemaType) {
    return false;
  }
  if (xmlField.getSchemaType() == null) {
    if (schemaType.equals(XMLConstants.STRING_QNAME)) {
      return false;
    }
  }
 else {
    if (xmlField.isSchemaType(schemaType)) {
      return false;
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  String typeQName=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL) + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE;
  String schemaTypePrefix=namespaceResolver.resolveNamespaceURI(schemaType.getNamespaceURI());
  if (schemaTypePrefix == null) {
    if (XMLConstants.SCHEMA_URL.equals(schemaType.getNamespaceURI())) {
      schemaTypePrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_PREFIX);
    }
 else {
      schemaTypePrefix=namespaceResolver.generatePrefix();
    }
    marshalRecord.attribute(XMLConstants.XMLNS_URL,schemaTypePrefix,XMLConstants.XMLNS + XMLConstants.COLON + schemaTypePrefix,schemaType.getNamespaceURI());
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeQName,schemaTypePrefix + XMLConstants.COLON + schemaType.getLocalPart());
  marshalRecord.closeStartGroupingElements(groupingFragment);
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=directMapping.getFieldValue(objectValue,session);
  if ((null == fieldValue) || (null == namespaceResolver)) {
    return false;
  }
  XMLField xmlField=(XMLField)directMapping.getField();
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  if (null == schemaType) {
    return false;
  }
  if (xmlField.getSchemaType() == null) {
    if (schemaType.equals(XMLConstants.STRING_QNAME)) {
      return false;
    }
  }
 else {
    if (xmlField.isSchemaType(schemaType)) {
      return false;
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  String typeQName=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL) + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE;
  String schemaTypePrefix=namespaceResolver.resolveNamespaceURI(schemaType.getNamespaceURI());
  if (schemaTypePrefix == null) {
    if (XMLConstants.SCHEMA_URL.equals(schemaType.getNamespaceURI())) {
      schemaTypePrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_PREFIX);
    }
 else {
      schemaTypePrefix=namespaceResolver.generatePrefix();
    }
    marshalRecord.namespaceDeclaration(schemaTypePrefix,schemaType.getNamespaceURI());
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeQName,schemaTypePrefix + XMLConstants.COLON + schemaType.getLocalPart());
  marshalRecord.closeStartGroupingElements(groupingFragment);
  return true;
}"
65440,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  while (cp.hasNext(iter)) {
    Map.Entry entry=(Map.Entry)cp.nextEntry(iter,session);
    Object key=entry.getKey();
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=entry.getValue().toString();
      String qualifiedName=name.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && prefix.length() > 0) {
          qualifiedName=prefix + XMLConstants.COLON + qualifiedName;
        }
 else         if (name.getNamespaceURI() != null && name.getNamespaceURI().length() > 0) {
          String generatedPrefix=nr.generatePrefix();
          if (marshalRecord.hasCustomNamespaceMapper()) {
            String customPrefix=marshalRecord.getMarshaller().getNamespacePrefixMapper().getPreferredPrefix(name.getNamespaceURI(),generatedPrefix,true);
            if (customPrefix != null && customPrefix.length() > 0) {
              generatedPrefix=customPrefix;
            }
          }
          qualifiedName=generatedPrefix + XMLConstants.COLON + qualifiedName;
          nr.put(generatedPrefix,name.getNamespaceURI());
          extraNamespaces.add(generatedPrefix);
          marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedPrefix,XMLConstants.XMLNS + XMLConstants.COLON + generatedPrefix,name.getNamespaceURI());
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    marshalRecord.getNamespaceResolver().removeNamespace((String)extraNamespaces.get(i));
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  while (cp.hasNext(iter)) {
    Map.Entry entry=(Map.Entry)cp.nextEntry(iter,session);
    Object key=entry.getKey();
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=entry.getValue().toString();
      String qualifiedName=name.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && prefix.length() > 0) {
          qualifiedName=prefix + XMLConstants.COLON + qualifiedName;
        }
 else         if (name.getNamespaceURI() != null && name.getNamespaceURI().length() > 0) {
          String generatedPrefix=nr.generatePrefix();
          if (marshalRecord.hasCustomNamespaceMapper()) {
            String customPrefix=marshalRecord.getMarshaller().getNamespacePrefixMapper().getPreferredPrefix(name.getNamespaceURI(),generatedPrefix,true);
            if (customPrefix != null && customPrefix.length() > 0) {
              generatedPrefix=customPrefix;
            }
          }
          qualifiedName=generatedPrefix + XMLConstants.COLON + qualifiedName;
          nr.put(generatedPrefix,name.getNamespaceURI());
          extraNamespaces.add(generatedPrefix);
          marshalRecord.namespaceDeclaration(generatedPrefix,name.getNamespaceURI());
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    marshalRecord.getNamespaceResolver().removeNamespace((String)extraNamespaces.get(i));
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}"
65441,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65442,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65443,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=XMLConstants.EMPTY_STRING;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=XMLConstants.EMPTY_STRING;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}"
65444,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
      if (xmlRoot.getNamespaceURI() != null && xmlRoot.getNamespaceURI().length() > 0) {
        xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
      }
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
      if (xmlRoot.getNamespaceURI() != null && xmlRoot.getNamespaceURI().length() > 0) {
        xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
      }
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65445,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment != null && nextFragment.isAttribute()) {
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.attribute(nextFragment,namespaceResolver,value,schemaType);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.characters(schemaType,value,null,xmlCompositeDirectCollectionMapping.isCDATA());
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    return true;
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
      return true;
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.namespaceDeclaration(prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment != null && nextFragment.isAttribute()) {
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.attribute(nextFragment,namespaceResolver,value,schemaType);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.characters(schemaType,value,null,xmlCompositeDirectCollectionMapping.isCDATA());
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    return true;
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
      return true;
    }
  }
  return false;
}"
65446,"private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"")) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}","private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"")) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.namespaceDeclaration(prefix,namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}"
65447,"protected void addTypeAttribute(XMLDescriptor descriptor,MarshalRecord marshalRecord,String schemaContext){
  String typeValue=schemaContext.substring(1);
  String xsiPrefix=null;
  if (descriptor.getNamespaceResolver() != null) {
    xsiPrefix=descriptor.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  if (xsiPrefix == null) {
    xsiPrefix=descriptor.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}","protected void addTypeAttribute(XMLDescriptor descriptor,MarshalRecord marshalRecord,String schemaContext){
  String typeValue=schemaContext.substring(1);
  String xsiPrefix=null;
  if (descriptor.getNamespaceResolver() != null) {
    xsiPrefix=descriptor.getNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  if (xsiPrefix == null) {
    xsiPrefix=descriptor.getNamespaceResolver().generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
  marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,typeValue);
}"
65448,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.namespaceDeclaration(XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65449,"/** 
 * INTERNAL: Private function to process or create an entry in the NamespaceResolver for the xsi prefix.
 * @param namespaceResolver
 * @return xsi prefix
 */
protected String processNamespaceResolverForXSIPrefix(NamespaceResolver namespaceResolver,MarshalRecord marshalRecord){
  String xsiPrefix;
  if (null == namespaceResolver) {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    namespaceResolver=new NamespaceResolver();
    namespaceResolver.put(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
      marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  return xsiPrefix;
}","/** 
 * INTERNAL: Private function to process or create an entry in the NamespaceResolver for the xsi prefix.
 * @param namespaceResolver
 * @return xsi prefix
 */
protected String processNamespaceResolverForXSIPrefix(NamespaceResolver namespaceResolver,MarshalRecord marshalRecord){
  String xsiPrefix;
  if (null == namespaceResolver) {
    xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
    namespaceResolver=new NamespaceResolver();
    namespaceResolver.put(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
  }
 else {
    xsiPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=namespaceResolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
      marshalRecord.namespaceDeclaration(xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  return xsiPrefix;
}"
65450,"/** 
 * INTERNAL: Add the namespace declarations to the XML document.
 * @param namespaceResolver The NamespaceResolver contains the namespaceprefix and URI pairings that need to be declared.
 */
public void namespaceDeclarations(NamespaceResolver namespaceResolver){
  if (namespaceResolver == null) {
    return;
  }
  String namespaceURI=namespaceResolver.getDefaultNamespaceURI();
  if (null != namespaceURI) {
    attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.XMLNS,namespaceURI);
  }
  if (namespaceResolver.hasPrefixesToNamespaces()) {
    for (    Entry<String,String> entry : namespaceResolver.getPrefixesToNamespaces().entrySet()) {
      String namespacePrefix=entry.getKey();
      attribute(XMLConstants.XMLNS_URL,namespacePrefix,XMLConstants.XMLNS + XMLConstants.COLON + namespacePrefix,entry.getValue());
    }
  }
}","/** 
 * INTERNAL: Add the namespace declarations to the XML document.
 * @param namespaceResolver The NamespaceResolver contains the namespaceprefix and URI pairings that need to be declared.
 */
public void namespaceDeclarations(NamespaceResolver namespaceResolver){
  if (namespaceResolver == null) {
    return;
  }
  String namespaceURI=namespaceResolver.getDefaultNamespaceURI();
  if (null != namespaceURI) {
    defaultNamespaceDeclaration(namespaceURI);
  }
  if (namespaceResolver.hasPrefixesToNamespaces()) {
    for (    Entry<String,String> entry : namespaceResolver.getPrefixesToNamespaces().entrySet()) {
      String namespacePrefix=entry.getKey();
      namespaceDeclaration(namespacePrefix,entry.getValue());
    }
  }
}"
65451,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedOutputStreamRecordContentHandler handler=new FormattedOutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(XMLConstants.LEXICAL_HANDLER_PROPERTY,handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        namespaceDeclaration(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedOutputStreamRecordContentHandler handler=new FormattedOutputStreamRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(handler);
      xfragReader.setProperty(XMLConstants.LEXICAL_HANDLER_PROPERTY,handler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
65452,"/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(XMLConstants.XMLNS_URL,XMLConstants.EMPTY_STRING,XMLConstants.XMLNS + XMLConstants.COLON + attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(XMLConstants.LEXICAL_HANDLER_PROPERTY,wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}","/** 
 * Receive notification of a node.
 * @param node The Node to be added to the document
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI/prefix of the node
 */
public void node(Node node,NamespaceResolver namespaceResolver){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (getNamespaceResolver() != null) {
      resolverPfx=getNamespaceResolver().resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,resolverPfx + XMLConstants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),XMLConstants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        namespaceDeclaration(attr.getPrefix(),attr.getNamespaceURI());
        this.getNamespaceResolver().put(attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    try {
      FormattedWriterRecordContentHandler wrcHandler=new FormattedWriterRecordContentHandler();
      XMLFragmentReader xfragReader=new XMLFragmentReader(namespaceResolver);
      xfragReader.setContentHandler(wrcHandler);
      xfragReader.setProperty(XMLConstants.LEXICAL_HANDLER_PROPERTY,wrcHandler);
      xfragReader.parse(node);
    }
 catch (    SAXException sex) {
      throw XMLMarshalException.marshalException(sex);
    }
  }
}"
65453,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true,true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true,true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position.isNeedToOpenComplex()) {
        writer.write('{');
        position.setNeedToOpenComplex(false);
        position.setNeedToCloseComplex(true);
      }
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.writeKey(xPathFragment);
      if (position != null && position.isCollection()) {
        writer.write('[');
        writer.write(' ');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    charactersAllowed=true;
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true,true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true,true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      if (position.isNeedToOpenComplex()) {
        writer.write('{');
        position.setNeedToOpenComplex(false);
        position.setNeedToCloseComplex(true);
      }
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab());
        }
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.writeKey(xPathFragment);
      if (position != null && position.isCollection()) {
        writer.write('[');
        writer.write(' ');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65454,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,true);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    outputStreamWrite(SPACE);
    outputStreamWrite(qName.getBytes(XMLConstants.DEFAULT_XML_ENCODING));
    outputStreamWrite((byte)'=');
    outputStreamWrite((byte)'""');
    writeValue(value,true,true);
    outputStreamWrite(CLOSE_ATTRIBUTE_VALUE);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65455,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars){
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))));
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)));
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)));
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)));
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)));
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)));
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)));
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)));
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP);
            break;
          }
case '<':
{
          outputStreamWrite(LT);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT);
        break;
      }
default :
    outputStreamWrite((byte)character);
}
}
 else {
outputStreamWrite((byte)character);
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))));
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)));
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)));
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)));
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)));
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)));
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)));
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)));
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP);
            break;
          }
case '<':
{
          outputStreamWrite(LT);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT);
        break;
      }
default :
    outputStreamWrite((byte)character);
}
}
 else {
outputStreamWrite((byte)character);
}
}
}
}"
65456,"/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    writer.write(' ');
    writer.write(qName);
    writer.write('=');
    writer.write('\""');
    writeValue(value);
    writer.write('\""');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void attribute(String namespaceURI,String localName,String qName,String value){
  try {
    writer.write(' ');
    writer.write(qName);
    writer.write('=');
    writer.write('\""');
    writeValue(value,true);
    writer.write('\""');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65457,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute){
  CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65458,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField xmlField=null;
  if (isCollection) {
    xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
  }
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    if (this.converter != null) {
      Converter converter=this.converter;
      if (converter instanceof XMLConverter) {
        data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
      }
 else {
        data=converter.convertDataValueToObjectValue(data,record.getSession());
      }
    }
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    XMLField xmlField=null;
    if (isCollection) {
      xmlField=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    }
 else {
      xmlField=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    }
    if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
      XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
      Object data=null;
      Class attributeClassification=null;
      if (isCollection) {
        attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
      }
 else {
        attributeClassification=mapping.getAttributeClassification();
      }
      if (attachmentUnmarshaller == null) {
        throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
      }
      if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
        data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
      }
 else {
        data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
      }
      data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
      if (this.converter != null) {
        Converter converter=this.converter;
        if (converter instanceof XMLConverter) {
          data=((XMLConverter)converter).convertDataValueToObjectValue(data,record.getSession(),record.getUnmarshaller());
        }
 else {
          data=converter.convertDataValueToObjectValue(data,record.getSession());
        }
      }
      if (isCollection) {
        if (data != null) {
          record.addAttributeValue((ContainerValue)nodeValue,data);
        }
      }
 else {
        record.setAttributeValue(data,mapping);
      }
      if (!xmlField.isSelfField()) {
        XMLReader xmlReader=record.getXMLReader();
        xmlReader.setContentHandler(record);
        xmlReader.setLexicalHandler(record);
      }
    }
 else {
      if (!xmlField.isSelfField()) {
        XMLReader xmlReader=record.getXMLReader();
        xmlReader.setContentHandler(record);
        xmlReader.setLexicalHandler(record);
        record.endElement(namespaceURI,localName,qName);
      }
    }
  }
}"
65459,"@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(""String_Node_Str"",HREF_ATTRIBUTE_NAME);
  }
 else {
    XMLReader xmlReader=record.getXMLReader();
    xmlReader.setContentHandler(record);
    xmlReader.setLexicalHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}","@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (XMLConstants.XOP_URL.equals(namespaceURI) && (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName))) {
    this.c_id=atts.getValue(XMLConstants.EMPTY_STRING,HREF_ATTRIBUTE_NAME);
  }
 else   if (c_id == null) {
    XMLReader xmlReader=record.getXMLReader();
    xmlReader.setContentHandler(record);
    xmlReader.setLexicalHandler(record);
    record.startElement(namespaceURI,localName,qName,atts);
  }
}"
65460,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  boolean addDeclaration=false;
  boolean removePrefix=false;
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null) {
    addDeclaration=true;
    xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
    if (xopPrefix == null) {
      removePrefix=true;
      xopPrefix=XMLConstants.XOP_PREFIX;
      marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
    }
    namespaceResolver=marshalRecord.getNamespaceResolver();
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  if (removePrefix) {
    marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    return false;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=XMLConstants.EMPTY_STRING;
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataCollectionMapping.getValueConverter() != null) {
    Converter converter=xmlBinaryDataCollectionMapping.getValueConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((XMLField)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=XMLConstants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == ClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataCollectionMapping.getMimeType(object),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(XMLConstants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}"
65461,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null || namespaceResolver == null) {
    xopPrefix=XMLConstants.XOP_PREFIX;
    marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
65462,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
      if (xmlRoot.getNamespaceURI() != null && xmlRoot.getNamespaceURI().length() > 0) {
        xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
      }
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65463,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute){
  CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65464,"public PrefixMapperNamespaceResolver(org.eclipse.persistence.oxm.NamespacePrefixMapper mapper,NamespaceResolver nestedResolver){
  prefixMapper=mapper;
  String[] declarations=mapper.getContextualNamespaceDecls();
  if (declarations != null && declarations.length > 0) {
    contextualNamespaces=new NamespaceResolver();
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      contextualNamespaces.put(prefix,uri);
    }
  }
  for (  Object next : nestedResolver.getNamespaces()) {
    Namespace ns=(Namespace)next;
    String uri=ns.getNamespaceURI();
    String originalPrefix=ns.getPrefix();
    String prefix=prefixMapper.getPreferredPrefix(uri,originalPrefix,true);
    if (prefix != null) {
      this.put(prefix,uri);
    }
 else {
      this.put(originalPrefix,uri);
    }
  }
  String defaultUri=nestedResolver.getDefaultNamespaceURI();
  if (defaultUri != null) {
    String prefix=prefixMapper.getPreferredPrefix(defaultUri,""String_Node_Str"",false);
    if (""String_Node_Str"".equals(prefix) || prefix == null) {
      this.setDefaultNamespaceURI(defaultUri);
    }
 else {
      this.put(prefix,defaultUri);
    }
  }
  String[] uris=mapper.getPreDeclaredNamespaceUris();
  if (uris != null && uris.length > 0) {
    for (int i=0; i < uris.length; i++) {
      String uri=uris[i];
      String prefix=prefixMapper.getPreferredPrefix(uri,null,true);
      if (prefix != null) {
        this.put(prefix,uri);
      }
    }
  }
  declarations=prefixMapper.getPreDeclaredNamespaceUris2();
  if (declarations != null && declarations.length > 0) {
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      this.put(prefix,uri);
    }
  }
}","public PrefixMapperNamespaceResolver(org.eclipse.persistence.oxm.NamespacePrefixMapper mapper,NamespaceResolver nestedResolver){
  prefixMapper=mapper;
  String[] declarations=mapper.getContextualNamespaceDecls();
  if (declarations != null && declarations.length > 0) {
    contextualNamespaces=new NamespaceResolver();
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      contextualNamespaces.put(prefix,uri);
    }
  }
  String defaultUri=null;
  if (nestedResolver != null) {
    for (    Object next : nestedResolver.getNamespaces()) {
      Namespace ns=(Namespace)next;
      String uri=ns.getNamespaceURI();
      String originalPrefix=ns.getPrefix();
      String prefix=prefixMapper.getPreferredPrefix(uri,originalPrefix,true);
      if (prefix != null) {
        this.put(prefix,uri);
      }
 else {
        this.put(originalPrefix,uri);
      }
    }
    defaultUri=nestedResolver.getDefaultNamespaceURI();
  }
  if (defaultUri != null) {
    String prefix=prefixMapper.getPreferredPrefix(defaultUri,""String_Node_Str"",false);
    if (""String_Node_Str"".equals(prefix) || prefix == null) {
      this.setDefaultNamespaceURI(defaultUri);
    }
 else {
      this.put(prefix,defaultUri);
    }
  }
  String[] uris=mapper.getPreDeclaredNamespaceUris();
  if (uris != null && uris.length > 0) {
    for (int i=0; i < uris.length; i++) {
      String uri=uris[i];
      String prefix=prefixMapper.getPreferredPrefix(uri,null,true);
      if (prefix != null) {
        this.put(prefix,uri);
      }
    }
  }
  declarations=prefixMapper.getPreDeclaredNamespaceUris2();
  if (declarations != null && declarations.length > 0) {
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      this.put(prefix,uri);
    }
  }
}"
65465,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null && namespaceResolver == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    if (descriptor == null) {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,null));
    }
 else {
      marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    }
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot && descriptor != null) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor != null && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65466,"public void setNamespacePrefixMapper(NamespacePrefixMapper mapper){
  this.mapper=mapper;
}","/** 
 * NamespacePrefixMapper that can be used during marshal (instead of those set in the project meta data)
 * @since 2.3.3
 * @return
 */
public void setNamespacePrefixMapper(NamespacePrefixMapper mapper){
  this.mapper=mapper;
}"
65467,"public NamespacePrefixMapper getNamespacePrefixMapper(){
  return this.mapper;
}","/** 
 * NamespacePrefixMapper that can be used during marshal (instead of those set in the project meta data)
 * @since 2.3.3
 * @return
 */
public NamespacePrefixMapper getNamespacePrefixMapper(){
  return this.mapper;
}"
65468,"/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  this.marshaller=marshaller;
  if (marshaller != null) {
    MediaType mediaType=marshaller.getMediaType();
    if (marshaller.getNamespaceResolver() != null) {
      namespaceResolver=marshaller.getNamespaceResolver();
    }
    namespaceAware=(mediaType == MediaType.APPLICATION_XML || namespaceResolver.getPrefixesToNamespaces().size() > 0);
  }
}","/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  this.marshaller=marshaller;
  if (marshaller != null) {
    MediaType mediaType=marshaller.getMediaType();
    if (marshaller.getNamespacePrefixMapper() != null) {
      namespaceAware=true;
    }
 else {
      namespaceAware=mediaType == MediaType.APPLICATION_XML;
    }
  }
}"
65469,"/** 
 * INTERNAL: Increase DMS Event sensor occurrence.(DMS)
 */
public void occurred(String operationName,DatabaseQuery query){
  Sensor event=getSensorByName(operationName);
  if (event != null) {
    ((Event)event).occurred(operationName);
    occurred(query.getMonitorName());
  }
}","/** 
 * INTERNAL: Increase DMS Event sensor occurrence.(DMS)
 */
public void occurred(String operationName,DatabaseQuery query){
  Sensor event=getSensorByName(operationName);
  if (event != null) {
    ((Event)event).occurred();
    occurred(query.getMonitorName());
  }
}"
65470,"/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  return javaTypes;
}","/** 
 * Build and return a Hashtable containing the default Java to XML conversion pairs
 */
private static HashMap buildJavaTypes(){
  HashMap javaTypes=new HashMap();
  javaTypes.put(ClassConstants.APBYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BIGDECIMAL,XMLConstants.DECIMAL_QNAME);
  javaTypes.put(ClassConstants.BIGINTEGER,XMLConstants.INTEGER_QNAME);
  javaTypes.put(ClassConstants.PBOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.PBYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.PDOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.PFLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.PINT,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.PLONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.PSHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(XMLConstants.QNAME_CLASS,XMLConstants.QNAME_QNAME);
  javaTypes.put(ClassConstants.STRING,XMLConstants.STRING_QNAME);
  javaTypes.put(ClassConstants.ABYTE,XMLConstants.HEX_BINARY_QNAME);
  javaTypes.put(ClassConstants.BOOLEAN,XMLConstants.BOOLEAN_QNAME);
  javaTypes.put(ClassConstants.BYTE,XMLConstants.BYTE_QNAME);
  javaTypes.put(ClassConstants.GREGORIAN_CALENDAR,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.DOUBLE,XMLConstants.DOUBLE_QNAME);
  javaTypes.put(ClassConstants.FLOAT,XMLConstants.FLOAT_QNAME);
  javaTypes.put(ClassConstants.INTEGER,XMLConstants.INT_QNAME);
  javaTypes.put(ClassConstants.LONG,XMLConstants.LONG_QNAME);
  javaTypes.put(ClassConstants.SHORT,XMLConstants.SHORT_QNAME);
  javaTypes.put(ClassConstants.UTILDATE,XMLConstants.DATE_TIME_QNAME);
  javaTypes.put(ClassConstants.CHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.PCHAR,XMLConstants.UNSIGNED_INT_QNAME);
  javaTypes.put(ClassConstants.DURATION,XMLConstants.DURATION_QNAME);
  javaTypes.put(XMLConstants.UUID,XMLConstants.STRING_QNAME);
  javaTypes.put(XMLConstants.URI,XMLConstants.STRING_QNAME);
  return javaTypes;
}"
65471,"public PrefixMapperNamespaceResolver(org.eclipse.persistence.oxm.NamespacePrefixMapper mapper,NamespaceResolver nestedResolver){
  prefixMapper=mapper;
  String[] declarations=mapper.getContextualNamespaceDecls();
  if (declarations != null && declarations.length > 0) {
    contextualNamespaces=new NamespaceResolver();
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      contextualNamespaces.put(prefix,uri);
    }
  }
  String[] uris=mapper.getPreDeclaredNamespaceUris();
  if (uris != null && uris.length > 0) {
    for (int i=0; i < uris.length; i++) {
      String uri=uris[i];
      String prefix=prefixMapper.getPreferredPrefix(uri,null,true);
      if (prefix != null) {
        this.put(prefix,uri);
      }
    }
  }
  declarations=prefixMapper.getPreDeclaredNamespaceUris2();
  if (declarations != null && declarations.length > 0) {
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      this.put(prefix,uri);
    }
  }
  for (  Object next : nestedResolver.getNamespaces()) {
    Namespace ns=(Namespace)next;
    String uri=ns.getNamespaceURI();
    String prefix=this.resolveNamespaceURI(uri);
    if (prefix == null) {
      this.put(ns.getPrefix(),uri);
    }
  }
}","public PrefixMapperNamespaceResolver(org.eclipse.persistence.oxm.NamespacePrefixMapper mapper,NamespaceResolver nestedResolver){
  prefixMapper=mapper;
  String[] declarations=mapper.getContextualNamespaceDecls();
  if (declarations != null && declarations.length > 0) {
    contextualNamespaces=new NamespaceResolver();
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      contextualNamespaces.put(prefix,uri);
    }
  }
  for (  Object next : nestedResolver.getNamespaces()) {
    Namespace ns=(Namespace)next;
    String uri=ns.getNamespaceURI();
    String originalPrefix=ns.getPrefix();
    String prefix=prefixMapper.getPreferredPrefix(uri,originalPrefix,true);
    if (prefix != null) {
      this.put(prefix,uri);
    }
 else {
      this.put(originalPrefix,uri);
    }
  }
  String defaultUri=nestedResolver.getDefaultNamespaceURI();
  if (defaultUri != null) {
    String prefix=prefixMapper.getPreferredPrefix(defaultUri,""String_Node_Str"",false);
    if (""String_Node_Str"".equals(prefix) || prefix == null) {
      this.setDefaultNamespaceURI(defaultUri);
    }
 else {
      this.put(prefix,defaultUri);
    }
  }
  String[] uris=mapper.getPreDeclaredNamespaceUris();
  if (uris != null && uris.length > 0) {
    for (int i=0; i < uris.length; i++) {
      String uri=uris[i];
      String prefix=prefixMapper.getPreferredPrefix(uri,null,true);
      if (prefix != null) {
        this.put(prefix,uri);
      }
    }
  }
  declarations=prefixMapper.getPreDeclaredNamespaceUris2();
  if (declarations != null && declarations.length > 0) {
    for (int i=0; i < declarations.length - 1; i+=2) {
      String prefix=declarations[i];
      String uri=declarations[i + 1];
      this.put(prefix,uri);
    }
  }
}"
65472,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(xPathFragment.getShortNameBytes());
  numberOfTabs++;
  isLastEventText=false;
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
  numberOfTabs++;
  isLastEventText=false;
}"
65473,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(xPathFragment.getShortName());
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65474,"protected String getNameForFragment(XPathFragment xPathFragment){
  if (!this.hasCustomNamespaceMapper()) {
    return xPathFragment.getShortName();
  }
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI().length() > 0) {
    String prefix=this.getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
    return prefix + ""String_Node_Str"" + xPathFragment.getLocalName();
  }
  return xPathFragment.getLocalName();
}","protected String getNameForFragment(XPathFragment xPathFragment){
  if (!this.hasCustomNamespaceMapper()) {
    return xPathFragment.getShortName();
  }
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI().length() > 0) {
    String prefix=this.getPrefixForFragment(xPathFragment);
    if (prefix != null && prefix.length() > 0) {
      return prefix + ""String_Node_Str"" + xPathFragment.getLocalName();
    }
  }
  return xPathFragment.getLocalName();
}"
65475,"protected String getPrefixForFragment(XPathFragment xPathFragment){
  if (!this.hasCustomNamespaceMapper()) {
    return xPathFragment.getPrefix();
  }
  String uri=xPathFragment.getNamespaceURI();
  if (uri == null || uri.length() == 0) {
    return ""String_Node_Str"";
  }
  String prefix=this.getNamespaceResolver().resolveNamespaceURI(uri);
  if (prefix != null) {
    return prefix;
  }
  return xPathFragment.getPrefix();
}","protected String getPrefixForFragment(XPathFragment xPathFragment){
  if (!this.hasCustomNamespaceMapper()) {
    return xPathFragment.getPrefix();
  }
  String uri=xPathFragment.getNamespaceURI();
  if (uri == null || uri.length() == 0) {
    return XMLConstants.EMPTY_STRING;
  }
  String defaultNamespace=getNamespaceResolver().getDefaultNamespaceURI();
  if (defaultNamespace != null && defaultNamespace.equals(uri)) {
    return XMLConstants.EMPTY_STRING;
  }
  String prefix=this.getNamespaceResolver().resolveNamespaceURI(uri);
  if (prefix != null) {
    return prefix;
  }
  for (  Object next : getNamespaceResolver().getNamespaces()) {
    Namespace ns=(Namespace)next;
    uri=ns.getNamespaceURI();
    prefix=ns.getPrefix();
  }
  return xPathFragment.getPrefix();
}"
65476,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  try {
    outputStreamWrite(getNameForFragment(xPathFragment).getBytes(XMLConstants.DEFAULT_XML_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
}"
65477,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write('<');
    writer.write(frag.getShortName());
    writer.write('/');
    writer.write('>');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write('<');
    writer.write(getNameForFragment(frag));
    writer.write('/');
    writer.write('>');
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65478,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.innerclasses.InnerClassTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTest(CollectionsTestSuite.suite());
  suite.addTest(DefaultValueTestSuite.suite());
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(NonELPrefixMapperTestCases.class);
  return suite;
}"
65479,"public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (JAXBContext.MEDIA_TYPE.equals(key)) {
      MediaType mType=MediaType.getMediaTypeByName((String)value);
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (JAXBContext.ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (JAXBContext.INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (JAXBContext.NAMESPACES.equals(key)) {
      if (value != null) {
        Map<String,String> namespaces=(Map<String,String>)value;
        NamespaceResolver nr=new NamespaceResolver();
        nr.getPrefixesToNamespaces().putAll(namespaces);
        xmlMarshaller.setNamespaceResolver(nr);
      }
    }
 else     if (JAXBContext.VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (ECLIPSELINK_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper((NamespacePrefixMapper)value);
    }
 else     if (RI_NAMESPACE_PREFIX_MAPPER.equals(key) || JSE_NAMESPACE_PREFIX_MAPPER.equals(key)) {
      xmlMarshaller.setNamespacePrefixMapper(new NamespacePrefixMapperWrapper(value));
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (JAXBContext.MEDIA_TYPE.equals(key)) {
      MediaType mType=MediaType.getMediaTypeByName((String)value);
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (JAXBContext.ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (JAXBContext.INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (JAXBContext.NAMESPACES.equals(key)) {
      if (value != null) {
        Map<String,String> namespaces=(Map<String,String>)value;
        NamespaceResolver nr=new NamespaceResolver();
        nr.getPrefixesToNamespaces().putAll(namespaces);
        xmlMarshaller.setNamespaceResolver(nr);
      }
    }
 else     if (JAXBContext.VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65480,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  while (cp.hasNext(iter)) {
    Map.Entry entry=(Map.Entry)cp.nextEntry(iter,session);
    Object key=entry.getKey();
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=entry.getValue().toString();
      String qualifiedName=name.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && prefix.length() > 0) {
          qualifiedName=prefix + XMLConstants.COLON + qualifiedName;
        }
 else         if (name.getNamespaceURI() != null && name.getNamespaceURI().length() > 0) {
          String generatedPrefix=nr.generatePrefix();
          qualifiedName=generatedPrefix + XMLConstants.COLON + qualifiedName;
          nr.put(generatedPrefix,name.getNamespaceURI());
          extraNamespaces.add(generatedPrefix);
          marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedPrefix,XMLConstants.XMLNS + XMLConstants.COLON + generatedPrefix,name.getNamespaceURI());
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    marshalRecord.getNamespaceResolver().removeNamespace((String)extraNamespaces.get(i));
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyAttributeMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlAnyAttributeMapping.getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iter=cp.iteratorFor(collection);
  if (!cp.hasNext(iter)) {
    return false;
  }
  XPathFragment groupingElements=marshalRecord.openStartGroupingElements(namespaceResolver);
  List extraNamespaces=new ArrayList();
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  while (cp.hasNext(iter)) {
    Map.Entry entry=(Map.Entry)cp.nextEntry(iter,session);
    Object key=entry.getKey();
    if (key instanceof QName) {
      QName name=(QName)key;
      String value=entry.getValue().toString();
      String qualifiedName=name.getLocalPart();
      if (nr != null) {
        String prefix=nr.resolveNamespaceURI(name.getNamespaceURI());
        if ((prefix != null) && prefix.length() > 0) {
          qualifiedName=prefix + XMLConstants.COLON + qualifiedName;
        }
 else         if (name.getNamespaceURI() != null && name.getNamespaceURI().length() > 0) {
          String generatedPrefix=nr.generatePrefix();
          if (marshalRecord.hasCustomNamespaceMapper()) {
            String customPrefix=marshalRecord.getMarshaller().getNamespacePrefixMapper().getPreferredPrefix(name.getNamespaceURI(),generatedPrefix,true);
            if (customPrefix != null && customPrefix.length() > 0) {
              generatedPrefix=customPrefix;
            }
          }
          qualifiedName=generatedPrefix + XMLConstants.COLON + qualifiedName;
          nr.put(generatedPrefix,name.getNamespaceURI());
          extraNamespaces.add(generatedPrefix);
          marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedPrefix,XMLConstants.XMLNS + XMLConstants.COLON + generatedPrefix,name.getNamespaceURI());
        }
      }
      marshalRecord.attribute(name.getNamespaceURI(),name.getLocalPart(),qualifiedName,value);
    }
  }
  for (int i=0; i < extraNamespaces.size(); i++) {
    marshalRecord.getNamespaceResolver().removeNamespace((String)extraNamespaces.get(i));
  }
  marshalRecord.closeStartGroupingElements(groupingElements);
  return true;
}"
65481,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
    }
  }
  return true;
}"
65482,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}"
65483,"protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session,boolean allowOverride){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return null;
  }
  NamespaceResolver descriptorNamespaceResolver=desc.getNamespaceResolver();
  if (null == descriptorNamespaceResolver || !descriptorNamespaceResolver.hasPrefixesToNamespaces()) {
    return null;
  }
  Map<String,String> prefixesToNamespaces=descriptorNamespaceResolver.getPrefixesToNamespaces();
  if (prefixesToNamespaces.size() == 0) {
    return null;
  }
  List returnList=new ArrayList(prefixesToNamespaces.size());
  NamespaceResolver marshalRecordNamespaceResolver=marshalRecord.getNamespaceResolver();
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    String prefix=marshalRecordNamespaceResolver.resolveNamespaceURI(entry.getValue());
    if (prefix == null || prefix.length() == 0) {
      prefix=entry.getKey();
      String uri=marshalRecordNamespaceResolver.resolveNamespacePrefix(prefix);
      if (allowOverride || uri == null || uri.length() == 0) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
 else     if (allowOverride) {
      if (!prefix.equals(entry.getKey())) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
  }
  return returnList;
}","protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session,boolean allowOverride,boolean ignoreEqualResolvers){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers() && !ignoreEqualResolvers) {
    return null;
  }
  NamespaceResolver descriptorNamespaceResolver=desc.getNamespaceResolver();
  if (null == descriptorNamespaceResolver || !descriptorNamespaceResolver.hasPrefixesToNamespaces()) {
    return null;
  }
  Map<String,String> prefixesToNamespaces=descriptorNamespaceResolver.getPrefixesToNamespaces();
  if (prefixesToNamespaces.size() == 0) {
    return null;
  }
  List returnList=new ArrayList(prefixesToNamespaces.size());
  NamespaceResolver marshalRecordNamespaceResolver=marshalRecord.getNamespaceResolver();
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    String prefix=marshalRecordNamespaceResolver.resolveNamespaceURI(entry.getValue());
    if (prefix == null || prefix.length() == 0) {
      prefix=entry.getKey();
      if (marshalRecord.hasCustomNamespaceMapper()) {
        String newPrefix=marshalRecord.getMarshaller().getNamespacePrefixMapper().getPreferredPrefix(entry.getValue(),prefix,true);
        if (newPrefix != null && !(newPrefix.length() == 0)) {
          prefix=newPrefix;
        }
      }
      String uri=marshalRecordNamespaceResolver.resolveNamespacePrefix(prefix);
      if (marshalRecord.hasCustomNamespaceMapper() || allowOverride || uri == null || uri.length() == 0) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(prefix,entry.getValue()));
      }
    }
 else     if (allowOverride) {
      if (!prefix.equals(entry.getKey()) && !(marshalRecord.hasCustomNamespaceMapper())) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
  }
  return returnList;
}"
65484,"public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object originalObject,Object object,AbstractSession session,XMLDescriptor refDesc,XMLField xmlField,boolean wasXMLRoot){
  XMLRecord record=(XMLRecord)row;
  record.setSession(session);
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session,false);
    writeExtraNamespaces(extraNamespaces,record);
    addXsiTypeAndClassIndicatorIfRequired(record,xmlDescriptor,refDesc,xmlField,originalObject,object,wasXMLRoot,false);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object originalObject,Object object,AbstractSession session,XMLDescriptor refDesc,XMLField xmlField,boolean wasXMLRoot){
  XMLRecord record=(XMLRecord)row;
  record.setSession(session);
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session,false,false);
    writeExtraNamespaces(extraNamespaces,record);
    addXsiTypeAndClassIndicatorIfRequired(record,xmlDescriptor,refDesc,xmlField,originalObject,object,wasXMLRoot,false);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
65485,"protected void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord,AbstractSession session){
  if (extraNamespaces == null) {
    return;
  }
  for (int i=0, extraNamespacesSize=extraNamespaces.size(); i < extraNamespacesSize; i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    ((MarshalRecord)xmlRecord).attribute(XMLConstants.XMLNS_URL,next.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + next.getPrefix(),next.getNamespaceURI());
  }
}","protected void writeExtraNamespaces(List extraNamespaces,XMLRecord xmlRecord,AbstractSession session){
  if (extraNamespaces == null) {
    return;
  }
  for (int i=0, extraNamespacesSize=extraNamespaces.size(); i < extraNamespacesSize; i++) {
    Namespace next=(Namespace)extraNamespaces.get(i);
    String prefix=next.getPrefix();
    if (((MarshalRecord)xmlRecord).hasCustomNamespaceMapper()) {
      prefix=((MarshalRecord)xmlRecord).getNamespaceResolver().resolveNamespaceURI(next.getNamespaceURI());
    }
    ((MarshalRecord)xmlRecord).attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + XMLConstants.COLON + prefix,next.getNamespaceURI());
  }
}"
65486,"@Override public String resolveNamespaceURI(String uri){
  String prefix=null;
  if (contextualNamespaces != null) {
    prefix=contextualNamespaces.resolveNamespaceURI(uri);
  }
  if (prefix == null) {
    prefix=super.resolveNamespaceURI(uri);
  }
  if (prefix == null) {
    prefix=prefixMapper.getPreferredPrefix(uri,prefix,true);
  }
  return prefix;
}","@Override public String resolveNamespaceURI(String uri){
  String prefix=null;
  if (contextualNamespaces != null) {
    prefix=contextualNamespaces.resolveNamespaceURI(uri);
  }
  if (prefix == null) {
    prefix=super.resolveNamespaceURI(uri);
  }
  return prefix;
}"
65487,"@Override public void put(String a,String b){
  super.put(a,b);
}","@Override public void put(String prefix,String uri){
  String newPrefix=prefixMapper.getPreferredPrefix(uri,prefix,true);
  if (newPrefix == null || newPrefix.length() == 0) {
    super.put(prefix,uri);
  }
 else {
    super.put(newPrefix,uri);
  }
}"
65488,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_MORECOMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_VARRAY,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}"
65489,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_MORECOMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65490,"private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField;
          firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(firstField))) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          this.addChoiceContainerValue((ContainerValue)unmarshalValue.getChoiceElementNodeValue());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            addChoiceContainerValue((ContainerValue)nodeValue.getChoiceElementNodeValue());
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(next))) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}","private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          XMLCompositeDirectCollectionMapping collectionMapping=(XMLCompositeDirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          XMLCompositeCollectionMapping collectionMapping=(XMLCompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField;
          firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(firstField))) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          this.addChoiceContainerValue((ContainerValue)unmarshalValue.getChoiceElementNodeValue());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            addChoiceContainerValue((ContainerValue)nodeValue.getChoiceElementNodeValue());
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(next))) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}"
65491,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlAnyCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
65492,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null || namespaceResolver == null) {
    xopPrefix=XMLConstants.XOP_PREFIX;
    marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlBinaryDataCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlBinaryDataCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlBinaryDataCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  String xopPrefix=null;
  if (namespaceResolver != null) {
    xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
  }
  if (xopPrefix == null || namespaceResolver == null) {
    xopPrefix=XMLConstants.XOP_PREFIX;
    marshalRecord.getNamespaceResolver().put(xopPrefix,XMLConstants.XOP_URL);
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (!cp.hasNext(iterator)) {
    if (xmlBinaryDataCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.getNamespaceResolver().removeNamespace(XMLConstants.XOP_PREFIX);
  return true;
}"
65493,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    if (xmlChoiceCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
65494,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlCompositeCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65495,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (!xmlCompositeDirectCollectionMapping.usesSingleNode() && xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return false;
    }
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65496,"private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          XMLCompositeDirectCollectionMapping collectionMapping=(XMLCompositeDirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          XMLCompositeCollectionMapping collectionMapping=(XMLCompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField;
          firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(firstField))) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          this.addChoiceContainerValue((ContainerValue)unmarshalValue.getChoiceElementNodeValue());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            addChoiceContainerValue((ContainerValue)nodeValue.getChoiceElementNodeValue());
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(next))) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}","private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          XMLCompositeDirectCollectionMapping collectionMapping=(XMLCompositeDirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          XMLCompositeCollectionMapping collectionMapping=(XMLCompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField;
          firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(firstField))) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          ((ContainerValue)unmarshalValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(next))) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}"
65497,"public Object getContainerInstance(ContainerValue c,boolean createContainerIfNecessary){
  Object containerInstance=containerInstances[c.getIndex()];
  if (containerInstance == null) {
    if (c.getReuseContainer() && !(c.getMapping().getAttributeAccessor().isReadOnly())) {
      containerInstance=c.getMapping().getAttributeAccessor().getAttributeValueFromObject(getCurrentObject());
    }
    if (null == containerInstance && createContainerIfNecessary) {
      containerInstance=c.getContainerInstance();
    }
    containerInstances[c.getIndex()]=containerInstance;
    if (c.getMapping() instanceof XMLChoiceCollectionMapping) {
      XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)c;
      for (      NodeValue next : nodeValue.getAllNodeValues()) {
        NodeValue nestedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)next).getChoiceElementNodeValue();
        containerInstances[((ContainerValue)nestedNodeValue).getIndex()]=containerInstance;
      }
    }
  }
  return containerInstance;
}","public Object getContainerInstance(ContainerValue c,boolean createContainerIfNecessary){
  Object containerInstance=containerInstances[c.getIndex()];
  if (containerInstance == null) {
    if (c.getReuseContainer() && !(c.getMapping().getAttributeAccessor().isReadOnly())) {
      containerInstance=c.getMapping().getAttributeAccessor().getAttributeValueFromObject(getCurrentObject());
    }
    if (null == containerInstance && createContainerIfNecessary) {
      containerInstance=c.getContainerInstance();
    }
    containerInstances[c.getIndex()]=containerInstance;
  }
  return containerInstance;
}"
65498,"public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if (getParentRecord() != null && getParentRecord().getDocumentLocator() != null) {
      this.documentLocator=getParentRecord().getDocumentLocator();
    }
    if (documentLocator != null) {
      if (xmlDescriptor.getLocationAccessor() != null) {
        setXmlLocation(new Locator2Impl(documentLocator));
      }
    }
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      List choiceContainerValues=treeObjectBuilder.getChoiceContainerValues();
      if (choiceContainerValues != null) {
        containerInstances=new Object[containerValues.size() + choiceContainerValues.size()];
      }
 else {
        containerInstances=new Object[containerValues.size()];
      }
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        if (containerValue.getReuseContainer() && !(containerValue.getMapping().getAttributeAccessor().isReadOnly())) {
          getContainerInstance(containerValue,false);
        }
        if (containerValue.isDefaultEmptyContainer()) {
          getContainerInstance(containerValue,true);
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    if (getParentRecord() != null && getParentRecord().getDocumentLocator() != null) {
      this.documentLocator=getParentRecord().getDocumentLocator();
    }
    if (documentLocator != null) {
      if (xmlDescriptor.getLocationAccessor() != null) {
        setXmlLocation(new Locator2Impl(documentLocator));
      }
    }
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containerInstances=new Object[containerValues.size()];
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        if (containerValue.getReuseContainer() && !(containerValue.getMapping().getAttributeAccessor().isReadOnly())) {
          getContainerInstance(containerValue,false);
        }
        if (containerValue.isDefaultEmptyContainer()) {
          getContainerInstance(containerValue,true);
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65499,"private SAXParserFactory getSAXParserFactory() throws XMLMarshalException {
  if (null == saxParserFactory) {
    try {
      saxParserFactory=SAXParserFactory.newInstance();
      saxParserFactory.setNamespaceAware(true);
      Schema schema=getSchema();
      if (null != schema) {
        saxParserFactory.setSchema(schema);
      }
      saxParserFactory.setFeature(XMLReader.NAMESPACE_PREFIXES_FEATURE,true);
      try {
        saxParserFactory.setFeature(XMLReader.REPORT_IGNORED_ELEMENT_CONTENT_WHITESPACE_FEATURE,true);
      }
 catch (      org.xml.sax.SAXNotRecognizedException ex) {
      }
catch (      org.xml.sax.SAXNotSupportedException ex) {
      }
      if (null != parserFeatures) {
        for (        Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
          try {
            saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
          }
 catch (          org.xml.sax.SAXNotRecognizedException ex) {
          }
catch (          org.xml.sax.SAXNotSupportedException ex) {
          }
        }
      }
      return saxParserFactory;
    }
 catch (    Exception e) {
      throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
    }
  }
  return saxParserFactory;
}","private SAXParserFactory getSAXParserFactory() throws XMLMarshalException {
  if (null == saxParserFactory) {
    try {
      saxParserFactory=SAXParserFactory.newInstance();
      saxParserFactory.setNamespaceAware(true);
      saxParserFactory.setFeature(XMLReader.NAMESPACE_PREFIXES_FEATURE,true);
      try {
        saxParserFactory.setFeature(XMLReader.REPORT_IGNORED_ELEMENT_CONTENT_WHITESPACE_FEATURE,true);
      }
 catch (      org.xml.sax.SAXNotRecognizedException ex) {
      }
catch (      org.xml.sax.SAXNotSupportedException ex) {
      }
      if (null != parserFeatures) {
        for (        Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
          try {
            saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
          }
 catch (          org.xml.sax.SAXNotRecognizedException ex) {
          }
catch (          org.xml.sax.SAXNotSupportedException ex) {
          }
        }
      }
      return saxParserFactory;
    }
 catch (    Exception e) {
      throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
    }
  }
  return saxParserFactory;
}"
65500,"public void setSchema(Schema schema){
  this.schema=schema;
  if (null != saxParserFactory) {
    saxParserFactory.setSchema(schema);
    saxParser=null;
    xmlReader=null;
  }
  if (null != xmlParser) {
    xmlParser.setXMLSchema(schema);
  }
}","public void setSchema(Schema schema){
  this.schema=schema;
  if (null != xmlParser) {
    xmlParser.setXMLSchema(schema);
  }
}"
65501,"public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    boolean isPrimitiveWrapper=isPrimitiveWrapper(clazz);
    UnmarshalRecord unmarshalRecord;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    if (isPrimitiveWrapper) {
      unmarshalRecord=new XMLRootRecord(clazz);
      unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
    }
 else     if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      xmlReader.parse(inputSource);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      session=xmlContext.getReadSession(clazz);
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    extendedXMLReader.setContentHandler(unmarshalRecord);
    extendedXMLReader.setLexicalHandler(unmarshalRecord);
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}","public Object unmarshal(org.xml.sax.XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (xmlContext.hasDocumentPreservation()) {
      SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
      xmlReader.setContentHandler(saxDocumentBuilder);
      xmlReader.parse(inputSource);
      return unmarshal(saxDocumentBuilder.getDocument().getDocumentElement(),clazz);
    }
    boolean isPrimitiveWrapper=isPrimitiveWrapper(clazz);
    UnmarshalRecord unmarshalRecord;
    XMLDescriptor xmlDescriptor=null;
    AbstractSession session=null;
    if (isPrimitiveWrapper) {
      unmarshalRecord=new XMLRootRecord(clazz);
      unmarshalRecord.setSession((AbstractSession)xmlUnmarshaller.getXMLContext().getSession(0));
    }
 else     if (clazz == ClassConstants.OBJECT) {
      SAXUnmarshallerHandler saxUnmarshallerHandler=new SAXUnmarshallerHandler(xmlUnmarshaller.getXMLContext());
      saxUnmarshallerHandler.setXMLReader((XMLReader)xmlReader);
      saxUnmarshallerHandler.setUnmarshaller(xmlUnmarshaller);
      saxUnmarshallerHandler.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      xmlReader.setContentHandler(saxUnmarshallerHandler);
      xmlReader.parse(inputSource);
      saxUnmarshallerHandler.resolveReferences();
      return saxUnmarshallerHandler.getObject();
    }
 else {
      session=xmlContext.getReadSession(clazz);
      xmlDescriptor=(XMLDescriptor)session.getDescriptor(clazz);
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
    }
    XMLReader extendedXMLReader;
    if (xmlReader instanceof XMLReader) {
      extendedXMLReader=(XMLReader)xmlReader;
    }
 else {
      extendedXMLReader=new XMLReader(xmlReader);
    }
    unmarshalRecord.setXMLReader(extendedXMLReader);
    unmarshalRecord.setUnmarshaller(xmlUnmarshaller);
    setContentHandler(extendedXMLReader,unmarshalRecord);
    extendedXMLReader.setLexicalHandler(unmarshalRecord);
    extendedXMLReader.parse(inputSource);
    xmlUnmarshaller.resolveReferences(session);
    if (isPrimitiveWrapper || clazz == ClassConstants.OBJECT) {
      return unmarshalRecord.getCurrentObject();
    }
    return xmlDescriptor.wrapObjectInXMLRoot(unmarshalRecord,this.isResultAlwaysXMLRoot);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw convertSAXException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65502,"public void setContentHandler(ContentHandler handler){
  if (validatorHandler != null) {
    validatorHandler.setContentHandler(handler);
  }
 else {
    reader.setContentHandler(handler);
  }
}","public void setContentHandler(ContentHandler contentHandler){
  this.contentHandler=contentHandler;
}"
65503,"public void setValidatorHandler(ValidatorHandler validatorHandler){
  if (reader != null) {
    reader.setContentHandler(validatorHandler);
  }
  this.validatorHandler=validatorHandler;
  if (validatorHandler != null) {
    validatorHandler.setErrorHandler(getErrorHandler());
  }
}","public void setValidatorHandler(ValidatorHandler validatorHandler){
  this.validatorHandler=validatorHandler;
}"
65504,"public ContentHandler getContentHandler(){
  return reader.getContentHandler();
}","public ContentHandler getContentHandler(){
  return contentHandler;
}"
65505,"public ValidatorHandler getValidatorHandler(){
  return this.validatorHandler;
}","public ValidatorHandler getValidatorHandler(){
  return validatorHandler;
}"
65506,"public void setErrorHandler(ErrorHandler handler){
  if (validatorHandler != null) {
    validatorHandler.setErrorHandler(handler);
  }
 else {
    reader.setErrorHandler(handler);
  }
}","public void setErrorHandler(ErrorHandler errorHandler){
  validatorHandler.setErrorHandler(errorHandler);
}"
65507,"@Override public void setContentHandler(ContentHandler contentHandler){
  if (null == validatorHandler) {
    if (contentHandler instanceof ExtendedContentHandler) {
      this.contentHandler=(ExtendedContentHandler)contentHandler;
    }
 else {
      this.contentHandler=new ExtendedContentHandlerAdapter(contentHandler);
    }
  }
 else {
    validatorHandler.setContentHandler(contentHandler);
  }
}","@Override public void setContentHandler(ContentHandler contentHandler){
  if (null == validatingContentHandler) {
    if (contentHandler instanceof ExtendedContentHandler) {
      this.contentHandler=(ExtendedContentHandler)contentHandler;
    }
 else {
      this.contentHandler=new ExtendedContentHandlerAdapter(contentHandler);
    }
  }
 else {
    validatingContentHandler.setContentHandler(contentHandler);
  }
}"
65508,"public XMLReaderAdapter(XMLUnmarshaller xmlUnmarshaller){
  super();
  if (null != xmlUnmarshaller) {
    Schema schema=xmlUnmarshaller.getSchema();
    if (null != schema) {
      validatorHandler=schema.newValidatorHandler();
      this.contentHandler=new ExtendedContentHandlerAdapter(validatorHandler);
    }
    setErrorHandler(xmlUnmarshaller.getErrorHandler());
  }
}","public XMLReaderAdapter(XMLUnmarshaller xmlUnmarshaller){
  super();
  if (null != xmlUnmarshaller) {
    Schema schema=xmlUnmarshaller.getSchema();
    if (null != schema) {
      validatingContentHandler=new ValidatingContentHandler(schema.newValidatorHandler());
      this.contentHandler=new ExtendedContentHandlerAdapter(validatingContentHandler);
    }
    setErrorHandler(xmlUnmarshaller.getErrorHandler());
  }
}"
65509,"@Override public void setErrorHandler(ErrorHandler errorHandler){
  this.errorHandler=errorHandler;
  if (null != validatorHandler) {
    validatorHandler.setErrorHandler(errorHandler);
  }
}","@Override public void setErrorHandler(ErrorHandler errorHandler){
  this.errorHandler=errorHandler;
  if (null != validatingContentHandler) {
    validatingContentHandler.setErrorHandler(errorHandler);
  }
}"
65510,"public Object convertDataValueToObjectValue(Object fieldValue,Session session){
  if (fieldValue == null) {
    return null;
  }
  if (((String)fieldValue).startsWith(oldPrefix)) {
    fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
  }
  Object result=platformList.get(fieldValue);
  if (result != null) {
    fieldValue=result;
  }
  Object attributeValue;
  Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
      }
 catch (      PrivilegedActionException exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
      }
    }
 else {
      attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
    }
  }
 catch (  Exception exception) {
    throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
  }
  return attributeValue;
}","public Object convertDataValueToObjectValue(Object fieldValue,Session session){
  if (fieldValue == null) {
    return null;
  }
  if (((String)fieldValue).startsWith(oldPrefix)) {
    if (((String)fieldValue).startsWith(oldOxmPrefix)) {
      fieldValue=((String)fieldValue).replaceFirst(oldOxmPrefix,newOxmPrefix);
    }
 else {
      fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
    }
  }
  Object result=platformList.get(fieldValue);
  if (result != null) {
    fieldValue=result;
  }
  Object attributeValue;
  Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      try {
        attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
      }
 catch (      PrivilegedActionException exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
      }
    }
 else {
      attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
    }
  }
 catch (  Exception exception) {
    throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
  }
  return attributeValue;
}"
65511,"public ClassDescriptor buildDatasourceLoginDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatasourceLogin.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLDirectMapping platformMapping=new XMLDirectMapping();
  platformMapping.setAttributeName(""String_Node_Str"");
  platformMapping.setGetMethodName(""String_Node_Str"");
  platformMapping.setSetMethodName(""String_Node_Str"");
  platformMapping.setConverter(new Converter(){
    protected DatabaseMapping mapping;
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      if (objectValue == null) {
        return null;
      }
      return objectValue.getClass().getName();
    }
    public Object convertDataValueToObjectValue(    Object fieldValue,    Session session){
      if (fieldValue == null) {
        return null;
      }
      if (((String)fieldValue).startsWith(oldPrefix)) {
        fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
      }
      Object result=platformList.get(fieldValue);
      if (result != null) {
        fieldValue=result;
      }
      Object attributeValue;
      Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
          }
 catch (          PrivilegedActionException exception) {
            throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
          }
        }
 else {
          attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
        }
      }
 catch (      Exception exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
      }
      return attributeValue;
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.mapping=mapping;
      if (this.mapping.isDirectToFieldMapping()) {
        AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
        if (directMapping.getFieldClassification() == null) {
          directMapping.setFieldClassification(ClassConstants.STRING);
        }
      }
    }
  }
);
  platformMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(platformMapping);
  XMLDirectMapping userNameMapping=new XMLDirectMapping();
  userNameMapping.setAttributeName(""String_Node_Str"");
  userNameMapping.setGetMethodName(""String_Node_Str"");
  userNameMapping.setSetMethodName(""String_Node_Str"");
  userNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(userNameMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping usesExternalConnectionPoolingMapping=new XMLDirectMapping();
  usesExternalConnectionPoolingMapping.setAttributeName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setGetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setSetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalConnectionPoolingMapping);
  XMLDirectMapping usesExternalTransactionControllerMapping=new XMLDirectMapping();
  usesExternalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalTransactionControllerMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalTransactionControllerMapping);
  XMLCompositeObjectMapping defaultSequenceMapping=new XMLCompositeObjectMapping();
  defaultSequenceMapping.setAttributeName(""String_Node_Str"");
  defaultSequenceMapping.setSetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setGetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setReferenceClass(Sequence.class);
  defaultSequenceMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(defaultSequenceMapping);
  XMLCompositeCollectionMapping sequencesMapping=new XMLCompositeCollectionMapping();
  MapContainerPolicy containerPolicy=new MapContainerPolicy(HashMap.class);
  containerPolicy.setKeyName(""String_Node_Str"",Sequence.class.getName());
  sequencesMapping.setContainerPolicy(containerPolicy);
  sequencesMapping.setAttributeName(""String_Node_Str"");
  sequencesMapping.setSetMethodName(""String_Node_Str"");
  sequencesMapping.setGetMethodName(""String_Node_Str"");
  sequencesMapping.setReferenceClass(Sequence.class);
  sequencesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str""+ getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequencesMapping);
  return descriptor;
}","public ClassDescriptor buildDatasourceLoginDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatasourceLogin.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(EISLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLogin.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  XMLDirectMapping platformMapping=new XMLDirectMapping();
  platformMapping.setAttributeName(""String_Node_Str"");
  platformMapping.setGetMethodName(""String_Node_Str"");
  platformMapping.setSetMethodName(""String_Node_Str"");
  platformMapping.setConverter(new Converter(){
    protected DatabaseMapping mapping;
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    private String oldOxmPrefix=oldPrefix + ""String_Node_Str"";
    private String newOxmPrefix=newPrefix + ""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      if (objectValue == null) {
        return null;
      }
      return objectValue.getClass().getName();
    }
    public Object convertDataValueToObjectValue(    Object fieldValue,    Session session){
      if (fieldValue == null) {
        return null;
      }
      if (((String)fieldValue).startsWith(oldPrefix)) {
        if (((String)fieldValue).startsWith(oldOxmPrefix)) {
          fieldValue=((String)fieldValue).replaceFirst(oldOxmPrefix,newOxmPrefix);
        }
 else {
          fieldValue=((String)fieldValue).replaceFirst(oldPrefix,newPrefix);
        }
      }
      Object result=platformList.get(fieldValue);
      if (result != null) {
        fieldValue=result;
      }
      Object attributeValue;
      Class attributeClass=(Class)((AbstractSession)session).getDatasourcePlatform().convertObject(fieldValue,ClassConstants.CLASS);
      try {
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            attributeValue=AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(attributeClass));
          }
 catch (          PrivilegedActionException exception) {
            throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception.getException());
          }
        }
 else {
          attributeValue=PrivilegedAccessHelper.newInstanceFromClass(attributeClass);
        }
      }
 catch (      Exception exception) {
        throw ConversionException.couldNotBeConverted(fieldValue,attributeClass,exception);
      }
      return attributeValue;
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.mapping=mapping;
      if (this.mapping.isDirectToFieldMapping()) {
        AbstractDirectMapping directMapping=(AbstractDirectMapping)this.mapping;
        if (directMapping.getFieldClassification() == null) {
          directMapping.setFieldClassification(ClassConstants.STRING);
        }
      }
    }
  }
);
  platformMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(platformMapping);
  XMLDirectMapping userNameMapping=new XMLDirectMapping();
  userNameMapping.setAttributeName(""String_Node_Str"");
  userNameMapping.setGetMethodName(""String_Node_Str"");
  userNameMapping.setSetMethodName(""String_Node_Str"");
  userNameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(userNameMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping usesExternalConnectionPoolingMapping=new XMLDirectMapping();
  usesExternalConnectionPoolingMapping.setAttributeName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setGetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setSetMethodName(""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalConnectionPoolingMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalConnectionPoolingMapping);
  XMLDirectMapping usesExternalTransactionControllerMapping=new XMLDirectMapping();
  usesExternalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  usesExternalTransactionControllerMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  usesExternalTransactionControllerMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(usesExternalTransactionControllerMapping);
  XMLCompositeObjectMapping defaultSequenceMapping=new XMLCompositeObjectMapping();
  defaultSequenceMapping.setAttributeName(""String_Node_Str"");
  defaultSequenceMapping.setSetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setGetMethodName(""String_Node_Str"");
  defaultSequenceMapping.setReferenceClass(Sequence.class);
  defaultSequenceMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(defaultSequenceMapping);
  XMLCompositeCollectionMapping sequencesMapping=new XMLCompositeCollectionMapping();
  MapContainerPolicy containerPolicy=new MapContainerPolicy(HashMap.class);
  containerPolicy.setKeyName(""String_Node_Str"",Sequence.class.getName());
  sequencesMapping.setContainerPolicy(containerPolicy);
  sequencesMapping.setAttributeName(""String_Node_Str"");
  sequencesMapping.setSetMethodName(""String_Node_Str"");
  sequencesMapping.setGetMethodName(""String_Node_Str"");
  sequencesMapping.setReferenceClass(Sequence.class);
  sequencesMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"" + getPrimaryNamespaceXPath()+ ""String_Node_Str""+ getPrimaryNamespaceXPath()+ ""String_Node_Str"");
  descriptor.addMapping(sequencesMapping);
  return descriptor;
}"
65512,"public Object convertDataValueToObjectValue(Object dataValue,Session session){
  if (dataValue == null) {
    return null;
  }
  if (((String)dataValue).startsWith(oldPrefix)) {
    dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
  }
  Object result=platformList.get(dataValue);
  if (result == null) {
    return dataValue;
  }
 else {
    return result;
  }
}","public Object convertDataValueToObjectValue(Object dataValue,Session session){
  if (dataValue == null) {
    return null;
  }
  if (((String)dataValue).startsWith(oldPrefix)) {
    if (((String)dataValue).startsWith(oldOxmPrefix)) {
      dataValue=((String)dataValue).replaceFirst(oldOxmPrefix,newOxmPrefix);
    }
 else {
      dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
    }
  }
  Object result=platformList.get(dataValue);
  if (result == null) {
    return dataValue;
  }
 else {
    return result;
  }
}"
65513,"public ClassDescriptor buildLoginConfigDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(LoginConfig.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(EISLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLoginConfig.class,""String_Node_Str"");
  XMLDirectMapping platformClassMapping=new XMLDirectMapping();
  platformClassMapping.setAttributeName(""String_Node_Str"");
  platformClassMapping.setGetMethodName(""String_Node_Str"");
  platformClassMapping.setSetMethodName(""String_Node_Str"");
  platformClassMapping.setXPath(""String_Node_Str"");
  platformClassMapping.setConverter(new Converter(){
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      return objectValue;
    }
    public Object convertDataValueToObjectValue(    Object dataValue,    Session session){
      if (dataValue == null) {
        return null;
      }
      if (((String)dataValue).startsWith(oldPrefix)) {
        dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
      }
      Object result=platformList.get(dataValue);
      if (result == null) {
        return dataValue;
      }
 else {
        return result;
      }
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  descriptor.addMapping(platformClassMapping);
  XMLDirectMapping usernameMapping=new XMLDirectMapping();
  usernameMapping.setAttributeName(""String_Node_Str"");
  usernameMapping.setGetMethodName(""String_Node_Str"");
  usernameMapping.setSetMethodName(""String_Node_Str"");
  usernameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(usernameMapping);
  XMLDirectMapping encryptionClassMapping=new XMLDirectMapping();
  encryptionClassMapping.setAttributeName(""String_Node_Str"");
  encryptionClassMapping.setGetMethodName(""String_Node_Str"");
  encryptionClassMapping.setSetMethodName(""String_Node_Str"");
  encryptionClassMapping.setXPath(""String_Node_Str"");
  encryptionClassMapping.setNullValue(ENCRYPTION_CLASS_DEFAULT);
  descriptor.addMapping(encryptionClassMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping tableQualifierMapping=new XMLDirectMapping();
  tableQualifierMapping.setAttributeName(""String_Node_Str"");
  tableQualifierMapping.setGetMethodName(""String_Node_Str"");
  tableQualifierMapping.setSetMethodName(""String_Node_Str"");
  tableQualifierMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(tableQualifierMapping);
  XMLDirectMapping externalConnectionPoolMapping=new XMLDirectMapping();
  externalConnectionPoolMapping.setAttributeName(""String_Node_Str"");
  externalConnectionPoolMapping.setGetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setSetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setXPath(""String_Node_Str"");
  externalConnectionPoolMapping.setNullValue(Boolean.valueOf(EXTERNAL_CONNECTION_POOL_DEFAULT));
  descriptor.addMapping(externalConnectionPoolMapping);
  XMLDirectMapping externalTransactionControllerMapping=new XMLDirectMapping();
  externalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  externalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setXPath(""String_Node_Str"");
  externalTransactionControllerMapping.setNullValue(Boolean.valueOf(EXTERNAL_TRANSACTION_CONTROLLER_DEFAULT));
  descriptor.addMapping(externalTransactionControllerMapping);
  XMLCompositeObjectMapping sequencingMapping=new XMLCompositeObjectMapping();
  sequencingMapping.setAttributeName(""String_Node_Str"");
  sequencingMapping.setSetMethodName(""String_Node_Str"");
  sequencingMapping.setGetMethodName(""String_Node_Str"");
  sequencingMapping.setReferenceClass(SequencingConfig.class);
  sequencingMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(sequencingMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setReferenceClass(PropertyConfig.class);
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setGetMethodName(""String_Node_Str"");
  propertiesMapping.setSetMethodName(""String_Node_Str"");
  propertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}","public ClassDescriptor buildLoginConfigDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(LoginConfig.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(EISLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(XMLLoginConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(DatabaseLoginConfig.class,""String_Node_Str"");
  XMLDirectMapping platformClassMapping=new XMLDirectMapping();
  platformClassMapping.setAttributeName(""String_Node_Str"");
  platformClassMapping.setGetMethodName(""String_Node_Str"");
  platformClassMapping.setSetMethodName(""String_Node_Str"");
  platformClassMapping.setXPath(""String_Node_Str"");
  platformClassMapping.setConverter(new Converter(){
    private Map platformList;
    private String oldPrefix=""String_Node_Str"";
    private String newPrefix=""String_Node_Str"";
    private String oldOxmPrefix=oldPrefix + ""String_Node_Str"";
    private String newOxmPrefix=newPrefix + ""String_Node_Str"";
    public Object convertObjectValueToDataValue(    Object objectValue,    Session session){
      return objectValue;
    }
    public Object convertDataValueToObjectValue(    Object dataValue,    Session session){
      if (dataValue == null) {
        return null;
      }
      if (((String)dataValue).startsWith(oldPrefix)) {
        if (((String)dataValue).startsWith(oldOxmPrefix)) {
          dataValue=((String)dataValue).replaceFirst(oldOxmPrefix,newOxmPrefix);
        }
 else {
          dataValue=((String)dataValue).replaceFirst(oldPrefix,newPrefix);
        }
      }
      Object result=platformList.get(dataValue);
      if (result == null) {
        return dataValue;
      }
 else {
        return result;
      }
    }
    public boolean isMutable(){
      return false;
    }
    public void initialize(    DatabaseMapping mapping,    Session session){
      this.platformList=new HashMap();
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
      this.platformList.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  descriptor.addMapping(platformClassMapping);
  XMLDirectMapping usernameMapping=new XMLDirectMapping();
  usernameMapping.setAttributeName(""String_Node_Str"");
  usernameMapping.setGetMethodName(""String_Node_Str"");
  usernameMapping.setSetMethodName(""String_Node_Str"");
  usernameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(usernameMapping);
  XMLDirectMapping encryptionClassMapping=new XMLDirectMapping();
  encryptionClassMapping.setAttributeName(""String_Node_Str"");
  encryptionClassMapping.setGetMethodName(""String_Node_Str"");
  encryptionClassMapping.setSetMethodName(""String_Node_Str"");
  encryptionClassMapping.setXPath(""String_Node_Str"");
  encryptionClassMapping.setNullValue(ENCRYPTION_CLASS_DEFAULT);
  descriptor.addMapping(encryptionClassMapping);
  XMLDirectMapping passwordMapping=new XMLDirectMapping();
  passwordMapping.setAttributeName(""String_Node_Str"");
  passwordMapping.setGetMethodName(""String_Node_Str"");
  passwordMapping.setSetMethodName(""String_Node_Str"");
  passwordMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(passwordMapping);
  XMLDirectMapping tableQualifierMapping=new XMLDirectMapping();
  tableQualifierMapping.setAttributeName(""String_Node_Str"");
  tableQualifierMapping.setGetMethodName(""String_Node_Str"");
  tableQualifierMapping.setSetMethodName(""String_Node_Str"");
  tableQualifierMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(tableQualifierMapping);
  XMLDirectMapping externalConnectionPoolMapping=new XMLDirectMapping();
  externalConnectionPoolMapping.setAttributeName(""String_Node_Str"");
  externalConnectionPoolMapping.setGetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setSetMethodName(""String_Node_Str"");
  externalConnectionPoolMapping.setXPath(""String_Node_Str"");
  externalConnectionPoolMapping.setNullValue(Boolean.valueOf(EXTERNAL_CONNECTION_POOL_DEFAULT));
  descriptor.addMapping(externalConnectionPoolMapping);
  XMLDirectMapping externalTransactionControllerMapping=new XMLDirectMapping();
  externalTransactionControllerMapping.setAttributeName(""String_Node_Str"");
  externalTransactionControllerMapping.setGetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setSetMethodName(""String_Node_Str"");
  externalTransactionControllerMapping.setXPath(""String_Node_Str"");
  externalTransactionControllerMapping.setNullValue(Boolean.valueOf(EXTERNAL_TRANSACTION_CONTROLLER_DEFAULT));
  descriptor.addMapping(externalTransactionControllerMapping);
  XMLCompositeObjectMapping sequencingMapping=new XMLCompositeObjectMapping();
  sequencingMapping.setAttributeName(""String_Node_Str"");
  sequencingMapping.setSetMethodName(""String_Node_Str"");
  sequencingMapping.setGetMethodName(""String_Node_Str"");
  sequencingMapping.setReferenceClass(SequencingConfig.class);
  sequencingMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(sequencingMapping);
  XMLCompositeCollectionMapping propertiesMapping=new XMLCompositeCollectionMapping();
  propertiesMapping.setReferenceClass(PropertyConfig.class);
  propertiesMapping.setAttributeName(""String_Node_Str"");
  propertiesMapping.setGetMethodName(""String_Node_Str"");
  propertiesMapping.setSetMethodName(""String_Node_Str"");
  propertiesMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(propertiesMapping);
  return descriptor;
}"
65514,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    TreeObjectBuilder tob=(TreeObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    DatabaseMapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isDirectToFieldMapping()) {
      XMLDirectMapping xmlDirectMapping=(XMLDirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || (descriptor.hasInheritance() && !(objectValue.getClass() == descriptor.getJavaClass()))) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65515,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    if (xmlCompositeObjectMapping.getConverter() != null) {
      Converter converter=xmlCompositeObjectMapping.getConverter();
      if (converter instanceof XMLConverter) {
        object=((XMLConverter)converter).convertDataValueToObjectValue(object,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        object=converter.convertDataValueToObjectValue(object,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setAttributeValue(object,xmlCompositeObjectMapping);
    XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      if (inverseReferenceMapping.getContainerPolicy() == null) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(object,unmarshalRecord.getCurrentObject());
      }
 else {
        Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
        if (backpointerContainer == null) {
          backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
          inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(object,backpointerContainer);
        }
        inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,(XMLMapping)xmlCompositeObjectMapping,(XMLConverter)xmlCompositeObjectMapping.getConverter(),unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    setAttributeValue(object,unmarshalRecord);
    unmarshalRecord.setChildRecord(null);
  }
}"
65516,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping.getConverter(),null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        xsiType=element.getAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    Converter converter=xmlCompositeObjectMapping.getConverter();
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        valueToSet=((XMLConverter)converter).convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        valueToSet=converter.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession());
      }
    }
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    XMLInverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(valueToSet,unmarshalRecord.getCurrentObject());
    }
  }
}"
65517,"public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}","public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      if (aNodeValue instanceof XMLCompositeObjectMappingNodeValue) {
        if (null == selfChildren) {
          selfChildren=new ArrayList<XPathNode>();
        }
        selfChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}"
65518,"/** 
 * INTERNAL: Generate the nested function to convert the PLSQL type to its compatible SQL type.
 */
protected TypeInfo generateNestedFunction(ComplexDatabaseType type,boolean isNonAssociativeCollection){
  TypeInfo info=new TypeInfo();
  info.pl2SqlName=PL2SQL_PREFIX + (this.functionId++);
  info.sql2PlName=SQL2PL_PREFIX + (this.functionId++);
  if (type.isRecord()) {
    PLSQLrecord record=(PLSQLrecord)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    int size=record.getFields().size();
    for (int index=0; index < size; index++) {
      sb.append(""String_Node_Str"");
      if ((index + 1) != size) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getPl2SQLName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_OUT_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getSQL2PlName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_IN_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
 else   if (type.isCollection()) {
    PLSQLCollection collection=(PLSQLCollection)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(getPl2SQLName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(PLSQLBoolean_OUT_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    if (isNonAssociativeCollection) {
      sb.append(""String_Node_Str"");
      sb.append(collection.getTypeName());
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(""String_Node_Str"");
      sb.append(getSQL2PlName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(""String_Node_Str"");
      sb.append(PLSQLBoolean_IN_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
  this.typesInfo.put(type.getTypeName(),info);
  return info;
}","/** 
 * INTERNAL: Generate the nested function to convert the PLSQL type to its compatible SQL type.
 */
protected TypeInfo generateNestedFunction(ComplexDatabaseType type,boolean isNonAssociativeCollection){
  TypeInfo info=new TypeInfo();
  info.pl2SqlName=PL2SQL_PREFIX + (this.functionId++);
  info.sql2PlName=SQL2PL_PREFIX + (this.functionId++);
  if (type.isRecord()) {
    PLSQLrecord record=(PLSQLrecord)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    int size=record.getFields().size();
    for (int index=0; index < size; index++) {
      sb.append(""String_Node_Str"");
      if ((index + 1) != size) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType() && !((ComplexDatabaseType)argument.databaseType).isJDBCType()) {
        sb.append(""String_Node_Str"");
        sb.append(getPl2SQLName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_OUT_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType() && !((ComplexDatabaseType)argument.databaseType).isJDBCType()) {
        sb.append(""String_Node_Str"");
        sb.append(getSQL2PlName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_IN_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
 else   if (type.isCollection()) {
    PLSQLCollection collection=(PLSQLCollection)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    if (collection.nestedType != null && (collection.nestedType.isComplexDatabaseType() && !((ComplexDatabaseType)collection.nestedType).isJDBCType())) {
      sb.append(getPl2SQLName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(PLSQLBoolean_OUT_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    if (isNonAssociativeCollection) {
      sb.append(""String_Node_Str"");
      sb.append(collection.getTypeName());
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(""String_Node_Str"");
      sb.append(getSQL2PlName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(""String_Node_Str"");
      sb.append(PLSQLBoolean_IN_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
  this.typesInfo.put(type.getTypeName(),info);
  return info;
}"
65519,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}"
65520,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_COMPLEXRECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65521,"private String string(String string){
  string=string.substring(1,string.length() - 1);
  string=string.replace(""String_Node_Str"",""String_Node_Str"");
  return string;
}","private String string(String string){
  string=string.substring(1,string.length() - 1);
  String returnString=""String_Node_Str"";
  int slashIndex=string.indexOf('\\');
  if (slashIndex == -1) {
    return string;
  }
  int position=0;
  while (slashIndex > -1) {
    String subString=string.substring(position,slashIndex);
    returnString+=subString;
    position=slashIndex;
    char nextChar=string.charAt(slashIndex + 1);
switch (nextChar) {
case 'b':
{
        position+=2;
        returnString+='\b';
        break;
      }
case 'r':
{
      position+=2;
      returnString+='\r';
      break;
    }
case 'f':
{
    position+=2;
    returnString+='\f';
    break;
  }
case 'n':
{
  position+=2;
  returnString+='\n';
  break;
}
case 't':
{
position+=2;
returnString+='\t';
break;
}
case '""':
{
position+=2;
returnString+='""';
break;
}
case '\\':
{
position+=2;
returnString+='\\';
break;
}
case '/':
{
position+=2;
returnString+='/';
break;
}
case 'u':
{
position+=6;
String hexValue=string.substring(slashIndex + 2,slashIndex + 6);
returnString+=Character.toString((char)Integer.parseInt(hexValue,16));
break;
}
}
slashIndex=string.indexOf('\\',position);
}
if (position < string.length()) {
String subString=string.substring(position,string.length());
returnString+=subString;
}
return returnString;
}"
65522,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('""') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
        if ('""' == character) {
          writer.write(""String_Node_Str"");
        }
 else {
          writer.write(character);
        }
      }
    }
 else {
      writer.write(value);
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    char[] chars=value.toCharArray();
    for (int x=0, charsSize=chars.length; x < charsSize; x++) {
      char character=chars[x];
switch (character) {
case '""':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '\b':
{
        writer.write(""String_Node_Str"");
        writer.write(""String_Node_Str"");
        break;
      }
case '\f':
{
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      break;
    }
case '\n':
{
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    break;
  }
case '\r':
{
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  break;
}
case '\t':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '\\':
{
writer.write(""String_Node_Str"");
writer.write(""String_Node_Str"");
break;
}
case '/':
{
writer.write(""String_Node_Str"");
break;
}
default :
{
if (Character.isISOControl(character)) {
writer.write(""String_Node_Str"");
String hex=Integer.toHexString(character).toUpperCase();
for (int i=hex.length(); i < 4; i++) {
writer.write(""String_Node_Str"");
}
writer.write(hex);
}
 else {
writer.write(character);
}
}
}
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65523,"protected void validateAbstractFromClause(AbstractFromClause expression){
  if (expression.hasDeclaration()) {
    validateCollectionSeparatedByComma(expression.getDeclaration(),AbstractFromClause_IdentificationVariableDeclarationEndsWithComma,AbstractFromClause_IdentificationVariableDeclarationIsMissingComma);
    List<Declaration> declarations=context.getDeclarations();
    for (int index=0, count=declarations.size(); index < count; index++) {
      Declaration declaration=declarations.get(index);
      if (declaration.isRange() && declaration.hasJoins()) {
        List<Map.Entry<Join,String>> joinEntries=declaration.getJoinEntries();
        for (int joinIndex=0, joinCount=joinEntries.size(); joinIndex < joinCount; joinIndex++) {
          Map.Entry<Join,String> joinEntry=joinEntries.get(joinIndex);
          Join join=joinEntry.getKey();
          String variableName=context.literal(join.getJoinAssociationPath(),LiteralType.PATH_EXPRESSION_IDENTIFICATION_VARIABLE);
          if (ExpressionTools.stringIsNotEmpty(variableName) && !isIdentificationVariableDeclaredBefore(variableName,index,joinIndex,declarations)) {
            int startPosition=position(join.getJoinAssociationPath());
            int endPosition=startPosition + variableName.length();
            addProblem(expression,startPosition,endPosition,AbstractFromClause_WrongOrderOfIdentificationVariableDeclaration,variableName);
          }
        }
      }
 else       if (!declaration.isRange()) {
        String variableName=context.literal(declaration.getBaseExpression(),LiteralType.PATH_EXPRESSION_IDENTIFICATION_VARIABLE);
        if (ExpressionTools.stringIsNotEmpty(variableName) && !isIdentificationVariableDeclaredBefore(variableName,index,-1,declarations)) {
          int startPosition=position(declaration.getDeclarationExpression()) - variableName.length();
          int endPosition=startPosition + variableName.length();
          addProblem(expression,startPosition,endPosition,AbstractFromClause_WrongOrderOfIdentificationVariableDeclaration,variableName);
        }
      }
    }
  }
 else {
    int startPosition=position(expression) + FROM.length();
    if (expression.hasSpaceAfterFrom()) {
      startPosition++;
    }
    int endPosition=startPosition;
    addProblem(expression,startPosition,endPosition,AbstractFromClause_MissingIdentificationVariableDeclaration);
  }
}","protected void validateAbstractFromClause(AbstractFromClause expression){
  if (expression.hasDeclaration()) {
    validateCollectionSeparatedByComma(expression.getDeclaration(),AbstractFromClause_IdentificationVariableDeclarationEndsWithComma,AbstractFromClause_IdentificationVariableDeclarationIsMissingComma);
    List<Declaration> declarations=context.getDeclarations();
    for (int index=0, count=declarations.size(); index < count; index++) {
      Declaration declaration=declarations.get(index);
      if (declaration.isRange() && declaration.hasJoins()) {
        List<Map.Entry<Join,String>> joinEntries=declaration.getJoinEntries();
        for (int joinIndex=0, joinCount=joinEntries.size(); joinIndex < joinCount; joinIndex++) {
          Map.Entry<Join,String> joinEntry=joinEntries.get(joinIndex);
          Join join=joinEntry.getKey();
          String variableName=context.literal(join.getJoinAssociationPath(),LiteralType.PATH_EXPRESSION_IDENTIFICATION_VARIABLE);
          if (ExpressionTools.stringIsNotEmpty(variableName) && isIdentificationVariableDeclaredAfter(variableName,index,joinIndex,declarations)) {
            int startPosition=position(join.getJoinAssociationPath());
            int endPosition=startPosition + variableName.length();
            addProblem(expression,startPosition,endPosition,AbstractFromClause_WrongOrderOfIdentificationVariableDeclaration,variableName);
          }
        }
      }
 else       if (!declaration.isRange()) {
        String variableName=context.literal(declaration.getBaseExpression(),LiteralType.PATH_EXPRESSION_IDENTIFICATION_VARIABLE);
        if (ExpressionTools.stringIsNotEmpty(variableName) && isIdentificationVariableDeclaredAfter(variableName,index,-1,declarations)) {
          int startPosition=position(declaration.getDeclarationExpression()) - variableName.length();
          int endPosition=startPosition + variableName.length();
          addProblem(expression,startPosition,endPosition,AbstractFromClause_WrongOrderOfIdentificationVariableDeclaration,variableName);
        }
      }
    }
  }
 else {
    int startPosition=position(expression) + FROM.length();
    if (expression.hasSpaceAfterFrom()) {
      startPosition++;
    }
    int endPosition=startPosition;
    addProblem(expression,startPosition,endPosition,AbstractFromClause_MissingIdentificationVariableDeclaration);
  }
}"
65524,"protected AbstractTripleEncapsulatedExpressionHelper<SubstringExpression> buildSubstringExpressionHelper(){
  return new AbstractTripleEncapsulatedExpressionHelper<SubstringExpression>(){
    @Override public String firstCommaMissingKey(){
      return SubstringExpression_MissingFirstComma;
    }
    @Override public String firstExpressionInvalidKey(){
      return SubstringExpression_InvalidFirstExpression;
    }
    @Override public String firstExpressionMissingKey(){
      return SubstringExpression_MissingFirstExpression;
    }
    @Override public boolean hasThirdExpression(    SubstringExpression expression){
      boolean hasThirdExpression=super.hasThirdExpression(expression);
      if (!hasThirdExpression && getJPAVersion().isNewerThanOrEqual(JPAVersion.VERSION_2_0)) {
        hasThirdExpression=true;
      }
      return hasThirdExpression;
    }
    public String identifier(    SubstringExpression expression){
      return SUBSTRING;
    }
    @Override public boolean isFirstExpressionValid(    SubstringExpression expression){
      return isValid(expression.getFirstExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    @Override public boolean isSecondExpressionValid(    SubstringExpression expression){
      return isValid(expression.getSecondExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    @Override public boolean isThirdExpressionValid(    SubstringExpression expression){
      return isValid(expression.getThirdExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    public String leftParenthesisMissingKey(){
      return SubstringExpression_MissingLeftParenthesis;
    }
    public String rightParenthesisMissingKey(){
      return SubstringExpression_MissingRightParenthesis;
    }
    @Override public String secondCommaMissingKey(){
      return SubstringExpression_MissingSecondComma;
    }
    @Override public String secondExpressionInvalidKey(){
      return SubstringExpression_InvalidSecondExpression;
    }
    @Override public String secondExpressionMissingKey(){
      return SubstringExpression_MissingSecondExpression;
    }
    @Override public String thirdExpressionInvalidKey(){
      return SubstringExpression_InvalidThirdExpression;
    }
    @Override public String thirdExpressionMissingKey(){
      return SubstringExpression_MissingThirdExpression;
    }
  }
;
}","protected AbstractTripleEncapsulatedExpressionHelper<SubstringExpression> buildSubstringExpressionHelper(){
  return new AbstractTripleEncapsulatedExpressionHelper<SubstringExpression>(){
    @Override public String firstCommaMissingKey(){
      return SubstringExpression_MissingFirstComma;
    }
    @Override public String firstExpressionInvalidKey(){
      return SubstringExpression_InvalidFirstExpression;
    }
    @Override public String firstExpressionMissingKey(){
      return SubstringExpression_MissingFirstExpression;
    }
    public String identifier(    SubstringExpression expression){
      return SUBSTRING;
    }
    @Override public boolean isFirstExpressionValid(    SubstringExpression expression){
      return isValid(expression.getFirstExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    @Override public boolean isSecondExpressionValid(    SubstringExpression expression){
      return isValid(expression.getSecondExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    @Override public boolean isThirdExpressionValid(    SubstringExpression expression){
      return isValid(expression.getThirdExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    public String leftParenthesisMissingKey(){
      return SubstringExpression_MissingLeftParenthesis;
    }
    public String rightParenthesisMissingKey(){
      return SubstringExpression_MissingRightParenthesis;
    }
    @Override public String secondCommaMissingKey(){
      return SubstringExpression_MissingSecondComma;
    }
    @Override public String secondExpressionInvalidKey(){
      return SubstringExpression_InvalidSecondExpression;
    }
    @Override public String secondExpressionMissingKey(){
      return SubstringExpression_MissingSecondExpression;
    }
    @Override public String thirdExpressionInvalidKey(){
      return SubstringExpression_InvalidThirdExpression;
    }
    @Override public String thirdExpressionMissingKey(){
      return SubstringExpression_MissingThirdExpression;
    }
  }
;
}"
65525,"protected AbstractTripleEncapsulatedExpressionHelper<LocateExpression> buildLocateExpressionHelper(){
  return new AbstractTripleEncapsulatedExpressionHelper<LocateExpression>(){
    @Override public String firstCommaMissingKey(){
      return LocateExpression_MissingFirstComma;
    }
    @Override public String firstExpressionInvalidKey(){
      return LocateExpression_InvalidFirstExpression;
    }
    @Override public String firstExpressionMissingKey(){
      return LocateExpression_MissingFirstExpression;
    }
    public String identifier(    LocateExpression expression){
      return LOCATE;
    }
    @Override public boolean isFirstExpressionValid(    LocateExpression expression){
      return isValid(expression.getFirstExpression(),StringPrimaryBNF.ID);
    }
    @Override public boolean isSecondExpressionValid(    LocateExpression expression){
      return isValid(expression.getSecondExpression(),StringPrimaryBNF.ID);
    }
    @Override public boolean isThirdExpressionValid(    LocateExpression expression){
      return isValid(expression.getThirdExpression(),StringPrimaryBNF.ID);
    }
    public String leftParenthesisMissingKey(){
      return LocateExpression_MissingLeftParenthesis;
    }
    public String rightParenthesisMissingKey(){
      return LocateExpression_MissingRightParenthesis;
    }
    @Override public String secondCommaMissingKey(){
      return LocateExpression_MissingSecondComma;
    }
    @Override public String secondExpressionInvalidKey(){
      return LocateExpression_InvalidSecondExpression;
    }
    @Override public String secondExpressionMissingKey(){
      return LocateExpression_MissingSecondExpression;
    }
    @Override public String thirdExpressionInvalidKey(){
      return LocateExpression_InvalidThirdExpression;
    }
    @Override public String thirdExpressionMissingKey(){
      return LocateExpression_MissingThirdExpression;
    }
  }
;
}","protected AbstractTripleEncapsulatedExpressionHelper<LocateExpression> buildLocateExpressionHelper(){
  return new AbstractTripleEncapsulatedExpressionHelper<LocateExpression>(){
    @Override public String firstCommaMissingKey(){
      return LocateExpression_MissingFirstComma;
    }
    @Override public String firstExpressionInvalidKey(){
      return LocateExpression_InvalidFirstExpression;
    }
    @Override public String firstExpressionMissingKey(){
      return LocateExpression_MissingFirstExpression;
    }
    public String identifier(    LocateExpression expression){
      return LOCATE;
    }
    @Override public boolean isFirstExpressionValid(    LocateExpression expression){
      return isValid(expression.getFirstExpression(),StringPrimaryBNF.ID);
    }
    @Override public boolean isSecondExpressionValid(    LocateExpression expression){
      return isValid(expression.getSecondExpression(),StringPrimaryBNF.ID);
    }
    @Override public boolean isThirdExpressionValid(    LocateExpression expression){
      return isValid(expression.getThirdExpression(),SimpleArithmeticExpressionBNF.ID);
    }
    public String leftParenthesisMissingKey(){
      return LocateExpression_MissingLeftParenthesis;
    }
    public String rightParenthesisMissingKey(){
      return LocateExpression_MissingRightParenthesis;
    }
    @Override public String secondCommaMissingKey(){
      return LocateExpression_MissingSecondComma;
    }
    @Override public String secondExpressionInvalidKey(){
      return LocateExpression_InvalidSecondExpression;
    }
    @Override public String secondExpressionMissingKey(){
      return LocateExpression_MissingSecondExpression;
    }
    @Override public String thirdExpressionInvalidKey(){
      return LocateExpression_InvalidThirdExpression;
    }
    @Override public String thirdExpressionMissingKey(){
      return LocateExpression_MissingThirdExpression;
    }
  }
;
}"
65526,"/** 
 * INTERNAL: Add abstract class indicator information to the database row.  This is required when building a row for an insert or an update of a concrete child descriptor.
 */
public void addClassIndicatorFieldToRow(AbstractRecord databaseRow){
  if (hasClassExtractor()) {
    return;
  }
  DatabaseField field=getClassIndicatorField();
  Object value=getClassIndicatorValue();
  boolean namespaceAware=((XMLRecord)databaseRow).isNamespaceAware();
  if (!namespaceAware && value instanceof String) {
    int colonIndex=((String)value).indexOf(XMLConstants.COLON);
    if (colonIndex > -1) {
      value=((String)value).substring(colonIndex + 1);
    }
  }
 else   if (namespaceAware && value instanceof String) {
    if (((XMLRecord)databaseRow).getNamespaceSeparator() != XMLConstants.COLON) {
      value=((String)value).replace(XMLConstants.COLON,((XMLRecord)databaseRow).getNamespaceSeparator());
    }
  }
  databaseRow.put(field,value);
}","/** 
 * INTERNAL: Add abstract class indicator information to the database row.  This is required when building a row for an insert or an update of a concrete child descriptor.
 */
public void addClassIndicatorFieldToRow(AbstractRecord databaseRow){
  if (hasClassExtractor()) {
    return;
  }
  DatabaseField field=getClassIndicatorField();
  Object value=getClassIndicatorValue();
  boolean namespaceAware=((XMLRecord)databaseRow).isNamespaceAware() || ((XMLRecord)databaseRow).hasCustomNamespaceMapper();
  if (!namespaceAware && value instanceof String) {
    int colonIndex=((String)value).indexOf(XMLConstants.COLON);
    if (colonIndex > -1) {
      value=((String)value).substring(colonIndex + 1);
    }
  }
 else   if (namespaceAware && value instanceof String) {
    if (((XMLRecord)databaseRow).getNamespaceSeparator() != XMLConstants.COLON) {
      value=((String)value).replace(XMLConstants.COLON,((XMLRecord)databaseRow).getNamespaceSeparator());
    }
  }
  databaseRow.put(field,value);
}"
65527,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (namespaceResolver == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  marshalRecord.setMarshaller(this);
  if (this.mapper == null && namespaceResolver == null) {
    addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  }
 else   if (this.mapper != null) {
    marshalRecord.setNamespaceResolver(new PrefixMapperNamespaceResolver(mapper,descriptor.getNamespaceResolver()));
    marshalRecord.setCustomNamespaceMapper(true);
  }
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    if (isIncludeRoot()) {
      marshalRecord.openStartElement(rootFragment,nr);
    }
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.nilSimple(nr);
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    if (isIncludeRoot()) {
      marshalRecord.closeStartElement();
    }
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      marshalRecord.characters(root.getSchemaType(),object,null,false);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING)) && isIncludeRoot()) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65528,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    String namespaceUri=xPathFragment.getNamespaceURI();
    if (namespaceUri == null) {
      namespaceUri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.startElement(namespaceUri,xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    String namespaceUri=xPathFragment.getNamespaceURI();
    if (namespaceUri == null) {
      namespaceUri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.startElement(namespaceUri,xPathFragment.getLocalName(),getNameForFragment(xPathFragment),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65529,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    String uri=xPathFragment.getNamespaceURI();
    if (uri == null) {
      uri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.endElement(uri,xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappings.remove(prefixMappings.size() - 1);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    String uri=xPathFragment.getNamespaceURI();
    if (uri == null) {
      uri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.endElement(uri,xPathFragment.getLocalName(),getNameForFragment(xPathFragment));
    List<String> currentLevelPrefixMappings=prefixMappings.remove(prefixMappings.size() - 1);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65530,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes.clear();
    String namespaceURI=frag.getNamespaceURI();
    if (namespaceURI == null) {
      namespaceURI=XMLConstants.EMPTY_STRING;
    }
    String localName=frag.getLocalName();
    String shortName=frag.getShortName();
    contentHandler.startElement(namespaceURI,localName,shortName,attributes);
    contentHandler.endElement(namespaceURI,localName,shortName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes.clear();
    String namespaceURI=frag.getNamespaceURI();
    if (namespaceURI == null) {
      namespaceURI=XMLConstants.EMPTY_STRING;
    }
    String localName=frag.getLocalName();
    String shortName=getNameForFragment(frag);
    contentHandler.startElement(namespaceURI,localName,shortName,attributes);
    contentHandler.endElement(namespaceURI,localName,shortName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65531,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=this.getContainerForMapping(mapping,referenceSourceObject);
      if (container == null) {
        if (mapping.getReuseContainer()) {
          container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
        }
 else {
          container=cPolicy.containerInstance();
        }
        this.referencedContainers.put(new ReferenceKey(referenceSourceObject,mapping),container);
      }
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
  referencedContainers=new HashMap<ReferenceKey,Object>();
}","/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(AbstractSession session,IDResolver userSpecifiedResolver){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof XMLCollectionReferenceMapping) {
      XMLCollectionReferenceMapping mapping=(XMLCollectionReferenceMapping)reference.getMapping();
      ContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=this.getContainerForMapping(mapping,referenceSourceObject);
      if (container == null) {
        if (mapping.getReuseContainer()) {
          container=mapping.getAttributeAccessor().getAttributeValueFromObject(referenceSourceObject);
        }
        if (null == container) {
          container=cPolicy.containerInstance();
        }
        this.referencedContainers.put(new ReferenceKey(referenceSourceObject,mapping),container);
      }
      createPKVectorsFromMap(reference,mapping);
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          value=getValue(session,reference,primaryKey);
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof XMLObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              XMLObjectReferenceMapping refMapping=(XMLObjectReferenceMapping)reference.getMapping();
              String idName=refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().elementAt(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey);
      }
      XMLObjectReferenceMapping mapping=(XMLObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      XMLInverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        AttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        ContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  if (session.isUnitOfWork()) {
    ((UnitOfWork)session).release();
  }
  references=new ArrayList<Reference>();
  referencedContainers=new HashMap<ReferenceKey,Object>();
}"
65532,"public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  ContainerPolicy cp=xmlAnyAttributeMapping.getContainerPolicy();
  Object containerInstance=unmarshalRecord.getContainerInstance(this);
  boolean includeAttribute=true;
  if (!xmlAnyAttributeMapping.isNamespaceDeclarationIncluded() && XMLConstants.XMLNS_URL.equals(namespaceURI)) {
    includeAttribute=false;
  }
 else   if (!xmlAnyAttributeMapping.isSchemaInstanceIncluded() && XMLConstants.SCHEMA_INSTANCE_URL.equals(namespaceURI)) {
    includeAttribute=false;
  }
  if (includeAttribute) {
    QName key=new QName(namespaceURI,localName);
    cp.addInto(key,value,containerInstance,unmarshalRecord.getSession());
  }
}","public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  boolean includeAttribute=true;
  if (!xmlAnyAttributeMapping.isNamespaceDeclarationIncluded() && XMLConstants.XMLNS_URL.equals(namespaceURI)) {
    includeAttribute=false;
  }
 else   if (!xmlAnyAttributeMapping.isSchemaInstanceIncluded() && XMLConstants.SCHEMA_INSTANCE_URL.equals(namespaceURI)) {
    includeAttribute=false;
  }
  if (includeAttribute) {
    ContainerPolicy cp=xmlAnyAttributeMapping.getContainerPolicy();
    Object containerInstance=unmarshalRecord.getContainerInstance(this);
    QName key=new QName(namespaceURI,localName);
    cp.addInto(key,value,containerInstance,unmarshalRecord.getSession());
  }
}"
65533,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware());
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware());
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
65534,"/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value){
  try {
    if (value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    writer.write(character);
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
65535,"/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType instanceof ArgumentType) {
    dType=((ArgumentType)dType).getDataType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=dType.getTypeName();
    String javaTypeName=(dType.getTypeName()).toLowerCase();
    if (dType instanceof PLSQLType) {
      if (catalog != null) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType instanceof PLSQLRecordType) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getDataType() instanceof PrecisionType) {
            PrecisionType precisionType=(PrecisionType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getDataType() instanceof SizedType) {
            SizedType sizedType=(SizedType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getDataType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getNestedType(),catalog));
      return plsqlCollection;
    }
    if (dType instanceof VArrayType) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType instanceof ObjectType) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(javaTypeName);
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getDataType()));
      }
      return objType;
    }
    if (dType instanceof ObjectTableType) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType instanceof ScalarDatabaseTypeEnum) {
    return OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseTypeEnum)dType).getTypeName());
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}","/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType instanceof ArgumentType) {
    dType=((ArgumentType)dType).getDataType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=dType.getTypeName();
    String javaTypeName=(dType.getTypeName()).toLowerCase();
    if (dType instanceof PLSQLType) {
      if (catalog != null) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType instanceof PLSQLRecordType) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getDataType() instanceof PrecisionType) {
            PrecisionType precisionType=(PrecisionType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getDataType() instanceof SizedType) {
            SizedType sizedType=(SizedType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getDataType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getNestedType(),catalog));
      return plsqlCollection;
    }
    if (dType instanceof VArrayType) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType instanceof ObjectType) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(getGeneratedJavaClassName(javaTypeName,dbwsBuilder.getProjectName()));
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getDataType()));
      }
      return objType;
    }
    if (dType instanceof ObjectTableType) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(getGeneratedWrapperClassName(javaTypeName,dbwsBuilder.getProjectName()));
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType instanceof ScalarDatabaseTypeEnum) {
    return OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseTypeEnum)dType).getTypeName());
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}"
65536,"public void setProjectName(String projectName){
  properties.put(PROJNAME_KEY,projectName);
}","/** 
 * Sets the projectName property.
 */
public void setProjectName(String projectName){
  properties.put(PROJNAME_KEY,projectName);
}"
65537,"public String getProjectName(){
  return properties.get(PROJNAME_KEY);
}","/** 
 * Return the projectName property or the default (myProject) if not set.
 */
public String getProjectName(){
  String prjName=properties.get(PROJNAME_KEY);
  return (prjName != null && prjName.length() > 0) ? prjName : DEFAULT_PROJECT_NAME;
}"
65538,"public static String getGeneratedJavaClassName(String tableName,String projectName){
  String first=tableName.substring(0,1).toUpperCase();
  String rest=tableName.toLowerCase().substring(1);
  return projectName.toLowerCase() + ""String_Node_Str"" + first+ rest;
}","/** 
 * Returns a Java class name based on a given name and project.  The returned string  will be  in the format  'projectname.Name'.   For  example,  given the name 'EMPLOYEE'  and projectName 'TEST', the  method would return  the string 'test.Employee'.
 */
public static String getGeneratedJavaClassName(String name,String projectName){
  String first=name.substring(0,1).toUpperCase();
  String rest=name.toLowerCase().substring(1);
  return projectName.toLowerCase() + DOT + first+ rest;
}"
65539,"public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  lazyInitialize();
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)descriptor).getNamespaceResolver();
  List<XPathNode> attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    ObjectMarshalContext objectMarshalContext=ObjectMarshalContext.getInstance();
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      hasValue=attributeChildren.get(x).marshal(marshalRecord,object,session,namespaceResolver,null,objectMarshalContext,null) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  List<XPathNode> selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (    XPathNode selfXPathNode : selfChildren) {
      NodeValue marshalNodeValue=selfXPathNode.getMarshalNodeValue();
      if (marshalNodeValue instanceof MappingNodeValue) {
        DatabaseMapping selfMapping=((MappingNodeValue)marshalNodeValue).getMapping();
        Object value=selfMapping.getAttributeValueFromObject(object);
        XMLDescriptor referenceDescriptor=(XMLDescriptor)selfMapping.getReferenceDescriptor();
        XMLDescriptor valueDescriptor;
        if (value != null && (referenceDescriptor == null || referenceDescriptor.hasInheritance())) {
          valueDescriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
        }
 else {
          valueDescriptor=referenceDescriptor;
        }
        if (null != valueDescriptor) {
          this.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,valueDescriptor,referenceDescriptor,(XMLField)selfMapping.getField(),false);
        }
      }
      selfXPathNode.marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}","public boolean marshalAttributes(MarshalRecord marshalRecord,Object object,AbstractSession session){
  lazyInitialize();
  boolean hasValue=false;
  NamespaceResolver namespaceResolver=((XMLDescriptor)descriptor).getNamespaceResolver();
  List<XPathNode> attributeChildren=rootXPathNode.getAttributeChildren();
  if (null != attributeChildren) {
    ObjectMarshalContext objectMarshalContext=ObjectMarshalContext.getInstance();
    for (int x=0, attributeChildrenSize=attributeChildren.size(); x < attributeChildrenSize; x++) {
      hasValue=attributeChildren.get(x).marshal(marshalRecord,object,session,namespaceResolver,null,objectMarshalContext,null) || hasValue;
    }
  }
  if (rootXPathNode.getAnyAttributeNode() != null) {
    hasValue=rootXPathNode.getAnyAttributeNode().marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  List<XPathNode> selfChildren=rootXPathNode.getSelfChildren();
  if (null != selfChildren) {
    for (    XPathNode selfXPathNode : selfChildren) {
      NodeValue marshalNodeValue=selfXPathNode.getMarshalNodeValue();
      if (marshalNodeValue instanceof MappingNodeValue) {
        DatabaseMapping selfMapping=((MappingNodeValue)marshalNodeValue).getMapping();
        Object value=selfMapping.getAttributeValueFromObject(object);
        XMLDescriptor referenceDescriptor=(XMLDescriptor)selfMapping.getReferenceDescriptor();
        XMLDescriptor valueDescriptor;
        if (value != null && (referenceDescriptor == null || referenceDescriptor.hasInheritance())) {
          valueDescriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
        }
 else {
          valueDescriptor=referenceDescriptor;
        }
        if (null != valueDescriptor) {
          ((XMLObjectBuilder)valueDescriptor.getObjectBuilder()).addXsiTypeAndClassIndicatorIfRequired(marshalRecord,valueDescriptor,referenceDescriptor,(XMLField)selfMapping.getField(),false);
        }
      }
      selfXPathNode.marshalSelfAttributes(marshalRecord,object,session,namespaceResolver,marshalRecord.getMarshaller());
    }
  }
  return hasValue;
}"
65540,"public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      if (leafType == null && referenceDescriptor == null) {
        QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
        writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
            writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      Object classIndicatorValueObject=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      QName classIndicatorQName=null;
      if (classIndicatorValueObject instanceof QName) {
        classIndicatorQName=(QName)classIndicatorValueObject;
      }
 else {
        String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
        int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
        String localName=null;
        String prefix=null;
        if (nsindex != -1) {
          localName=classIndicatorValue.substring(nsindex + 1);
          prefix=classIndicatorValue.substring(0,nsindex);
        }
 else {
          localName=classIndicatorValue;
        }
        String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        classIndicatorQName=new QName(namespaceURI,localName);
      }
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        if (xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        }
 else {
          writeXsiTypeAttribute(xmlDescriptor,record,classIndicatorQName,addToNamespaceResolver);
        }
        return true;
      }
      return false;
    }
  }
  return false;
}","public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  if (descriptor.hasInheritance() && !xsiTypeIndicatorField) {
    xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      if (leafType == null && referenceDescriptor == null) {
        QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
        writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        if (leafType != null) {
          QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
          if (!ctxQName.equals(leafType)) {
            QName typeValueQName=getTypeValueToWriteAsQName(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
            writeXsiTypeAttribute(xmlDescriptor,record,typeValueQName,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      Object classIndicatorValueObject=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      QName classIndicatorQName=null;
      if (classIndicatorValueObject instanceof QName) {
        classIndicatorQName=(QName)classIndicatorValueObject;
      }
 else {
        String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
        int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
        String localName=null;
        String prefix=null;
        if (nsindex != -1) {
          localName=classIndicatorValue.substring(nsindex + 1);
          prefix=classIndicatorValue.substring(0,nsindex);
        }
 else {
          localName=classIndicatorValue;
        }
        String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
        classIndicatorQName=new QName(namespaceURI,localName);
      }
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        if (xmlDescriptor.getInheritancePolicy().hasClassExtractor()) {
          xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        }
 else {
          writeXsiTypeAttribute(xmlDescriptor,record,classIndicatorQName,addToNamespaceResolver);
        }
        return true;
      }
      return false;
    }
  }
  return false;
}"
65541,"public void initialize(AbstractSession session) throws DescriptorException {
  mappingsByField.clear();
  if (null != readOnlyMappingsByField) {
    readOnlyMappingsByField.clear();
  }
  if (null != mappingsByAttribute) {
    mappingsByAttribute.clear();
  }
  cloningMappings.clear();
  if (null != eagerMappings) {
    eagerMappings.clear();
  }
  if (null != relationshipMappings) {
    relationshipMappings.clear();
  }
  for (Enumeration mappings=this.descriptor.getMappings().elements(); mappings.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.nextElement();
    if (!mapping.isWriteOnly()) {
      if (mappingsByAttribute != null) {
        getMappingsByAttribute().put(mapping.getAttributeName(),mapping);
      }
    }
    if (mapping.isCloningRequired()) {
      getCloningMappings().add(mapping);
    }
    if (mapping.isForeignReferenceMapping() && ((ForeignReferenceMapping)mapping).usesIndirection() && (!mapping.isLazy())) {
      getEagerMappings().add(mapping);
    }
    if (!mapping.isDirectToFieldMapping()) {
      if (null != relationshipMappings) {
        relationshipMappings.add(mapping);
      }
    }
    for (    DatabaseField field : mapping.getFields()) {
      if (mapping.isReadOnly()) {
        if (null != readOnlyMappingsByField) {
          List readOnlyMappings=getReadOnlyMappingsByField().get(field);
          if (readOnlyMappings == null) {
            readOnlyMappings=new ArrayList();
            getReadOnlyMappingsByField().put(field,readOnlyMappings);
          }
          readOnlyMappings.add(mapping);
        }
      }
 else {
        if (mapping.isAggregateObjectMapping()) {
          ObjectBuilder aggregateObjectBuilder=((AggregateObjectMapping)mapping).getReferenceDescriptor().getObjectBuilder();
          DatabaseMapping aggregatedFieldMapping=aggregateObjectBuilder.getMappingForField(field);
          if (aggregatedFieldMapping == null) {
            List readOnlyMappings=getReadOnlyMappingsByField().get(field);
            if (readOnlyMappings == null) {
              readOnlyMappings=new ArrayList();
              getReadOnlyMappingsByField().put(field,readOnlyMappings);
            }
            readOnlyMappings.add(mapping);
          }
 else {
            getMappingsByField().put(field,mapping);
          }
        }
 else {
          if (!getMappingsByField().containsKey(field)) {
            getMappingsByField().put(field,mapping);
          }
        }
      }
    }
  }
  this.isSimple=null == relationshipMappings || relationshipMappings.isEmpty();
  initializePrimaryKey(session);
  initializeJoinedAttributes();
  if (this.descriptor.usesSequenceNumbers()) {
    DatabaseMapping sequenceMapping=getMappingForField(this.descriptor.getSequenceNumberField());
    if ((sequenceMapping != null) && sequenceMapping.isDirectToFieldMapping()) {
      setSequenceMapping((AbstractDirectMapping)sequenceMapping);
    }
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  mappingsByField.clear();
  if (null != readOnlyMappingsByField) {
    readOnlyMappingsByField.clear();
  }
  if (null != mappingsByAttribute) {
    mappingsByAttribute.clear();
  }
  cloningMappings.clear();
  if (null != eagerMappings) {
    eagerMappings.clear();
  }
  if (null != relationshipMappings) {
    relationshipMappings.clear();
  }
  for (Enumeration mappings=this.descriptor.getMappings().elements(); mappings.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.nextElement();
    if (!mapping.isWriteOnly()) {
      if (mappingsByAttribute != null) {
        getMappingsByAttribute().put(mapping.getAttributeName(),mapping);
      }
    }
    if (mapping.isCloningRequired()) {
      getCloningMappings().add(mapping);
    }
    if (mapping.isForeignReferenceMapping() && ((ForeignReferenceMapping)mapping).usesIndirection() && (!mapping.isLazy())) {
      getEagerMappings().add(mapping);
    }
    if (!mapping.isDirectToFieldMapping()) {
      if (null != relationshipMappings) {
        relationshipMappings.add(mapping);
      }
    }
    for (    DatabaseField field : mapping.getFields()) {
      if (mapping.isReadOnly()) {
        if (null != readOnlyMappingsByField) {
          List readOnlyMappings=getReadOnlyMappingsByField().get(field);
          if (readOnlyMappings == null) {
            readOnlyMappings=new ArrayList();
            getReadOnlyMappingsByField().put(field,readOnlyMappings);
          }
          readOnlyMappings.add(mapping);
        }
      }
 else {
        if (mapping.isAggregateObjectMapping()) {
          ObjectBuilder aggregateObjectBuilder=((AggregateObjectMapping)mapping).getReferenceDescriptor().getObjectBuilder();
          DatabaseMapping aggregatedFieldMapping=aggregateObjectBuilder.getMappingForField(field);
          if (aggregatedFieldMapping == null) {
            List readOnlyMappings=getReadOnlyMappingsByField().get(field);
            if (readOnlyMappings == null) {
              readOnlyMappings=new ArrayList();
              getReadOnlyMappingsByField().put(field,readOnlyMappings);
            }
            readOnlyMappings.add(mapping);
          }
 else {
            getMappingsByField().put(field,mapping);
          }
        }
 else {
          if (!getMappingsByField().containsKey(field)) {
            getMappingsByField().put(field,mapping);
          }
        }
      }
    }
  }
  this.isSimple=null == relationshipMappings || relationshipMappings.isEmpty();
  initializePrimaryKey(session);
  initializeJoinedAttributes();
  if (this.descriptor.usesSequenceNumbers()) {
    DatabaseMapping sequenceMapping=getMappingForField(this.descriptor.getSequenceNumberField());
    if ((sequenceMapping != null) && sequenceMapping.isDirectToFieldMapping()) {
      setSequenceMapping((AbstractDirectMapping)sequenceMapping);
    }
  }
  if (descriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)descriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
    }
  }
}"
65542,"/** 
 * Not supported.
 */
public boolean isSynthetic(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Not supported.
 */
public boolean isSynthetic(){
  return false;
}"
65543,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
 else     if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
      int modifiers=next.getModifiers();
      if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
        propertyMethods.add(next);
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic)) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      boolean isTransient=helper.isAnnotationPresent(property.getElement(),XmlTransient.class);
      boolean isLocation=helper.isAnnotationPresent(property.getElement(),XmlLocation.class);
      if (!isTransient || (isTransient && isLocation)) {
        properties.add(property);
      }
 else {
        List<String> propOrderList=Arrays.asList(info.getPropOrder());
        if (propOrderList.contains(propertyName)) {
          throw JAXBException.transientInProporder(propertyName);
        }
        property.setTransient(true);
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
65544,"@Test public void testBoolean(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",Integer.valueOf(1));
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(TEST_BOOLEAN_RESULT));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void testBoolean(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",Integer.valueOf(0));
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(TEST_BOOLEAN_RESULT));
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
65545,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_BOOL_IN_PROC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_BOOL_PROC,ddlDebug);
    runDdl(conn,CREATE_BINARY_INT_PROC,ddlDebug);
    runDdl(conn,CREATE_PLS_INT_PROC,ddlDebug);
    runDdl(conn,CREATE_NATURAL_PROC,ddlDebug);
    runDdl(conn,CREATE_POSITIVE_PROC,ddlDebug);
    runDdl(conn,CREATE_SIGNTYPE_PROC,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65546,"@AfterClass public static void tearDown(){
  String ddlDrop=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDrop)) {
    runDdl(conn,DROP_BOOL_IN_PROC,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  String ddlDrop=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDrop)) {
    runDdl(conn,DROP_BOOL_PROC,ddlDebug);
    runDdl(conn,DROP_BINARY_INT_PROC,ddlDebug);
    runDdl(conn,DROP_PLS_INT_PROC,ddlDebug);
    runDdl(conn,DROP_NATURAL_PROC,ddlDebug);
    runDdl(conn,DROP_POSITIVE_PROC,ddlDebug);
    runDdl(conn,DROP_SIGNTYPE_PROC,ddlDebug);
  }
}"
65547,"/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType instanceof ArgumentType) {
    dType=((ArgumentType)dType).getDataType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=dType.getTypeName();
    String javaTypeName=(dType.getTypeName()).toLowerCase();
    if (dType instanceof PLSQLType) {
      if (catalog != null) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType instanceof PLSQLRecordType) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getDataType() instanceof PrecisionType) {
            PrecisionType precisionType=(PrecisionType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getDataType() instanceof SizedType) {
            SizedType sizedType=(SizedType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getDataType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getNestedType(),catalog));
      return plsqlCollection;
    }
    if (dType instanceof VArrayType) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType instanceof ObjectType) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(javaTypeName);
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getDataType()));
      }
      return objType;
    }
    if (dType instanceof ObjectTableType) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType instanceof ScalarDatabaseTypeEnum) {
    if (dType == ScalarDatabaseTypeEnum.BOOLEAN_TYPE) {
      return OraclePLSQLTypes.PLSQLBoolean;
    }
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}","/** 
 * Build a org.eclipse.persistence.internal.helper.DatabaseType  instance  from an org.eclipse.persistence.tools.oracleddl.metadata.DatabaseType instance.  In the the case of PLSQL Packages, the catalog (package) name can be passed in as well.
 */
@SuppressWarnings(""String_Node_Str"") protected org.eclipse.persistence.internal.helper.DatabaseType buildDatabaseTypeFromMetadataType(DatabaseType dType,String catalog){
  if (dType instanceof ArgumentType) {
    dType=((ArgumentType)dType).getDataType();
  }
  if (dType.isComposite()) {
    String typeName=dType.getTypeName();
    String compatibleType=dType.getTypeName();
    String javaTypeName=(dType.getTypeName()).toLowerCase();
    if (dType instanceof PLSQLType) {
      if (catalog != null) {
        typeName=(catalog + ""String_Node_Str"").concat(typeName);
        compatibleType=(catalog + ""String_Node_Str"").concat(compatibleType);
        javaTypeName=(catalog.toLowerCase() + ""String_Node_Str"").concat(javaTypeName);
      }
      if (dType instanceof PLSQLRecordType) {
        PLSQLrecord plsqlRec=new PLSQLrecord();
        plsqlRec.setTypeName(typeName);
        plsqlRec.setCompatibleType(compatibleType);
        plsqlRec.setJavaTypeName(javaTypeName);
        for (        FieldType fld : ((PLSQLRecordType)dType).getFields()) {
          if (fld.getDataType() instanceof PrecisionType) {
            PrecisionType precisionType=(PrecisionType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(precisionType),(int)precisionType.getPrecision(),(int)precisionType.getScale());
          }
 else           if (fld.getDataType() instanceof SizedType) {
            SizedType sizedType=(SizedType)fld.getDataType();
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(sizedType),(int)sizedType.getSize());
          }
 else {
            plsqlRec.addField(fld.getFieldName(),buildDatabaseTypeFromMetadataType(fld.getDataType(),catalog));
          }
        }
        return plsqlRec;
      }
      PLSQLCollection plsqlCollection=new PLSQLCollection();
      plsqlCollection.setTypeName(typeName);
      plsqlCollection.setCompatibleType(compatibleType);
      plsqlCollection.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      plsqlCollection.setNestedType(buildDatabaseTypeFromMetadataType(((PLSQLCollectionType)dType).getNestedType(),catalog));
      return plsqlCollection;
    }
    if (dType instanceof VArrayType) {
      OracleArrayType varray=new OracleArrayType();
      varray.setTypeName(typeName);
      varray.setCompatibleType(compatibleType);
      varray.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      varray.setNestedType(buildDatabaseTypeFromMetadataType(((VArrayType)dType).getEnclosedType(),null));
      return varray;
    }
    if (dType instanceof ObjectType) {
      OracleObjectType objType=new OracleObjectType();
      objType.setTypeName(typeName);
      objType.setCompatibleType(compatibleType);
      objType.setJavaTypeName(javaTypeName);
      Map<String,org.eclipse.persistence.internal.helper.DatabaseType> fields=objType.getFields();
      ObjectType oType=(ObjectType)dType;
      for (      FieldType field : oType.getFields()) {
        fields.put(field.getFieldName(),buildDatabaseTypeFromMetadataType(field.getDataType()));
      }
      return objType;
    }
    if (dType instanceof ObjectTableType) {
      OracleArrayType tableType=new OracleArrayType();
      tableType.setTypeName(typeName);
      tableType.setCompatibleType(compatibleType);
      tableType.setJavaTypeName(javaTypeName + COLLECTION_WRAPPER_SUFFIX);
      org.eclipse.persistence.internal.helper.DatabaseType nestedType=buildDatabaseTypeFromMetadataType(((ObjectTableType)dType).getEnclosedType(),null);
      Class wrapper=getWrapperClass(nestedType);
      if (wrapper != null) {
        ((ComplexDatabaseType)nestedType).setJavaType(wrapper);
      }
      tableType.setNestedType(nestedType);
      return tableType;
    }
    return null;
  }
 else   if (dType instanceof ScalarDatabaseTypeEnum) {
    return OraclePLSQLTypes.getDatabaseTypeForCode(((ScalarDatabaseTypeEnum)dType).getTypeName());
  }
  return JDBCTypes.getDatabaseTypeForCode(org.eclipse.persistence.tools.dbws.Util.getJDBCTypeFromTypeName(dType.getTypeName()));
}"
65548,"/** 
 * Indicates if a given ArgumentType is considered a PL/SQL scalar argument, i.e. it has a data type that is one of BOOLEAN_TYPE, BINARY_INTEGER_TYPE, or PLS_INTEGER_TYPE
 */
public static boolean isArgPLSQLScalar(ArgumentType argument){
  DatabaseType argType=argument.getDataType();
  return argType == ScalarDatabaseTypeEnum.BOOLEAN_TYPE || argType == ScalarDatabaseTypeEnum.BINARY_INTEGER_TYPE || argType == ScalarDatabaseTypeEnum.PLS_INTEGER_TYPE;
}","/** 
 * Indicates if a given ArgumentType is considered a PL/SQL scalar argument, i.e. it has a data type that is one of BOOLEAN_TYPE,  BINARY_INTEGER_TYPE, PLS_INTEGER_TYPE, etc.
 */
public static boolean isArgPLSQLScalar(ArgumentType argument){
  DatabaseType argType=argument.getDataType();
  return argType == ScalarDatabaseTypeEnum.BINARY_INTEGER_TYPE || argType == ScalarDatabaseTypeEnum.BOOLEAN_TYPE || argType == ScalarDatabaseTypeEnum.NATURAL_TYPE || argType == ScalarDatabaseTypeEnum.PLS_INTEGER_TYPE || argType == ScalarDatabaseTypeEnum.POSITIVE_TYPE || argType == ScalarDatabaseTypeEnum.SIGN_TYPE;
}"
65549,"/** 
 * Indicates if a given list of ArgumentTypes contains one or more PL/SQL arguments, i.e. PLSQLRecordType, PLSQLCollectionType, BOOLEAN_TYPE, BINARY_INTEGER_TYPE, or PLS_INTEGER_TYPE
 */
public static boolean hasPLSQLArgs(List<ArgumentType> arguments){
  for (  ArgumentType arg : arguments) {
    if (isArgPLSQL(arg)) {
      return true;
    }
  }
  return false;
}","/** 
 * Indicates if a given list  of ArgumentTypes contains  one or more  PL/SQL arguments, i.e.  PLSQLRecordType, PLSQLCollectionType,  or scalars BOOLEAN_TYPE, BINARY_INTEGER_TYPE, PLS_INTEGER_TYPE, etc.
 */
public static boolean hasPLSQLArgs(List<ArgumentType> arguments){
  for (  ArgumentType arg : arguments) {
    if (isArgPLSQL(arg)) {
      return true;
    }
  }
  return false;
}"
65550,"/** 
 * Indicates if a given ArgumentType is considered a PL/SQL argument, i.e. it has a data type that is one of PLSQLRecordType, PLSQLCollectionType, BOOLEAN_TYPE, BINARY_INTEGER_TYPE, or PLS_INTEGER_TYPE
 */
public static boolean isArgPLSQL(ArgumentType argument){
  DatabaseType argType=argument.getDataType();
  return argType instanceof PLSQLType || isArgPLSQLScalar(argument);
}","/** 
 * Indicates if a given ArgumentType is considered a PL/SQL argument, i.e. it has a data type that is one of PLSQLRecordType,  PLSQLCollectionType, BOOLEAN_TYPE, BINARY_INTEGER_TYPE,  PLS_INTEGER_TYPE, etc. 
 */
public static boolean isArgPLSQL(ArgumentType argument){
  DatabaseType argType=argument.getDataType();
  return argType instanceof PLSQLType || isArgPLSQLScalar(argument);
}"
65551,"private JAXBContextState createContextState(Generator generator,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound,Map properties) throws Exception {
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  SessionEventListener eventListener=new SessionEventListener();
  eventListener.setShouldValidateInstantiationPolicy(false);
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  XMLContext xmlContext=new XMLContext(proj,loader,eventListener);
  if (generator.getAnnotationsProcessor().getPackageToPackageInfoMappings().size() > 1) {
    ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(false);
  }
  return new JAXBContextState(xmlContext,generator,typesToBeBound,properties);
}","private JAXBContextState createContextState(Generator generator,JaxbClassLoader loader,TypeMappingInfo[] typesToBeBound,Map properties) throws Exception {
  Project proj=generator.generateProject();
  ConversionManager conversionManager=null;
  if (classLoader != null) {
    conversionManager=new ConversionManager();
    conversionManager.setLoader(loader);
  }
 else {
    conversionManager=ConversionManager.getDefaultManager();
  }
  proj.convertClassNamesToClasses(conversionManager.getLoader());
  for (Iterator<ClassDescriptor> descriptorIt=proj.getOrderedDescriptors().iterator(); descriptorIt.hasNext(); ) {
    ClassDescriptor descriptor=descriptorIt.next();
    if (descriptor.getJavaClass() == null) {
      descriptor.setJavaClass(conversionManager.convertClassNameToClass(descriptor.getJavaClassName()));
    }
  }
  SessionEventListener eventListener=new SessionEventListener();
  eventListener.setShouldValidateInstantiationPolicy(false);
  XMLPlatform platform=new SAXPlatform();
  platform.getConversionManager().setLoader(loader);
  XMLContext xmlContext=new XMLContext(proj,loader,eventListener);
  ((XMLLogin)xmlContext.getSession(0).getDatasourceLogin()).setEqualNamespaceResolvers(true);
  return new JAXBContextState(xmlContext,generator,typesToBeBound,properties);
}"
65552,"protected ClassDescriptor buildPLSQLargumentDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(PLSQLargument.class);
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping indexMapping=new XMLDirectMapping();
  indexMapping.setAttributeName(""String_Node_Str"");
  indexMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  indexMapping.setNullValue(-1);
  descriptor.addMapping(indexMapping);
  XMLDirectMapping directionMapping=new XMLDirectMapping();
  directionMapping.setAttributeName(""String_Node_Str"");
  directionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ObjectTypeConverter directionConverter=new ObjectTypeConverter();
  directionConverter.addConversionValue(""String_Node_Str"",IN);
  directionConverter.addConversionValue(""String_Node_Str"",INOUT);
  directionConverter.addConversionValue(""String_Node_Str"",OUT);
  directionMapping.setConverter(directionConverter);
  directionMapping.setNullValue(IN);
  descriptor.addMapping(directionMapping);
  XMLDirectMapping lengthMapping=new XMLDirectMapping();
  lengthMapping.setAttributeName(""String_Node_Str"");
  lengthMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  lengthMapping.setNullValue(255);
  descriptor.addMapping(lengthMapping);
  XMLDirectMapping precisionMapping=new XMLDirectMapping();
  precisionMapping.setAttributeName(""String_Node_Str"");
  precisionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  precisionMapping.setNullValue(MIN_VALUE);
  descriptor.addMapping(precisionMapping);
  XMLDirectMapping scaleMapping=new XMLDirectMapping();
  scaleMapping.setAttributeName(""String_Node_Str"");
  scaleMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  scaleMapping.setNullValue(MIN_VALUE);
  descriptor.addMapping(scaleMapping);
  XMLDirectMapping cursorOutputMapping=new XMLDirectMapping();
  cursorOutputMapping.setAttributeName(""String_Node_Str"");
  cursorOutputMapping.setXPath(""String_Node_Str"");
  cursorOutputMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(cursorOutputMapping);
  XMLCompositeObjectMapping databaseTypeMapping=new XMLCompositeObjectMapping();
  databaseTypeMapping.setAttributeName(""String_Node_Str"");
  databaseTypeMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      PLSQLargument argument=(PLSQLargument)object;
      DatabaseType type=argument.databaseType;
      return wrapType(type);
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      PLSQLargument argument=(PLSQLargument)object;
      DatabaseTypeWrapper type=(DatabaseTypeWrapper)value;
      argument.databaseType=type.getWrappedType();
    }
  }
);
  databaseTypeMapping.setReferenceClass(DatabaseTypeWrapper.class);
  databaseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(databaseTypeMapping);
  return descriptor;
}","protected ClassDescriptor buildPLSQLargumentDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(PLSQLargument.class);
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping indexMapping=new XMLDirectMapping();
  indexMapping.setAttributeName(""String_Node_Str"");
  indexMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  indexMapping.setNullValue(-1);
  descriptor.addMapping(indexMapping);
  XMLDirectMapping directionMapping=new XMLDirectMapping();
  directionMapping.setAttributeName(""String_Node_Str"");
  directionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  ObjectTypeConverter directionConverter=new ObjectTypeConverter();
  directionConverter.addConversionValue(""String_Node_Str"",IN);
  directionConverter.addConversionValue(""String_Node_Str"",INOUT);
  directionConverter.addConversionValue(""String_Node_Str"",OUT);
  directionMapping.setConverter(directionConverter);
  directionMapping.setNullValue(IN);
  descriptor.addMapping(directionMapping);
  XMLDirectMapping lengthMapping=new XMLDirectMapping();
  lengthMapping.setAttributeName(""String_Node_Str"");
  lengthMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  lengthMapping.setNullValue(255);
  descriptor.addMapping(lengthMapping);
  XMLDirectMapping precisionMapping=new XMLDirectMapping();
  precisionMapping.setAttributeName(""String_Node_Str"");
  precisionMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  precisionMapping.setNullValue(MIN_VALUE);
  descriptor.addMapping(precisionMapping);
  XMLDirectMapping scaleMapping=new XMLDirectMapping();
  scaleMapping.setAttributeName(""String_Node_Str"");
  scaleMapping.setXPath(getPrimaryNamespaceXPath() + ""String_Node_Str"");
  scaleMapping.setNullValue(MIN_VALUE);
  descriptor.addMapping(scaleMapping);
  XMLDirectMapping cursorOutputMapping=new XMLDirectMapping();
  cursorOutputMapping.setAttributeName(""String_Node_Str"");
  cursorOutputMapping.setXPath(""String_Node_Str"");
  cursorOutputMapping.setNullValue(Boolean.FALSE);
  descriptor.addMapping(cursorOutputMapping);
  XMLCompositeObjectMapping databaseTypeMapping=new XMLCompositeObjectMapping();
  databaseTypeMapping.setAttributeName(""String_Node_Str"");
  databaseTypeMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      PLSQLargument argument=(PLSQLargument)object;
      DatabaseType type=argument.databaseType;
      return wrapType(type);
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      PLSQLargument argument=(PLSQLargument)object;
      DatabaseTypeWrapper type=(DatabaseTypeWrapper)value;
      argument.databaseType=type.getWrappedType();
    }
  }
);
  databaseTypeMapping.setReferenceClass(DatabaseTypeWrapper.class);
  databaseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(databaseTypeMapping);
  XMLDirectMapping nonAssociativeMapping=new XMLDirectMapping();
  nonAssociativeMapping.setAttributeName(""String_Node_Str"");
  nonAssociativeMapping.setXPath(""String_Node_Str"");
  nonAssociativeMapping.setNullValue(false);
  descriptor.addMapping(nonAssociativeMapping);
  return descriptor;
}"
65553,"/** 
 * INTERNAL Add the nested function string required for the type and its subtypes. The functions must be added in inverse order to resolve dependencies.
 */
protected void addNestedFunctionsForArgument(List functions,PLSQLargument argument,DatabaseType databaseType,Set<DatabaseType> processed){
  if ((databaseType == null) || !databaseType.isComplexDatabaseType() || databaseType.isJDBCType()|| processed.contains(databaseType)) {
    return;
  }
  ComplexDatabaseType type=(ComplexDatabaseType)databaseType;
  if (!type.hasCompatibleType()) {
    return;
  }
  processed.add(type);
  if (type instanceof PLSQLCollection) {
    DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
    addNestedFunctionsForArgument(functions,argument,nestedType,processed);
  }
 else   if (type instanceof PLSQLrecord) {
    for (    PLSQLargument field : ((PLSQLrecord)type).getFields()) {
      DatabaseType nestedType=field.databaseType;
      addNestedFunctionsForArgument(functions,argument,nestedType,processed);
    }
  }
  TypeInfo info=this.typesInfo.get(type.getTypeName());
  if (info == null) {
    info=generateNestedFunction(type);
  }
  if (argument.direction == IN) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
  }
 else   if (argument.direction == INOUT) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
 else   if (argument.direction == OUT) {
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
}","/** 
 * INTERNAL Add the nested function string required for the type and its subtypes. The functions must be added in inverse order to resolve dependencies.
 */
protected void addNestedFunctionsForArgument(List functions,PLSQLargument argument,DatabaseType databaseType,Set<DatabaseType> processed){
  if ((databaseType == null) || !databaseType.isComplexDatabaseType() || databaseType.isJDBCType()|| processed.contains(databaseType)) {
    return;
  }
  ComplexDatabaseType type=(ComplexDatabaseType)databaseType;
  if (!type.hasCompatibleType()) {
    return;
  }
  processed.add(type);
  if (type instanceof PLSQLCollection) {
    DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
    addNestedFunctionsForArgument(functions,argument,nestedType,processed);
  }
 else   if (type instanceof PLSQLrecord) {
    for (    PLSQLargument field : ((PLSQLrecord)type).getFields()) {
      DatabaseType nestedType=field.databaseType;
      addNestedFunctionsForArgument(functions,argument,nestedType,processed);
    }
  }
  TypeInfo info=this.typesInfo.get(type.getTypeName());
  if (info == null) {
    info=generateNestedFunction(type,argument.isNonAssociative);
  }
  if (argument.direction == IN) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
  }
 else   if (argument.direction == INOUT) {
    if (!functions.contains(info.sql2PlConv)) {
      functions.add(info.sql2PlConv);
    }
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
 else   if (argument.direction == OUT) {
    if (!functions.contains(info.pl2SqlConv)) {
      functions.add(info.pl2SqlConv);
    }
  }
}"
65554,"/** 
 * INTERNAL: Generate the nested function to convert the PLSQL type to its compatible SQL type.
 */
protected TypeInfo generateNestedFunction(ComplexDatabaseType type){
  TypeInfo info=new TypeInfo();
  info.pl2SqlName=PL2SQL_PREFIX + (this.functionId++);
  info.sql2PlName=SQL2PL_PREFIX + (this.functionId++);
  if (type.isRecord()) {
    PLSQLrecord record=(PLSQLrecord)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    int size=record.getFields().size();
    for (int index=0; index < size; index++) {
      sb.append(""String_Node_Str"");
      if ((index + 1) != size) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getPl2SQLName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_OUT_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getSQL2PlName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_IN_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
 else   if (type.isCollection()) {
    PLSQLCollection collection=(PLSQLCollection)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(getPl2SQLName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(PLSQLBoolean_OUT_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(""String_Node_Str"");
      sb.append(getSQL2PlName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(""String_Node_Str"");
      sb.append(PLSQLBoolean_IN_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
  this.typesInfo.put(type.getTypeName(),info);
  return info;
}","/** 
 * INTERNAL: Generate the nested function to convert the PLSQL type to its compatible SQL type.
 */
protected TypeInfo generateNestedFunction(ComplexDatabaseType type,boolean isNonAssociativeCollection){
  TypeInfo info=new TypeInfo();
  info.pl2SqlName=PL2SQL_PREFIX + (this.functionId++);
  info.sql2PlName=SQL2PL_PREFIX + (this.functionId++);
  if (type.isRecord()) {
    PLSQLrecord record=(PLSQLrecord)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    int size=record.getFields().size();
    for (int index=0; index < size; index++) {
      sb.append(""String_Node_Str"");
      if ((index + 1) != size) {
        sb.append(""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getPl2SQLName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_OUT_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(record.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(record.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    for (    PLSQLargument argument : record.getFields()) {
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(argument.name);
      if (argument.databaseType.isComplexDatabaseType()) {
        sb.append(""String_Node_Str"");
        sb.append(getSQL2PlName((ComplexDatabaseType)argument.databaseType));
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else       if (argument.databaseType.equals(PLSQLBoolean)) {
        sb.append(""String_Node_Str"");
        sb.append(PLSQLBoolean_IN_CONV);
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        sb.append(argument.name);
        sb.append(""String_Node_Str"");
      }
      sb.append(NL);
    }
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
 else   if (type.isCollection()) {
    PLSQLCollection collection=(PLSQLCollection)type;
    StringBuilder sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(getPl2SQLName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(PLSQLBoolean_OUT_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.pl2SqlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.pl2SqlConv=sb.toString();
    sb=new StringBuilder();
    sb.append(INDENT);
    sb.append(BEGIN_DECLARE_FUNCTION);
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(collection.getCompatibleType());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(collection.getTypeName());
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(BEGIN_BEGIN_BLOCK);
    sb.append(INDENT);
    sb.append(INDENT);
    if (isNonAssociativeCollection) {
      sb.append(""String_Node_Str"");
      sb.append(collection.getTypeName());
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
      sb.append(""String_Node_Str"");
      sb.append(NL);
      sb.append(INDENT);
      sb.append(INDENT);
    }
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    if ((collection.nestedType != null) && collection.nestedType.isComplexDatabaseType()) {
      sb.append(""String_Node_Str"");
      sb.append(getSQL2PlName((ComplexDatabaseType)collection.nestedType));
      sb.append(""String_Node_Str"");
    }
 else     if (collection.nestedType.equals(PLSQLBoolean)) {
      sb.append(""String_Node_Str"");
      sb.append(PLSQLBoolean_IN_CONV);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(INDENT);
    sb.append(RTURN);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    sb.append(INDENT);
    sb.append(""String_Node_Str"");
    sb.append(info.sql2PlName);
    sb.append(""String_Node_Str"");
    sb.append(NL);
    info.sql2PlConv=sb.toString();
  }
  this.typesInfo.put(type.getTypeName(),info);
  return info;
}"
65555,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  System.setProperty(""String_Node_Str"",contextPath);
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=true;
  suite.addTestSuite(MarshallerTestCases.class);
  suite.addTestSuite(UnmarshallerTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(ValidatorTestCases.class);
  }
  suite.addTestSuite(UnmarshallValidationTestCases.class);
  suite.addTestSuite(MarshallerPropertiesTestCases.class);
  suite.addTestSuite(MarshallerFormattingTestCases.class);
  suite.addTest(MarshallerEncodingTestCases.suite());
  suite.addTestSuite(MarshallerFragmentTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  System.setProperty(""String_Node_Str"",contextPath);
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=true;
  suite.addTestSuite(MarshallerTestCases.class);
  suite.addTestSuite(UnmarshallerTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(ValidatorTestCases.class);
  }
  suite.addTestSuite(UnmarshallValidationTestCases.class);
  suite.addTestSuite(MarshallerPropertiesTestCases.class);
  suite.addTestSuite(MarshallerFormattingTestCases.class);
  suite.addTest(MarshallerEncodingTestCases.suite());
  suite.addTestSuite(MarshallerFragmentTestCases.class);
  suite.addTestSuite(XMLDeclarationTestCases.class);
  return suite;
}"
65556,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  System.setProperty(""String_Node_Str"",contextPath);
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=true;
  suite.addTestSuite(MarshallerTestCases.class);
  suite.addTestSuite(UnmarshallerTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(ValidatorTestCases.class);
  }
  suite.addTestSuite(UnmarshallValidationTestCases.class);
  suite.addTestSuite(MarshallerPropertiesTestCases.class);
  suite.addTestSuite(MarshallerFormattingTestCases.class);
  suite.addTest(MarshallerEncodingTestCases.suite());
  suite.addTestSuite(MarshallerFragmentTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String contextPath=""String_Node_Str"";
  System.setProperty(""String_Node_Str"",contextPath);
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=true;
  suite.addTestSuite(MarshallerTestCases.class);
  suite.addTestSuite(UnmarshallerTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(ValidatorTestCases.class);
  }
  suite.addTestSuite(UnmarshallValidationTestCases.class);
  suite.addTestSuite(MarshallerPropertiesTestCases.class);
  suite.addTestSuite(MarshallerFormattingTestCases.class);
  suite.addTest(MarshallerEncodingTestCases.suite());
  suite.addTestSuite(MarshallerFragmentTestCases.class);
  suite.addTestSuite(XMLDeclarationTestCases.class);
  return suite;
}"
65557,"public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (JAXBContext.MEDIA_TYPE.equals(key)) {
      MediaType mType=MediaType.getMediaTypeByName((String)value);
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (JAXBContext.ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (JAXBContext.INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (JAXBContext.NAMESPACES.equals(key)) {
      if (value != null) {
        Map<String,String> namespaces=(Map<String,String>)value;
        NamespaceResolver nr=new NamespaceResolver();
        nr.getPrefixesToNamespaces().putAll(namespaces);
        xmlMarshaller.setNamespaceResolver(nr);
      }
    }
 else     if (JAXBContext.VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}","public void setProperty(String key,Object value) throws PropertyException {
  try {
    if (key == null) {
      throw new IllegalArgumentException();
    }
 else     if (JAXB_FORMATTED_OUTPUT.equals(key)) {
      Boolean formattedOutput=(Boolean)value;
      xmlMarshaller.setFormattedOutput(formattedOutput.booleanValue());
    }
 else     if (JAXB_ENCODING.equals(key)) {
      xmlMarshaller.setEncoding((String)value);
    }
 else     if (JAXB_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setSchemaLocation((String)value);
    }
 else     if (JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(key)) {
      xmlMarshaller.setNoNamespaceSchemaLocation((String)value);
    }
 else     if (XMLConstants.JAXB_FRAGMENT.equals(key)) {
      Boolean fragment=(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (XML_DECLARATION.equals(key)) {
      Boolean fragment=!(Boolean)value;
      xmlMarshaller.setFragment(fragment.booleanValue());
    }
 else     if (JAXBContext.MEDIA_TYPE.equals(key)) {
      MediaType mType=MediaType.getMediaTypeByName((String)value);
      if (mType != null) {
        xmlMarshaller.setMediaType(mType);
      }
 else {
        throw new PropertyException(key,value);
      }
    }
 else     if (JAXBContext.ATTRIBUTE_PREFIX.equals(key)) {
      xmlMarshaller.setAttributePrefix((String)value);
    }
 else     if (JAXBContext.INCLUDE_ROOT.equals(key)) {
      xmlMarshaller.setIncludeRoot((Boolean)value);
    }
 else     if (JAXBContext.NAMESPACES.equals(key)) {
      if (value != null) {
        Map<String,String> namespaces=(Map<String,String>)value;
        NamespaceResolver nr=new NamespaceResolver();
        nr.getPrefixesToNamespaces().putAll(namespaces);
        xmlMarshaller.setNamespaceResolver(nr);
      }
    }
 else     if (JAXBContext.VALUE_WRAPPER.equals(key)) {
      xmlMarshaller.setValueWrapper((String)value);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 catch (  ClassCastException exception) {
    throw new PropertyException(key,exception);
  }
}"
65558,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1 && namespaceResolver != null) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1 && namespaceResolver != null) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && frag.getPrefix() != null && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65559,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=xmlRoot.getRootFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRootFrag.getLocalName());
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    XMLRoot xmlRoot=(XMLRoot)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + XMLConstants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
    }
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65560,"public void setPrefix(String prefix){
  this.prefix=prefix;
}","public void setPrefix(String prefix){
  this.prefix=prefix;
  resetShortName();
}"
65561,"public String getShortName(){
  return shortName;
}","public String getShortName(){
  if (shortName == null) {
    if (prefix != null && prefix.length() > 0) {
      shortName=prefix + XMLConstants.COLON + localName;
    }
 else {
      shortName=localName;
    }
  }
  return shortName;
}"
65562,"public byte[] getShortNameBytes(){
  if (null == shortNameBytes) {
    try {
      shortNameBytes=shortName.getBytes(XMLConstants.DEFAULT_XML_ENCODING);
    }
 catch (    UnsupportedEncodingException e) {
    }
  }
  return shortNameBytes;
}","public byte[] getShortNameBytes(){
  if (null == shortNameBytes) {
    try {
      shortNameBytes=getShortName().getBytes(XMLConstants.DEFAULT_XML_ENCODING);
    }
 catch (    UnsupportedEncodingException e) {
    }
  }
  return shortNameBytes;
}"
65563,"public void setLocalName(String localName){
  this.localName=localName;
}","public void setLocalName(String localName){
  this.localName=localName;
  resetShortName();
}"
65564,"private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    rootFragment=((XMLRoot)object).getRootFragment();
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setXPath(xmlRootPrefix + XMLConstants.COLON + xmlRootLocalName);
        }
      }
 else {
        String xmlRootPrefix=""String_Node_Str"";
        marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        rootFragment.setXPath(xmlRootPrefix + XMLConstants.COLON + xmlRootLocalName);
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}","private XPathFragment buildRootFragment(Object object,XMLDescriptor descriptor,boolean isXMLRoot,MarshalRecord marshalRecord){
  XPathFragment rootFragment=null;
  if (isXMLRoot) {
    String xmlRootUri=((XMLRoot)object).getNamespaceURI();
    String xmlRootLocalName=((XMLRoot)object).getLocalName();
    rootFragment=new XPathFragment();
    rootFragment.setLocalName(xmlRootLocalName);
    rootFragment.setNamespaceURI(xmlRootUri);
    if (xmlRootUri != null) {
      if (descriptor != null) {
        String xmlRootPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(xmlRootUri);
        if (xmlRootPrefix == null && !(xmlRootUri.equals(marshalRecord.getNamespaceResolver().getDefaultNamespaceURI()))) {
          xmlRootPrefix=marshalRecord.getNamespaceResolver().generatePrefix();
          marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        }
        if (xmlRootPrefix == null) {
          rootFragment.setXPath(xmlRootLocalName);
        }
 else {
          rootFragment.setPrefix(xmlRootPrefix);
        }
      }
 else {
        String xmlRootPrefix=""String_Node_Str"";
        marshalRecord.getNamespaceResolver().put(xmlRootPrefix,xmlRootUri);
        rootFragment.setXPath(xmlRootPrefix + XMLConstants.COLON + xmlRootLocalName);
      }
    }
  }
 else {
    XMLField defaultRootField=descriptor.getDefaultRootElementField();
    if (defaultRootField != null) {
      rootFragment=defaultRootField.getXPathFragment();
    }
  }
  return rootFragment;
}"
65565,"/** 
 * Gets the local name. This should not be null.
 * @return the local name
 */
public String getLocalName(){
  return rootFragment.getLocalName();
}","/** 
 * Gets the local name. This should not be null.
 * @return the local name
 */
public String getLocalName(){
  return localName;
}"
65566,"/** 
 * Sets the namespace uri associated with the QName of this XMLRoot.
 * @param rootElementUri the new namespace uri
 */
public void setNamespaceURI(String rootElementUri){
  rootFragment.setNamespaceURI(rootElementUri);
}","/** 
 * Sets the namespace uri associated with the QName of this XMLRoot.
 * @param rootElementUri the new namespace uri
 */
public void setNamespaceURI(String rootElementUri){
  if (rootElementUri != null && rootElementUri.length() == 0) {
    this.namespaceUri=null;
  }
 else {
    this.namespaceUri=rootElementUri;
  }
}"
65567,"/** 
 * Gets the namespace uri.  This may be null.
 * @return the namespace uri
 */
public String getNamespaceURI(){
  return rootFragment.getNamespaceURI();
}","/** 
 * Gets the namespace uri.  This may be null.
 * @return the namespace uri
 */
public String getNamespaceURI(){
  return namespaceUri;
}"
65568,"/** 
 * Set the element name.  This method will parse the qualified name in an attempt to set the localName fields.  ie: this could be  set to ""someLocalName"" or ""somePrefix:someLocalName""
 * @param name the new local name
 */
public void setLocalName(String name){
  rootFragment.setXPath(name);
}","/** 
 * Set the element name.  This method will parse the qualified name in an attempt to set the localName fields.  ie: this could be  set to ""someLocalName"" or ""somePrefix:someLocalName""
 * @param name the new local name
 */
public void setLocalName(String name){
  int colonIdx=name.indexOf(XMLConstants.COLON);
  if (colonIdx > -1) {
    this.localName=name.substring(colonIdx + 1);
  }
 else {
    this.localName=name;
  }
}"
65569,"private void writeSimpleValue(XMLField xmlRootField,Object element,Object originalObject,DOMRecord record,org.w3c.dom.Document doc,Node root,boolean wasXMLRoot,AbstractSession session){
  if (wasXMLRoot) {
    if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
      String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
      if ((prefix == null) || prefix.length() == 0) {
        xmlRootField.getXPathFragment().setGeneratedPrefix(true);
        prefix=record.getNamespaceResolver().generatePrefix();
      }
      xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
    }
  }
  if (xmlRootField != null) {
    xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
    QName qname=((XMLRoot)originalObject).getSchemaType();
    if (qname != null) {
      if (!qname.equals(XMLConstants.STRING_QNAME)) {
        xmlRootField.setSchemaType(qname);
        xmlRootField.setIsTypedTextField(true);
        xmlRootField.addJavaConversion(((XMLRoot)originalObject).getObject().getClass(),qname);
      }
    }
    Node newNode=XPathEngine.getInstance().create(xmlRootField,root,element,session);
  }
 else {
    Text textNode=doc.createTextNode((String)element);
    root.appendChild(textNode);
  }
}","private void writeSimpleValue(XMLField xmlRootField,Object element,Object originalObject,DOMRecord record,org.w3c.dom.Document doc,Node root,boolean wasXMLRoot,AbstractSession session){
  if (wasXMLRoot) {
    if (((XMLRoot)originalObject).getNamespaceURI() != null) {
      String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
      if ((prefix == null) || prefix.length() == 0) {
        xmlRootField.getXPathFragment().setGeneratedPrefix(true);
        prefix=record.getNamespaceResolver().generatePrefix();
      }
      xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
    }
  }
  if (xmlRootField != null) {
    xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
    QName qname=((XMLRoot)originalObject).getSchemaType();
    if (qname != null) {
      if (!qname.equals(XMLConstants.STRING_QNAME)) {
        xmlRootField.setSchemaType(qname);
        xmlRootField.setIsTypedTextField(true);
        xmlRootField.addJavaConversion(((XMLRoot)originalObject).getObject().getClass(),qname);
      }
    }
    Node newNode=XPathEngine.getInstance().create(xmlRootField,root,element,session);
  }
 else {
    Text textNode=doc.createTextNode((String)element);
    root.appendChild(textNode);
  }
}"
65570,"@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  Object attributeValue=this.getAttributeValueFromObject(object);
  Node root=record.getDOM();
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  if (attributeValue == null) {
    return;
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),record.getDOM(),session);
    DOMRecord rootRecord=new DOMRecord(root);
    rootRecord.setSession(session);
    rootRecord.setDocPresPolicy(record.getDocPresPolicy());
    rootRecord.setNamespaceResolver(record.getNamespaceResolver());
    rootRecord.setMarshaller(record.getMarshaller());
    record=rootRecord;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  ArrayList childNodes=getUnmappedChildNodes(record.getDOM().getChildNodes());
  Object iter=cp.iteratorFor(attributeValue);
  int childNodeCount=0;
  boolean wasXMLRoot=false;
  if (null != iter) {
    while (cp.hasNext(iter) && (childNodeCount < childNodes.size())) {
      Object element=cp.next(iter,session);
      if (this.getConverter() != null) {
        element=getConverter().convertObjectValueToDataValue(element,session,record.getMarshaller());
      }
      Object originalObject=element;
      Node nextChild=null;
      while (childNodeCount < childNodes.size()) {
        Node nextPossible=(Node)childNodes.get(childNodeCount);
        if ((nextPossible.getNodeType() == Node.ELEMENT_NODE) || (nextPossible.getNodeType() == Node.TEXT_NODE) || (nextPossible.getNodeType() == Node.CDATA_SECTION_NODE)) {
          nextChild=nextPossible;
          childNodeCount++;
          break;
        }
        childNodeCount++;
      }
      if (nextChild == null) {
        break;
      }
      if (usesXMLRoot() && (element instanceof XMLRoot)) {
        xmlRootField=new XMLField();
        wasXMLRoot=true;
        XPathFragment frag=new XPathFragment();
        if ((((XMLRoot)element)).getRootFragment().getNamespaceURI() != null) {
          frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
        }
 else {
          frag.setXPath(((XMLRoot)element).getLocalName());
        }
        xmlRootField.setXPathFragment(frag);
        xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
        element=((XMLRoot)element).getObject();
      }
      if (element instanceof String) {
        if (wasXMLRoot) {
          if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
            String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
            if ((prefix == null) || prefix.length() == 0) {
              xmlRootField.getXPathFragment().setGeneratedPrefix(true);
              prefix=record.getNamespaceResolver().generatePrefix();
            }
            xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
          }
        }
        if (xmlRootField != null) {
          XPathEngine.getInstance().create(xmlRootField,root,element,session);
        }
 else {
          Text textNode=doc.createTextNode((String)element);
          root.replaceChild(textNode,nextChild);
        }
      }
 else       if (element instanceof org.w3c.dom.Node) {
        Node importedCopy=doc.importNode((Node)element,true);
        root.replaceChild(importedCopy,nextChild);
      }
 else {
        XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
        if (wasXMLRoot) {
          if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
            String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
            if ((prefix == null) || prefix.length() == 0) {
              prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
            }
            if ((prefix == null) || prefix.length() == 0) {
              xmlRootField.getXPathFragment().setGeneratedPrefix(true);
              prefix=record.getNamespaceResolver().generatePrefix();
            }
            xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
          }
        }
        DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,element,wasXMLRoot);
        if (nestedRecord != null) {
          if (nestedRecord.getDOM() != nextChild) {
            root.replaceChild(nestedRecord.getDOM(),nextChild);
          }
        }
      }
    }
  }
  if (childNodeCount < childNodes.size()) {
    for (int i=childNodeCount; i < childNodes.size(); i++) {
      Node child=(Node)childNodes.get(i);
      if ((child.getNodeType() == Node.ELEMENT_NODE) || (child.getNodeType() == Node.TEXT_NODE) || (child.getNodeType() == Node.CDATA_SECTION_NODE)) {
        root.removeChild(child);
      }
    }
  }
  if (null != iter && cp.hasNext(iter)) {
    while (cp.hasNext(iter)) {
      Object element=cp.next(iter,session);
      writeSingleValue(element,object,record,session);
    }
  }
}","@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  DOMRecord record=(DOMRecord)row;
  Object attributeValue=this.getAttributeValueFromObject(object);
  Node root=record.getDOM();
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  if (attributeValue == null) {
    return;
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),record.getDOM(),session);
    DOMRecord rootRecord=new DOMRecord(root);
    rootRecord.setSession(session);
    rootRecord.setDocPresPolicy(record.getDocPresPolicy());
    rootRecord.setNamespaceResolver(record.getNamespaceResolver());
    rootRecord.setMarshaller(record.getMarshaller());
    record=rootRecord;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  ArrayList childNodes=getUnmappedChildNodes(record.getDOM().getChildNodes());
  Object iter=cp.iteratorFor(attributeValue);
  int childNodeCount=0;
  boolean wasXMLRoot=false;
  if (null != iter) {
    while (cp.hasNext(iter) && (childNodeCount < childNodes.size())) {
      Object element=cp.next(iter,session);
      if (this.getConverter() != null) {
        element=getConverter().convertObjectValueToDataValue(element,session,record.getMarshaller());
      }
      Object originalObject=element;
      Node nextChild=null;
      while (childNodeCount < childNodes.size()) {
        Node nextPossible=(Node)childNodes.get(childNodeCount);
        if ((nextPossible.getNodeType() == Node.ELEMENT_NODE) || (nextPossible.getNodeType() == Node.TEXT_NODE) || (nextPossible.getNodeType() == Node.CDATA_SECTION_NODE)) {
          nextChild=nextPossible;
          childNodeCount++;
          break;
        }
        childNodeCount++;
      }
      if (nextChild == null) {
        break;
      }
      if (usesXMLRoot() && (element instanceof XMLRoot)) {
        xmlRootField=new XMLField();
        wasXMLRoot=true;
        XPathFragment frag=new XPathFragment();
        if ((((XMLRoot)element)).getNamespaceURI() != null) {
          frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
        }
        frag.setXPath(((XMLRoot)element).getLocalName());
        xmlRootField.setXPathFragment(frag);
        xmlRootField.setNamespaceResolver(record.getNamespaceResolver());
        element=((XMLRoot)element).getObject();
      }
      if (element instanceof String) {
        if (wasXMLRoot) {
          if (((XMLRoot)originalObject).getNamespaceURI() != null) {
            String prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
            if ((prefix == null) || prefix.length() == 0) {
              xmlRootField.getXPathFragment().setGeneratedPrefix(true);
              prefix=record.getNamespaceResolver().generatePrefix();
            }
            xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
          }
        }
        if (xmlRootField != null) {
          XPathEngine.getInstance().create(xmlRootField,root,element,session);
        }
 else {
          Text textNode=doc.createTextNode((String)element);
          root.replaceChild(textNode,nextChild);
        }
      }
 else       if (element instanceof org.w3c.dom.Node) {
        Node importedCopy=doc.importNode((Node)element,true);
        root.replaceChild(importedCopy,nextChild);
      }
 else {
        XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
        if (wasXMLRoot) {
          if (((XMLRoot)originalObject).getNamespaceURI() != null) {
            String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
            if ((prefix == null) || prefix.length() == 0) {
              prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
            }
            if ((prefix == null) || prefix.length() == 0) {
              xmlRootField.getXPathFragment().setGeneratedPrefix(true);
              prefix=record.getNamespaceResolver().generatePrefix();
            }
            xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
          }
        }
        DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,element,wasXMLRoot);
        if (nestedRecord != null) {
          if (nestedRecord.getDOM() != nextChild) {
            root.replaceChild(nestedRecord.getDOM(),nextChild);
          }
        }
      }
    }
  }
  if (childNodeCount < childNodes.size()) {
    for (int i=childNodeCount; i < childNodes.size(); i++) {
      Node child=(Node)childNodes.get(i);
      if ((child.getNodeType() == Node.ELEMENT_NODE) || (child.getNodeType() == Node.TEXT_NODE) || (child.getNodeType() == Node.CDATA_SECTION_NODE)) {
        root.removeChild(child);
      }
    }
  }
  if (null != iter && cp.hasNext(iter)) {
    while (cp.hasNext(iter)) {
      Object element=cp.next(iter,session);
      writeSingleValue(element,object,record,session);
    }
  }
}"
65571,"public void writeSingleValue(Object element,Object parent,XMLRecord row,AbstractSession session){
  XMLField xmlRootField=null;
  Object originalObject=element;
  DOMRecord record=(DOMRecord)row;
  Node root=record.getDOM();
  org.w3c.dom.Document doc=row.getDocument();
  boolean wasXMLRoot=false;
  if (usesXMLRoot() && (element instanceof XMLRoot)) {
    wasXMLRoot=true;
    xmlRootField=new XMLField();
    XPathFragment frag=new XPathFragment();
    if ((((XMLRoot)element)).getRootFragment().getNamespaceURI() != null) {
      frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
    }
 else {
      frag.setXPath(((XMLRoot)element).getLocalName());
    }
    xmlRootField.setXPathFragment(frag);
    xmlRootField.setNamespaceResolver(row.getNamespaceResolver());
    element=((XMLRoot)element).getObject();
  }
  if (element instanceof String) {
    writeSimpleValue(xmlRootField,element,originalObject,record,doc,root,wasXMLRoot,session);
  }
 else   if (element instanceof org.w3c.dom.Node) {
    Node importedCopy=doc.importNode((Node)element,true);
    root.appendChild(importedCopy);
  }
 else {
    XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
    if (referenceDescriptor == null) {
      writeSimpleValue(xmlRootField,element,originalObject,record,doc,root,wasXMLRoot,session);
      return;
    }
    if (wasXMLRoot) {
      if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
        String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        if ((prefix == null) || prefix.length() == 0) {
          prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
        }
        if ((prefix == null) || prefix.length() == 0) {
          xmlRootField.getXPathFragment().setGeneratedPrefix(true);
          prefix=record.getNamespaceResolver().generatePrefix();
        }
        xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
      }
    }
    DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,originalObject,wasXMLRoot);
    if (nestedRecord != null) {
      root.appendChild(nestedRecord.getDOM());
    }
  }
}","public void writeSingleValue(Object element,Object parent,XMLRecord row,AbstractSession session){
  XMLField xmlRootField=null;
  Object originalObject=element;
  DOMRecord record=(DOMRecord)row;
  Node root=record.getDOM();
  org.w3c.dom.Document doc=row.getDocument();
  boolean wasXMLRoot=false;
  if (usesXMLRoot() && (element instanceof XMLRoot)) {
    wasXMLRoot=true;
    xmlRootField=new XMLField();
    XPathFragment frag=new XPathFragment();
    if ((((XMLRoot)element)).getNamespaceURI() != null) {
      frag.setNamespaceURI(((XMLRoot)element).getNamespaceURI());
    }
    frag.setLocalName(((XMLRoot)element).getLocalName());
    xmlRootField.setXPathFragment(frag);
    xmlRootField.setNamespaceResolver(row.getNamespaceResolver());
    element=((XMLRoot)element).getObject();
  }
  if (element instanceof String) {
    writeSimpleValue(xmlRootField,element,originalObject,record,doc,root,wasXMLRoot,session);
  }
 else   if (element instanceof org.w3c.dom.Node) {
    Node importedCopy=doc.importNode((Node)element,true);
    root.appendChild(importedCopy);
  }
 else {
    XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(element.getClass());
    if (referenceDescriptor == null) {
      writeSimpleValue(xmlRootField,element,originalObject,record,doc,root,wasXMLRoot,session);
      return;
    }
    if (wasXMLRoot) {
      if (((XMLRoot)originalObject).getNamespaceURI() != null) {
        String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        if ((prefix == null) || prefix.length() == 0) {
          prefix=record.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        }
        if ((prefix == null) || prefix.length() == 0) {
          xmlRootField.getXPathFragment().setGeneratedPrefix(true);
          prefix=record.getNamespaceResolver().generatePrefix();
        }
        xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
      }
    }
    DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(element,session,referenceDescriptor,row,xmlRootField,originalObject,wasXMLRoot);
    if (nestedRecord != null) {
      root.appendChild(nestedRecord.getDOM());
    }
  }
}"
65572,"private void writeSimpleValue(XMLField xmlRootField,DOMRecord row,AbstractSession session,Object originalObject,Object value,Node root,Node toReplace,boolean wasXMLRoot){
  org.w3c.dom.Document doc=row.getDocument();
  if (wasXMLRoot) {
    if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
      String prefix=row.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
      if ((prefix == null) || prefix.length() == 0) {
        xmlRootField.getXPathFragment().setGeneratedPrefix(true);
        prefix=row.getNamespaceResolver().generatePrefix();
      }
      xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
    }
  }
  if (null == xmlRootField) {
    Text textNode=doc.createTextNode((String)value);
    if (toReplace != null) {
      root.replaceChild(textNode,toReplace);
    }
 else {
      root.appendChild(textNode);
    }
  }
 else {
    QName qname=((XMLRoot)originalObject).getSchemaType();
    if (qname != null && !qname.equals(XMLConstants.STRING_QNAME)) {
      xmlRootField.setSchemaType(qname);
      xmlRootField.setIsTypedTextField(true);
      xmlRootField.addJavaConversion(value.getClass(),qname);
    }
    Node newNode=XPathEngine.getInstance().create(xmlRootField,root,value,session);
  }
}","private void writeSimpleValue(XMLField xmlRootField,DOMRecord row,AbstractSession session,Object originalObject,Object value,Node root,Node toReplace,boolean wasXMLRoot){
  org.w3c.dom.Document doc=row.getDocument();
  if (wasXMLRoot) {
    if (((XMLRoot)originalObject).getNamespaceURI() != null) {
      String prefix=row.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
      if ((prefix == null) || prefix.length() == 0) {
        xmlRootField.getXPathFragment().setGeneratedPrefix(true);
        prefix=row.getNamespaceResolver().generatePrefix();
      }
      xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
    }
  }
  if (null == xmlRootField) {
    Text textNode=doc.createTextNode((String)value);
    if (toReplace != null) {
      root.replaceChild(textNode,toReplace);
    }
 else {
      root.appendChild(textNode);
    }
  }
 else {
    QName qname=((XMLRoot)originalObject).getSchemaType();
    if (qname != null && !qname.equals(XMLConstants.STRING_QNAME)) {
      xmlRootField.setSchemaType(qname);
      xmlRootField.setIsTypedTextField(true);
      xmlRootField.addJavaConversion(value.getClass(),qname);
    }
    Node newNode=XPathEngine.getInstance().create(xmlRootField,root,value,session);
  }
}"
65573,"public void writeSingleValue(Object value,Object parent,XMLRecord row,AbstractSession session){
  DOMRecord record=(DOMRecord)row;
  Node root=record.getDOM();
  Object objectValue=value;
  if (this.getConverter() != null) {
    objectValue=getConverter().convertObjectValueToDataValue(objectValue,session,row.getMarshaller());
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),root,session);
  }
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  boolean wasXMLRoot=false;
  Object originalObject=objectValue;
  Node toReplace=getNodeToReplace(root);
  if (usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootField=new XMLField();
    wasXMLRoot=true;
    XPathFragment frag=new XPathFragment();
    if ((((XMLRoot)objectValue)).getRootFragment().getNamespaceURI() != null) {
      frag.setNamespaceURI(((XMLRoot)objectValue).getNamespaceURI());
    }
 else {
      frag.setXPath(((XMLRoot)objectValue).getLocalName());
    }
    xmlRootField.setXPathFragment((((XMLRoot)objectValue)).getRootFragment());
    xmlRootField.setNamespaceResolver(row.getNamespaceResolver());
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    writeSimpleValue(xmlRootField,record,session,originalObject,objectValue,root,toReplace,wasXMLRoot);
  }
 else   if (objectValue instanceof org.w3c.dom.Node) {
    Node importedCopy=doc.importNode((Node)objectValue,true);
    root.appendChild(importedCopy);
  }
 else {
    XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
    if (referenceDescriptor == null) {
      writeSimpleValue(xmlRootField,record,session,originalObject,objectValue,root,toReplace,wasXMLRoot);
      return;
    }
    if (wasXMLRoot) {
      if (((XMLRoot)originalObject).getRootFragment().getNamespaceURI() != null) {
        String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        if ((prefix == null) || prefix.length() == 0) {
          prefix=row.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getRootFragment().getNamespaceURI());
        }
        if ((prefix == null) || prefix.length() == 0) {
          xmlRootField.getXPathFragment().setGeneratedPrefix(true);
          prefix=row.getNamespaceResolver().generatePrefix();
        }
        xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
      }
    }
    DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(objectValue,session,referenceDescriptor,row,xmlRootField,originalObject,wasXMLRoot);
    if ((nestedRecord != null) && (toReplace != null)) {
      if (nestedRecord.getDOM() != toReplace) {
        root.replaceChild(nestedRecord.getDOM(),toReplace);
      }
    }
 else     if (nestedRecord != null) {
      root.appendChild(nestedRecord.getDOM());
    }
 else     if (toReplace != null) {
      root.removeChild(toReplace);
    }
  }
}","public void writeSingleValue(Object value,Object parent,XMLRecord row,AbstractSession session){
  DOMRecord record=(DOMRecord)row;
  Node root=record.getDOM();
  Object objectValue=value;
  if (this.getConverter() != null) {
    objectValue=getConverter().convertObjectValueToDataValue(objectValue,session,row.getMarshaller());
  }
  if (field != null) {
    root=XPathEngine.getInstance().create((XMLField)getField(),root,session);
  }
  org.w3c.dom.Document doc=record.getDocument();
  XMLField xmlRootField=null;
  boolean wasXMLRoot=false;
  Object originalObject=objectValue;
  Node toReplace=getNodeToReplace(root);
  if (usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootField=new XMLField();
    wasXMLRoot=true;
    XPathFragment frag=new XPathFragment();
    if ((((XMLRoot)objectValue)).getNamespaceURI() != null) {
      frag.setNamespaceURI(((XMLRoot)objectValue).getNamespaceURI());
    }
    frag.setXPath(((XMLRoot)objectValue).getLocalName());
    xmlRootField.setXPathFragment(frag);
    xmlRootField.setNamespaceResolver(row.getNamespaceResolver());
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    writeSimpleValue(xmlRootField,record,session,originalObject,objectValue,root,toReplace,wasXMLRoot);
  }
 else   if (objectValue instanceof org.w3c.dom.Node) {
    Node importedCopy=doc.importNode((Node)objectValue,true);
    root.appendChild(importedCopy);
  }
 else {
    XMLDescriptor referenceDescriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
    if (referenceDescriptor == null) {
      writeSimpleValue(xmlRootField,record,session,originalObject,objectValue,root,toReplace,wasXMLRoot);
      return;
    }
    if (wasXMLRoot) {
      if (((XMLRoot)originalObject).getNamespaceURI() != null) {
        String prefix=referenceDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        if ((prefix == null) || prefix.length() == 0) {
          prefix=row.getNamespaceResolver().resolveNamespaceURI(((XMLRoot)originalObject).getNamespaceURI());
        }
        if ((prefix == null) || prefix.length() == 0) {
          xmlRootField.getXPathFragment().setGeneratedPrefix(true);
          prefix=row.getNamespaceResolver().generatePrefix();
        }
        xmlRootField.getXPathFragment().setXPath(prefix + XMLConstants.COLON + ((XMLRoot)originalObject).getLocalName());
      }
    }
    DOMRecord nestedRecord=(DOMRecord)buildCompositeRow(objectValue,session,referenceDescriptor,row,xmlRootField,originalObject,wasXMLRoot);
    if ((nestedRecord != null) && (toReplace != null)) {
      if (nestedRecord.getDOM() != toReplace) {
        root.replaceChild(nestedRecord.getDOM(),toReplace);
      }
    }
 else     if (nestedRecord != null) {
      root.appendChild(nestedRecord.getDOM());
    }
 else     if (toReplace != null) {
      root.removeChild(toReplace);
    }
  }
}"
65574,"/** 
 * Add the mapping to the   {@link #entityType}'s descriptor being built or extended. This is where the   {@link ValuesAccessor} is created and theposition of the mapping in the descriptor is captured to use as its index.
 */
public DatabaseMapping addMapping(DatabaseMapping mapping){
  ClassDescriptor descriptor=getType().getDescriptor();
  if (!descriptor.getMappings().contains(mapping)) {
    descriptor.addMapping(mapping);
  }
  int index=descriptor.getMappings().indexOf(mapping);
  if (getType().getParentType() != null) {
    DynamicType current=getType();
    while (current.getParentType() != null) {
      index+=current.getParentType().getDescriptor().getMappings().size();
      current=current.getParentType();
    }
  }
  if (mapping.getAttributeClassification() == null && mapping.isAbstractDirectMapping()) {
    String typeName=((AbstractDirectMapping)mapping).getAttributeClassificationName();
    if (typeName != null) {
      typeName=typeName.trim();
      Class<?> attrType=ConversionManager.getDefaultManager().convertClassNameToClass(typeName);
      ((AbstractDirectMapping)mapping).setAttributeClassification(attrType);
    }
  }
  mapping.setAttributeAccessor(new ValuesAccessor(mapping));
  if (requiresInitialization(mapping)) {
    this.entityType.getMappingsRequiringInitialization().add(mapping);
  }
  return mapping;
}","/** 
 * Add the mapping to the   {@link #entityType}'s descriptor being built or extended. This is where the   {@link ValuesAccessor} is created and theposition of the mapping in the descriptor is captured to use as its index.
 */
public DatabaseMapping addMapping(DatabaseMapping mapping){
  ClassDescriptor descriptor=getType().getDescriptor();
  if (!descriptor.getMappings().contains(mapping)) {
    descriptor.addMapping(mapping);
  }
  int index=descriptor.getMappings().indexOf(mapping);
  if (getType().getParentType() != null) {
    DynamicType current=getType();
    while (current.getParentType() != null) {
      index+=current.getParentType().getDescriptor().getMappings().size();
      current=current.getParentType();
    }
  }
  if (mapping.getAttributeClassification() == null && mapping.isAbstractDirectMapping()) {
    String typeName=((AbstractDirectMapping)mapping).getAttributeClassificationName();
    if (typeName != null) {
      typeName=typeName.trim();
      try {
        Class<?> attrType=ConversionManager.getDefaultManager().convertClassNameToClass(typeName);
        ((AbstractDirectMapping)mapping).setAttributeClassification(attrType);
      }
 catch (      Exception e) {
      }
    }
  }
  mapping.setAttributeAccessor(new ValuesAccessor(mapping));
  if (requiresInitialization(mapping)) {
    this.entityType.getMappingsRequiringInitialization().add(mapping);
  }
  return mapping;
}"
65575,"/** 
 * Process @XmlJavaTypeAdapter on a given property.
 * @param property
 * @param propertyType
 */
private void processXmlJavaTypeAdapter(Property property,TypeInfo info,JavaClass javaClass){
  JavaClass adapterClass=null;
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
    XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
    xja.setValue(adapter.value().getName());
    xja.setType(adapter.type().getName());
    property.setXmlJavaTypeAdapter(xja);
  }
 else {
    TypeInfo ptypeInfo=typeInfo.get(ptype.getQualifiedName());
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xmlJavaTypeAdapter;
    if (ptypeInfo == null && shouldGenerateTypeInfo(ptype)) {
      if (helper.isAnnotationPresent(ptype,XmlJavaTypeAdapter.class)) {
        XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(ptype,XmlJavaTypeAdapter.class);
        org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
        xja.setValue(adapter.value().getName());
        String boundType=adapter.type().getName();
        if (boundType == null || boundType.equals(""String_Node_Str"")) {
          boundType=ptype.getRawName();
        }
        xja.setType(adapter.type().getName());
        property.setXmlJavaTypeAdapter(xja);
      }
    }
    if (ptypeInfo != null) {
      if (null != (xmlJavaTypeAdapter=ptypeInfo.getXmlJavaTypeAdapter())) {
        try {
          property.setXmlJavaTypeAdapter(xmlJavaTypeAdapter);
        }
 catch (        JAXBException e) {
          throw JAXBException.invalidTypeAdapterClass(xmlJavaTypeAdapter.getValue(),javaClass.getName());
        }
      }
    }
    if (info.getPackageLevelAdaptersByClass().get(ptype.getQualifiedName()) != null && !property.isSetXmlJavaTypeAdapter()) {
      adapterClass=info.getPackageLevelAdapterClass(ptype);
      org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
      xja.setValue(adapterClass.getQualifiedName());
      xja.setType(ptype.getQualifiedName());
      property.setXmlJavaTypeAdapter(xja);
    }
  }
}","/** 
 * Process @XmlJavaTypeAdapter on a given property.
 * @param property
 * @param propertyType
 */
private void processXmlJavaTypeAdapter(Property property,TypeInfo info,JavaClass javaClass){
  JavaClass adapterClass=null;
  JavaClass ptype=property.getActualType();
  if (helper.isAnnotationPresent(property.getElement(),XmlJavaTypeAdapter.class)) {
    XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(property.getElement(),XmlJavaTypeAdapter.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
    xja.setValue(adapter.value().getName());
    xja.setType(adapter.type().getName());
    property.setXmlJavaTypeAdapter(xja);
  }
 else {
    TypeInfo ptypeInfo=typeInfo.get(ptype.getQualifiedName());
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xmlJavaTypeAdapter;
    if (ptypeInfo == null && shouldGenerateTypeInfo(ptype)) {
      if (helper.isAnnotationPresent(ptype,XmlJavaTypeAdapter.class)) {
        XmlJavaTypeAdapter adapter=(XmlJavaTypeAdapter)helper.getAnnotation(ptype,XmlJavaTypeAdapter.class);
        org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
        xja.setValue(adapter.value().getName());
        String boundType=adapter.type().getName();
        if (boundType == null || boundType.equals(""String_Node_Str"")) {
          boundType=ptype.getRawName();
        }
        xja.setType(adapter.type().getName());
        property.setXmlJavaTypeAdapter(xja);
      }
    }
    if (ptypeInfo != null) {
      if (null != (xmlJavaTypeAdapter=ptypeInfo.getXmlJavaTypeAdapter())) {
        try {
          property.setXmlJavaTypeAdapter(xmlJavaTypeAdapter);
        }
 catch (        JAXBException e) {
          throw JAXBException.invalidTypeAdapterClass(xmlJavaTypeAdapter.getValue(),javaClass.getName());
        }
      }
    }
    if (info.hasPackageLevelAdaptersByClass()) {
      if (info.getPackageLevelAdaptersByClass().get(ptype.getQualifiedName()) != null && !property.isSetXmlJavaTypeAdapter()) {
        adapterClass=info.getPackageLevelAdapterClass(ptype);
        org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
        xja.setValue(adapterClass.getQualifiedName());
        xja.setType(ptype.getQualifiedName());
        property.setXmlJavaTypeAdapter(xja);
      }
    }
  }
}"
65576,"/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (info.isAnonymousComplexType()) {
    generateInheritedMappingsForAnonymousType(info,descriptor,namespaceInfo);
  }
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null && (!next.isTransient() || (next.isTransient() && next.isXmlLocation()))) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      if (next.isVirtual()) {
        VirtualAttributeAccessor accessor=new VirtualAttributeAccessor();
        accessor.setAttributeName(mapping.getAttributeName());
        String getMethod=info.getXmlVirtualAccessMethods().getGetMethod();
        String setMethod=info.getXmlVirtualAccessMethods().getSetMethod();
        if (mapping.getAttributeAccessor().isMethodAttributeAccessor()) {
          getMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getGetMethodName();
          setMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getSetMethodName();
          accessor.setValueType(mapping.getAttributeClassification());
        }
        accessor.setGetMethodName(getMethod);
        accessor.setSetMethodName(setMethod);
        if (mapping.getAttributeAccessor() instanceof JAXBArrayAttributeAccessor) {
          JAXBArrayAttributeAccessor jaa=(JAXBArrayAttributeAccessor)mapping.getAttributeAccessor();
          jaa.setNestedAccessor(accessor);
        }
 else {
          mapping.setAttributeAccessor(accessor);
        }
      }
      if (mapping != null) {
        descriptor.addMapping(mapping);
      }
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
  }
}","/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (info.isAnonymousComplexType()) {
    generateInheritedMappingsForAnonymousType(info,descriptor,namespaceInfo);
  }
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null && (!next.isTransient() || (next.isTransient() && next.isXmlLocation()))) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      if (next.isVirtual()) {
        VirtualAttributeAccessor accessor=new VirtualAttributeAccessor();
        accessor.setAttributeName(mapping.getAttributeName());
        String getMethod=info.getXmlVirtualAccessMethods().getGetMethod();
        String setMethod=info.getXmlVirtualAccessMethods().getSetMethod();
        if (mapping.getAttributeAccessor().isMethodAttributeAccessor()) {
          getMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getGetMethodName();
          setMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getSetMethodName();
          accessor.setValueType(mapping.getAttributeClassification());
        }
        accessor.setGetMethodName(getMethod);
        accessor.setSetMethodName(setMethod);
        if (mapping.getAttributeAccessor() instanceof JAXBArrayAttributeAccessor) {
          JAXBArrayAttributeAccessor jaa=(JAXBArrayAttributeAccessor)mapping.getAttributeAccessor();
          jaa.setNestedAccessor(accessor);
        }
 else {
          mapping.setAttributeAccessor(accessor);
        }
      }
      if (mapping != null) {
        descriptor.addMapping(mapping);
      }
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
    next.postInitialize();
  }
}"
65577,"/** 
 * Put a bound type class to adapter class entry in the Map.
 * @param adapterClass
 * @param boundType
 */
public void addPackageLevelAdapterClass(JavaClass adapterClass,JavaClass boundType){
  packageLevelAdaptersByClass.put(boundType.getQualifiedName(),adapterClass);
}","/** 
 * Put a bound type class to adapter class entry in the Map.
 * @param adapterClass
 * @param boundType
 */
public void addPackageLevelAdapterClass(JavaClass adapterClass,JavaClass boundType){
  getPackageLevelAdaptersByClass().put(boundType.getQualifiedName(),adapterClass);
}"
65578,"/** 
 * Return the xmladapter class for a given bound type class name.
 * @param boundType
 * @return
 */
public JavaClass getPackageLevelAdapterClass(String boundTypeName){
  return getPackageLevelAdaptersByClass().get(boundTypeName);
}","/** 
 * Return the xmladapter class for a given bound type class name.
 * @param boundType
 * @return
 */
public JavaClass getPackageLevelAdapterClass(String boundTypeName){
  if (hasPackageLevelAdaptersByClass()) {
    return getPackageLevelAdaptersByClass().get(boundTypeName);
  }
  return null;
}"
65579,"/** 
 * Convenience method that adds non-null, non-transient properties to a given  List<Property>.  The propertyName parameter is used to lookup the Property. If propertyNamesCopy is non-null, the Property will be removed from that  List.  Any additional properties that exist for propertyName (as in the  case of multiple mappings to the same field) will be added as well.
 */
private void addPropertyToList(List<Property> propertiesInOrder,String propertyName,ArrayList<String> propertyNamesCopy){
  Property next=getProperties().get(propertyName);
  if (next != null && !next.isTransient()) {
    if (propertyNamesCopy != null) {
      propertyNamesCopy.remove(propertyName);
    }
    propertiesInOrder.add(next);
    List<Property> addProps=getAdditionalProperties().get(propertyName);
    if (addProps != null) {
      for (      Property addProp : addProps) {
        if (!addProp.isTransient()) {
          propertiesInOrder.add(addProp);
        }
      }
    }
  }
}","/** 
 * Convenience method that adds non-null, non-transient properties to a given  List<Property>.  The propertyName parameter is used to lookup the Property. If propertyNamesCopy is non-null, the Property will be removed from that  List.  Any additional properties that exist for propertyName (as in the  case of multiple mappings to the same field) will be added as well.
 */
private void addPropertyToList(List<Property> propertiesInOrder,String propertyName,ArrayList<String> propertyNamesCopy){
  Property next=getProperties().get(propertyName);
  if (next != null && !next.isTransient()) {
    if (propertyNamesCopy != null) {
      propertyNamesCopy.remove(propertyName);
    }
    propertiesInOrder.add(next);
    if (hasAdditionalProperties()) {
      List<Property> addProps=getAdditionalProperties().get(propertyName);
      if (addProps != null) {
        for (        Property addProp : addProps) {
          if (!addProp.isTransient()) {
            propertiesInOrder.add(addProp);
          }
        }
      }
    }
  }
}"
65580,"/** 
 * Return a Map of property names to list of properties.  This Map will contain entries when one or more properties exist for a given field, as in the case of multiple mappings for a single field.
 */
public Map<String,List<Property>> getAdditionalProperties(){
  if (additionalProperties == null) {
    additionalProperties=new HashMap<String,List<Property>>();
  }
  return additionalProperties;
}","/** 
 * Return a Map of property names to list of properties.  This Map will contain entries when one or more properties exist for a given field, as in the case of multiple mappings for a single field.
 */
public Map<String,List<Property>> getAdditionalProperties(){
  if (!hasAdditionalProperties()) {
    additionalProperties=new HashMap<String,List<Property>>();
  }
  return additionalProperties;
}"
65581,"/** 
 * This constructor sets the Helper to be used throughout XML and Annotations processing.  Other fields are initialized here as well.
 * @param helper
 */
public TypeInfo(Helper helper){
  propertyNames=new ArrayList<String>();
  properties=new HashMap<String,Property>();
  originalProperties=new HashMap<String,Property>();
  propertyList=new ArrayList<Property>();
  packageLevelAdaptersByClass=new HashMap<String,JavaClass>();
  xmlNameTransformer=DEFAULT_NAME_TRANSFORMER;
  isSetXmlTransient=false;
  isPreBuilt=false;
  isPostBuilt=false;
}","/** 
 * This constructor sets the Helper to be used throughout XML and Annotations processing.  Other fields are initialized here as well.
 * @param helper
 */
public TypeInfo(Helper helper){
  propertyNames=new ArrayList<String>();
  properties=new HashMap<String,Property>();
  originalProperties=new HashMap<String,Property>();
  propertyList=new ArrayList<Property>();
  xmlNameTransformer=DEFAULT_NAME_TRANSFORMER;
  isSetXmlTransient=false;
  isPreBuilt=false;
  isPostBuilt=false;
}"
65582,"/** 
 * Return the Map of XmlAdapters for this TypeInfo.
 * @return
 */
public HashMap<String,JavaClass> getPackageLevelAdaptersByClass(){
  return packageLevelAdaptersByClass;
}","/** 
 * Return the Map of XmlAdapters for this TypeInfo.
 * @return
 */
public HashMap<String,JavaClass> getPackageLevelAdaptersByClass(){
  if (!hasPackageLevelAdaptersByClass()) {
    packageLevelAdaptersByClass=new HashMap<String,JavaClass>();
  }
  return packageLevelAdaptersByClass;
}"
65583,"/** 
 * This method checks for class and package level adapters after the type of a property has been set.
 * @param prop the property that needs to be updated 
 * @param owningInfo the typeInfo that represents the owner of this property.
 */
public void reapplyPackageAndClassAdapters(Property prop,TypeInfo owningInfo){
  if (prop.getXmlJavaTypeAdapter() != null) {
    return;
  }
  JavaClass type=prop.getActualType();
  TypeInfo targetInfo=aProcessor.getTypeInfo().get(type.getQualifiedName());
  if (targetInfo != null) {
    if (targetInfo.getXmlJavaTypeAdapter() != null) {
      prop.setXmlJavaTypeAdapter(targetInfo.getXmlJavaTypeAdapter());
    }
  }
  JavaClass packageLevelAdapter=owningInfo.getPackageLevelAdaptersByClass().get(type.getQualifiedName());
  if (packageLevelAdapter != null && prop.getXmlJavaTypeAdapter() == null) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
    xja.setValue(packageLevelAdapter.getQualifiedName());
    xja.setType(type.getQualifiedName());
    prop.setXmlJavaTypeAdapter(xja);
  }
}","/** 
 * This method checks for class and package level adapters after the type of a property has been set.
 * @param prop the property that needs to be updated 
 * @param owningInfo the typeInfo that represents the owner of this property.
 */
public void reapplyPackageAndClassAdapters(Property prop,TypeInfo owningInfo){
  if (prop.getXmlJavaTypeAdapter() != null) {
    return;
  }
  JavaClass type=prop.getActualType();
  TypeInfo targetInfo=aProcessor.getTypeInfo().get(type.getQualifiedName());
  if (targetInfo != null) {
    if (targetInfo.getXmlJavaTypeAdapter() != null) {
      prop.setXmlJavaTypeAdapter(targetInfo.getXmlJavaTypeAdapter());
    }
  }
  if (owningInfo.hasPackageLevelAdaptersByClass()) {
    JavaClass packageLevelAdapter=owningInfo.getPackageLevelAdaptersByClass().get(type.getQualifiedName());
    if (packageLevelAdapter != null && prop.getXmlJavaTypeAdapter() == null) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter xja=new org.eclipse.persistence.jaxb.xmlmodel.XmlJavaTypeAdapter();
      xja.setValue(packageLevelAdapter.getQualifiedName());
      xja.setType(type.getQualifiedName());
      prop.setXmlJavaTypeAdapter(xja);
    }
  }
}"
65584,"/** 
 * Process a given JavaType's attributes.
 * @param javaType
 * @param typeInfo
 * @param nsInfo
 */
private void processJavaType(JavaType javaType,TypeInfo typeInfo,NamespaceInfo nsInfo){
  if (null != javaType.getJavaAttributes()) {
    List<String> processedPropertyNames=new ArrayList<String>();
    for (    JAXBElement jaxbElement : javaType.getJavaAttributes().getJavaAttribute()) {
      JavaAttribute javaAttribute=(JavaAttribute)jaxbElement.getValue();
      Property originalProperty=typeInfo.getOriginalProperties().get(javaAttribute.getJavaAttribute());
      if (originalProperty == null) {
        if (typeInfo.getXmlVirtualAccessMethods() != null) {
          Property newProperty=new Property(this.aProcessor.getHelper());
          newProperty.setPropertyName(javaAttribute.getJavaAttribute());
          newProperty.setExtension(true);
          String attributeType=null;
          if (javaAttribute instanceof XmlElement) {
            attributeType=((XmlElement)javaAttribute).getType();
          }
 else           if (javaAttribute instanceof XmlAttribute) {
            attributeType=((XmlAttribute)javaAttribute).getType();
          }
          if (attributeType != null && attributeType.equals(""String_Node_Str"")) {
            newProperty.setType(jModelInput.getJavaModel().getClass(attributeType));
          }
 else {
            newProperty.setType(jModelInput.getJavaModel().getClass(Helper.STRING));
          }
          originalProperty=newProperty;
          typeInfo.addProperty(javaAttribute.getJavaAttribute(),newProperty);
        }
 else {
          getLogger().logWarning(JAXBMetadataLogger.NO_PROPERTY_FOR_JAVA_ATTRIBUTE,new Object[]{javaAttribute.getJavaAttribute(),javaType.getName()});
          continue;
        }
      }
      boolean alreadyProcessed=processedPropertyNames.contains(javaAttribute.getJavaAttribute());
      Property propToProcess;
      if (alreadyProcessed) {
        propToProcess=(Property)originalProperty.clone();
      }
 else {
        propToProcess=typeInfo.getProperties().get(javaAttribute.getJavaAttribute());
      }
      processJavaAttribute(typeInfo,javaAttribute,propToProcess,nsInfo,javaType);
      if (propToProcess.isTransient()) {
        typeInfo.getPropertyList().remove(propToProcess);
      }
      if (alreadyProcessed) {
        List<Property> additionalProps=typeInfo.getAdditionalProperties().get(javaAttribute.getJavaAttribute());
        if (additionalProps == null) {
          additionalProps=new ArrayList<Property>();
        }
        additionalProps.add(propToProcess);
        typeInfo.getAdditionalProperties().put(javaAttribute.getJavaAttribute(),additionalProps);
      }
 else {
        typeInfo.getProperties().put(javaAttribute.getJavaAttribute(),propToProcess);
        processedPropertyNames.add(javaAttribute.getJavaAttribute());
      }
    }
  }
}","/** 
 * Process a given JavaType's attributes.
 * @param javaType
 * @param typeInfo
 * @param nsInfo
 */
private void processJavaType(JavaType javaType,TypeInfo typeInfo,NamespaceInfo nsInfo){
  if (null != javaType.getJavaAttributes()) {
    List<String> processedPropertyNames=new ArrayList<String>();
    for (    JAXBElement jaxbElement : javaType.getJavaAttributes().getJavaAttribute()) {
      JavaAttribute javaAttribute=(JavaAttribute)jaxbElement.getValue();
      Property originalProperty=typeInfo.getOriginalProperties().get(javaAttribute.getJavaAttribute());
      if (originalProperty == null) {
        if (typeInfo.getXmlVirtualAccessMethods() != null) {
          Property newProperty=new Property(this.aProcessor.getHelper());
          newProperty.setPropertyName(javaAttribute.getJavaAttribute());
          newProperty.setExtension(true);
          String attributeType=null;
          if (javaAttribute instanceof XmlElement) {
            attributeType=((XmlElement)javaAttribute).getType();
          }
 else           if (javaAttribute instanceof XmlAttribute) {
            attributeType=((XmlAttribute)javaAttribute).getType();
          }
          if (attributeType != null && attributeType.equals(""String_Node_Str"")) {
            newProperty.setType(jModelInput.getJavaModel().getClass(attributeType));
          }
 else {
            newProperty.setType(jModelInput.getJavaModel().getClass(Helper.STRING));
          }
          originalProperty=newProperty;
          typeInfo.addProperty(javaAttribute.getJavaAttribute(),newProperty);
        }
 else {
          getLogger().logWarning(JAXBMetadataLogger.NO_PROPERTY_FOR_JAVA_ATTRIBUTE,new Object[]{javaAttribute.getJavaAttribute(),javaType.getName()});
          continue;
        }
      }
      boolean alreadyProcessed=processedPropertyNames.contains(javaAttribute.getJavaAttribute());
      Property propToProcess;
      if (alreadyProcessed) {
        propToProcess=(Property)originalProperty.clone();
      }
 else {
        propToProcess=typeInfo.getProperties().get(javaAttribute.getJavaAttribute());
      }
      processJavaAttribute(typeInfo,javaAttribute,propToProcess,nsInfo,javaType);
      if (propToProcess.isTransient()) {
        typeInfo.getPropertyList().remove(propToProcess);
      }
      if (alreadyProcessed) {
        List<Property> additionalProps=null;
        if (typeInfo.hasAdditionalProperties()) {
          additionalProps=typeInfo.getAdditionalProperties().get(javaAttribute.getJavaAttribute());
        }
        if (additionalProps == null) {
          additionalProps=new ArrayList<Property>();
        }
        additionalProps.add(propToProcess);
        typeInfo.getAdditionalProperties().put(javaAttribute.getJavaAttribute(),additionalProps);
      }
 else {
        typeInfo.getProperties().put(javaAttribute.getJavaAttribute(),propToProcess);
        processedPropertyNames.add(javaAttribute.getJavaAttribute());
      }
    }
  }
}"
65585,"/** 
 * Wrap the type in a type wrapper to handle XML conversion.
 */
public static DatabaseTypeWrapper wrapType(DatabaseType databaseType){
  if (databaseType.isComplexDatabaseType()) {
    ComplexDatabaseType complexType=(ComplexDatabaseType)databaseType;
    if (complexType.isJDBCType()) {
      return new OracleArrayTypeWrapper(databaseType);
    }
 else     if (complexType.isRecord()) {
      return new PLSQLRecordWrapper(databaseType);
    }
 else     if (complexType.isCollection()) {
      return new PLSQLCollectionWrapper(databaseType);
    }
  }
 else   if (databaseType.isJDBCType()) {
    return new JDBCTypeWrapper(databaseType);
  }
 else {
    return new SimplePLSQLTypeWrapper(databaseType);
  }
  return null;
}","/** 
 * Wrap the type in a type wrapper to handle XML conversion.
 */
public static DatabaseTypeWrapper wrapType(DatabaseType databaseType){
  if (databaseType.isComplexDatabaseType()) {
    ComplexDatabaseType complexType=(ComplexDatabaseType)databaseType;
    if (complexType.isJDBCType()) {
      if (complexType.isCollection()) {
        return new OracleArrayTypeWrapper(databaseType);
      }
      return new OracleObjectTypeWrapper(databaseType);
    }
 else     if (complexType.isRecord()) {
      return new PLSQLRecordWrapper(databaseType);
    }
 else     if (complexType.isCollection()) {
      return new PLSQLCollectionWrapper(databaseType);
    }
  }
 else   if (databaseType.isJDBCType()) {
    return new JDBCTypeWrapper(databaseType);
  }
 else {
    return new SimplePLSQLTypeWrapper(databaseType);
  }
  return null;
}"
65586,"protected ClassDescriptor buildDatabaseTypeWrapperDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseTypeWrapper.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(JDBCTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SimplePLSQLTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLRecordWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLCollectionWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleArrayTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  return descriptor;
}","protected ClassDescriptor buildDatabaseTypeWrapperDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DatabaseTypeWrapper.class);
  descriptor.getInheritancePolicy().setClassIndicatorField(new XMLField(""String_Node_Str""));
  descriptor.getInheritancePolicy().addClassIndicator(JDBCTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SimplePLSQLTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLRecordWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(PLSQLCollectionWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleArrayTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(OracleObjectTypeWrapper.class,getPrimaryNamespaceXPath() + ""String_Node_Str"");
  return descriptor;
}"
65587,"@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildOracleArrayTypeWrapperDescriptor());
  addDescriptor(buildPLSQLrecordWrapperDescriptor());
  addDescriptor(buildPLSQLCollectionWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLStoredFunctionCallDescriptor());
  addDescriptor(buildOracleArrayTypeDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildPLSQLCollectionDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
  addDescriptor(buildDocumentPreservationPolicyDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyDescriptor());
  addDescriptor(buildXMLBinderPolicyDescriptor());
  addDescriptor(buildNodeOrderingPolicyDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyDescriptor());
}","@Override public void buildDescriptors(){
  super.buildDescriptors();
  addDescriptor(buildCursoredStreamPolicyDescriptor());
  addDescriptor(buildScrollableCursorPolicyDescriptor());
  addDescriptor(buildStoredProcedureArgumentDescriptor());
  addDescriptor(buildStoredProcedureOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureInOutArgumentsDescriptor());
  addDescriptor(buildStoredProcedureOutCursorArgumentsDescriptor());
  addDescriptor(buildStoredProcedureCallDescriptor());
  addDescriptor(buildStoredFunctionCallDescriptor());
  addDescriptor(buildSortedCollectionContainerPolicyDescriptor());
  addDescriptor(buildXMLAnyAttributeMappingDescriptor());
  addDescriptor(buildXMLCollectionReferenceMappingDescriptor());
  addDescriptor(buildXMLObjectReferenceMappingDescriptor());
  addDescriptor(buildXMLFragmentMappingDescriptor());
  addDescriptor(buildXMLFragmentCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceCollectionMappingDescriptor());
  addDescriptor(buildXMLChoiceFieldToClassAssociationDescriptor());
  addDescriptor(buildXMLChoiceObjectMappingDescriptor());
  addDescriptor(buildAbstractNullPolicyDescriptor());
  addDescriptor(buildNullPolicyDescriptor());
  addDescriptor(buildIsSetNullPolicyDescriptor());
  addDescriptor(buildObjectTypeFieldAssociationDescriptor());
  addDescriptor(buildDatabaseTypeWrapperDescriptor());
  addDescriptor(buildJDBCTypeWrapperDescriptor());
  addDescriptor(buildSimplePLSQLTypeWrapperDescriptor());
  addDescriptor(buildOracleArrayTypeWrapperDescriptor());
  addDescriptor(buildOracleObjectTypeWrapperDescriptor());
  addDescriptor(buildPLSQLrecordWrapperDescriptor());
  addDescriptor(buildPLSQLCollectionWrapperDescriptor());
  addDescriptor(buildPLSQLargumentDescriptor());
  addDescriptor(buildPLSQLStoredProcedureCallDescriptor());
  addDescriptor(buildPLSQLStoredFunctionCallDescriptor());
  addDescriptor(buildOracleArrayTypeDescriptor());
  addDescriptor(buildOracleObjectTypeDescriptor());
  addDescriptor(buildPLSQLrecordDescriptor());
  addDescriptor(buildPLSQLCollectionDescriptor());
  addDescriptor(buildObjectRelationalDatabaseFieldDescriptor());
  addDescriptor(buildDocumentPreservationPolicyDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyDescriptor());
  addDescriptor(buildXMLBinderPolicyDescriptor());
  addDescriptor(buildNodeOrderingPolicyDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyDescriptor());
}"
65588,"/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    DatabaseType type=outArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (outArg.outIndex != MIN_VALUE) {
        if (complexType instanceof OracleArrayType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (complexType.hasCompatibleType()) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
        }
 else {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
        }
      }
    }
  }
}","/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof OracleObjectType) {
          super.addNamedArgument(inArg.name,inArg.name,Types.STRUCT,complexType.getCompatibleType());
        }
 else         if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    DatabaseType type=outArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (outArg.outIndex != MIN_VALUE) {
        if (complexType instanceof OracleArrayType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof OracleObjectType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,Types.STRUCT,complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (complexType.hasCompatibleType()) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
        }
 else {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
        }
      }
    }
  }
}"
65589,"/** 
 * Tests the injected   {@link IJPQLQueryFormatter} and make sure the generated string will bethe same as the given JPQL query.
 * @param jpqlStateObject
 * @param jpqlQuery
 */
protected void testFormatter(JPQLQueryStateObject jpqlStateObject,String jpqlQuery){
  if (queryFormatter != null) {
    if (queryFormatter instanceof DefaultActualJPQLQueryFormatter && ((DefaultActualJPQLQueryFormatter)queryFormatter).getIdentifierStyle() == IdentifierStyle.CAPITALIZE_EACH_WORD && ((DefaultActualJPQLQueryFormatter)queryFormatter).isUsingExactMatch()) {
      System.out.println();
    }
    boolean exactMatch=false;
    IdentifierStyle stye=((BaseJPQLQueryFormatter)queryFormatter).getIdentifierStyle();
    if (queryFormatter instanceof AbstractActualJPQLQueryFormatter) {
      AbstractActualJPQLQueryFormatter formatter=(AbstractActualJPQLQueryFormatter)queryFormatter;
      exactMatch=formatter.isUsingExactMatch();
    }
    jpqlQuery=JPQLQueryBuilder.toText(jpqlQuery,jpqlStateObject.getGrammar(),exactMatch,stye);
    assertEquals(""String_Node_Str"",jpqlQuery,queryFormatter.toString(jpqlStateObject));
  }
}","/** 
 * Tests the injected   {@link IJPQLQueryFormatter} and make sure the generated string will bethe same as the given JPQL query.
 * @param jpqlStateObject
 * @param jpqlQuery
 */
protected void testFormatter(JPQLQueryStateObject jpqlStateObject,String jpqlQuery){
  if (queryFormatter != null) {
    boolean exactMatch=false;
    IdentifierStyle stye=((BaseJPQLQueryFormatter)queryFormatter).getIdentifierStyle();
    if (queryFormatter instanceof AbstractActualJPQLQueryFormatter) {
      AbstractActualJPQLQueryFormatter formatter=(AbstractActualJPQLQueryFormatter)queryFormatter;
      exactMatch=formatter.isUsingExactMatch();
    }
    jpqlQuery=JPQLQueryBuilder.toText(jpqlQuery,jpqlStateObject.getGrammar(),exactMatch,stye);
    assertEquals(""String_Node_Str"",jpqlQuery,queryFormatter.toString(jpqlStateObject));
  }
}"
65590,"private void processXmlNullPolicy(Property property){
  if (helper.isAnnotationPresent(property.getElement(),XmlNullPolicy.class)) {
    XmlNullPolicy nullPolicy=(XmlNullPolicy)helper.getAnnotation(property.getElement(),XmlNullPolicy.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlNullPolicy policy=new org.eclipse.persistence.jaxb.xmlmodel.XmlNullPolicy();
    policy.setEmptyNodeRepresentsNull(nullPolicy.emptyNodeRepresentsNull());
    policy.setIsSetPerformedForAbsentNode(nullPolicy.isSetPerformedForAbsentNode());
    policy.setXsiNilRepresentsNull(new Boolean(nullPolicy.xsiNilRepresentsNull()));
    policy.setNullRepresentationForXml(org.eclipse.persistence.jaxb.xmlmodel.XmlMarshalNullRepresentation.valueOf(nullPolicy.nullRepresentationForXml().toString()));
    property.setNullPolicy(policy);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlIsSetNullPolicy.class)) {
    XmlIsSetNullPolicy nullPolicy=(XmlIsSetNullPolicy)helper.getAnnotation(property.getElement(),XmlIsSetNullPolicy.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy policy=new org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy();
    policy.setEmptyNodeRepresentsNull(nullPolicy.emptyNodeRepresentsNull());
    policy.setXsiNilRepresentsNull(new Boolean(nullPolicy.xsiNilRepresentsNull()));
    policy.setNullRepresentationForXml(org.eclipse.persistence.jaxb.xmlmodel.XmlMarshalNullRepresentation.valueOf(nullPolicy.nullRepresentationForXml().toString()));
    policy.setIsSetMethodName(nullPolicy.isSetMethodName());
    for (    XmlParameter next : nullPolicy.isSetParameters()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy.IsSetParameter param=new org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy.IsSetParameter();
      param.setValue(next.value());
      param.setType(next.type().getName());
      policy.getIsSetParameter().add(param);
    }
    property.setNullPolicy(policy);
  }
}","private void processXmlNullPolicy(Property property){
  if (helper.isAnnotationPresent(property.getElement(),XmlNullPolicy.class)) {
    XmlNullPolicy nullPolicy=(XmlNullPolicy)helper.getAnnotation(property.getElement(),XmlNullPolicy.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlNullPolicy policy=new org.eclipse.persistence.jaxb.xmlmodel.XmlNullPolicy();
    policy.setEmptyNodeRepresentsNull(nullPolicy.emptyNodeRepresentsNull());
    policy.setIsSetPerformedForAbsentNode(nullPolicy.isSetPerformedForAbsentNode());
    policy.setXsiNilRepresentsNull(Boolean.valueOf(nullPolicy.xsiNilRepresentsNull()));
    policy.setNullRepresentationForXml(org.eclipse.persistence.jaxb.xmlmodel.XmlMarshalNullRepresentation.valueOf(nullPolicy.nullRepresentationForXml().toString()));
    property.setNullPolicy(policy);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlIsSetNullPolicy.class)) {
    XmlIsSetNullPolicy nullPolicy=(XmlIsSetNullPolicy)helper.getAnnotation(property.getElement(),XmlIsSetNullPolicy.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy policy=new org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy();
    policy.setEmptyNodeRepresentsNull(nullPolicy.emptyNodeRepresentsNull());
    policy.setXsiNilRepresentsNull(Boolean.valueOf(nullPolicy.xsiNilRepresentsNull()));
    policy.setNullRepresentationForXml(org.eclipse.persistence.jaxb.xmlmodel.XmlMarshalNullRepresentation.valueOf(nullPolicy.nullRepresentationForXml().toString()));
    policy.setIsSetMethodName(nullPolicy.isSetMethodName());
    for (    XmlParameter next : nullPolicy.isSetParameters()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy.IsSetParameter param=new org.eclipse.persistence.jaxb.xmlmodel.XmlIsSetNullPolicy.IsSetParameter();
      param.setValue(next.value());
      param.setType(next.type().getName());
      policy.getIsSetParameter().add(param);
    }
    property.setNullPolicy(policy);
  }
}"
65591,"/** 
 * Wraps the XmlAdapter marshal method.
 */
public Object convertObjectValueToDataValue(Object objectValue,Session session,XMLMarshaller marshaller){
  try {
    XmlAdapter adapter=this.xmlAdapter;
    if (marshaller != null) {
      HashMap adapters=(HashMap)marshaller.getProperty(JAXBMarshaller.XML_JAVATYPE_ADAPTERS);
      if (adapters != null) {
        XmlAdapter runtimeAdapter=(XmlAdapter)adapters.get(this.xmlAdapterClass);
        if (runtimeAdapter != null) {
          adapter=runtimeAdapter;
        }
      }
    }
    return adapter.marshal(objectValue);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(objectValue,valueType);
  }
}","/** 
 * Wraps the XmlAdapter marshal method.
 */
public Object convertObjectValueToDataValue(Object objectValue,Session session,XMLMarshaller marshaller){
  try {
    XmlAdapter adapter=this.xmlAdapter;
    if (marshaller != null) {
      HashMap adapters=(HashMap)marshaller.getProperty(JAXBMarshaller.XML_JAVATYPE_ADAPTERS);
      if (adapters != null) {
        XmlAdapter runtimeAdapter=(XmlAdapter)adapters.get(this.xmlAdapterClass);
        if (runtimeAdapter != null) {
          adapter=runtimeAdapter;
        }
      }
    }
    return adapter.marshal(objectValue);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(objectValue,valueType,ex);
  }
}"
65592,"@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(attributeValue);
  if (null != iterator) {
    while (cp.hasNext(iterator)) {
      Object value=cp.next(iterator,session);
      if (null != converter) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
        }
 else {
          value=converter.convertObjectValueToDataValue(value,session);
        }
      }
      NodeValue associatedNodeValue=null;
      XMLField associatedField=null;
      Object fieldValue=value;
      if (value instanceof XMLRoot) {
        XMLRoot rootValue=(XMLRoot)value;
        String localName=rootValue.getLocalName();
        String namespaceUri=rootValue.getNamespaceURI();
        fieldValue=rootValue.getObject();
        associatedField=getFieldForName(localName,namespaceUri);
        if (associatedField == null) {
          associatedField=getClassToFieldMappings().get(fieldValue.getClass());
        }
      }
 else {
        associatedField=getClassToFieldMappings().get(value.getClass());
      }
      if (associatedField == null) {
        List<XMLField> sourceFields=classToSourceFieldsMappings.get(value.getClass());
        if (sourceFields != null && sourceFields.size() > 0) {
          DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(sourceFields.get(0));
          for (          XMLField next : sourceFields) {
            fieldValue=((XMLCollectionReferenceMapping)xmlMapping).buildFieldValue(value,next,session);
            XMLEntry entry=new XMLEntry();
            entry.setValue(fieldValue);
            entry.setXMLField(next);
            nestedRows.add(entry);
          }
        }
      }
 else {
        DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
        if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
        }
        XMLEntry entry=new XMLEntry();
        entry.setValue(fieldValue);
        entry.setXMLField(associatedField);
        nestedRows.add(entry);
      }
    }
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}","@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  if (null != attributeValue) {
    ContainerPolicy cp=getContainerPolicy();
    Object iterator=cp.iteratorFor(attributeValue);
    if (null != iterator) {
      while (cp.hasNext(iterator)) {
        Object value=cp.next(iterator,session);
        if (null != converter) {
          if (converter instanceof XMLConverter) {
            value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
          }
 else {
            value=converter.convertObjectValueToDataValue(value,session);
          }
        }
        NodeValue associatedNodeValue=null;
        XMLField associatedField=null;
        Object fieldValue=value;
        if (value instanceof XMLRoot) {
          XMLRoot rootValue=(XMLRoot)value;
          String localName=rootValue.getLocalName();
          String namespaceUri=rootValue.getNamespaceURI();
          fieldValue=rootValue.getObject();
          associatedField=getFieldForName(localName,namespaceUri);
          if (associatedField == null) {
            associatedField=getClassToFieldMappings().get(fieldValue.getClass());
          }
        }
 else {
          associatedField=getClassToFieldMappings().get(value.getClass());
        }
        if (associatedField == null) {
          List<XMLField> sourceFields=classToSourceFieldsMappings.get(value.getClass());
          if (sourceFields != null && sourceFields.size() > 0) {
            DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(sourceFields.get(0));
            for (            XMLField next : sourceFields) {
              fieldValue=((XMLCollectionReferenceMapping)xmlMapping).buildFieldValue(value,next,session);
              XMLEntry entry=new XMLEntry();
              entry.setValue(fieldValue);
              entry.setXMLField(next);
              nestedRows.add(entry);
            }
          }
        }
 else {
          DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
          if (xmlMapping.isAbstractCompositeCollectionMapping()) {
            fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
          }
          XMLEntry entry=new XMLEntry();
          entry.setValue(fieldValue);
          entry.setXMLField(associatedField);
          nestedRows.add(entry);
        }
      }
    }
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}"
65593,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBInteger3DArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBInt2DArrayTestCases.class);
  suite.addTestSuite(JAXBIntListTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  suite.addTestSuite(JAXBListOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerEnumTestCases.class);
  suite.addTestSuite(JAXBByteArrayWithDataHandlerTestCases.class);
  suite.addTestSuite(JAXBMapOfInnerClassTestCases.class);
  suite.addTestSuite(MultiDimensionalArrayNonRootTestCases.class);
  suite.addTestSuite(MapNamespaceTestCases.class);
  suite.addTestSuite(JAXBArrayTestCases.class);
  suite.addTestSuite(NullIteratorListTestCases.class);
  suite.addTestSuite(NullSetsMapTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBInteger3DArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBInt2DArrayTestCases.class);
  suite.addTestSuite(JAXBIntListTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  suite.addTestSuite(JAXBListOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerEnumTestCases.class);
  suite.addTestSuite(JAXBByteArrayWithDataHandlerTestCases.class);
  suite.addTestSuite(JAXBMapOfInnerClassTestCases.class);
  suite.addTestSuite(MultiDimensionalArrayNonRootTestCases.class);
  suite.addTestSuite(MapNamespaceTestCases.class);
  suite.addTestSuite(JAXBArrayTestCases.class);
  suite.addTestSuite(NullIteratorListTestCases.class);
  suite.addTestSuite(NullSetsMapTestCases.class);
  suite.addTestSuite(NullContainerTestCases.class);
  return suite;
}"
65594,"public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  if (null == rootXPathNode.getNonAttributeChildren()) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  for (int x=0, size=marshalContext.getNonAttributeChildrenSize(rootXPathNode); x < size; x++) {
    XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,rootXPathNode);
    xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
  }
  return record;
}","public AbstractRecord buildRow(AbstractRecord record,Object object,org.eclipse.persistence.internal.sessions.AbstractSession session,XMLMarshaller marshaller,XPathFragment rootFragment,WriteType writeType){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  XMLDescriptor xmlDescriptor=(XMLDescriptor)descriptor;
  NamespaceResolver namespaceResolver=xmlDescriptor.getNamespaceResolver();
  MarshalContext marshalContext=null;
  if (xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    for (int x=0, size=marshalContext.getNonAttributeChildrenSize(rootXPathNode); x < size; x++) {
      XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,rootXPathNode);
      xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
    }
  }
  return record;
}"
65595,"public boolean marshal(MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller,MarshalContext marshalContext,XPathFragment rootFragment){
  if ((null == marshalNodeValue) || marshalNodeValue.isMarshalOnlyNodeValue()) {
    marshalRecord.addGroupingElement(this);
    boolean hasValue=false;
    if (null != attributeChildren) {
      for (int x=0, size=attributeChildren.size(); x < size; x++) {
        XPathNode xPathNode=attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),this.xPathFragment) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
    if (null != nonAttributeChildren) {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(this); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext,this.xPathFragment) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver,rootFragment);
  }
}","public boolean marshal(MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver,XMLMarshaller marshaller,MarshalContext marshalContext,XPathFragment rootFragment){
  if ((null == marshalNodeValue) || marshalNodeValue.isMarshalOnlyNodeValue()) {
    marshalRecord.addGroupingElement(this);
    boolean hasValue=false;
    if (null != attributeChildren) {
      for (int x=0, size=attributeChildren.size(); x < size; x++) {
        XPathNode xPathNode=attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),this.xPathFragment) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
    if (null == nonAttributeChildren) {
      if (textNode != null) {
        hasValue=textNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
      }
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(this); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext,this.xPathFragment) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver,rootFragment);
  }
}"
65596,"public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null == nonAttributeChildren) {
        nonAttributeChildren=new ArrayList();
      }
      if (!(nonAttributeChildren.contains(textXPathNode))) {
        nonAttributeChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}","public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}"
65597,"/** 
 * INTERNAL: Set the cached SQL call for the expression query. PERF: Allow caching of expression query SQL call to avoid regeneration.
 */
public void putCachedExpressionQuery(DatabaseQuery query){
  this.cachedExpressionQueries.put(query,query);
}","/** 
 * INTERNAL: Set the cached SQL call for the expression query. PERF: Allow caching of expression query SQL call to avoid regeneration.
 */
public void putCachedExpressionQuery(DatabaseQuery query){
  getCachedExpressionQueries().put(query,query);
}"
65598,"/** 
 * ADVANCED: Return the max size of the expression query cache for avoiding regenerated dynamic query SQL.
 */
public int getExpressionQueryCacheMaxSize(){
  return cachedExpressionQueries.getMaxSize();
}","/** 
 * ADVANCED: Return the max size of the expression query cache for avoiding regenerated dynamic query SQL.
 */
public int getExpressionQueryCacheMaxSize(){
  return getCachedExpressionQueries().getMaxSize();
}"
65599,"/** 
 * INTERNAL: Initialize the state of the descriptor query manager
 */
public DescriptorQueryManager(){
  this.queries=new LinkedHashMap(5);
  this.cachedUpdateCalls=new ConcurrentFixedCache(10);
  this.cachedExpressionQueries=new ConcurrentFixedCache(20);
  setDoesExistQuery(new DoesExistQuery());
  this.setQueryTimeout(DefaultTimeout);
}","/** 
 * INTERNAL: Initialize the state of the descriptor query manager
 */
public DescriptorQueryManager(){
  this.queries=new LinkedHashMap(5);
  setDoesExistQuery(new DoesExistQuery());
  this.setQueryTimeout(DefaultTimeout);
}"
65600,"/** 
 * INTERNAL: Return the cached SQL call for the expression query. PERF: Allow caching of expression query SQL call to avoid regeneration.
 */
public DatabaseQuery getCachedExpressionQuery(DatabaseQuery query){
  return (DatabaseQuery)this.cachedExpressionQueries.get(query);
}","/** 
 * INTERNAL: Return the cached SQL call for the expression query. PERF: Allow caching of expression query SQL call to avoid regeneration.
 */
public DatabaseQuery getCachedExpressionQuery(DatabaseQuery query){
  return (DatabaseQuery)getCachedExpressionQueries().get(query);
}"
65601,"/** 
 * INTERNAL: Cache a clone of the update SQL calls based on the updated fields. If the max size is reached, do not cache the call. The call's query must be dereferenced in order to allow the GC of a related session. PERF: Allow caching of the update SQL call to avoid regeneration.
 */
public void putCachedUpdateCalls(Vector updateFields,Vector updateCalls){
  Vector vectorToCache=updateCalls;
  if (!updateCalls.isEmpty()) {
    int updateCallsSize=updateCalls.size();
    vectorToCache=new NonSynchronizedVector(updateCallsSize);
    for (int i=0; i < updateCallsSize; i++) {
      DatasourceCall updateCall=(DatasourceCall)updateCalls.get(i);
      DatasourceCall clonedUpdateCall=(DatasourceCall)updateCall.clone();
      clonedUpdateCall.setQuery(null);
      vectorToCache.add(clonedUpdateCall);
    }
  }
  this.cachedUpdateCalls.put(updateFields,vectorToCache);
}","/** 
 * INTERNAL: Cache a clone of the update SQL calls based on the updated fields. If the max size is reached, do not cache the call. The call's query must be dereferenced in order to allow the GC of a related session. PERF: Allow caching of the update SQL call to avoid regeneration.
 */
public void putCachedUpdateCalls(Vector updateFields,Vector updateCalls){
  Vector vectorToCache=updateCalls;
  if (!updateCalls.isEmpty()) {
    int updateCallsSize=updateCalls.size();
    vectorToCache=new NonSynchronizedVector(updateCallsSize);
    for (int i=0; i < updateCallsSize; i++) {
      DatasourceCall updateCall=(DatasourceCall)updateCalls.get(i);
      DatasourceCall clonedUpdateCall=(DatasourceCall)updateCall.clone();
      clonedUpdateCall.setQuery(null);
      vectorToCache.add(clonedUpdateCall);
    }
  }
  getCachedUpdateCalls().put(updateFields,vectorToCache);
}"
65602,"/** 
 * INTERNAL: Return the cached update SQL call based on the updated fields. PERF: Allow caching of the update SQL call to avoid regeneration.
 */
public Vector getCachedUpdateCalls(Vector updateFields){
  return (Vector)this.cachedUpdateCalls.get(updateFields);
}","/** 
 * INTERNAL: Return the cached update SQL call based on the updated fields. PERF: Allow caching of the update SQL call to avoid regeneration.
 */
public Vector getCachedUpdateCalls(Vector updateFields){
  return (Vector)getCachedUpdateCalls().get(updateFields);
}"
65603,"/** 
 * ADVANCED: Return the size of the update call cache. The update call cache is used to cache the update SQL to avoid regeneration. Since every update with different fields produces different SQL, this cache allows caching of the update SQL based on the fields being updated. The default cache size is 10, the update call cache can be disabled through setting the size to 0.
 */
public int getUpdateCallCacheSize(){
  return this.cachedUpdateCalls.getMaxSize();
}","/** 
 * ADVANCED: Return the size of the update call cache. The update call cache is used to cache the update SQL to avoid regeneration. Since every update with different fields produces different SQL, this cache allows caching of the update SQL based on the fields being updated. The default cache size is 10, the update call cache can be disabled through setting the size to 0.
 */
public int getUpdateCallCacheSize(){
  return getCachedUpdateCalls().getMaxSize();
}"
65604,"/** 
 * ADVANCED: Set the size of the update call cache. The update call cache is used to cache the update SQL to avoid regeneration. Since every update with different fields produces different SQL, this cache allows caching of the update SQL based on the fields being updated. The default cache size is 10, the update call cache can be disabled through setting the size to 0.
 */
public void setUpdateCallCacheSize(int updateCallCacheSize){
  this.cachedUpdateCalls.setMaxSize(updateCallCacheSize);
}","/** 
 * ADVANCED: Set the size of the update call cache. The update call cache is used to cache the update SQL to avoid regeneration. Since every update with different fields produces different SQL, this cache allows caching of the update SQL based on the fields being updated. The default cache size is 10, the update call cache can be disabled through setting the size to 0.
 */
public void setUpdateCallCacheSize(int updateCallCacheSize){
  getCachedUpdateCalls().setMaxSize(updateCallCacheSize);
}"
65605,"/** 
 * Convenience method for determining if a given JavaClass should be processed as an ObjectFactory class.
 * @param javaClass
 * @return true if the JavaClass is annotated with @XmlRegistry or the mapof XmlRegistries contains a key equal to the JavaClass' qualified name
 */
private boolean isXmlRegistry(JavaClass javaClass){
  return (helper.isAnnotationPresent(javaClass,XmlRegistry.class) || xmlRegistries.get(javaClass.getQualifiedName()) != null);
}","/** 
 * Convenience method for determining if a given JavaClass should be processed as an ObjectFactory class.
 * @param javaClass
 * @return true if the JavaClass is annotated with @XmlRegistry or the mapof XmlRegistries contains a key equal to the JavaClass' qualified name
 */
private boolean isXmlRegistry(JavaClass javaClass){
  if (javaClass == null) {
    return false;
  }
  return (helper.isAnnotationPresent(javaClass,XmlRegistry.class) || xmlRegistries.get(javaClass.getQualifiedName()) != null);
}"
65606,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}"
65607,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65608,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHARARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,DROP_A_CUSTOMER_TYPE,ddlDebug);
    runDdl(conn,DROP_A_CONTACT_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHARARRAY_TYPE,ddlDebug);
  }
}"
65609,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHARARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHARARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_A_CONTACT_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_CUSTOMER_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65610,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        if (fType.getDataType() instanceof ObjectType) {
          String targetTypeName2=fType.getDataType().getTypeName();
          String alias=targetTypeName2.toLowerCase();
          ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
          if (ordt2 == null) {
            ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
            addToORProjectForObjectTypeArg(fType.getDataType(),orProject,alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
@SuppressWarnings(""String_Node_Str"") protected void addToORProjectForObjectTypeArg(DatabaseType dbType,Project orProject,String objectAlias){
  ObjectRelationalDataTypeDescriptor ordt=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(objectAlias);
  if (ordt == null) {
    ordt=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,objectAlias);
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType fType : oType.getFields()) {
    String fieldName=fType.getFieldName();
    String lFieldName=fieldName.toLowerCase();
    boolean found=false;
    Vector orderedFields=ordt.getOrderedFields();
    for (Iterator i=orderedFields.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (o instanceof DatabaseField) {
        DatabaseField field=(DatabaseField)o;
        if (field.getName().equalsIgnoreCase(fieldName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      ordt.addFieldOrdering(fieldName);
    }
    if (ordt.getMappingForAttributeName(lFieldName) == null) {
      if (fType.isComposite()) {
        String targetTypeName2=fType.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        ObjectRelationalDataTypeDescriptor ordt2=(ObjectRelationalDataTypeDescriptor)orProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=ordt2 == null;
        if (buildDescriptor) {
          ordt2=buildAndAddNewObjectRelationalDataTypeDescriptor(orProject,alias);
        }
        if (fType.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            addToORProjectForObjectTypeArg(fType.getDataType(),orProject,alias);
          }
          buildAndAddStructureMapping(ordt,lFieldName,fieldName,ordt2.getJavaClassName());
        }
 else         if (fType.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            addToORProjectForVArrayArg(fType.getDataType(),orProject,targetTypeName2,alias);
          }
          buildAndAddArrayMapping(ordt,lFieldName,fieldName,getStructureNameForField(fType,null));
        }
      }
 else {
        DirectToFieldMapping dfm=new DirectToFieldMapping();
        dfm.setFieldName(fieldName);
        dfm.setAttributeName(lFieldName);
        ordt.addMapping(dfm);
      }
    }
  }
}"
65611,"/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        if (field.getDataType() instanceof ObjectType) {
          String alias=field.getDataType().getTypeName().toLowerCase();
          XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
          if (xdesc2 == null) {
            String targetTypeName2=field.getDataType().getTypeName();
            xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
            addToOXProjectForObjectTypeArg(field.getDataType(),oxProject,targetTypeName2,alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}","/** 
 * Build descriptor and mappings for an Object type argument.  The newly created descriptor will be added to the given OX project.
 */
protected void addToOXProjectForObjectTypeArg(DatabaseType dbType,Project oxProject,String objectName,String objectAlias){
  XMLDescriptor xdesc=(XMLDescriptor)oxProject.getDescriptorForAlias(objectAlias);
  if (xdesc == null) {
    xdesc=buildAndAddNewXMLDescriptor(oxProject,objectAlias,nct.generateSchemaAlias(objectAlias),buildCustomQName(objectName,dbwsBuilder).getNamespaceURI());
  }
  ObjectType oType=(ObjectType)dbType;
  for (  FieldType field : oType.getFields()) {
    String lFieldName=field.getFieldName().toLowerCase();
    if (xdesc.getMappingForAttributeName(lFieldName) == null) {
      if (field.isComposite()) {
        String targetTypeName2=field.getDataType().getTypeName();
        String alias=targetTypeName2.toLowerCase();
        XMLDescriptor xdesc2=(XMLDescriptor)oxProject.getDescriptorForAlias(alias);
        boolean buildDescriptor=xdesc2 == null;
        if (buildDescriptor) {
          xdesc2=buildAndAddNewXMLDescriptor(oxProject,alias,nct.generateSchemaAlias(alias),buildCustomQName(targetTypeName2,dbwsBuilder).getNamespaceURI());
        }
        if (field.getDataType() instanceof ObjectType) {
          if (buildDescriptor) {
            addToOXProjectForObjectTypeArg(field.getDataType(),oxProject,targetTypeName2,alias);
          }
          buildAndAddXMLCompositeObjectMapping(xdesc,lFieldName,xdesc2.getJavaClassName());
        }
 else         if (field.getDataType() instanceof VArrayType) {
          if (buildDescriptor) {
            addToOXProjectForVArrayArg(field.getDataType(),oxProject,targetTypeName2,alias);
          }
          buildAndAddXMLCompositeDirectCollectionMapping(xdesc,lFieldName,lFieldName + ""String_Node_Str"",getAttributeClassForDatabaseType(field.getDataType()));
        }
      }
 else {
        addDirectMappingForFieldType(xdesc,lFieldName,field);
      }
    }
  }
}"
65612,"/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof OracleObjectType) {
          super.addNamedArgument(inArg.name,inArg.name,Types.STRUCT,complexType.getCompatibleType());
        }
 else         if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    DatabaseType type=outArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (outArg.outIndex != MIN_VALUE) {
        if (complexType instanceof OracleArrayType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof OracleObjectType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,Types.STRUCT,complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (complexType.hasCompatibleType()) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
        }
 else {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
        }
      }
    }
  }
}","/** 
 * INTERNAL compute the re-ordered indices - Do the IN args first, then the 'IN-half' of the INOUT args next, the OUT args, then the 'OUT-half' of the INOUT args
 */
protected void assignIndices(){
  List<PLSQLargument> inArguments=getArguments(arguments,IN);
  List<PLSQLargument> inOutArguments=getArguments(arguments,INOUT);
  inArguments.addAll(inOutArguments);
  int newIndex=1;
  List<PLSQLargument> expandedArguments=new ArrayList<PLSQLargument>();
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    if (inArg.databaseType.isComplexDatabaseType() && (!((ComplexDatabaseType)inArg.databaseType).hasCompatibleType())) {
      expandedArguments.add(inArg);
      inArgsIter.remove();
    }
  }
  inArguments.addAll(expandedArguments);
  for (ListIterator<PLSQLargument> inArgsIter=inArguments.listIterator(); inArgsIter.hasNext(); ) {
    PLSQLargument inArg=inArgsIter.next();
    newIndex=inArg.databaseType.computeInIndex(inArg,newIndex,inArgsIter);
  }
  for (  PLSQLargument inArg : inArguments) {
    DatabaseType type=inArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (inArg.inIndex != MIN_VALUE) {
        if (type instanceof OracleObjectType) {
          super.addNamedArgument(inArg.name,inArg.name,Types.STRUCT,complexType.getCompatibleType());
        }
 else         if (complexType instanceof OracleArrayType) {
          DatabaseType nestedType=((OracleArrayType)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(Types.STRUCT);
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (type instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)type).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField field=new ObjectRelationalDatabaseField(inArg.name);
            field.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              field.setSqlTypeName(((ComplexDatabaseType)nestedType).getCompatibleType());
            }
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType(),field);
          }
 else {
            super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else {
          super.addNamedArgument(inArg.name,inArg.name,type.getConversionCode(),complexType.getCompatibleType());
        }
      }
    }
  }
  List<PLSQLargument> outArguments=getArguments(arguments,OUT);
  outArguments.addAll(inOutArguments);
  for (ListIterator<PLSQLargument> outArgsIter=outArguments.listIterator(); outArgsIter.hasNext(); ) {
    PLSQLargument outArg=outArgsIter.next();
    newIndex=outArg.databaseType.computeOutIndex(outArg,newIndex,outArgsIter);
  }
  for (  PLSQLargument outArg : outArguments) {
    DatabaseType type=outArg.databaseType;
    if (!type.isComplexDatabaseType()) {
      super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
    }
 else {
      ComplexDatabaseType complexType=(ComplexDatabaseType)type;
      if (outArg.outIndex != MIN_VALUE) {
        if (complexType instanceof OracleArrayType) {
          DatabaseType nestedType=((OracleArrayType)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(Types.STRUCT);
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getTypeName(),complexType.getJavaType());
          }
        }
 else         if (complexType instanceof OracleObjectType) {
          super.addNamedOutputArgument(outArg.name,outArg.name,Types.STRUCT,complexType.getTypeName(),complexType.getJavaType());
        }
 else         if (complexType instanceof PLSQLCollection) {
          DatabaseType nestedType=((PLSQLCollection)complexType).getNestedType();
          if (nestedType != null) {
            ObjectRelationalDatabaseField nestedField=new ObjectRelationalDatabaseField(outArg.name);
            nestedField.setSqlType(nestedType.getConversionCode());
            if (nestedType.isComplexDatabaseType()) {
              ComplexDatabaseType complexNestedType=(ComplexDatabaseType)nestedType;
              nestedField.setType(complexNestedType.getJavaType());
              nestedField.setSqlTypeName(complexNestedType.getCompatibleType());
            }
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType(),nestedField);
          }
 else {
            super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType());
          }
        }
 else         if (complexType.hasCompatibleType()) {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode(),complexType.getCompatibleType(),complexType.getJavaType());
        }
 else {
          super.addNamedOutputArgument(outArg.name,outArg.name,type.getConversionCode());
        }
      }
    }
  }
}"
65613,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHAR2ARRAY_TYPE,ddlDebug);
  }
}"
65614,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHAR2ARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE2_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG2_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65615,"@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHARARRAY_TYPE,ddlDebug);
  }
}","@AfterClass public static void tearDown(){
  if (ddlDrop) {
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE_BODY,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_TAB1_TYPE,ddlDebug);
    runDdl(conn,DROP_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,DROP_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,DROP_VARCHARARRAY_TYPE,ddlDebug);
  }
}"
65616,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHARARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_VARCHARARRAY_VARRAY,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE,ddlDebug);
    runDdl(conn,CREATE_A_PHONE_TYPE_TABLE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_SIMPLERECORD_TYPE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_PACKAGE,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_BODY,ddlDebug);
    runDdl(conn,CREATE_COMPLEXPKG_TAB1_TYPE,ddlDebug);
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=null;
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
65617,"public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  XMLField xmlField=getXPathForField(property,namespaceInfo,true);
  mapping.setField(xmlField);
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    String theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=property.getOriginalType().getQualifiedName();
    }
 else {
      theClass=property.getType().getQualifiedName();
    }
    mapping.setAttributeClassificationName(theClass);
    try {
      JavaClass actualJavaClass=helper.getJavaClass(theClass);
      Class actualClass=helper.getClassForJavaClass(actualJavaClass);
      mapping.setAttributeClassification(actualClass);
    }
 catch (    Exception e) {
    }
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}","public XMLDirectMapping generateDirectMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLDirectMapping mapping=new XMLDirectMapping();
  mapping.setAttributeName(property.getPropertyName());
  String fixedValue=property.getFixedValue();
  if (fixedValue != null) {
    mapping.setIsWriteOnly(true);
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  XMLField xmlField=getXPathForField(property,namespaceInfo,true);
  mapping.setField(xmlField);
  if (property.getDefaultValue() != null) {
    mapping.setNullValue(property.getDefaultValue());
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else {
    if (property.isNillable()) {
      mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
      mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
    }
    mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
    if (!mapping.getXPath().equals(""String_Node_Str"")) {
      ((NullPolicy)mapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
    }
  }
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.getType() != null) {
    String theClass=null;
    if (property.isSetXmlJavaTypeAdapter()) {
      theClass=property.getOriginalType().getQualifiedName();
    }
 else {
      theClass=property.getType().getQualifiedName();
    }
    try {
      JavaClass actualJavaClass=helper.getJavaClass(theClass);
      Class actualClass=helper.getClassForJavaClass(actualJavaClass);
      mapping.setAttributeClassification(actualClass);
    }
 catch (    Exception e) {
      mapping.setAttributeClassificationName(theClass);
    }
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}"
65618,"public void testTypeArray() throws Exception {
  Type[] types=new Type[]{String.class};
  JAXBContext ctx=(JAXBContext)JAXBContextFactory.createContext(types,null,Thread.currentThread().getContextClassLoader());
  Map<Type,QName> typeMap=ctx.getTypeToSchemaType();
  assertEquals(1,typeMap.size());
  assertNotNull(typeMap.get(String.class));
  Map<TypeMappingInfo,QName> tmiMap=ctx.getTypeMappingInfoToSchemaType();
  assertEquals(0,tmiMap.size());
}","public void testTypeArray() throws Exception {
  Type[] types=new Type[]{String.class};
  JAXBContext ctx=(JAXBContext)JAXBContextFactory.createContext(types,null,Thread.currentThread().getContextClassLoader());
  ctx.refreshMetadata();
  Map<Type,QName> typeMap=ctx.getTypeToSchemaType();
  assertEquals(1,typeMap.size());
  assertNotNull(typeMap.get(String.class));
  Map<TypeMappingInfo,QName> tmiMap=ctx.getTypeMappingInfoToSchemaType();
  assertEquals(0,tmiMap.size());
}"
65619,"/** 
 * Generate a Schema for this JAXBContext
 * @param outputResolver Class that decides where the schema file (of the given namespace URI) will be written
 * @param additonalGlobalElements Map of additional global elements to be added to the generated XSD.Note that if any QName in this map conflicts with another global element (for example from a TypeMappingInfo object) then the element generated from this map will be the one that is present in the XSD.
 */
public void generateSchema(SchemaOutputResolver outputResolver,Map<QName,Type> additonalGlobalElements){
  JAXBContextState currentJAXBContextState=contextState;
  XMLContext xmlContext=currentJAXBContextState.getXMLContext();
  Generator generator=currentJAXBContextState.getGenerator();
  if (generator == null) {
    List<XMLDescriptor> descriptorsToProcess=new ArrayList<XMLDescriptor>();
    List<Session> sessions=xmlContext.getSessions();
    for (    Session session : sessions) {
      List<XMLDescriptor> descriptors=(List<XMLDescriptor>)(List)session.getProject().getOrderedDescriptors();
      for (      XMLDescriptor xDesc : descriptors) {
        descriptorsToProcess.add(xDesc);
      }
    }
    SchemaModelGenerator smGen=new SchemaModelGenerator();
    smGen.generateSchemas(descriptorsToProcess,null,new JAXBSchemaOutputResolver(outputResolver),additonalGlobalElements);
  }
 else {
    generator.generateSchemaFiles(outputResolver,additonalGlobalElements);
  }
}","/** 
 * Generate a Schema for this JAXBContext
 * @param outputResolver Class that decides where the schema file (of the given namespace URI) will be written
 * @param additonalGlobalElements Map of additional global elements to be added to the generated XSD.Note that if any QName in this map conflicts with another global element (for example from a TypeMappingInfo object) then the element generated from this map will be the one that is present in the XSD.
 */
public void generateSchema(SchemaOutputResolver outputResolver,Map<QName,Type> additonalGlobalElements){
  JAXBContextState currentJAXBContextState=contextState;
  if (isRefreshable()) {
    try {
      currentJAXBContextState=newContextState();
    }
 catch (    Exception e) {
      throw JAXBException.exceptionDuringSchemaGeneration(e);
    }
  }
  XMLContext xmlContext=currentJAXBContextState.getXMLContext();
  Generator generator=currentJAXBContextState.getGenerator();
  if (generator == null) {
    List<XMLDescriptor> descriptorsToProcess=new ArrayList<XMLDescriptor>();
    List<Session> sessions=xmlContext.getSessions();
    for (    Session session : sessions) {
      List<XMLDescriptor> descriptors=(List<XMLDescriptor>)(List)session.getProject().getOrderedDescriptors();
      for (      XMLDescriptor xDesc : descriptors) {
        descriptorsToProcess.add(xDesc);
      }
    }
    SchemaModelGenerator smGen=new SchemaModelGenerator();
    smGen.generateSchemas(descriptorsToProcess,null,new JAXBSchemaOutputResolver(outputResolver),additonalGlobalElements);
  }
 else {
    generator.generateSchemaFiles(outputResolver,additonalGlobalElements);
  }
}"
65620,"/** 
 * ADVANCED: <p>Refresh the underlying metadata based on the inputs that were used to create the JAXBContext.  This is particularly useful when using the virtual property mappings.  The refreshMetadata call could be made in the following way:</p> <pre>org.eclipse.persistence.jaxb.JAXBHelper.getJAXBContext(aJAXBContext).refreshMetadata();</pre> <b>Note:</b> <ul> <li>As instances of Binder maintain a cache, calling refreshMetadata will not affect instances of Binder.  To get the new metadata you must create a new instance of Binder after the refresh metadata call has been made.</li> </ul>
 * @throws javax.xml.bind.JAXBException
 */
public void refreshMetadata() throws javax.xml.bind.JAXBException {
  if (null == contextInput) {
    return;
  }
synchronized (this) {
    JAXBContextState newState=contextInput.createContextState();
    XMLContext xmlContext=getXMLContext();
    xmlContext.setXMLContextState(newState.getXMLContext().getXMLContextState());
    newState.setXMLContext(xmlContext);
    contextState=newState;
  }
}","/** 
 * ADVANCED: <p>Refresh the underlying metadata based on the inputs that were used to create the JAXBContext.  This is particularly useful when using the virtual property mappings.  The refreshMetadata call could be made in the following way:</p> <pre>org.eclipse.persistence.jaxb.JAXBHelper.getJAXBContext(aJAXBContext).refreshMetadata();</pre> <b>Note:</b> <ul> <li>As instances of Binder maintain a cache, calling refreshMetadata will not affect instances of Binder.  To get the new metadata you must create a new instance of Binder after the refresh metadata call has been made.</li> </ul>
 * @throws javax.xml.bind.JAXBException
 */
public void refreshMetadata() throws javax.xml.bind.JAXBException {
  JAXBContextState newState=newContextState();
  if (newState != null) {
    contextState=newState;
  }
}"
65621,"private void setTypeToTypeMappingInfo(Map<Type,TypeMappingInfo> typeToMappingInfo){
  this.typeToTypeMappingInfo=typeToMappingInfo;
  this.generator.setTypeToTypeMappingInfo(typeToMappingInfo);
}","private void setTypeToTypeMappingInfo(Map<Type,TypeMappingInfo> typeToMappingInfo){
  this.typeToTypeMappingInfo=typeToMappingInfo;
  if (this.generator != null) {
    this.generator.setTypeToTypeMappingInfo(typeToMappingInfo);
  }
}"
65622,"/** 
 * Create a JAXBContext on the array of TypeMappingInfo objects.  The JAXBContext will also be aware of classes reachable from the types in the array.  This is the preferred means of creating a Type aware JAXBContext.
 */
public static javax.xml.bind.JAXBContext createContext(TypeMappingInfo[] typesToBeBound,Map properties,ClassLoader classLoader) throws JAXBException {
  JAXBContextInput contextInput=new TypeMappingInfoInput(typesToBeBound,properties,classLoader);
  return new JAXBContext(contextInput);
}","/** 
 * Create a JAXBContext on the array of TypeMappingInfo objects.  The JAXBContext will also be aware of classes reachable from the types in the array.  This is the preferred means of creating a Type aware JAXBContext.
 */
public static javax.xml.bind.JAXBContext createContext(TypeMappingInfo[] typesToBeBound,Map properties,ClassLoader classLoader) throws JAXBException {
  JAXBContextInput contextInput=new TypeMappingInfoInput(typesToBeBound,properties,classLoader);
  JAXBContext context=new JAXBContext(contextInput);
  if (context.isRefreshable()) {
    context.postInitialize();
  }
  return context;
}"
65623,"protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return null;
  }
  NamespaceResolver descriptorNamespaceResolver=desc.getNamespaceResolver();
  if (null == descriptorNamespaceResolver || !descriptorNamespaceResolver.hasPrefixesToNamespaces()) {
    return null;
  }
  Map<String,String> prefixesToNamespaces=descriptorNamespaceResolver.getPrefixesToNamespaces();
  if (prefixesToNamespaces.size() == 0) {
    return null;
  }
  List returnList=new ArrayList(prefixesToNamespaces.size());
  NamespaceResolver marshalRecordNamespaceResolver=marshalRecord.getNamespaceResolver();
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    String prefix=marshalRecordNamespaceResolver.resolveNamespaceURI(entry.getValue());
    if (prefix == null || prefix.length() == 0) {
      prefix=entry.getKey();
      String uri=marshalRecordNamespaceResolver.resolveNamespacePrefix(prefix);
      if (uri == null || uri.length() == 0) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
  }
  return returnList;
}","protected List addExtraNamespacesToNamespaceResolver(XMLDescriptor desc,XMLRecord marshalRecord,AbstractSession session,boolean allowOverride){
  if (((XMLLogin)session.getDatasourceLogin()).hasEqualNamespaceResolvers()) {
    return null;
  }
  NamespaceResolver descriptorNamespaceResolver=desc.getNamespaceResolver();
  if (null == descriptorNamespaceResolver || !descriptorNamespaceResolver.hasPrefixesToNamespaces()) {
    return null;
  }
  Map<String,String> prefixesToNamespaces=descriptorNamespaceResolver.getPrefixesToNamespaces();
  if (prefixesToNamespaces.size() == 0) {
    return null;
  }
  List returnList=new ArrayList(prefixesToNamespaces.size());
  NamespaceResolver marshalRecordNamespaceResolver=marshalRecord.getNamespaceResolver();
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    String prefix=marshalRecordNamespaceResolver.resolveNamespaceURI(entry.getValue());
    if (prefix == null || prefix.length() == 0) {
      prefix=entry.getKey();
      String uri=marshalRecordNamespaceResolver.resolveNamespacePrefix(prefix);
      if (allowOverride || uri == null || uri.length() == 0) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
 else     if (allowOverride) {
      if (!prefix.equals(entry.getKey())) {
        marshalRecordNamespaceResolver.put(entry.getKey(),entry.getValue());
        returnList.add(new Namespace(entry.getKey(),entry.getValue()));
      }
    }
  }
  return returnList;
}"
65624,"public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object originalObject,Object object,AbstractSession session,XMLDescriptor refDesc,XMLField xmlField,boolean wasXMLRoot){
  XMLRecord record=(XMLRecord)row;
  record.setSession(session);
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session);
    writeExtraNamespaces(extraNamespaces,record);
    addXsiTypeAndClassIndicatorIfRequired(record,xmlDescriptor,refDesc,xmlField,originalObject,object,wasXMLRoot,false);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}","public AbstractRecord buildIntoNestedRow(AbstractRecord row,Object originalObject,Object object,AbstractSession session,XMLDescriptor refDesc,XMLField xmlField,boolean wasXMLRoot){
  XMLRecord record=(XMLRecord)row;
  record.setSession(session);
  XMLMarshaller marshaller=record.getMarshaller();
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().beforeMarshal(object);
  }
  List extraNamespaces=null;
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    extraNamespaces=addExtraNamespacesToNamespaceResolver(xmlDescriptor,record,session,false);
    writeExtraNamespaces(extraNamespaces,record);
    addXsiTypeAndClassIndicatorIfRequired(record,xmlDescriptor,refDesc,xmlField,originalObject,object,wasXMLRoot,false);
  }
  writeOutMappings(record,object,session);
  if (isXmlDescriptor()) {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    removeExtraNamespacesFromNamespaceResolver(record,extraNamespaces,session);
  }
  if (!getDescriptor().isAggregateDescriptor()) {
    addPrimaryKeyForNonDefaultTable(row);
  }
  if ((marshaller != null) && (marshaller.getMarshalListener() != null)) {
    marshaller.getMarshalListener().afterMarshal(object);
  }
  return row;
}"
65625,"public Element createUnownedElement(Node parent,XMLField xmlField){
  XPathFragment lastFragment=xmlField.getXPathFragment();
  while (lastFragment.getNextFragment() != null) {
    lastFragment=lastFragment.getNextFragment();
  }
  String nodeName=lastFragment.getShortName();
  String namespace=resolveNamespacePrefix(lastFragment,getNamespaceResolverForField(xmlField));
  Element elem=parent.getOwnerDocument().createElementNS(namespace,nodeName);
  if (lastFragment.isGeneratedPrefix()) {
    elem.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + lastFragment.getPrefix(),lastFragment.getNamespaceURI());
  }
  return elem;
}","public Element createUnownedElement(Node parent,XMLField xmlField){
  XPathFragment lastFragment=xmlField.getXPathFragment();
  while (lastFragment.getNextFragment() != null) {
    lastFragment=lastFragment.getNextFragment();
  }
  String nodeName=lastFragment.getShortName();
  String namespace=resolveNamespacePrefix(lastFragment,getNamespaceResolverForField(xmlField));
  NamespaceResolver domResolver=new NamespaceResolver();
  domResolver.setDOM(parent);
  String existingPrefix=domResolver.resolveNamespaceURI(namespace);
  String elementName=lastFragment.getShortName();
  if (existingPrefix != null) {
    if (existingPrefix.length() > 0) {
      elementName=existingPrefix + ""String_Node_Str"" + lastFragment.getLocalName();
    }
 else {
      elementName=lastFragment.getLocalName();
    }
  }
  Element elem=parent.getOwnerDocument().createElementNS(namespace,elementName);
  if (lastFragment.isGeneratedPrefix() && existingPrefix == null) {
    elem.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + lastFragment.getPrefix(),lastFragment.getNamespaceURI());
  }
  return elem;
}"
65626,"/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix || prefix.length() == 0) {
    return defaultNamespaceURI;
  }
  String uri=null;
  if (null != prefixesToNamespaces) {
    uri=prefixesToNamespaces.get(prefix);
  }
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  return null;
}","/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix || prefix.length() == 0) {
    return defaultNamespaceURI;
  }
  String uri=null;
  if (null != prefixesToNamespaces) {
    uri=prefixesToNamespaces.get(prefix);
  }
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  if (dom != null) {
    return XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(dom,prefix);
  }
  return null;
}"
65627,"private String resolveNamespaceURI(Node node,String uri){
  if (null == node) {
    return null;
  }
  if (uri.equals(node.getNamespaceURI())) {
    return node.getPrefix();
  }
  NamedNodeMap namedNodeMap=node.getAttributes();
  if (null != namedNodeMap) {
    int namedNodeMapSize=namedNodeMap.getLength();
    for (int x=0; x < namedNodeMapSize; x++) {
      Node attr=namedNodeMap.item(x);
      if (XMLConstants.XMLNS_URL.equals(attr.getNamespaceURI())) {
        if (uri.equals(attr.getNodeValue())) {
          return attr.getLocalName();
        }
      }
    }
  }
  return resolveNamespaceURI(node.getParentNode(),uri);
}","private String resolveNamespaceURI(Node node,String uri){
  if (null == node) {
    return null;
  }
  if (uri.equals(node.getNamespaceURI())) {
    return node.getPrefix();
  }
  NamedNodeMap namedNodeMap=node.getAttributes();
  if (null != namedNodeMap) {
    int namedNodeMapSize=namedNodeMap.getLength();
    for (int x=0; x < namedNodeMapSize; x++) {
      Node attr=namedNodeMap.item(x);
      if (XMLConstants.XMLNS_URL.equals(attr.getNamespaceURI())) {
        if (uri.equals(attr.getNodeValue())) {
          if (attr.getLocalName() != null && (!(attr.getLocalName().equals(XMLConstants.XMLNS)))) {
            return attr.getLocalName();
          }
 else {
            return ""String_Node_Str"";
          }
        }
      }
    }
  }
  return resolveNamespaceURI(node.getParentNode(),uri);
}"
65628,"/** 
 * Set an XmlAdapter on this Property.  The type, generic type and  original type will be set as required based on the XmlAdapter's marshal method return type and input parameters.
 * @param adapterCls
 */
public void setAdapterClass(JavaClass adapterCls){
  adapterClass=adapterCls;
  JavaClass newType=helper.getJavaClass(Object.class);
  ArrayList<JavaMethod> marshalMethods=new ArrayList<JavaMethod>();
  for (Iterator<JavaMethod> methodIt=adapterClass.getDeclaredMethods().iterator(); methodIt.hasNext(); ) {
    JavaMethod method=methodIt.next();
    if (method.getName().equals(MARSHAL_METHOD_NAME)) {
      JavaClass returnType=method.getReturnType();
      if (!returnType.getQualifiedName().equals(newType.getQualifiedName())) {
        newType=(JavaClass)method.getReturnType();
        setTypeFromAdapterClass(newType,method.getParameterTypes()[0]);
        return;
      }
      marshalMethods.add(method);
    }
  }
  if (marshalMethods.size() == 0) {
    setTypeFromAdapterClass(newType,null);
    return;
  }
  for (  JavaMethod method : marshalMethods) {
    JavaClass paramType=method.getParameterTypes()[0];
    if (!paramType.equals(newType)) {
      setTypeFromAdapterClass(newType,paramType);
      return;
    }
  }
  setTypeFromAdapterClass(newType,marshalMethods.get(0).getParameterTypes()[0]);
}","/** 
 * Set an XmlAdapter on this Property.  The type, generic type and  original type will be set as required based on the XmlAdapter's marshal method return type and input parameters.
 * @param adapterCls
 */
public void setAdapterClass(JavaClass adapterCls){
  adapterClass=adapterCls;
  JavaClass newType=helper.getJavaClass(Object.class);
  ArrayList<JavaMethod> marshalMethods=new ArrayList<JavaMethod>();
  for (Iterator<JavaMethod> methodIt=adapterClass.getDeclaredMethods().iterator(); methodIt.hasNext(); ) {
    JavaMethod method=methodIt.next();
    if (method.getName().equals(MARSHAL_METHOD_NAME)) {
      JavaClass returnType=method.getReturnType();
      if (!returnType.getQualifiedName().equals(newType.getQualifiedName())) {
        newType=(JavaClass)method.getReturnType();
        setTypeFromAdapterClass(newType,method.getParameterTypes()[0]);
        return;
      }
      marshalMethods.add(method);
    }
  }
  if (marshalMethods.size() == 0) {
    setTypeFromAdapterClass(newType,null);
    return;
  }
  for (  JavaMethod method : marshalMethods) {
    JavaClass paramType=method.getParameterTypes()[0];
    if (!paramType.getQualifiedName().equals(newType.getQualifiedName())) {
      setTypeFromAdapterClass(newType,paramType);
      return;
    }
  }
  setTypeFromAdapterClass(newType,marshalMethods.get(0).getParameterTypes()[0]);
}"
65629,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  marshalRecord.startCollection();
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
65630,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBInteger3DArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBInt2DArrayTestCases.class);
  suite.addTestSuite(JAXBIntListTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  suite.addTestSuite(JAXBListOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerEnumTestCases.class);
  suite.addTestSuite(JAXBByteArrayWithDataHandlerTestCases.class);
  suite.addTestSuite(JAXBMapOfInnerClassTestCases.class);
  suite.addTestSuite(MultiDimensionalArrayNonRootTestCases.class);
  suite.addTestSuite(MapNamespaceTestCases.class);
  suite.addTestSuite(JAXBArrayTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBBigDecimalStackTestCases.class);
  suite.addTestSuite(JAXBEmployeeArrayTestCases.class);
  suite.addTestSuite(JAXBEmployeeListTestCases.class);
  suite.addTestSuite(JAXBIntegerArrayTestCases.class);
  suite.addTestSuite(JAXBInteger3DArrayTestCases.class);
  suite.addTestSuite(JAXBIntegerListTestCases.class);
  suite.addTestSuite(JAXBIntegerMyListTestCases.class);
  suite.addTestSuite(JAXBIntegerLinkedListTestCases.class);
  suite.addTestSuite(JAXBIntArrayTestCases.class);
  suite.addTestSuite(JAXBInt2DArrayTestCases.class);
  suite.addTestSuite(JAXBIntListTestCases.class);
  suite.addTestSuite(JAXBCharArrayTestCases.class);
  suite.addTestSuite(JAXBBooleanArrayTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployeeTestCases.class);
  suite.addTestSuite(JAXBListNameCollisionEmployee2TestCases.class);
  suite.addTestSuite(JAXBEmployeesAndIntegersTestCases.class);
  suite.addTestSuite(JAXBStringIntegerHashMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeMapTestCases.class);
  suite.addTestSuite(JAXBStringEmployeeHashtableTestCases.class);
  suite.addTestSuite(JAXBListOfObjectsNonRootTestCases.class);
  suite.addTestSuite(JAXBObjectCollectionsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsTestCases.class);
  suite.addTestSuite(JAXBMultipleMapsNamespaceTestCases.class);
  suite.addTestSuite(JAXBTypedListTestCases.class);
  suite.addTestSuite(JAXBListOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerClassTestCases.class);
  suite.addTestSuite(JAXBArrayOfInnerEnumTestCases.class);
  suite.addTestSuite(JAXBByteArrayWithDataHandlerTestCases.class);
  suite.addTestSuite(JAXBMapOfInnerClassTestCases.class);
  suite.addTestSuite(MultiDimensionalArrayNonRootTestCases.class);
  suite.addTestSuite(MapNamespaceTestCases.class);
  suite.addTestSuite(JAXBArrayTestCases.class);
  suite.addTestSuite(NullIteratorListTestCases.class);
  suite.addTestSuite(NullSetsMapTestCases.class);
  return suite;
}"
65631,"public Object getAttributeValueFromObject(Object object) throws DescriptorException {
  Object value=nestedAccessor.getAttributeValueFromObject(object);
  if (null == value) {
    return null;
  }
  Object results=containerPolicy.containerInstance(((Map)value).size());
  Iterator iter=((Map)value).keySet().iterator();
  while (iter.hasNext()) {
    Object nextKey=iter.next();
    Object nextValue=((Map)value).get(nextKey);
    MapEntry nextEntry;
    try {
      nextEntry=(MapEntry)generatedEntryClass.newInstance();
    }
 catch (    Exception e) {
      return null;
    }
    nextEntry.setKey(nextKey);
    nextEntry.setValue(nextValue);
    containerPolicy.addInto(nextEntry,results,null);
  }
  return results;
}","public Object getAttributeValueFromObject(Object object) throws DescriptorException {
  Object value=nestedAccessor.getAttributeValueFromObject(object);
  if (null == value) {
    return null;
  }
  Object results=containerPolicy.containerInstance(((Map)value).size());
  Set<Entry> entrySet=((Map)value).entrySet();
  if (null == entrySet) {
    return results;
  }
  for (  Entry entry : entrySet) {
    MapEntry nextEntry;
    try {
      nextEntry=(MapEntry)generatedEntryClass.newInstance();
    }
 catch (    Exception e) {
      return null;
    }
    nextEntry.setKey(entry.getKey());
    nextEntry.setValue(entry.getValue());
    containerPolicy.addInto(nextEntry,results,null);
  }
  return results;
}"
65632,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    if (xmlAnyCollectionMapping.getConverter() != null) {
      objectValue=xmlAnyCollectionMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
65633,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65634,"@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(attributeValue);
  while (cp.hasNext(iterator)) {
    Object value=cp.next(iterator,session);
    if (null != converter) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
      }
 else {
        value=converter.convertObjectValueToDataValue(value,session);
      }
    }
    NodeValue associatedNodeValue=null;
    XMLField associatedField=null;
    Object fieldValue=value;
    if (value instanceof XMLRoot) {
      XMLRoot rootValue=(XMLRoot)value;
      String localName=rootValue.getLocalName();
      String namespaceUri=rootValue.getNamespaceURI();
      fieldValue=rootValue.getObject();
      associatedField=getFieldForName(localName,namespaceUri);
      if (associatedField == null) {
        associatedField=getClassToFieldMappings().get(fieldValue.getClass());
      }
    }
 else {
      associatedField=getClassToFieldMappings().get(value.getClass());
    }
    if (associatedField == null) {
      List<XMLField> sourceFields=classToSourceFieldsMappings.get(value.getClass());
      if (sourceFields != null && sourceFields.size() > 0) {
        DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(sourceFields.get(0));
        for (        XMLField next : sourceFields) {
          fieldValue=((XMLCollectionReferenceMapping)xmlMapping).buildFieldValue(value,next,session);
          XMLEntry entry=new XMLEntry();
          entry.setValue(fieldValue);
          entry.setXMLField(next);
          nestedRows.add(entry);
        }
      }
    }
 else {
      DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
      if (xmlMapping.isAbstractCompositeCollectionMapping()) {
        fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
      }
      XMLEntry entry=new XMLEntry();
      entry.setValue(fieldValue);
      entry.setXMLField(associatedField);
      nestedRows.add(entry);
    }
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}","@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=getAttributeValueFromObject(object);
  List<XMLEntry> nestedRows=new ArrayList<XMLEntry>();
  XMLRecord record=(XMLRecord)row;
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(attributeValue);
  if (null != iterator) {
    while (cp.hasNext(iterator)) {
      Object value=cp.next(iterator,session);
      if (null != converter) {
        if (converter instanceof XMLConverter) {
          value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,record.getMarshaller());
        }
 else {
          value=converter.convertObjectValueToDataValue(value,session);
        }
      }
      NodeValue associatedNodeValue=null;
      XMLField associatedField=null;
      Object fieldValue=value;
      if (value instanceof XMLRoot) {
        XMLRoot rootValue=(XMLRoot)value;
        String localName=rootValue.getLocalName();
        String namespaceUri=rootValue.getNamespaceURI();
        fieldValue=rootValue.getObject();
        associatedField=getFieldForName(localName,namespaceUri);
        if (associatedField == null) {
          associatedField=getClassToFieldMappings().get(fieldValue.getClass());
        }
      }
 else {
        associatedField=getClassToFieldMappings().get(value.getClass());
      }
      if (associatedField == null) {
        List<XMLField> sourceFields=classToSourceFieldsMappings.get(value.getClass());
        if (sourceFields != null && sourceFields.size() > 0) {
          DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(sourceFields.get(0));
          for (          XMLField next : sourceFields) {
            fieldValue=((XMLCollectionReferenceMapping)xmlMapping).buildFieldValue(value,next,session);
            XMLEntry entry=new XMLEntry();
            entry.setValue(fieldValue);
            entry.setXMLField(next);
            nestedRows.add(entry);
          }
        }
      }
 else {
        DatabaseMapping xmlMapping=(DatabaseMapping)this.choiceElementMappings.get(associatedField);
        if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          fieldValue=((XMLCompositeCollectionMapping)xmlMapping).buildCompositeRow(fieldValue,session,row,writeType);
        }
        XMLEntry entry=new XMLEntry();
        entry.setValue(fieldValue);
        entry.setXMLField(associatedField);
        nestedRows.add(entry);
      }
    }
  }
  ((DOMRecord)row).put(getFields(),nestedRows);
}"
65635,"/** 
 * INTERNAL:
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if (attributeValue == null) {
    row.put(this.getField(),null);
    return;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  Vector nestedRows=new Vector(cp.sizeFor(attributeValue));
  for (Object iter=cp.iteratorFor(attributeValue); cp.hasNext(iter); ) {
    Object element=cp.next(iter,session);
    if (hasConverter()) {
      if (getConverter() instanceof XMLConverter) {
        element=((XMLConverter)getConverter()).convertObjectValueToDataValue(element,session,((XMLRecord)row).getMarshaller());
      }
 else {
        element=getConverter().convertObjectValueToDataValue(element,session);
      }
    }
    if (element == null) {
      XMLNullRepresentationType nullRepresentation=getNullPolicy().getMarshalNullRepresentation();
      if (nullRepresentation == XMLNullRepresentationType.XSI_NIL) {
        nestedRows.add(XMLRecord.NIL);
      }
 else       if (nullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
        Node emptyNode=XPathEngine.getInstance().createUnownedElement(((XMLRecord)row).getDOM(),(XMLField)field);
        DOMRecord nestedRow=new DOMRecord(emptyNode);
        nestedRows.add(nestedRow);
      }
    }
 else {
      nestedRows.addElement(buildCompositeRow(element,session,row,writeType));
    }
  }
  Object fieldValue=null;
  if (!nestedRows.isEmpty()) {
    fieldValue=this.getDescriptor().buildFieldValueFromNestedRows(nestedRows,getStructureName(),session);
  }
  row.put(this.getField(),fieldValue);
}","/** 
 * INTERNAL:
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if (attributeValue == null) {
    row.put(this.getField(),null);
    return;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  Vector nestedRows=new Vector(cp.sizeFor(attributeValue));
  Object iter=cp.iteratorFor(attributeValue);
  if (null != iter) {
    while (cp.hasNext(iter)) {
      Object element=cp.next(iter,session);
      if (hasConverter()) {
        if (getConverter() instanceof XMLConverter) {
          element=((XMLConverter)getConverter()).convertObjectValueToDataValue(element,session,((XMLRecord)row).getMarshaller());
        }
 else {
          element=getConverter().convertObjectValueToDataValue(element,session);
        }
      }
      if (element == null) {
        XMLNullRepresentationType nullRepresentation=getNullPolicy().getMarshalNullRepresentation();
        if (nullRepresentation == XMLNullRepresentationType.XSI_NIL) {
          nestedRows.add(XMLRecord.NIL);
        }
 else         if (nullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
          Node emptyNode=XPathEngine.getInstance().createUnownedElement(((XMLRecord)row).getDOM(),(XMLField)field);
          DOMRecord nestedRow=new DOMRecord(emptyNode);
          nestedRows.add(nestedRow);
        }
      }
 else {
        nestedRows.addElement(buildCompositeRow(element,session,row,writeType));
      }
    }
  }
  Object fieldValue=null;
  if (!nestedRows.isEmpty()) {
    fieldValue=this.getDescriptor().buildFieldValueFromNestedRows(nestedRows,getStructureName(),session);
  }
  row.put(this.getField(),fieldValue);
}"
65636,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment != null && nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,value,schemaType);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.characters(schemaType,value,null,xmlCompositeDirectCollectionMapping.isCDATA());
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    return true;
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
      return true;
    }
  }
  return false;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment != null && nextFragment.isAttribute()) {
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.attribute(nextFragment,namespaceResolver,value,schemaType);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.characters(schemaType,value,null,xmlCompositeDirectCollectionMapping.isCDATA());
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    return true;
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
      return true;
    }
  }
  return false;
}"
65637,"@Override public DynamicEntity unmarshal(Object v) throws Exception {
  DynamicEntity link=(DynamicEntity)v;
  DynamicEntity address=jc.newDynamicEntity(""String_Node_Str"");
  StringTokenizer tokenizer=new StringTokenizer(link.get(""String_Node_Str"").toString(),""String_Node_Str"",false);
  String street=tokenizer.nextToken();
  street=street.substring(street.lastIndexOf(""String_Node_Str"") + 1);
  street=street.replace('_',' ');
  String city=tokenizer.nextToken();
  city=city.substring(city.lastIndexOf(""String_Node_Str"") + 1);
  String state=tokenizer.nextToken();
  state=state.substring(state.lastIndexOf(""String_Node_Str"") + 1);
  String zip=tokenizer.nextToken();
  zip=zip.substring(zip.lastIndexOf(""String_Node_Str"") + 1);
  address.set(""String_Node_Str"",street);
  address.set(""String_Node_Str"",city);
  address.set(""String_Node_Str"",state);
  address.set(""String_Node_Str"",zip);
  return address;
}","@Override public DynamicEntity unmarshal(Object v) throws Exception {
  DynamicEntity link=(DynamicEntity)v;
  DynamicEntity address=jc.newDynamicEntity(""String_Node_Str"");
  StringTokenizer tokenizer=new StringTokenizer(((Object)link.get(""String_Node_Str"")).toString(),""String_Node_Str"",false);
  String street=tokenizer.nextToken();
  street=street.substring(street.lastIndexOf(""String_Node_Str"") + 1);
  street=street.replace('_',' ');
  String city=tokenizer.nextToken();
  city=city.substring(city.lastIndexOf(""String_Node_Str"") + 1);
  String state=tokenizer.nextToken();
  state=state.substring(state.lastIndexOf(""String_Node_Str"") + 1);
  String zip=tokenizer.nextToken();
  zip=zip.substring(zip.lastIndexOf(""String_Node_Str"") + 1);
  address.set(""String_Node_Str"",street);
  address.set(""String_Node_Str"",city);
  address.set(""String_Node_Str"",state);
  address.set(""String_Node_Str"",zip);
  return address;
}"
65638,"/** 
 * INTERNAL: Build the nested collection from the database row.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  DOMRecord domRecord=(DOMRecord)row;
  Object fieldValue=domRecord.getValues(this.getField(),this.getNullPolicy());
  if (fieldValue == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(fieldValues.size());
  }
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    if (hasValueConverter()) {
      if (getValueConverter() instanceof XMLConverter) {
        element=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(element,executionSession,((XMLRecord)row).getUnmarshaller());
      }
 else {
        element=getValueConverter().convertDataValueToObjectValue(element,executionSession);
      }
    }
    cp.addInto(element,result,sourceQuery.getSession());
  }
  return result;
}","/** 
 * INTERNAL: Build the nested collection from the database row.
 */
public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed) throws DatabaseException {
  ContainerPolicy cp=this.getContainerPolicy();
  DOMRecord domRecord=(DOMRecord)row;
  Object fieldValue=domRecord.getValues(this.getField(),this.getNullPolicy());
  if (fieldValue == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Vector fieldValues=this.getDescriptor().buildDirectValuesFromFieldValue(fieldValue);
  if (fieldValues == null) {
    if (reuseContainer) {
      Object currentObject=((XMLRecord)row).getCurrentObject();
      Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
      return container != null ? container : cp.containerInstance();
    }
 else {
      return cp.containerInstance();
    }
  }
  Object result=null;
  if (reuseContainer) {
    Object currentObject=((XMLRecord)row).getCurrentObject();
    Object container=getAttributeAccessor().getAttributeValueFromObject(currentObject);
    result=container != null ? container : cp.containerInstance();
  }
 else {
    result=cp.containerInstance(fieldValues.size());
  }
  for (Enumeration stream=fieldValues.elements(); stream.hasMoreElements(); ) {
    Object element=stream.nextElement();
    if (hasValueConverter()) {
      if (getValueConverter() instanceof XMLConverter) {
        element=((XMLConverter)getValueConverter()).convertDataValueToObjectValue(element,executionSession,((XMLRecord)row).getUnmarshaller());
      }
 else {
        element=getValueConverter().convertDataValueToObjectValue(element,executionSession);
      }
    }
    if (element != null && element.getClass() == ClassConstants.STRING) {
      if (isCollapsingStringValues) {
        element=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)element);
      }
 else       if (isNormalizingStringValues) {
        element=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)element);
      }
    }
    cp.addInto(element,result,sourceQuery.getSession());
  }
  return result;
}"
65639,"/** 
 * {@inheritDoc}
 */
@Override protected void toParsedText(StringBuilder writer,boolean actual){
  if (hasExpression()) {
    expression.toParsedText(writer,actual);
  }
  if (hasExpression()) {
    writer.append(SPACE);
  }
  if (hasNot) {
    writer.append(actual ? notIdentifier : NOT);
    writer.append(SPACE);
  }
  writer.append(actual ? inIdentifier : IN);
  if (hasLeftParenthesis) {
    writer.append(LEFT_PARENTHESIS);
  }
 else   if (hasSpaceAfterIn) {
    writer.append(SPACE);
  }
  if (hasInItems()) {
    inItems.toParsedText(writer,actual);
  }
  if (hasRightParenthesis) {
    writer.append(RIGHT_PARENTHESIS);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void toParsedText(StringBuilder writer,boolean actual){
  if (hasExpression()) {
    expression.toParsedText(writer,actual);
    writer.append(SPACE);
  }
  if (hasNot) {
    writer.append(actual ? notIdentifier : NOT);
    writer.append(SPACE);
  }
  writer.append(actual ? inIdentifier : IN);
  if (hasLeftParenthesis) {
    writer.append(LEFT_PARENTHESIS);
  }
 else   if (hasSpaceAfterIn) {
    writer.append(SPACE);
  }
  if (hasInItems()) {
    inItems.toParsedText(writer,actual);
  }
  if (hasRightParenthesis) {
    writer.append(RIGHT_PARENTHESIS);
  }
}"
65640,"/** 
 * {@inheritDoc}
 */
@Override protected void parse(WordParser wordParser,boolean tolerant){
  hasNot=wordParser.startsWithIgnoreCase('N');
  if (hasNot) {
    notIdentifier=wordParser.moveForward(NOT);
    wordParser.skipLeadingWhitespace();
  }
  inIdentifier=wordParser.moveForward(IN);
  int count=wordParser.skipLeadingWhitespace();
  hasSpaceAfterIn=(count > 0);
  hasLeftParenthesis=wordParser.startsWith(LEFT_PARENTHESIS);
  if (hasLeftParenthesis) {
    wordParser.moveForward(1);
    count=wordParser.skipLeadingWhitespace();
  }
  inItems=parse(wordParser,getQueryBNF(InItemBNF.ID),tolerant);
  if (hasInItems()) {
    count=wordParser.skipLeadingWhitespace();
  }
  hasRightParenthesis=wordParser.startsWith(RIGHT_PARENTHESIS);
  if (hasRightParenthesis) {
    wordParser.moveForward(1);
  }
 else {
    wordParser.moveBackward(count);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void parse(WordParser wordParser,boolean tolerant){
  hasNot=wordParser.startsWithIgnoreCase('N');
  if (hasNot) {
    notIdentifier=wordParser.moveForward(NOT);
    wordParser.skipLeadingWhitespace();
  }
  inIdentifier=wordParser.moveForward(IN);
  int count=wordParser.skipLeadingWhitespace();
  hasSpaceAfterIn=(count > 0);
  hasLeftParenthesis=wordParser.startsWith(LEFT_PARENTHESIS);
  if (hasLeftParenthesis) {
    wordParser.moveForward(1);
    count=wordParser.skipLeadingWhitespace();
  }
  inItems=parse(wordParser,getQueryBNF(InItemBNF.ID),tolerant);
  if (hasInItems()) {
    count=wordParser.skipLeadingWhitespace();
  }
  hasRightParenthesis=wordParser.startsWith(RIGHT_PARENTHESIS);
  if (hasRightParenthesis) {
    wordParser.moveForward(1);
  }
}"
65641,"/** 
 * {@inheritDoc}
 */
@Override protected void addOrderedChildrenTo(List<StringExpression> children){
  if (expression != null) {
    children.add(expression);
  }
  if (hasNot) {
    children.add(buildStringExpression(SPACE));
    children.add(buildStringExpression(NOT));
  }
 else   if (hasExpression()) {
    children.add(buildStringExpression(SPACE));
  }
  children.add(buildStringExpression(IN));
  if (hasLeftParenthesis) {
    children.add(buildStringExpression(LEFT_PARENTHESIS));
  }
 else   if (hasInItems()) {
    children.add(buildStringExpression(SPACE));
  }
  if (inItems != null) {
    children.add(inItems);
  }
  if (hasRightParenthesis) {
    children.add(buildStringExpression(RIGHT_PARENTHESIS));
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void addOrderedChildrenTo(List<StringExpression> children){
  if (hasExpression()) {
    children.add(expression);
    children.add(buildStringExpression(SPACE));
  }
  if (hasNot) {
    children.add(buildStringExpression(NOT));
  }
  children.add(buildStringExpression(IN));
  if (hasLeftParenthesis) {
    children.add(buildStringExpression(LEFT_PARENTHESIS));
  }
 else   if (hasSpaceAfterIn) {
    children.add(buildStringExpression(SPACE));
  }
  if (hasInItems()) {
    children.add(inItems);
  }
  if (hasRightParenthesis) {
    children.add(buildStringExpression(RIGHT_PARENTHESIS));
  }
}"
65642,"/** 
 * Determines whether the declaration contains <b>JOIN</b> expressions. This can be <code>true</code> only when   {@link #isRange()} returns <code>true</code>. A collectionmember declaration does not have <b>JOIN</b> expressions.
 * @return <code>true</code> if at least one <b>JOIN</b> expression was parsed; otherwise<code>false</code>
 */
boolean hasJoins(){
  return joins != null;
}","/** 
 * Determines whether the declaration contains <b>JOIN</b> expressions.
 * @return <code>true</code> if at least one <b>JOIN</b> expression was parsed; otherwise<code>false</code>
 */
boolean hasJoins(){
  return joins != null;
}"
65643,"private void visitAbstractSelectStatement(AbstractSelectStatement expression){
  expression.getFromClause().accept(this);
  expression.getSelectClause().accept(this);
  if (expression.hasWhereClause()) {
    expression.getWhereClause().accept(this);
  }
  if (expression.hasGroupByClause()) {
    expression.getGroupByClause().accept(this);
  }
  if (expression.hasHavingClause()) {
    expression.getHavingClause().accept(this);
  }
}","void visitAbstractSelectStatement(AbstractSelectStatement expression){
  expression.getFromClause().accept(this);
  expression.getSelectClause().accept(this);
  if (expression.hasWhereClause()) {
    expression.getWhereClause().accept(this);
  }
  if (expression.hasGroupByClause()) {
    expression.getGroupByClause().accept(this);
  }
  if (expression.hasHavingClause()) {
    expression.getHavingClause().accept(this);
  }
}"
65644,"private void visitAbstractSelectClause(AbstractSelectClause expression){
  ObjectLevelReadQuery query=queryContext.getDatabaseQuery();
  if (expression.hasDistinct() && !hasNotCountFunction(expression)) {
    query.useDistinct();
  }
  boolean buildNullForNullPK=hasOneToOneSelected(expression);
  query.setShouldBuildNullForNullPk(buildNullForNullPK);
}","void visitAbstractSelectClause(AbstractSelectClause expression){
  if (expression.hasDistinct() && !hasNotCountFunction(expression)) {
    query.useDistinct();
  }
  boolean buildNullForNullPK=hasOneToOneSelected(expression);
  query.setShouldBuildNullForNullPk(buildNullForNullPK);
}"
65645,"private void visitAbstractFromClause(AbstractFromClause expression){
  ObjectLevelReadQuery query=queryContext.getDatabaseQuery();
  Expression baseExpression=queryContext.getBaseExpression();
  ExpressionBuilder expressionBuilder=baseExpression.getBuilder();
  query.setExpressionBuilder(expressionBuilder);
  if (query.getReferenceClass() == null) {
    query.setReferenceClass(expressionBuilder.getQueryClass());
    query.changeDescriptor(queryContext.getSession());
  }
}","void visitAbstractFromClause(AbstractFromClause expression){
  Expression baseExpression=queryContext.getBaseExpression();
  ExpressionBuilder expressionBuilder=baseExpression.getBuilder();
  query.setExpressionBuilder(expressionBuilder);
  if (query.getReferenceClass() == null) {
    query.setReferenceClass(expressionBuilder.getQueryClass());
    query.changeDescriptor(queryContext.getSession());
  }
}"
65646,"/** 
 * {@inheritDoc}
 */
@Override public void visit(OrderByItem expression){
  Expression queryExpression=null;
  queryExpression=queryContext.buildExpression(expression.getExpression());
  if (expression.getOrdering() == Ordering.DESC) {
    getDatabaseQuery().addOrdering(queryExpression.descending());
  }
 else {
    getDatabaseQuery().addOrdering(queryExpression.ascending());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void visit(OrderByItem expression){
  Expression queryExpression=queryContext.buildExpression(expression.getExpression());
  if (expression.getOrdering() == Ordering.DESC) {
    query.addOrdering(queryExpression.descending());
  }
 else {
    query.addOrdering(queryExpression.ascending());
  }
}"
65647,"public RootWithCompositeObjectTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{Employee.class,Address.class,PhoneNumber.class});
  setControlDocument(""String_Node_Str"");
  setControlJSON(""String_Node_Str"");
  expectedMarshalEvents=new ArrayList();
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_BEFORE_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.ADDRESS_BEFORE_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.ADDRESS_AFTER_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_AFTER_MARSHAL);
  expectedUnmarshalEvents=new ArrayList();
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_BEFORE_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_BEFORE_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_AFTER_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_AFTER_UNMARSHAL);
  expectedClassBasedUnmarshalEvents=new ArrayList();
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_BEFORE_UNMARSHAL);
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_AFTER_UNMARSHAL);
  expectedClassBasedMarshalEvents=new ArrayList();
  expectedClassBasedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_BEFORE_MARSHAL);
  expectedClassBasedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_AFTER_MARSHAL);
}","public RootWithCompositeObjectTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{Employee.class});
  setControlDocument(""String_Node_Str"");
  setControlJSON(""String_Node_Str"");
  expectedMarshalEvents=new ArrayList();
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_BEFORE_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.ADDRESS_BEFORE_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.ADDRESS_AFTER_MARSHAL);
  expectedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_AFTER_MARSHAL);
  expectedUnmarshalEvents=new ArrayList();
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_BEFORE_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_BEFORE_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_AFTER_UNMARSHAL);
  expectedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_AFTER_UNMARSHAL);
  expectedClassBasedUnmarshalEvents=new ArrayList();
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_BEFORE_UNMARSHAL);
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_BEFORE_UNMARSHAL);
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.ADDRESS_AFTER_UNMARSHAL);
  expectedClassBasedUnmarshalEvents.add(JAXBUnmarshalListenerImpl.EMPLOYEE_AFTER_UNMARSHAL);
  expectedClassBasedMarshalEvents=new ArrayList();
  expectedClassBasedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_BEFORE_MARSHAL);
  expectedClassBasedMarshalEvents.add(JAXBMarshalListenerImpl.EMPLOYEE_AFTER_MARSHAL);
}"
65648,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null) {
          concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
        }
 else {
          XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
          concreteClass=(Class)this.classIndicatorMapping.get(qname);
        }
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  if (indicator == null) {
    return null;
  }
  Class concreteClass;
  if (indicator instanceof String) {
    String indicatorValue=(String)indicator;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null) {
          concreteClass=(Class)this.classIndicatorMapping.get(new XPathQName(((XMLRecord)rowFromDatabase).getNamespaceResolver().getDefaultNamespaceURI(),indicatorValue,namespaceAware));
        }
 else {
          XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
          concreteClass=(Class)this.classIndicatorMapping.get(qname);
        }
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(indicator);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(indicator,getDescriptor());
  }
  return concreteClass;
}"
65649,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1 && namespaceResolver != null) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65650,"/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return null;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigDecimal(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigDecimal(sourceObject);
}","/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return null;
    }
  }
  return super.convertObjectToBigDecimal(sourceObject);
}"
65651,"public Map<String,String> getPrefixesToNamespaces(){
  return prefixesToNamespaces;
}","public Map<String,String> getPrefixesToNamespaces(){
  if (null == prefixesToNamespaces) {
    prefixesToNamespaces=new HashMap<String,String>();
  }
  return prefixesToNamespaces;
}"
65652,"/** 
 * INTERNAL: Returns a Vector of of Namespace objects in the current Namespace Resolver Used for deployment XML
 * @return  A Vector containing the namespace URIs in the namespace resolver
 */
public Vector getNamespaces(){
  Vector names=new Vector(prefixesToNamespaces.size());
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    Namespace namespace=new Namespace(entry.getKey(),entry.getValue());
    names.addElement(namespace);
  }
  return names;
}","/** 
 * INTERNAL: Returns a Vector of of Namespace objects in the current Namespace Resolver Used for deployment XML
 * @return  A Vector containing the namespace URIs in the namespace resolver
 */
public Vector getNamespaces(){
  if (!hasPrefixesToNamespaces()) {
    return new Vector(0);
  }
  Vector names=new Vector(prefixesToNamespaces.size());
  for (  Entry<String,String> entry : prefixesToNamespaces.entrySet()) {
    Namespace namespace=new Namespace(entry.getKey(),entry.getValue());
    names.addElement(namespace);
  }
  return names;
}"
65653,"public void removeNamespace(String prefix){
  prefixesToNamespaces.remove(prefix);
}","public void removeNamespace(String prefix){
  if (null != prefixesToNamespaces) {
    prefixesToNamespaces.remove(prefix);
  }
}"
65654,"/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  if (null == prefix || 0 == prefix.length()) {
    defaultNamespaceURI=namespaceURI;
  }
 else {
    prefixesToNamespaces.put(prefix,namespaceURI.intern());
  }
}","/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  if (null == prefix || 0 == prefix.length()) {
    defaultNamespaceURI=namespaceURI;
  }
 else {
    getPrefixesToNamespaces().put(prefix,namespaceURI.intern());
  }
}"
65655,"/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix || prefix.length() == 0) {
    return defaultNamespaceURI;
  }
  String uri=prefixesToNamespaces.get(prefix);
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  return null;
}","/** 
 * Returns the namespace URI associated with a specified namespace prefix
 * @param prefix The prefix to lookup a namespace URI for
 * @return The namespace URI associated with the specified prefix
 */
public String resolveNamespacePrefix(String prefix){
  if (null == prefix || prefix.length() == 0) {
    return defaultNamespaceURI;
  }
  String uri=null;
  if (null != prefixesToNamespaces) {
    uri=prefixesToNamespaces.get(prefix);
  }
  if (null != uri) {
    return uri;
  }
 else   if (XMLConstants.XML_NAMESPACE_PREFIX.equals(prefix)) {
    return XMLConstants.XML_NAMESPACE_URL;
  }
 else   if (XMLConstants.XMLNS.equals(prefix)) {
    return XMLConstants.XMLNS_URL;
  }
  return null;
}"
65656,"public boolean hasMoreElements(){
  return iterator.hasNext();
}","public boolean hasMoreElements(){
  if (null == iterator) {
    return false;
  }
  return iterator.hasNext();
}"
65657,"/** 
 * Default constructor, creates a new NamespaceResolver.
 */
public NamespaceResolver(){
  super();
  prefixesToNamespaces=new HashMap<String,String>();
}","/** 
 * Default constructor, creates a new NamespaceResolver.
 */
public NamespaceResolver(){
  super();
}"
65658,"/** 
 * Returns the list of prefixes in the NamespaceResolver
 * @return An Enumeration containing the prefixes in the NamespaceResolver
 */
public Enumeration getPrefixes(){
  return new IteratorEnumeration(prefixesToNamespaces.keySet().iterator());
}","/** 
 * Returns the list of prefixes in the NamespaceResolver
 * @return An Enumeration containing the prefixes in the NamespaceResolver
 */
public Enumeration getPrefixes(){
  if (hasPrefixesToNamespaces()) {
    return new IteratorEnumeration(getPrefixesToNamespaces().keySet().iterator());
  }
 else {
    return new IteratorEnumeration(null);
  }
}"
65659,"/** 
 * INTERNAL: Add the namespace declarations to the XML document.
 * @param namespaceResolver The NamespaceResolver contains the namespaceprefix and URI pairings that need to be declared.
 */
public void namespaceDeclarations(NamespaceResolver namespaceResolver){
  if (namespaceResolver == null) {
    return;
  }
  String namespaceURI=namespaceResolver.getDefaultNamespaceURI();
  if (null != namespaceURI) {
    attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.XMLNS,namespaceURI);
  }
  for (  Entry<String,String> entry : namespaceResolver.getPrefixesToNamespaces().entrySet()) {
    String namespacePrefix=entry.getKey();
    attribute(XMLConstants.XMLNS_URL,namespacePrefix,XMLConstants.XMLNS + XMLConstants.COLON + namespacePrefix,entry.getValue());
  }
}","/** 
 * INTERNAL: Add the namespace declarations to the XML document.
 * @param namespaceResolver The NamespaceResolver contains the namespaceprefix and URI pairings that need to be declared.
 */
public void namespaceDeclarations(NamespaceResolver namespaceResolver){
  if (namespaceResolver == null) {
    return;
  }
  String namespaceURI=namespaceResolver.getDefaultNamespaceURI();
  if (null != namespaceURI) {
    attribute(XMLConstants.XMLNS_URL,XMLConstants.XMLNS,XMLConstants.XMLNS,namespaceURI);
  }
  if (namespaceResolver.hasPrefixesToNamespaces()) {
    for (    Entry<String,String> entry : namespaceResolver.getPrefixesToNamespaces().entrySet()) {
      String namespacePrefix=entry.getKey();
      attribute(XMLConstants.XMLNS_URL,namespacePrefix,XMLConstants.XMLNS + XMLConstants.COLON + namespacePrefix,entry.getValue());
    }
  }
}"
65660,"/** 
 * Retrieves the width taken by the check box icon including the gap between the icon and the text.
 * @return The size of the icon and the gap
 */
public static int checkBoxIconWidth(){
  if (checkBoxIconWidth == -1) {
    Icon icon=(Icon)UIManager.get(""String_Node_Str"");
    checkBoxIconWidth=(icon != null) ? icon.getIconWidth() : 0;
    Integer gap=(Integer)UIManager.get(""String_Node_Str"");
    checkBoxIconWidth+=(gap != null) ? gap.intValue() + 4 : 4;
  }
  return checkBoxIconWidth;
}","/** 
 * Retrieves the width taken by the check box icon including the gap between the icon and the text.
 * @return The size of the icon and the gap
 */
public static int checkBoxIconWidth(){
  if (checkBoxIconWidth == -1) {
    Icon icon=checkBoxIcon();
    checkBoxIconWidth=(icon != null) ? icon.getIconWidth() : 0;
    checkBoxIconWidth+=checkBoxTextIconGap();
    checkBoxIconWidth+=new JCheckBox().getInsets().left;
  }
  return checkBoxIconWidth;
}"
65661,"@Override protected Object getControlObject(){
  boolean includeSysId=false;
  if (this.getName().endsWith(""String_Node_Str"")) {
    includeSysId=true;
  }
  Data d=new Data();
  d.key=""String_Node_Str"";
  d.data1=""String_Node_Str"";
  d.data2=""String_Node_Str"";
  d.data3=""String_Node_Str"";
  d.locator=new TestLocator(15,89,includeSysId);
  SubData sd1=new DetailData();
  sd1.info=""String_Node_Str"";
  sd1.setLoc(new TestLocator(20,35,includeSysId));
  d.subData.add(sd1);
  SubData sd2=new SubData();
  sd2.info=""String_Node_Str"";
  sd2.setLoc(new TestLocator(30,26,includeSysId));
  d.subData.add(sd2);
  SubData sd3=new LeafData();
  sd3.info=""String_Node_Str"";
  sd3.setLoc(new TestLocator(32,33,includeSysId));
  d.subData.add(sd3);
  if (this.getName().endsWith(""String_Node_Str"") || this.getName().endsWith(""String_Node_Str"")) {
    TestLocator noLoc=new TestLocator(0,0,false);
    d.locator=noLoc;
    sd1.setLoc(noLoc);
    sd2.setLoc(noLoc);
    sd3.setLoc(noLoc);
  }
  return d;
}","@Override protected Object getControlObject(){
  boolean includeSysId=false;
  if (this.getName().endsWith(""String_Node_Str"")) {
    includeSysId=true;
  }
  Data d=new Data();
  d.key=""String_Node_Str"";
  d.data1=""String_Node_Str"";
  d.data2=""String_Node_Str"";
  d.data3=""String_Node_Str"";
  d.locator=new TestLocator(15,89,29,includeSysId);
  SubData sd1=new DetailData();
  sd1.info=""String_Node_Str"";
  sd1.setLoc(new TestLocator(20,35,4,includeSysId));
  d.subData.add(sd1);
  SubData sd2=new SubData();
  sd2.info=""String_Node_Str"";
  sd2.setLoc(new TestLocator(30,26,17,includeSysId));
  d.subData.add(sd2);
  SubData sd3=new LeafData();
  sd3.info=""String_Node_Str"";
  sd3.setLoc(new TestLocator(32,33,4,includeSysId));
  d.subData.add(sd3);
  if (this.getName().endsWith(""String_Node_Str"") || this.getName().endsWith(""String_Node_Str"")) {
    TestLocator noLoc=new TestLocator(0,0,0,false);
    d.locator=noLoc;
    sd1.setLoc(noLoc);
    sd2.setLoc(noLoc);
    sd3.setLoc(noLoc);
  }
  return d;
}"
65662,"public TestLocator(int l,int c,boolean sysId){
  this.includeSysId=sysId;
  URL url=ClassLoader.getSystemClassLoader().getResource(XML_RESOURCE);
  this.controlSysId=url.toExternalForm();
  this.line=l;
  this.column=c;
}","public TestLocator(int l,int c,int alt,boolean sysId){
  this.includeSysId=sysId;
  URL url=ClassLoader.getSystemClassLoader().getResource(XML_RESOURCE);
  this.controlSysId=url.toExternalForm();
  this.line=l;
  this.column=c;
  this.alternateColumn=alt;
}"
65663,"public Object convertObjectToSource(Object obj){
  if (obj instanceof Source) {
    return obj;
  }
  if (obj instanceof DataHandler) {
    try {
      Source source=(Source)((DataHandler)obj).getContent();
      return source;
    }
 catch (    Exception ex) {
    }
  }
 else   if (obj instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])obj);
    return new StreamSource(stream);
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    ByteArrayInputStream stream=new ByteArrayInputStream(bytes);
    return new StreamSource(stream);
  }
  return null;
}","public Object convertObjectToSource(Object obj){
  if (obj == null) {
    return null;
  }
  if (obj instanceof Source) {
    return obj;
  }
  if (obj.getClass() == ClassConstants.STRING) {
    return new StreamSource(new StringReader((String)obj));
  }
  if (obj instanceof DataHandler) {
    try {
      InputStream object=((DataHandler)obj).getInputStream();
      return new StreamSource(object);
    }
 catch (    Exception ex) {
      try {
        Object object=((DataHandler)obj).getContent();
        convertObjectToSource(object);
      }
 catch (      Exception ioException) {
        throw ConversionException.couldNotBeConverted(obj,Source.class);
      }
    }
  }
 else   if (obj instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])obj);
    return new StreamSource(stream);
  }
 else   if (obj instanceof Byte[]) {
    Byte[] objectBytes=(Byte[])obj;
    byte[] bytes=new byte[objectBytes.length];
    for (int i=0; i < objectBytes.length; i++) {
      bytes[i]=objectBytes[i].byteValue();
    }
    ByteArrayInputStream stream=new ByteArrayInputStream(bytes);
    return new StreamSource(stream);
  }
 else   if (obj instanceof InputStream) {
    return new StreamSource((InputStream)obj);
  }
  return null;
}"
65664,"protected void reportElementEvents(Element elem) throws SAXException {
  this.currentNode=elem;
  IndexedAttributeList attributes=buildAttributeList(elem);
  String qname;
  String lname=elem.getLocalName();
  if (lname == null) {
    lname=elem.getNodeName();
    qname=lname;
    handlePrefixedAttribute(elem);
  }
 else {
    qname=getQName(elem);
  }
  contentHandler.startElement(elem.getNamespaceURI(),lname,qname,attributes);
  handleChildNodes(elem.getChildNodes());
  contentHandler.endElement(elem.getNamespaceURI(),lname,qname);
  endPrefixMappings(elem);
}","protected void reportElementEvents(Element elem) throws SAXException {
  this.currentNode=elem;
  IndexedAttributeList attributes=buildAttributeList(elem);
  String qname;
  String lname=elem.getLocalName();
  if (lname == null) {
    lname=elem.getNodeName();
    qname=lname;
    handlePrefixedAttribute(elem);
  }
 else {
    qname=getQName(elem);
  }
  String namespaceUri=elem.getNamespaceURI();
  if (namespaceUri == null) {
    namespaceUri=""String_Node_Str"";
  }
  contentHandler.startElement(namespaceUri,lname,qname,attributes);
  handleChildNodes(elem.getChildNodes());
  contentHandler.endElement(namespaceUri,lname,qname);
  endPrefixMappings(elem);
}"
65665,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefInheritanceTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.EnumSwitchTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyCompositeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.hashcode.BinderWithHashCodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefInheritanceTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.EnumSwitchTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyCompositeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.hashcode.BinderWithHashCodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  return suite;
}"
65666,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType=null;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode() && marshalRecord.supportsSingleNode()) {
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    XPathFragment textXPathFragment=null;
    if (xPathFragment.nameIsText() && marshalRecord.getTextWrapperFragment() != null && xPathFragment.getXMLField().getXPathFragment() == xPathFragment) {
      textXPathFragment=marshalRecord.getTextWrapperFragment();
    }
    if (textXPathFragment != null) {
      marshalRecord.openStartElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    if (textXPathFragment != null) {
      marshalRecord.endElement(textXPathFragment,namespaceResolver);
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65667,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    xmlRootFrag=((XMLRoot)objectValue).getRootFragment();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  marshalRecord.closeStartGroupingElements(groupingFragment);
  if (xmlRootFrag != null) {
    xPathFragment=xmlRootFrag;
  }
  if (!xPathFragment.isSelfFragment) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    marshalRecord.closeStartElement();
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof XMLRoot) {
    xmlRootFrag=((XMLRoot)objectValue).getRootFragment();
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlBinaryDataMapping.getConverter() != null) {
    Converter converter=xmlBinaryDataMapping.getConverter();
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (objectValue == null) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (!xPathFragment.isAttribute()) {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((XMLField)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == ClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,this.xmlBinaryDataMapping.getMimeType(object),localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
      if (c_id == null) {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
      }
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      marshalRecord.characters(value);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        String value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
        marshalRecord.characters(value);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=XMLConstants.XOP_PREFIX;
          namespaceResolver=new NamespaceResolver();
          namespaceResolver.put(xopPrefix,XMLConstants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(XMLConstants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(XMLConstants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.attribute(XMLConstants.XMLNS_URL,xopPrefix,XMLConstants.XMLNS + XMLConstants.COLON + xopPrefix,XMLConstants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      String value=XMLConstants.EMPTY_STRING;
      if ((objectValue.getClass() == ClassConstants.ABYTE) || (objectValue.getClass() == ClassConstants.APBYTE)) {
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      }
 else {
        bytes=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object)).getData();
        value=getValueToWrite(((XMLField)xmlBinaryDataMapping.getField()).getSchemaType(),bytes,session);
      }
      marshalRecord.characters(value);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65668,"public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containersMap=new HashMap(containerValues.size());
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        Object containerInstance=null;
        if (containerValue.getReuseContainer()) {
          containerInstance=containerValue.getMapping().getAttributeAccessor().getAttributeValueFromObject(object);
        }
        if (null == containerInstance) {
          containerInstance=containerValue.getContainerInstance();
        }
        containersMap.put(containerValue,containerInstance);
        if (containerValue.getMapping() instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)containerValue;
          for (          NodeValue next : nodeValue.getAllNodeValues()) {
            NodeValue nestedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)next).getChoiceElementNodeValue();
            containersMap.put((ContainerValue)nestedNodeValue,containerInstance);
          }
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void initializeRecord(XMLMapping selfRecordMapping) throws SAXException {
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    Object object=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (object == null) {
      object=treeObjectBuilder.buildNewInstance();
    }
    this.setCurrentObject(object);
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(object,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(object,parentRecord.getCurrentObject());
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(object,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(object,parentRecord.getCurrentObject(),selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      containersMap=new HashMap(containerValues.size());
      for (int x=0, containerValuesSize=containerValues.size(); x < containerValuesSize; x++) {
        ContainerValue containerValue=(ContainerValue)containerValues.get(x);
        Object containerInstance=null;
        if (containerValue.getReuseContainer() && !(containerValue.getMapping().getAttributeAccessor().isReadOnly())) {
          containerInstance=containerValue.getMapping().getAttributeAccessor().getAttributeValueFromObject(object);
        }
        if (null == containerInstance) {
          containerInstance=containerValue.getContainerInstance();
        }
        containersMap.put(containerValue,containerInstance);
        if (containerValue.getMapping() instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)containerValue;
          for (          NodeValue next : nodeValue.getAllNodeValues()) {
            NodeValue nestedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)next).getChoiceElementNodeValue();
            containersMap.put((ContainerValue)nestedNodeValue,containerInstance);
          }
        }
      }
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        XPathNode selfNode=xPathNode.getSelfChildren().get(x);
        if (null != selfNode.getNodeValue()) {
          selfRecords.add(selfNode.getNodeValue().buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65669,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(XMLConstants.COLON);
    if (index == -1) {
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
      if (uri == null) {
        concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
      }
 else {
        QName qname=new QName(uri,indicatorValue);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        QName qname=new QName(uri,localPart);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  Object classFieldValue=session.getDatasourcePlatform().getConversionManager().convertObject(indicator,getClassIndicatorField().getType());
  if (classFieldValue == null) {
    return null;
  }
  Class concreteClass;
  if (classFieldValue instanceof String) {
    String indicatorValue=(String)classFieldValue;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null) {
          concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
        }
 else {
          XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
          concreteClass=(Class)this.classIndicatorMapping.get(qname);
        }
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(classFieldValue);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(classFieldValue,getDescriptor());
  }
  return concreteClass;
}"
65670,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        QName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new QName(uri,localPart);
        }
 else {
          if (namespaceResolver != null) {
            qname=new QName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue);
          }
 else {
            qname=new QName(indicatorValue);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new XPathQName(uri,localPart,true);
        }
 else {
          if (namespaceResolver != null) {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
 else {
            qname=new XPathQName(indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65671,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  XMLDescriptor descriptor;
  TreeObjectBuilder objectBuilder;
  AbstractSession childSession;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((XMLRoot)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getXMLContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(XMLDescriptor)childSession.getDescriptor(value);
    objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,value);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
      marshalRecord.endElement(rootFragment,namespaceResolver);
    }
  }
  return true;
}"
65672,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.getUnmarshaller().isNamespaceAware());
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware());
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
65673,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlAnyObjectMapping.getConverter() != null) {
    objectValue=xmlAnyObjectMapping.getConverter().convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  }
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof XMLRoot)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((XMLRoot)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    Session childSession=null;
    try {
      childSession=marshaller.getXMLContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    XMLDescriptor descriptor=(XMLDescriptor)childSession.getDescriptor(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,descriptor,(XMLField)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null,WriteType.UNDEFINED);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
    }
  }
  return true;
}"
65674,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    Object childObject=childRecord.getCurrentObject();
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.getUnmarshaller().isNamespaceAware());
        workingDescriptor=null;
      }
    }
    if (xmlAnyObjectMapping.getConverter() != null) {
      childObject=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
    unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyObjectMapping,xmlAnyObjectMapping.getConverter(),unmarshalRecord,false,null);
    }
 else {
      if (xmlAnyObjectMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyObjectMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    Object childObject=childRecord.getCurrentObject();
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware());
        workingDescriptor=null;
      }
    }
    if (xmlAnyObjectMapping.getConverter() != null) {
      childObject=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
    unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyObjectMapping,xmlAnyObjectMapping.getConverter(),unmarshalRecord,false,null);
    }
 else {
      if (xmlAnyObjectMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyObjectMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
65675,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeCollectionMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
      getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
    }
 else {
      XMLField xmlFld=(XMLField)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
65676,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((XMLField)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((XMLDescriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + XMLConstants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (((xmlDescriptor == null) && (policy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT)) || (policy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    if (xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      boolean isNull=xmlCompositeObjectMapping.getNullPolicy().valueIsNull(atts);
      if (isNull) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        XMLField xmlFld=(XMLField)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
65677,"public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          QName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    XMLDescriptor xmlDescriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          XPathQName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      TreeObjectBuilder stob2=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
      UnmarshalRecord childRecord=(UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
65678,"/** 
 * Update the string value for the xsi:type attribute to use the prefix from the current record if possible
 */
private String updateTypeValue(String schemaContext,NamespaceResolver oldNsResolver,XMLRecord record,boolean addToNamespaceResolver){
  if (schemaContext == null) {
    return null;
  }
  NamespaceResolver newNsResolver=record.getNamespaceResolver();
  int idx=schemaContext.lastIndexOf(""String_Node_Str"");
  if (idx > -1) {
    schemaContext=schemaContext.substring(idx + 1);
  }
  idx=schemaContext.indexOf(XMLConstants.COLON);
  String localPart=null;
  if (idx != -1) {
    String prefix=schemaContext.substring(0,idx);
    localPart=schemaContext.substring(idx + 1);
    String uri=oldNsResolver.resolveNamespacePrefix(prefix);
    String newUri=newNsResolver.resolveNamespacePrefix(prefix);
    if (uri != null && (newUri == null || !(newUri.equals(uri)))) {
      prefix=newNsResolver.resolveNamespaceURI(uri);
      if (prefix == null) {
        String defaultUri=record.getNamespaceResolver().getDefaultNamespaceURI();
        if (defaultUri != null && defaultUri.equals(uri)) {
          return localPart;
        }
        prefix=newNsResolver.generatePrefix();
        writeNamespace(record,prefix,uri,addToNamespaceResolver);
      }
    }
    return prefix + XMLConstants.COLON + localPart;
  }
 else {
    return schemaContext;
  }
}","/** 
 * Update the string value for the xsi:type attribute to use the prefix from the current record if possible
 */
private String updateTypeValue(String schemaContext,NamespaceResolver oldNsResolver,XMLRecord record,boolean addToNamespaceResolver){
  if (schemaContext == null) {
    return null;
  }
  NamespaceResolver newNsResolver=record.getNamespaceResolver();
  int idx=schemaContext.lastIndexOf(""String_Node_Str"");
  if (idx > -1) {
    schemaContext=schemaContext.substring(idx + 1);
  }
  idx=schemaContext.indexOf(XMLConstants.COLON);
  String localPart=null;
  if (idx != -1) {
    String prefix=schemaContext.substring(0,idx);
    localPart=schemaContext.substring(idx + 1);
    String uri=oldNsResolver.resolveNamespacePrefix(prefix);
    String newUri=newNsResolver.resolveNamespacePrefix(prefix);
    if (!record.isNamespaceAware()) {
      return localPart;
    }
    if (uri != null && (newUri == null || !(newUri.equals(uri)))) {
      prefix=newNsResolver.resolveNamespaceURI(uri);
      if (prefix == null) {
        String defaultUri=record.getNamespaceResolver().getDefaultNamespaceURI();
        if (defaultUri != null && defaultUri.equals(uri)) {
          return localPart;
        }
        prefix=newNsResolver.generatePrefix();
        writeNamespace(record,prefix,uri,addToNamespaceResolver);
      }
    }
    return prefix + record.getNamespaceSeparator() + localPart;
  }
 else {
    return schemaContext;
  }
}"
65679,"/** 
 * INTERNAL: Override the parent's buildObject to allow for the caching of aggregate objects in OX. By caching aggregates along with XML Nodes that they were created from, we are able to preserve the structure and unmapped content of the document that was used to create these objects.
 */
@Override public Object buildObject(ObjectBuildingQuery query,AbstractRecord databaseRow,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  XMLRecord row=(XMLRecord)databaseRow;
  row.setSession(query.getSession());
  XMLUnmarshaller unmarshaller=row.getUnmarshaller();
  Object parent=row.getOwningObject();
  Object pk=extractPrimaryKeyFromRow(databaseRow,query.getSession());
  if (!(isXmlDescriptor() || getDescriptor().isDescriptorTypeAggregate())) {
    return super.buildObject(query,databaseRow,joinManager);
  }
  query.getSession().startOperationProfile(SessionProfiler.ObjectBuilding,query,SessionProfiler.ALL);
  ClassDescriptor concreteDescriptor=getDescriptor();
  Object domainObject=null;
  if (concreteDescriptor.hasInheritance() && (parent == null)) {
    Class classValue=concreteDescriptor.getInheritancePolicy().classFromRow(databaseRow,query.getSession());
    if ((classValue == null) && isXmlDescriptor()) {
      QName leafElementType=((XMLDescriptor)concreteDescriptor).getDefaultRootElementType();
      if (leafElementType != null) {
        Object indicator=concreteDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      concreteDescriptor=query.getSession().getDescriptor(classValue);
      if ((concreteDescriptor == null) && query.hasPartialAttributeExpressions()) {
        concreteDescriptor=getDescriptor();
      }
      if (concreteDescriptor == null) {
        throw QueryException.noDescriptorForClassFromInheritancePolicy(query,classValue);
      }
    }
 else {
      if (Modifier.isAbstract(concreteDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(databaseRow,concreteDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  domainObject=concreteDescriptor.getObjectBuilder().buildNewInstance();
  row.setCurrentObject(domainObject);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().beforeUnmarshal(domainObject,parent);
  }
  concreteDescriptor.getObjectBuilder().buildAttributesIntoObject(domainObject,null,databaseRow,query,joinManager,false,query.getSession());
  if (isXmlDescriptor() && ((XMLDescriptor)concreteDescriptor).getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(domainObject)});
    }
    CacheKey key=query.getSession().getIdentityMapAccessorInstance().acquireDeferredLock(pk,concreteDescriptor.getJavaClass(),concreteDescriptor);
    if (((XMLDescriptor)concreteDescriptor).shouldPreserveDocument()) {
      key.setRecord(databaseRow);
    }
    key.setObject(domainObject);
    key.releaseDeferredLock();
  }
  DocumentPreservationPolicy docPresPolicy=((DOMRecord)row).getDocPresPolicy();
  if (docPresPolicy != null) {
    ((DOMRecord)row).getDocPresPolicy().addObjectToCache(domainObject,((DOMRecord)row).getDOM());
  }
  query.getSession().endOperationProfile(SessionProfiler.ObjectBuilding,query,SessionProfiler.ALL);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().afterUnmarshal(domainObject,parent);
  }
  return domainObject;
}","/** 
 * INTERNAL: Override the parent's buildObject to allow for the caching of aggregate objects in OX. By caching aggregates along with XML Nodes that they were created from, we are able to preserve the structure and unmapped content of the document that was used to create these objects.
 */
@Override public Object buildObject(ObjectBuildingQuery query,AbstractRecord databaseRow,JoinedAttributeManager joinManager) throws DatabaseException, QueryException {
  XMLRecord row=(XMLRecord)databaseRow;
  row.setSession(query.getSession());
  XMLUnmarshaller unmarshaller=row.getUnmarshaller();
  Object parent=row.getOwningObject();
  Object pk=extractPrimaryKeyFromRow(databaseRow,query.getSession());
  if (!(isXmlDescriptor() || getDescriptor().isDescriptorTypeAggregate())) {
    return super.buildObject(query,databaseRow,joinManager);
  }
  query.getSession().startOperationProfile(SessionProfiler.ObjectBuilding,query,SessionProfiler.ALL);
  ClassDescriptor concreteDescriptor=getDescriptor();
  Object domainObject=null;
  if (concreteDescriptor.hasInheritance() && (parent == null)) {
    Class classValue=concreteDescriptor.getInheritancePolicy().classFromRow(databaseRow,query.getSession());
    if ((classValue == null) && isXmlDescriptor()) {
      QName leafElementType=((XMLDescriptor)concreteDescriptor).getDefaultRootElementType();
      if (leafElementType != null) {
        XPathQName xpathQName=new XPathQName(leafElementType,row.isNamespaceAware());
        Object indicator=concreteDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xpathQName);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      concreteDescriptor=query.getSession().getDescriptor(classValue);
      if ((concreteDescriptor == null) && query.hasPartialAttributeExpressions()) {
        concreteDescriptor=getDescriptor();
      }
      if (concreteDescriptor == null) {
        throw QueryException.noDescriptorForClassFromInheritancePolicy(query,classValue);
      }
    }
 else {
      if (Modifier.isAbstract(concreteDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(databaseRow,concreteDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  domainObject=concreteDescriptor.getObjectBuilder().buildNewInstance();
  row.setCurrentObject(domainObject);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().beforeUnmarshal(domainObject,parent);
  }
  concreteDescriptor.getObjectBuilder().buildAttributesIntoObject(domainObject,null,databaseRow,query,joinManager,false,query.getSession());
  if (isXmlDescriptor() && ((XMLDescriptor)concreteDescriptor).getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(domainObject)});
    }
    CacheKey key=query.getSession().getIdentityMapAccessorInstance().acquireDeferredLock(pk,concreteDescriptor.getJavaClass(),concreteDescriptor);
    if (((XMLDescriptor)concreteDescriptor).shouldPreserveDocument()) {
      key.setRecord(databaseRow);
    }
    key.setObject(domainObject);
    key.releaseDeferredLock();
  }
  DocumentPreservationPolicy docPresPolicy=((DOMRecord)row).getDocPresPolicy();
  if (docPresPolicy != null) {
    ((DOMRecord)row).getDocPresPolicy().addObjectToCache(domainObject,((DOMRecord)row).getDOM());
  }
  query.getSession().endOperationProfile(SessionProfiler.ObjectBuilding,query,SessionProfiler.ALL);
  if ((unmarshaller != null) && (unmarshaller.getUnmarshalListener() != null)) {
    unmarshaller.getUnmarshalListener().afterUnmarshal(domainObject,parent);
  }
  return domainObject;
}"
65680,"protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}","protected XMLDescriptor findReferenceDescriptor(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,DatabaseMapping mapping,UnmarshalKeepAsElementPolicy policy){
  XMLDescriptor returnDescriptor=null;
  if (atts != null) {
    XMLContext xmlContext=unmarshalRecord.getUnmarshaller().getXMLContext();
    String schemaType=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
    if (schemaType != null) {
      schemaType=schemaType.trim();
      if (schemaType.length() > 0) {
        XPathFragment frag=new XPathFragment();
        frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
        frag.setXPath(schemaType);
        QName qname=null;
        if (frag.hasNamespace()) {
          String prefix=frag.getPrefix();
          String url=unmarshalRecord.resolveNamespacePrefix(prefix);
          frag.setNamespaceURI(url);
          qname=new QName(url,frag.getLocalName());
          unmarshalRecord.setTypeQName(qname);
        }
 else {
          String url=unmarshalRecord.resolveNamespacePrefix(XMLConstants.EMPTY_STRING);
          if (null != url) {
            frag.setNamespaceURI(url);
            qname=new QName(url,frag.getLocalName());
            unmarshalRecord.setTypeQName(qname);
          }
        }
        returnDescriptor=xmlContext.getDescriptorByGlobalType(frag);
        if (returnDescriptor == null) {
          if (policy == null || (policy != null && policy != UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT && policy != UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) {
            Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(qname);
            if (theClass == null) {
              throw XMLMarshalException.unknownXsiTypeValue(schemaType,mapping);
            }
          }
        }
      }
    }
  }
  return returnDescriptor;
}"
65681,"public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      QName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.initializeRecord(null);
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  XMLReader xmlReader=unmarshalRecord.getXMLReader();
  xmlReader.setContentHandler(childRecord);
  xmlReader.setLexicalHandler(childRecord);
}","public void processChild(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts,XMLDescriptor xmlDescriptor,DatabaseMapping mapping) throws SAXException {
  if (xmlDescriptor == null) {
    DescriptorNotFoundContentHandler handler=new DescriptorNotFoundContentHandler(unmarshalRecord,mapping);
    String qnameString=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qnameString=xPathFragment.getPrefix() + XMLConstants.COLON + qnameString;
    }
    handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(handler);
    xmlReader.setLexicalHandler(handler);
    return;
  }
  if (xmlDescriptor.hasInheritance()) {
    unmarshalRecord.setAttributes(atts);
    Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(unmarshalRecord,unmarshalRecord.getSession());
    if (classValue == null) {
      XPathQName leafElementType=unmarshalRecord.getLeafElementType();
      if (leafElementType != null) {
        Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
        if (indicator != null) {
          classValue=(Class)indicator;
        }
      }
    }
    if (classValue != null) {
      xmlDescriptor=(XMLDescriptor)unmarshalRecord.getSession().getDescriptor(classValue);
    }
 else {
      if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
        throw DescriptorException.missingClassIndicatorField(unmarshalRecord,xmlDescriptor.getInheritancePolicy().getDescriptor());
      }
    }
  }
  TreeObjectBuilder targetObjectBuilder=(TreeObjectBuilder)xmlDescriptor.getObjectBuilder();
  UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord(targetObjectBuilder);
  unmarshalRecord.setChildRecord(childRecord);
  childRecord.setAttributes(atts);
  childRecord.startDocument();
  childRecord.initializeRecord(null);
  childRecord.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),atts);
  XMLReader xmlReader=unmarshalRecord.getXMLReader();
  xmlReader.setContentHandler(childRecord);
  xmlReader.setLexicalHandler(childRecord);
}"
65682,"public void setNamespaceAware(boolean isNamespaceAware){
  this.isNamespaceAware=isNamespaceAware;
}","public void setNamespaceAware(boolean isNamespaceAware){
  this.namespaceAware=isNamespaceAware;
}"
65683,"public XPathFragment(){
  super();
  setNamespaceAware(true);
}","public XPathFragment(String xpathString,char namespaceSeparator,boolean namespaceAware){
  this.namespaceSeparator=namespaceSeparator;
  setNamespaceAware(namespaceAware);
  setXPath(xpathString);
}"
65684,"private void setupNamespaceInformation(String xpathString){
  int nsindex=xpathString.indexOf(XMLConstants.COLON);
  if (nsindex != -1) {
    hasNamespace=true;
    localName=xpathString.substring(nsindex + 1).intern();
    prefix=xpathString.substring(0,nsindex).intern();
  }
 else {
    localName=xpathString.intern();
  }
}","private void setupNamespaceInformation(String xpathString){
  int nsindex=xpathString.indexOf(namespaceSeparator);
  if (nsindex != -1) {
    hasNamespace=true;
    localName=xpathString.substring(nsindex + 1).intern();
    prefix=xpathString.substring(0,nsindex).intern();
  }
 else {
    localName=xpathString.intern();
  }
}"
65685,"public boolean isNamespaceAware(){
  return isNamespaceAware;
}","public boolean isNamespaceAware(){
  return namespaceAware;
}"
65686,"public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    if (isNamespaceAware && xPathFragment.isNamespaceAware) {
      if (namespaceURI == null) {
        if (xPathFragment.getNamespaceURI() != null) {
          return false;
        }
      }
 else {
        if (xPathFragment.getNamespaceURI() == null) {
          return false;
        }
 else         if (namespaceURI != xPathFragment.getNamespaceURI() && !(namespaceURI.equals(xPathFragment.getNamespaceURI()))) {
          return false;
        }
      }
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (getLocalName() == xPathFragment.getLocalName()) || ((getLocalName() != null) && getLocalName().equals(xPathFragment.getLocalName()))) && (this.indexValue == xPathFragment.getIndexValue()) && (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    if (namespaceAware && xPathFragment.isNamespaceAware()) {
      if (namespaceURI == null) {
        if (xPathFragment.getNamespaceURI() != null) {
          return false;
        }
      }
 else {
        if (xPathFragment.getNamespaceURI() == null) {
          return false;
        }
 else         if (namespaceURI != xPathFragment.getNamespaceURI() && !(namespaceURI.equals(xPathFragment.getNamespaceURI()))) {
          return false;
        }
      }
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (getLocalName() == xPathFragment.getLocalName()) || ((getLocalName() != null) && getLocalName().equals(xPathFragment.getLocalName()))) && (this.indexValue == xPathFragment.getIndexValue()) && (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
65687,"/** 
 * Create a new XPathQName with the specified local name and namespace
 * @param namespaceUri The namespace to associate with this XPathQName
 * @param localName The local name to associate with this XPathQName
 * @param namespaceAware set if namespaces should be processed or ignored
 */
public XPathQName(String namespaceUri,String localName,boolean namespaceAware){
  if (namespaceUri == null) {
    this.namespaceUri=XMLConstants.EMPTY_STRING;
  }
 else {
    this.namespaceUri=namespaceUri;
  }
  this.localName=localName;
  isNamespaceAware=namespaceAware;
}","/** 
 * Create a new XPathQName with the specified QName
 * @param QName The QName to build this XPathQName from 
 * @param namespaceAware set if namespaces should be processed or ignored
 */
public XPathQName(QName qname,boolean namespaceAware){
  this(qname.getNamespaceURI(),qname.getLocalPart(),namespaceAware);
}"
65688,"/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  try {
    String xmlEncoding=""String_Node_Str"";
    String xmlVersion=""String_Node_Str"";
    try {
      Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
      xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
    }
 catch (    Exception ex) {
    }
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
      Object nodeVal;
      try {
        Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
        nodeVal=rootTxt.getNodeValue();
      }
 catch (      Exception ex) {
        nodeVal=null;
      }
      Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setObject(obj);
      String lName=xmlRow.getDOM().getLocalName();
      if (lName == null) {
        lName=xmlRow.getDOM().getNodeName();
      }
      xmlRoot.setLocalName(lName);
      xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
      xmlRoot.setEncoding(xmlEncoding);
      xmlRoot.setVersion(xmlVersion);
      return xmlRoot;
    }
    AbstractSession readSession=xmlContext.getReadSession(referenceClass);
    XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
    if (descriptor == null) {
      throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
    }
    Object object=null;
    if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      xmlRow.setUnmarshaller(xmlUnmarshaller);
      xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
      XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
      ReadObjectQuery query=new ReadObjectQuery();
      query.setReferenceClass(referenceClass);
      query.setSession(readSession);
      object=objectBuilder.buildObject(query,xmlRow,null);
      xmlUnmarshaller.resolveReferences(readSession);
    }
    String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
    String elementLocalName=xmlRow.getDOM().getLocalName();
    if (elementLocalName == null) {
      elementLocalName=xmlRow.getDOM().getNodeName();
    }
    String elementPrefix=xmlRow.getDOM().getPrefix();
    return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,xmlUnmarshaller.isNamespaceAware());
  }
  finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}","/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  try {
    String xmlEncoding=""String_Node_Str"";
    String xmlVersion=""String_Node_Str"";
    try {
      Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
      xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
    }
 catch (    Exception ex) {
    }
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
      Object nodeVal;
      try {
        Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
        nodeVal=rootTxt.getNodeValue();
      }
 catch (      Exception ex) {
        nodeVal=null;
      }
      Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setObject(obj);
      String lName=xmlRow.getDOM().getLocalName();
      if (lName == null) {
        lName=xmlRow.getDOM().getNodeName();
      }
      xmlRoot.setLocalName(lName);
      xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
      xmlRoot.setEncoding(xmlEncoding);
      xmlRoot.setVersion(xmlVersion);
      return xmlRoot;
    }
    AbstractSession readSession=xmlContext.getReadSession(referenceClass);
    XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
    if (descriptor == null) {
      throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
    }
    Object object=null;
    if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      xmlRow.setUnmarshaller(xmlUnmarshaller);
      xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
      XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
      ReadObjectQuery query=new ReadObjectQuery();
      query.setReferenceClass(referenceClass);
      query.setSession(readSession);
      object=objectBuilder.buildObject(query,xmlRow,null);
      xmlUnmarshaller.resolveReferences(readSession);
    }
    String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
    String elementLocalName=xmlRow.getDOM().getLocalName();
    if (elementLocalName == null) {
      elementLocalName=xmlRow.getDOM().getNodeName();
    }
    String elementPrefix=xmlRow.getDOM().getPrefix();
    return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,true);
  }
  finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65689,"/** 
 * INTERNAL: The mapping is initialized with the given session. This mapping is fully initialized after this.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (null != getField()) {
    setField(getDescriptor().buildField(getField()));
  }
  ContainerPolicy cp=getContainerPolicy();
  if (cp != null) {
    if (cp.getContainerClass() == null) {
      Class cls=session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(cp.getContainerClassName());
      cp.setContainerClass(cls);
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.remove(sourceField);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    if (null != targetField) {
      targetField=(XMLField)targetDescriptor.buildField(targetField);
    }
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
}","/** 
 * INTERNAL: The mapping is initialized with the given session. This mapping is fully initialized after this.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (null != getField()) {
    setField(getDescriptor().buildField(getField()));
  }
  ContainerPolicy cp=getContainerPolicy();
  if (cp != null) {
    if (cp.getContainerClass() == null) {
      Class cls=session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(cp.getContainerClassName());
      cp.setContainerClass(cls);
    }
  }
}"
65690,"/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (null == referenceClass) {
    if (referenceClassName != null) {
      setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(referenceClassName));
    }
  }
  if (!(null == referenceClass || referenceClass == ClassConstants.OBJECT)) {
    super.initialize(session);
  }
  ReferenceListener listener=new ReferenceListener();
  if (!(session.getEventManager().getListeners().contains(listener))) {
    session.getEventManager().addListener(listener);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.remove(sourceField);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    if (null != targetField) {
      if (null == targetDescriptor) {
        throw DescriptorException.referenceClassNotSpecified(this);
      }
      targetField=(XMLField)targetDescriptor.buildField(targetField);
    }
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
  if (this.inverseReferenceMapping != null) {
    if (null != this.inverseReferenceMapping.getAttributeAccessor()) {
      this.inverseReferenceMapping.getAttributeAccessor().initializeAttributes(this.referenceClass);
    }
  }
}","/** 
 * INTERNAL: Register a ReferenceResolver as an event listener on the session,  if one doesn't already exist.  Each source/target field will have a namespace resolver set as well. 
 * @see org.eclipse.persistence.internal.oxm.ReferenceResolver
 * @see org.eclipse.persistence.oxm.NamespaceResolver
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (null == referenceClass) {
    if (referenceClassName != null) {
      setReferenceClass(session.getDatasourcePlatform().getConversionManager().convertClassNameToClass(referenceClassName));
    }
  }
  if (!(null == referenceClass || referenceClass == ClassConstants.OBJECT)) {
    super.initialize(session);
  }
  ReferenceListener listener=new ReferenceListener();
  if (!(session.getEventManager().getListeners().contains(listener))) {
    session.getEventManager().addListener(listener);
  }
  XMLDescriptor descriptor=(XMLDescriptor)this.getDescriptor();
  XMLDescriptor targetDescriptor=(XMLDescriptor)getReferenceDescriptor();
  for (int index=0; index < sourceToTargetKeys.size(); index++) {
    XMLField sourceField=(XMLField)sourceToTargetKeys.get(index);
    XMLField targetField=(XMLField)sourceToTargetKeyFieldAssociations.remove(sourceField);
    sourceField=(XMLField)descriptor.buildField(sourceField);
    sourceToTargetKeys.set(index,sourceField);
    if (null != targetField) {
      if (null == targetDescriptor) {
        throw DescriptorException.referenceClassNotSpecified(this);
      }
      List<DatabaseField> pkFields=targetDescriptor.getPrimaryKeyFields();
      for (int i=0; i < pkFields.size(); i++) {
        XMLField nextPKField=(XMLField)pkFields.get(i);
        if (targetField.equals(nextPKField)) {
          targetField=(XMLField)targetDescriptor.buildField(nextPKField);
          sourceField.setSchemaType(targetField.getSchemaType());
          break;
        }
      }
    }
    sourceToTargetKeyFieldAssociations.put(sourceField,targetField);
  }
  if (this.inverseReferenceMapping != null) {
    if (null != this.inverseReferenceMapping.getAttributeAccessor()) {
      this.inverseReferenceMapping.getAttributeAccessor().initializeAttributes(this.referenceClass);
    }
  }
}"
65691,"/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  String uri=resolveNamespacePrefix(prefix);
  if (prefix == null && uri == null) {
    return;
  }
  if (uri == null || !uri.equals(elem.getNamespaceURI())) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    getContentHandler().startPrefixMapping(prefix,elem.getNamespaceURI());
  }
}","/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  if (prefix == null) {
    prefix=XMLConstants.EMPTY_STRING;
  }
  String uri=resolveNamespacePrefix(prefix);
  if (prefix == XMLConstants.EMPTY_STRING && uri == null) {
    return;
  }
  if (uri == null || !uri.equals(elem.getNamespaceURI())) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    getContentHandler().startPrefixMapping(prefix,elem.getNamespaceURI());
  }
}"
65692,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DynamicJAXBContextCreationTestCases.class);
  suite.addTestSuite(DynamicJAXBFromSessionsXMLTestCases.class);
  suite.addTestSuite(DynamicJAXBFromXSDTestCases.class);
  suite.addTestSuite(DynamicJAXBFromOXMTestCases.class);
  suite.addTestSuite(DynamicJAXBCollectionTestCases.class);
  suite.addTestSuite(DynamicJAXBUsingXMLNamesTestCases.class);
  suite.addTestSuite(DynamicJAXBRefreshTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(DynamicJAXBContextCreationTestCases.class);
  suite.addTestSuite(DynamicJAXBFromSessionsXMLTestCases.class);
  suite.addTestSuite(DynamicJAXBFromXSDTestCases.class);
  suite.addTestSuite(DynamicJAXBFromOXMTestCases.class);
  suite.addTestSuite(DynamicJAXBCollectionTestCases.class);
  suite.addTestSuite(DynamicJAXBUsingXMLNamesTestCases.class);
  suite.addTestSuite(DynamicJAXBRefreshTestCases.class);
  suite.addTestSuite(EmptyContextTestCases.class);
  return suite;
}"
65693,"/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    PackageInfo packageInfo=annotationsProcessor.getPackageToPackageInfoMappings().get(packageName);
    if (packageInfo == null) {
      packageInfo=new PackageInfo();
    }
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        String transformerClassName=javaType.getXmlNameTransformer();
        XMLNameTransformer transformer=getXMLNameTransformerClassFromString(transformerClassName);
        if (transformer != null) {
          info.setXmlNameTransformer(transformer);
        }
        if (javaType.getXmlVirtualAccessMethods() != null) {
          info.setXmlVirtualAccessMethods(javaType.getXmlVirtualAccessMethods());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(packageInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(packageInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
    String transformerClassName=xmlBindings.getXmlNameTransformer();
    XMLNameTransformer transformer=getXMLNameTransformerClassFromString(transformerClassName);
    if (transformer != null) {
      packageInfo.setXmlNameTransformer(transformer);
    }
    for (    TypeInfo tInfo : typeInfos.values()) {
      if (xmlBindings.getXmlJavaTypeAdapters() != null) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
              packageInfo.getPackageLevelAdaptersByClass().put(boundType.getQualifiedName(),adapterClass);
            }
          }
 catch (          JAXBException e) {
            throw JAXBException.invalidPackageAdapterClass(xja.getValue(),packageName);
          }
        }
      }
    }
  }
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(null);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      NamespaceInfo nsInfo=annotationsProcessor.getPackageToPackageInfoMappings().get(packageName).getNamespaceInfo();
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  ArrayList<JavaClass> jClasses=aProcessor.getTypeInfoClasses();
  aProcessor.processPropertyTypes(jClasses.toArray(new JavaClass[jClasses.size()]));
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}","/** 
 * Process XmlBindings on a per package basis for a given AnnotationsProcessor instance.
 * @param annotationsProcessor
 */
public void processXML(AnnotationsProcessor annotationsProcessor,JavaModelInput jModelInput,TypeMappingInfo[] typeMappingInfos,JavaClass[] originalJavaClasses){
  this.jModelInput=jModelInput;
  this.aProcessor=annotationsProcessor;
  Map<String,XmlEnum> xmlEnumMap=new HashMap<String,XmlEnum>();
  annotationsProcessor.init(originalJavaClasses,typeMappingInfos);
  Map<String,ArrayList<JavaClass>> pkgToClassMap=buildPackageToJavaClassMap();
  XmlBindings xmlBindings;
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    NamespaceInfo nsInfo=processXmlSchema(xmlBindings,packageName);
    if (nsInfo != null) {
      annotationsProcessor.addPackageToNamespaceMapping(packageName,nsInfo);
    }
    XmlRegistries xmlRegs=xmlBindings.getXmlRegistries();
    if (xmlRegs != null) {
      for (      XmlRegistry xmlReg : xmlRegs.getXmlRegistry()) {
        aProcessor.addXmlRegistry(xmlReg.getName(),xmlReg);
      }
    }
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    XmlEnums xmlEnums=xmlBindings.getXmlEnums();
    if (xmlEnums != null) {
      for (      XmlEnum xmlEnum : xmlEnums.getXmlEnum()) {
        xmlEnumMap.put(xmlEnum.getJavaEnum(),xmlEnum);
      }
    }
    Map<String,TypeInfo> typeInfoMap=annotationsProcessor.preBuildTypeInfo(javaClasses);
    List<XmlSchemaType> xmlSchemaTypes=null;
    XmlSchemaTypes sTypes=xmlBindings.getXmlSchemaTypes();
    if (sTypes != null) {
      xmlSchemaTypes=sTypes.getXmlSchemaType();
    }
 else {
      xmlSchemaTypes=new ArrayList<XmlSchemaType>();
    }
    if (xmlBindings.getXmlSchemaType() != null) {
      xmlSchemaTypes.add(xmlBindings.getXmlSchemaType());
    }
    for (    XmlSchemaType sType : xmlSchemaTypes) {
      JavaClass jClass=aProcessor.getHelper().getJavaClass(sType.getType());
      if (jClass != null) {
        aProcessor.processSchemaType(sType.getName(),sType.getNamespace(),jClass.getQualifiedName());
      }
    }
    PackageInfo packageInfo=annotationsProcessor.getPackageToPackageInfoMappings().get(packageName);
    if (packageInfo == null) {
      packageInfo=new PackageInfo();
    }
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        TypeInfo info=typeInfoMap.get(javaType.getName());
        if (javaType.getXmlJavaTypeAdapter() != null) {
          info.setXmlJavaTypeAdapter(javaType.getXmlJavaTypeAdapter());
        }
        String transformerClassName=javaType.getXmlNameTransformer();
        XMLNameTransformer transformer=getXMLNameTransformerClassFromString(transformerClassName);
        if (transformer != null) {
          info.setXmlNameTransformer(transformer);
        }
        if (javaType.getXmlVirtualAccessMethods() != null) {
          info.setXmlVirtualAccessMethods(javaType.getXmlVirtualAccessMethods());
        }
        if (javaType.isSetXmlAccessorOrder()) {
          info.setXmlAccessOrder(javaType.getXmlAccessorOrder());
        }
 else         if (!info.isSetXmlAccessOrder()) {
          if (xmlBindings.isSetXmlAccessorOrder()) {
            info.setXmlAccessOrder(xmlBindings.getXmlAccessorOrder());
          }
 else {
            info.setXmlAccessOrder(packageInfo.getAccessOrder());
          }
        }
        if (javaType.isSetXmlAccessorType()) {
          info.setXmlAccessType(javaType.getXmlAccessorType());
        }
 else         if (!info.isSetXmlAccessType()) {
          if (xmlBindings.isSetXmlAccessorType()) {
            info.setXmlAccessType(xmlBindings.getXmlAccessorType());
          }
 else {
            info.setXmlAccessType(packageInfo.getAccessType());
          }
        }
        if (javaType.isSetXmlInlineBinaryData()) {
          info.setInlineBinaryData(javaType.isXmlInlineBinaryData());
        }
        if (javaType.isSetXmlTransient()) {
          info.setXmlTransient(javaType.isXmlTransient());
        }
        if (javaType.getXmlRootElement() != null) {
          info.setXmlRootElement(javaType.getXmlRootElement());
        }
        if (javaType.getXmlSeeAlso() != null && javaType.getXmlSeeAlso().size() > 0) {
          info.setXmlSeeAlso(javaType.getXmlSeeAlso());
        }
        if (javaType.getXmlType() != null) {
          info.setXmlType(javaType.getXmlType());
        }
        if (javaType.getXmlCustomizer() != null) {
          info.setXmlCustomizer(javaType.getXmlCustomizer());
        }
        if (javaType.getXmlClassExtractor() != null) {
          info.setClassExtractorName(javaType.getXmlClassExtractor().getClazz());
        }
        if (javaType.getXmlProperties() != null && javaType.getXmlProperties().getXmlProperty().size() > 0) {
          if (info.getUserProperties() != null) {
            info.setUserProperties(mergeUserPropertyMap(javaType.getXmlProperties().getXmlProperty(),info.getUserProperties()));
          }
 else {
            info.setUserProperties(createUserPropertyMap(javaType.getXmlProperties().getXmlProperty()));
          }
        }
        if (javaType.getXmlDiscriminatorNode() != null) {
          info.setXmlDiscriminatorNode(javaType.getXmlDiscriminatorNode());
        }
        if (javaType.getXmlDiscriminatorValue() != null) {
          info.setXmlDiscriminatorValue(javaType.getXmlDiscriminatorValue());
        }
      }
    }
    Map<String,TypeInfo> typeInfos=aProcessor.getTypeInfosForPackage(packageName);
    String transformerClassName=xmlBindings.getXmlNameTransformer();
    XMLNameTransformer transformer=getXMLNameTransformerClassFromString(transformerClassName);
    if (transformer != null) {
      packageInfo.setXmlNameTransformer(transformer);
    }
    for (    TypeInfo tInfo : typeInfos.values()) {
      if (xmlBindings.getXmlJavaTypeAdapters() != null) {
        List<XmlJavaTypeAdapter> adapters=xmlBindings.getXmlJavaTypeAdapters().getXmlJavaTypeAdapter();
        for (        XmlJavaTypeAdapter xja : adapters) {
          try {
            JavaClass adapterClass=jModelInput.getJavaModel().getClass(xja.getValue());
            JavaClass boundType=jModelInput.getJavaModel().getClass(xja.getType());
            if (boundType != null) {
              tInfo.addPackageLevelAdapterClass(adapterClass,boundType);
              packageInfo.getPackageLevelAdaptersByClass().put(boundType.getQualifiedName(),adapterClass);
            }
          }
 catch (          JAXBException e) {
            throw JAXBException.invalidPackageAdapterClass(xja.getValue(),packageName);
          }
        }
      }
    }
  }
  for (  String packageName : xmlBindingMap.keySet()) {
    ArrayList classesToProcess=pkgToClassMap.get(packageName);
    if (classesToProcess == null) {
      getLogger().logWarning(""String_Node_Str"",new Object[]{packageName});
      continue;
    }
    xmlBindings=xmlBindingMap.get(packageName);
    JavaClass[] javaClasses=(JavaClass[])classesToProcess.toArray(new JavaClass[classesToProcess.size()]);
    javaClasses=annotationsProcessor.postBuildTypeInfo(javaClasses);
    annotationsProcessor.processJavaClasses(null);
    Map<String,TypeInfo> typeInfosForPackage=annotationsProcessor.getTypeInfosForPackage(packageName);
    for (    Entry<String,TypeInfo> entry : typeInfosForPackage.entrySet()) {
      TypeInfo tInfo=entry.getValue();
      if (tInfo.isEnumerationType()) {
        EnumTypeInfo etInfo=(EnumTypeInfo)tInfo;
        XmlEnum xmlEnum=xmlEnumMap.get(etInfo.getClassName());
        if (xmlEnum != null) {
          JavaClass restrictionClass=aProcessor.getHelper().getJavaClass(xmlEnum.getValue());
          if (restrictionClass == null) {
            restrictionClass=jModelInput.getJavaModel().getClass(String.class);
          }
          etInfo.setRestrictionBase(aProcessor.getSchemaTypeFor(restrictionClass));
          for (          XmlEnumValue xmlEnumValue : xmlEnum.getXmlEnumValue()) {
            etInfo.addJavaFieldToXmlEnumValuePair(true,xmlEnumValue.getJavaEnumValue(),xmlEnumValue.getValue());
          }
        }
      }
    }
    JavaTypes jTypes=xmlBindings.getJavaTypes();
    if (jTypes != null) {
      PackageInfo packageInfo=annotationsProcessor.getPackageToPackageInfoMappings().get(packageName);
      NamespaceInfo nsInfo=null;
      if (null != packageInfo) {
        nsInfo=packageInfo.getNamespaceInfo();
      }
      for (      JavaType javaType : jTypes.getJavaType()) {
        processJavaType(javaType,typeInfosForPackage.get(javaType.getName()),nsInfo);
      }
    }
    pkgToClassMap.remove(packageName);
  }
  Iterator<ArrayList<JavaClass>> classIt=pkgToClassMap.values().iterator();
  while (classIt.hasNext()) {
    ArrayList<JavaClass> jClassList=classIt.next();
    JavaClass[] jClassArray=(JavaClass[])jClassList.toArray(new JavaClass[jClassList.size()]);
    annotationsProcessor.buildNewTypeInfo(jClassArray);
    annotationsProcessor.processJavaClasses(jClassArray);
  }
  Map<String,TypeInfo> typeInfos=(Map<String,TypeInfo>)aProcessor.getTypeInfo().clone();
  for (  Entry<String,TypeInfo> entry : typeInfos.entrySet()) {
    JavaClass[] jClassArray;
    for (    Property prop : entry.getValue().getPropertyList()) {
      if (prop.isSetXmlJavaTypeAdapter()) {
        jClassArray=new JavaClass[]{prop.getActualType()};
        aProcessor.buildNewTypeInfo(jClassArray);
      }
    }
  }
  ArrayList<JavaClass> jClasses=aProcessor.getTypeInfoClasses();
  aProcessor.processPropertyTypes(jClasses.toArray(new JavaClass[jClasses.size()]));
  aProcessor.finalizeProperties();
  aProcessor.createElementsForTypeMappingInfo();
}"
65694,"/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  String xmlEncoding=""String_Node_Str"";
  String xmlVersion=""String_Node_Str"";
  try {
    Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
    xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
  }
 catch (  Exception ex) {
  }
  XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
  if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
    Object nodeVal;
    try {
      Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
      nodeVal=rootTxt.getNodeValue();
    }
 catch (    Exception ex) {
      nodeVal=null;
    }
    Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setObject(obj);
    String lName=xmlRow.getDOM().getLocalName();
    if (lName == null) {
      lName=xmlRow.getDOM().getNodeName();
    }
    xmlRoot.setLocalName(lName);
    xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
    xmlRoot.setEncoding(xmlEncoding);
    xmlRoot.setVersion(xmlVersion);
    return xmlRoot;
  }
  AbstractSession readSession=xmlContext.getReadSession(referenceClass);
  XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
  if (descriptor == null) {
    throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
  }
  Object object=null;
  if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
    xmlRow.setUnmarshaller(xmlUnmarshaller);
    xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
    ReadObjectQuery query=new ReadObjectQuery();
    query.setReferenceClass(referenceClass);
    query.setSession(readSession);
    object=objectBuilder.buildObject(query,xmlRow,null);
    xmlUnmarshaller.resolveReferences(readSession);
  }
  String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
  String elementLocalName=xmlRow.getDOM().getLocalName();
  if (elementLocalName == null) {
    elementLocalName=xmlRow.getDOM().getNodeName();
  }
  String elementPrefix=xmlRow.getDOM().getPrefix();
  return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,xmlUnmarshaller.isNamespaceAware());
}","/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  try {
    String xmlEncoding=""String_Node_Str"";
    String xmlVersion=""String_Node_Str"";
    try {
      Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
      xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
    }
 catch (    Exception ex) {
    }
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
      Object nodeVal;
      try {
        Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
        nodeVal=rootTxt.getNodeValue();
      }
 catch (      Exception ex) {
        nodeVal=null;
      }
      Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
      XMLRoot xmlRoot=new XMLRoot();
      xmlRoot.setObject(obj);
      String lName=xmlRow.getDOM().getLocalName();
      if (lName == null) {
        lName=xmlRow.getDOM().getNodeName();
      }
      xmlRoot.setLocalName(lName);
      xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
      xmlRoot.setEncoding(xmlEncoding);
      xmlRoot.setVersion(xmlVersion);
      return xmlRoot;
    }
    AbstractSession readSession=xmlContext.getReadSession(referenceClass);
    XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
    if (descriptor == null) {
      throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
    }
    Object object=null;
    if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
      xmlRow.setUnmarshaller(xmlUnmarshaller);
      xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
      XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
      ReadObjectQuery query=new ReadObjectQuery();
      query.setReferenceClass(referenceClass);
      query.setSession(readSession);
      object=objectBuilder.buildObject(query,xmlRow,null);
      xmlUnmarshaller.resolveReferences(readSession);
    }
    String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
    String elementLocalName=xmlRow.getDOM().getLocalName();
    if (elementLocalName == null) {
      elementLocalName=xmlRow.getDOM().getNodeName();
    }
    String elementPrefix=xmlRow.getDOM().getPrefix();
    return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,xmlUnmarshaller.isNamespaceAware());
  }
  finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65695,"public Object unmarshal(XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
    xmlReader.setContentHandler(saxDocumentBuilder);
    xmlReader.parse(inputSource);
    return xmlToObject(new DOMRecord(saxDocumentBuilder.getDocument()),clazz);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public Object unmarshal(XMLReader xmlReader,InputSource inputSource,Class clazz){
  try {
    SAXDocumentBuilder saxDocumentBuilder=new SAXDocumentBuilder();
    xmlReader.setContentHandler(saxDocumentBuilder);
    xmlReader.parse(inputSource);
    return xmlToObject(new DOMRecord(saxDocumentBuilder.getDocument()),clazz);
  }
 catch (  IOException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
 finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
65696,"public void testComplexMultitenantQueries(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU_123);
  try {
    clearCache(MULTI_TENANT_PU_123);
    em.clear();
    try {
      Query q=em.createQuery(""String_Node_Str"");
      SubCapo subCapo=new SubCapo();
      subCapo.setId(capo123Id);
      q.setParameter(1,subCapo);
      List<Soldier> soldiers=q.getResultList();
      assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 1);
      assertTrue(""String_Node_Str"",soldiers.get(0).isSoldier());
      assertTrue(""String_Node_Str"",soldiers.get(0).getId() == soldier123Id);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> q=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      q.setHint(QueryHints.FETCH,""String_Node_Str"");
      q.getResultList();
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> q=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      q.setHint(QueryHints.FETCH,""String_Node_Str"");
      q.getResultList();
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> query=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      query.setHint(QueryHints.BATCH,""String_Node_Str"");
      List<MafiaFamily> families=query.getResultList();
      assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
      int size=families.get(0).getMafiosos().size();
      assertTrue(""String_Node_Str"" + size + ""String_Node_Str"",size == 6);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      Query query=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      List results=query.getResultList();
      int size=results.size();
      assertTrue(""String_Node_Str"" + size + ""String_Node_Str"",size == 6);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      beginTransaction(em);
      int contracts=em.createNamedQuery(""String_Node_Str"").getResultList().size();
      int deletes=em.createNamedQuery(""String_Node_Str"").executeUpdate();
      assertTrue(""String_Node_Str"" + deletes + ""String_Node_Str""+ contracts+ ""String_Node_Str"",deletes == 2);
      commitTransaction(em);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    if (getServerSession(MULTI_TENANT_PU).getPlatform().isSymfoware()) {
      getServerSession(MULTI_TENANT_PU).logMessage(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      try {
        beginTransaction(em);
        this.getServerSession(MULTI_TENANT_PU).setLogLevel(0);
        List<MafiaFamily> allFamilies=em.createNamedQuery(""String_Node_Str"").getResultList();
        int families=allFamilies.size();
        assertTrue(""String_Node_Str"" + families + ""String_Node_Str"",families == 1);
        Query deleteQuery=em.createNamedQuery(""String_Node_Str"");
        deleteQuery.setHint(QueryHints.ALLOW_NATIVE_SQL_QUERY,true);
        int deletes=deleteQuery.executeUpdate();
        assertTrue(""String_Node_Str"" + deletes + ""String_Node_Str""+ families+ ""String_Node_Str"",deletes == 1);
        commitTransaction(em);
      }
 catch (      Exception e) {
        fail(""String_Node_Str"" + e);
      }
      EntityManager em007=createEntityManager(MULTI_TENANT_PU);
      try {
        beginTransaction(em);
        List<MafiaFamily> families=em007.createNativeQuery(""String_Node_Str"",MafiaFamily.class).getResultList();
        assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 2);
        commitTransaction(em);
        beginTransaction(em007);
        em007.setProperty(""String_Node_Str"",""String_Node_Str"");
        em007.setProperty(EntityManagerProperties.MULTITENANT_PROPERTY_DEFAULT,""String_Node_Str"");
        MafiaFamily family=em007.find(MafiaFamily.class,family007);
        assertFalse(""String_Node_Str"",family.getTags().isEmpty());
        assertFalse(""String_Node_Str"",family.getRevenue() == null);
        commitTransaction(em007);
      }
 catch (      Exception e) {
        fail(""String_Node_Str"" + e);
      }
 finally {
        if (isTransactionActive(em007)) {
          rollbackTransaction(em007);
        }
        closeEntityManager(em007);
      }
    }
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testComplexMultitenantQueries(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU_123);
  try {
    clearCache(MULTI_TENANT_PU_123);
    em.clear();
    try {
      Query q=em.createQuery(""String_Node_Str"");
      SubCapo subCapo=new SubCapo();
      subCapo.setId(capo123Id);
      q.setParameter(1,subCapo);
      List<Soldier> soldiers=q.getResultList();
      assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 1);
      assertTrue(""String_Node_Str"",soldiers.get(0).isSoldier());
      assertTrue(""String_Node_Str"",soldiers.get(0).getId() == soldier123Id);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> q=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      q.setHint(QueryHints.FETCH,""String_Node_Str"");
      q.getResultList();
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> q=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      q.setHint(QueryHints.FETCH,""String_Node_Str"");
      q.getResultList();
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      TypedQuery<MafiaFamily> query=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      query.setHint(QueryHints.BATCH,""String_Node_Str"");
      List<MafiaFamily> families=query.getResultList();
      assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
      int size=families.get(0).getMafiosos().size();
      assertTrue(""String_Node_Str"" + size + ""String_Node_Str"",size == 6);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      Query query=em.createQuery(""String_Node_Str"",MafiaFamily.class);
      List results=query.getResultList();
      int size=results.size();
      assertTrue(""String_Node_Str"" + size + ""String_Node_Str"",size == 6);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    try {
      beginTransaction(em);
      int contracts=em.createNamedQuery(""String_Node_Str"").getResultList().size();
      int deletes=em.createNamedQuery(""String_Node_Str"").executeUpdate();
      assertTrue(""String_Node_Str"" + deletes + ""String_Node_Str""+ contracts+ ""String_Node_Str"",deletes == 2);
      commitTransaction(em);
    }
 catch (    Exception e) {
      fail(""String_Node_Str"" + e);
    }
    if (getServerSession(MULTI_TENANT_PU).getPlatform().isSymfoware()) {
      getServerSession(MULTI_TENANT_PU).logMessage(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      try {
        beginTransaction(em);
        List<MafiaFamily> allFamilies=em.createNamedQuery(""String_Node_Str"").getResultList();
        int families=allFamilies.size();
        assertTrue(""String_Node_Str"" + families + ""String_Node_Str"",families == 1);
        Query deleteQuery=em.createNamedQuery(""String_Node_Str"");
        deleteQuery.setHint(QueryHints.ALLOW_NATIVE_SQL_QUERY,true);
        int deletes=deleteQuery.executeUpdate();
        assertTrue(""String_Node_Str"" + deletes + ""String_Node_Str""+ families+ ""String_Node_Str"",deletes == 1);
        commitTransaction(em);
      }
 catch (      Exception e) {
        fail(""String_Node_Str"" + e);
      }
      EntityManager em007=createEntityManager(MULTI_TENANT_PU);
      try {
        List<MafiaFamily> families=em007.createNativeQuery(""String_Node_Str"",MafiaFamily.class).getResultList();
        assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 2);
        clearCache(MULTI_TENANT_PU);
        em007.clear();
        beginTransaction(em007);
        em007.setProperty(""String_Node_Str"",""String_Node_Str"");
        em007.setProperty(EntityManagerProperties.MULTITENANT_PROPERTY_DEFAULT,""String_Node_Str"");
        MafiaFamily family=em007.find(MafiaFamily.class,family007);
        assertFalse(""String_Node_Str"",family.getTags().isEmpty());
        assertFalse(""String_Node_Str"",family.getRevenue() == null);
        commitTransaction(em007);
      }
 catch (      Exception e) {
        fail(""String_Node_Str"" + e);
      }
 finally {
        if (isTransactionActive(em007)) {
          rollbackTransaction(em007);
        }
        closeEntityManager(em007);
      }
    }
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
65697,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(MappingsTestSuite.suite());
  suite.addTest(ExceptionHandlingTestSuite.suite());
  suite.addTestSuite(XmlTransientTestCases.class);
  suite.addTestSuite(XmlTransientUnsetClassTestCases.class);
  suite.addTestSuite(XmlTransientInheritanceTestCases.class);
  suite.addTestSuite(XmlTransientPropertyToTransientClassTestCases.class);
  suite.addTestSuite(XmlSeeAlsoTestCases.class);
  suite.addTestSuite(XmlSchemaTestCases.class);
  suite.addTestSuite(NamespaceTestCases.class);
  suite.addTestSuite(NameTransformerTestCases.class);
  suite.addTestSuite(NameTransformerExceptionTestCases.class);
  suite.addTestSuite(NameTransformerSimpleTestCases.class);
  suite.addTestSuite(XmlRootElementTestCases.class);
  suite.addTestSuite(XmlTypeTestCases.class);
  suite.addTestSuite(EmployeeFactoryClassTestCases.class);
  suite.addTestSuite(XmlAccessorTypeTestCases.class);
  suite.addTestSuite(XmlAccessorTypeFieldTestCases.class);
  suite.addTestSuite(XmlAccessorTypeNoneTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageClassOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageJavaClassOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageNoOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePropertyTestCases.class);
  suite.addTestSuite(XmlAccessorTypePublicMemberTestCases.class);
  suite.addTestSuite(XmlAccessorOrderTestCases.class);
  suite.addTestSuite(XMLAccessorOrderPackageInfoTestCases.class);
  suite.addTestSuite(XMLAccessorOrderClassOverrideTestCases.class);
  suite.addTestSuite(XMLAccessorOrderJavaClassOverrideTestCases.class);
  suite.addTestSuite(JAXBContextFactoryTestCases.class);
  suite.addTestSuite(XmlElementTestCases.class);
  suite.addTestSuite(AdapterOnClassTestCases.class);
  suite.addTestSuite(AdapterOnPropertyTestCases.class);
  suite.addTestSuite(AdapterHexBinaryTestCases.class);
  suite.addTestSuite(AdapterOnPackageTestCases.class);
  suite.addTestSuite(XmlAdapterNegativeTestCases.class);
  suite.addTestSuite(XmlAdapterUnspecifiedClassTestCases.class);
  suite.addTestSuite(ClassLevelTestCases.class);
  suite.addTestSuite(PackageLevelTestCases.class);
  suite.addTestSuite(PropertyLevelTestCases.class);
  suite.addTestSuite(XmlAttributeTestCases.class);
  suite.addTestSuite(XmlCustomizerTestCases.class);
  suite.addTestSuite(XmlCustomizerWithOverrideTestCases.class);
  suite.addTestSuite(XmlElementWrapperTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueCdnPriceTestCases.class);
  suite.addTestSuite(XmlValueInternationalPriceTestCases.class);
  suite.addTestSuite(XmlListTestCases.class);
  suite.addTestSuite(XmlListNoStringTestCases.class);
  suite.addTestSuite(XmlListOnXmlAttributeTestCases.class);
  suite.addTestSuite(XmlAnyElementTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlAnyAttributeTestCases.class);
  suite.addTestSuite(XmlMimeTypeCases.class);
  suite.addTestSuite(XmlAttachmentRefCases.class);
  suite.addTestSuite(XmlElementsTestCases.class);
  suite.addTestSuite(XmlElementRefTestCases.class);
  suite.addTestSuite(XmlElementRefWithWrapperTestCases.class);
  suite.addTestSuite(XmlElementRefsTestCases.class);
  suite.addTestSuite(XmlSchemaTypeTestCases.class);
  suite.addTestSuite(XmlSchemaTypesTestCases.class);
  suite.addTestSuite(XmlEnumTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(XmlRegistryTestCases.class);
  suite.addTestSuite(XmlRegistryNonLocalTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlDiscriminatorTestCases.class);
  suite.addTestSuite(XmlJoinNodeTestCases.class);
  suite.addTestSuite(XmlMetadataCompleteTestCases.class);
  suite.addTestSuite(XmlAdapterListTestCases.class);
  suite.addTestSuite(XmlAdapterListsTestCases.class);
  suite.addTestSuite(MultipleBindingsSimpleTestCases.class);
  suite.addTestSuite(MultipleBindingsFourFilesTestCases.class);
  suite.addTestSuite(SplitPackageTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(MappingsTestSuite.suite());
  suite.addTest(ExceptionHandlingTestSuite.suite());
  suite.addTestSuite(XmlTransientTestCases.class);
  suite.addTestSuite(XmlTransientUnsetClassTestCases.class);
  suite.addTestSuite(XmlTransientInheritanceTestCases.class);
  suite.addTestSuite(XmlTransientPropertyToTransientClassTestCases.class);
  suite.addTestSuite(XmlSeeAlsoTestCases.class);
  suite.addTestSuite(XmlSchemaTestCases.class);
  suite.addTestSuite(NamespaceTestCases.class);
  suite.addTestSuite(NameTransformerTestCases.class);
  suite.addTestSuite(NameTransformerExceptionTestCases.class);
  suite.addTestSuite(NameTransformerSimpleTestCases.class);
  suite.addTestSuite(XmlRootElementTestCases.class);
  suite.addTestSuite(XmlTypeTestCases.class);
  suite.addTestSuite(EmployeeFactoryClassTestCases.class);
  suite.addTestSuite(XmlAccessorTypeTestCases.class);
  suite.addTestSuite(XmlAccessorTypeFieldTestCases.class);
  suite.addTestSuite(XmlAccessorTypeNoneTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageClassOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageJavaClassOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePackageNoOverrideTestCases.class);
  suite.addTestSuite(XmlAccessorTypePropertyTestCases.class);
  suite.addTestSuite(XmlAccessorTypePublicMemberTestCases.class);
  suite.addTestSuite(XmlAccessorOrderTestCases.class);
  suite.addTestSuite(XMLAccessorOrderPackageInfoTestCases.class);
  suite.addTestSuite(XMLAccessorOrderClassOverrideTestCases.class);
  suite.addTestSuite(XMLAccessorOrderJavaClassOverrideTestCases.class);
  suite.addTestSuite(JAXBContextFactoryTestCases.class);
  suite.addTestSuite(XmlElementTestCases.class);
  suite.addTestSuite(AdapterOnClassTestCases.class);
  suite.addTestSuite(AdapterOnPropertyTestCases.class);
  suite.addTestSuite(AdapterHexBinaryTestCases.class);
  suite.addTestSuite(AdapterOnPackageTestCases.class);
  suite.addTestSuite(XmlAdapterNegativeTestCases.class);
  suite.addTestSuite(XmlAdapterUnspecifiedClassTestCases.class);
  suite.addTestSuite(ClassLevelTestCases.class);
  suite.addTestSuite(PackageLevelTestCases.class);
  suite.addTestSuite(PropertyLevelTestCases.class);
  suite.addTestSuite(XmlAttributeTestCases.class);
  suite.addTestSuite(XmlCustomizerTestCases.class);
  suite.addTestSuite(XmlCustomizerWithOverrideTestCases.class);
  suite.addTestSuite(XmlElementWrapperTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueCdnPriceTestCases.class);
  suite.addTestSuite(XmlValueInternationalPriceTestCases.class);
  suite.addTestSuite(XmlValueInternationalPricesTestCases.class);
  suite.addTestSuite(XmlValueCdnPricesTestCases.class);
  suite.addTestSuite(XmlListTestCases.class);
  suite.addTestSuite(XmlListNoStringTestCases.class);
  suite.addTestSuite(XmlListOnXmlAttributeTestCases.class);
  suite.addTestSuite(XmlAnyElementTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlAnyAttributeTestCases.class);
  suite.addTestSuite(XmlMimeTypeCases.class);
  suite.addTestSuite(XmlAttachmentRefCases.class);
  suite.addTestSuite(XmlElementsTestCases.class);
  suite.addTestSuite(XmlElementRefTestCases.class);
  suite.addTestSuite(XmlElementRefWithWrapperTestCases.class);
  suite.addTestSuite(XmlElementRefsTestCases.class);
  suite.addTestSuite(XmlSchemaTypeTestCases.class);
  suite.addTestSuite(XmlSchemaTypesTestCases.class);
  suite.addTestSuite(XmlEnumTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(XmlRegistryTestCases.class);
  suite.addTestSuite(XmlRegistryNonLocalTestCases.class);
  suite.addTestSuite(XmlClassExtractorTestCases.class);
  suite.addTestSuite(XmlDiscriminatorTestCases.class);
  suite.addTestSuite(XmlJoinNodeTestCases.class);
  suite.addTestSuite(XmlMetadataCompleteTestCases.class);
  suite.addTestSuite(XmlAdapterListTestCases.class);
  suite.addTestSuite(XmlAdapterListsTestCases.class);
  suite.addTestSuite(MultipleBindingsSimpleTestCases.class);
  suite.addTestSuite(MultipleBindingsFourFilesTestCases.class);
  suite.addTestSuite(SplitPackageTestCases.class);
  return suite;
}"
65698,"public XMLCompositeDirectCollectionMapping generateDirectCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    String componentClassName=collectionType.getComponentType().getRawName();
    if (collectionType.getComponentType().isPrimitive()) {
      Class primitiveClass=XMLConversionManager.getDefaultManager().convertClassNameToClass(componentClassName);
      accessor.setComponentClass(primitiveClass);
      mapping.setAttributeAccessor(accessor);
      Class declaredClass=XMLConversionManager.getDefaultManager().getObjectClass(primitiveClass);
      mapping.setAttributeElementClass(declaredClass);
    }
 else {
      accessor.setComponentClassName(componentClassName);
      mapping.setAttributeAccessor(accessor);
      JavaClass componentType=collectionType.getComponentType();
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(componentType.getRawName(),false,helper.getClassLoader());
        mapping.setAttributeElementClass(declaredClass);
      }
 catch (      Exception e) {
      }
    }
    collectionType=jotArrayList;
  }
 else   if (isCollectionType(collectionType)) {
    if (collectionType.hasActualTypeArguments()) {
      JavaClass itemType=(JavaClass)collectionType.getActualTypeArguments().toArray()[0];
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(itemType.getRawName(),false,helper.getClassLoader());
        mapping.setAttributeElementClass(declaredClass);
      }
 catch (      Exception e) {
      }
    }
  }
  if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField=getXPathForField(property,namespaceInfo,true);
  mapping.setField(xmlField);
  if (helper.isAnnotationPresent(property.getElement(),XmlMixed.class)) {
    xmlField.setXPath(""String_Node_Str"");
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  }
  mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.isXmlElementType() && property.getGenericType() != null) {
    Class theClass=helper.getClassForJavaClass(property.getGenericType());
    mapping.setAttributeElementClass(theClass);
  }
  if (xmlField.getXPathFragment().isAttribute()) {
    mapping.setUsesSingleNode(true);
  }
  if (property.isXmlList()) {
    mapping.setUsesSingleNode(true);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}","public XMLCompositeDirectCollectionMapping generateDirectCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    String componentClassName=collectionType.getComponentType().getRawName();
    if (collectionType.getComponentType().isPrimitive()) {
      Class primitiveClass=XMLConversionManager.getDefaultManager().convertClassNameToClass(componentClassName);
      accessor.setComponentClass(primitiveClass);
      mapping.setAttributeAccessor(accessor);
      Class declaredClass=XMLConversionManager.getDefaultManager().getObjectClass(primitiveClass);
      mapping.setAttributeElementClass(declaredClass);
    }
 else {
      accessor.setComponentClassName(componentClassName);
      mapping.setAttributeAccessor(accessor);
      JavaClass componentType=collectionType.getComponentType();
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(componentType.getRawName(),false,helper.getClassLoader());
        mapping.setAttributeElementClass(declaredClass);
      }
 catch (      Exception e) {
      }
    }
    collectionType=jotArrayList;
  }
 else   if (isCollectionType(collectionType)) {
    if (collectionType.hasActualTypeArguments()) {
      JavaClass itemType=(JavaClass)collectionType.getActualTypeArguments().toArray()[0];
      try {
        Class declaredClass=PrivilegedAccessHelper.getClassForName(itemType.getRawName(),false,helper.getClassLoader());
        mapping.setAttributeElementClass(declaredClass);
      }
 catch (      Exception e) {
      }
    }
  }
  if (areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  XMLField xmlField=getXPathForField(property,namespaceInfo,true);
  mapping.setField(xmlField);
  if (helper.isAnnotationPresent(property.getElement(),XmlMixed.class)) {
    xmlField.setXPath(""String_Node_Str"");
  }
  if (XMLConstants.QNAME_QNAME.equals(property.getSchemaType())) {
    ((XMLField)mapping.getField()).setSchemaType(XMLConstants.QNAME_QNAME);
  }
  if (property.isSetNullPolicy()) {
    mapping.setNullPolicy(getNullPolicyFromProperty(property,namespaceInfo.getNamespaceResolverForDescriptor()));
  }
 else   if (property.isNillable()) {
    mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
    mapping.getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
  }
  mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
  if (property.isRequired()) {
    ((XMLField)mapping.getField()).setRequired(true);
  }
  if (property.isXmlElementType() && property.getGenericType() != null) {
    Class theClass=helper.getClassForJavaClass(property.getGenericType());
    mapping.setAttributeElementClass(theClass);
  }
  if (xmlField.getXPathFragment().isAttribute() || property.isXmlList() || xmlField.getXPathFragment().nameIsText()) {
    mapping.setUsesSingleNode(true);
  }
  if (property.isSetCdata()) {
    mapping.setIsCDATA(property.isCdata());
  }
  return mapping;
}"
65699,"public void startCDATA(){
  if (xPathNode.getUnmarshalNodeValue() != null) {
    this.isBufferCDATA=true;
  }
}","public void startCDATA(){
  if (null != xPathNode && xPathNode.getUnmarshalNodeValue() != null) {
    this.isBufferCDATA=true;
  }
}"
65700,"@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=attributeLocalName.indexOf(namespaceSeperator);
          if (nsIndex > -1) {
            String prefix=attributeLocalName.substring(0,nsIndex);
            attributeLocalName=attributeLocalName.substring(nsIndex + namespaceSeperator.length());
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        Tree childValueTree=childTree.getChild(1);
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
            String stringValue=childValueTree.getChild(0).getText();
            attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
            break;
          }
case JSONLexer.NUMBER:
{
          attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
          break;
        }
case JSONLexer.TRUE:
{
        attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
        break;
      }
case JSONLexer.FALSE:
{
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
      break;
    }
case JSONLexer.NULL:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,XMLConstants.EMPTY_STRING));
    break;
  }
}
}
}
 else {
attributes=Collections.EMPTY_LIST;
}
}
return attributes;
}","@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=attributeLocalName.indexOf(namespaceSeperator);
          if (nsIndex > -1) {
            String prefix=attributeLocalName.substring(0,nsIndex);
            attributeLocalName=attributeLocalName.substring(nsIndex + namespaceSeperator.length());
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        Tree childValueTree=childTree.getChild(1);
        if (childValueTree.getType() == JSONLexer.ARRAY) {
          for (int y=0, size=childValueTree.getChildCount(); y < size; y++) {
            CommonTree nextChildTree=(CommonTree)childValueTree.getChild(y);
            addSimpleAttribute(attributes,uri,attributeLocalName,nextChildTree);
          }
        }
 else {
          addSimpleAttribute(attributes,uri,attributeLocalName,childValueTree);
        }
      }
    }
 else {
      attributes=Collections.EMPTY_LIST;
    }
  }
  return attributes;
}"
65701,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      isStartElementOpen=false;
      writer.write('>');
    }
    writer.write(""String_Node_Str"");
    writer.write(value);
    writer.write(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  writeStringValueCharacters(value);
}"
65702,"private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          this.addContainerValue(unmarshalValue);
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}","private void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    XMLDescriptor xmlDescriptor=(XMLDescriptor)getDescriptor();
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    DatabaseMapping xmlMapping;
    AbstractTransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    XMLField xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(DatabaseMapping)mappingIterator.next();
      if (xmlMapping instanceof XMLInverseReferenceMapping) {
        continue;
      }
      xmlField=(XMLField)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(AbstractTransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue();
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(XMLField)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((FieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((XMLDirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((XMLCompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((XMLCompositeDirectCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((XMLCompositeCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((XMLAnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((XMLAnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLAnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((XMLAnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((XMLBinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLBinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((XMLBinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((XMLFragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLFragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((XMLFragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof XMLCollectionReferenceMapping) {
          XMLCollectionReferenceMapping xmlColMapping=(XMLCollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          XMLField xmlColMappingField=(XMLField)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((XMLField)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          Iterator fieldIt=fields.iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLObjectReferenceMapping) {
          XMLObjectReferenceMapping xmlORMapping=(XMLObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            XMLField xmlFld=(XMLField)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceObjectMapping) {
          XMLChoiceObjectMapping xmlChoiceMapping=(XMLChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField=(XMLField)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          this.addNullCapableValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof XMLChoiceCollectionMapping) {
          XMLChoiceCollectionMapping xmlChoiceMapping=(XMLChoiceCollectionMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          XMLField firstField;
          firstField=(XMLField)fields.next();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<XMLField,NodeValue> fieldToNodeValues=new HashMap<XMLField,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(firstField))) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            XMLField next=(XMLField)fields.next();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,next);
            nodeValue.setContainerNodeValue(unmarshalValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(next,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == xmlChoiceMapping.getChoiceElementMappings().get(next))) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          XMLField typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + XMLConstants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL)+ XMLConstants.COLON+ XMLConstants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((AbstractDirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    initialized=true;
  }
}"
65703,"public boolean isOwningNode(XPathFragment xPathFragment){
  return choiceElementNodeValue.isOwningNode(xPathFragment);
}","public boolean isOwningNode(XPathFragment xPathFragment){
  if (isMixedNodeValue) {
    if (xPathFragment.nameIsText()) {
      return true;
    }
 else {
      return false;
    }
  }
  return choiceElementNodeValue.isOwningNode(xPathFragment);
}"
65704,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Converter converter=xmlChoiceCollectionMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  NodeValue associatedNodeValue=null;
  XMLField associatedField=null;
  Object fieldValue=value;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
  }
  if (associatedField == null) {
    List<XMLField> sourceFields=xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
    }
  }
  if (associatedField != null) {
    associatedNodeValue=this.fieldToNodeValues.get(associatedField);
  }
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedField.getXPathFragment();
    associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
    while (frag != null) {
      if (associatedNodeValue.isOwningNode(frag)) {
        ContainerValue nestedNodeValue=(ContainerValue)associatedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
        break;
      }
      frag=frag.getNextFragment();
      if (frag == null) {
        ContainerValue nestedNodeValue=(ContainerValue)associatedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
      }
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Converter converter=xmlChoiceCollectionMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  NodeValue associatedNodeValue=null;
  XMLField associatedField=null;
  Object fieldValue=value;
  if (value instanceof XMLRoot) {
    XMLRoot rootValue=(XMLRoot)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(fieldValue.getClass());
    }
  }
 else {
    if (value.getClass() == ClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
      marshalMixedContent(marshalRecord,(String)value);
      return true;
    }
 else {
      associatedField=xmlChoiceCollectionMapping.getClassToFieldMappings().get(value.getClass());
    }
  }
  if (associatedField == null) {
    List<XMLField> sourceFields=xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(value.getClass());
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
    }
  }
  if (associatedField != null) {
    associatedNodeValue=this.fieldToNodeValues.get(associatedField);
  }
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedField.getXPathFragment();
    NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
    while (frag != null) {
      if (associatedNodeValue.isOwningNode(frag)) {
        ContainerValue nestedNodeValue=(ContainerValue)unwrappedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
        break;
      }
      frag=frag.getNextFragment();
      if (frag == null) {
        ContainerValue nestedNodeValue=(ContainerValue)associatedNodeValue;
        nestedNodeValue.marshalSingleValue(frag,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
      }
    }
  }
  return true;
}"
65705,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object nextValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}"
65706,"public boolean isOwningNode(XPathFragment xPathFragment){
  return choiceElementNodeValue.isOwningNode(xPathFragment);
}","public boolean isOwningNode(XPathFragment xPathFragment){
  if (isMixedNodeValue) {
    if (xPathFragment.nameIsText()) {
      return true;
    }
 else {
      return false;
    }
  }
  return choiceElementNodeValue.isOwningNode(xPathFragment);
}"
65707,"public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=new XPathNode();
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null == nonAttributeChildren) {
        nonAttributeChildren=new ArrayList();
      }
      nonAttributeChildren.add(textXPathNode);
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}","public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null == nonAttributeChildren) {
        nonAttributeChildren=new ArrayList();
      }
      if (!(nonAttributeChildren.contains(textXPathNode))) {
        nonAttributeChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue) {
      setAnyAttributeNodeValue((XMLAnyAttributeMappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}"
65708,"/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  return (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlInlineBinaryData.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)|| helper.isAnnotationPresent(elem,XmlTransient.class)|| helper.isAnnotationPresent(elem,XmlPath.class)|| helper.isAnnotationPresent(elem,XmlPaths.class)|| helper.isAnnotationPresent(elem,XmlInverseReference.class)|| helper.isAnnotationPresent(elem,XmlJoinNode.class)|| helper.isAnnotationPresent(elem,XmlJoinNodes.class)|| helper.isAnnotationPresent(elem,XmlReadOnly.class)|| helper.isAnnotationPresent(elem,XmlWriteOnly.class)|| helper.isAnnotationPresent(elem,XmlCDATA.class)|| helper.isAnnotationPresent(elem,XmlAccessMethods.class)|| helper.isAnnotationPresent(elem,XmlNullPolicy.class)|| helper.isAnnotationPresent(elem,XmlJavaTypeAdapter.class)|| helper.isAnnotationPresent(elem,XmlMixed.class));
}","/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  return (helper.isAnnotationPresent(elem,XmlAttachmentRef.class)) || (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlInlineBinaryData.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)|| helper.isAnnotationPresent(elem,XmlTransient.class)|| helper.isAnnotationPresent(elem,XmlPath.class)|| helper.isAnnotationPresent(elem,XmlPaths.class)|| helper.isAnnotationPresent(elem,XmlInverseReference.class)|| helper.isAnnotationPresent(elem,XmlJoinNode.class)|| helper.isAnnotationPresent(elem,XmlJoinNodes.class)|| helper.isAnnotationPresent(elem,XmlReadOnly.class)|| helper.isAnnotationPresent(elem,XmlWriteOnly.class)|| helper.isAnnotationPresent(elem,XmlCDATA.class)|| helper.isAnnotationPresent(elem,XmlAccessMethods.class)|| helper.isAnnotationPresent(elem,XmlNullPolicy.class)|| helper.isAnnotationPresent(elem,XmlJavaTypeAdapter.class)|| helper.isAnnotationPresent(elem,XmlMixed.class));
}"
65709,"/** 
 * INTERNAL: To validate mappings declaration
 */
@Override public void validateBeforeInitialization(AbstractSession session) throws DescriptorException {
  super.validateBeforeInitialization(session);
  if ((this.indirectionPolicy instanceof WeavedObjectBasicIndirectionPolicy) && !ClassConstants.PersistenceWeavedLazy_Class.isAssignableFrom(getDescriptor().getJavaClass())) {
    WeavedObjectBasicIndirectionPolicy policy=(WeavedObjectBasicIndirectionPolicy)this.indirectionPolicy;
    Object[] args=new Object[2];
    args[0]=getAttributeName();
    args[1]=getDescriptor().getJavaClass();
    session.log(SessionLog.WARNING,SessionLog.EJB_OR_METADATA,""String_Node_Str"",args);
    setIndirectionPolicy(new NoIndirectionPolicy());
  }
  if (getAttributeAccessor() instanceof InstanceVariableAttributeAccessor) {
    Class attributeType=((InstanceVariableAttributeAccessor)getAttributeAccessor()).getAttributeType();
    this.indirectionPolicy.validateDeclaredAttributeType(attributeType,session.getIntegrityChecker());
  }
 else   if (getAttributeAccessor().isMethodAttributeAccessor()) {
    Class returnType=((MethodAttributeAccessor)getAttributeAccessor()).getGetMethodReturnType();
    this.indirectionPolicy.validateGetMethodReturnType(returnType,session.getIntegrityChecker());
    Class parameterType=((MethodAttributeAccessor)getAttributeAccessor()).getSetMethodParameterType();
    this.indirectionPolicy.validateSetMethodParameterType(parameterType,session.getIntegrityChecker());
  }
}","/** 
 * INTERNAL: To validate mappings declaration
 */
@Override public void validateBeforeInitialization(AbstractSession session) throws DescriptorException {
  super.validateBeforeInitialization(session);
  if ((this.indirectionPolicy instanceof WeavedObjectBasicIndirectionPolicy) && !ClassConstants.PersistenceWeavedLazy_Class.isAssignableFrom(getDescriptor().getJavaClass())) {
    Object[] args=new Object[2];
    args[0]=getAttributeName();
    args[1]=getDescriptor().getJavaClass();
    session.log(SessionLog.WARNING,SessionLog.EJB_OR_METADATA,""String_Node_Str"",args);
    setIndirectionPolicy(new NoIndirectionPolicy());
  }
  if (getAttributeAccessor() instanceof InstanceVariableAttributeAccessor) {
    Class attributeType=((InstanceVariableAttributeAccessor)getAttributeAccessor()).getAttributeType();
    this.indirectionPolicy.validateDeclaredAttributeType(attributeType,session.getIntegrityChecker());
  }
 else   if (getAttributeAccessor().isMethodAttributeAccessor()) {
    Class returnType=((MethodAttributeAccessor)getAttributeAccessor()).getGetMethodReturnType();
    this.indirectionPolicy.validateGetMethodReturnType(returnType,session.getIntegrityChecker());
    Class parameterType=((MethodAttributeAccessor)getAttributeAccessor()).getSetMethodParameterType();
    this.indirectionPolicy.validateSetMethodParameterType(parameterType,session.getIntegrityChecker());
  }
}"
65710,"private String getTypeValueToWrite(XMLRecord record,XMLSchemaReference xmlRef,boolean addToNamespaceResolver){
  String typeValue=xmlRef.getSchemaContext();
  if (typeValue == null) {
    QName contextAsQName=xmlRef.getSchemaContextAsQName();
    if (contextAsQName != null) {
      String uri=contextAsQName.getNamespaceURI();
      String localPart=contextAsQName.getLocalPart();
      String prefix=record.getNamespaceResolver().resolveNamespaceURI(uri);
      if (prefix == null) {
        String defaultUri=record.getNamespaceResolver().getDefaultNamespaceURI();
        if (defaultUri != null && defaultUri.equals(uri)) {
          return localPart;
        }
 else {
          prefix=record.getNamespaceResolver().generatePrefix();
          writeNamespace(record,prefix,uri,addToNamespaceResolver);
          return prefix + XMLConstants.COLON + localPart;
        }
      }
 else {
        return prefix + XMLConstants.COLON + localPart;
      }
    }
    return null;
  }
 else {
    return typeValue.substring(1);
  }
}","private String getTypeValueToWrite(XMLRecord record,XMLDescriptor descriptorToWrite,XMLSchemaReference xmlRef,boolean addToNamespaceResolver){
  String typeValue=xmlRef.getSchemaContext();
  if (typeValue == null) {
    QName contextAsQName=xmlRef.getSchemaContextAsQName();
    if (contextAsQName != null) {
      String uri=contextAsQName.getNamespaceURI();
      String localPart=contextAsQName.getLocalPart();
      String prefix=record.getNamespaceResolver().resolveNamespaceURI(uri);
      if (prefix == null) {
        String defaultUri=record.getNamespaceResolver().getDefaultNamespaceURI();
        if (defaultUri != null && defaultUri.equals(uri)) {
          return localPart;
        }
 else {
          prefix=record.getNamespaceResolver().generatePrefix();
          writeNamespace(record,prefix,uri,addToNamespaceResolver);
          return prefix + XMLConstants.COLON + localPart;
        }
      }
 else {
        return prefix + XMLConstants.COLON + localPart;
      }
    }
    return null;
  }
 else {
    return updateTypeValue(typeValue,descriptorToWrite.getNonNullNamespaceResolver(),record,addToNamespaceResolver);
  }
}"
65711,"public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      String typeValue=getTypeValueToWrite(record,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}","public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      String typeValue=getTypeValueToWrite(record,xmlDescriptor,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}"
65712,"/** 
 * INTERNAL: Ensure the container policy is post initialized
 */
@Override public void postInitialize(AbstractSession session){
  super.postInitialize(session);
  this.containerPolicy.postInitialize(session);
  if (this.referenceDescriptor != null && this.mustDeleteReferenceObjectsOneByOne == null) {
    this.mustDeleteReferenceObjectsOneByOne=this.referenceDescriptor.hasDependencyOnParts() || this.referenceDescriptor.usesOptimisticLocking() || (this.referenceDescriptor.hasInheritance() && this.referenceDescriptor.getInheritancePolicy().shouldReadSubclasses())|| this.referenceDescriptor.hasMultipleTables()|| this.containerPolicy.propagatesEventsToCollection()|| this.referenceDescriptor.hasRelationshipsExceptBackpointer(descriptor);
  }
 else {
    this.mustDeleteReferenceObjectsOneByOne=false;
  }
}","/** 
 * INTERNAL: Ensure the container policy is post initialized
 */
@Override public void postInitialize(AbstractSession session){
  super.postInitialize(session);
  this.containerPolicy.postInitialize(session);
  if (this.referenceDescriptor != null && this.mustDeleteReferenceObjectsOneByOne == null) {
    this.mustDeleteReferenceObjectsOneByOne=this.referenceDescriptor.hasDependencyOnParts() || this.referenceDescriptor.usesOptimisticLocking() || (this.referenceDescriptor.hasInheritance() && this.referenceDescriptor.getInheritancePolicy().shouldReadSubclasses())|| this.referenceDescriptor.hasMultipleTables()|| this.containerPolicy.propagatesEventsToCollection()|| this.referenceDescriptor.hasRelationshipsExceptBackpointer(descriptor);
  }
 else   if (this.mustDeleteReferenceObjectsOneByOne == null) {
    this.mustDeleteReferenceObjectsOneByOne=false;
  }
}"
65713,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        QName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new QName(uri,localPart);
        }
 else {
          if (namespaceResolver != null) {
            qname=new QName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue);
          }
 else {
            qname=new QName(indicatorValue);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        QName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new QName(uri,localPart);
        }
 else {
          if (namespaceResolver != null) {
            qname=new QName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue);
          }
 else {
            qname=new QName(indicatorValue);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (isRootParentDescriptor() && getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65714,"public JSONAttributes setTree(Tree tree){
  reset();
  this.tree=tree;
  return this;
}","public JSONAttributes setTree(Tree tree,String attributePrefix){
  reset();
  this.tree=tree;
  this.attributePrefix=attributePrefix;
  return this;
}"
65715,"private void parseRoot(Tree tree) throws SAXException {
  if (tree.getType() == JSONLexer.OBJECT) {
    int children=tree.getChildCount();
    if (children == 1) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(""String_Node_Str"",""String_Node_Str"",null,attributes.setTree(tree));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(""String_Node_Str"",""String_Node_Str"",null);
    }
  }
}","private void parseRoot(Tree tree) throws SAXException {
  if (tree.getType() == JSONLexer.OBJECT) {
    int children=tree.getChildCount();
    if (children == 1) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(""String_Node_Str"",""String_Node_Str"",null,attributes.setTree(tree,attributePrefix));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(""String_Node_Str"",""String_Node_Str"",null);
    }
  }
}"
65716,"@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        Tree childValueTree=childTree.getChild(1);
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
            String stringValue=childValueTree.getChild(0).getText();
            attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
            break;
          }
case JSONLexer.NUMBER:
{
          attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
          break;
        }
case JSONLexer.TRUE:
{
        attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,TRUE));
        break;
      }
case JSONLexer.FALSE:
{
      attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,FALSE));
      break;
    }
case JSONLexer.NULL:
{
    attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,""String_Node_Str""));
    break;
  }
}
}
}
 else {
attributes=Collections.EMPTY_LIST;
}
}
return attributes;
}","@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        Tree childValueTree=childTree.getChild(1);
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
            String stringValue=childValueTree.getChild(0).getText();
            attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
            break;
          }
case JSONLexer.NUMBER:
{
          attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
          break;
        }
case JSONLexer.TRUE:
{
        attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,TRUE));
        break;
      }
case JSONLexer.FALSE:
{
      attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,FALSE));
      break;
    }
case JSONLexer.NULL:
{
    attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,""String_Node_Str""));
    break;
  }
}
}
}
 else {
attributes=Collections.EMPTY_LIST;
}
}
return attributes;
}"
65717,"private void parse(Tree tree) throws SAXException {
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String localName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        contentHandler.startElement(""String_Node_Str"",localName,localName,attributes.setTree(valueTree));
        parse(valueTree);
        contentHandler.endElement(""String_Node_Str"",localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
contentHandler.startElement(""String_Node_Str"",parentLocalName,parentLocalName,attributes.setTree(nextChildTree));
parse(nextChildTree);
contentHandler.endElement(""String_Node_Str"",parentLocalName,parentLocalName);
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String localName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        if (attributePrefix != null && localName.startsWith(attributePrefix)) {
          break;
        }
 else {
          contentHandler.startElement(""String_Node_Str"",localName,localName,attributes.setTree(valueTree,attributePrefix));
        }
        parse(valueTree);
        contentHandler.endElement(""String_Node_Str"",localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
contentHandler.startElement(""String_Node_Str"",parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix));
parse(nextChildTree);
contentHandler.endElement(""String_Node_Str"",parentLocalName,parentLocalName);
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
65718,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      isStartElementOpen=true;
      writer.write('""');
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if (position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    XPathFragment next=xPathFragment.getNextFragment();
    if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
      writer.write('{');
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if (position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    XPathFragment next=xPathFragment.getNextFragment();
    if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
      writer.write('{');
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65719,"/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.openStartElement(xPathFragment,namespaceResolver);
      isStartElementOpen=true;
      writer.write('""');
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if ((xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().nameIsText()) && position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    if (addOpenBrace) {
      XPathFragment next=xPathFragment.getNextFragment();
      if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
        writer.write('{');
      }
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.openStartElement(xPathFragment,namespaceResolver);
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if ((xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().nameIsText()) && position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    if (addOpenBrace) {
      XPathFragment next=xPathFragment.getNextFragment();
      if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
        writer.write('{');
      }
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65720,"public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,false);
  endElement(xPathFragment,namespaceResolver);
}","public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  xPathFragment.setAttribute(true);
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,false);
  endElement(xPathFragment,namespaceResolver);
}"
65721,"/** 
 * INTERNAL: Subclasses that need to add field to an expresison should override this method.
 */
@Override public void postInitialize(AbstractSession session){
  if (includeTenantCriteria) {
    Expression expression=getDescriptor().getQueryManager().getAdditionalJoinExpression();
    ExpressionBuilder builder=(expression == null) ? new ExpressionBuilder() : expression.getBuilder();
    for (    DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
      String property=tenantDiscriminatorFields.get(discriminatorField);
      DatabaseField newField=new DatabaseField();
      newField.setName(property,session.getPlatform());
      Expression tenantIdExpression=builder.and(builder.getField(discriminatorField).equal(builder.getProperty(newField)));
      if (expression == null) {
        expression=tenantIdExpression;
      }
 else {
        expression=expression.and(tenantIdExpression);
      }
    }
    getDescriptor().getQueryManager().setAdditionalJoinExpression(expression);
  }
}","/** 
 * INTERNAL: Subclasses that need to add field to an expresison should override this method.
 */
public void postInitialize(AbstractSession session){
  if (includeTenantCriteria) {
    Expression expression=getDescriptor().getQueryManager().getAdditionalJoinExpression();
    ExpressionBuilder builder=(expression == null) ? new ExpressionBuilder() : expression.getBuilder();
    for (    DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
      String property=tenantDiscriminatorFields.get(discriminatorField);
      DatabaseField newField=new DatabaseField();
      newField.setName(property,session.getPlatform());
      Expression tenantIdExpression=builder.and(builder.getField(discriminatorField).equal(builder.getProperty(newField)));
      if (expression == null) {
        expression=tenantIdExpression;
      }
 else {
        expression=expression.and(tenantIdExpression);
      }
    }
    getDescriptor().getQueryManager().setAdditionalJoinExpression(expression);
  }
}"
65722,"/** 
 * INTERNAL:
 */
@Override public void addToTableDefinition(TableDefinition tableDefinition){
}","/** 
 * INTERNAL:
 */
public void addToTableDefinition(TableDefinition tableDefinition){
}"
65723,"/** 
 * INTERNAL: Allow the descriptor to initialize any dependencies on this session.
 */
@Override public void preInitialize(AbstractSession session) throws DescriptorException {
  for (  DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
    getDescriptor().getFields().add(getDescriptor().buildField(discriminatorField));
  }
}","/** 
 * INTERNAL: Allow the descriptor to initialize any dependencies on this session.
 */
public void preInitialize(AbstractSession session) throws DescriptorException {
  for (  DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
    getDescriptor().getFields().add(getDescriptor().buildField(discriminatorField));
  }
}"
65724,"/** 
 * INTERNAL:
 */
@Override public MultitenantPolicy clone(ClassDescriptor descriptor){
  SingleTableMultitenantPolicy clonedPolicy=new SingleTableMultitenantPolicy(descriptor);
  clonedPolicy.includeTenantCriteria=includeTenantCriteria;
  clonedPolicy.tenantDiscriminatorFields=tenantDiscriminatorFields;
  return clonedPolicy;
}","/** 
 * INTERNAL:
 */
public MultitenantPolicy clone(ClassDescriptor descriptor){
  SingleTableMultitenantPolicy clonedPolicy=new SingleTableMultitenantPolicy(descriptor);
  clonedPolicy.includeTenantCriteria=includeTenantCriteria;
  clonedPolicy.tenantDiscriminatorFields=tenantDiscriminatorFields;
  return clonedPolicy;
}"
65725,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
@Override public void initialize(AbstractSession session) throws DescriptorException {
  if (hasTenantDiscriminatorFields()) {
    for (    DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
      DatabaseMapping mapping=getDescriptor().getObjectBuilder().getMappingForField(discriminatorField);
      if (mapping != null && !mapping.isReadOnly()) {
        throw ValidationException.nonReadOnlyMappedTenantDiscriminatorField(getDescriptor().getJavaClassName(),discriminatorField.getQualifiedName());
      }
    }
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (hasTenantDiscriminatorFields()) {
    for (    DatabaseField discriminatorField : tenantDiscriminatorFields.keySet()) {
      DatabaseMapping mapping=getDescriptor().getObjectBuilder().getMappingForField(discriminatorField);
      if (mapping != null && !mapping.isReadOnly()) {
        throw ValidationException.nonReadOnlyMappedTenantDiscriminatorField(getDescriptor().getJavaClassName(),discriminatorField.getQualifiedName());
      }
    }
  }
}"
65726,"public JSONAttributes setTree(Tree tree,String attributePrefix){
  reset();
  this.tree=tree;
  this.attributePrefix=attributePrefix;
  return this;
}","public JSONAttributes setTree(Tree tree,String attributePrefix,NamespaceResolver nr,String namespaceSeperator,boolean namespaceAware){
  reset();
  this.tree=tree;
  this.attributePrefix=attributePrefix;
  this.namespaces=nr;
  this.namespaceSeperator=namespaceSeperator;
  this.namespaceAware=namespaceAware;
  return this;
}"
65727,"private void parseRoot(Tree tree) throws SAXException {
  if (tree.getType() == JSONLexer.OBJECT) {
    int children=tree.getChildCount();
    if (children == 1) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(""String_Node_Str"",""String_Node_Str"",null,attributes.setTree(tree,attributePrefix));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(""String_Node_Str"",""String_Node_Str"",null);
    }
  }
}","private void parseRoot(Tree tree) throws SAXException {
  if (tree.getType() == JSONLexer.OBJECT) {
    int children=tree.getChildCount();
    if (children == 1) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      contentHandler.startElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeperator,namespaceAware));
      for (int x=0, size=tree.getChildCount(); x < size; x++) {
        parse((CommonTree)tree.getChild(x));
      }
      contentHandler.endElement(XMLConstants.EMPTY_STRING,XMLConstants.EMPTY_STRING,null);
    }
  }
}"
65728,"@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        Tree childValueTree=childTree.getChild(1);
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
            String stringValue=childValueTree.getChild(0).getText();
            attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
            break;
          }
case JSONLexer.NUMBER:
{
          attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
          break;
        }
case JSONLexer.TRUE:
{
        attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,TRUE));
        break;
      }
case JSONLexer.FALSE:
{
      attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,FALSE));
      break;
    }
case JSONLexer.NULL:
{
    attributes.add(new Attribute(""String_Node_Str"",attributeLocalName,attributeLocalName,""String_Node_Str""));
    break;
  }
}
}
}
 else {
attributes=Collections.EMPTY_LIST;
}
}
return attributes;
}","@Override protected List<Attribute> attributes(){
  if (null == attributes) {
    if (tree.getType() == JSONLexer.NULL) {
      attributes=new ArrayList<Attribute>(1);
      attributes.add(new Attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str""));
      return attributes;
    }
    if (tree.getType() == JSONLexer.OBJECT) {
      attributes=new ArrayList<Attribute>(tree.getChildCount());
      for (int x=0; x < tree.getChildCount(); x++) {
        Tree childTree=tree.getChild(x);
        String attributeLocalName=childTree.getChild(0).getText().substring(1,childTree.getChild(0).getText().length() - 1);
        if (attributePrefix != null) {
          if (attributeLocalName.startsWith(attributePrefix)) {
            attributeLocalName=attributeLocalName.substring(attributePrefix.length());
          }
 else {
            break;
          }
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=attributeLocalName.indexOf(namespaceSeperator);
          if (nsIndex > -1) {
            String prefix=attributeLocalName.substring(0,nsIndex);
            attributeLocalName=attributeLocalName.substring(nsIndex + namespaceSeperator.length());
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        Tree childValueTree=childTree.getChild(1);
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
            String stringValue=childValueTree.getChild(0).getText();
            attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue.substring(1,stringValue.length() - 1)));
            break;
          }
case JSONLexer.NUMBER:
{
          attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
          break;
        }
case JSONLexer.TRUE:
{
        attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
        break;
      }
case JSONLexer.FALSE:
{
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
      break;
    }
case JSONLexer.NULL:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,XMLConstants.EMPTY_STRING));
    break;
  }
}
}
}
 else {
attributes=Collections.EMPTY_LIST;
}
}
return attributes;
}"
65729,"private void parse(Tree tree) throws SAXException {
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String localName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        if (attributePrefix != null && localName.startsWith(attributePrefix)) {
          break;
        }
 else {
          contentHandler.startElement(""String_Node_Str"",localName,localName,attributes.setTree(valueTree,attributePrefix));
        }
        parse(valueTree);
        contentHandler.endElement(""String_Node_Str"",localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
contentHandler.startElement(""String_Node_Str"",parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix));
parse(nextChildTree);
contentHandler.endElement(""String_Node_Str"",parentLocalName,parentLocalName);
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String localName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        if (attributePrefix != null && localName.startsWith(attributePrefix)) {
          break;
        }
        String uri=XMLConstants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          int nsIndex=localName.indexOf(namespaceSeperator);
          if (nsIndex > -1) {
            String prefix=localName.substring(0,nsIndex);
            localName=localName.substring(nsIndex + namespaceSeperator.length());
            uri=namespaces.resolveNamespacePrefix(prefix);
          }
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeperator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
String uri=XMLConstants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
int nsIndex=parentLocalName.indexOf(namespaceSeperator);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
parentLocalName=parentLocalName.substring(nsIndex + namespaceSeperator.length());
uri=namespaces.resolveNamespacePrefix(prefix);
}
}
for (int x=0, size=tree.getChildCount(); x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeperator,namespaceAware));
parse(nextChildTree);
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
65730,"public JSONReader(Properties props){
  if (props != null) {
    attributePrefix=props.getProperty(""String_Node_Str"");
    if (attributePrefix == ""String_Node_Str"") {
      attributePrefix=null;
    }
  }
}","public JSONReader(String attrPrefix,NamespaceResolver nr,boolean namespaceAware){
  this.attributePrefix=attrPrefix;
  if (attributePrefix == XMLConstants.EMPTY_STRING) {
    attributePrefix=null;
  }
  namespaces=nr;
  this.namespaceAware=namespaceAware;
}"
65731,"/** 
 * Set the MediaType for this xmlMarshaller. See org.eclipse.persistence.oxm.MediaType for the media types supported by EclipseLink MOXy
 * @param mediaType
 */
public void setMediaType(MediaType mediaType){
  this.mediaType=mediaType;
}","/** 
 * Set the MediaType for this xmlMarshaller. See org.eclipse.persistence.oxm.MediaType for the media types supported by EclipseLink MOXy
 * @param mediaType
 */
public void setMediaType(MediaType mediaType){
  this.mediaType=mediaType;
  namespaceAware=(mediaType == MediaType.APPLICATION_XML || namespaceResolver != null);
}"
65732,"private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(XMLConstants.DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
}","private void initialize(){
  XMLPlatform xmlPlatform=XMLPlatformFactory.getInstance().getXMLPlatform();
  transformer=xmlPlatform.newXMLTransformer();
  setEncoding(XMLConstants.DEFAULT_XML_ENCODING);
  setFormattedOutput(true);
  marshalProperties=new Properties();
  namespaceAware=(mediaType == MediaType.APPLICATION_XML);
}"
65733,"protected XMLUnmarshaller(XMLContext xmlContext,Map<String,Boolean> parserFeatures){
  setXMLContext(xmlContext);
  stringBuffer=new StrBuffer();
  initialize(parserFeatures);
}","protected XMLUnmarshaller(XMLContext xmlContext,Map<String,Boolean> parserFeatures){
  setXMLContext(xmlContext);
  stringBuffer=new StrBuffer();
  initialize(parserFeatures);
  namespaceAware=(mediaType == MediaType.APPLICATION_XML);
}"
65734,"/** 
 * Namespaces will be ignored during unmarshal operations when this method returns false.
 * @return if this unmarshaller should process namespace information
 */
public boolean isNamespaceAware(){
  return mediaType == MediaType.APPLICATION_XML;
}","/** 
 * INTERNAL: Namespaces will be ignored during unmarshal operations when this method returns false.
 * @return if this unmarshaller should process namespace information
 */
public boolean isNamespaceAware(){
  return namespaceAware;
}"
65735,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if (position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    XPathFragment next=xPathFragment.getNextFragment();
    if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
      writer.write('{');
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(TAB);
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      if (namespaceAware) {
        if (xPathFragment.getNamespaceURI() != null) {
          String prefix=null;
          if (namespaces != null) {
            prefix=namespaces.resolveNamespaceURI(xPathFragment.getNamespaceURI());
          }
 else           if (namespaceResolver != null) {
            prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
          }
          if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
            writer.write(prefix);
            writer.write(namespaceSeperator);
          }
        }
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if (position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    XPathFragment next=xPathFragment.getNextFragment();
    if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
      writer.write('{');
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65736,"/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.openStartElement(xPathFragment,namespaceResolver);
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if ((xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().nameIsText()) && position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    if (addOpenBrace) {
      XPathFragment next=xPathFragment.getNextFragment();
      if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
        writer.write('{');
      }
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
private void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean addOpenBrace){
  try {
    Level position=null;
    if (levels.isEmpty()) {
      levels.push(new Level(true));
    }
 else {
      position=levels.peek();
      levels.push(new Level(true));
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
        writer.write(' ');
      }
    }
    if (position == null || !position.isCollection() || position.isEmptyCollection()) {
      super.openStartElement(xPathFragment,namespaceResolver);
      isStartElementOpen=true;
      writer.write('""');
      if (xPathFragment.isAttribute() && attributePrefix != null) {
        writer.write(attributePrefix);
      }
      if (namespaceAware) {
        if (xPathFragment.getNamespaceURI() != null) {
          String prefix=null;
          if (namespaces != null) {
            prefix=namespaces.resolveNamespaceURI(xPathFragment.getNamespaceURI());
          }
 else           if (namespaceResolver != null) {
            prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
          }
          if (prefix != null && !prefix.equals(XMLConstants.EMPTY_STRING)) {
            writer.write(prefix);
            writer.write(namespaceSeperator);
          }
        }
      }
      writer.write(xPathFragment.getLocalName());
      writer.write(""String_Node_Str"");
      if ((xPathFragment.getNextFragment() == null || xPathFragment.getNextFragment().nameIsText()) && position != null && position.isCollection()) {
        writer.write('[');
      }
      if (position != null && position.isEmptyCollection()) {
        position.setEmptyCollection(false);
      }
    }
    if (addOpenBrace) {
      XPathFragment next=xPathFragment.getNextFragment();
      if (!(xPathFragment.isAttribute() || xPathFragment.nameIsText() || (next != null && next.nameIsText()))) {
        writer.write('{');
      }
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65737,"public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  xPathFragment.setAttribute(true);
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,false);
  endElement(xPathFragment,namespaceResolver);
}","public void attribute(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,Object value,QName schemaType){
  if (xPathFragment.getNamespaceURI() != null && xPathFragment.getNamespaceURI() == XMLConstants.XMLNS_URL) {
    return;
  }
  xPathFragment.setAttribute(true);
  xPathFragment.setAttribute(true);
  openStartElement(xPathFragment,namespaceResolver);
  characters(schemaType,value,false);
  endElement(xPathFragment,namespaceResolver);
}"
65738,"/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=(String)marshaller.getProperty(""String_Node_Str"");
}","/** 
 * INTERNAL:
 */
public void setMarshaller(XMLMarshaller marshaller){
  super.setMarshaller(marshaller);
  attributePrefix=marshaller.getAttributePrefix();
  namespaces=marshaller.getNamespaceResolver();
  namespaceAware=marshaller.isNamespaceAware();
}"
65739,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        QName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new QName(uri,localPart);
        }
 else {
          if (namespaceResolver != null) {
            qname=new QName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue);
          }
 else {
            qname=new QName(indicatorValue);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (isRootParentDescriptor() && getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator() && (namespaceResolver != null)) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      if (key instanceof String) {
        QName qname;
        String indicatorValue=(String)key;
        int index=indicatorValue.indexOf(XMLConstants.COLON);
        if (index != -1) {
          String prefix=indicatorValue.substring(0,index);
          String localPart=indicatorValue.substring(index + 1);
          String uri=namespaceResolver.resolveNamespacePrefix(prefix);
          qname=new QName(uri,localPart);
        }
 else {
          if (namespaceResolver != null) {
            qname=new QName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue);
          }
 else {
            qname=new QName(indicatorValue);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
65740,"/** 
 * INTERNAL: Allow the descriptor to initialize any dependencies on this session.
 */
public void preInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(PREINITIALIZED)) {
    return;
  }
  setInitializationStage(PREINITIALIZED);
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    try {
      DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
      mapping.preInitialize(session);
    }
 catch (    DescriptorException exception) {
      session.getIntegrityChecker().handleError(exception);
    }
  }
  validateBeforeInitialization(session);
  preInitializeInheritancePolicy(session);
  if (hasInheritance()) {
    getInheritancePolicy().preInitialize(session);
  }
 else {
    setInternalDefaultTable();
  }
  verifyTableQualifiers(session.getDatasourcePlatform());
  initializeProperties(session);
  if (hasInterfacePolicy()) {
    preInterfaceInitialization(session);
  }
  getCachePolicy().assignDefaultValues(session);
}","/** 
 * INTERNAL: Allow the descriptor to initialize any dependencies on this session.
 */
public void preInitialize(AbstractSession session) throws DescriptorException {
  if (isInitialized(PREINITIALIZED)) {
    return;
  }
  setInitializationStage(PREINITIALIZED);
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    try {
      DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
      mapping.preInitialize(session);
    }
 catch (    DescriptorException exception) {
      session.getIntegrityChecker().handleError(exception);
    }
  }
  validateBeforeInitialization(session);
  preInitializeInheritancePolicy(session);
  verifyTableQualifiers(session.getDatasourcePlatform());
  initializeProperties(session);
  if (hasInterfacePolicy()) {
    preInterfaceInitialization(session);
  }
  getCachePolicy().assignDefaultValues(session);
}"
65741,"private XMLDescriptor buildAttributeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Attribute.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping useMapping=new XMLDirectMapping();
  useMapping.setAttributeName(""String_Node_Str"");
  useMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(useMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}","private XMLDescriptor buildAttributeDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Attribute.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping formMapping=new XMLDirectMapping();
  formMapping.setAttributeName(""String_Node_Str"");
  formMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(formMapping);
  XMLDirectMapping useMapping=new XMLDirectMapping();
  useMapping.setAttributeName(""String_Node_Str"");
  useMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(useMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}"
65742,"private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  maxOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(false);
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping subGroupMapping=new XMLDirectMapping();
  subGroupMapping.setAttributeName(""String_Node_Str"");
  subGroupMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(subGroupMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}","private XMLDescriptor buildElementDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Element.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  descriptor.setDefaultRootElement(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  XMLDirectMapping nameMapping=new XMLDirectMapping();
  nameMapping.setAttributeName(""String_Node_Str"");
  nameMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(nameMapping);
  XMLDirectMapping typeMapping=new XMLDirectMapping();
  typeMapping.setAttributeName(""String_Node_Str"");
  typeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(typeMapping);
  XMLDirectMapping formMapping=new XMLDirectMapping();
  formMapping.setAttributeName(""String_Node_Str"");
  formMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(formMapping);
  XMLDirectMapping refMapping=new XMLDirectMapping();
  refMapping.setAttributeName(""String_Node_Str"");
  refMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(refMapping);
  XMLDirectMapping minOccursMapping=new XMLDirectMapping();
  minOccursMapping.setAttributeName(""String_Node_Str"");
  minOccursMapping.setXPath(""String_Node_Str"");
  minOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(minOccursMapping);
  XMLDirectMapping maxOccursMapping=new XMLDirectMapping();
  maxOccursMapping.setAttributeName(""String_Node_Str"");
  maxOccursMapping.setXPath(""String_Node_Str"");
  maxOccursMapping.setNullValue(Occurs.ONE);
  descriptor.addMapping(maxOccursMapping);
  XMLDirectMapping nillableMapping=new XMLDirectMapping();
  nillableMapping.setAttributeName(""String_Node_Str"");
  nillableMapping.setXPath(""String_Node_Str"");
  nillableMapping.setNullValue(false);
  descriptor.addMapping(nillableMapping);
  XMLDirectMapping defaultMapping=new XMLDirectMapping();
  defaultMapping.setAttributeName(""String_Node_Str"");
  defaultMapping.setGetMethodName(""String_Node_Str"");
  defaultMapping.setSetMethodName(""String_Node_Str"");
  defaultMapping.setXPath(""String_Node_Str"");
  ((NullPolicy)defaultMapping.getNullPolicy()).setSetPerformedForAbsentNode(false);
  descriptor.addMapping(defaultMapping);
  XMLDirectMapping fixedMapping=new XMLDirectMapping();
  fixedMapping.setAttributeName(""String_Node_Str"");
  fixedMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(fixedMapping);
  XMLDirectMapping subGroupMapping=new XMLDirectMapping();
  subGroupMapping.setAttributeName(""String_Node_Str"");
  subGroupMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(subGroupMapping);
  XMLCompositeObjectMapping annotationMapping=new XMLCompositeObjectMapping();
  annotationMapping.setReferenceClass(Annotation.class);
  annotationMapping.setAttributeName(""String_Node_Str"");
  annotationMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(annotationMapping);
  XMLCompositeObjectMapping simpleTypeMapping=new XMLCompositeObjectMapping();
  simpleTypeMapping.setReferenceClass(SimpleType.class);
  simpleTypeMapping.setAttributeName(""String_Node_Str"");
  simpleTypeMapping.setGetMethodName(""String_Node_Str"");
  simpleTypeMapping.setSetMethodName(""String_Node_Str"");
  simpleTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(simpleTypeMapping);
  XMLCompositeObjectMapping complexTypeMapping=new XMLCompositeObjectMapping();
  complexTypeMapping.setReferenceClass(ComplexType.class);
  complexTypeMapping.setAttributeName(""String_Node_Str"");
  complexTypeMapping.setGetMethodName(""String_Node_Str"");
  complexTypeMapping.setSetMethodName(""String_Node_Str"");
  complexTypeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"");
  descriptor.addMapping(complexTypeMapping);
  XMLAnyAttributeMapping attributesMapMapping=new XMLAnyAttributeMapping();
  attributesMapMapping.setAttributeName(""String_Node_Str"");
  attributesMapMapping.setGetMethodName(""String_Node_Str"");
  attributesMapMapping.setSetMethodName(""String_Node_Str"");
  descriptor.addMapping(attributesMapMapping);
  return descriptor;
}"
65743,"@Test public void testRemoveNew() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  try {
    Department dep=new Department(1,""String_Node_Str"");
    env.beginTransaction(em);
    em.remove(dep);
    env.commitTransactionAndClear(em);
    verifyAbsenceOnDatabase(1);
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testRemoveNew() throws SQLException {
  final JPAEnvironment env=getEnvironment();
  final EntityManager em=env.getEntityManager();
  env.evictAll(em);
  try {
    Department dep=new Department(1,""String_Node_Str"");
    env.beginTransaction(em);
    em.remove(dep);
    env.commitTransactionAndClear(em);
    verifyAbsenceOnDatabase(1);
  }
  finally {
    closeEntityManager(em);
  }
}"
65744,"private void collectDeclarationIdentificationVariables(Map<String,List<IdentificationVariable>> identificationVariables){
  for (  Declaration declaration : queryContext.getDeclarations()) {
    IdentificationVariable identificationVariable=declaration.identificationVariable;
    addIdentificationVariable(identificationVariable,identificationVariables);
    for (    IdentificationVariable joinIdentificationVariable : declaration.joins.values()) {
      addIdentificationVariable(joinIdentificationVariable,identificationVariables);
    }
  }
}","private void collectDeclarationIdentificationVariables(JPQLQueryContext queryContext,Map<String,List<IdentificationVariable>> identificationVariables){
  for (  Declaration declaration : queryContext.getActualDeclarationResolver().getDeclarations()) {
    IdentificationVariable identificationVariable=declaration.identificationVariable;
    addIdentificationVariable(identificationVariable,identificationVariables);
    for (    IdentificationVariable joinIdentificationVariable : declaration.joins.values()) {
      addIdentificationVariable(joinIdentificationVariable,identificationVariables);
    }
  }
}"
65745,"private void validateIdentificationVariables(){
  Map<String,List<IdentificationVariable>> identificationVariables=new HashMap<String,List<IdentificationVariable>>();
  collectDeclarationIdentificationVariables(identificationVariables);
  for (  Map.Entry<String,List<IdentificationVariable>> entry : identificationVariables.entrySet()) {
    List<IdentificationVariable> variables=entry.getValue();
    if (variables.size() > 1) {
      for (      IdentificationVariable variable : variables) {
        addProblem(variable,IdentificationVariable_Invalid_Duplicate,variable.getText());
      }
    }
  }
  for (  IdentificationVariable identificationVariable : usedIdentificationVariables) {
    String variableName=identificationVariable.getText();
    if (ExpressionTools.stringIsNotEmpty(variableName) && !identificationVariables.containsKey(variableName.toUpperCase())) {
      addProblem(identificationVariable,IdentificationVariable_Invalid_NotDeclared,variableName);
    }
  }
}","private void validateIdentificationVariables(){
  Map<String,List<IdentificationVariable>> identificationVariables=new HashMap<String,List<IdentificationVariable>>();
  collectDeclarationIdentificationVariables(queryContext.getCurrentContext(),identificationVariables);
  for (  Map.Entry<String,List<IdentificationVariable>> entry : identificationVariables.entrySet()) {
    List<IdentificationVariable> variables=entry.getValue();
    if (variables.size() > 1) {
      for (      IdentificationVariable variable : variables) {
        addProblem(variable,IdentificationVariable_Invalid_Duplicate,variable.getText());
      }
    }
  }
  identificationVariables.clear();
  collectAllDeclarationIdentificationVariables(identificationVariables);
  for (  IdentificationVariable identificationVariable : usedIdentificationVariables) {
    String variableName=identificationVariable.getText();
    if (ExpressionTools.stringIsNotEmpty(variableName) && !identificationVariables.containsKey(variableName.toUpperCase())) {
      addProblem(identificationVariable,IdentificationVariable_Invalid_NotDeclared,variableName);
    }
  }
}"
65746,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
      processNamespacesForText(text.getTextContent(),endedElement);
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}"
65747,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value == null ? XMLConstants.EMPTY_STRING : value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    processNamespacesForText(text.getTextContent(),(Element)parent);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    String value=atts.getValue(x);
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),value);
    }
 else {
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value == null ? XMLConstants.EMPTY_STRING : value);
    }
    if (value != null) {
      processNamespacesForText(value,element);
    }
  }
}"
65748,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : unmarshalRecord.getPrefixesForFragment().entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}"
65749,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  unmarshalRecord.removeNullCapableValue(this);
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  unmarshalRecord.removeNullCapableValue(this);
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : unmarshalRecord.getPrefixesForFragment().entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
  return true;
}"
65750,"protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}","protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=XMLConstants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + XMLConstants.COLON + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : unmarshalRecord.getPrefixesForFragment().entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}"
65751,"public void startPrefixMapping(String prefix,String uri) throws SAXException {
  getUnmarshalNamespaceResolver().push(prefix,uri);
}","public void startPrefixMapping(String prefix,String uri) throws SAXException {
  getUnmarshalNamespaceResolver().push(prefix,uri);
  prefixesForFragment.put(prefix,uri);
}"
65752,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
    this.prefixesForFragment.clear();
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65753,"public UnmarshalRecord(TreeObjectBuilder treeObjectBuilder){
  super();
  this.xPathFragment=new XPathFragment();
  this.childRecordPool=new ArrayList<UnmarshalRecord>();
  initialize(treeObjectBuilder);
}","public UnmarshalRecord(TreeObjectBuilder treeObjectBuilder){
  super();
  this.xPathFragment=new XPathFragment();
  this.childRecordPool=new ArrayList<UnmarshalRecord>();
  this.prefixesForFragment=new HashMap<String,String>();
  initialize(treeObjectBuilder);
}"
65754,"public String getURI(int index){
  return attrs.get(index).getNamespaceURI();
}","public String getURI(int index){
  String uri=attrs.get(index).getNamespaceURI();
  if (uri == null) {
    uri=XMLConstants.EMPTY_STRING;
  }
  return uri;
}"
65755,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object collection=unmarshalRecord.getContainerInstance(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      if (xmlAnyCollectionMapping.getConverter() != null) {
        objectValue=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.getUnmarshaller().isNamespaceAware());
        if (xmlAnyCollectionMapping.getConverter() != null) {
          childObject=xmlAnyCollectionMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        }
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping.getConverter(),unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
65756,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    Object childObject=childRecord.getCurrentObject();
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false);
        workingDescriptor=null;
      }
    }
    if (xmlAnyObjectMapping.getConverter() != null) {
      childObject=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
    unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyObjectMapping,xmlAnyObjectMapping.getConverter(),unmarshalRecord,false,null);
    }
 else {
      if (xmlAnyObjectMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyObjectMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  unmarshalRecord.removeNullCapableValue(this);
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    Object childObject=childRecord.getCurrentObject();
    if (xmlAnyObjectMapping.usesXMLRoot()) {
      XMLDescriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.getUnmarshaller().isNamespaceAware());
        workingDescriptor=null;
      }
    }
    if (xmlAnyObjectMapping.getConverter() != null) {
      childObject=xmlAnyObjectMapping.getConverter().convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
    unmarshalRecord.setAttributeValue(childObject,xmlAnyObjectMapping);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyObjectMapping.getKeepAsElementPolicy();
    if ((((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT))) && (builder.getNodes().size() > 1)) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyObjectMapping,xmlAnyObjectMapping.getConverter(),unmarshalRecord,false,null);
    }
 else {
      if (xmlAnyObjectMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyObjectMapping.getConverter(),xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
65757,"public XPathFragment(){
  super();
}","public XPathFragment(){
  super();
  setNamespaceAware(true);
}"
65758,"public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (this.indexValue == xPathFragment.getIndexValue())&& (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    if (isNamespaceAware && xPathFragment.isNamespaceAware) {
      if (namespaceURI == null) {
        if (xPathFragment.getNamespaceURI() != null) {
          return false;
        }
      }
 else {
        if (xPathFragment.getNamespaceURI() == null) {
          return false;
        }
 else         if (namespaceURI != xPathFragment.getNamespaceURI() && !(namespaceURI.equals(xPathFragment.getNamespaceURI()))) {
          return false;
        }
      }
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (getLocalName() == xPathFragment.getLocalName()) || ((getLocalName() != null) && getLocalName().equals(xPathFragment.getLocalName()))) && (this.indexValue == xPathFragment.getIndexValue()) && (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
65759,"/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  String xmlEncoding=""String_Node_Str"";
  String xmlVersion=""String_Node_Str"";
  try {
    Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
    xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
  }
 catch (  Exception ex) {
  }
  XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
  if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
    Object nodeVal;
    try {
      Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
      nodeVal=rootTxt.getNodeValue();
    }
 catch (    Exception ex) {
      nodeVal=null;
    }
    Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setObject(obj);
    String lName=xmlRow.getDOM().getLocalName();
    if (lName == null) {
      lName=xmlRow.getDOM().getNodeName();
    }
    xmlRoot.setLocalName(lName);
    xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
    xmlRoot.setEncoding(xmlEncoding);
    xmlRoot.setVersion(xmlVersion);
    return xmlRoot;
  }
  AbstractSession readSession=xmlContext.getReadSession(referenceClass);
  XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
  if (descriptor == null) {
    throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
  }
  Object object=null;
  if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
    xmlRow.setUnmarshaller(xmlUnmarshaller);
    xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
    ReadObjectQuery query=new ReadObjectQuery();
    query.setReferenceClass(referenceClass);
    query.setSession(readSession);
    object=objectBuilder.buildObject(query,xmlRow,null);
    xmlUnmarshaller.resolveReferences(readSession);
  }
  String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
  String elementLocalName=xmlRow.getDOM().getLocalName();
  if (elementLocalName == null) {
    elementLocalName=xmlRow.getDOM().getNodeName();
  }
  String elementPrefix=xmlRow.getDOM().getPrefix();
  return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot);
}","/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  String xmlEncoding=""String_Node_Str"";
  String xmlVersion=""String_Node_Str"";
  try {
    Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
    xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
    xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
  }
 catch (  Exception ex) {
  }
  XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
  if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || ClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || ClassConstants.DURATION.isAssignableFrom(referenceClass)) {
    Object nodeVal;
    try {
      Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
      nodeVal=rootTxt.getNodeValue();
    }
 catch (    Exception ex) {
      nodeVal=null;
    }
    Object obj=((XMLConversionManager)xmlContext.getSession(0).getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
    XMLRoot xmlRoot=new XMLRoot();
    xmlRoot.setObject(obj);
    String lName=xmlRow.getDOM().getLocalName();
    if (lName == null) {
      lName=xmlRow.getDOM().getNodeName();
    }
    xmlRoot.setLocalName(lName);
    xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
    xmlRoot.setEncoding(xmlEncoding);
    xmlRoot.setVersion(xmlVersion);
    return xmlRoot;
  }
  AbstractSession readSession=xmlContext.getReadSession(referenceClass);
  XMLDescriptor descriptor=(XMLDescriptor)readSession.getDescriptor(referenceClass);
  if (descriptor == null) {
    throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
  }
  Object object=null;
  if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE)) {
    xmlRow.setUnmarshaller(xmlUnmarshaller);
    xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy(readSession));
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
    ReadObjectQuery query=new ReadObjectQuery();
    query.setReferenceClass(referenceClass);
    query.setSession(readSession);
    object=objectBuilder.buildObject(query,xmlRow,null);
    xmlUnmarshaller.resolveReferences(readSession);
  }
  String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
  String elementLocalName=xmlRow.getDOM().getLocalName();
  if (elementLocalName == null) {
    elementLocalName=xmlRow.getDOM().getNodeName();
  }
  String elementPrefix=xmlRow.getDOM().getPrefix();
  return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,xmlUnmarshaller.isNamespaceAware());
}"
65760,"/** 
 * INTERNAL: Return the XMLDescriptor with the default root mapping matching the QName parameter.
 */
private XMLDescriptor getDescriptor(QName qName){
  return (XMLDescriptor)descriptorsByQName.get(qName);
}","/** 
 * INTERNAL: Return the XMLDescriptor with the default root mapping matching the QName parameter.
 */
private XMLDescriptor getDescriptor(QName qName){
  XPathQName xpathQName=new XPathQName(qName.getNamespaceURI(),qName.getLocalPart(),true);
  return (XMLDescriptor)descriptorsByQName.get(xpathQName);
}"
65761,"/** 
 * INTERNAL:
 */
private void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  QName descriptorQName;
  String defaultRootName;
  List tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (defaultRootLocalName != null && !(defaultRootLocalName.equals(XMLConstants.EMPTY_STRING))) {
        if (index > -1) {
          String defaultRootPrefix=defaultRootName.substring(0,index);
          String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
          descriptorQName=new QName(defaultRootNamespaceURI,defaultRootLocalName);
        }
 else {
          if (xmlDescriptor.getNamespaceResolver() != null) {
            descriptorQName=new QName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName);
          }
 else {
            descriptorQName=new QName(defaultRootLocalName);
          }
        }
        if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
          descriptorsByQName.put(descriptorQName,xmlDescriptor);
        }
 else {
          storeXMLDescriptorByQName((XMLDescriptor)xmlDescriptor.getInheritancePolicy().getParentDescriptor());
          XMLDescriptor existingDescriptor=(XMLDescriptor)descriptorsByQName.get(descriptorQName);
          if (existingDescriptor == null) {
            descriptorsByQName.put(descriptorQName,xmlDescriptor);
          }
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
 else {
        QName qname=xmlSchemaReference.getSchemaContextAsQName();
        if (qname != null) {
          if (xmlDescriptor.isWrapper() && xmlDescriptor.getJavaClassName().contains(""String_Node_Str"")) {
            return;
          }
          XPathFragment typeFragment=new XPathFragment();
          typeFragment.setLocalName(qname.getLocalPart());
          typeFragment.setNamespaceURI(qname.getNamespaceURI());
          this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
        }
      }
    }
  }
}","/** 
 * INTERNAL:
 */
private void storeXMLDescriptorByQName(XMLDescriptor xmlDescriptor){
  XPathQName descriptorQName;
  String defaultRootName;
  List tableNames=xmlDescriptor.getTableNames();
  for (int i=0; i < tableNames.size(); i++) {
    defaultRootName=(String)tableNames.get(i);
    if (null != defaultRootName) {
      int index=defaultRootName.indexOf(':');
      String defaultRootLocalName=defaultRootName.substring(index + 1);
      if (defaultRootLocalName != null && !(defaultRootLocalName.equals(XMLConstants.EMPTY_STRING))) {
        if (index > -1) {
          String defaultRootPrefix=defaultRootName.substring(0,index);
          String defaultRootNamespaceURI=xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(defaultRootPrefix);
          descriptorQName=new XPathQName(defaultRootNamespaceURI,defaultRootLocalName,true);
        }
 else {
          if (xmlDescriptor.getNamespaceResolver() != null) {
            descriptorQName=new XPathQName(xmlDescriptor.getNamespaceResolver().getDefaultNamespaceURI(),defaultRootLocalName,true);
          }
 else {
            descriptorQName=new XPathQName(defaultRootLocalName,true);
          }
        }
        if (!xmlDescriptor.hasInheritance() || xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
          addDescriptorByQName(descriptorQName,xmlDescriptor);
        }
 else {
          storeXMLDescriptorByQName((XMLDescriptor)xmlDescriptor.getInheritancePolicy().getParentDescriptor());
          XMLDescriptor existingDescriptor=(XMLDescriptor)getDescriptor(descriptorQName);
          if (existingDescriptor == null) {
            addDescriptorByQName(descriptorQName,xmlDescriptor);
          }
        }
      }
    }
  }
  XMLSchemaReference xmlSchemaReference=xmlDescriptor.getSchemaReference();
  if (null != xmlSchemaReference) {
    String schemaContext=xmlSchemaReference.getSchemaContext();
    if ((xmlSchemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlSchemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE)) {
      if ((null != schemaContext) && (schemaContext.lastIndexOf('/') == 0)) {
        schemaContext=schemaContext.substring(1,schemaContext.length());
        XPathFragment typeFragment=new XPathFragment(schemaContext);
        if (null != xmlDescriptor.getNamespaceResolver()) {
          typeFragment.setNamespaceURI(xmlDescriptor.getNamespaceResolver().resolveNamespacePrefix(typeFragment.getPrefix()));
        }
        this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
      }
 else {
        QName qname=xmlSchemaReference.getSchemaContextAsQName();
        if (qname != null) {
          if (xmlDescriptor.isWrapper() && xmlDescriptor.getJavaClassName().contains(""String_Node_Str"")) {
            return;
          }
          XPathFragment typeFragment=new XPathFragment();
          typeFragment.setLocalName(qname.getLocalPart());
          typeFragment.setNamespaceURI(qname.getNamespaceURI());
          this.descriptorsByGlobalType.put(typeFragment,xmlDescriptor);
        }
      }
    }
  }
}"
65762,"private void addDescriptorByQName(QName qName,XMLDescriptor descriptor){
  descriptorsByQName.put(qName,descriptor);
}","private void addDescriptorByQName(XPathQName qName,XMLDescriptor descriptor){
  descriptorsByQName.put(qName,descriptor);
}"
65763,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      xPathNode.getUnmarshalNodeValue().endElement(xPathFragment,this);
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            DatabaseMapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((AbstractDirectMapping)mapping).getNullValue();
              if (!(XMLConstants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if (null != xPathFragment && xPathFragment.nameIsText()) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != getParentRecord()) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=getParentRecord();
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65764,"public void setMediaType(MediaType mediaType){
  this.mediaType=mediaType;
}","/** 
 * Set the MediaType for this xmlMarshaller. See org.eclipse.persistence.oxm.MediaType for the media types supported by EclipseLink MOXy
 * @param mediaType
 */
public void setMediaType(MediaType mediaType){
  this.mediaType=mediaType;
}"
65765,"public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(JAXBContext.MEDIA_TYPE)) {
    if (mediaType == MediaType.APPLICATION_JSON) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  throw new PropertyException(""String_Node_Str"");
}","public Object getProperty(String key) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(JAXBContext.MEDIA_TYPE)) {
    if (xmlUnmarshaller.getMediaType() == MediaType.APPLICATION_JSON) {
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
  throw new PropertyException(""String_Node_Str"");
}"
65766,"public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(JAXBContext.MEDIA_TYPE)) {
    if (""String_Node_Str"".equals(value)) {
      mediaType=MediaType.APPLICATION_JSON;
    }
 else     if (""String_Node_Str"".equals(value)) {
      mediaType=MediaType.APPLICATION_XML;
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else {
    throw new PropertyException(key,value);
  }
}","public void setProperty(String key,Object value) throws PropertyException {
  if (key == null) {
    throw new IllegalArgumentException();
  }
  if (key.equals(JAXBContext.MEDIA_TYPE)) {
    if (""String_Node_Str"".equals(value)) {
      xmlUnmarshaller.setMediaType(MediaType.APPLICATION_JSON);
    }
 else     if (""String_Node_Str"".equals(value)) {
      xmlUnmarshaller.setMediaType(MediaType.APPLICATION_XML);
    }
 else {
      throw new PropertyException(key,value);
    }
  }
 else {
    throw new PropertyException(key,value);
  }
}"
65767,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment && !(rootFragment.getLocalName().equals(XMLConstants.EMPTY_STRING))) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65768,"public void testSimpleTypeWithSDO_Name(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}","public void testSimpleTypeWithSDO_Name(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  assertEquals(((SDOType)baseType).getSubTypes().size(),0);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}"
65769,"public void testSimpleTypeWithSDO_JAVA_ExtendedInstanceClass(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(""String_Node_Str"",type.getName());
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
  this.assertEquals(""String_Node_Str"",((SDOType)type).getInstanceClassName());
}","public void testSimpleTypeWithSDO_JAVA_ExtendedInstanceClass(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(""String_Node_Str"",type.getName());
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  assertEquals(((SDOType)baseType).getSubTypes().size(),0);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
  this.assertEquals(""String_Node_Str"",((SDOType)type).getInstanceClassName());
}"
65770,"public void testSimpleTypeWithAbstract(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}","public void testSimpleTypeWithAbstract(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  assertEquals(((SDOType)baseType).getSubTypes().size(),0);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}"
65771,"public void testSimpleTypeAnonymous(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}","public void testSimpleTypeAnonymous(){
  String f=""String_Node_Str"";
  String xmlSchema=getSchema(f);
  List types=xsdHelper.define(xmlSchema);
  this.assertEquals(types.size(),1);
  Type type=(Type)types.get(0);
  this.assertEquals(type.getName(),""String_Node_Str"");
  this.assertFalse(type.isAbstract());
  this.assertEquals(type.getBaseTypes().size(),1);
  Type baseType=(Type)type.getBaseTypes().get(0);
  this.assertEquals(baseType,SDOConstants.SDO_INT);
  assertEquals(((SDOType)baseType).getSubTypes().size(),0);
  this.assertTrue(type.isDataType());
  this.assertEquals(type.getURI(),""String_Node_Str"");
}"
65772,"/** 
 * INTERNAL:
 * @param type    a  type to become this Type's base Type.
 */
public void addBaseType(SDOType type){
  if (!this.getBaseTypes().contains(type)) {
    getBaseTypes().add(type);
    updateSubtypes(type);
    type.getSubTypes().add(this);
    if (type.isOpen() && this.isOpen()) {
      DatabaseMapping anyCollectionMapping=getXmlDescriptor().getMappingForAttributeName(ANY_MAPPING_ATTRIBUTE_NAME);
      getXmlDescriptor().getMappings().remove(anyCollectionMapping);
      DatabaseMapping anyAttrMapping=getXmlDescriptor().getMappingForAttributeName(""String_Node_Str"");
      getXmlDescriptor().getMappings().remove(anyAttrMapping);
    }
  }
}","/** 
 * INTERNAL:
 * @param type    a  type to become this Type's base Type.
 */
public void addBaseType(SDOType type){
  if (!this.getBaseTypes().contains(type)) {
    getBaseTypes().add(type);
    updateSubtypes(type);
    if (!(type.isDataType() && (type.getQName().getNamespaceURI() == SDOConstants.SDO_URL || type.getQName().getNamespaceURI() == SDOConstants.SDOJAVA_URL))) {
      type.getSubTypes().add(this);
    }
    if (type.isOpen() && this.isOpen()) {
      DatabaseMapping anyCollectionMapping=getXmlDescriptor().getMappingForAttributeName(ANY_MAPPING_ATTRIBUTE_NAME);
      getXmlDescriptor().getMappings().remove(anyCollectionMapping);
      DatabaseMapping anyAttrMapping=getXmlDescriptor().getMappingForAttributeName(""String_Node_Str"");
      getXmlDescriptor().getMappings().remove(anyAttrMapping);
    }
  }
}"
65773,"public void testNewInstanceXSDExternalBindingError() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(EXAMPLE_XSD);
  if (iStream == null) {
    fail(""String_Node_Str"" + EXAMPLE_XSD + ""String_Node_Str"");
  }
  InputStream xjbStream=classLoader.getResourceAsStream(EXTERNAL_BINDINGS);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(DynamicJAXBContextFactory.XML_SCHEMA_KEY,iStream);
  ArrayList<InputStream> xjbs=new ArrayList<InputStream>();
  xjbs.add(xjbStream);
  xjbs.add(xjbStream);
  properties.put(DynamicJAXBContextFactory.EXTERNAL_BINDINGS_KEY,xjbs);
  JAXBException caughtEx=null;
  try {
    DynamicJAXBContext jaxbContext=(DynamicJAXBContext)JAXBContext.newInstance(""String_Node_Str"",classLoader,properties);
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof org.eclipse.persistence.exceptions.JAXBException) {
      caughtEx=e;
    }
 else {
      fail(""String_Node_Str"" + e);
    }
  }
catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  org.eclipse.persistence.exceptions.JAXBException jEx=(org.eclipse.persistence.exceptions.JAXBException)caughtEx.getLinkedException();
  assertEquals(""String_Node_Str"",org.eclipse.persistence.exceptions.JAXBException.XJB_NOT_SOURCE,jEx.getErrorCode());
}","public void testNewInstanceXSDExternalBindingError() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream iStream=classLoader.getResourceAsStream(EXAMPLE_XSD);
  if (iStream == null) {
    fail(""String_Node_Str"" + EXAMPLE_XSD + ""String_Node_Str"");
  }
  InputStream xjbStream=classLoader.getResourceAsStream(EXTERNAL_BINDINGS);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(DynamicJAXBContextFactory.XML_SCHEMA_KEY,iStream);
  ArrayList<InputStream> xjbs=new ArrayList<InputStream>();
  xjbs.add(xjbStream);
  xjbs.add(xjbStream);
  properties.put(DynamicJAXBContextFactory.EXTERNAL_BINDINGS_KEY,xjbs);
  JAXBException caughtEx=null;
  try {
    DynamicJAXBContext jaxbContext=(DynamicJAXBContext)JAXBContext.newInstance(""String_Node_Str"",classLoader,properties);
  }
 catch (  JAXBException e) {
    caughtEx=e;
  }
catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  org.eclipse.persistence.exceptions.JAXBException jEx=null;
  Exception currentException=caughtEx;
  while (true) {
    if (currentException instanceof JAXBException) {
      Exception linkedEx=(Exception)((JAXBException)currentException).getLinkedException();
      if (linkedEx instanceof org.eclipse.persistence.exceptions.JAXBException) {
        jEx=(org.eclipse.persistence.exceptions.JAXBException)linkedEx;
        break;
      }
 else {
        currentException=linkedEx;
      }
    }
 else {
      break;
    }
  }
  if (jEx == null) {
    fail(""String_Node_Str"" + caughtEx);
  }
  assertEquals(""String_Node_Str"",org.eclipse.persistence.exceptions.JAXBException.XJB_NOT_SOURCE,jEx.getErrorCode());
}"
65774,"public void testNewInstanceXSDImportError() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream inputStream=classLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(DynamicJAXBContextFactory.XML_SCHEMA_KEY,xsdElement);
  NoExtensionEntityResolver re=new NoExtensionEntityResolver();
  properties.put(DynamicJAXBContextFactory.ENTITY_RESOLVER_KEY,re);
  JAXBException caughtEx=null;
  try {
    DynamicJAXBContext jaxbContext=(DynamicJAXBContext)JAXBContext.newInstance(""String_Node_Str"",classLoader,properties);
    DynamicEntity person=jaxbContext.newDynamicEntity(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",person);
    DynamicEntity salary=jaxbContext.newDynamicEntity(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",salary);
  }
 catch (  JAXBException e) {
    caughtEx=e;
  }
catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  org.eclipse.persistence.exceptions.JAXBException jEx=(org.eclipse.persistence.exceptions.JAXBException)caughtEx.getLinkedException();
  assertEquals(""String_Node_Str"",org.eclipse.persistence.exceptions.JAXBException.XSD_IMPORT_NOT_SOURCE,jEx.getErrorCode());
}","public void testNewInstanceXSDImportError() throws Exception {
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream inputStream=classLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(DynamicJAXBContextFactory.XML_SCHEMA_KEY,xsdElement);
  NoExtensionEntityResolver re=new NoExtensionEntityResolver();
  properties.put(DynamicJAXBContextFactory.ENTITY_RESOLVER_KEY,re);
  JAXBException caughtEx=null;
  try {
    DynamicJAXBContext jaxbContext=(DynamicJAXBContext)JAXBContext.newInstance(""String_Node_Str"",classLoader,properties);
    DynamicEntity person=jaxbContext.newDynamicEntity(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",person);
    DynamicEntity salary=jaxbContext.newDynamicEntity(""String_Node_Str"");
    assertNotNull(""String_Node_Str"",salary);
  }
 catch (  JAXBException e) {
    caughtEx=e;
  }
catch (  Exception e) {
    fail(""String_Node_Str"" + e);
  }
  org.eclipse.persistence.exceptions.JAXBException jEx=null;
  Exception currentException=caughtEx;
  while (true) {
    if (currentException instanceof JAXBException) {
      Exception linkedEx=(Exception)((JAXBException)currentException).getLinkedException();
      if (linkedEx instanceof org.eclipse.persistence.exceptions.JAXBException) {
        jEx=(org.eclipse.persistence.exceptions.JAXBException)linkedEx;
        break;
      }
 else {
        currentException=linkedEx;
      }
    }
 else {
      break;
    }
  }
  if (jEx == null) {
    fail(""String_Node_Str"" + caughtEx);
  }
  assertEquals(""String_Node_Str"",org.eclipse.persistence.exceptions.JAXBException.XSD_IMPORT_NOT_SOURCE,jEx.getErrorCode());
}"
65775,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment((XMLRoot)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters((String)value);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65776,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlRootFragment != null) {
    QName qname=((XMLRoot)originalValue).getSchemaType();
    value=marshalRecord.getValueToWrite(qname,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    Namespace generatedNamespace=setupFragment(((XMLRoot)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.attribute(XMLConstants.XMLNS_URL,generatedNamespace.getPrefix(),XMLConstants.XMLNS + XMLConstants.COLON + generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof String) {
    marshalRecord.characters((String)value);
  }
 else {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
65777,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65778,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          XMLField fkField=(XMLField)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getXMLContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          return false;
        }
      }
      schemaType=getSchemaType(xmlField,fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
65779,"/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value,includeRoot);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value,includeRoot);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65780,"/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      if (includeRoot) {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      }
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      if (includeRoot) {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      }
    }
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,value,schemaType);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      marshalRecord.characters(schemaType,value,xmlCompositeDirectCollectionMapping.isCDATA());
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65781,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    marshalRecord.startCollection();
    if (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),true);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),marshalRecord.includeRootElementForSubsequentItemsInCollection(xPathFragment));
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    marshalRecord.startCollection();
    if (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),true);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),marshalRecord.includeRootElementForSubsequentItemsInCollection(xPathFragment));
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65782,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  Converter converter=xmlCompositeObjectMapping.getConverter();
  if (null != converter) {
    if (converter instanceof XMLConverter) {
      objectValue=((XMLConverter)converter).convertObjectValueToDataValue(objectValue,session,marshaller);
    }
 else {
      objectValue=converter.convertObjectValueToDataValue(objectValue,session);
    }
  }
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, size=children.getLength(); i < size; i++) {
        Node next=children.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
      }
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(objectValue.getClass());
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    if (!isSelfFragment) {
      objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(XMLField)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    if (!isSelfFragment) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=getSchemaType((XMLField)xmlCompositeObjectMapping.getField(),objectValue,session);
    String stringValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(stringValue);
    if (!isSelfFragment) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65783,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlDirectMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}"
65784,"public void testCreateContextFromXSDNode() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdElement,null,null,null);
  DynamicEntity emp=jaxbContext.newDynamicEntity(EMPLOYEE_CLASS_NAME);
  assertNotNull(emp);
  Exception caughtException=null;
  try {
    jaxbContext.refeshMetadata();
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof UnsupportedOperationException) {
      caughtException=e;
    }
  }
  assertNotNull(caughtException);
}","public void testCreateContextFromXSDNode() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdElement,null,null,null);
  DynamicEntity emp=jaxbContext.newDynamicEntity(EMPLOYEE_CLASS_NAME);
  assertNotNull(emp);
  Exception caughtException=null;
  try {
    jaxbContext.refreshMetadata();
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof UnsupportedOperationException) {
      caughtException=e;
    }
  }
  assertNotNull(caughtException);
}"
65785,"public void testNonRefreshableMetadata() throws Exception {
  ClassLoader classLoader=this.getClass().getClassLoader();
  InputStream metadataStream=classLoader.getResourceAsStream(XML_METADATA);
  Map<String,Object> props=new HashMap<String,Object>(1);
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataStream);
  JAXBContext jc=JAXBContextFactory.createContext(new Class[]{Root.class},props);
  try {
    JAXBHelper.getJAXBContext(jc).refeshMetadata();
  }
 catch (  JAXBException e) {
    assertEquals(JAXBException.COULD_NOT_UNMARSHAL_METADATA,e.getErrorCode());
    return;
  }
  fail();
}","public void testNonRefreshableMetadata() throws Exception {
  ClassLoader classLoader=this.getClass().getClassLoader();
  InputStream metadataStream=classLoader.getResourceAsStream(XML_METADATA);
  Map<String,Object> props=new HashMap<String,Object>(1);
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,metadataStream);
  JAXBContext jc=JAXBContextFactory.createContext(new Class[]{Root.class},props);
  try {
    JAXBHelper.getJAXBContext(jc).refreshMetadata();
  }
 catch (  JAXBException e) {
    assertEquals(JAXBException.COULD_NOT_UNMARSHAL_METADATA,e.getErrorCode());
    return;
  }
  fail();
}"
65786,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xPathFragment.hasLeafElementType()) {
    marshalRecord.setLeafElementType(xPathFragment.getLeafElementType());
  }
  XMLMarshaller marshaller=marshalRecord.getMarshaller();
  if (xmlCompositeCollectionMapping.hasConverter()) {
    Converter converter=xmlCompositeCollectionMapping.getConverter();
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertObjectValueToDataValue(value,session,marshaller);
    }
 else {
      value=converter.convertObjectValueToDataValue(value,session);
    }
  }
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XMLDescriptor descriptor=(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null || descriptor.hasInheritance()) {
    descriptor=(XMLDescriptor)session.getDescriptor(value.getClass());
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (((keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT) || (keepAsElementPolicy == UnmarshalKeepAsElementPolicy.KEEP_ALL_AS_ELEMENT)) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    TreeObjectBuilder objectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value,includeRoot);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    objectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,(XMLDescriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(XMLField)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment,WriteType.UNDEFINED);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    objectBuilder.removeExtraNamespacesFromNamespaceResolver(marshalRecord,extraNamespaces,session);
  }
 else {
    getXPathNode().startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=getSchemaType((XMLField)xmlCompositeCollectionMapping.getField(),value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    updateNamespaces(schemaType,marshalRecord,((XMLField)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(stringValue);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
65787,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  while (cp.hasNext(iterator)) {
    objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    marshalRecord.startCollection();
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    return false;
  }
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),marshalRecord.includeRootElementForSubsequentItemsInCollection(xPathFragment));
  }
  marshalRecord.endCollection();
  return true;
}"
65788,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","/** 
 * @since EclipseLink 2.4
 */
public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,boolean includeRoot){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      if (includeRoot) {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      }
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65789,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,AbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  ContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return false;
  }
  Object objectValue;
  StringBuilder stringValueStringBuilder=new StringBuilder();
  String newValue;
  QName schemaType;
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
        if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
          objectValue=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
        }
 else {
          objectValue=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(objectValue,session);
        }
      }
      schemaType=getSchemaType((XMLField)xmlCompositeDirectCollectionMapping.getField(),objectValue,session);
      newValue=getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
      }
    }
  }
 else {
    marshalRecord.startCollection();
    if (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),true);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance(),marshalRecord.includeRootElementForSubsequentItemsInCollection(xPathFragment));
    }
    marshalRecord.endCollection();
  }
  return true;
}"
65790,"public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject){
  if (null == anXPathFragment) {
    return false;
  }
  marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  boolean hasValue=false;
  marshalRecord.predicateAttribute(anXPathFragment,namespaceResolver);
  if (null != attributeChildren) {
    for (int x=0, size=attributeChildren.size(); x < size; x++) {
      XPathNode attributeNode=attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}","/** 
 * @since EclipseLink 2.4
 */
public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject,boolean includeRoot){
  if (null == anXPathFragment) {
    return false;
  }
  if (includeRoot) {
    marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  }
  boolean hasValue=false;
  marshalRecord.predicateAttribute(anXPathFragment,namespaceResolver);
  if (null != attributeChildren) {
    for (int x=0, size=attributeChildren.size(); x < size; x++) {
      XPathNode attributeNode=attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}"
65791,"/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader,Map<String,Object> properties){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else     if (metadata instanceof MetadataSource) {
      xmlBindings=((MetadataSource)metadata).getXmlBindings(properties,classLoader);
    }
 else     if (metadata instanceof String) {
      URL url=null;
      try {
        url=new URL((String)metadata);
      }
 catch (      MalformedURLException ex) {
        url=classLoader.getResource((String)metadata);
      }
      if (url != null) {
        xmlBindings=(XmlBindings)unmarshaller.unmarshal(url);
      }
 else {
        throw org.eclipse.persistence.exceptions.JAXBException.unableToLoadMetadataFromLocation((String)metadata);
      }
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}","/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader,Map<String,Object> properties){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else     if (metadata instanceof MetadataSource) {
      xmlBindings=((MetadataSource)metadata).getXmlBindings(properties,classLoader);
    }
 else     if (metadata instanceof String) {
      if (((String)metadata).length() == 0) {
        throw org.eclipse.persistence.exceptions.JAXBException.unableToLoadMetadataFromLocation((String)metadata);
      }
      URL url=null;
      try {
        url=new URL((String)metadata);
      }
 catch (      MalformedURLException ex) {
        url=classLoader.getResource((String)metadata);
      }
      if (url != null) {
        xmlBindings=(XmlBindings)unmarshaller.unmarshal(url);
      }
 else {
        throw org.eclipse.persistence.exceptions.JAXBException.unableToLoadMetadataFromLocation((String)metadata);
      }
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}"
65792,"/** 
 * Creates and stores primary key expression.
 */
public void createPrimaryKeyExpression(AbstractSession session){
  Expression expression=null;
  Expression builder=new ExpressionBuilder();
  Expression subExp1;
  Expression subExp2;
  Expression subExpression;
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  for (int index=0; index < primaryKeyFields.size(); index++) {
    DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
    subExp1=builder.getField(primaryKeyField);
    subExp2=builder.getParameter(primaryKeyField);
    subExpression=subExp1.equal(subExp2);
    if (expression == null) {
      expression=subExpression;
    }
 else {
      expression=expression.and(subExpression);
    }
  }
  setPrimaryKeyExpression(expression);
}","/** 
 * Creates and stores primary key expression.
 */
public void createPrimaryKeyExpression(AbstractSession session){
  Expression expression=null;
  Expression builder=new ExpressionBuilder();
  Expression subExp1;
  Expression subExp2;
  Expression subExpression;
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if (null != primaryKeyFields) {
    for (int index=0; index < primaryKeyFields.size(); index++) {
      DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
      subExp1=builder.getField(primaryKeyField);
      subExp2=builder.getParameter(primaryKeyField);
      subExpression=subExp1.equal(subExp2);
      if (expression == null) {
        expression=subExpression;
      }
 else {
        expression=expression.and(subExpression);
      }
    }
  }
  setPrimaryKeyExpression(expression);
}"
65793,"/** 
 * Return primary key classifications. These are used to ensure a consistent type for the pk values.
 */
public List<Class> getPrimaryKeyClassifications(){
  if (primaryKeyClassifications == null) {
    List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
    List<Class> classifications=new ArrayList(primaryKeyFields.size());
    for (int index=0; index < primaryKeyFields.size(); index++) {
      if (getPrimaryKeyMappings().size() < (index + 1)) {
        classifications.add(null);
      }
 else {
        DatabaseMapping mapping=getPrimaryKeyMappings().get(index);
        DatabaseField field=(DatabaseField)primaryKeyFields.get(index);
        if (mapping != null) {
          classifications.add(Helper.getObjectClass(mapping.getFieldClassification(field)));
        }
 else {
          classifications.add(null);
        }
      }
    }
    primaryKeyClassifications=classifications;
  }
  return primaryKeyClassifications;
}","/** 
 * Return primary key classifications. These are used to ensure a consistent type for the pk values.
 */
public List<Class> getPrimaryKeyClassifications(){
  if (primaryKeyClassifications == null) {
    List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
    if (null == primaryKeyFields) {
      return Collections.emptyList();
    }
    List<Class> classifications=new ArrayList(primaryKeyFields.size());
    for (int index=0; index < primaryKeyFields.size(); index++) {
      if (getPrimaryKeyMappings().size() < (index + 1)) {
        classifications.add(null);
      }
 else {
        DatabaseMapping mapping=getPrimaryKeyMappings().get(index);
        DatabaseField field=(DatabaseField)primaryKeyFields.get(index);
        if (mapping != null) {
          classifications.add(Helper.getObjectClass(mapping.getFieldClassification(field)));
        }
 else {
          classifications.add(null);
        }
      }
    }
    primaryKeyClassifications=classifications;
  }
  return primaryKeyClassifications;
}"
65794,"/** 
 * Extract primary key values from the specified row. null is returned if the row does not contain the key.
 */
public Object extractPrimaryKeyFromRow(AbstractRecord databaseRow,AbstractSession session){
  List<DatabaseField> primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  List<Class> primaryKeyClassifications=getPrimaryKeyClassifications();
  int size=primaryKeyFields.size();
  Object[] primaryKeyValues=null;
  CacheKeyType cacheKeyType=this.descriptor.getCacheKeyType();
  if (cacheKeyType != CacheKeyType.ID_VALUE) {
    primaryKeyValues=new Object[size];
  }
  int numberOfNulls=0;
  for (int index=0; index < size; index++) {
    DatabaseField field=primaryKeyFields.get(index);
    Class classification=primaryKeyClassifications.get(index);
    Object value=databaseRow.get(field);
    if (value != null) {
      if (value.getClass() != classification) {
        value=session.getPlatform(this.descriptor.getJavaClass()).convertObject(value,classification);
      }
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        return value;
      }
      primaryKeyValues[index]=value;
    }
 else {
      if (this.mayHaveNullInPrimaryKey) {
        numberOfNulls++;
        if (numberOfNulls < size) {
          primaryKeyValues[index]=null;
        }
 else {
          return null;
        }
      }
 else {
        return null;
      }
    }
  }
  return new CacheId(primaryKeyValues);
}","/** 
 * Extract primary key values from the specified row. null is returned if the row does not contain the key.
 */
public Object extractPrimaryKeyFromRow(AbstractRecord databaseRow,AbstractSession session){
  List<DatabaseField> primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if (null == primaryKeyFields) {
    return null;
  }
  List<Class> primaryKeyClassifications=getPrimaryKeyClassifications();
  int size=primaryKeyFields.size();
  Object[] primaryKeyValues=null;
  CacheKeyType cacheKeyType=this.descriptor.getCacheKeyType();
  if (cacheKeyType != CacheKeyType.ID_VALUE) {
    primaryKeyValues=new Object[size];
  }
  int numberOfNulls=0;
  for (int index=0; index < size; index++) {
    DatabaseField field=primaryKeyFields.get(index);
    Class classification=primaryKeyClassifications.get(index);
    Object value=databaseRow.get(field);
    if (value != null) {
      if (value.getClass() != classification) {
        value=session.getPlatform(this.descriptor.getJavaClass()).convertObject(value,classification);
      }
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        return value;
      }
      primaryKeyValues[index]=value;
    }
 else {
      if (this.mayHaveNullInPrimaryKey) {
        numberOfNulls++;
        if (numberOfNulls < size) {
          primaryKeyValues[index]=null;
        }
 else {
          return null;
        }
      }
 else {
        return null;
      }
    }
  }
  return new CacheId(primaryKeyValues);
}"
65795,"public ObjectBuilder(ClassDescriptor descriptor){
  this.mappingsByField=new HashMap(20);
  this.readOnlyMappingsByField=new HashMap(10);
  this.mappingsByAttribute=new HashMap(20);
  this.fieldsMap=new HashMap(20);
  this.primaryKeyMappings=new ArrayList(5);
  this.nonPrimaryKeyMappings=new ArrayList(10);
  this.cloningMappings=new ArrayList(10);
  this.eagerMappings=new ArrayList(5);
  this.relationshipMappings=new ArrayList(5);
  this.descriptor=descriptor;
}","public ObjectBuilder(ClassDescriptor descriptor){
  this.descriptor=descriptor;
  initialize(descriptor);
}"
65796,"/** 
 * Cache primary key and non primary key mappings.
 */
public void initializePrimaryKey(AbstractSession session) throws DescriptorException {
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if (primaryKeyFields.isEmpty() && getDescriptor().isAggregateCollectionDescriptor()) {
    DatabaseTable defaultTable=getDescriptor().getDefaultTable();
    Iterator<DatabaseField> it=getDescriptor().getFields().iterator();
    while (it.hasNext()) {
      DatabaseField field=it.next();
      if (field.getTable().equals(defaultTable) && getMappingsByField().containsKey(field)) {
        primaryKeyFields.add(field);
      }
    }
    List<DatabaseField> additionalFields=this.descriptor.getAdditionalAggregateCollectionKeyFields();
    for (int i=0; i < additionalFields.size(); i++) {
      DatabaseField additionalField=additionalFields.get(i);
      if (!primaryKeyFields.contains(additionalField)) {
        primaryKeyFields.add(additionalField);
      }
    }
  }
  createPrimaryKeyExpression(session);
  getPrimaryKeyMappings().clear();
  getNonPrimaryKeyMappings().clear();
  for (Iterator fields=getMappingsByField().keySet().iterator(); fields.hasNext(); ) {
    DatabaseField field=(DatabaseField)fields.next();
    if (!primaryKeyFields.contains(field)) {
      DatabaseMapping mapping=getMappingForField(field);
      if (!getNonPrimaryKeyMappings().contains(mapping)) {
        getNonPrimaryKeyMappings().add(mapping);
      }
    }
  }
  for (int index=0; index < primaryKeyFields.size(); index++) {
    DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
    DatabaseMapping mapping=getMappingForField(primaryKeyField);
    if (mapping == null) {
      if (this.descriptor.isDescriptorTypeAggregate()) {
        this.mayHaveNullInPrimaryKey=true;
      }
 else {
        throw DescriptorException.noMappingForPrimaryKey(primaryKeyField,this.descriptor);
      }
    }
    getPrimaryKeyMappings().add(mapping);
    if (mapping != null) {
      mapping.setIsPrimaryKeyMapping(true);
    }
    if (this.descriptor.hasMultipleTables() && (mapping != null)) {
      for (      Map keyMapping : this.descriptor.getAdditionalTablePrimaryKeyFields().values()) {
        DatabaseField secondaryField=(DatabaseField)keyMapping.get(primaryKeyField);
        if (secondaryField != null) {
          getMappingsByField().put(secondaryField,mapping);
          if (mapping.isAggregateObjectMapping()) {
            ((AggregateObjectMapping)mapping).addPrimaryKeyJoinField(primaryKeyField,secondaryField);
          }
        }
      }
    }
  }
  boolean hasSimplePrimaryKey=true;
  for (int index=0; index < getPrimaryKeyMappings().size(); index++) {
    DatabaseMapping mapping=getPrimaryKeyMappings().get(index);
    if ((mapping == null) || (!mapping.isDirectToFieldMapping())) {
      hasSimplePrimaryKey=false;
      break;
    }
  }
  this.descriptor.setHasSimplePrimaryKey(hasSimplePrimaryKey);
  boolean wasIdValidationSet=true;
  if (this.descriptor.getIdValidation() == null) {
    wasIdValidationSet=false;
    if (this.descriptor.getPrimaryKeyFields().size() > 1) {
      this.descriptor.setIdValidation(IdValidation.NULL);
    }
 else {
      this.descriptor.setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.descriptor.getPrimaryKeyIdValidations() == null) {
    this.descriptor.setPrimaryKeyIdValidations(new ArrayList(this.descriptor.getPrimaryKeyFields().size()));
    for (    DatabaseField field : this.descriptor.getPrimaryKeyFields()) {
      if (!wasIdValidationSet && this.descriptor.usesSequenceNumbers() && field.equals(this.descriptor.getSequenceNumberField())) {
        this.descriptor.getPrimaryKeyIdValidations().add(IdValidation.ZERO);
      }
 else {
        this.descriptor.getPrimaryKeyIdValidations().add(this.descriptor.getIdValidation());
      }
    }
  }
}","/** 
 * Cache primary key and non primary key mappings.
 */
public void initializePrimaryKey(AbstractSession session) throws DescriptorException {
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if ((null == primaryKeyFields || primaryKeyFields.isEmpty()) && getDescriptor().isAggregateCollectionDescriptor()) {
    DatabaseTable defaultTable=getDescriptor().getDefaultTable();
    Iterator<DatabaseField> it=getDescriptor().getFields().iterator();
    while (it.hasNext()) {
      DatabaseField field=it.next();
      if (field.getTable().equals(defaultTable) && getMappingsByField().containsKey(field)) {
        primaryKeyFields.add(field);
      }
    }
    List<DatabaseField> additionalFields=this.descriptor.getAdditionalAggregateCollectionKeyFields();
    for (int i=0; i < additionalFields.size(); i++) {
      DatabaseField additionalField=additionalFields.get(i);
      if (!primaryKeyFields.contains(additionalField)) {
        primaryKeyFields.add(additionalField);
      }
    }
  }
  createPrimaryKeyExpression(session);
  if (null != primaryKeyMappings) {
    primaryKeyMappings.clear();
  }
  if (null != nonPrimaryKeyMappings) {
    nonPrimaryKeyMappings.clear();
  }
  for (Iterator fields=getMappingsByField().keySet().iterator(); fields.hasNext(); ) {
    DatabaseField field=(DatabaseField)fields.next();
    if (null == primaryKeyFields || !primaryKeyFields.contains(field)) {
      DatabaseMapping mapping=getMappingForField(field);
      if (nonPrimaryKeyMappings != null && !getNonPrimaryKeyMappings().contains(mapping)) {
        getNonPrimaryKeyMappings().add(mapping);
      }
    }
  }
  if (null != primaryKeyFields) {
    for (int index=0; index < primaryKeyFields.size(); index++) {
      DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
      DatabaseMapping mapping=getMappingForField(primaryKeyField);
      if (mapping == null) {
        if (this.descriptor.isDescriptorTypeAggregate()) {
          this.mayHaveNullInPrimaryKey=true;
        }
 else {
          throw DescriptorException.noMappingForPrimaryKey(primaryKeyField,this.descriptor);
        }
      }
      getPrimaryKeyMappings().add(mapping);
      if (mapping != null) {
        mapping.setIsPrimaryKeyMapping(true);
      }
      if (this.descriptor.hasMultipleTables() && (mapping != null)) {
        for (        Map keyMapping : this.descriptor.getAdditionalTablePrimaryKeyFields().values()) {
          DatabaseField secondaryField=(DatabaseField)keyMapping.get(primaryKeyField);
          if (secondaryField != null) {
            getMappingsByField().put(secondaryField,mapping);
            if (mapping.isAggregateObjectMapping()) {
              ((AggregateObjectMapping)mapping).addPrimaryKeyJoinField(primaryKeyField,secondaryField);
            }
          }
        }
      }
    }
  }
  boolean hasSimplePrimaryKey=true;
  if (null != primaryKeyMappings) {
    for (int index=0; index < getPrimaryKeyMappings().size(); index++) {
      DatabaseMapping mapping=getPrimaryKeyMappings().get(index);
      if ((mapping == null) || (!mapping.isDirectToFieldMapping())) {
        hasSimplePrimaryKey=false;
        break;
      }
    }
  }
  this.descriptor.setHasSimplePrimaryKey(hasSimplePrimaryKey);
  boolean wasIdValidationSet=true;
  if (this.descriptor.getIdValidation() == null) {
    wasIdValidationSet=false;
    List<DatabaseField> descriptorPrimaryKeyFields=this.descriptor.getPrimaryKeyFields();
    if (descriptorPrimaryKeyFields != null && descriptorPrimaryKeyFields.size() > 1) {
      this.descriptor.setIdValidation(IdValidation.NULL);
    }
 else {
      this.descriptor.setIdValidation(IdValidation.ZERO);
    }
  }
  if (this.descriptor.getPrimaryKeyFields() != null && this.descriptor.getPrimaryKeyIdValidations() == null) {
    this.descriptor.setPrimaryKeyIdValidations(new ArrayList(this.descriptor.getPrimaryKeyFields().size()));
    for (    DatabaseField field : this.descriptor.getPrimaryKeyFields()) {
      if (!wasIdValidationSet && this.descriptor.usesSequenceNumbers() && field.equals(this.descriptor.getSequenceNumberField())) {
        this.descriptor.getPrimaryKeyIdValidations().add(IdValidation.ZERO);
      }
 else {
        this.descriptor.getPrimaryKeyIdValidations().add(this.descriptor.getIdValidation());
      }
    }
  }
}"
65797,"private Object getValue(AbstractSession session,Reference reference,CacheId primaryKey){
  Class referenceTargetClass=reference.getTargetClass();
  if (null == referenceTargetClass || referenceTargetClass == ClassConstants.OBJECT) {
    for (    Object entry : session.getDescriptors().values()) {
      Object value=null;
      XMLDescriptor targetDescriptor=(XMLDescriptor)entry;
      List pkFields=targetDescriptor.getPrimaryKeyFields();
      if (1 == pkFields.size()) {
        XMLField pkField=(XMLField)pkFields.get(0);
        pkField=(XMLField)targetDescriptor.getTypedField(pkField);
        Class targetType=pkField.getType();
        if (targetType == ClassConstants.STRING || targetType == ClassConstants.OBJECT) {
          value=session.getIdentityMapAccessor().getFromIdentityMap(primaryKey,targetDescriptor.getJavaClass());
        }
 else {
          try {
            Object[] pkValues=primaryKey.getPrimaryKey();
            Object[] convertedPkValues=new Object[pkValues.length];
            for (int x=0; x < pkValues.length; x++) {
              convertedPkValues[x]=session.getDatasourcePlatform().getConversionManager().convertObject(pkValues[x],targetType);
            }
            value=session.getIdentityMapAccessor().getFromIdentityMap(new CacheId(convertedPkValues),targetDescriptor.getJavaClass());
          }
 catch (          ConversionException e) {
          }
        }
        if (null != value) {
          return value;
        }
      }
    }
    return null;
  }
 else {
    return session.getIdentityMapAccessor().getFromIdentityMap(primaryKey,referenceTargetClass);
  }
}","private Object getValue(AbstractSession session,Reference reference,CacheId primaryKey){
  Class referenceTargetClass=reference.getTargetClass();
  if (null == referenceTargetClass || referenceTargetClass == ClassConstants.OBJECT) {
    for (    Object entry : session.getDescriptors().values()) {
      Object value=null;
      XMLDescriptor targetDescriptor=(XMLDescriptor)entry;
      List pkFields=targetDescriptor.getPrimaryKeyFields();
      if (null != pkFields && 1 == pkFields.size()) {
        XMLField pkField=(XMLField)pkFields.get(0);
        pkField=(XMLField)targetDescriptor.getTypedField(pkField);
        Class targetType=pkField.getType();
        if (targetType == ClassConstants.STRING || targetType == ClassConstants.OBJECT) {
          value=session.getIdentityMapAccessor().getFromIdentityMap(primaryKey,targetDescriptor.getJavaClass());
        }
 else {
          try {
            Object[] pkValues=primaryKey.getPrimaryKey();
            Object[] convertedPkValues=new Object[pkValues.length];
            for (int x=0; x < pkValues.length; x++) {
              convertedPkValues[x]=session.getDatasourcePlatform().getConversionManager().convertObject(pkValues[x],targetType);
            }
            value=session.getIdentityMapAccessor().getFromIdentityMap(new CacheId(convertedPkValues),targetDescriptor.getJavaClass());
          }
 catch (          ConversionException e) {
          }
        }
        if (null != value) {
          return value;
        }
      }
    }
    return null;
  }
 else {
    return session.getIdentityMapAccessor().getFromIdentityMap(primaryKey,referenceTargetClass);
  }
}"
65798,"@Test @ToBeInvestigated public void testPrimitiveBoolean(){
  validateField(""String_Node_Str"",Boolean.class);
}","@Test @Bugzilla(bugid=348874) public void testPrimitiveBoolean(){
  validateField(""String_Node_Str"",Boolean.class);
}"
65799,"@Test @ToBeInvestigated public void testWrapperBoolean(){
  validateField(""String_Node_Str"",Boolean.class);
}","@Test @Bugzilla(bugid=348874) public void testWrapperBoolean(){
  validateField(""String_Node_Str"",Boolean.class);
}"
65800,"public DBWSModelProject(){
  setName(""String_Node_Str"");
  ns=new NamespaceResolver();
  ns.put(""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE_NS_URI);
  ns.put(""String_Node_Str"",W3C_XML_SCHEMA_NS_URI);
  addDescriptor(buildServiceDescriptor());
  addDescriptor(buildAttachmentDescriptor());
  addDescriptor(buildResultDescriptor());
  addDescriptor(buildCollectionResultDescriptor());
  addDescriptor(buildParameterDescriptor());
  addDescriptor(buildSimpleXMLFormatDescriptor());
  addDescriptor(buildNamedQueryDescriptor());
  addDescriptor(buildSqlQueryDescriptor());
  addDescriptor(buildJpqlQueryDescriptor());
  addDescriptor(buildStoredProcedureQueryDescriptor());
  addDescriptor(buildProcedureArgumentDescriptor());
  addDescriptor(buildProcedureOutputArgumentDescriptor());
  addDescriptor(buildStoredFunctionQueryDescriptor());
  addDescriptor(buildQueryDescriptor());
  addDescriptor(buildInsertDescriptor());
  addDescriptor(buildDeleteDescriptor());
  addDescriptor(buildUpdateDescriptor());
  for (Iterator descriptors=getDescriptors().values().iterator(); descriptors.hasNext(); ) {
    XMLDescriptor descriptor=(XMLDescriptor)descriptors.next();
    descriptor.setNamespaceResolver(ns);
  }
}","public DBWSModelProject(){
  setName(""String_Node_Str"");
  ns=new NamespaceResolver();
  ns.put(""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE_NS_URI);
  ns.put(""String_Node_Str"",W3C_XML_SCHEMA_NS_URI);
  addDescriptor(buildServiceDescriptor());
  addDescriptor(buildAttachmentDescriptor());
  addDescriptor(buildResultDescriptor());
  addDescriptor(buildCollectionResultDescriptor());
  addDescriptor(buildParameterDescriptor());
  addDescriptor(buildSimpleXMLFormatDescriptor());
  addDescriptor(buildNamedQueryDescriptor());
  addDescriptor(buildSqlQueryDescriptor());
  addDescriptor(buildJpqlQueryDescriptor());
  addDescriptor(buildStoredProcedureQueryDescriptor());
  addDescriptor(buildProcedureArgumentDescriptor());
  addDescriptor(buildProcedureOutputArgumentDescriptor());
  addDescriptor(buildStoredFunctionQueryDescriptor());
  addDescriptor(buildQueryDescriptor());
  addDescriptor(buildInsertDescriptor());
  addDescriptor(buildDeleteDescriptor());
  addDescriptor(buildUpdateDescriptor());
  addDescriptor(buildBatchQueryDescriptor());
  for (Iterator descriptors=getDescriptors().values().iterator(); descriptors.hasNext(); ) {
    XMLDescriptor descriptor=(XMLDescriptor)descriptors.next();
    descriptor.setNamespaceResolver(ns);
  }
}"
65801,"protected XMLDescriptor buildServiceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DBWSModel.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping sessionFile=new XMLDirectMapping();
  sessionFile.setAttributeName(""String_Node_Str"");
  sessionFile.setXPath(""String_Node_Str"");
  descriptor.addMapping(sessionFile);
  XMLChoiceCollectionMapping operationsMapping=new XMLChoiceCollectionMapping();
  operationsMapping.setAttributeName(""String_Node_Str"");
  operationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      return ((XRServiceModel)object).getOperationsList();
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      Vector v=(Vector)value;
      XRServiceModel dbwsModel=(XRServiceModel)object;
      Map<String,Operation> operations=dbwsModel.getOperations();
      for (Iterator i=v.iterator(); i.hasNext(); ) {
        Object obj=i.next();
        if (obj instanceof Operation) {
          Operation op=(Operation)obj;
          operations.put(op.getName(),op);
        }
      }
    }
  }
);
  operationsMapping.addChoiceElement(""String_Node_Str"",InsertOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",QueryOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",UpdateOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",DeleteOperation.class);
  descriptor.addMapping(operationsMapping);
  return descriptor;
}","protected XMLDescriptor buildServiceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DBWSModel.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping sessionFile=new XMLDirectMapping();
  sessionFile.setAttributeName(""String_Node_Str"");
  sessionFile.setXPath(""String_Node_Str"");
  descriptor.addMapping(sessionFile);
  XMLChoiceCollectionMapping operationsMapping=new XMLChoiceCollectionMapping();
  operationsMapping.setAttributeName(""String_Node_Str"");
  operationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      return ((XRServiceModel)object).getOperationsList();
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      Vector v=(Vector)value;
      XRServiceModel dbwsModel=(XRServiceModel)object;
      Map<String,Operation> operations=dbwsModel.getOperations();
      for (Iterator i=v.iterator(); i.hasNext(); ) {
        Object obj=i.next();
        if (obj instanceof Operation) {
          Operation op=(Operation)obj;
          operations.put(op.getName(),op);
        }
      }
    }
  }
);
  operationsMapping.addChoiceElement(""String_Node_Str"",InsertOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",QueryOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",UpdateOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",DeleteOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",BatchQueryOperation.class);
  descriptor.addMapping(operationsMapping);
  return descriptor;
}"
65802,"private XMLDescriptor buildExtensionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Extension.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping baseTypeMapping=new XMLDirectMapping();
  baseTypeMapping.setAttributeName(""String_Node_Str"");
  baseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(baseTypeMapping);
  XMLCompositeObjectMapping sequenceMapping=new XMLCompositeObjectMapping();
  sequenceMapping.setReferenceClass(Sequence.class);
  sequenceMapping.setAttributeName(""String_Node_Str"");
  sequenceMapping.setSetMethodName(""String_Node_Str"");
  sequenceMapping.setGetMethodName(""String_Node_Str"");
  sequenceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(sequenceMapping);
  XMLCompositeObjectMapping choiceMapping=new XMLCompositeObjectMapping();
  choiceMapping.setReferenceClass(Choice.class);
  choiceMapping.setAttributeName(""String_Node_Str"");
  choiceMapping.setSetMethodName(""String_Node_Str"");
  choiceMapping.setGetMethodName(""String_Node_Str"");
  choiceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(choiceMapping);
  XMLCompositeObjectMapping allMapping=new XMLCompositeObjectMapping();
  allMapping.setReferenceClass(All.class);
  allMapping.setAttributeName(""String_Node_Str"");
  allMapping.setSetMethodName(""String_Node_Str"");
  allMapping.setGetMethodName(""String_Node_Str"");
  allMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(allMapping);
  XMLAnyCollectionMapping orderedAttributesMapping=new XMLAnyCollectionMapping();
  orderedAttributesMapping.setAttributeName(""String_Node_Str"");
  descriptor.addMapping(orderedAttributesMapping);
  return descriptor;
}","private XMLDescriptor buildExtensionDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(Extension.class);
  descriptor.setNamespaceResolver(namespaceResolver);
  XMLDirectMapping baseTypeMapping=new XMLDirectMapping();
  baseTypeMapping.setAttributeName(""String_Node_Str"");
  baseTypeMapping.setXPath(""String_Node_Str"");
  descriptor.addMapping(baseTypeMapping);
  XMLCompositeObjectMapping sequenceMapping=new XMLCompositeObjectMapping();
  sequenceMapping.setReferenceClass(Sequence.class);
  sequenceMapping.setAttributeName(""String_Node_Str"");
  sequenceMapping.setSetMethodName(""String_Node_Str"");
  sequenceMapping.setGetMethodName(""String_Node_Str"");
  sequenceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(sequenceMapping);
  XMLCompositeObjectMapping choiceMapping=new XMLCompositeObjectMapping();
  choiceMapping.setReferenceClass(Choice.class);
  choiceMapping.setAttributeName(""String_Node_Str"");
  choiceMapping.setSetMethodName(""String_Node_Str"");
  choiceMapping.setGetMethodName(""String_Node_Str"");
  choiceMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(choiceMapping);
  XMLCompositeObjectMapping allMapping=new XMLCompositeObjectMapping();
  allMapping.setReferenceClass(All.class);
  allMapping.setAttributeName(""String_Node_Str"");
  allMapping.setSetMethodName(""String_Node_Str"");
  allMapping.setGetMethodName(""String_Node_Str"");
  allMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(allMapping);
  XMLAnyCollectionMapping orderedAttributesMapping=new XMLAnyCollectionMapping();
  orderedAttributesMapping.setAttributeName(""String_Node_Str"");
  descriptor.addMapping(orderedAttributesMapping);
  XMLCompositeObjectMapping anyAttributeMapping=new XMLCompositeObjectMapping();
  anyAttributeMapping.setReferenceClass(AnyAttribute.class);
  anyAttributeMapping.setAttributeName(""String_Node_Str"");
  anyAttributeMapping.setXPath(XMLConstants.SCHEMA_PREFIX + ""String_Node_Str"" + ""String_Node_Str"");
  descriptor.addMapping(anyAttributeMapping);
  return descriptor;
}"
65803,"public void testExceptionCase(){
  try {
    String invalidURLFile=""String_Node_Str"";
    InputStream is=getSchemaInputStream(invalidURLFile);
    List types=xsdHelper.define(is,getSchemaLocation());
  }
 catch (  org.eclipse.persistence.exceptions.SDOException ex) {
  }
}","public void testExceptionCase(){
  try {
    String invalidURLFile=""String_Node_Str"";
    InputStream is=getSchemaInputStream(invalidURLFile);
    List types=xsdHelper.define(is,getSchemaLocation());
  }
 catch (  Exception ex) {
  }
}"
65804,"/** 
 * Given the source schema and namespace and schemaLocation values from an import or include return the referenced Schema
 * @param sourceXSD The Source object of the source schema
 * @param namespace The namespace portion of the import/include
 * @param schemaLocation The schemaLocation portion of the import/include
 * @return Source for the referenced Schema or null if processing the referenced schema should be skipped
 */
public Source resolveSchema(Source sourceXSD,String namespace,String schemaLocation);","/** 
 * Given the source schema and namespace and schemaLocation values from an import or include return the referenced Schema
 * @param sourceXSD The Source object of the source schema
 * @param namespace The namespace portion of the import/include
 * @param schemaLocation The schemaLocation portion of the import/include
 * @return Source for the referenced Schema or null if processing the referenced schema should be skipped.  If this methodthrows an exception, processing will stop.
 */
public Source resolveSchema(Source sourceXSD,String namespace,String schemaLocation);"
65805,"/** 
 * INTERNAL: Make this Type an opened Type to allow open content by assigning true value or a Type not to accept any additional properties by assigning false value,  {@link isOpen()}.
 * @param bOpen  boolean value implying if this Type is open
 */
public void setOpen(boolean bOpen){
  if (isDataType() && bOpen) {
    throw SDOException.typeCannotBeOpenAndDataType(getURI(),getName());
  }
  if (open != bOpen) {
    open=bOpen;
    if (open) {
      if (isSubType()) {
        Type baseType=(Type)getBaseTypes().get(0);
        if (!baseType.isOpen()) {
          addOpenMappings();
        }
      }
 else {
        addOpenMappings();
      }
      for (int i=0; i < getSubTypes().size(); i++) {
        SDOType nextSubType=(SDOType)getSubTypes().get(i);
        nextSubType.setOpen(bOpen);
      }
    }
  }
}","/** 
 * INTERNAL: Make this Type an opened Type to allow open content by assigning true value or a Type not to accept any additional properties by assigning false value,  {@link isOpen()}.
 * @param bOpen  boolean value implying if this Type is open
 */
public void setOpen(boolean bOpen){
  if (isDataType() && bOpen) {
    throw SDOException.typeCannotBeOpenAndDataType(getURI(),getName());
  }
  if (open != bOpen) {
    open=bOpen;
    if (open) {
      if (isSubType()) {
        Type baseType=(Type)getBaseTypes().get(0);
        if (!baseType.isOpen()) {
          addOpenMappings();
        }
      }
 else {
        addOpenMappings();
      }
      if (isBaseType()) {
        for (int i=0; i < getSubTypes().size(); i++) {
          SDOType nextSubType=(SDOType)getSubTypes().get(i);
          nextSubType.setOpen(bOpen);
        }
      }
    }
  }
}"
65806,"public List getInstanceProperties(){
  return new ArrayList(getPropertyValues().keySet());
}","public List getInstanceProperties(){
  if (null == propertyValues) {
    return Collections.EMPTY_LIST;
  }
  return new ArrayList(getPropertyValues().keySet());
}"
65807,"private void updateIndices(int insertPosition,Property property){
  int declaredSize=getDeclaredProperties().size();
  SDOProperty nextProp=null;
  for (int i=0; i < declaredSize; i++) {
    nextProp=(SDOProperty)getDeclaredProperties().get(i);
    nextProp.setIndexInType(nextProp.getIndexInType() + 1);
  }
  getProperties().add(insertPosition,property);
  int subTypesSize=getSubTypes().size();
  SDOType nextSubType=null;
  for (int i=0; i < subTypesSize; i++) {
    nextSubType=(SDOType)getSubTypes().get(i);
    nextSubType.updateIndices(insertPosition,property);
  }
}","private void updateIndices(int insertPosition,Property property){
  int declaredSize=getDeclaredProperties().size();
  SDOProperty nextProp=null;
  for (int i=0; i < declaredSize; i++) {
    nextProp=(SDOProperty)getDeclaredProperties().get(i);
    nextProp.setIndexInType(nextProp.getIndexInType() + 1);
  }
  getProperties().add(insertPosition,property);
  if (isBaseType()) {
    int subTypesSize=getSubTypes().size();
    SDOType nextSubType=null;
    for (int i=0; i < subTypesSize; i++) {
      nextSubType=(SDOType)getSubTypes().get(i);
      nextSubType.updateIndices(insertPosition,property);
    }
  }
}"
65808,"private void updateSubtypes(Type baseType){
  getProperties().addAll(0,baseType.getProperties());
  for (int i=0; i < getSubTypes().size(); i++) {
    SDOType nextSubType=(SDOType)getSubTypes().get(i);
    nextSubType.updateSubtypes(baseType);
  }
}","private void updateSubtypes(Type baseType){
  getProperties().addAll(0,baseType.getProperties());
  if (isBaseType()) {
    for (int i=0; i < getSubTypes().size(); i++) {
      SDOType nextSubType=(SDOType)getSubTypes().get(i);
      nextSubType.updateSubtypes(baseType);
    }
  }
}"
65809,"/** 
 * INTERNAL:
 * @param property
 */
public void addDeclaredProperty(SDOProperty property,int index){
  if (!getDeclaredPropertiesMap().containsKey(property.getName())) {
    int currentSize=getDeclaredProperties().size();
    int allSize=getProperties().size();
    int insertPlace=allSize - currentSize + index;
    for (int i=0; i < getSubTypes().size(); i++) {
      SDOType nextSubType=(SDOType)getSubTypes().get(i);
      nextSubType.updateIndices(insertPlace,property);
    }
    getDeclaredProperties().add(index,property);
    getProperties().add(insertPlace,property);
    property.setContainingType(this);
    getDeclaredPropertiesMap().put(property.getName(),property);
    if (property.hasAliasNames()) {
      for (int j=0; j < property.getAliasNames().size(); j++) {
        getDeclaredPropertiesMap().put(property.getAliasNames().get(j),property);
      }
    }
    if ((property.getType() != null) && (property.getType().isChangeSummaryType())) {
      changeSummaryProperty=property;
    }
  }
}","/** 
 * INTERNAL:
 * @param property
 */
public void addDeclaredProperty(SDOProperty property,int index){
  if (!getDeclaredPropertiesMap().containsKey(property.getName())) {
    int currentSize=getDeclaredProperties().size();
    int allSize=getProperties().size();
    int insertPlace=allSize - currentSize + index;
    if (isBaseType()) {
      for (int i=0; i < getSubTypes().size(); i++) {
        SDOType nextSubType=(SDOType)getSubTypes().get(i);
        nextSubType.updateIndices(insertPlace,property);
      }
    }
    getDeclaredProperties().add(index,property);
    getProperties().add(insertPlace,property);
    property.setContainingType(this);
    getDeclaredPropertiesMap().put(property.getName(),property);
    if (property.hasAliasNames()) {
      for (int j=0; j < property.getAliasNames().size(); j++) {
        getDeclaredPropertiesMap().put(property.getAliasNames().get(j),property);
      }
    }
    if ((property.getType() != null) && (property.getType().isChangeSummaryType())) {
      changeSummaryProperty=property;
    }
  }
}"
65810,"public void setupInheritance(SDOType parentType){
  if (parentType == null) {
    addClassIndicator(getXmlDescriptor(),getImplClass(),true);
  }
 else {
    if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
      if (!parentType.getXmlDescriptor().hasInheritance()) {
        addClassIndicator(parentType.getXmlDescriptor(),parentType.getImplClass(),false);
      }
      XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
      NamespaceResolver parentNR=parentDescriptor.getNonNullNamespaceResolver();
      if (parentNR != null) {
        for (int i=0; i < parentNR.getNamespaces().size(); i++) {
          Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
          if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
            getXmlDescriptor().getNonNullNamespaceResolver().put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
          }
        }
      }
      if (getInstanceClassName() != null) {
        String indicator=getName();
        String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix == null) {
          prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
          if (prefix != null) {
            parentDescriptor.getNamespaceResolver().put(prefix,getURI());
          }
        }
        if (prefix != null) {
          indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
        }
        Class implClass=getImplClass();
        parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
        parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
        Class parentClass=parentType.getImplClass();
        getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
        getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
        parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
        getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      }
    }
  }
  for (int i=0; i < subTypes.size(); i++) {
    SDOType nextSubType=(SDOType)subTypes.get(i);
    if (!nextSubType.isDataType() && nextSubType.isSubType()) {
      nextSubType.setupInheritance(this);
    }
  }
}","public void setupInheritance(SDOType parentType){
  if (parentType == null) {
    addClassIndicator(getXmlDescriptor(),getImplClass(),true);
  }
 else {
    if ((parentType.getURI() != null) && (!parentType.getURI().equals(SDOConstants.SDO_URL))) {
      if (!parentType.getXmlDescriptor().hasInheritance()) {
        addClassIndicator(parentType.getXmlDescriptor(),parentType.getImplClass(),false);
      }
      XMLDescriptor parentDescriptor=(XMLDescriptor)parentType.getXmlDescriptor().getInheritancePolicy().getRootParentDescriptor();
      NamespaceResolver parentNR=parentDescriptor.getNonNullNamespaceResolver();
      if (parentNR != null) {
        for (int i=0; i < parentNR.getNamespaces().size(); i++) {
          Namespace nextNamespace=(Namespace)parentNR.getNamespaces().get(i);
          if ((!nextNamespace.getPrefix().equals(XMLConstants.XMLNS)) && (!nextNamespace.getNamespaceURI().equals(XMLConstants.SCHEMA_URL)) && (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOJAVA_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDOXML_URL))&& (!nextNamespace.getNamespaceURI().equals(SDOConstants.SDO_URL))) {
            getXmlDescriptor().getNonNullNamespaceResolver().put(nextNamespace.getPrefix(),nextNamespace.getNamespaceURI());
          }
        }
      }
      if (getInstanceClassName() != null) {
        String indicator=getName();
        String prefix=parentDescriptor.getNamespaceResolver().resolveNamespaceURI(getURI());
        if (prefix == null) {
          prefix=getXmlDescriptor().getNamespaceResolver().resolveNamespaceURI(getURI());
          if (prefix != null) {
            parentDescriptor.getNamespaceResolver().put(prefix,getURI());
          }
        }
        if (prefix != null) {
          indicator=prefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT + indicator;
        }
        Class implClass=getImplClass();
        parentDescriptor.getInheritancePolicy().addClassIndicator(implClass,indicator);
        parentDescriptor.getInheritancePolicy().setShouldReadSubclasses(true);
        Class parentClass=parentType.getImplClass();
        getXmlDescriptor().getInheritancePolicy().setParentClass(parentClass);
        getXmlDescriptor().getInheritancePolicy().setParentDescriptor(parentType.getXmlDescriptor());
        parentType.getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
        getXmlDescriptor().getNamespaceResolver().put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
      }
    }
  }
  if (isBaseType()) {
    for (int i=0; i < subTypes.size(); i++) {
      SDOType nextSubType=(SDOType)subTypes.get(i);
      if (!nextSubType.isDataType() && nextSubType.isSubType()) {
        nextSubType.setupInheritance(this);
      }
    }
  }
}"
65811,"/** 
 * INTERNAL:
 */
public void postInitialize(){
  String idPropName=(String)get(SDOConstants.ID_PROPERTY);
  if (idPropName != null) {
    SDOProperty idProp=getProperty(idPropName);
    if (idProp != null) {
      String targetxpath=idProp.getQualifiedXPath(getURI(),true);
      getXmlDescriptor().addPrimaryKeyFieldName(targetxpath);
    }
  }
  setFinalized(true);
  for (int i=0; i < getNonFinalizedReferencingProps().size(); i++) {
    SDOProperty nextProp=(SDOProperty)getNonFinalizedReferencingProps().get(i);
    String nextURI=(String)getNonFinalizedMappingURIs().get(i);
    nextProp.buildMapping(nextURI,nextProp.getIndexInType());
  }
  if (!isDataType() && !isSubType() && getSubTypes().size() == 0) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xmlDescriptor.addMapping(sdoRefMapping);
  }
  if (!isDataType()) {
    getImplClass();
    if (!isAbstract() && !isWrapperType()) {
      TypeInstantiationPolicy tip=new TypeInstantiationPolicy(this);
      this.xmlDescriptor.setInstantiationPolicy(tip);
    }
  }
}","/** 
 * INTERNAL:
 */
public void postInitialize(){
  String idPropName=(String)get(SDOConstants.ID_PROPERTY);
  if (idPropName != null) {
    SDOProperty idProp=getProperty(idPropName);
    if (idProp != null) {
      String targetxpath=idProp.getQualifiedXPath(getURI(),true);
      getXmlDescriptor().addPrimaryKeyFieldName(targetxpath);
    }
  }
  setFinalized(true);
  if (null != nonFinalizedReferencingProps) {
    for (int i=0; i < nonFinalizedReferencingProps.size(); i++) {
      SDOProperty nextProp=nonFinalizedReferencingProps.get(i);
      String nextURI=(String)getNonFinalizedMappingURIs().get(i);
      nextProp.buildMapping(nextURI,nextProp.getIndexInType());
    }
    nonFinalizedReferencingProps=null;
    nonFinalizedMappingURIs=null;
  }
  if (!isDataType() && !isSubType() && !isBaseType()) {
    String sdoPrefix=((SDOTypeHelper)aHelperContext.getTypeHelper()).getPrefix(SDOConstants.SDO_URL);
    XMLDirectMapping sdoRefMapping=new XMLDirectMapping();
    sdoRefMapping.setAttributeName(SDO_REF_MAPPING_ATTRIBUTE_NAME);
    XMLField xmlField=new XMLField(""String_Node_Str"" + sdoPrefix + SDOConstants.SDO_XPATH_NS_SEPARATOR_FRAGMENT+ SDOConstants.CHANGESUMMARY_REF);
    xmlField.getXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    xmlField.getLastXPathFragment().setNamespaceURI(SDOConstants.SDO_URL);
    sdoRefMapping.setField(xmlField);
    xmlDescriptor.addMapping(sdoRefMapping);
  }
  if (!isDataType()) {
    getImplClass();
    if (!isAbstract() && !isWrapperType()) {
      TypeInstantiationPolicy tip=new TypeInstantiationPolicy(this);
      this.xmlDescriptor.setInstantiationPolicy(tip);
    }
  }
}"
65812,"public Object get(Property property){
  return getPropertyValues().get(property);
}","public Object get(Property property){
  if (null == propertyValues) {
    return null;
  }
  return propertyValues.get(property);
}"
65813,"private ComplexType generateComplexType(Type type){
  SDOType sdoType=(SDOType)type;
  ComplexType complexType=new ComplexType();
  String xsdLocalName=sdoType.getXsdLocalName();
  if (xsdLocalName != null) {
    complexType.setName(xsdLocalName);
  }
 else {
    complexType.setName(sdoType.getName());
  }
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoType.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    complexType.getAttributesMap().put(qname,sdoType.getName());
  }
  complexType.setAbstractValue(sdoType.isAbstract());
  if ((sdoType.getAppInfoElements() != null) && (sdoType.getAppInfoElements().size() > 0)) {
    Annotation annotation=new Annotation();
    annotation.setAppInfo(sdoType.getAppInfoElements());
    complexType.setAnnotation(annotation);
  }
  if ((sdoType.getAliasNames() != null) && (sdoType.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoType.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    complexType.getAttributesMap().put(qname,aliasNamesString);
  }
  complexType.setMixed(sdoType.isSequenced());
  Type baseType=null;
  if ((sdoType.getBaseTypes() != null) && (sdoType.getBaseTypes().size() > 0) && ((Type)sdoType.getBaseTypes().get(0) != null)) {
    baseType=(Type)sdoType.getBaseTypes().get(0);
  }
  if (baseType != null) {
    addTypeToListIfNeeded(sdoType,baseType);
    Extension extension=new Extension();
    QName schemaType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(baseType);
    if (schemaType != null) {
      extension.setBaseType(getPrefixStringForURI(schemaType.getNamespaceURI()) + schemaType.getLocalPart());
    }
 else     if ((baseType.getURI() == null) || (baseType.getURI().equalsIgnoreCase(generatedSchema.getTargetNamespace()))) {
      extension.setBaseType(baseType.getName());
    }
 else {
      extension.setBaseType(getPrefixStringForURI(baseType.getURI()) + baseType.getName());
    }
    buildElementsAndAttributes(extension,sdoType);
    ComplexContent complexContent=new ComplexContent();
    complexContent.setExtension(extension);
    complexType.setComplexContent(complexContent);
    return complexType;
  }
  buildElementsAndAttributes(complexType,sdoType);
  return complexType;
}","private ComplexType generateComplexType(Type type){
  SDOType sdoType=(SDOType)type;
  ComplexType complexType=new ComplexType();
  String xsdLocalName=sdoType.getXsdLocalName();
  if (xsdLocalName != null) {
    complexType.setName(xsdLocalName);
  }
 else {
    complexType.setName(sdoType.getName());
  }
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoType.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    complexType.getAttributesMap().put(qname,sdoType.getName());
  }
  complexType.setAbstractValue(sdoType.isAbstract());
  if ((sdoType.getAppInfoElements() != null) && (sdoType.getAppInfoElements().size() > 0)) {
    Annotation annotation=new Annotation();
    annotation.setAppInfo(sdoType.getAppInfoElements());
    complexType.setAnnotation(annotation);
  }
  if ((sdoType.getAliasNames() != null) && (sdoType.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoType.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    complexType.getAttributesMap().put(qname,aliasNamesString);
  }
  complexType.setMixed(sdoType.isSequenced());
  Type baseType=null;
  if (sdoType.isSubType()) {
    baseType=(Type)sdoType.getBaseTypes().get(0);
  }
  if (baseType != null) {
    addTypeToListIfNeeded(sdoType,baseType);
    Extension extension=new Extension();
    QName schemaType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(baseType);
    if (schemaType != null) {
      extension.setBaseType(getPrefixStringForURI(schemaType.getNamespaceURI()) + schemaType.getLocalPart());
    }
 else     if ((baseType.getURI() == null) || (baseType.getURI().equalsIgnoreCase(generatedSchema.getTargetNamespace()))) {
      extension.setBaseType(baseType.getName());
    }
 else {
      extension.setBaseType(getPrefixStringForURI(baseType.getURI()) + baseType.getName());
    }
    buildElementsAndAttributes(extension,sdoType);
    ComplexContent complexContent=new ComplexContent();
    complexContent.setExtension(extension);
    complexType.setComplexContent(complexContent);
    return complexType;
  }
  buildElementsAndAttributes(complexType,sdoType);
  return complexType;
}"
65814,"private SimpleType generateSimpleType(Type type){
  SDOType sdoType=(SDOType)type;
  SimpleType simpleType=new SimpleType();
  String xsdLocalName=sdoType.getXsdLocalName();
  if (xsdLocalName != null) {
    simpleType.setName(xsdLocalName);
  }
 else {
    simpleType.setName(sdoType.getName());
  }
  if ((sdoType.getAppInfoElements() != null) && (sdoType.getAppInfoElements().size() > 0)) {
    Annotation annotation=new Annotation();
    annotation.setAppInfo(sdoType.getAppInfoElements());
    simpleType.setAnnotation(annotation);
  }
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoType.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    simpleType.getAttributesMap().put(qname,sdoType.getName());
  }
  if ((sdoType.getAliasNames() != null) && (sdoType.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoType.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    simpleType.getAttributesMap().put(qname,aliasNamesString);
  }
  Object value=sdoType.get(SDOConstants.JAVA_CLASS_PROPERTY);
  if ((value != null) && value instanceof String) {
    String sdoJavaPrefix=getPrefixForURI(SDOConstants.SDOJAVA_URL);
    QName qname=new QName(SDOConstants.SDOJAVA_URL,SDOConstants.SDOJAVA_INSTANCECLASS,sdoJavaPrefix);
    simpleType.getAttributesMap().put(qname,value);
  }
  SDOType baseType=null;
  if ((sdoType.getBaseTypes() != null) && (sdoType.getBaseTypes().size() > 0) && ((SDOType)sdoType.getBaseTypes().get(0) != null)) {
    baseType=(SDOType)sdoType.getBaseTypes().get(0);
  }
  if (baseType != null) {
    Restriction restriction=new Restriction();
    addTypeToListIfNeeded(sdoType,baseType);
    QName schemaType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(baseType);
    if (schemaType != null) {
      String prefix=getPrefixStringForURI(schemaType.getNamespaceURI());
      restriction.setBaseType(prefix + schemaType.getLocalPart());
    }
 else {
      String prefix=getPrefixStringForURI(baseType.getURI());
      restriction.setBaseType(prefix + baseType.getName());
    }
    simpleType.setRestriction(restriction);
  }
  return simpleType;
}","private SimpleType generateSimpleType(Type type){
  SDOType sdoType=(SDOType)type;
  SimpleType simpleType=new SimpleType();
  String xsdLocalName=sdoType.getXsdLocalName();
  if (xsdLocalName != null) {
    simpleType.setName(xsdLocalName);
  }
 else {
    simpleType.setName(sdoType.getName());
  }
  if ((sdoType.getAppInfoElements() != null) && (sdoType.getAppInfoElements().size() > 0)) {
    Annotation annotation=new Annotation();
    annotation.setAppInfo(sdoType.getAppInfoElements());
    simpleType.setAnnotation(annotation);
  }
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoType.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    simpleType.getAttributesMap().put(qname,sdoType.getName());
  }
  if ((sdoType.getAliasNames() != null) && (sdoType.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoType.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    simpleType.getAttributesMap().put(qname,aliasNamesString);
  }
  Object value=sdoType.get(SDOConstants.JAVA_CLASS_PROPERTY);
  if ((value != null) && value instanceof String) {
    String sdoJavaPrefix=getPrefixForURI(SDOConstants.SDOJAVA_URL);
    QName qname=new QName(SDOConstants.SDOJAVA_URL,SDOConstants.SDOJAVA_INSTANCECLASS,sdoJavaPrefix);
    simpleType.getAttributesMap().put(qname,value);
  }
  SDOType baseType=null;
  if (sdoType.isSubType()) {
    baseType=(SDOType)sdoType.getBaseTypes().get(0);
  }
  if (baseType != null) {
    Restriction restriction=new Restriction();
    addTypeToListIfNeeded(sdoType,baseType);
    QName schemaType=((SDOTypeHelper)aHelperContext.getTypeHelper()).getXSDTypeFromSDOType(baseType);
    if (schemaType != null) {
      String prefix=getPrefixStringForURI(schemaType.getNamespaceURI());
      restriction.setBaseType(prefix + schemaType.getLocalPart());
    }
 else {
      String prefix=getPrefixStringForURI(baseType.getURI());
      restriction.setBaseType(prefix + baseType.getName());
    }
    simpleType.setRestriction(restriction);
  }
  return simpleType;
}"
65815,"private void generateSchema(String uri,List typesWithSameUri){
  generatedSchema=new Schema();
  generatedSchema.setTargetNamespace(uri);
  generatedSchema.setDefaultNamespace(uri);
  generatedSchema.setAttributeFormDefault(false);
  generatedSchema.setElementFormDefault(true);
  String javaPackage=null;
  for (int i=0; i < typesWithSameUri.size(); i++) {
    SDOType nextType=(SDOType)typesWithSameUri.get(i);
    if ((nextType.getBaseTypes() != null) && (nextType.getBaseTypes().size() > 1)) {
    }
    if (!nextType.isDataType()) {
      String fullName=nextType.getInstanceClassName();
      if (fullName != null) {
        String nextPackage=null;
        int lastDot=fullName.lastIndexOf('.');
        if (lastDot != -1) {
          nextPackage=fullName.substring(0,lastDot);
        }
        if (nextPackage != null) {
          javaPackage=nextPackage;
        }
      }
    }
    if (nextType.isDataType()) {
      SimpleType generatedType=generateSimpleType(nextType);
      generatedSchema.addTopLevelSimpleTypes(generatedType);
    }
 else {
      ComplexType generatedType=generateComplexType(nextType);
      generatedSchema.addTopLevelComplexTypes(generatedType);
      Element element=buildElementForComplexType(generatedSchema,generatedType);
      if (element != null) {
        generatedSchema.addTopLevelElement(element);
      }
    }
  }
  if (javaPackage != null) {
    getPrefixForURI(SDOConstants.SDOJAVA_URL);
    generatedSchema.getAttributesMap().put(SDOConstants.SDOJAVA_PACKAGE_QNAME,javaPackage);
  }
}","private void generateSchema(String uri,List typesWithSameUri){
  generatedSchema=new Schema();
  generatedSchema.setTargetNamespace(uri);
  generatedSchema.setDefaultNamespace(uri);
  generatedSchema.setAttributeFormDefault(false);
  generatedSchema.setElementFormDefault(true);
  String javaPackage=null;
  for (int i=0; i < typesWithSameUri.size(); i++) {
    SDOType nextType=(SDOType)typesWithSameUri.get(i);
    if (nextType.isSubType()) {
    }
    if (!nextType.isDataType()) {
      String fullName=nextType.getInstanceClassName();
      if (fullName != null) {
        String nextPackage=null;
        int lastDot=fullName.lastIndexOf('.');
        if (lastDot != -1) {
          nextPackage=fullName.substring(0,lastDot);
        }
        if (nextPackage != null) {
          javaPackage=nextPackage;
        }
      }
    }
    if (nextType.isDataType()) {
      SimpleType generatedType=generateSimpleType(nextType);
      generatedSchema.addTopLevelSimpleTypes(generatedType);
    }
 else {
      ComplexType generatedType=generateComplexType(nextType);
      generatedSchema.addTopLevelComplexTypes(generatedType);
      Element element=buildElementForComplexType(generatedSchema,generatedType);
      if (element != null) {
        generatedSchema.addTopLevelElement(element);
      }
    }
  }
  if (javaPackage != null) {
    getPrefixForURI(SDOConstants.SDOJAVA_URL);
    generatedSchema.getAttributesMap().put(SDOConstants.SDOJAVA_PACKAGE_QNAME,javaPackage);
  }
}"
65816,"private void updateCollisionProperty(SDOType owningType,SDOProperty p){
  owningType.setSequenced(true);
  SDOType baseType=owningType;
  while ((baseType.getBaseTypes() != null) && (baseType.getBaseTypes().size() > 0)) {
    baseType=(SDOType)baseType.getBaseTypes().get(0);
    baseType.setSequenced(true);
  }
  p.setNameCollision(true);
  p.setType(SDOConstants.SDO_OBJECT);
  p.setContainment(true);
  p.setMany(true);
  p.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
}","private void updateCollisionProperty(SDOType owningType,SDOProperty p){
  owningType.setSequenced(true);
  SDOType baseType=owningType;
  while (baseType.isSubType()) {
    baseType=(SDOType)baseType.getBaseTypes().get(0);
    baseType.setSequenced(true);
  }
  p.setNameCollision(true);
  p.setType(SDOConstants.SDO_OBJECT);
  p.setContainment(true);
  p.setMany(true);
  p.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
}"
65817,"public java.util.List<Type> define(Schema schema,boolean includeAllTypes,boolean processImports){
  java.util.List<Type> returnList=new ArrayList<Type>();
  setReturnAllTypes(includeAllTypes);
  setProcessImports(processImports);
  processSchema(schema);
  returnList.addAll(getGeneratedTypes().values());
  returnList.addAll(anonymousTypes);
  if (!this.isImportProcessor()) {
    java.util.List descriptorsToAdd=new ArrayList(returnList);
    Iterator<Type> iter=descriptorsToAdd.iterator();
    while (iter.hasNext()) {
      SDOType nextSDOType=(SDOType)iter.next();
      if (!nextSDOType.isFinalized()) {
        throw SDOException.typeReferencedButNotDefined(nextSDOType.getURI(),nextSDOType.getName());
      }
      Iterator<Property> propertiesIter=nextSDOType.getProperties().iterator();
      while (propertiesIter.hasNext()) {
        SDOProperty prop=(SDOProperty)propertiesIter.next();
        if (prop.getType().isDataType() && prop.isContainment()) {
          prop.setContainment(false);
        }
      }
    }
    Iterator<Property> propertiesIter=getGeneratedGlobalElements().values().iterator();
    while (propertiesIter.hasNext()) {
      SDOProperty nextSDOProperty=(SDOProperty)propertiesIter.next();
      if (!nextSDOProperty.isFinalized()) {
        throw SDOException.referencedPropertyNotFound(nextSDOProperty.getUri(),nextSDOProperty.getName());
      }
    }
    propertiesIter=getGeneratedGlobalAttributes().values().iterator();
    while (propertiesIter.hasNext()) {
      SDOProperty nextSDOProperty=(SDOProperty)propertiesIter.next();
      if (!nextSDOProperty.isFinalized()) {
        throw SDOException.referencedPropertyNotFound(nextSDOProperty.getUri(),nextSDOProperty.getName());
      }
    }
    iter=getGeneratedTypes().values().iterator();
    while (iter.hasNext()) {
      SDOType nextSDOType=(SDOType)iter.next();
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).addType(nextSDOType);
    }
    Iterator anonymousIterator=getAnonymousTypes().iterator();
    while (anonymousIterator.hasNext()) {
      SDOType nextSDOType=(SDOType)anonymousIterator.next();
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getAnonymousTypes().add(nextSDOType);
    }
    for (int i=0; i < descriptorsToAdd.size(); i++) {
      SDOType nextSDOType=(SDOType)descriptorsToAdd.get(i);
      if (!nextSDOType.isDataType() && nextSDOType.getBaseTypes().size() == 0 && nextSDOType.getSubTypes().size() > 0) {
        nextSDOType.setupInheritance(null);
      }
 else       if (!nextSDOType.isDataType() && nextSDOType.getBaseTypes().size() > 0 && !getGeneratedTypes().values().contains(nextSDOType.getBaseTypes().get(0))) {
        SDOType baseType=(SDOType)nextSDOType.getBaseTypes().get(0);
        while (baseType != null) {
          descriptorsToAdd.add(baseType);
          if (baseType.getBaseTypes().size() == 0) {
            baseType.setupInheritance(null);
            baseType=null;
          }
 else {
            baseType=(SDOType)baseType.getBaseTypes().get(0);
          }
        }
      }
    }
    ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(descriptorsToAdd);
    Iterator<QName> qNameIter=getGeneratedGlobalElements().keySet().iterator();
    while (qNameIter.hasNext()) {
      QName nextQName=qNameIter.next();
      SDOProperty nextSDOProperty=(SDOProperty)getGeneratedGlobalElements().get(nextQName);
      ((SDOXSDHelper)aHelperContext.getXSDHelper()).addGlobalProperty(nextQName,nextSDOProperty,true);
    }
    qNameIter=getGeneratedGlobalAttributes().keySet().iterator();
    while (qNameIter.hasNext()) {
      QName nextQName=qNameIter.next();
      SDOProperty nextSDOProperty=(SDOProperty)getGeneratedGlobalAttributes().get(nextQName);
      ((SDOXSDHelper)aHelperContext.getXSDHelper()).addGlobalProperty(nextQName,nextSDOProperty,false);
    }
    Iterator<java.util.List<GlobalRef>> globalRefsIter=getGlobalRefs().values().iterator();
    while (globalRefsIter.hasNext()) {
      java.util.List<GlobalRef> nextList=globalRefsIter.next();
      if (nextList.size() > 0) {
        GlobalRef ref=nextList.get(0);
        throw SDOException.referencedPropertyNotFound(((SDOProperty)ref.getProperty()).getUri(),ref.getProperty().getName());
      }
    }
  }
  return returnList;
}","public java.util.List<Type> define(Schema schema,boolean includeAllTypes,boolean processImports){
  java.util.List<Type> returnList=new ArrayList<Type>();
  setReturnAllTypes(includeAllTypes);
  setProcessImports(processImports);
  processSchema(schema);
  returnList.addAll(getGeneratedTypes().values());
  returnList.addAll(anonymousTypes);
  if (!this.isImportProcessor()) {
    java.util.List descriptorsToAdd=new ArrayList(returnList);
    Iterator<Type> iter=descriptorsToAdd.iterator();
    while (iter.hasNext()) {
      SDOType nextSDOType=(SDOType)iter.next();
      if (!nextSDOType.isFinalized()) {
        throw SDOException.typeReferencedButNotDefined(nextSDOType.getURI(),nextSDOType.getName());
      }
      Iterator<Property> propertiesIter=nextSDOType.getProperties().iterator();
      while (propertiesIter.hasNext()) {
        SDOProperty prop=(SDOProperty)propertiesIter.next();
        if (prop.getType().isDataType() && prop.isContainment()) {
          prop.setContainment(false);
        }
      }
    }
    Iterator<Property> propertiesIter=getGeneratedGlobalElements().values().iterator();
    while (propertiesIter.hasNext()) {
      SDOProperty nextSDOProperty=(SDOProperty)propertiesIter.next();
      if (!nextSDOProperty.isFinalized()) {
        throw SDOException.referencedPropertyNotFound(nextSDOProperty.getUri(),nextSDOProperty.getName());
      }
    }
    propertiesIter=getGeneratedGlobalAttributes().values().iterator();
    while (propertiesIter.hasNext()) {
      SDOProperty nextSDOProperty=(SDOProperty)propertiesIter.next();
      if (!nextSDOProperty.isFinalized()) {
        throw SDOException.referencedPropertyNotFound(nextSDOProperty.getUri(),nextSDOProperty.getName());
      }
    }
    iter=getGeneratedTypes().values().iterator();
    while (iter.hasNext()) {
      SDOType nextSDOType=(SDOType)iter.next();
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).addType(nextSDOType);
    }
    Iterator anonymousIterator=getAnonymousTypes().iterator();
    while (anonymousIterator.hasNext()) {
      SDOType nextSDOType=(SDOType)anonymousIterator.next();
      ((SDOTypeHelper)aHelperContext.getTypeHelper()).getAnonymousTypes().add(nextSDOType);
    }
    for (int i=0; i < descriptorsToAdd.size(); i++) {
      SDOType nextSDOType=(SDOType)descriptorsToAdd.get(i);
      if (!nextSDOType.isDataType() && !nextSDOType.isSubType() && nextSDOType.isBaseType()) {
        nextSDOType.setupInheritance(null);
      }
 else       if (!nextSDOType.isDataType() && nextSDOType.isSubType() && !getGeneratedTypes().values().contains(nextSDOType.getBaseTypes().get(0))) {
        SDOType baseType=(SDOType)nextSDOType.getBaseTypes().get(0);
        while (baseType != null) {
          descriptorsToAdd.add(baseType);
          if (baseType.getBaseTypes().size() == 0) {
            baseType.setupInheritance(null);
            baseType=null;
          }
 else {
            baseType=(SDOType)baseType.getBaseTypes().get(0);
          }
        }
      }
    }
    ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(descriptorsToAdd);
    Iterator<QName> qNameIter=getGeneratedGlobalElements().keySet().iterator();
    while (qNameIter.hasNext()) {
      QName nextQName=qNameIter.next();
      SDOProperty nextSDOProperty=(SDOProperty)getGeneratedGlobalElements().get(nextQName);
      ((SDOXSDHelper)aHelperContext.getXSDHelper()).addGlobalProperty(nextQName,nextSDOProperty,true);
    }
    qNameIter=getGeneratedGlobalAttributes().keySet().iterator();
    while (qNameIter.hasNext()) {
      QName nextQName=qNameIter.next();
      SDOProperty nextSDOProperty=(SDOProperty)getGeneratedGlobalAttributes().get(nextQName);
      ((SDOXSDHelper)aHelperContext.getXSDHelper()).addGlobalProperty(nextQName,nextSDOProperty,false);
    }
    Iterator<java.util.List<GlobalRef>> globalRefsIter=getGlobalRefs().values().iterator();
    while (globalRefsIter.hasNext()) {
      java.util.List<GlobalRef> nextList=globalRefsIter.next();
      if (nextList.size() > 0) {
        GlobalRef ref=nextList.get(0);
        throw SDOException.referencedPropertyNotFound(((SDOProperty)ref.getProperty()).getUri(),ref.getProperty().getName());
      }
    }
  }
  return returnList;
}"
65818,"private void initializeTypes(List types){
  List descriptorsToAdd=new ArrayList(types);
  for (int i=0; i < types.size(); i++) {
    SDOType nextType=(SDOType)types.get(i);
    if (!nextType.isDataType()) {
      nextType.postInitialize();
    }
  }
  for (int i=0; i < types.size(); i++) {
    SDOType nextType=(SDOType)types.get(i);
    if ((!nextType.isDataType() && nextType.getBaseTypes() == null || nextType.getBaseTypes().size() == 0) && nextType.getSubTypes().size() > 0) {
      nextType.setupInheritance(null);
    }
 else     if (!nextType.isDataType() && nextType.getBaseTypes().size() > 0 && !types.contains(nextType.getBaseTypes().get(0))) {
      SDOType baseType=(SDOType)nextType.getBaseTypes().get(0);
      while (baseType != null && !baseType.isDataType()) {
        descriptorsToAdd.add(baseType);
        if (baseType.getBaseTypes().size() == 0) {
          descriptorsToAdd.add(baseType);
          baseType.setupInheritance(null);
          baseType=null;
        }
 else {
          baseType=(SDOType)baseType.getBaseTypes().get(0);
        }
      }
    }
  }
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(descriptorsToAdd);
}","private void initializeTypes(List types){
  List descriptorsToAdd=new ArrayList(types);
  for (int i=0; i < types.size(); i++) {
    SDOType nextType=(SDOType)types.get(i);
    if (!nextType.isDataType()) {
      nextType.postInitialize();
    }
  }
  for (int i=0; i < types.size(); i++) {
    SDOType nextType=(SDOType)types.get(i);
    if ((!nextType.isDataType() && !nextType.isSubType()) && nextType.isBaseType()) {
      nextType.setupInheritance(null);
    }
 else     if (!nextType.isDataType() && nextType.isSubType() && !types.contains(nextType.getBaseTypes().get(0))) {
      SDOType baseType=(SDOType)nextType.getBaseTypes().get(0);
      while (baseType != null && !baseType.isDataType()) {
        descriptorsToAdd.add(baseType);
        if (baseType.getBaseTypes().size() == 0) {
          descriptorsToAdd.add(baseType);
          baseType.setupInheritance(null);
          baseType=null;
        }
 else {
          baseType=(SDOType)baseType.getBaseTypes().get(0);
        }
      }
    }
  }
  ((SDOXMLHelper)aHelperContext.getXMLHelper()).addDescriptors(descriptorsToAdd);
}"
65819,"private boolean isBaseTypeBytes(Type theType){
  List baseTypes=((SDOType)theType).getBaseTypes();
  if (baseTypes.size() > 0) {
    Type nextType=(Type)baseTypes.get(0);
    if (nextType == SDOConstants.SDO_BYTES) {
      return true;
    }
 else {
      return isBaseTypeBytes(nextType);
    }
  }
  return false;
}","private boolean isBaseTypeBytes(Type theType){
  if (((SDOType)theType).isSubType()) {
    List baseTypes=((SDOType)theType).getBaseTypes();
    Type nextType=(Type)baseTypes.get(0);
    if (nextType == SDOConstants.SDO_BYTES) {
      return true;
    }
 else {
      return isBaseTypeBytes(nextType);
    }
  }
  return false;
}"
65820,"public Class getJavaWrapperTypeForSDOType(Type type){
  SDOType sdoType=(SDOType)type;
  if (sdoType.getInstanceClass() != null) {
    return sdoType.getInstanceClass();
  }
  Class javaClass=null;
  if (sdoType.getBaseTypes() != null) {
    for (int i=0; i < sdoType.getBaseTypes().size(); i++) {
      Type baseType=(Type)sdoType.getBaseTypes().get(i);
      javaClass=getJavaWrapperTypeForSDOType(baseType);
      if (javaClass != null) {
        return javaClass;
      }
    }
  }
  return javaClass;
}","public Class getJavaWrapperTypeForSDOType(Type type){
  SDOType sdoType=(SDOType)type;
  if (sdoType.getInstanceClass() != null) {
    return sdoType.getInstanceClass();
  }
  Class javaClass=null;
  if (sdoType.isSubType()) {
    for (int i=0; i < sdoType.getBaseTypes().size(); i++) {
      Type baseType=(Type)sdoType.getBaseTypes().get(i);
      javaClass=getJavaWrapperTypeForSDOType(baseType);
      if (javaClass != null) {
        return javaClass;
      }
    }
  }
  return javaClass;
}"
65821,"/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            NamespaceResolver nsr=new NamespaceResolver();
            nsr.setDOM(parentElement);
            String schemaInstancePrefix=resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,nsr);
            if (schemaInstancePrefix == null) {
              nsr=getNamespaceResolverForField(xmlField);
              schemaInstancePrefix=nsr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
              if (schemaInstancePrefix == null) {
                schemaInstancePrefix=nsr.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
              }
              parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + schemaInstancePrefix,XMLConstants.SCHEMA_INSTANCE_URL);
            }
            parentElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}","/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            addXsiNilToElement(parentElement,xmlField);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}"
65822,"public Node getNodeForObject(Object obj){
  AbstractSession session=context.getSession(obj);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(obj);
  if (xmlDescriptor.shouldPreserveDocument()) {
    Object pk=xmlDescriptor.getObjectBuilder().extractPrimaryKeyFromObject(obj,session);
    if ((pk == null) || (pk instanceof CacheId) && (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(obj)});
    }
    CacheKey cacheKey=session.getIdentityMapAccessorInstance().getCacheKeyForObject(pk,xmlDescriptor.getJavaClass(),xmlDescriptor,false);
    if (cacheKey != null && cacheKey.getRecord() != null) {
      return ((DOMRecord)cacheKey.getRecord()).getDOM();
    }
  }
  return null;
}","public Node getNodeForObject(Object obj){
  if (obj == null) {
    return null;
  }
  AbstractSession session=context.getSession(obj);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(obj);
  if (xmlDescriptor.shouldPreserveDocument()) {
    Object pk=xmlDescriptor.getObjectBuilder().extractPrimaryKeyFromObject(obj,session);
    if ((pk == null) || (pk instanceof CacheId) && (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(obj)});
    }
    CacheKey cacheKey=session.getIdentityMapAccessorInstance().getCacheKeyForObject(pk,xmlDescriptor.getJavaClass(),xmlDescriptor,false);
    if (cacheKey != null && cacheKey.getRecord() != null) {
      return ((DOMRecord)cacheKey.getRecord()).getDOM();
    }
  }
  return null;
}"
65823,"public void addObjectToCache(Object obj,Node node,XMLMapping selfRecordMapping){
  if (node.getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  AbstractSession session=context.getSession(obj);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(obj);
  DOMRecord row=new DOMRecord((Element)node);
  row.setSession(session);
  Object pk=xmlDescriptor.getObjectBuilder().extractPrimaryKeyFromRow(row,session);
  if (xmlDescriptor.shouldPreserveDocument() || xmlDescriptor.getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(obj)});
    }
    CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
    if ((xmlDescriptor).shouldPreserveDocument()) {
      key.setRecord(row);
    }
    key.setObject(obj);
    key.releaseDeferredLock();
  }
}","public void addObjectToCache(Object obj,Node node,XMLMapping selfRecordMapping){
  if (obj == null || node.getNodeType() != Node.ELEMENT_NODE) {
    return;
  }
  AbstractSession session=context.getSession(obj);
  XMLDescriptor xmlDescriptor=(XMLDescriptor)session.getDescriptor(obj);
  DOMRecord row=new DOMRecord((Element)node);
  row.setSession(session);
  Object pk=xmlDescriptor.getObjectBuilder().extractPrimaryKeyFromRow(row,session);
  if (xmlDescriptor.shouldPreserveDocument() || xmlDescriptor.getPrimaryKeyFieldNames().size() > 0) {
    if ((pk == null) || (((CacheId)pk).getPrimaryKey().length == 0)) {
      pk=new CacheId(new Object[]{new WeakObjectWrapper(obj)});
    }
    CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
    if ((xmlDescriptor).shouldPreserveDocument()) {
      key.setRecord(row);
    }
    key.setObject(obj);
    key.releaseDeferredLock();
  }
}"
65824,"/** 
 * INTERNAL:
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if (attributeValue == null) {
    row.put(this.getField(),null);
    return;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  Vector nestedRows=new Vector(cp.sizeFor(attributeValue));
  for (Object iter=cp.iteratorFor(attributeValue); cp.hasNext(iter); ) {
    Object element=cp.next(iter,session);
    if (hasConverter()) {
      if (getConverter() instanceof XMLConverter) {
        element=((XMLConverter)getConverter()).convertObjectValueToDataValue(element,session,((XMLRecord)row).getMarshaller());
      }
 else {
        element=getConverter().convertObjectValueToDataValue(element,session);
      }
    }
    nestedRows.addElement(buildCompositeRow(element,session,row,writeType));
  }
  Object fieldValue=null;
  if (!nestedRows.isEmpty()) {
    fieldValue=this.getDescriptor().buildFieldValueFromNestedRows(nestedRows,getStructureName(),session);
  }
  row.put(this.getField(),fieldValue);
}","/** 
 * INTERNAL:
 */
@Override public void writeFromObjectIntoRow(Object object,AbstractRecord row,AbstractSession session,WriteType writeType) throws DescriptorException {
  if (this.isReadOnly()) {
    return;
  }
  Object attributeValue=this.getAttributeValueFromObject(object);
  if (attributeValue == null) {
    row.put(this.getField(),null);
    return;
  }
  ContainerPolicy cp=this.getContainerPolicy();
  Vector nestedRows=new Vector(cp.sizeFor(attributeValue));
  for (Object iter=cp.iteratorFor(attributeValue); cp.hasNext(iter); ) {
    Object element=cp.next(iter,session);
    if (hasConverter()) {
      if (getConverter() instanceof XMLConverter) {
        element=((XMLConverter)getConverter()).convertObjectValueToDataValue(element,session,((XMLRecord)row).getMarshaller());
      }
 else {
        element=getConverter().convertObjectValueToDataValue(element,session);
      }
    }
    if (element == null) {
      XMLNullRepresentationType nullRepresentation=getNullPolicy().getMarshalNullRepresentation();
      if (nullRepresentation == XMLNullRepresentationType.XSI_NIL) {
        nestedRows.add(XMLRecord.NIL);
      }
 else       if (nullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
        Node emptyNode=XPathEngine.getInstance().createUnownedElement(((XMLRecord)row).getDOM(),(XMLField)field);
        DOMRecord nestedRow=new DOMRecord(emptyNode);
        nestedRows.add(nestedRow);
      }
    }
 else {
      nestedRows.addElement(buildCompositeRow(element,session,row,writeType));
    }
  }
  Object fieldValue=null;
  if (!nestedRows.isEmpty()) {
    fieldValue=this.getDescriptor().buildFieldValueFromNestedRows(nestedRows,getStructureName(),session);
  }
  row.put(this.getField(),fieldValue);
}"
65825,"/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(XMLRecord record,Object object,XMLField field,AbstractSession session){
  if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
    Node root=record.getDOM();
    Element nested=(Element)XPathEngine.getInstance().create(field,root,session);
    nested.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XSI_NIL_ATTRIBUTE,TRUE);
    return true;
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      Node root=record.getDOM();
      XPathEngine.getInstance().create(field,root,session);
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(XMLRecord record,Object object,XMLField field,AbstractSession session){
  if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
    record.put(field,XMLRecord.NIL);
    return true;
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      Node element=XPathEngine.getInstance().createUnownedElement(record.getDOM(),field);
      DOMRecord nestedRow=new DOMRecord(element);
      record.put(field,nestedRow);
      return true;
    }
 else {
      return false;
    }
  }
}"
65826,"public void setSchema(Schema schema){
  xmlParser.setXMLSchema(schema);
  saxParserFactory.setSchema(schema);
  try {
    saxParser=saxParserFactory.newSAXParser();
    XMLReader newXmlReader=new XMLReader(saxParser.getXMLReader());
    newXmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
    newXmlReader.setEntityResolver(xmlReader.getEntityResolver());
    newXmlReader.setErrorHandler(xmlReader.getErrorHandler());
    xmlReader=newXmlReader;
    xmlParser.setXMLSchema(schema);
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public void setSchema(Schema schema){
  xmlParser.setXMLSchema(schema);
  if (saxParserFactory == null) {
    saxParserFactory=createSAXParserFactory();
  }
  saxParserFactory.setSchema(schema);
  try {
    saxParser=saxParserFactory.newSAXParser();
    XMLReader newXmlReader=new XMLReader(saxParser.getXMLReader());
    newXmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
    newXmlReader.setEntityResolver(xmlReader.getEntityResolver());
    newXmlReader.setErrorHandler(xmlReader.getErrorHandler());
    xmlReader=newXmlReader;
    xmlParser.setXMLSchema(schema);
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
65827,"private void setValidatorHandler(XMLReader xmlReader){
  Schema schema=null;
  try {
    schema=saxParserFactory.getSchema();
  }
 catch (  UnsupportedOperationException e) {
  }
  if (null != schema) {
    ValidatorHandler validatorHandler=schema.newValidatorHandler();
    xmlReader.setValidatorHandler(validatorHandler);
    validatorHandler.setErrorHandler(getErrorHandler());
  }
}","private void setValidatorHandler(XMLReader xmlReader){
  Schema schema=null;
  try {
    schema=getSAXParserFactory().getSchema();
  }
 catch (  UnsupportedOperationException e) {
  }
  if (null != schema) {
    ValidatorHandler validatorHandler=schema.newValidatorHandler();
    xmlReader.setValidatorHandler(validatorHandler);
    validatorHandler.setErrorHandler(getErrorHandler());
  }
}"
65828,"public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    saxParserFactory=SAXParserFactory.newInstance();
    saxParserFactory.setNamespaceAware(true);
    saxParserFactory.setFeature(XMLReader.NAMESPACE_PREFIXES_FEATURE,true);
    try {
      saxParserFactory.setFeature(XMLReader.REPORT_IGNORED_ELEMENT_CONTENT_WHITESPACE_FEATURE,true);
    }
 catch (    org.xml.sax.SAXNotRecognizedException ex) {
    }
catch (    org.xml.sax.SAXNotSupportedException ex) {
    }
    if (null != parserFeatures) {
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=saxParserFactory.newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public SAXUnmarshaller(XMLUnmarshaller xmlUnmarshaller,Map<String,Boolean> parserFeatures) throws XMLMarshalException {
  super();
  try {
    if (null != parserFeatures) {
      saxParserFactory=createSAXParserFactory();
      for (      Map.Entry<String,Boolean> parserFeature : parserFeatures.entrySet()) {
        try {
          saxParserFactory.setFeature(parserFeature.getKey(),parserFeature.getValue());
        }
 catch (        org.xml.sax.SAXNotRecognizedException ex) {
        }
catch (        org.xml.sax.SAXNotSupportedException ex) {
        }
      }
    }
    saxParser=getSAXParserFactory().newSAXParser();
    xmlReader=new XMLReader(saxParser.getXMLReader());
    xmlReader.setErrorHandler(new DefaultErrorHandler());
    xmlParser=XMLPlatformFactory.getInstance().getXMLPlatform().newXMLParser();
    xmlParser.setNamespaceAware(true);
    xmlParser.setValidationMode(XMLParser.NONVALIDATING);
    this.xmlUnmarshaller=xmlUnmarshaller;
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
65829,"/** 
 * Each mapping is recursed to assign values from the Record to the attributes in the domain object.
 */
public void buildAttributesIntoObject(Object domainObject,CacheKey cacheKey,AbstractRecord databaseRow,ObjectBuildingQuery query,JoinedAttributeManager joinManager,boolean forRefresh,AbstractSession targetSession) throws DatabaseException {
  List mappings=this.descriptor.getMappings();
  boolean readAllMappings=query.shouldReadAllMappings();
  boolean isTargetProtected=targetSession.isProtectedSession();
  int size=mappings.size();
  for (int index=0; index < size; index++) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
    if (readAllMappings || query.shouldReadMapping(mapping)) {
      mapping.readFromRowIntoObject(databaseRow,joinManager,domainObject,cacheKey,query,targetSession,isTargetProtected);
    }
  }
  if (this.descriptor.getEventManager().hasAnyEventListeners()) {
    org.eclipse.persistence.descriptors.DescriptorEvent event=new org.eclipse.persistence.descriptors.DescriptorEvent(domainObject);
    event.setQuery(query);
    event.setSession(query.getSession());
    event.setRecord(databaseRow);
    if (forRefresh) {
      event.setEventCode(DescriptorEventManager.PostRefreshEvent);
    }
 else {
      event.setEventCode(DescriptorEventManager.PostBuildEvent);
    }
    this.descriptor.getEventManager().executeEvent(event);
  }
}","/** 
 * Each mapping is recursed to assign values from the Record to the attributes in the domain object.
 */
public void buildAttributesIntoObject(Object domainObject,CacheKey cacheKey,AbstractRecord databaseRow,ObjectBuildingQuery query,JoinedAttributeManager joinManager,boolean forRefresh,AbstractSession targetSession) throws DatabaseException {
  List mappings=this.descriptor.getMappings();
  boolean readAllMappings=query.shouldReadAllMappings();
  boolean isTargetProtected=targetSession.isProtectedSession();
  int size=mappings.size();
  for (int index=0; index < size; index++) {
    DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
    if (readAllMappings || query.shouldReadMapping(mapping)) {
      mapping.readFromRowIntoObject(databaseRow,joinManager,domainObject,cacheKey,query,targetSession,isTargetProtected);
    }
  }
  if (this.descriptor.hasEventManager()) {
    DescriptorEventManager descriptorEventManager=this.descriptor.getDescriptorEventManager();
    if (descriptorEventManager.hasAnyEventListeners()) {
      org.eclipse.persistence.descriptors.DescriptorEvent event=new org.eclipse.persistence.descriptors.DescriptorEvent(domainObject);
      event.setQuery(query);
      event.setSession(query.getSession());
      event.setRecord(databaseRow);
      if (forRefresh) {
        event.setEventCode(DescriptorEventManager.PostRefreshEvent);
      }
 else {
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
      }
      descriptorEventManager.executeEvent(event);
    }
  }
}"
65830,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
  }
  for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
    XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
    pkField.setNamespaceResolver(this.namespaceResolver);
    pkField.initialize();
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
  }
  for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
    XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
    pkField.setNamespaceResolver(this.namespaceResolver);
    pkField.initialize();
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  if (eventManager != null) {
    eventManager.initialize(session);
  }
  if (copyPolicy != null) {
    copyPolicy.initialize(session);
  }
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
}"
65831,"public void endDocument() throws SAXException {
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  try {
    if (null != containersMap) {
      for (      Entry<ContainerValue,Object> entry : containersMap.entrySet()) {
        entry.getKey().setContainerInstance(currentObject,entry.getValue());
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,session,true);
      }
    }
    if (getUnmarshaller().getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.getEventManager().hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(currentObject);
      event.setSession(session);
      event.setRecord(this);
      event.setEventCode(DescriptorEventManager.PostBuildEvent);
      xmlDescriptor.getEventManager().executeEvent(event);
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      int primaryKeyFieldsSize=primaryKeyFields.size();
      if (primaryKeyFieldsSize > 0) {
        Object pk=treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
        for (int x=0; x < primaryKeyFieldsSize; x++) {
          Object value=((CacheId)pk).getPrimaryKey()[x];
          if (null == value) {
            XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
            ((CacheId)pk).set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
          }
        }
        CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
        key.setRecord(this);
        key.setObject(currentObject);
        key.releaseDeferredLock();
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
}","public void endDocument() throws SAXException {
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  try {
    if (null != containersMap) {
      for (      Entry<ContainerValue,Object> entry : containersMap.entrySet()) {
        entry.getKey().setContainerInstance(currentObject,entry.getValue());
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession(session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,session,true);
      }
    }
    if (getUnmarshaller().getUnmarshalListener() != null) {
      if (this.parentRecord != null) {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        getUnmarshaller().getUnmarshalListener().afterUnmarshal(currentObject,null);
      }
    }
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.hasEventManager()) {
      DescriptorEventManager eventManager=xmlDescriptor.getEventManager();
      if (null != eventManager && eventManager.hasAnyEventListeners()) {
        DescriptorEvent event=new DescriptorEvent(currentObject);
        event.setSession(session);
        event.setRecord(this);
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
        eventManager.executeEvent(event);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (session.isUnitOfWork()) {
    ClassDescriptor xmlDescriptor=treeObjectBuilder.getDescriptor();
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      int primaryKeyFieldsSize=primaryKeyFields.size();
      if (primaryKeyFieldsSize > 0) {
        Object pk=treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
        for (int x=0; x < primaryKeyFieldsSize; x++) {
          Object value=((CacheId)pk).getPrimaryKey()[x];
          if (null == value) {
            XMLField pkField=(XMLField)xmlDescriptor.getPrimaryKeyFields().get(x);
            ((CacheId)pk).set(x,getUnmarshaller().getXMLContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
          }
        }
        CacheKey key=session.getIdentityMapAccessorInstance().acquireDeferredLock(pk,xmlDescriptor.getJavaClass(),xmlDescriptor);
        key.setRecord(this);
        key.setObject(currentObject);
        key.releaseDeferredLock();
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
}"
65832,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.hashcode.BinderWithHashCodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.hashcode.BinderWithHashCodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  return suite;
}"
65833,"public void testCreateContextFromXSDNode() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdElement,null,null,null);
  DynamicEntity emp=jaxbContext.newDynamicEntity(EMPLOYEE_CLASS_NAME);
  assertNotNull(emp);
}","public void testCreateContextFromXSDNode() throws Exception {
  InputStream inputStream=ClassLoader.getSystemResourceAsStream(EXAMPLE_XSD);
  DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setNamespaceAware(true);
  DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
  Document xsdDocument=docBuilder.parse(inputStream);
  Element xsdElement=xsdDocument.getDocumentElement();
  DynamicJAXBContext jaxbContext=DynamicJAXBContextFactory.createContextFromXSD(xsdElement,null,null,null);
  DynamicEntity emp=jaxbContext.newDynamicEntity(EMPLOYEE_CLASS_NAME);
  assertNotNull(emp);
  Exception caughtException=null;
  try {
    jaxbContext.refeshMetadata();
  }
 catch (  JAXBException e) {
    if (e.getLinkedException() instanceof UnsupportedOperationException) {
      caughtException=e;
    }
  }
  assertNotNull(caughtException);
}"
65834,"public XMLBinderPolicy(){
  nodesToObjects=new WeakHashMap();
  objectsToNodes=new WeakHashMap();
  setNodeOrderingPolicy(new RelativePositionOrderingPolicy());
}","public XMLBinderPolicy(){
  nodesToObjects=new IdentityHashMap();
  objectsToNodes=new IdentityHashMap();
  setNodeOrderingPolicy(new RelativePositionOrderingPolicy());
}"
65835,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(LargeInlineBinaryTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.hashcode.BinderWithHashCodeTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  return suite;
}"
65836,"public void setSchema(Schema schema){
  saxParserFactory.setSchema(schema);
  try {
    saxParser=saxParserFactory.newSAXParser();
    XMLReader newXmlReader=new XMLReader(saxParser.getXMLReader());
    newXmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
    newXmlReader.setEntityResolver(xmlReader.getEntityResolver());
    newXmlReader.setErrorHandler(xmlReader.getErrorHandler());
    xmlReader=newXmlReader;
    xmlParser.setXMLSchema(schema);
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}","public void setSchema(Schema schema){
  xmlParser.setXMLSchema(schema);
  saxParserFactory.setSchema(schema);
  try {
    saxParser=saxParserFactory.newSAXParser();
    XMLReader newXmlReader=new XMLReader(saxParser.getXMLReader());
    newXmlReader.setFeature(VALIDATING,xmlReader.getFeature(VALIDATING));
    newXmlReader.setEntityResolver(xmlReader.getEntityResolver());
    newXmlReader.setErrorHandler(xmlReader.getErrorHandler());
    xmlReader=newXmlReader;
    xmlParser.setXMLSchema(schema);
  }
 catch (  Exception e) {
    throw XMLMarshalException.errorInstantiatingSchemaPlatform(e);
  }
}"
65837,"public Schema getSchema(){
  Schema schema=null;
  try {
    schema=saxParserFactory.getSchema();
  }
 catch (  UnsupportedOperationException ex) {
  }
  return schema;
}","public Schema getSchema(){
  Schema schema=null;
  try {
    schema=xmlParser.getXMLSchema();
  }
 catch (  UnsupportedOperationException ex) {
  }
  return schema;
}"
65838,"public ErrorHandler getErrorHandler(){
  return xmlReader.getErrorHandler();
}","public ErrorHandler getErrorHandler(){
  return xmlParser.getErrorHandler();
}"
65839,"/** 
 * If a Schema was set on the unmarshaller then wrap the ContentHandler in a ValidatorHandler.
 */
private void setContentHandler(XMLReader xmlReader,ContentHandler contentHandler){
  Schema schema=null;
  try {
    schema=saxParserFactory.getSchema();
  }
 catch (  UnsupportedOperationException e) {
  }
  if (null == schema) {
    xmlReader.setContentHandler(contentHandler);
  }
 else {
    ValidatorHandler validatorHandler=schema.newValidatorHandler();
    validatorHandler.setContentHandler(contentHandler);
    xmlReader.setContentHandler(validatorHandler);
  }
}","/** 
 * If a Schema was set on the unmarshaller then wrap the ContentHandler in a ValidatorHandler.
 */
private void setContentHandler(XMLReader xmlReader,ContentHandler contentHandler){
  setValidatorHandler(xmlReader);
  xmlReader.setContentHandler(contentHandler);
}"
65840,"public void setContentHandler(ContentHandler handler){
  reader.setContentHandler(handler);
}","public void setContentHandler(ContentHandler handler){
  if (validatorHandler != null) {
    validatorHandler.setContentHandler(handler);
  }
 else {
    reader.setContentHandler(handler);
  }
}"
65841,"public void setErrorHandler(ErrorHandler handler){
  reader.setErrorHandler(handler);
}","public void setErrorHandler(ErrorHandler handler){
  if (validatorHandler != null) {
    validatorHandler.setErrorHandler(handler);
  }
 else {
    reader.setErrorHandler(handler);
  }
}"
65842,"public void testFailOnSecondErrorSAXSource() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorSAXSource() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  spf.setNamespaceAware(true);
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}"
65843,"public void testFailOnSecondErrorSAXSourceWithClass() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source,Employee.class);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorSAXSourceWithClass() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  spf.setNamespaceAware(true);
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source,Employee.class);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}"
65844,"@Override protected void setUp() throws Exception {
  Class[] classes={Employee.class};
  JAXBContext jc=JAXBContextFactory.createContext(classes,null);
  unmarshaller=(JAXBUnmarshaller)jc.createUnmarshaller();
  SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
  InputStream stream=ClassLoader.getSystemResourceAsStream(SCHEMA);
  Schema schema=sf.newSchema(new StreamSource(stream));
  stream.close();
  this.schema=schema;
}","@Override protected void setUp() throws Exception {
  Class[] classes={Employee.class};
  JAXBContext jc=JAXBContextFactory.createContext(classes,null);
  unmarshaller=(JAXBUnmarshaller)jc.createUnmarshaller();
  SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  InputStream stream=ClassLoader.getSystemResourceAsStream(SCHEMA);
  Schema schema=sf.newSchema(new StreamSource(stream));
  stream.close();
  this.schema=schema;
}"
65845,"public void testFailOnSecondErrorSAXSourceWithType() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source,(Type)Employee.class);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailOnSecondErrorSAXSourceWithType() throws Exception {
  unmarshaller.setEventHandler(new CustomErrorValidationEventHandler());
  SAXParserFactory spf=SAXParserFactory.newInstance();
  spf.setNamespaceAware(true);
  SAXParser sp=spf.newSAXParser();
  XMLReader xr=sp.getXMLReader();
  InputStream stream=ClassLoader.getSystemResourceAsStream(DOUBLE_ERROR_XML);
  Source source=new SAXSource(xr,new InputSource(stream));
  try {
    unmarshaller.setSchema(this.schema);
    unmarshaller.unmarshal(source,(Type)Employee.class);
  }
 catch (  UnmarshalException ex) {
    assertTrue(true);
    return;
  }
catch (  UnsupportedOperationException uoe) {
    assertTrue(true);
    return;
  }
  fail(""String_Node_Str"");
}"
65846,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataMapping)mapping).getAttributeClassification();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(this.characters,attributeClassification);
    if (null != valueFromReader) {
      value=valueFromReader;
    }
 else {
      value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value.toString());
    }
    value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
  }
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
    }
 else {
      value=converter.convertDataValueToObjectValue(value,parent.getSession());
    }
  }
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XMLField field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((XMLBinaryDataCollectionMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataCollectionMapping)mapping).getAttributeElementClass();
  }
 else {
    isSwaRef=((XMLBinaryDataMapping)mapping).isSwaRef();
    field=(XMLField)((XMLBinaryDataMapping)mapping).getField();
    attributeClassification=((XMLBinaryDataMapping)mapping).getAttributeClassification();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,parent.getSession());
      }
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (null != valueFromReader) {
      value=valueFromReader;
    }
 else {
      value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(value.toString());
    }
    value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
  }
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
    }
 else {
      value=converter.convertDataValueToObjectValue(value,parent.getSession());
    }
  }
  if (isCollection) {
    if (value != null) {
      parent.addAttributeValue((ContainerValue)nodeValue,value);
    }
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}"
65847,"public CharSequence getCharacters(){
  if (null != characters) {
    return characters;
  }
  return getUnmarshaller().getStringBuffer();
}","public CharSequence getCharacters(){
  return getUnmarshaller().getStringBuffer();
}"
65848,"public void characters(CharSequence characters) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.characters(characters);
        }
 else {
          getFragmentBuilder().characters(characters);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      return;
    }
    XPathNode textNode=xPathNode.getTextNode();
    if (null == textNode) {
      textNode=xPathNode.getAnyNode();
      if (textNode != null) {
        xpathNodeIsMixedContent=true;
        this.xPathFragment.setLocalName(null);
        this.xPathFragment.setNamespaceURI(null);
        if (0 == characters.length()) {
          return;
        }
        if (!textNode.isWhitespaceAware() && characters.toString().trim().length() == 0) {
          return;
        }
      }
    }
    if (null != textNode) {
      xPathNode=textNode;
      unmarshalContext.characters(this);
    }
    if (null != xPathNode.getUnmarshalNodeValue()) {
      this.characters=characters;
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void characters(CharSequence characters) throws SAXException {
  if (null != characters) {
    String string=characters.toString();
    characters(string.toCharArray(),0,string.length());
  }
}"
65849,"public void resetStringBuffer(){
  this.getStringBuffer().reset();
  this.isBufferCDATA=false;
  this.characters=null;
}","public void resetStringBuffer(){
  this.getStringBuffer().reset();
  this.isBufferCDATA=false;
}"
65850,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementNillableTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(XmlIdRefTestCases.class);
  suite.addTestSuite(XmlIdRefObjectTestCases.class);
  suite.addTestSuite(XmlIdRefsTestCases.class);
  suite.addTestSuite(XmlIdRefsObjectTestCases.class);
  suite.addTestSuite(XmlElementsIdRefTestCases.class);
  suite.addTestSuite(XmlElementsSingleIdRefTestCases.class);
  suite.addTestSuite(XmlInlineBinaryDataTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlEnumAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlenum.XmlValueAnnotationWithEnumTestCases.class);
  suite.addTestSuite(JAXBElementSimpleTestCases.class);
  suite.addTestSuite(JAXBElementNestedTestCases.class);
  suite.addTestSuite(JAXBElementComplexTestCases.class);
  suite.addTestSuite(JAXBElementNilTestCases.class);
  suite.addTestSuite(JAXBElementBase64TestCases.class);
  suite.addTestSuite(JAXBElementDataHandlerTestCases.class);
  suite.addTestSuite(RootWithCompositeObjectTestCases.class);
  suite.addTestSuite(JAXBElementEnumTestCases.class);
  suite.addTestSuite(JAXBInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.RootWithCompositeCollectionTestCases.class);
  suite.addTest(XmlAdapterTestSuite.suite());
  suite.addTest(SchemaGenTestSuite.suite());
  suite.addTest(JAXBDOMTestSuite.suite());
  suite.addTest(JAXBSAXTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.StringEmptyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentByteArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.simpledocument.SimpleDocumentWhitespaceNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.schemacontext.SchemaContextAsQNameTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.qualified.QualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.namespaceuri.splitpackage.unqualified.UnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.events.sessionevents.SessionEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextCreationTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbContextReturnTypesTests.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.jaxbcontext.JaxbTypeToSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.adapter.BinderWithAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.binder.nullpolicy.BinderWithNullPolicyTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.listofobjects.JAXBListOfObjectsSuite.suite());
  suite.addTest(TypeMappingInfoTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.dynamic.DynamicJAXBTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.jaxb.substitution.SubstitutionTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTest(RefreshTestSuite.suite());
  return suite;
}"
65851,"public XMLCompositeDirectCollectionMapping generateEnumCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,EnumTypeInfo info){
  XMLCompositeDirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,info));
  JavaClass collectionType=property.getType();
  if (collectionType.isArray() || areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  mapping.setField(getXPathForField(property,namespaceInfo,true));
  if (property.isXmlList()) {
    mapping.setUsesSingleNode(true);
  }
  return mapping;
}","public XMLCompositeDirectCollectionMapping generateEnumCollectionMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,EnumTypeInfo info){
  XMLCompositeDirectCollectionMapping mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,info));
  return mapping;
}"
65852,"/** 
 * Generate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public DatabaseMapping generateMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    if (property.isReference()) {
      return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
    }
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=property.getActualType();
    DatabaseMapping mapping;
    if (typeInfo.containsKey(valueType.getQualifiedName())) {
      if (isCollectionType(property)) {
        mapping=generateCompositeCollectionMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else {
      if (property.isAny()) {
        if (isCollectionType(property)) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((XMLAnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((XMLAnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (isCollectionType(property)) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLBinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLCompositeDirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((XMLBinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        ((XMLDirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
    return mapping;
  }
  if (property.isSetXmlJoinNodes()) {
    if (isCollectionType(property)) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (this.isCollectionType(property)) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (isCollectionType(property)) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateMapMapping(property,descriptor,namespaceInfo);
  }
  if (isCollectionType(property)) {
    return generateCollectionMapping(property,descriptor,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null || componentType.isArray()) {
      return generateCompositeCollectionMapping(property,descriptor,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME) && !property.isAttribute()) {
    XMLCompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}","/** 
 * Generate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public DatabaseMapping generateMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    if (property.isReference()) {
      return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
    }
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=property.getActualType();
    DatabaseMapping mapping;
    if (typeInfo.containsKey(valueType.getQualifiedName())) {
      if (isCollectionType(property)) {
        mapping=generateCompositeCollectionMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
        ((XMLCompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else {
      if (property.isAny()) {
        if (isCollectionType(property)) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((XMLAnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((XMLAnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (isCollectionType(property)) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLBinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          ((XMLCompositeDirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((XMLBinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        ((XMLDirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
    return mapping;
  }
  if (property.isSetXmlJoinNodes()) {
    if (isCollectionType(property)) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (this.isCollectionType(property)) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (isCollectionType(property)) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateMapMapping(property,descriptor,namespaceInfo);
  }
  if (isCollectionType(property)) {
    return generateCollectionMapping(property,descriptor,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null && reference.isEnumerationType()) {
      return generateEnumCollectionMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    if (reference != null || componentType.isArray()) {
      return generateCompositeCollectionMapping(property,descriptor,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME) && !property.isAttribute()) {
    XMLCompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}"
65853,"/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDOTypeHelperBuiltinCommonjMapTestCases.class));
  suite.addTest(new SDOTypeHelperDefineTestSuite().suite());
  suite.addTest(new TestSuite(OpenContentPropertiesByNameTestCases.class));
  suite.addTestSuite(SDOTypeHelperExceptionTestCases.class);
  suite.addTest(new TestSuite(SDOTypeHelperDelegateInitializeTestCases.class));
  return suite;
}","/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(SDOTypeHelperBuiltinCommonjMapTestCases.class));
  suite.addTest(new SDOTypeHelperDefineTestSuite().suite());
  suite.addTest(new TestSuite(OpenContentPropertiesByNameTestCases.class));
  suite.addTestSuite(SDOTypeHelperExceptionTestCases.class);
  suite.addTest(new TestSuite(SDOTypeHelperDelegateInitializeTestCases.class));
  suite.addTest(new TestSuite(SDOTypeHelperAppInfoTestCases.class));
  return suite;
}"
65854,"private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (((SDOType)typeValue).isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!((SDOType)typeValue).isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof SDOProperty) {
      newProperty.setOpposite((SDOProperty)opposite);
      ((SDOProperty)opposite).setOpposite(newProperty);
    }
 else     if (opposite instanceof DataObject) {
      SDOProperty prop=(SDOProperty)typeValue.getProperty(((DataObject)opposite).getString(""String_Node_Str""));
      if (prop != null) {
        newProperty.setOpposite(prop);
        prop.setOpposite(newProperty);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty) || newProperty.getType().isChangeSummaryType()) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}","private SDOProperty buildPropertyFromDataObject(DataObject dataObject,Type containingType,List types){
  String nameValue=dataObject.getString(""String_Node_Str"");
  Object typeObjectValue=dataObject.get(""String_Node_Str"");
  SDOProperty newProperty=new SDOProperty(aHelperContext);
  newProperty.setName(nameValue);
  Type typeValue=(Type)getValueFromObject(typeObjectValue,types);
  newProperty.setType(typeValue);
  if (typeValue != null) {
    if (typeValue == SDOConstants.SDO_BYTES) {
      newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
    }
 else     if (((SDOType)typeValue).isDataType()) {
      if (isBaseTypeBytes(typeValue)) {
        newProperty.setXsdType(XMLConstants.BASE_64_BINARY_QNAME);
      }
    }
  }
  newProperty.setAppInfoElements((List)dataObject.get(SDOConstants.APPINFO));
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setContainment(dataObject.getBoolean(""String_Node_Str""));
  }
 else {
    if (typeValue != null) {
      newProperty.setContainment(!((SDOType)typeValue).isDataType());
    }
  }
  newProperty.setReadOnly(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setMany(dataObject.getBoolean(""String_Node_Str""));
  newProperty.setNullable(dataObject.getBoolean(""String_Node_Str""));
  List aliasNames=dataObject.getList(""String_Node_Str"");
  for (int i=0; i < aliasNames.size(); i++) {
    Object aliasName=aliasNames.get(i);
    newProperty.getAliasNames().add(aliasName);
  }
  Object opposite=dataObject.get(""String_Node_Str"");
  if (opposite != null) {
    if (opposite instanceof SDOProperty) {
      newProperty.setOpposite((SDOProperty)opposite);
      ((SDOProperty)opposite).setOpposite(newProperty);
    }
 else     if (opposite instanceof DataObject) {
      SDOProperty prop=(SDOProperty)typeValue.getProperty(((DataObject)opposite).getString(""String_Node_Str""));
      if (prop != null) {
        newProperty.setOpposite(prop);
        prop.setOpposite(newProperty);
      }
    }
  }
  if (dataObject.isSet(""String_Node_Str"")) {
    newProperty.setDefault(dataObject.get(""String_Node_Str""));
  }
  List openProps=((SDODataObject)dataObject)._getOpenContentProperties();
  for (int i=0; i < openProps.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openProps.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  List openPropsAttrs=((SDODataObject)dataObject)._getOpenContentPropertiesAttributes();
  for (int i=0; i < openPropsAttrs.size(); i++) {
    SDOProperty nextProp=(SDOProperty)openPropsAttrs.get(i);
    Object value=getValueFromObject(dataObject.get(nextProp),types);
    newProperty.setInstanceProperty(nextProp,value);
  }
  if (newProperty.getType() == null) {
    throw SDOException.noTypeSpecifiedForProperty(newProperty.getName());
  }
  if (containingType != null) {
    ((SDOType)containingType).addDeclaredProperty(newProperty);
    if (aHelperContext.getXSDHelper().isElement(newProperty) || newProperty.getType().isChangeSummaryType()) {
      newProperty.setNamespaceQualified(true);
    }
    newProperty.buildMapping(containingType.getURI());
  }
  return newProperty;
}"
65855,"private void initOpenProps(){
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_QNAME,SDOConstants.MIME_TYPE_PROPERTY);
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_PROPERTY_QNAME,SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
  Property xmlSchemaTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  getGlobalAttributes().put(SDOConstants.SCHEMA_TYPE_QNAME,xmlSchemaTypeProperty);
  getGlobalAttributes().put(SDOConstants.JAVA_CLASS_QNAME,SDOConstants.JAVA_CLASS_PROPERTY);
  getGlobalAttributes().put(SDOConstants.XML_ELEMENT_QNAME,SDOConstants.XMLELEMENT_PROPERTY);
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  getGlobalAttributes().put(SDOConstants.XML_DATATYPE_QNAME,xmlDataTypeProperty);
  getGlobalAttributes().put(SDOConstants.XML_ID_PROPERTY_QNAME,SDOConstants.ID_PROPERTY);
  getGlobalAttributes().put(SDOConstants.DOCUMENTATION_PROPERTY_QNAME,SDOConstants.DOCUMENTATION_PROPERTY);
}","private void initOpenProps(){
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_QNAME,SDOConstants.MIME_TYPE_PROPERTY);
  getGlobalAttributes().put(SDOConstants.MIME_TYPE_PROPERTY_QNAME,SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
  Property xmlSchemaTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDO_URL,SDOConstants.XML_SCHEMA_TYPE_NAME);
  getGlobalAttributes().put(SDOConstants.SCHEMA_TYPE_QNAME,xmlSchemaTypeProperty);
  getGlobalAttributes().put(SDOConstants.JAVA_CLASS_QNAME,SDOConstants.JAVA_CLASS_PROPERTY);
  getGlobalAttributes().put(SDOConstants.XML_ELEMENT_QNAME,SDOConstants.XMLELEMENT_PROPERTY);
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  getGlobalAttributes().put(SDOConstants.XML_DATATYPE_QNAME,xmlDataTypeProperty);
  getGlobalAttributes().put(SDOConstants.XML_ID_PROPERTY_QNAME,SDOConstants.ID_PROPERTY);
  getGlobalAttributes().put(SDOConstants.DOCUMENTATION_PROPERTY_QNAME,SDOConstants.DOCUMENTATION_PROPERTY);
  getGlobalAttributes().put(SDOConstants.APPINFO_PROPERTY_QNAME,SDOConstants.APPINFO_PROPERTY);
}"
65856,"/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value;
  if (properties != null && ((value=properties.get(ECLIPSELINK_OXM_XML_KEY)) != null)) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)properties.get(ECLIPSELINK_OXM_XML_KEY);
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader,properties);
              xmlBindings.add(binding);
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader,properties);
            xmlBindings.add(binding);
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader,properties);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader,properties);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}","/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value;
  if (properties != null && ((value=properties.get(ECLIPSELINK_OXM_XML_KEY)) != null)) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)properties.get(ECLIPSELINK_OXM_XML_KEY);
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader,properties);
              if (binding != null) {
                xmlBindings.add(binding);
              }
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader,properties);
            if (binding != null) {
              xmlBindings.add(binding);
            }
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader,properties);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader,properties);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}"
65857,"/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader,Map<String,Object> properties){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else     if (metadata instanceof MetadataSource) {
      xmlBindings=((MetadataSource)metadata).getXmlBindings(properties,classLoader);
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}","/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader,Map<String,Object> properties){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else     if (metadata instanceof MetadataSource) {
      xmlBindings=((MetadataSource)metadata).getXmlBindings(properties,classLoader);
    }
 else     if (metadata instanceof String) {
      URL url=null;
      try {
        url=new URL((String)metadata);
      }
 catch (      MalformedURLException ex) {
        url=classLoader.getResource((String)metadata);
      }
      if (url != null) {
        xmlBindings=(XmlBindings)unmarshaller.unmarshal(url);
      }
 else {
        throw org.eclipse.persistence.exceptions.JAXBException.unableToLoadMetadataFromLocation((String)metadata);
      }
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}"
65858,"/** 
 * The XML bindings metadata will be loaded from an InputSource.
 */
public XMLMetadataSource(InputSource xmlBindings){
  xmlBindingsSource=new SAXSource(xmlBindings);
}","/** 
 * XML bindings metatdata will be loaded either as a URL or as a classpath reference
 */
public XMLMetadataSource(String xmlBindings){
  if (xmlBindings == null) {
    throw new IllegalArgumentException();
  }
  try {
    this.xmlBindingsURL=new URL(xmlBindings);
  }
 catch (  MalformedURLException ex) {
    xmlBindingsLocation=xmlBindings;
  }
}"
65859,"@Override public XmlBindings getXmlBindings(Map<String,?> properties,ClassLoader classLoader){
  try {
    JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    if (null != xmlBindingsSource) {
      return (XmlBindings)unmarshaller.unmarshal(xmlBindingsSource);
    }
    if (null != xmlBindingsURL) {
      return (XmlBindings)unmarshaller.unmarshal(xmlBindingsURL);
    }
  }
 catch (  JAXBException e) {
    e.printStackTrace();
  }
  return null;
}","@Override public XmlBindings getXmlBindings(Map<String,?> properties,ClassLoader classLoader){
  try {
    JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    if (null != xmlBindingsSource) {
      return (XmlBindings)unmarshaller.unmarshal(xmlBindingsSource);
    }
    if (null != xmlBindingsURL) {
      return (XmlBindings)unmarshaller.unmarshal(xmlBindingsURL);
    }
    if (null != xmlBindingsLocation) {
      URL url=classLoader.getResource(xmlBindingsLocation);
      if (url == null) {
        throw org.eclipse.persistence.exceptions.JAXBException.unableToLoadMetadataFromLocation(xmlBindingsLocation);
      }
      return (XmlBindings)unmarshaller.unmarshal(url);
    }
  }
 catch (  JAXBException e) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(e);
  }
  return null;
}"
65860,"public void setUp() throws Exception {
  setupParser();
  setupControlDocs();
  InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  if (bindingsFileXSDInputStream == null) {
    bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  }
  if (bindingsFileXSDInputStream == null) {
    fail(""String_Node_Str"");
  }
  bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
}","public void setUp() throws Exception {
  setupParser();
  setupControlDocs();
  InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(ECLIPSELINK_OXM_XSD);
  if (bindingsFileXSDInputStream == null) {
    bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
  }
  if (bindingsFileXSDInputStream == null) {
    fail(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
  }
  bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
}"
65861,"protected void validateBindingsFileAgainstSchema(Source src){
  String result=null;
  SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  Schema theSchema;
  try {
    InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    if (bindingsFileXSDInputStream == null) {
      bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    }
    if (bindingsFileXSDInputStream == null) {
      fail(""String_Node_Str"");
    }
    Source bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
    theSchema=sFact.newSchema(bindingsFileXSDSource);
    Validator validator=theSchema.newValidator();
    validator.validate(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e.getMessage() == null) {
      result=""String_Node_Str"";
    }
    result=e.getMessage();
  }
  assertTrue(""String_Node_Str"" + result,result == null);
}","protected void validateBindingsFileAgainstSchema(Source src){
  String result=null;
  SchemaFactory sFact=SchemaFactory.newInstance(XMLConstants.SCHEMA_URL);
  Schema theSchema;
  try {
    InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(ECLIPSELINK_OXM_XSD);
    if (bindingsFileXSDInputStream == null) {
      bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
    }
    if (bindingsFileXSDInputStream == null) {
      fail(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
    }
    Source bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
    theSchema=sFact.newSchema(bindingsFileXSDSource);
    Validator validator=theSchema.newValidator();
    validator.validate(src);
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e.getMessage() == null) {
      result=""String_Node_Str"";
    }
    result=e.getMessage();
  }
  assertTrue(""String_Node_Str"" + result,result == null);
}"
65862,"public void setUp() throws Exception {
  setupParser();
  setupControlDocs();
  InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  if (bindingsFileXSDInputStream == null) {
    bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  }
  if (bindingsFileXSDInputStream == null) {
    fail(""String_Node_Str"");
  }
  bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
}","public void setUp() throws Exception {
  setupParser();
  setupControlDocs();
  InputStream bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(ECLIPSELINK_OXM_XSD);
  if (bindingsFileXSDInputStream == null) {
    bindingsFileXSDInputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
  }
  if (bindingsFileXSDInputStream == null) {
    fail(""String_Node_Str"" + ECLIPSELINK_OXM_XSD);
  }
  bindingsFileXSDSource=new StreamSource(bindingsFileXSDInputStream);
}"
65863,"private void parse(XMLStreamReader xmlStreamReader) throws SAXException {
  try {
    contentHandler.startDocument();
    parseEvent(xmlStreamReader);
    while (depth > 0) {
      xmlStreamReader.next();
      parseEvent(xmlStreamReader);
    }
    contentHandler.endDocument();
  }
 catch (  XMLStreamException e) {
    throw new RuntimeException(e);
  }
}","private void parse(XMLStreamReader xmlStreamReader) throws SAXException {
  try {
    contentHandler.startDocument();
    parseEvent(xmlStreamReader);
    while (depth > 0) {
      xmlStreamReader.next();
      parseEvent(xmlStreamReader);
    }
    contentHandler.endDocument();
  }
 catch (  SAXException e) {
    throw e;
  }
catch (  Exception e) {
    throw new SAXException(e);
  }
}"
65864,"/** 
 * Strategy: 1. Update an Employee to trigger validation on it 2. Assert no lazy relationships are loaded as side effect
 */
public void testTraversableResolverPreventsLoadingOfLazyRelationships(){
  EntityManager em=createBVEntityManager();
  EntityManagerFactory emf=em.getEntityManagerFactory();
  emf.getCache().evictAll();
  EntityTransaction tx=em.getTransaction();
  tx.begin();
  Employee employee=em.find(Employee.class,BeanValidationPopulator.EMPLOYEE_PK);
  employee.setName(BeanValidationPopulator.getFilledStringOfLength(Employee.NAME_MAX_SIZSE - 2));
  tx.commit();
  org.eclipse.persistence.sessions.Project project=JpaHelper.getServerSession(emf).getProject();
  assertTrue(""String_Node_Str"",!isInstantiated(employee,""String_Node_Str"",project));
  assertTrue(""String_Node_Str"",!isInstantiated(employee,""String_Node_Str"",project));
}","/** 
 * Strategy: 1. Update an Employee to trigger validation on it 2. Assert no lazy relationships are loaded as side effect
 */
public void testTraversableResolverPreventsLoadingOfLazyRelationships(){
  EntityManagerFactory emf=createBVEntityManagerFactory();
  EntityManager em=emf.createEntityManager();
  emf.getCache().evictAll();
  EntityTransaction tx=em.getTransaction();
  tx.begin();
  Employee employee=em.find(Employee.class,BeanValidationPopulator.EMPLOYEE_PK);
  employee.setName(BeanValidationPopulator.getFilledStringOfLength(Employee.NAME_MAX_SIZSE - 2));
  tx.commit();
  org.eclipse.persistence.sessions.Project project=JpaHelper.getServerSession(emf).getProject();
  assertTrue(""String_Node_Str"",!isInstantiated(employee,""String_Node_Str"",project));
  assertTrue(""String_Node_Str"",!isInstantiated(employee,""String_Node_Str"",project));
}"
65865,"public SOAPMessage generateResponse(Operation op,boolean useSOAP12,Object result) throws SOAPException {
  MessageFactory messageFactory=null;
  if (useSOAP12) {
    messageFactory=MessageFactory.newInstance(SOAP_1_2_PROTOCOL);
  }
 else {
    messageFactory=MessageFactory.newInstance();
  }
  SOAPMessage message=messageFactory.createMessage();
  SOAPBody body=message.getSOAPPart().getEnvelope().getBody();
  XMLDescriptor descriptor=resultDescriptors.get(op.getName());
  SOAPResponse response=null;
  try {
    response=(SOAPResponse)descriptor.getJavaClass().newInstance();
  }
 catch (  InstantiationException ie) {
    throw new SOAPException(ie);
  }
catch (  IllegalAccessException iae) {
    throw new SOAPException(iae);
  }
  response.setResult(result);
  SOAPAttachmentHandler attachmentHandler=new SOAPAttachmentHandler();
  XMLMarshaller marshaller=dbwsAdapter.getXMLContext().createMarshaller();
  marshaller.setAttachmentMarshaller(attachmentHandler);
  marshaller.marshal(response,body);
  if (attachmentHandler.hasAttachments()) {
    for (    String id : attachmentHandler.getAttachments().keySet()) {
      DataHandler attachment=attachmentHandler.getAttachments().get(id);
      AttachmentPart part=message.createAttachmentPart(attachment);
      part.setContentType(attachment.getContentType());
      String contentId=""String_Node_Str"" + id.substring(4) + ""String_Node_Str"";
      part.setContentId(contentId);
      part.setMimeHeader(""String_Node_Str"",""String_Node_Str"");
      message.addAttachmentPart(part);
    }
  }
  message.saveChanges();
  return message;
}","public SOAPMessage generateResponse(Operation op,boolean useSOAP12,Object result) throws SOAPException {
  MessageFactory messageFactory=null;
  if (useSOAP12) {
    messageFactory=MessageFactory.newInstance(SOAP_1_2_PROTOCOL);
  }
 else {
    messageFactory=MessageFactory.newInstance();
  }
  SOAPMessage message=messageFactory.createMessage();
  message.getSOAPPart().getEnvelope().addNamespaceDeclaration(SCHEMA_PREFIX,W3C_XML_SCHEMA_NS_URI);
  message.getSOAPPart().getEnvelope().addNamespaceDeclaration(SCHEMA_INSTANCE_PREFIX,W3C_XML_SCHEMA_INSTANCE_NS_URI);
  SOAPBody body=message.getSOAPPart().getEnvelope().getBody();
  XMLDescriptor descriptor=resultDescriptors.get(op.getName());
  SOAPResponse response=null;
  try {
    response=(SOAPResponse)descriptor.getJavaClass().newInstance();
  }
 catch (  InstantiationException ie) {
    throw new SOAPException(ie);
  }
catch (  IllegalAccessException iae) {
    throw new SOAPException(iae);
  }
  response.setResult(result);
  SOAPAttachmentHandler attachmentHandler=new SOAPAttachmentHandler();
  XMLMarshaller marshaller=dbwsAdapter.getXMLContext().createMarshaller();
  marshaller.setAttachmentMarshaller(attachmentHandler);
  marshaller.marshal(response,body);
  if (attachmentHandler.hasAttachments()) {
    for (    String id : attachmentHandler.getAttachments().keySet()) {
      DataHandler attachment=attachmentHandler.getAttachments().get(id);
      AttachmentPart part=message.createAttachmentPart(attachment);
      part.setContentType(attachment.getContentType());
      String contentId=""String_Node_Str"" + id.substring(4) + ""String_Node_Str"";
      part.setContentId(contentId);
      part.setMimeHeader(""String_Node_Str"",""String_Node_Str"");
      message.addAttachmentPart(part);
    }
  }
  message.saveChanges();
  return message;
}"
65866,"protected Map getProperties() throws Exception {
  Map overrides=new HashMap();
  String overridesString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DOMSource src=null;
  try {
    Document doc=parser.parse(new ByteArrayInputStream(overridesString.getBytes()));
    src=new DOMSource(doc.getDocumentElement());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  overrides.put(""String_Node_Str"",src);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}","protected Map getProperties() throws Exception {
  Map overrides=new HashMap();
  String overridesString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DOMSource src=null;
  try {
    Document doc=parser.parse(new ByteArrayInputStream(overridesString.getBytes()));
    src=new DOMSource(doc.getDocumentElement());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  overrides.put(""String_Node_Str"",src);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}"
65867,"protected Object getControlObject(){
  Address example=new Address();
  example.setName(""String_Node_Str"");
  example.country=""String_Node_Str"";
  example.city=""String_Node_Str"";
  example.street=""String_Node_Str"";
  return example;
}","protected Object getControlObject(){
  Address example=new Address();
  example.setName(""String_Node_Str"");
  example.country=""String_Node_Str"";
  example.city=""String_Node_Str"";
  example.street=""String_Node_Str"";
  example.setSomeTransientProperty(""String_Node_Str"");
  return example;
}"
65868,"public ArrayList getPublicMemberPropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList<Property> fieldProperties=getFieldPropertiesForClass(cls,info,false);
  ArrayList<Property> methodProperties=getPropertyPropertiesForClass(cls,info,false);
  ArrayList<Property> publicFieldProperties=new ArrayList<Property>();
  ArrayList<Property> publicMethodProperties=new ArrayList<Property>();
  for (  Property next : fieldProperties) {
    if (Modifier.isPublic(((JavaField)next.getElement()).getModifiers())) {
      publicFieldProperties.add(next);
    }
 else {
      if (hasJAXBAnnotations(next.getElement())) {
        publicFieldProperties.add(next);
      }
    }
  }
  for (  Property next : methodProperties) {
    if (next.getElement() != null) {
      if (Modifier.isPublic(((JavaMethod)next.getElement()).getModifiers())) {
        publicMethodProperties.add(next);
      }
 else {
        if (hasJAXBAnnotations(next.getElement())) {
          publicMethodProperties.add(next);
        }
      }
    }
  }
  if (publicFieldProperties.size() >= 0 && publicMethodProperties.size() == 0) {
    return publicFieldProperties;
  }
 else   if (publicMethodProperties.size() > 0 && publicFieldProperties.size() == 0) {
    return publicMethodProperties;
  }
 else {
    HashMap fieldPropertyMap=getPropertyMapFromArrayList(publicFieldProperties);
    for (int i=0; i < publicMethodProperties.size(); i++) {
      Property next=(Property)publicMethodProperties.get(i);
      if (fieldPropertyMap.get(next.getPropertyName()) == null) {
        publicFieldProperties.add(next);
      }
    }
    return publicFieldProperties;
  }
}","public ArrayList getPublicMemberPropertiesForClass(JavaClass cls,TypeInfo info){
  ArrayList<Property> fieldProperties=getFieldPropertiesForClass(cls,info,false);
  ArrayList<Property> methodProperties=getPropertyPropertiesForClass(cls,info,false);
  ArrayList<Property> publicFieldProperties=new ArrayList<Property>();
  ArrayList<Property> publicMethodProperties=new ArrayList<Property>();
  for (  Property next : fieldProperties) {
    if (Modifier.isPublic(((JavaField)next.getElement()).getModifiers())) {
      publicFieldProperties.add(next);
    }
 else {
      if (hasJAXBAnnotations(next.getElement())) {
        publicFieldProperties.add(next);
      }
    }
  }
  for (  Property next : methodProperties) {
    if (next.getElement() != null) {
      if (Modifier.isPublic(((JavaMethod)next.getElement()).getModifiers())) {
        publicMethodProperties.add(next);
      }
 else {
        if (hasJAXBAnnotations(next.getElement())) {
          publicMethodProperties.add(next);
        }
      }
    }
  }
  if (publicFieldProperties.size() >= 0 && publicMethodProperties.size() == 0) {
    return publicFieldProperties;
  }
 else   if (publicMethodProperties.size() > 0 && publicFieldProperties.size() == 0) {
    return publicMethodProperties;
  }
 else {
    HashMap<String,Property> fieldPropertyMap=getPropertyMapFromArrayList(publicFieldProperties);
    for (int i=0; i < publicMethodProperties.size(); i++) {
      Property next=(Property)publicMethodProperties.get(i);
      Property fieldProp=fieldPropertyMap.get(next.getPropertyName());
      if (fieldProp == null) {
        publicFieldProperties.add(next);
      }
 else       if (fieldProp.isTransient()) {
        publicFieldProperties.remove(fieldProp);
        publicFieldProperties.add(next);
      }
    }
    return publicFieldProperties;
  }
}"
65869,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
        if (!Modifier.isStatic(modifiers)) {
          if ((onlyExplicit && hasJAXBAnnotations(nextField)) || !onlyExplicit) {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            properties.add(property);
          }
        }
 else         if (helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
          try {
            Property property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            Object value=((JavaFieldImpl)nextField).get(null);
            if (value != null) {
              String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
              property.setFixedValue(stringValue);
            }
 else {
              property.setWriteOnly(true);
            }
            properties.add(property);
          }
 catch (          ClassCastException e) {
          }
catch (          IllegalAccessException e) {
          }
        }
      }
    }
 else {
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    Property property=null;
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic)) {
      if (!Modifier.isStatic(modifiers)) {
        if ((onlyExplicit && hasJAXBAnnotations(nextField)) || !onlyExplicit) {
          property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
      }
 else       if (helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
        try {
          property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          Object value=((JavaFieldImpl)nextField).get(null);
          if (value != null) {
            String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
            property.setFixedValue(stringValue);
          }
 else {
            property.setWriteOnly(true);
          }
          properties.add(property);
        }
 catch (        ClassCastException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
    if (helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (property != null) {
        property.setTransient(true);
      }
      List<String> propOrderList=Arrays.asList(info.getPropOrder());
      if (propOrderList.contains(nextField.getName())) {
        throw JAXBException.transientInProporder(nextField.getName());
      }
    }
  }
  return properties;
}"
65870,"public HashMap getPropertyMapFromArrayList(ArrayList<Property> props){
  HashMap propMap=new HashMap(props.size());
  Iterator propIter=props.iterator();
  while (propIter.hasNext()) {
    Property next=(Property)propIter.next();
    propMap.put(next.getPropertyName(),next);
  }
  return propMap;
}","public HashMap<String,Property> getPropertyMapFromArrayList(ArrayList<Property> props){
  HashMap propMap=new HashMap(props.size());
  Iterator propIter=props.iterator();
  while (propIter.hasNext()) {
    Property next=(Property)propIter.next();
    propMap.put(next.getPropertyName(),next);
  }
  return propMap;
}"
65871,"/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (info.isAnonymousComplexType()) {
    generateInheritedMappingsForAnonymousType(info,descriptor,namespaceInfo);
  }
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      if (next.isVirtual()) {
        VirtualAttributeAccessor accessor=new VirtualAttributeAccessor();
        accessor.setAttributeName(mapping.getAttributeName());
        String getMethod=info.getXmlVirtualAccessMethods().getGetMethod();
        String setMethod=info.getXmlVirtualAccessMethods().getSetMethod();
        if (mapping.getAttributeAccessor().isMethodAttributeAccessor()) {
          getMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getGetMethodName();
          setMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getSetMethodName();
          accessor.setValueType(mapping.getAttributeClassification());
        }
        accessor.setGetMethodName(getMethod);
        accessor.setSetMethodName(setMethod);
        if (mapping.getAttributeAccessor() instanceof JAXBArrayAttributeAccessor) {
          JAXBArrayAttributeAccessor jaa=(JAXBArrayAttributeAccessor)mapping.getAttributeAccessor();
          jaa.setNestedAccessor(accessor);
        }
 else {
          mapping.setAttributeAccessor(accessor);
        }
      }
      descriptor.addMapping(mapping);
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
  }
}","/** 
 * Generate mappings for a given TypeInfo.
 * @param info
 * @param descriptor
 * @param namespaceInfo
 */
public void generateMappings(TypeInfo info,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  if (info.isAnonymousComplexType()) {
    generateInheritedMappingsForAnonymousType(info,descriptor,namespaceInfo);
  }
  List<Property> propertiesInOrder=info.getNonTransientPropertiesInPropOrder();
  for (int i=0; i < propertiesInOrder.size(); i++) {
    Property next=propertiesInOrder.get(i);
    if (next != null && !next.isTransient()) {
      DatabaseMapping mapping=generateMapping(next,descriptor,namespaceInfo);
      if (next.isVirtual()) {
        VirtualAttributeAccessor accessor=new VirtualAttributeAccessor();
        accessor.setAttributeName(mapping.getAttributeName());
        String getMethod=info.getXmlVirtualAccessMethods().getGetMethod();
        String setMethod=info.getXmlVirtualAccessMethods().getSetMethod();
        if (mapping.getAttributeAccessor().isMethodAttributeAccessor()) {
          getMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getGetMethodName();
          setMethod=((MethodAttributeAccessor)mapping.getAttributeAccessor()).getSetMethodName();
          accessor.setValueType(mapping.getAttributeClassification());
        }
        accessor.setGetMethodName(getMethod);
        accessor.setSetMethodName(setMethod);
        if (mapping.getAttributeAccessor() instanceof JAXBArrayAttributeAccessor) {
          JAXBArrayAttributeAccessor jaa=(JAXBArrayAttributeAccessor)mapping.getAttributeAccessor();
          jaa.setNestedAccessor(accessor);
        }
 else {
          mapping.setAttributeAccessor(accessor);
        }
      }
      descriptor.addMapping(mapping);
      if (next.isSetUserProperties()) {
        mapping.setProperties(next.getUserProperties());
      }
    }
  }
}"
65872,"public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      String typeValue=getTypeValueToWrite(record,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if ((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}","public boolean addXsiTypeAndClassIndicatorIfRequired(XMLRecord record,XMLDescriptor xmlDescriptor,XMLDescriptor referenceDescriptor,XMLField xmlField,boolean addToNamespaceResolver){
  boolean xsiTypeIndicatorField=false;
  if (xmlDescriptor.hasInheritance()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null) {
      if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(XMLConstants.SCHEMA_INSTANCE_URL) && indicatorField.getLastXPathFragment().getLocalName().equals(XMLConstants.SCHEMA_TYPE_ATTRIBUTE)) {
        xsiTypeIndicatorField=true;
      }
      if (!xsiTypeIndicatorField) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
      }
    }
  }
  QName leafType=null;
  if (xmlField != null) {
    leafType=xmlField.getLeafElementType();
    XMLSchemaReference xmlRef=xmlDescriptor.getSchemaReference();
    if (xmlRef != null) {
      if (leafType == null && xmlRef.getType() == XMLSchemaReference.ELEMENT) {
        return false;
      }
      String typeValue=getTypeValueToWrite(record,xmlRef,addToNamespaceResolver);
      if (leafType == null && referenceDescriptor == null) {
        writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
        return true;
      }
      if (((xmlRef.getType() == XMLSchemaReference.COMPLEX_TYPE) || (xmlRef.getType() == XMLSchemaReference.SIMPLE_TYPE)) && xmlRef.getSchemaContext() != null && xmlRef.isGlobalDefinition()) {
        QName ctxQName=xmlRef.getSchemaContextAsQName(xmlDescriptor.getNamespaceResolver());
        if (leafType != null) {
          if (!ctxQName.equals(leafType)) {
            writeXsiTypeAttribute(xmlDescriptor,record,typeValue,addToNamespaceResolver);
            return true;
          }
        }
      }
    }
  }
  if (referenceDescriptor != null && referenceDescriptor == xmlDescriptor) {
    return false;
  }
  if (xmlDescriptor.hasInheritance() && !xmlDescriptor.getInheritancePolicy().isRootParentDescriptor()) {
    XMLField indicatorField=(XMLField)xmlDescriptor.getInheritancePolicy().getClassIndicatorField();
    if (indicatorField != null && xsiTypeIndicatorField) {
      String classIndicatorValue=(String)xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(xmlDescriptor.getJavaClass());
      int nsindex=classIndicatorValue.indexOf(XMLConstants.COLON);
      String localName=null;
      String prefix=null;
      if (nsindex != -1) {
        localName=classIndicatorValue.substring(nsindex + 1);
        prefix=classIndicatorValue.substring(0,nsindex);
      }
 else {
        localName=classIndicatorValue;
      }
      String namespaceURI=xmlDescriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(prefix);
      QName classIndicatorQName=new QName(namespaceURI,localName);
      if (leafType == null || !classIndicatorQName.equals(leafType)) {
        xmlDescriptor.getInheritancePolicy().addClassIndicatorFieldToRow(record);
        return true;
      }
      return false;
    }
  }
  return false;
}"
65873,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
    XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
    pkField.setNamespaceResolver(this.namespaceResolver);
    pkField.initialize();
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
  }
  for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
    XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
    pkField.setNamespaceResolver(this.namespaceResolver);
    pkField.initialize();
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    getInheritancePolicy().getParentDescriptor().initialize(session);
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  getEventManager().initialize(session);
  getCopyPolicy().initialize(session);
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
}"
65874,"/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,null,root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}","/** 
 * Convert the given object to XML and update the given marshal record with that XML Document.
 * @param object the object to marshal
 * @param marshalRecord the marshalRecord to marshal the object to
 * @param descriptor the XMLDescriptor for the object being marshalled
 */
private void marshal(Object object,MarshalRecord marshalRecord,AbstractSession session,XMLDescriptor descriptor,boolean isXMLRoot){
  if (null != schema) {
    marshalRecord=new ValidatingMarshalRecord(marshalRecord,this);
  }
  if (getAttachmentMarshaller() != null) {
    marshalRecord.setXOPPackage(getAttachmentMarshaller().isXOPPackage());
  }
  addDescriptorNamespacesToXMLRecord(descriptor,marshalRecord);
  NamespaceResolver nr=marshalRecord.getNamespaceResolver();
  XMLRoot root=null;
  if (isXMLRoot) {
    root=(XMLRoot)object;
  }
  marshalRecord.beforeContainmentMarshal(object);
  if (!isFragment()) {
    String encoding=getEncoding();
    String version=DEFAULT_XML_VERSION;
    if (!isXMLRoot) {
      marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
    }
 else {
      if (root.getEncoding() != null) {
        encoding=root.getEncoding();
      }
      if (root.getXMLVersion() != null) {
        version=root.getXMLVersion();
      }
    }
    marshalRecord.startDocument(encoding,version);
  }
  if (isXMLRoot) {
    if (root.getObject() instanceof Node) {
      marshalRecord.node((Node)root.getObject(),new NamespaceResolver());
      marshalRecord.endDocument();
      return;
    }
  }
  XPathFragment rootFragment=buildRootFragment(object,descriptor,isXMLRoot,marshalRecord);
  String schemaLocation=getSchemaLocation();
  String noNsSchemaLocation=getNoNamespaceSchemaLocation();
  boolean isNil=false;
  if (isXMLRoot) {
    object=root.getObject();
    if (root.getSchemaLocation() != null) {
      schemaLocation=root.getSchemaLocation();
    }
    if (root.getNoNamespaceSchemaLocation() != null) {
      noNsSchemaLocation=root.getNoNamespaceSchemaLocation();
    }
    marshalRecord.setLeafElementType(root.getSchemaType());
    isNil=root.isNil();
  }
  String xsiPrefix=null;
  if ((null != getSchemaLocation()) || (null != getNoNamespaceSchemaLocation()) || (isNil)) {
    xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
    if (null == xsiPrefix) {
      xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
      nr.put(XMLConstants.SCHEMA_INSTANCE_PREFIX,XMLConstants.SCHEMA_INSTANCE_URL);
    }
  }
  TreeObjectBuilder treeObjectBuilder=null;
  if (descriptor != null) {
    treeObjectBuilder=(TreeObjectBuilder)descriptor.getObjectBuilder();
  }
  if (session == null) {
    session=(AbstractSession)xmlContext.getSession(0);
  }
  marshalRecord.setSession(session);
  if (null != rootFragment) {
    marshalRecord.startPrefixMappings(nr);
    if (!isXMLRoot && descriptor.getNamespaceResolver() == null && rootFragment.hasNamespace()) {
      throw XMLMarshalException.namespaceResolverNotSpecified(rootFragment.getShortName());
    }
    marshalRecord.openStartElement(rootFragment,nr);
    if (null != schemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_LOCATION,schemaLocation);
    }
    if (null != noNsSchemaLocation) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION,xsiPrefix + XMLConstants.COLON + XMLConstants.NO_NS_SCHEMA_LOCATION,noNsSchemaLocation);
    }
    if (isNil) {
      marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE,xsiPrefix + XMLConstants.COLON + XMLConstants.SCHEMA_NIL_ATTRIBUTE,""String_Node_Str"");
    }
    marshalRecord.namespaceDeclarations(nr);
    if (descriptor != null && !isNil) {
      treeObjectBuilder.addXsiTypeAndClassIndicatorIfRequired(marshalRecord,descriptor,null,descriptor.getDefaultRootElementField(),root,object,isXMLRoot,true);
      treeObjectBuilder.marshalAttributes(marshalRecord,object,session);
    }
    marshalRecord.closeStartElement();
  }
  if (treeObjectBuilder != null && !isNil) {
    treeObjectBuilder.buildRow(marshalRecord,object,session,this,rootFragment,WriteType.UNDEFINED);
  }
 else   if (isXMLRoot) {
    if (object != null && !isNil) {
      if (root.getDeclaredType() != null && root.getObject() != null && root.getDeclaredType() != root.getObject().getClass()) {
        QName type=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        if (type != null) {
          xsiPrefix=nr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
          if (null == xsiPrefix) {
            xsiPrefix=XMLConstants.SCHEMA_INSTANCE_PREFIX;
            marshalRecord.attribute(XMLConstants.XMLNS_URL,xsiPrefix,XMLConstants.XMLNS + ':' + xsiPrefix,XMLConstants.SCHEMA_INSTANCE_URL);
          }
          marshalRecord.attribute(XMLConstants.XMLNS_URL,XMLConstants.SCHEMA_PREFIX,XMLConstants.XMLNS + ':' + XMLConstants.SCHEMA_PREFIX,XMLConstants.SCHEMA_URL);
          marshalRecord.attribute(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_TYPE_ATTRIBUTE,xsiPrefix + ""String_Node_Str"" + XMLConstants.SCHEMA_TYPE_ATTRIBUTE,""String_Node_Str"" + type.getLocalPart());
        }
      }
      String value=(String)XMLConversionManager.getDefaultXMLManager().convertObject(object,String.class,root.getSchemaType());
      marshalRecord.characters(value);
    }
  }
  if (null != rootFragment) {
    marshalRecord.endElement(rootFragment,nr);
    marshalRecord.endPrefixMappings(nr);
  }
  if (!isFragment()) {
    marshalRecord.endDocument();
  }
  marshalRecord.afterContainmentMarshal(null,object);
}"
65875,"public QName getSchemaContextAsQName(NamespaceResolver nsResolver){
  if (schemaContext == null) {
    return null;
  }
  if (schemaContextAsQName == null) {
    int idx=schemaContext.lastIndexOf(""String_Node_Str"");
    if (idx == -1) {
      idx=0;
    }
    String type=schemaContext.substring(idx + 1);
    idx=type.indexOf(XMLConstants.COLON);
    if (idx != -1) {
      String prefix=type.substring(0,idx);
      String localPart=type.substring(idx + 1);
      String uri=nsResolver.resolveNamespacePrefix(prefix);
      schemaContextAsQName=new QName(uri,localPart);
    }
 else {
      if (nsResolver != null && nsResolver.getDefaultNamespaceURI() != null) {
        schemaContextAsQName=new QName(nsResolver.getDefaultNamespaceURI(),type);
      }
 else {
        schemaContextAsQName=new QName(type);
      }
    }
  }
  return schemaContextAsQName;
}","public QName getSchemaContextAsQName(NamespaceResolver nsResolver){
  if (schemaContext == null) {
    return null;
  }
  if (schemaContextAsQName == null) {
    int idx=schemaContext.lastIndexOf(""String_Node_Str"");
    String type=schemaContext.substring(idx + 1);
    idx=type.indexOf(XMLConstants.COLON);
    if (idx != -1) {
      String prefix=type.substring(0,idx);
      String localPart=type.substring(idx + 1);
      String uri=nsResolver.resolveNamespacePrefix(prefix);
      schemaContextAsQName=new QName(uri,localPart);
    }
 else {
      if (nsResolver != null && nsResolver.getDefaultNamespaceURI() != null) {
        schemaContextAsQName=new QName(nsResolver.getDefaultNamespaceURI(),type);
      }
 else {
        schemaContextAsQName=new QName(type);
      }
    }
  }
  return schemaContextAsQName;
}"
65876,"protected Map getProperties2() throws Exception {
  Map overrides=new HashMap();
  String bindings1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String bindings2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DOMSource src1=null;
  DOMSource src2=null;
  try {
    Document doc=parser.parse(new ByteArrayInputStream(bindings1.getBytes()));
    src1=new DOMSource(doc.getDocumentElement());
    Document doc2=parser.parse(new ByteArrayInputStream(bindings2.getBytes()));
    src2=new DOMSource(doc2.getDocumentElement());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  ArrayList<Object> bindingsList=new ArrayList();
  bindingsList.add(src1);
  bindingsList.add(src2);
  overrides.put(""String_Node_Str"",bindingsList);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}","protected Map getProperties2() throws Exception {
  Map overrides=new HashMap();
  String bindings1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String bindings2=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DOMSource src1=null;
  try {
    Document doc=parser.parse(new ByteArrayInputStream(bindings1.getBytes()));
    src1=new DOMSource(doc.getDocumentElement());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
  ArrayList<Object> bindingsList=new ArrayList();
  bindingsList.add(src1);
  bindingsList.add(new XMLMetadataSource(new StringReader(bindings2)));
  overrides.put(""String_Node_Str"",bindingsList);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}"
65877,"protected Map getProperties() throws Exception {
  Map overrides=new HashMap();
  InputStream iStream=classLoader.getResourceAsStream(""String_Node_Str"");
  InputStream iStream2=classLoader.getResourceAsStream(""String_Node_Str"");
  ArrayList<Object> bindingsList=new ArrayList();
  bindingsList.add(new StreamSource(iStream));
  bindingsList.add(new StreamSource(iStream2));
  overrides.put(""String_Node_Str"",bindingsList);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}","protected Map getProperties() throws Exception {
  Map overrides=new HashMap();
  InputStream iStream=classLoader.getResourceAsStream(""String_Node_Str"");
  InputStream iStream2=classLoader.getResourceAsStream(""String_Node_Str"");
  ArrayList<Object> bindingsList=new ArrayList();
  bindingsList.add(new StreamSource(iStream));
  bindingsList.add(new XMLMetadataSource(iStream2));
  overrides.put(""String_Node_Str"",bindingsList);
  Map props=new HashMap();
  props.put(JAXBContextFactory.ECLIPSELINK_OXM_XML_KEY,overrides);
  return props;
}"
65878,"/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value;
  if (properties != null && ((value=properties.get(ECLIPSELINK_OXM_XML_KEY)) != null)) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)properties.get(ECLIPSELINK_OXM_XML_KEY);
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader);
              xmlBindings.add(binding);
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader);
            xmlBindings.add(binding);
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}","/** 
 * Convenience method for processing a properties map and creating a map of  package names to XmlBindings instances. It is assumed that the given map's key will be ECLIPSELINK_OXM_XML_KEY, and the value will be: 1)  Map<String, Object> - Object is one of those listed in 3) below 2)  List<Object> - Object is one of those listed in 3) below - Bindings file must contain package-name attribute on  xml-bindings element 3)  One of: - java.io.File - java.io.InputStream - java.io.Reader - java.net.URL - javax.xml.stream.XMLEventReader - javax.xml.stream.XMLStreamReader - javax.xml.transform.Source - org.w3c.dom.Node - org.xml.sax.InputSource - Bindings file must contain package-name attribute on  xml-bindings element
 */
public static Map<String,XmlBindings> getXmlBindingsFromProperties(Map properties,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindings=new HashMap<String,List<XmlBindings>>();
  Object value;
  if (properties != null && ((value=properties.get(ECLIPSELINK_OXM_XML_KEY)) != null)) {
    if (value instanceof Map) {
      Map<String,Object> metadataFiles=null;
      try {
        metadataFiles=(Map<String,Object>)properties.get(ECLIPSELINK_OXM_XML_KEY);
      }
 catch (      ClassCastException x) {
        throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
      }
      if (metadataFiles != null) {
        for (        Entry<String,Object> entry : metadataFiles.entrySet()) {
          String key=null;
          List<XmlBindings> xmlBindings=new ArrayList<XmlBindings>();
          try {
            key=entry.getKey();
            if (key == null) {
              throw org.eclipse.persistence.exceptions.JAXBException.nullMapKey();
            }
          }
 catch (          ClassCastException cce) {
            throw org.eclipse.persistence.exceptions.JAXBException.incorrectKeyParameterType();
          }
          Object metadataSource=entry.getValue();
          if (metadataSource == null) {
            throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource(key);
          }
          if (metadataSource instanceof List) {
            for (            Object next : (List)metadataSource) {
              XmlBindings binding=getXmlBindings(next,classLoader,properties);
              xmlBindings.add(binding);
            }
          }
 else {
            XmlBindings binding=getXmlBindings(metadataSource,classLoader,properties);
            xmlBindings.add(binding);
          }
          if (xmlBindings != null) {
            bindings.put(key,xmlBindings);
          }
        }
      }
    }
 else     if (value instanceof List) {
      for (      Object metadataSource : (List)value) {
        if (metadataSource == null) {
          throw org.eclipse.persistence.exceptions.JAXBException.nullMetadataSource();
        }
        bindings=processBindingFile(bindings,metadataSource,classLoader,properties);
      }
    }
 else {
      bindings=processBindingFile(bindings,value,classLoader,properties);
    }
  }
  Map<String,XmlBindings> mergedBindings=new HashMap<String,XmlBindings>(bindings.size());
  for (  Entry<String,List<XmlBindings>> next : bindings.entrySet()) {
    mergedBindings.put(next.getKey(),XMLProcessor.mergeXmlBindings(next.getValue()));
  }
  return mergedBindings;
}"
65879,"/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}","/** 
 * Convenience method for creating an XmlBindings object based on a given Object. The method will load the eclipselink metadata model and unmarshal the Object. This assumes that the Object represents the eclipselink-oxm.xml metadata file to be unmarshalled.
 * @param metadata assumed to be one of:  File, InputSource, InputStream, Reader, Source
 */
private static XmlBindings getXmlBindings(Object metadata,ClassLoader classLoader,Map<String,Object> properties){
  XmlBindings xmlBindings=null;
  Unmarshaller unmarshaller;
  JAXBContext jaxbContext=CompilerHelper.getXmlBindingsModelContext();
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
    if (metadata instanceof File) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((File)metadata);
    }
 else     if (metadata instanceof InputSource) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputSource)metadata);
    }
 else     if (metadata instanceof InputStream) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((InputStream)metadata);
    }
 else     if (metadata instanceof Node) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Node)metadata);
    }
 else     if (metadata instanceof Reader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Reader)metadata);
    }
 else     if (metadata instanceof Source) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((Source)metadata);
    }
 else     if (metadata instanceof URL) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((URL)metadata);
    }
 else     if (metadata instanceof XMLEventReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLEventReader)metadata);
    }
 else     if (metadata instanceof XMLStreamReader) {
      xmlBindings=(XmlBindings)unmarshaller.unmarshal((XMLStreamReader)metadata);
    }
 else     if (metadata instanceof MetadataSource) {
      xmlBindings=((MetadataSource)metadata).getXmlBindings(properties,classLoader);
    }
 else {
      throw org.eclipse.persistence.exceptions.JAXBException.incorrectValueParameterTypeForOxmXmlKey();
    }
  }
 catch (  JAXBException jaxbEx) {
    throw org.eclipse.persistence.exceptions.JAXBException.couldNotUnmarshalMetadata(jaxbEx);
  }
  return xmlBindings;
}"
65880,"/** 
 * Processing a bindings file and add it to a given Map of package name to binding files.
 * @param originalBindings Map of bindings to be updated
 * @param bindingHandle handle to bindings file
 * @param classLoader
 * @return
 */
private static Map<String,List<XmlBindings>> processBindingFile(Map<String,List<XmlBindings>> originalBindings,Object bindingHandle,ClassLoader classLoader){
  Map<String,List<XmlBindings>> bindingMap=originalBindings;
  XmlBindings binding=getXmlBindings(bindingHandle,classLoader);
  if (binding != null) {
    String key=binding.getPackageName();
    if (key.equals(XMLProcessor.DEFAULT)) {
      throw org.eclipse.persistence.exceptions.JAXBException.packageNotSetForBindingException();
    }
    JavaTypes jTypes=binding.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        String javaTypeName=javaType.getName();
        if (!(javaTypeName.contains(key))) {
          javaType.setName(key + PKG_SEPARATOR + javaTypeName);
        }
      }
    }
    List<XmlBindings> existingBindings=bindingMap.get(key);
    if (existingBindings != null) {
      existingBindings.add(binding);
    }
 else {
      existingBindings=new ArrayList<XmlBindings>();
      existingBindings.add(binding);
      bindingMap.put(key,existingBindings);
    }
  }
  return bindingMap;
}","/** 
 * Processing a bindings file and add it to a given Map of package name to binding files.
 * @param originalBindings Map of bindings to be updated
 * @param bindingHandle handle to bindings file
 * @param classLoader
 * @return
 */
private static Map<String,List<XmlBindings>> processBindingFile(Map<String,List<XmlBindings>> originalBindings,Object bindingHandle,ClassLoader classLoader,Map<String,Object> properties){
  Map<String,List<XmlBindings>> bindingMap=originalBindings;
  XmlBindings binding=getXmlBindings(bindingHandle,classLoader,properties);
  if (binding != null) {
    String key=binding.getPackageName();
    if (key.equals(XMLProcessor.DEFAULT)) {
      throw org.eclipse.persistence.exceptions.JAXBException.packageNotSetForBindingException();
    }
    JavaTypes jTypes=binding.getJavaTypes();
    if (jTypes != null) {
      for (      JavaType javaType : jTypes.getJavaType()) {
        String javaTypeName=javaType.getName();
        if (!(javaTypeName.contains(key))) {
          javaType.setName(key + PKG_SEPARATOR + javaTypeName);
        }
      }
    }
    List<XmlBindings> existingBindings=bindingMap.get(key);
    if (existingBindings != null) {
      existingBindings.add(binding);
    }
 else {
      existingBindings=new ArrayList<XmlBindings>();
      existingBindings.add(binding);
      bindingMap.put(key,existingBindings);
    }
  }
  return bindingMap;
}"
65881,"private static void mergeJavaAttributes(JavaAttributes attributes,JavaAttributes overrideAttributes,JavaType javaType){
  List<JAXBElement<? extends JavaAttribute>> attributeList=attributes.getJavaAttribute();
  Map<String,JAXBElement> attributeMap=new HashMap<String,JAXBElement>(attributeList.size());
  for (  JAXBElement next : attributeList) {
    attributeMap.put(((JavaAttribute)next.getValue()).getJavaAttribute(),next);
  }
  for (  JAXBElement next : overrideAttributes.getJavaAttribute()) {
    JAXBElement existingAttribute=attributeMap.get(((JavaAttribute)next.getValue()).getJavaAttribute());
    if (existingAttribute != null) {
      throw JAXBException.samePropertyInMultipleFiles(((JavaAttribute)next.getValue()).getJavaAttribute(),javaType.getName());
    }
    attributes.getJavaAttribute().add(next);
  }
}","private static void mergeJavaAttributes(JavaAttributes attributes,JavaAttributes overrideAttributes,JavaType javaType){
  List<JAXBElement<? extends JavaAttribute>> attributeList=attributes.getJavaAttribute();
  Map<String,JAXBElement> attributeMap=new HashMap<String,JAXBElement>(attributeList.size());
  for (  JAXBElement next : attributeList) {
    attributeMap.put(((JavaAttribute)next.getValue()).getJavaAttribute(),next);
  }
  for (  JAXBElement next : overrideAttributes.getJavaAttribute()) {
    JAXBElement existingAttribute=attributeMap.get(((JavaAttribute)next.getValue()).getJavaAttribute());
    if (existingAttribute != null) {
      attributes.getJavaAttribute().remove(existingAttribute);
    }
    attributes.getJavaAttribute().add(next);
  }
}"
65882,"public Map<QName,Object> getAnyAttributes(){
  return anyAttributes;
}","@XmlAnyAttribute public Map<QName,Object> getAnyAttributes(){
  return anyAttributes;
}"
65883,"private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(GET_STR + propName);
      property.setInverseReferencePropertySetMethodName(SET_STR + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  processXmlElement(property,info);
  if (!(property.isSwaAttachmentRef()) && isMtomAttachment(property)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName()) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(EMPTY_STRING))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(EMPTY_STRING))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlProperties.class)) {
    XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(property.getElement(),XmlProperties.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
    property.setUserProperties(propertiesMap);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlProperty.class)) {
    XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(property.getElement(),XmlProperty.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
    property.setUserProperties(propertiesMap);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlKey.class)) {
    info.addXmlKeyProperty(property);
  }
  processXmlJoinNodes(property);
  processXmlNullPolicy(property);
}","private void processPropertyAnnotations(TypeInfo info,JavaClass cls,JavaHasAnnotations javaHasAnnotations,Property property){
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlMixed.class)) {
    info.setMixed(true);
    property.setMixedContent(true);
  }
  if (helper.isAnnotationPresent(javaHasAnnotations,XmlContainerProperty.class)) {
    XmlContainerProperty container=(XmlContainerProperty)helper.getAnnotation(javaHasAnnotations,XmlContainerProperty.class);
    property.setInverseReferencePropertyName(container.value());
    property.setInverseReferencePropertyGetMethodName(container.getMethodName());
    property.setInverseReferencePropertySetMethodName(container.setMethodName());
  }
 else   if (helper.isAnnotationPresent(javaHasAnnotations,XmlInverseReference.class)) {
    XmlInverseReference inverseReference=(XmlInverseReference)helper.getAnnotation(javaHasAnnotations,XmlInverseReference.class);
    property.setInverseReferencePropertyName(inverseReference.mappedBy());
    TypeInfo targetInfo=this.getTypeInfo().get(property.getActualType().getName());
    if (targetInfo != null && targetInfo.getXmlAccessType() == XmlAccessType.PROPERTY) {
      String propName=property.getPropertyName();
      propName=Character.toUpperCase(propName.charAt(0)) + propName.substring(1);
      property.setInverseReferencePropertyGetMethodName(GET_STR + propName);
      property.setInverseReferencePropertySetMethodName(SET_STR + propName);
    }
    property.setInverseReference(true);
  }
  processXmlJavaTypeAdapter(property,info,cls);
  if (helper.isAnnotationPresent(property.getElement(),XmlAttachmentRef.class) && areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
    property.setIsSwaAttachmentRef(true);
    property.setSchemaType(XMLConstants.SWA_REF_QNAME);
  }
  processXmlElement(property,info);
  if (!(property.isSwaAttachmentRef()) && isMtomAttachment(property)) {
    property.setIsMtomAttachment(true);
    property.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlMimeType.class)) {
    property.setMimeType(((XmlMimeType)helper.getAnnotation(property.getElement(),XmlMimeType.class)).value());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlInlineBinaryData.class) || info.isBinaryDataToBeInlined()) {
    property.setisInlineBinaryData(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlSchemaType.class)) {
    XmlSchemaType schemaType=(XmlSchemaType)helper.getAnnotation(property.getElement(),XmlSchemaType.class);
    QName schemaTypeQname=new QName(schemaType.namespace(),schemaType.name());
    property.setSchemaType(schemaTypeQname);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAttribute.class)) {
    property.setIsAttribute(true);
    property.setIsRequired(((XmlAttribute)helper.getAnnotation(property.getElement(),XmlAttribute.class)).required());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAnyAttribute.class)) {
    if (info.isSetAnyAttributePropertyName() && !info.getAnyAttributePropertyName().equals(property.getPropertyName())) {
      throw org.eclipse.persistence.exceptions.JAXBException.multipleAnyAttributeMapping(cls.getName());
    }
    if (!property.getType().getName().equals(""String_Node_Str"")) {
      throw org.eclipse.persistence.exceptions.JAXBException.anyAttributeOnNonMap(property.getPropertyName());
    }
    property.setIsAnyAttribute(true);
    info.setAnyAttributePropertyName(property.getPropertyName());
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlElementWrapper.class)) {
    XmlElementWrapper wrapper=(XmlElementWrapper)helper.getAnnotation(property.getElement(),XmlElementWrapper.class);
    org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper xmlEltWrapper=new org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper();
    xmlEltWrapper.setName(wrapper.name());
    xmlEltWrapper.setNamespace(wrapper.namespace());
    xmlEltWrapper.setNillable(wrapper.nillable());
    xmlEltWrapper.setRequired(wrapper.required());
    property.setXmlElementWrapper(xmlEltWrapper);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlList.class)) {
    if (!isCollectionType(property) && !property.getType().isArray()) {
      throw JAXBException.invalidList(property.getPropertyName());
    }
    property.setIsXmlList(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlValue.class)) {
    property.setIsXmlValue(true);
    info.setXmlValueProperty(property);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlReadOnly.class)) {
    property.setReadOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlWriteOnly.class)) {
    property.setWriteOnly(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlCDATA.class)) {
    property.setCdata(true);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlAccessMethods.class)) {
    XmlAccessMethods accessMethods=(XmlAccessMethods)helper.getAnnotation(property.getElement(),XmlAccessMethods.class);
    if (!(accessMethods.getMethodName().equals(EMPTY_STRING))) {
      property.setGetMethodName(accessMethods.getMethodName());
    }
    if (!(accessMethods.setMethodName().equals(EMPTY_STRING))) {
      property.setSetMethodName(accessMethods.setMethodName());
    }
    if (!(property.isMethodProperty())) {
      property.setMethodProperty(true);
    }
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlProperties.class)) {
    XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(property.getElement(),XmlProperties.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
    property.setUserProperties(propertiesMap);
  }
 else   if (helper.isAnnotationPresent(property.getElement(),XmlProperty.class)) {
    XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(property.getElement(),XmlProperty.class);
    Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
    property.setUserProperties(propertiesMap);
  }
  if (helper.isAnnotationPresent(property.getElement(),XmlKey.class)) {
    info.addXmlKeyProperty(property);
  }
  processXmlJoinNodes(property);
  processXmlNullPolicy(property);
}"
65884,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isSwaAttachmentRef() && !this.hasSwaRef) {
        this.hasSwaRef=true;
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        for (        org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes.XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
          String refXPath=xmlJoinNode.getReferencedXmlPath();
          if (targetInfo.getIDProperty() != null && refXPath.equals(targetInfo.getIDProperty().getXmlPath())) {
            continue;
          }
          boolean matched=false;
          if (targetInfo.getXmlKeyProperties() != null) {
            for (            Property xmlkeyProperty : targetInfo.getXmlKeyProperties()) {
              if (refXPath.equals(xmlkeyProperty.getXmlPath())) {
                matched=true;
                break;
              }
            }
          }
          if (!matched) {
            throw JAXBException.invalidReferencedXmlPathOnJoin(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName(),refXPath);
          }
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    for (    Property property : tInfo.getPropertyList()) {
      JavaClass typeClass=property.getActualType();
      TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
      if (targetInfo != null && targetInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isSwaAttachmentRef() && !this.hasSwaRef) {
        this.hasSwaRef=true;
      }
      if (property.isXmlIdRef()) {
        if (targetInfo == null && !typeClass.getQualifiedName().equals(JAVA_LANG_OBJECT)) {
          throw JAXBException.invalidIDREFClass(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo != null && targetInfo.getIDProperty() == null) {
          throw JAXBException.invalidIdRef(property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny() && tInfo.isSetAnyElementPropertyName() && !(tInfo.getAnyElementPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),tInfo.getAnyElementPropertyName(),jClass.getName());
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!isCollectionType(property) && !property.getType().isArray()) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
    }
  }
}"
65885,"/** 
 * Create an XMLCollectionReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public XMLCollectionReferenceMapping generateXMLCollectionReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  mapping.setUsesSingleNode(property.isXmlList() || property.isAttribute());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  JavaClass collectionType=property.getType();
  if (collectionType.isArray() || areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  if (property.isSetXmlJoinNodes()) {
    for (    XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
      mapping.addSourceToTargetKeyFieldAssociation(xmlJoinNode.getXmlPath(),xmlJoinNode.getReferencedXmlPath());
    }
  }
 else {
    TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
    String tgtXPath=null;
    if (null != referenceType && referenceType.isIDSet()) {
      Property prop=referenceType.getIDProperty();
      tgtXPath=getXPathForField(prop,namespaceInfo,!prop.isAttribute()).getXPath();
    }
    XMLField srcXPath;
    if (property.getXmlPath() != null) {
      srcXPath=new XMLField(property.getXmlPath());
    }
 else {
      srcXPath=getXPathForField(property,namespaceInfo,true);
    }
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.getInverseReferenceMapping().setAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.getInverseReferenceMapping().setGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.getInverseReferenceMapping().setSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getInverseReferenceMapping().getGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}","/** 
 * Create an XMLCollectionReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public XMLCollectionReferenceMapping generateXMLCollectionReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLCollectionReferenceMapping mapping=new XMLCollectionReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  mapping.setReuseContainer(true);
  mapping.setUsesSingleNode(property.isXmlList() || property.isAttribute());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  JavaClass collectionType=property.getType();
  if (collectionType.isArray() || areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
    collectionType=jotArrayList;
  }
 else   if (areEquals(collectionType,Set.class)) {
    collectionType=jotHashSet;
  }
  mapping.useCollectionClassName(collectionType.getRawName());
  if (property.isSetXmlJoinNodes()) {
    for (    XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
      validateJoinNode(descriptor.getJavaClassName(),property,xmlJoinNode.getReferencedXmlPath(),referenceClass);
      mapping.addSourceToTargetKeyFieldAssociation(xmlJoinNode.getXmlPath(),xmlJoinNode.getReferencedXmlPath());
    }
  }
 else {
    TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
    String tgtXPath=null;
    if (null != referenceType && referenceType.isIDSet()) {
      Property prop=referenceType.getIDProperty();
      tgtXPath=getXPathForField(prop,namespaceInfo,!prop.isAttribute()).getXPath();
    }
    XMLField srcXPath;
    if (property.getXmlPath() != null) {
      srcXPath=new XMLField(property.getXmlPath());
    }
 else {
      srcXPath=getXPathForField(property,namespaceInfo,true);
    }
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.getInverseReferenceMapping().setAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.getInverseReferenceMapping().setGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.getInverseReferenceMapping().setSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getInverseReferenceMapping().getGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}"
65886,"/** 
 * Create an XMLObjectReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public XMLObjectReferenceMapping generateXMLObjectReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  if (property.isSetXmlJoinNodes()) {
    for (    XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
      mapping.addSourceToTargetKeyFieldAssociation(xmlJoinNode.getXmlPath(),xmlJoinNode.getReferencedXmlPath());
    }
  }
 else {
    String tgtXPath=null;
    TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
    if (null != referenceType && referenceType.isIDSet()) {
      Property prop=referenceType.getIDProperty();
      tgtXPath=getXPathForField(prop,namespaceInfo,!prop.isAttribute()).getXPath();
    }
    XMLField srcXPath;
    if (property.getXmlPath() != null) {
      srcXPath=new XMLField(property.getXmlPath());
    }
 else {
      srcXPath=getXPathForField(property,namespaceInfo,true);
    }
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.getInverseReferenceMapping().setAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.getInverseReferenceMapping().setGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.getInverseReferenceMapping().setSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getInverseReferenceMapping().getGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}","/** 
 * Create an XMLObjectReferenceMapping and add it to the descriptor.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @param referenceClass
 */
public XMLObjectReferenceMapping generateXMLObjectReferenceMapping(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo,JavaClass referenceClass){
  XMLObjectReferenceMapping mapping=new XMLObjectReferenceMapping();
  mapping.setAttributeName(property.getPropertyName());
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  if (property.isSetWriteOnly()) {
    mapping.setIsWriteOnly(property.isWriteOnly());
  }
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      mapping.setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  mapping.setReferenceClassName(referenceClass.getQualifiedName());
  if (property.isSetXmlJoinNodes()) {
    for (    XmlJoinNode xmlJoinNode : property.getXmlJoinNodes().getXmlJoinNode()) {
      validateJoinNode(descriptor.getJavaClassName(),property,xmlJoinNode.getReferencedXmlPath(),referenceClass);
      mapping.addSourceToTargetKeyFieldAssociation(xmlJoinNode.getXmlPath(),xmlJoinNode.getReferencedXmlPath());
    }
  }
 else {
    String tgtXPath=null;
    TypeInfo referenceType=typeInfo.get(referenceClass.getQualifiedName());
    if (null != referenceType && referenceType.isIDSet()) {
      Property prop=referenceType.getIDProperty();
      tgtXPath=getXPathForField(prop,namespaceInfo,!prop.isAttribute()).getXPath();
    }
    XMLField srcXPath;
    if (property.getXmlPath() != null) {
      srcXPath=new XMLField(property.getXmlPath());
    }
 else {
      srcXPath=getXPathForField(property,namespaceInfo,true);
    }
    mapping.addSourceToTargetKeyFieldAssociation(srcXPath.getXPath(),tgtXPath);
  }
  if (property.getInverseReferencePropertyName() != null) {
    mapping.getInverseReferenceMapping().setAttributeName(property.getInverseReferencePropertyName());
    JavaClass backPointerPropertyType=null;
    if (property.getInverseReferencePropertyGetMethodName() != null && property.getInverseReferencePropertySetMethodName() != null && !property.getInverseReferencePropertyGetMethodName().equals(""String_Node_Str"") && !property.getInverseReferencePropertySetMethodName().equals(""String_Node_Str"")) {
      mapping.getInverseReferenceMapping().setGetMethodName(property.getInverseReferencePropertySetMethodName());
      mapping.getInverseReferenceMapping().setSetMethodName(property.getInverseReferencePropertySetMethodName());
      JavaMethod getMethod=referenceClass.getDeclaredMethod(mapping.getInverseReferenceMapping().getGetMethodName(),new JavaClass[]{});
      if (getMethod != null) {
        backPointerPropertyType=getMethod.getReturnType();
      }
    }
 else {
      JavaField backpointerField=referenceClass.getDeclaredField(property.getInverseReferencePropertyName());
      if (backpointerField != null) {
        backPointerPropertyType=backpointerField.getResolvedType();
      }
    }
    if (isCollectionType(backPointerPropertyType)) {
      mapping.getInverseReferenceMapping().setContainerPolicy(ContainerPolicy.buildDefaultPolicy());
    }
  }
  return mapping;
}"
65887,"/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    Object appName=null;
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    if (appName == null && appResolver != null) {
      appName=appResolver.getApplicationName();
    }
    if (appName != null) {
      return new MapKeyLookupResult(appName.toString(),classLoader);
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}","/** 
 * INTERNAL: This method will return the MapKeyLookupResult instance to be used to  store/retrieve the global helper context for a given application. OC4J classLoader levels:  0 - APP.web (servlet/jsp) or APP.wrapper (ejb) 1 - APP.root (parent for helperContext) 2 - default.root 3 - system.root 4 - oc4j.10.1.3 (remote EJB) or org.eclipse.persistence:11.1.1.0.0 5 - api:1.4.0 6 - jre.extension:0.0.0 7 - jre.bootstrap:1.5.0_07 (with various J2SE versions)
 * @return MapKeyLookupResult wrapping the application classloader for OC4J,the application name for WebLogic and WebSphere, the archive file  name for JBoss - if available; otherwise a MapKeyLookupResult  wrapping Thread.currentThread().getContextClassLoader()
 */
private static MapKeyLookupResult getContextMapKey(ClassLoader classLoader,String classLoaderName){
  if (classLoaderName.startsWith(OC4J_CLASSLOADER_NAME)) {
    if ((classLoader.getParent() != null) && ((classLoader.toString().indexOf(SDOConstants.CLASSLOADER_WEB_FRAGMENT) != -1) || (classLoader.toString().indexOf(SDOConstants.CLASSLOADER_EJB_FRAGMENT) != -1))) {
      classLoader=classLoader.getParent();
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WLS_CLASSLOADER_NAME)) {
    if (null == applicationAccessWLS) {
      applicationAccessWLS=new ApplicationAccessWLS();
    }
    Object appName=applicationAccessWLS.getApplicationName(classLoader);
    if (appName != null) {
      return new MapKeyLookupResult(appName.toString(),classLoader);
    }
    Object executeThread=getExecuteThread();
    if (executeThread != null) {
      try {
        Method getMethod=PrivilegedAccessHelper.getPublicMethod(executeThread.getClass(),WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_PARAMETER_TYPES,false);
        appName=PrivilegedAccessHelper.invokeMethod(getMethod,executeThread);
      }
 catch (      Exception e) {
        throw SDOException.errorInvokingWLSMethodReflectively(WLS_APPLICATION_NAME_GET_METHOD_NAME,WLS_EXECUTE_THREAD,e);
      }
    }
    if (appName == null && appResolver != null) {
      appName=appResolver.getApplicationName();
    }
    if (appName != null) {
      return new MapKeyLookupResult(appName.toString(),classLoader);
    }
    return new MapKeyLookupResult(classLoader);
  }
  if (classLoaderName.contains(WAS_CLASSLOADER_NAME)) {
    return getContextMapKeyForWAS(classLoader);
  }
  if (classLoaderName.contains(JBOSS_CLASSLOADER_NAME)) {
    return getContextMapKeyForJBoss(classLoader);
  }
  return new MapKeyLookupResult(classLoader);
}"
65888,"public void testUnmarshalToSubClass() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    StreamSource ss=new StreamSource(instream);
    JAXBElement testObject=getJAXBUnmarshaller().unmarshal(ss,A.class);
    Object value=testObject.getValue();
    instream.close();
    assertTrue(value instanceof E);
    assertEquals(5,((E)value).getEee());
    log(""String_Node_Str"");
    log(""String_Node_Str"");
    log(getReadControlObject().toString());
    log(""String_Node_Str"");
    log(testObject.toString());
    JAXBElement controlObj=(JAXBElement)getUnmarshalToSubClssControlObject();
    JAXBElement testObj=(JAXBElement)testObject;
    compareJAXBElementObjects(controlObj,testObj);
  }
}","public void testUnmarshalToSubClass() throws Exception {
  if (isUnmarshalTest()) {
    InputStream instream=ClassLoader.getSystemResourceAsStream(resourceName);
    StreamSource ss=new StreamSource(instream);
    JAXBElement testObject=getJAXBUnmarshaller().unmarshal(ss,A.class);
    Object value=testObject.getValue();
    instream.close();
    assertTrue(value instanceof E);
    assertEquals(5,((E)value).getEee());
    log(""String_Node_Str"");
    log(""String_Node_Str"");
    log(getReadControlObject().toString());
    log(""String_Node_Str"");
    log(testObject.toString());
    JAXBElement controlObj=(JAXBElement)getControlObject();
    JAXBElement testObj=(JAXBElement)testObject;
    compareJAXBElementObjects(controlObj,testObj);
  }
}"
65889,"/** 
 * Create a JAXBElement instance.  If the object is an instance of XMLRoot, we will use its field values to create the JAXBElement.  If the object is not an XMLRoot instance, we will have to determine the 'name' value.  This will be done using the object's descriptor default root element - any prefix will be resolved, and a QName created.
 * @param obj
 * @return
 */
private JAXBElement buildJAXBElementFromObject(Object obj,Class declaredClass){
  if (obj instanceof XMLRoot) {
    JAXBElement jaxbElement=createJAXBElementFromXMLRoot(((XMLRoot)obj),declaredClass);
    if (((XMLRoot)obj).isNil()) {
      jaxbElement.setNil(((XMLRoot)obj).isNil());
      jaxbElement.setValue(null);
    }
    return jaxbElement;
  }
  if (obj instanceof JAXBElement) {
    return (JAXBElement)obj;
  }
  org.eclipse.persistence.sessions.Session sess=xmlUnmarshaller.getXMLContext().getSession(obj);
  XMLDescriptor desc=(XMLDescriptor)sess.getClassDescriptor(obj);
  String rootName=desc.getDefaultRootElement();
  if (rootName == null) {
    return createJAXBElement(new QName(""String_Node_Str""),obj.getClass(),obj);
  }
  String rootNamespaceUri=null;
  int idx=rootName.indexOf(""String_Node_Str"");
  if (idx != -1) {
    rootNamespaceUri=desc.getNamespaceResolver().resolveNamespacePrefix(rootName.substring(0,idx));
    rootName=rootName.substring(idx + 1);
  }
  QName qname;
  if (rootNamespaceUri == null) {
    qname=new QName(rootName);
  }
 else {
    qname=new QName(rootNamespaceUri,rootName);
  }
  return createJAXBElement(qname,obj.getClass(),obj);
}","/** 
 * Create a JAXBElement instance.  If the object is an instance of XMLRoot, we will use its field values to create the JAXBElement.  If the object is not an XMLRoot instance, we will have to determine the 'name' value.  This will be done using the object's descriptor default root element - any prefix will be resolved, and a QName created.
 * @param obj
 * @return
 */
private JAXBElement buildJAXBElementFromObject(Object obj,Class declaredClass){
  if (obj instanceof XMLRoot) {
    JAXBElement jaxbElement=createJAXBElementFromXMLRoot(((XMLRoot)obj),declaredClass);
    if (((XMLRoot)obj).isNil()) {
      jaxbElement.setNil(((XMLRoot)obj).isNil());
      jaxbElement.setValue(null);
    }
    return jaxbElement;
  }
  if (obj instanceof JAXBElement) {
    return (JAXBElement)obj;
  }
  org.eclipse.persistence.sessions.Session sess=xmlUnmarshaller.getXMLContext().getSession(obj);
  XMLDescriptor desc=(XMLDescriptor)sess.getClassDescriptor(obj);
  String rootName=desc.getDefaultRootElement();
  if (rootName == null) {
    return createJAXBElement(new QName(""String_Node_Str""),obj.getClass(),obj);
  }
  String rootNamespaceUri=null;
  int idx=rootName.indexOf(""String_Node_Str"");
  if (idx != -1) {
    rootNamespaceUri=desc.getNamespaceResolver().resolveNamespacePrefix(rootName.substring(0,idx));
    rootName=rootName.substring(idx + 1);
  }
  QName qname;
  if (rootNamespaceUri == null) {
    qname=new QName(rootName);
  }
 else {
    qname=new QName(rootNamespaceUri,rootName);
  }
  if (declaredClass != null) {
    return createJAXBElement(qname,declaredClass,obj);
  }
 else {
    return createJAXBElement(qname,obj.getClass(),obj);
  }
}"
65890,"public XMLBinder(XMLContext context){
  marshaller=context.createMarshaller();
  unmarshaller=context.createUnmarshaller();
  saxUnmarshaller=new SAXUnmarshaller(unmarshaller,null);
  this.context=context;
  documentPreservationPolicy=new XMLBinderPolicy();
  reader=new DOMReader(unmarshaller);
}","public XMLBinder(XMLContext context){
  this.context=new XMLContext(context.getXMLContextState());
  marshaller=this.context.createMarshaller();
  unmarshaller=this.context.createUnmarshaller();
  saxUnmarshaller=new SAXUnmarshaller(unmarshaller,null);
  documentPreservationPolicy=new XMLBinderPolicy();
  reader=new DOMReader(unmarshaller);
}"
65891,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    String namespaceUri=xPathFragment.getNamespaceURI();
    if (namespaceUri == null) {
      namespaceUri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.startElement(namespaceUri,xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65892,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappings.remove(prefixMappings.size() - 1);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    String uri=xPathFragment.getNamespaceURI();
    if (uri == null) {
      uri=XMLConstants.EMPTY_STRING;
    }
    contentHandler.endElement(uri,xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappings.remove(prefixMappings.size() - 1);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65893,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes.clear();
    String namespaceURI=frag.getNamespaceURI();
    String localName=frag.getLocalName();
    String shortName=frag.getShortName();
    contentHandler.startElement(namespaceURI,localName,shortName,attributes);
    contentHandler.endElement(namespaceURI,localName,shortName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    this.attributes.clear();
    String namespaceURI=frag.getNamespaceURI();
    if (namespaceURI == null) {
      namespaceURI=XMLConstants.EMPTY_STRING;
    }
    String localName=frag.getLocalName();
    String shortName=frag.getShortName();
    contentHandler.startElement(namespaceURI,localName,shortName,attributes);
    contentHandler.endElement(namespaceURI,localName,shortName);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65894,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalNSTestCases.class);
  suite.addTestSuite(XMLMarshalExceptionTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTestSuite(SetXmlSchemaTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  suite.addTestSuite(UnmarshalChildElementNSTestCases.class);
  suite.addTestSuite(UnmarshalLevelTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  String platform=System.getProperty(""String_Node_Str"");
  boolean jaxpPlatform=platform.equalsIgnoreCase(""String_Node_Str"");
  suite.addTestSuite(XMLMarshallerCreateTestCases.class);
  suite.addTestSuite(XMLMarshalTestCases.class);
  suite.addTestSuite(XMLMarshalNSTestCases.class);
  suite.addTestSuite(XMLMarshalExceptionTestCases.class);
  suite.addTestSuite(XMLMarshalFragmentTestCases.class);
  suite.addTestSuite(XMLUnmarshalTestCases.class);
  if (!jaxpPlatform) {
    suite.addTestSuite(XMLMarshallerValidateRootTestCases.class);
  }
  suite.addTestSuite(XMLMarshallerValidationModeTestCases.class);
  suite.addTestSuite(SetSchemasTestCases.class);
  suite.addTestSuite(SetXmlSchemaTestCases.class);
  suite.addTest(StructureValidationTestSuite.suite());
  suite.addTestSuite(XMLUnmarshallerHandlerTestCases.class);
  suite.addTestSuite(XMLMarshallerNoDefaultRootTestCases.class);
  suite.addTestSuite(XMLContextConstructorUsingXMLSessionConfigLoader.class);
  suite.addTestSuite(XMLContextStoreXMLDescriptorSimpleType.class);
  suite.addTestSuite(UnmarshalChildElementNSTestCases.class);
  suite.addTestSuite(UnmarshalLevelTestCases.class);
  suite.addTestSuite(XMLMarshallerContentHandlerTestCases.class);
  return suite;
}"
65895,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil() && xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(unmarshalRecord.getAttributes())) {
    return;
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    return;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (null == value) {
    return;
  }
  if (xmlCompositeDirectCollectionMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    if (unmarshalRecord.isNil() || xmlCompositeDirectCollectionMapping.getNullPolicy().valueIsNull(unmarshalRecord.getAttributes())) {
      return;
    }
  }
  if ((!isWhitespaceAware() && XMLConstants.EMPTY_STRING.equals(value))) {
    value=null;
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=xmlField.convertValueBasedOnSchemaType(value,xmlConversionManager,unmarshalRecord);
  }
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
65896,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    StringTokenizer stringTokenizer=new StringTokenizer((String)value);
    while (stringTokenizer.hasMoreTokens()) {
      addUnmarshalValue(unmarshalRecord,stringTokenizer.nextToken(),collection);
    }
  }
 else {
    addUnmarshalValue(unmarshalRecord,value,collection);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (xmlCompositeDirectCollectionMapping.usesSingleNode()) {
    StringTokenizer stringTokenizer=new StringTokenizer((String)value);
    while (stringTokenizer.hasMoreTokens()) {
      addUnmarshalValue(unmarshalRecord,stringTokenizer.nextToken(),collection);
    }
  }
 else {
    XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
    if (xmlField.getLastXPathFragment().nameIsText()) {
      addUnmarshalValue(unmarshalRecord,value,collection);
    }
  }
}"
65897,"private boolean isJAXB2ObjectFactory(Class objectFactoryClass){
  try {
    Class xmlRegistry=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
    if (objectFactoryClass.isAnnotationPresent(xmlRegistry)) {
      return true;
    }
    return false;
  }
 catch (  Exception ex) {
    return false;
  }
}","private boolean isJAXB2ObjectFactory(Class objectFactoryClass,ClassLoader classLoader){
  try {
    Class xmlRegistry=PrivilegedAccessHelper.getClassForName(""String_Node_Str"",false,classLoader);
    if (objectFactoryClass.isAnnotationPresent(xmlRegistry)) {
      return true;
    }
    return false;
  }
 catch (  Exception ex) {
    return false;
  }
}"
65898,"/** 
 * Process an @XmlSeeAlso annotation. TypeInfo instances will be created for each class listed.
 * @param javaClass
 */
private void processXmlSeeAlso(JavaClass javaClass,TypeInfo info){
  Class xmlSeeAlsoClass=null;
  Method valueMethod=null;
  try {
    xmlSeeAlsoClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
    valueMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlSeeAlsoClass,""String_Node_Str"",new Class[]{});
  }
 catch (  ClassNotFoundException ex) {
  }
catch (  NoSuchMethodException ex) {
  }
  if (xmlSeeAlsoClass != null && helper.isAnnotationPresent(javaClass,xmlSeeAlsoClass)) {
    Object seeAlso=helper.getAnnotation(javaClass,xmlSeeAlsoClass);
    Class[] values=null;
    try {
      values=(Class[])PrivilegedAccessHelper.invokeMethod(valueMethod,seeAlso,new Object[]{});
    }
 catch (    Exception ex) {
    }
    List<String> seeAlsoClassNames=new ArrayList<String>();
    for (    Class next : values) {
      seeAlsoClassNames.add(next.getName());
    }
    info.setXmlSeeAlso(seeAlsoClassNames);
  }
}","/** 
 * Process an @XmlSeeAlso annotation. TypeInfo instances will be created for each class listed.
 * @param javaClass
 */
private void processXmlSeeAlso(JavaClass javaClass,TypeInfo info){
  Class xmlSeeAlsoClass=null;
  Method valueMethod=null;
  try {
    xmlSeeAlsoClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"",false,helper.getClassLoader());
    valueMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlSeeAlsoClass,""String_Node_Str"",new Class[]{});
  }
 catch (  ClassNotFoundException ex) {
  }
catch (  NoSuchMethodException ex) {
  }
  if (xmlSeeAlsoClass != null && helper.isAnnotationPresent(javaClass,xmlSeeAlsoClass)) {
    Object seeAlso=helper.getAnnotation(javaClass,xmlSeeAlsoClass);
    Class[] values=null;
    try {
      values=(Class[])PrivilegedAccessHelper.invokeMethod(valueMethod,seeAlso,new Object[]{});
    }
 catch (    Exception ex) {
    }
    List<String> seeAlsoClassNames=new ArrayList<String>();
    for (    Class next : values) {
      seeAlsoClassNames.add(next.getName());
    }
    info.setXmlSeeAlso(seeAlsoClassNames);
  }
}"
65899,"public List<JAXBElement> getItemList(){
  accessedViaMethod=true;
  return items;
}","public List<Object> getItemList(){
  accessedViaMethod=true;
  return items;
}"
65900,"public void setItemList(List<JAXBElement> items){
  this.items=items;
}","public void setItemList(List<Object> items){
  this.items=items;
}"
65901,"/** 
 * Build a reference property.
 * @param property
 * @param info
 * @param javaHasAnnotations
 * @return
 */
private Property processReferenceProperty(Property property,TypeInfo info,JavaClass cls){
  String propertyName=property.getPropertyName();
  validateElementIsInPropOrder(info,propertyName);
  for (  org.eclipse.persistence.jaxb.xmlmodel.XmlElementRef nextRef : property.getXmlElementRefs()) {
    JavaClass type=property.getType();
    String typeName=type.getQualifiedName();
    if (isCollectionType(property)) {
      if (type.hasActualTypeArguments()) {
        type=property.getGenericType();
        typeName=type.getQualifiedName();
      }
    }
    if (!(nextRef.getType().equals(""String_Node_Str"") || nextRef.getType().equals(""String_Node_Str""))) {
      typeName=nextRef.getType();
      type=helper.getJavaClass(typeName);
    }
    boolean missingReference=true;
    for (    Entry<String,ElementDeclaration> entry : xmlRootElements.entrySet()) {
      ElementDeclaration entryValue=entry.getValue();
      if (type.isAssignableFrom(entryValue.getJavaType())) {
        addReferencedElement(property,entryValue);
        missingReference=false;
      }
    }
    if (missingReference) {
      String name=nextRef.getName();
      String namespace=nextRef.getNamespace();
      if (namespace.equals(XMLProcessor.DEFAULT)) {
        namespace=EMPTY_STRING;
      }
      QName qname=new QName(namespace,name);
      JavaClass scopeClass=cls;
      ElementDeclaration referencedElement=null;
      while (!(scopeClass.getName().equals(JAVA_LANG_OBJECT))) {
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements != null) {
          referencedElement=elements.get(qname);
        }
        if (referencedElement != null) {
          break;
        }
        scopeClass=scopeClass.getSuperclass();
      }
      if (referencedElement == null) {
        referencedElement=this.getGlobalElements().get(qname);
      }
      if (referencedElement != null) {
        addReferencedElement(property,referencedElement);
      }
 else {
        throw org.eclipse.persistence.exceptions.JAXBException.invalidElementRef(property.getPropertyName(),cls.getName());
      }
    }
  }
  return property;
}","/** 
 * Build a reference property.
 * @param property
 * @param info
 * @param javaHasAnnotations
 * @return
 */
private Property processReferenceProperty(Property property,TypeInfo info,JavaClass cls){
  String propertyName=property.getPropertyName();
  validateElementIsInPropOrder(info,propertyName);
  for (  org.eclipse.persistence.jaxb.xmlmodel.XmlElementRef nextRef : property.getXmlElementRefs()) {
    JavaClass type=property.getType();
    String typeName=type.getQualifiedName();
    if (isCollectionType(property)) {
      if (type.hasActualTypeArguments()) {
        type=property.getGenericType();
        typeName=type.getQualifiedName();
      }
    }
    if (!(nextRef.getType().equals(""String_Node_Str"") || nextRef.getType().equals(""String_Node_Str""))) {
      typeName=nextRef.getType();
      type=helper.getJavaClass(typeName);
    }
    boolean missingReference=true;
    for (    Entry<String,ElementDeclaration> entry : xmlRootElements.entrySet()) {
      ElementDeclaration entryValue=entry.getValue();
      if (!(areEquals(type,Object.class)) && type.isAssignableFrom(entryValue.getJavaType())) {
        addReferencedElement(property,entryValue);
        missingReference=false;
      }
    }
    if (missingReference) {
      String name=nextRef.getName();
      String namespace=nextRef.getNamespace();
      if (namespace.equals(XMLProcessor.DEFAULT)) {
        namespace=EMPTY_STRING;
      }
      QName qname=new QName(namespace,name);
      JavaClass scopeClass=cls;
      ElementDeclaration referencedElement=null;
      while (!(scopeClass.getName().equals(JAVA_LANG_OBJECT))) {
        HashMap<QName,ElementDeclaration> elements=getElementDeclarationsForScope(scopeClass.getName());
        if (elements != null) {
          referencedElement=elements.get(qname);
        }
        if (referencedElement != null) {
          break;
        }
        scopeClass=scopeClass.getSuperclass();
      }
      if (referencedElement == null) {
        referencedElement=this.getGlobalElements().get(qname);
      }
      if (referencedElement != null) {
        addReferencedElement(property,referencedElement);
      }
 else {
        throw org.eclipse.persistence.exceptions.JAXBException.invalidElementRef(property.getPropertyName(),cls.getName());
      }
    }
  }
  return property;
}"
65902,"/** 
 * Creates a new Element and appends a value to an element.
 * @param parent Element which will own the newly created element
 * @param elementName tag name for the new element
 * @param value Node to add
 */
private Node createElement(Node parent,XPathFragment fragment,NamespaceResolver namespaceResolver,Node value){
  String elementName=fragment.getXPath();
  Document document=parent.getOwnerDocument();
  if ((document == null) && (parent.getNodeType() == Node.DOCUMENT_NODE)) {
    document=(Document)parent;
  }
  String nodeUri=value.getNamespaceURI();
  String nodeName=value.getLocalName();
  String fragUri=fragment.getNamespaceURI();
  String fragName=fragment.getLocalName();
  if ((nodeName != null) && nodeName.equals(fragName) && (((nodeUri != null) && nodeUri.equals(fragUri)) || ((nodeUri == null) && (fragUri == null)))) {
    if (document != value.getOwnerDocument()) {
      return document.importNode(value,true);
    }
    return value;
  }
 else {
    String namespace=resolveNamespacePrefix(fragment,namespaceResolver);
    Element clone=document.createElementNS(namespace,elementName);
    NamedNodeMap attributes=value.getAttributes();
    int attributesLength=attributes.getLength();
    for (int index=0; index < attributesLength; index++) {
      Node attribute=document.importNode(attributes.item(index),true);
      clone.setAttributeNode((Attr)attribute);
    }
    NodeList elements=value.getChildNodes();
    int elementsLength=elements.getLength();
    for (int index=0; index < elementsLength; index++) {
      Node attribute=document.importNode(elements.item(index),true);
      clone.appendChild(attribute);
    }
    return clone;
  }
}","/** 
 * Creates a new Element and appends a value to an element.
 * @param parent Element which will own the newly created element
 * @param elementName tag name for the new element
 * @param value Node to add
 */
private Node createElement(Node parent,XPathFragment fragment,NamespaceResolver namespaceResolver,Node value){
  String elementName=fragment.getXPath();
  Document document=parent.getOwnerDocument();
  if ((document == null) && (parent.getNodeType() == Node.DOCUMENT_NODE)) {
    document=(Document)parent;
  }
  String nodeUri=value.getNamespaceURI();
  String nodeName=value.getLocalName();
  String fragUri=fragment.getNamespaceURI();
  String fragName=fragment.getLocalName();
  if ((nodeName != null) && nodeName.equals(fragName) && (((nodeUri != null) && nodeUri.equals(fragUri)) || ((nodeUri == null) && (fragUri == null)))) {
    if (document != value.getOwnerDocument()) {
      return document.importNode(value,true);
    }
    return value;
  }
 else {
    String namespace=resolveNamespacePrefix(fragment,namespaceResolver);
    Element clone=document.createElementNS(namespace,fragName);
    NamedNodeMap attributes=value.getAttributes();
    int attributesLength=attributes.getLength();
    for (int index=0; index < attributesLength; index++) {
      Node attribute=document.importNode(attributes.item(index),true);
      clone.setAttributeNode((Attr)attribute);
    }
    NodeList elements=value.getChildNodes();
    int elementsLength=elements.getLength();
    for (int index=0; index < elementsLength; index++) {
      Node attribute=document.importNode(elements.item(index),true);
      clone.appendChild(attribute);
    }
    return clone;
  }
}"
65903,"/** 
 * Add a new <code>element</code> to the <code>parent</code> element.  If an element with this name already exists, return it (unless <code>forceCreate</code> is <code>true</code>).
 * @param fragment Name of element to create
 * @param namespace namespace of element to create
 * @param parent Parent element
 * @param schemaType schemaType of element to create
 * @param value Value for the new node
 * @param forceCreate If true, create a new element even if one with the same name currently exists
 * @return The <code>NodeList</code> that was created/found
 */
private NodeList addElements(XPathFragment fragment,XMLField xmlField,Node parent,Object value,boolean forceCreate,Element sibling,DocumentPreservationPolicy docPresPolicy,AbstractSession session){
  if (!forceCreate) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(parent,fragment,getNamespaceResolverForField(xmlField));
    if (nodes.getLength() > 0) {
      return nodes;
    }
  }
  XMLNodeList elementsToReturn=new XMLNodeList();
  if (value == this) {
    String namespace=resolveNamespacePrefix(fragment,getNamespaceResolverForField(xmlField));
    Element newElement=parent.getOwnerDocument().createElementNS(namespace,fragment.getShortName());
    elementsToReturn.add(newElement);
    docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
  }
 else   if (value == null) {
    elementsToReturn.add(parent);
  }
 else {
    if (value instanceof List) {
      List values=(List)value;
      for (int index=0; index < values.size(); index++) {
        Element newElement=null;
        if (values.get(index) != XMLRecord.NIL) {
          newElement=(Element)createElement(parent,fragment,xmlField,values.get(index),session);
        }
 else {
          newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
          newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
        }
        docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
        elementsToReturn.add(newElement);
        sibling=newElement;
      }
    }
 else {
      Element newElement=null;
      if (value != XMLRecord.NIL) {
        newElement=(Element)createElement(parent,fragment,xmlField,value,session);
      }
 else {
        newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
        newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
      }
      docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
      elementsToReturn.add(newElement);
    }
  }
  return elementsToReturn;
}","/** 
 * Add a new <code>element</code> to the <code>parent</code> element.  If an element with this name already exists, return it (unless <code>forceCreate</code> is <code>true</code>).
 * @param fragment Name of element to create
 * @param namespace namespace of element to create
 * @param parent Parent element
 * @param schemaType schemaType of element to create
 * @param value Value for the new node
 * @param forceCreate If true, create a new element even if one with the same name currently exists
 * @return The <code>NodeList</code> that was created/found
 */
private NodeList addElements(XPathFragment fragment,XMLField xmlField,Node parent,Object value,boolean forceCreate,Element sibling,DocumentPreservationPolicy docPresPolicy,AbstractSession session){
  if (!forceCreate) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(parent,fragment,getNamespaceResolverForField(xmlField));
    if (nodes.getLength() > 0) {
      return nodes;
    }
  }
  XMLNodeList elementsToReturn=new XMLNodeList();
  if (value == this) {
    String namespace=resolveNamespacePrefix(fragment,getNamespaceResolverForField(xmlField));
    Element newElement=parent.getOwnerDocument().createElementNS(namespace,fragment.getShortName());
    XPathPredicate predicate=fragment.getPredicate();
    if (predicate != null) {
      XPathFragment predicateFragment=predicate.getXPathFragment();
      if (predicateFragment.isAttribute()) {
        if (predicateFragment.getNamespaceURI() == null || predicateFragment.getNamespaceURI().length() == 0) {
          newElement.setAttribute(predicateFragment.getLocalName(),fragment.getPredicate().getValue());
        }
 else {
          String name=predicateFragment.getLocalName();
          if (predicateFragment.getPrefix() != null && predicateFragment.getPrefix().length() != 0) {
            name=predicateFragment.getPrefix() + XMLConstants.COLON + name;
          }
          newElement.setAttributeNS(predicateFragment.getNamespaceURI(),name,fragment.getPredicate().getValue());
        }
      }
    }
    elementsToReturn.add(newElement);
    docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
  }
 else   if (value == null) {
    elementsToReturn.add(parent);
  }
 else {
    if (value instanceof List) {
      List values=(List)value;
      for (int index=0; index < values.size(); index++) {
        Element newElement=null;
        if (values.get(index) != XMLRecord.NIL) {
          newElement=(Element)createElement(parent,fragment,xmlField,values.get(index),session);
        }
 else {
          newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
          newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
        }
        XPathPredicate predicate=fragment.getPredicate();
        if (predicate != null) {
          XPathFragment predicateFragment=predicate.getXPathFragment();
          if (predicateFragment.isAttribute()) {
            if (predicateFragment.getNamespaceURI() == null || predicateFragment.getNamespaceURI().length() == 0) {
              newElement.setAttribute(predicateFragment.getLocalName(),fragment.getPredicate().getValue());
            }
 else {
              String name=predicateFragment.getLocalName();
              if (predicateFragment.getPrefix() != null && predicateFragment.getPrefix().length() != 0) {
                name=predicateFragment.getPrefix() + XMLConstants.COLON + name;
              }
              newElement.setAttributeNS(predicateFragment.getNamespaceURI(),name,fragment.getPredicate().getValue());
            }
          }
        }
        docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
        elementsToReturn.add(newElement);
        sibling=newElement;
      }
    }
 else {
      Element newElement=null;
      if (value != XMLRecord.NIL) {
        newElement=(Element)createElement(parent,fragment,xmlField,value,session);
      }
 else {
        newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
        newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
      }
      XPathPredicate predicate=fragment.getPredicate();
      if (predicate != null) {
        XPathFragment predicateFragment=predicate.getXPathFragment();
        if (predicateFragment.isAttribute()) {
          if (predicateFragment.getNamespaceURI() == null || predicateFragment.getNamespaceURI().length() == 0) {
            newElement.setAttribute(predicateFragment.getLocalName(),fragment.getPredicate().getValue());
          }
 else {
            String name=predicateFragment.getLocalName();
            if (predicateFragment.getPrefix() != null && predicateFragment.getPrefix().length() != 0) {
              name=predicateFragment.getPrefix() + XMLConstants.COLON + name;
            }
            newElement.setAttributeNS(predicateFragment.getNamespaceURI(),name,fragment.getPredicate().getValue());
          }
        }
      }
      docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
      elementsToReturn.add(newElement);
    }
  }
  return elementsToReturn;
}"
65904,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.mixed.LoadAndSaveMixedContentTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.staticclasses.LoadAndSaveStaticClassesTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveIncludeWithExtensionTestCases.class));
  suite.addTestSuite(GlobalAttributeTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadAndSaveValuePropTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithDefaultsTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveInheritanceBug6043501TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveNamespacesBugTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveBug6130541TestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveAttributeGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveGroupTestCases.class));
  suite.addTest(new TestSuite(LoadAndSaveWithTypeBug6522867TestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveWithReadOnlyTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.nillable.ListPropertyNillableElementTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.mixed.LoadAndSaveMixedContentTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.staticclasses.LoadAndSaveStaticClassesTestCases.class));
  suite.addTest(new TestSuite(org.eclipse.persistence.testing.sdo.helper.xmlhelper.loadandsave.LoadAndSaveIncludeWithExtensionTestCases.class));
  suite.addTestSuite(GlobalAttributeTestCases.class);
  suite.addTest(new TestSuite(LoadAndSaveExceptionBug325353TestCases.class));
  return suite;
}"
65905,"/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer,XMLMarshaller anXMLMarshaller) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  anXMLMarshaller.setFragment(!xmlDocument.isXMLDeclaration());
  WriterRecord writerRecord;
  if (anXMLMarshaller.isFormattedOutput()) {
    writerRecord=new FormattedWriterRecord();
  }
 else {
    writerRecord=new WriterRecord();
  }
  writerRecord.setWriter(writer);
  writerRecord.setMarshaller(anXMLMarshaller);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObjectRootQName(new QName(rootElementURI,rootElementName));
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setRootMarshalRecord(writerRecord);
  anXMLMarshaller.marshal(xmlDocument,writerRecord);
  try {
    writer.flush();
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}","/** 
 * INTERNAL: Saves the DataObject as an XML document with the specified root element. Same as save(createDocument(dataObject, rootElementURI, rootElementName), writer, null);
 * @param dataObject specifies DataObject to be saved
 * @param rootElementURI the Target Namespace URI of the root XML element
 * @param rootElementName the Name of the root XML element
 * @param writer specifies the Writer to write to.
 * @throws IOException for stream exceptions.
 * @throws IllegalArgumentException if the dataObject treeis not closed or has no container.
 */
private void save(DataObject rootObject,String rootElementURI,String rootElementName,Writer writer,XMLMarshaller anXMLMarshaller) throws XMLMarshalException {
  SDOXMLDocument xmlDocument=(SDOXMLDocument)createDocument(rootObject,rootElementURI,rootElementName);
  anXMLMarshaller.setFragment(!xmlDocument.isXMLDeclaration());
  WriterRecord writerRecord;
  if (anXMLMarshaller.isFormattedOutput()) {
    writerRecord=new FormattedWriterRecord();
  }
 else {
    writerRecord=new WriterRecord();
  }
  writerRecord.setWriter(writer);
  writerRecord.setMarshaller(anXMLMarshaller);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObject(rootObject);
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setMarshalledObjectRootQName(new QName(rootElementURI,rootElementName));
  ((SDOMarshalListener)anXMLMarshaller.getMarshalListener()).setRootMarshalRecord(writerRecord);
  try {
    anXMLMarshaller.marshal(xmlDocument,writerRecord);
  }
 catch (  XMLMarshalException xme) {
    if (xme.getErrorCode() == XMLMarshalException.DESCRIPTOR_NOT_FOUND_IN_PROJECT) {
      if (aHelperContext != ((SDOType)rootObject.getType()).getHelperContext()) {
        throw SDOException.dataObjectNotFromHelperContext();
      }
    }
  }
  try {
    writer.flush();
  }
 catch (  IOException ex) {
    throw XMLMarshalException.marshalException(ex);
  }
}"
65906,"private Object getValueToWrite(Object value,XMLField xmlField,AbstractSession session){
  if (value instanceof Node) {
    return value;
  }
  return getNonNodeValueToWrite(value,xmlField,session);
}","private Object getValueToWrite(Object value,XMLField xmlField,AbstractSession session){
  if (value instanceof Node || value == XMLRecord.NIL) {
    return value;
  }
  return getNonNodeValueToWrite(value,xmlField,session);
}"
65907,"/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          node.setNodeValue((String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING));
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}","/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            NamespaceResolver nsr=new NamespaceResolver();
            nsr.setDOM(parentElement);
            String schemaInstancePrefix=resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,nsr);
            if (schemaInstancePrefix == null) {
              nsr=getNamespaceResolverForField(xmlField);
              schemaInstancePrefix=nsr.resolveNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
              if (schemaInstancePrefix == null) {
                schemaInstancePrefix=nsr.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
              }
              parentElement.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + schemaInstancePrefix,XMLConstants.SCHEMA_INSTANCE_URL);
            }
            parentElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}"
65908,"/** 
 * Add a new <code>element</code> to the <code>parent</code> element.  If an element with this name already exists, return it (unless <code>forceCreate</code> is <code>true</code>).
 * @param fragment Name of element to create
 * @param namespace namespace of element to create
 * @param parent Parent element
 * @param schemaType schemaType of element to create
 * @param value Value for the new node
 * @param forceCreate If true, create a new element even if one with the same name currently exists
 * @return The <code>NodeList</code> that was created/found
 */
private NodeList addElements(XPathFragment fragment,XMLField xmlField,Node parent,Object value,boolean forceCreate,Element sibling,DocumentPreservationPolicy docPresPolicy,AbstractSession session){
  if (!forceCreate) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(parent,fragment,getNamespaceResolverForField(xmlField));
    if (nodes.getLength() > 0) {
      return nodes;
    }
  }
  XMLNodeList elementsToReturn=new XMLNodeList();
  if (value == this) {
    String namespace=resolveNamespacePrefix(fragment,getNamespaceResolverForField(xmlField));
    Element newElement=parent.getOwnerDocument().createElementNS(namespace,fragment.getShortName());
    elementsToReturn.add(newElement);
    docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
  }
 else   if (value == null) {
    elementsToReturn.add(parent);
  }
 else {
    if (value instanceof List) {
      List values=(List)value;
      for (int index=0; index < values.size(); index++) {
        Element newElement=null;
        if (values.get(index) != XMLRecord.NIL) {
          newElement=(Element)createElement(parent,fragment,xmlField,values.get(index),session);
        }
 else {
          newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
          newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
        }
        docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
        elementsToReturn.add(newElement);
        sibling=newElement;
      }
    }
 else {
      Element newElement=(Element)createElement(parent,fragment,xmlField,value,session);
      docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
      elementsToReturn.add(newElement);
    }
  }
  return elementsToReturn;
}","/** 
 * Add a new <code>element</code> to the <code>parent</code> element.  If an element with this name already exists, return it (unless <code>forceCreate</code> is <code>true</code>).
 * @param fragment Name of element to create
 * @param namespace namespace of element to create
 * @param parent Parent element
 * @param schemaType schemaType of element to create
 * @param value Value for the new node
 * @param forceCreate If true, create a new element even if one with the same name currently exists
 * @return The <code>NodeList</code> that was created/found
 */
private NodeList addElements(XPathFragment fragment,XMLField xmlField,Node parent,Object value,boolean forceCreate,Element sibling,DocumentPreservationPolicy docPresPolicy,AbstractSession session){
  if (!forceCreate) {
    NodeList nodes=unmarshalXPathEngine.selectElementNodes(parent,fragment,getNamespaceResolverForField(xmlField));
    if (nodes.getLength() > 0) {
      return nodes;
    }
  }
  XMLNodeList elementsToReturn=new XMLNodeList();
  if (value == this) {
    String namespace=resolveNamespacePrefix(fragment,getNamespaceResolverForField(xmlField));
    Element newElement=parent.getOwnerDocument().createElementNS(namespace,fragment.getShortName());
    elementsToReturn.add(newElement);
    docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
  }
 else   if (value == null) {
    elementsToReturn.add(parent);
  }
 else {
    if (value instanceof List) {
      List values=(List)value;
      for (int index=0; index < values.size(); index++) {
        Element newElement=null;
        if (values.get(index) != XMLRecord.NIL) {
          newElement=(Element)createElement(parent,fragment,xmlField,values.get(index),session);
        }
 else {
          newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
          newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
        }
        docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
        elementsToReturn.add(newElement);
        sibling=newElement;
      }
    }
 else {
      Element newElement=null;
      if (value != XMLRecord.NIL) {
        newElement=(Element)createElement(parent,fragment,xmlField,value,session);
      }
 else {
        newElement=(Element)createElement(parent,fragment,xmlField,XMLConstants.EMPTY_STRING,session);
        newElement.setAttributeNS(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_INSTANCE_PREFIX + ""String_Node_Str"" + XMLConstants.SCHEMA_NIL_ATTRIBUTE,XMLConstants.BOOLEAN_STRING_TRUE);
      }
      docPresPolicy.getNodeOrderingPolicy().appendNode(parent,newElement,sibling);
      elementsToReturn.add(newElement);
    }
  }
  return elementsToReturn;
}"
65909,"public void writeSingleValue(Object value,Object parent,XMLRecord row,AbstractSession session){
  Object fieldValue=getFieldValue(value,session,row);
  writeValueIntoRow(row,getField(),fieldValue);
}","public void writeSingleValue(Object value,Object parent,XMLRecord row,AbstractSession session){
  Object fieldValue=getFieldValue(value,session,row);
  if (fieldValue == null && getNullPolicy() != null) {
    getNullPolicy().directMarshal(this.getField(),row,parent);
  }
 else {
    writeValueIntoRow(row,getField(),fieldValue);
  }
}"
65910,"/** 
 * INTERNAL:  When using the SAX or DOM Platform, this method is responsible for marshalling null values for the XML Direct Mapping.
 * @param xPathFragment
 * @param marshalRecord
 * @param object
 * @param session
 * @param namespaceResolver
 * @return true if this method caused any nodes to be marshaled, else false.
 */
public boolean directMarshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Session session,NamespaceResolver namespaceResolver){
  if (xPathFragment.isAttribute()) {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.attribute(xPathFragment,namespaceResolver,XMLConstants.EMPTY_STRING);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return false;
    }
  }
 else {
    if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      String xsiPrefix=processNamespaceResolverForXSIPrefix(namespaceResolver,marshalRecord);
      StringBuilder qName=new StringBuilder(XMLConstants.ATTRIBUTE);
      qName.append(xsiPrefix).append(COLON_W_SCHEMA_NIL_ATTRIBUTE);
      XPathFragment nilFragment=new XPathFragment(qName.toString());
      nilFragment.setNamespaceURI(XMLConstants.SCHEMA_INSTANCE_URL);
      marshalRecord.attribute(nilFragment,namespaceResolver,TRUE);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      if (getMarshalNullRepresentation().equals(XMLNullRepresentationType.EMPTY_NODE)) {
        XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
        marshalRecord.closeStartGroupingElements(groupingFragment);
        return true;
      }
 else {
        return false;
      }
    }
  }
}","public void directMarshal(DatabaseField field,XMLRecord record,Object object){
  Object fieldValue=null;
  if (getMarshalNullRepresentation() == XMLNullRepresentationType.EMPTY_NODE) {
    fieldValue=XMLConstants.EMPTY_STRING;
  }
 else {
    if (!(((XMLField)field).getLastXPathFragment().isAttribute())) {
      if (getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
        fieldValue=XMLRecord.NIL;
      }
    }
  }
  record.put(field,fieldValue);
}"
65911,"public boolean directMarshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Session session,NamespaceResolver namespaceResolver){
  if (!isSet(object)) {
    return false;
  }
 else {
    return super.directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
}","public void directMarshal(DatabaseField field,XMLRecord record,Object object){
  if (!isSet(object)) {
    return;
  }
  super.directMarshal(field,record,object);
}"
65912,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    level++;
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    contentHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName(),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65913,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  this.isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes.clear();
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  currentLevelPrefixMappings=Collections.EMPTY_LIST;
  prefixMappingsDeque.push(currentLevelPrefixMappings);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  this.isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes.clear();
}"
65914,"/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
    List<String> currentLevelPrefixMappings=prefixMappings.get(level);
    if (null == currentLevelPrefixMappings) {
      currentLevelPrefixMappings=new ArrayList<String>();
      prefixMappings.put(level,currentLevelPrefixMappings);
    }
    currentLevelPrefixMappings.add(prefix);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
    if (Collections.EMPTY_LIST == currentLevelPrefixMappings) {
      currentLevelPrefixMappings=new ArrayList<String>();
    }
    currentLevelPrefixMappings.add(prefix);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65915,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    level--;
    List<String> currentLevelPrefixMappings=prefixMappings.get(level);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
      currentLevelPrefixMappings.clear();
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappingsDeque.pop();
    if (null != currentLevelPrefixMappings && Collections.EMPTY_LIST != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65916,"public ContentHandlerRecord(){
  level=0;
  prefixMappings=new HashMap<Integer,List<String>>();
  attributes=new AttributesImpl();
}","public ContentHandlerRecord(){
  prefixMappingsDeque=new ArrayDeque<List<String>>();
  currentLevelPrefixMappings=Collections.EMPTY_LIST;
  attributes=new AttributesImpl();
}"
65917,"public void testNamespaceResolver(){
  assertNotNull(""String_Node_Str"",xmlContext);
  XMLDescriptor xdesc=xmlContext.getDescriptor(new QName(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",xdesc);
  String prefix=xdesc.getNamespaceResolver().resolveNamespaceURI(""String_Node_Str"");
  String prefix2=xdesc.getNamespaceResolver().resolveNamespaceURI(""String_Node_Str"");
  assertEquals(""String_Node_Str"",prefix);
  assertEquals(""String_Node_Str"",prefix2);
}","public void testNamespaceResolver(){
  assertNotNull(""String_Node_Str"",xmlContext);
  XMLDescriptor xdesc=xmlContext.getDescriptor(new QName(""String_Node_Str"",""String_Node_Str""));
  assertNotNull(""String_Node_Str"",xdesc);
  String uriA=""String_Node_Str"";
  String uriB=""String_Node_Str"";
  String prefixA=""String_Node_Str"";
  String prefixNewA=""String_Node_Str"";
  String prefixB=""String_Node_Str"";
  assertEquals(uriA,xdesc.getNamespaceResolver().resolveNamespacePrefix(prefixA));
  assertEquals(uriA,xdesc.getNamespaceResolver().resolveNamespacePrefix(prefixNewA));
  assertEquals(uriB,xdesc.getNamespaceResolver().resolveNamespacePrefix(prefixB));
}"
65918,"protected byte[] createEnum(EnumInfo enumInfo){
  String[] enumValues=enumInfo.getLiteralLabels();
  String className=enumInfo.getClassName();
  String internalClassName=className.replace('.','/');
  CodeVisitor cv;
  ClassWriter cw=new ClassWriter(true);
  cw.visit(V1_5,ACC_PUBLIC + ACC_FINAL + ACC_SUPER+ ACC_ENUM,internalClassName,""String_Node_Str"",null,null);
  for (  String enumValue : enumValues) {
    cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC+ ACC_ENUM,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  }
  cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC+ ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv.visitFieldInsn(GETSTATIC,internalClassName,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"" + internalClassName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitTypeInsn(CHECKCAST,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitInsn(ARETURN);
  cv.visitMaxs(1,0);
  cv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv.visitLdcInsn(Type.getType(""String_Node_Str"" + internalClassName + ""String_Node_Str""));
  cv.visitVarInsn(ALOAD,0);
  cv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitTypeInsn(CHECKCAST,internalClassName);
  cv.visitInsn(ARETURN);
  cv.visitMaxs(2,1);
  SignatureAttribute methodAttrs1=new SignatureAttribute(""String_Node_Str"");
  cv=cw.visitMethod(ACC_PRIVATE,""String_Node_Str"",""String_Node_Str"",null,methodAttrs1);
  cv.visitVarInsn(ALOAD,0);
  cv.visitVarInsn(ALOAD,1);
  cv.visitVarInsn(ILOAD,2);
  cv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(RETURN);
  cv.visitMaxs(3,3);
  cv=cw.visitMethod(ACC_STATIC,""String_Node_Str"",""String_Node_Str"",null,null);
  int lastCount=0;
  for (int i=0; i < enumValues.length; i++) {
    String enumValue=enumValues[i];
    cv.visitTypeInsn(NEW,internalClassName);
    cv.visitInsn(DUP);
    cv.visitLdcInsn(enumValue);
    if (i <= 5) {
      cv.visitInsn(ICONST[i]);
    }
 else {
      cv.visitIntInsn(BIPUSH,i);
    }
    cv.visitMethodInsn(INVOKESPECIAL,internalClassName,""String_Node_Str"",""String_Node_Str"");
    cv.visitFieldInsn(PUTSTATIC,internalClassName,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
    lastCount=i;
  }
  if (lastCount <= 5) {
    cv.visitInsn(ICONST[lastCount + 1]);
  }
 else {
    cv.visitIntInsn(BIPUSH,lastCount + 1);
  }
  cv.visitTypeInsn(ANEWARRAY,internalClassName);
  for (int i=0; i < enumValues.length; i++) {
    String enumValue=enumValues[i];
    cv.visitInsn(DUP);
    if (i <= 5) {
      cv.visitInsn(ICONST[i]);
    }
 else {
      cv.visitIntInsn(BIPUSH,i);
    }
    cv.visitFieldInsn(GETSTATIC,internalClassName,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
    cv.visitInsn(AASTORE);
  }
  cv.visitFieldInsn(PUTSTATIC,internalClassName,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitInsn(RETURN);
  cv.visitMaxs(4,0);
  cw.visitEnd();
  return cw.toByteArray();
}","protected byte[] createEnum(EnumInfo enumInfo){
  String[] enumValues=enumInfo.getLiteralLabels();
  String className=enumInfo.getClassName();
  String internalClassName=className.replace('.','/');
  CodeVisitor cv;
  ClassWriter cw=new ClassWriter(true);
  cw.visit(V1_5,ACC_PUBLIC + ACC_FINAL + ACC_SUPER+ ACC_ENUM,internalClassName,""String_Node_Str"",null,null);
  for (  String enumValue : enumValues) {
    cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC+ ACC_ENUM,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  }
  cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC+ ACC_SYNTHETIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv.visitFieldInsn(GETSTATIC,internalClassName,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitMethodInsn(INVOKEVIRTUAL,""String_Node_Str"" + internalClassName + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitTypeInsn(CHECKCAST,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitInsn(ARETURN);
  cv.visitMaxs(1,0);
  cv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"",null,null);
  cv.visitLdcInsn(Type.getType(""String_Node_Str"" + internalClassName + ""String_Node_Str""));
  cv.visitVarInsn(ALOAD,0);
  cv.visitMethodInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitTypeInsn(CHECKCAST,internalClassName);
  cv.visitInsn(ARETURN);
  cv.visitMaxs(2,1);
  SignatureAttribute methodAttrs1=new SignatureAttribute(""String_Node_Str"");
  cv=cw.visitMethod(ACC_PRIVATE,""String_Node_Str"",""String_Node_Str"",null,methodAttrs1);
  cv.visitVarInsn(ALOAD,0);
  cv.visitVarInsn(ALOAD,1);
  cv.visitVarInsn(ILOAD,2);
  cv.visitMethodInsn(INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cv.visitInsn(RETURN);
  cv.visitMaxs(3,3);
  cv=cw.visitMethod(ACC_STATIC,""String_Node_Str"",""String_Node_Str"",null,null);
  int lastCount=0;
  for (int i=0; i < enumValues.length; i++) {
    String enumValue=enumValues[i];
    cv.visitTypeInsn(NEW,internalClassName);
    cv.visitInsn(DUP);
    cv.visitLdcInsn(enumValue);
    if (i <= 5) {
      cv.visitInsn(ICONST[i]);
    }
 else {
      cv.visitIntInsn(BIPUSH,i);
    }
    cv.visitMethodInsn(INVOKESPECIAL,internalClassName,""String_Node_Str"",""String_Node_Str"");
    cv.visitFieldInsn(PUTSTATIC,internalClassName,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
    lastCount=i;
  }
  if (lastCount < 5) {
    cv.visitInsn(ICONST[lastCount + 1]);
  }
 else {
    cv.visitIntInsn(BIPUSH,lastCount + 1);
  }
  cv.visitTypeInsn(ANEWARRAY,internalClassName);
  for (int i=0; i < enumValues.length; i++) {
    String enumValue=enumValues[i];
    cv.visitInsn(DUP);
    if (i <= 5) {
      cv.visitInsn(ICONST[i]);
    }
 else {
      cv.visitIntInsn(BIPUSH,i);
    }
    cv.visitFieldInsn(GETSTATIC,internalClassName,enumValue,""String_Node_Str"" + internalClassName + ""String_Node_Str"");
    cv.visitInsn(AASTORE);
  }
  cv.visitFieldInsn(PUTSTATIC,internalClassName,""String_Node_Str"",""String_Node_Str"" + internalClassName + ""String_Node_Str"");
  cv.visitInsn(RETURN);
  cv.visitMaxs(4,0);
  cw.visitEnd();
  return cw.toByteArray();
}"
65919,"/** 
 * PUBLIC: Cause: An exception occurred while attampting to get a new instance of  the adapter class.
 */
public static JAXBException adapterClassCouldNotBeInstantiated(String adapterClassName,Exception ex){
  Object[] args={adapterClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ADAPTER_CLASS_COULD_NOT_BE_INSTANTIATED,args),ex);
  validationException.setErrorCode(ADAPTER_CLASS_COULD_NOT_BE_INSTANTIATED);
  return validationException;
}","/** 
 * PUBLIC: Cause: An exception occurred while attempting to get a new instance of  the adapter class.
 */
public static JAXBException adapterClassCouldNotBeInstantiated(String adapterClassName,Exception ex){
  Object[] args={adapterClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ADAPTER_CLASS_COULD_NOT_BE_INSTANTIATED,args),ex);
  validationException.setErrorCode(ADAPTER_CLASS_COULD_NOT_BE_INSTANTIATED);
  return validationException;
}"
65920,"/** 
 * PUBLIC: Cause: An exception occurred while attampting to get the declared methods from  the adapter class.
 */
public static JAXBException adapterClassMethodsCouldNotBeAccessed(String adapterClassName,Exception ex){
  Object[] args={adapterClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ADAPTER_CLASS_METHOD_EXCEPTION,args),ex);
  validationException.setErrorCode(ADAPTER_CLASS_METHOD_EXCEPTION);
  return validationException;
}","/** 
 * PUBLIC: Cause: An exception occurred while attempting to get the declared methods from  the adapter class.
 */
public static JAXBException adapterClassMethodsCouldNotBeAccessed(String adapterClassName,Exception ex){
  Object[] args={adapterClassName};
  JAXBException validationException=new JAXBException(ExceptionMessageGenerator.buildMessage(JAXBException.class,ADAPTER_CLASS_METHOD_EXCEPTION,args),ex);
  validationException.setErrorCode(ADAPTER_CLASS_METHOD_EXCEPTION);
  return validationException;
}"
65921,"public void testElementCollectionClear(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    SimpleEntity se=new SimpleEntity();
    se.setId(101L);
    se.setDescription(""String_Node_Str"");
    Collection<String> nature=new ArrayList<String>();
    nature.add(SimpleNature.PERSONALITY[0]);
    nature.add(SimpleNature.PERSONALITY[1]);
    nature.add(SimpleNature.PERSONALITY[2]);
    nature.add(SimpleNature.PERSONALITY[3]);
    nature.add(SimpleNature.PERSONALITY[4]);
    nature.add(SimpleNature.PERSONALITY[5]);
    se.setSimpleNature(nature);
    em.persist(se);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
  clearCache();
  em=createEntityManager();
  beginTransaction(em);
  SimpleEntity se;
  try {
    se=em.find(SimpleEntity.class,101L);
    em.clear();
    closeEntityManager(em);
    se.getSimpleNature().clear();
    em=createEntityManager();
    beginTransaction(em);
    em.merge(se);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
  clearCache();
  em=createEntityManager();
  beginTransaction(em);
  try {
    se=em.find(SimpleEntity.class,101L);
    Collection<String> natureList=se.getSimpleNature();
    int count=0;
    for (    String nature : natureList) {
      count++;
    }
    Assert.assertEquals(""String_Node_Str"",0,count);
  }
 catch (  RuntimeException e) {
    throw e;
  }
 finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testElementCollectionClear(){
  EntityManager em=createEntityManager();
  beginTransaction(em);
  try {
    SimpleEntity se=new SimpleEntity();
    se.setId(101L);
    se.setDescription(""String_Node_Str"");
    Collection<String> nature=new ArrayList<String>();
    nature.add(SimpleNature.PERSONALITY[0]);
    nature.add(SimpleNature.PERSONALITY[1]);
    nature.add(SimpleNature.PERSONALITY[2]);
    nature.add(SimpleNature.PERSONALITY[3]);
    nature.add(SimpleNature.PERSONALITY[4]);
    nature.add(SimpleNature.PERSONALITY[5]);
    se.setSimpleNature(nature);
    em.persist(se);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
  clearCache();
  em=createEntityManager();
  SimpleEntity se;
  try {
    se=em.find(SimpleEntity.class,101L);
    em.clear();
    closeEntityManager(em);
    se.getSimpleNature().clear();
    em=createEntityManager();
    beginTransaction(em);
    em.merge(se);
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
  clearCache();
  em=createEntityManager();
  beginTransaction(em);
  try {
    se=em.find(SimpleEntity.class,101L);
    Collection<String> natureList=se.getSimpleNature();
    int count=0;
    for (    String nature : natureList) {
      count++;
    }
    Assert.assertEquals(""String_Node_Str"",0,count);
  }
 catch (  RuntimeException e) {
    throw e;
  }
 finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
65922,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  currentLevelPrefixMappings=Collections.EMPTY_LIST;
  prefixMappingsDeque.push(currentLevelPrefixMappings);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  this.isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes.clear();
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  currentLevelPrefixMappings=null;
  prefixMappings.add(currentLevelPrefixMappings);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  this.isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes.clear();
}"
65923,"/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
    if (Collections.EMPTY_LIST == currentLevelPrefixMappings) {
      currentLevelPrefixMappings=new ArrayList<String>();
    }
    currentLevelPrefixMappings.add(prefix);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void startPrefixMapping(String prefix,String namespaceURI){
  try {
    contentHandler.startPrefixMapping(prefix,namespaceURI);
    if (null == currentLevelPrefixMappings) {
      currentLevelPrefixMappings=new ArrayList<String>();
    }
    currentLevelPrefixMappings.add(prefix);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65924,"/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappingsDeque.pop();
    if (null != currentLevelPrefixMappings && Collections.EMPTY_LIST != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (isStartElementOpen) {
    openAndCloseStartElement();
    isStartElementOpen=false;
  }
  try {
    contentHandler.endElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),xPathFragment.getShortName());
    List<String> currentLevelPrefixMappings=prefixMappings.remove(prefixMappings.size() - 1);
    if (null != currentLevelPrefixMappings) {
      for (      String prefix : currentLevelPrefixMappings) {
        contentHandler.endPrefixMapping(prefix);
      }
    }
    isStartElementOpen=false;
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
65925,"public ContentHandlerRecord(){
  prefixMappingsDeque=new ArrayDeque<List<String>>();
  currentLevelPrefixMappings=Collections.EMPTY_LIST;
  attributes=new AttributesImpl();
}","public ContentHandlerRecord(){
  prefixMappings=new ArrayList<List<String>>();
  currentLevelPrefixMappings=null;
  attributes=new AttributesImpl();
}"
65926,"@BeforeClass public static void setUp() throws WSDLException {
  builder.setProjectName(PROC8_TEST);
  builder.setTargetNamespace(PROC8_NAMESPACE);
  PLSQLProcedureOperationModel p1Model=new PLSQLProcedureOperationModel();
  p1Model.setName(PROC8_TEST);
  p1Model.setReturnType(""String_Node_Str"");
  p1Model.setOverload(2);
  p1Model.setSchemaPattern(""String_Node_Str"");
  p1Model.setCatalogPattern(PACKAGE_NAME);
  p1Model.setProcedurePattern(PROC8);
  builder.getOperations().add(p1Model);
  serviceSetup(ENDPOINT_ADDRESS,new OverloadedPLSQLStoredProcedureSimpleArgsTestSuite());
}","@BeforeClass public static void setUp() throws WSDLException {
  builder.setProjectName(PROC8_TEST);
  builder.setTargetNamespace(PROC8_NAMESPACE);
  PLSQLProcedureOperationModel p1Model=new PLSQLProcedureOperationModel();
  p1Model.setName(PROC8_TEST);
  p1Model.setReturnType(""String_Node_Str"");
  p1Model.setOverload(2);
  p1Model.setCatalogPattern(PACKAGE_NAME);
  p1Model.setProcedurePattern(PROC8);
  builder.getOperations().add(p1Model);
  serviceSetup(ENDPOINT_ADDRESS,new OverloadedPLSQLStoredProcedureSimpleArgsTestSuite());
}"
65927,"@BeforeClass public static void setUp() throws WSDLException {
  builder.setProjectName(PROC7_TEST);
  builder.setTargetNamespace(PROC7_NAMESPACE);
  PLSQLProcedureOperationModel p1Model=new PLSQLProcedureOperationModel();
  p1Model.setName(PROC7_TEST);
  p1Model.setReturnType(""String_Node_Str"");
  p1Model.setOverload(2);
  p1Model.setSchemaPattern(""String_Node_Str"");
  p1Model.setCatalogPattern(PACKAGE_NAME);
  p1Model.setProcedurePattern(PROC7);
  builder.getOperations().add(p1Model);
  serviceSetup(ENDPOINT_ADDRESS,new OverloadedPLSQLStoredProcedureTestSuite());
}","@BeforeClass public static void setUp() throws WSDLException {
  builder.setProjectName(PROC7_TEST);
  builder.setTargetNamespace(PROC7_NAMESPACE);
  PLSQLProcedureOperationModel p1Model=new PLSQLProcedureOperationModel();
  p1Model.setName(PROC7_TEST);
  p1Model.setReturnType(""String_Node_Str"");
  p1Model.setOverload(2);
  p1Model.setCatalogPattern(PACKAGE_NAME);
  p1Model.setProcedurePattern(PROC7);
  builder.getOperations().add(p1Model);
  serviceSetup(ENDPOINT_ADDRESS,new OverloadedPLSQLStoredProcedureTestSuite());
}"
65928,"public void testValidateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",707);
  em.setProperty(""String_Node_Str"",707);
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family707);
    assertNotNull(""String_Node_Str"" + family707 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 3);
    assertNull(""String_Node_Str"" + family007 + ""String_Node_Str"",em.find(MafiaFamily.class,family007));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family007Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family007Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family007Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List soldiers=em.createQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 5);
    beginTransaction(em);
    Query query=em.createNamedQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    query.setParameter(""String_Node_Str"",family007Mafiosos.get(0));
    query.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testValidateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family707);
    assertNotNull(""String_Node_Str"" + family707 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 3);
    assertNull(""String_Node_Str"" + family007 + ""String_Node_Str"",em.find(MafiaFamily.class,family007));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family007Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family007Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family007Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List soldiers=em.createQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 5);
    beginTransaction(em);
    Query query=em.createNamedQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    query.setParameter(""String_Node_Str"",family007Mafiosos.get(0));
    query.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65929,"public void testCreateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",007);
  em.setProperty(""String_Node_Str"",007);
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(987654321.03);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Female);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Female);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Male);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Female);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Male);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Female);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Female);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Female);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Male);
    Soldier soldier6=new Soldier();
    soldier6.setFirstName(""String_Node_Str"");
    soldier6.setLastName(""String_Node_Str"");
    soldier6.setGender(Mafioso.Gender.Male);
    Soldier soldier7=new Soldier();
    soldier7.setFirstName(""String_Node_Str"");
    soldier7.setLastName(""String_Node_Str"");
    soldier7.setGender(Mafioso.Gender.Male);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier7);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    capo2.addSoldier(soldier6);
    capo2.addSoldier(soldier7);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    family.addMafioso(soldier6);
    family.addMafioso(soldier7);
    em.persist(family);
    family007=family.getId();
    family007Mafiosos.add(boss.getId());
    family007Mafiosos.add(underboss.getId());
    family007Mafiosos.add(capo1.getId());
    family007Mafiosos.add(capo2.getId());
    family007Mafiosos.add(soldier1.getId());
    family007Mafiosos.add(soldier2.getId());
    family007Mafiosos.add(soldier3.getId());
    family007Mafiosos.add(soldier4.getId());
    family007Mafiosos.add(soldier5.getId());
    family007Mafiosos.add(soldier6.getId());
    family007Mafiosos.add(soldier7.getId());
    family007Contracts.add(contract1.getId());
    family007Contracts.add(contract2.getId());
    family007Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testCreateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(987654321.03);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Female);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Female);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Male);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Female);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Male);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Female);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Female);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Female);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Male);
    Soldier soldier6=new Soldier();
    soldier6.setFirstName(""String_Node_Str"");
    soldier6.setLastName(""String_Node_Str"");
    soldier6.setGender(Mafioso.Gender.Male);
    Soldier soldier7=new Soldier();
    soldier7.setFirstName(""String_Node_Str"");
    soldier7.setLastName(""String_Node_Str"");
    soldier7.setGender(Mafioso.Gender.Male);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier7);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    capo2.addSoldier(soldier6);
    capo2.addSoldier(soldier7);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    family.addMafioso(soldier6);
    family.addMafioso(soldier7);
    em.persist(family);
    family007=family.getId();
    family007Mafiosos.add(boss.getId());
    family007Mafiosos.add(underboss.getId());
    family007Mafiosos.add(capo1.getId());
    family007Mafiosos.add(capo2.getId());
    family007Mafiosos.add(soldier1.getId());
    family007Mafiosos.add(soldier2.getId());
    family007Mafiosos.add(soldier3.getId());
    family007Mafiosos.add(soldier4.getId());
    family007Mafiosos.add(soldier5.getId());
    family007Mafiosos.add(soldier6.getId());
    family007Mafiosos.add(soldier7.getId());
    family007Contracts.add(contract1.getId());
    family007Contracts.add(contract2.getId());
    family007Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65930,"public void testCreateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",707);
  em.setProperty(""String_Node_Str"",707);
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(10000000.00);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Male);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Male);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Female);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Male);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Female);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Male);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Male);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Male);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Female);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier5);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    em.persist(family);
    family707=family.getId();
    family707Mafiosos.add(boss.getId());
    family707Mafiosos.add(underboss.getId());
    family707Mafiosos.add(capo1.getId());
    family707Mafiosos.add(capo2.getId());
    family707Mafiosos.add(soldier1.getId());
    family707Mafiosos.add(soldier2.getId());
    family707Mafiosos.add(soldier3.getId());
    family707Mafiosos.add(soldier4.getId());
    family707Mafiosos.add(soldier5.getId());
    family707Contracts.add(contract1.getId());
    family707Contracts.add(contract2.getId());
    family707Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testCreateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(10000000.00);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Male);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Male);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Female);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Male);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Female);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Male);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Male);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Male);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Female);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier5);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    em.persist(family);
    family707=family.getId();
    family707Mafiosos.add(boss.getId());
    family707Mafiosos.add(underboss.getId());
    family707Mafiosos.add(capo1.getId());
    family707Mafiosos.add(capo2.getId());
    family707Mafiosos.add(soldier1.getId());
    family707Mafiosos.add(soldier2.getId());
    family707Mafiosos.add(soldier3.getId());
    family707Mafiosos.add(soldier4.getId());
    family707Mafiosos.add(soldier5.getId());
    family707Contracts.add(contract1.getId());
    family707Contracts.add(contract2.getId());
    family707Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65931,"public void testValidateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",007);
  em.setProperty(""String_Node_Str"",007);
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family007);
    assertNotNull(""String_Node_Str"" + family007 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 5);
    assertNull(""String_Node_Str"" + family707 + ""String_Node_Str"",em.find(MafiaFamily.class,family707));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family707Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family707Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family707Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List families=em.createNamedQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
    Boss boss=em.find(Boss.class,family007Mafiosos.get(0));
    assertFalse(""String_Node_Str"",boss.getFirstName().equals(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testValidateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family007);
    assertNotNull(""String_Node_Str"" + family007 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 5);
    assertNull(""String_Node_Str"" + family707 + ""String_Node_Str"",em.find(MafiaFamily.class,family707));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family707Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family707Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family707Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List families=em.createNamedQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
    Boss boss=em.find(Boss.class,family007Mafiosos.get(0));
    assertFalse(""String_Node_Str"",boss.getFirstName().equals(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65932,"public void testValidateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",707);
  em.setProperty(""String_Node_Str"",707);
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family707);
    assertNotNull(""String_Node_Str"" + family707 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 3);
    assertNull(""String_Node_Str"" + family007 + ""String_Node_Str"",em.find(MafiaFamily.class,family007));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family007Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family007Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family007Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List soldiers=em.createQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 5);
    beginTransaction(em);
    Query query=em.createNamedQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    query.setParameter(""String_Node_Str"",family007Mafiosos.get(0));
    query.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testValidateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family707);
    assertNotNull(""String_Node_Str"" + family707 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 3);
    assertNull(""String_Node_Str"" + family007 + ""String_Node_Str"",em.find(MafiaFamily.class,family007));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family007Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family007Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family007Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List soldiers=em.createQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + soldiers.size() + ""String_Node_Str"",soldiers.size() == 5);
    beginTransaction(em);
    Query query=em.createNamedQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    query.setParameter(""String_Node_Str"",family007Mafiosos.get(0));
    query.executeUpdate();
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65933,"public void testCreateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",007);
  em.setProperty(""String_Node_Str"",007);
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(987654321.03);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Female);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Female);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Male);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Female);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Male);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Female);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Female);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Female);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Male);
    Soldier soldier6=new Soldier();
    soldier6.setFirstName(""String_Node_Str"");
    soldier6.setLastName(""String_Node_Str"");
    soldier6.setGender(Mafioso.Gender.Male);
    Soldier soldier7=new Soldier();
    soldier7.setFirstName(""String_Node_Str"");
    soldier7.setLastName(""String_Node_Str"");
    soldier7.setGender(Mafioso.Gender.Male);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier7);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    capo2.addSoldier(soldier6);
    capo2.addSoldier(soldier7);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    family.addMafioso(soldier6);
    family.addMafioso(soldier7);
    em.persist(family);
    family007=family.getId();
    family007Mafiosos.add(boss.getId());
    family007Mafiosos.add(underboss.getId());
    family007Mafiosos.add(capo1.getId());
    family007Mafiosos.add(capo2.getId());
    family007Mafiosos.add(soldier1.getId());
    family007Mafiosos.add(soldier2.getId());
    family007Mafiosos.add(soldier3.getId());
    family007Mafiosos.add(soldier4.getId());
    family007Mafiosos.add(soldier5.getId());
    family007Mafiosos.add(soldier6.getId());
    family007Mafiosos.add(soldier7.getId());
    family007Contracts.add(contract1.getId());
    family007Contracts.add(contract2.getId());
    family007Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testCreateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(987654321.03);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Female);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Female);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Male);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Female);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Male);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Female);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Female);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Female);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Male);
    Soldier soldier6=new Soldier();
    soldier6.setFirstName(""String_Node_Str"");
    soldier6.setLastName(""String_Node_Str"");
    soldier6.setGender(Mafioso.Gender.Male);
    Soldier soldier7=new Soldier();
    soldier7.setFirstName(""String_Node_Str"");
    soldier7.setLastName(""String_Node_Str"");
    soldier7.setGender(Mafioso.Gender.Male);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier7);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    capo2.addSoldier(soldier6);
    capo2.addSoldier(soldier7);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    family.addMafioso(soldier6);
    family.addMafioso(soldier7);
    em.persist(family);
    family007=family.getId();
    family007Mafiosos.add(boss.getId());
    family007Mafiosos.add(underboss.getId());
    family007Mafiosos.add(capo1.getId());
    family007Mafiosos.add(capo2.getId());
    family007Mafiosos.add(soldier1.getId());
    family007Mafiosos.add(soldier2.getId());
    family007Mafiosos.add(soldier3.getId());
    family007Mafiosos.add(soldier4.getId());
    family007Mafiosos.add(soldier5.getId());
    family007Mafiosos.add(soldier6.getId());
    family007Mafiosos.add(soldier7.getId());
    family007Contracts.add(contract1.getId());
    family007Contracts.add(contract2.getId());
    family007Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65934,"public void testCreateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",707);
  em.setProperty(""String_Node_Str"",707);
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(10000000.00);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Male);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Male);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Female);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Male);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Female);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Male);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Male);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Male);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Female);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier5);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    em.persist(family);
    family707=family.getId();
    family707Mafiosos.add(boss.getId());
    family707Mafiosos.add(underboss.getId());
    family707Mafiosos.add(capo1.getId());
    family707Mafiosos.add(capo2.getId());
    family707Mafiosos.add(soldier1.getId());
    family707Mafiosos.add(soldier2.getId());
    family707Mafiosos.add(soldier3.getId());
    family707Mafiosos.add(soldier4.getId());
    family707Mafiosos.add(soldier5.getId());
    family707Contracts.add(contract1.getId());
    family707Contracts.add(contract2.getId());
    family707Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testCreateMafiaFamily707(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    beginTransaction(em);
    MafiaFamily family=new MafiaFamily();
    family.setName(""String_Node_Str"");
    family.setRevenue(10000000.00);
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    family.addTag(""String_Node_Str"");
    Boss boss=new Boss();
    boss.setFirstName(""String_Node_Str"");
    boss.setLastName(""String_Node_Str"");
    boss.setGender(Mafioso.Gender.Male);
    Underboss underboss=new Underboss();
    underboss.setFirstName(""String_Node_Str"");
    underboss.setLastName(""String_Node_Str"");
    underboss.setGender(Mafioso.Gender.Male);
    Capo capo1=new Capo();
    capo1.setFirstName(""String_Node_Str"");
    capo1.setLastName(""String_Node_Str"");
    capo1.setGender(Mafioso.Gender.Female);
    Capo capo2=new Capo();
    capo2.setFirstName(""String_Node_Str"");
    capo2.setLastName(""String_Node_Str"");
    capo2.setGender(Mafioso.Gender.Male);
    Soldier soldier1=new Soldier();
    soldier1.setFirstName(""String_Node_Str"");
    soldier1.setLastName(""String_Node_Str"");
    soldier1.setGender(Mafioso.Gender.Female);
    Soldier soldier2=new Soldier();
    soldier2.setFirstName(""String_Node_Str"");
    soldier2.setLastName(""String_Node_Str"");
    soldier2.setGender(Mafioso.Gender.Male);
    Soldier soldier3=new Soldier();
    soldier3.setFirstName(""String_Node_Str"");
    soldier3.setLastName(""String_Node_Str"");
    soldier3.setGender(Mafioso.Gender.Male);
    Soldier soldier4=new Soldier();
    soldier4.setFirstName(""String_Node_Str"");
    soldier4.setLastName(""String_Node_Str"");
    soldier4.setGender(Mafioso.Gender.Male);
    Soldier soldier5=new Soldier();
    soldier5.setFirstName(""String_Node_Str"");
    soldier5.setLastName(""String_Node_Str"");
    soldier5.setGender(Mafioso.Gender.Female);
    Contract contract1=new Contract();
    contract1.setDescription(""String_Node_Str"");
    Contract contract2=new Contract();
    contract2.setDescription(""String_Node_Str"");
    Contract contract3=new Contract();
    contract3.setDescription(""String_Node_Str"");
    contract1.addSoldier(soldier1);
    contract1.addSoldier(soldier5);
    contract2.addSoldier(soldier1);
    contract2.addSoldier(soldier3);
    contract2.addSoldier(soldier5);
    contract3.addSoldier(soldier2);
    contract3.addSoldier(soldier3);
    contract3.addSoldier(soldier4);
    contract3.addSoldier(soldier5);
    boss.setUnderboss(underboss);
    capo1.setUnderboss(underboss);
    capo2.setUnderboss(underboss);
    capo1.addSoldier(soldier1);
    capo1.addSoldier(soldier2);
    capo2.addSoldier(soldier3);
    capo2.addSoldier(soldier4);
    capo2.addSoldier(soldier5);
    underboss.addCapo(capo1);
    underboss.addCapo(capo2);
    family.addMafioso(boss);
    family.addMafioso(underboss);
    family.addMafioso(capo1);
    family.addMafioso(capo2);
    family.addMafioso(soldier1);
    family.addMafioso(soldier2);
    family.addMafioso(soldier3);
    family.addMafioso(soldier4);
    family.addMafioso(soldier5);
    em.persist(family);
    family707=family.getId();
    family707Mafiosos.add(boss.getId());
    family707Mafiosos.add(underboss.getId());
    family707Mafiosos.add(capo1.getId());
    family707Mafiosos.add(capo2.getId());
    family707Mafiosos.add(soldier1.getId());
    family707Mafiosos.add(soldier2.getId());
    family707Mafiosos.add(soldier3.getId());
    family707Mafiosos.add(soldier4.getId());
    family707Mafiosos.add(soldier5.getId());
    family707Contracts.add(contract1.getId());
    family707Contracts.add(contract2.getId());
    family707Contracts.add(contract3.getId());
    commitTransaction(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65935,"public void testValidateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",007);
  em.setProperty(""String_Node_Str"",007);
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family007);
    assertNotNull(""String_Node_Str"" + family007 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 5);
    assertNull(""String_Node_Str"" + family707 + ""String_Node_Str"",em.find(MafiaFamily.class,family707));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family707Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family707Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family707Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List families=em.createNamedQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
    Boss boss=em.find(Boss.class,family007Mafiosos.get(0));
    assertFalse(""String_Node_Str"",boss.getFirstName().equals(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}","public void testValidateMafiaFamily007(){
  EntityManager em=createEntityManager(MULTI_TENANT_PU);
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  em.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    clearCache(MULTI_TENANT_PU);
    em.clear();
    MafiaFamily family=em.find(MafiaFamily.class,family007);
    assertNotNull(""String_Node_Str"" + family007 + ""String_Node_Str"",family);
    assertTrue(""String_Node_Str"" + family.getTags().size() + ""String_Node_Str"",family.getTags().size() == 5);
    assertNull(""String_Node_Str"" + family707 + ""String_Node_Str"",em.find(MafiaFamily.class,family707));
    assertNull(""String_Node_Str"" + family123 + ""String_Node_Str"",em.find(MafiaFamily.class,family123));
    assertFalse(""String_Node_Str"",family.getMafiosos().isEmpty());
    for (    Integer id : family707Mafiosos) {
      assertNull(""String_Node_Str"",em.find(Mafioso.class,id));
    }
    Boss otherBoss=em.find(Boss.class,family707Mafiosos.get(0));
    assertNull(""String_Node_Str"",otherBoss);
    for (    Integer id : family707Contracts) {
      assertNull(""String_Node_Str"",em.find(Contract.class,id));
    }
    List families=em.createNamedQuery(""String_Node_Str"").getResultList();
    assertTrue(""String_Node_Str"" + families.size() + ""String_Node_Str"",families.size() == 1);
    Boss boss=em.find(Boss.class,family007Mafiosos.get(0));
    assertFalse(""String_Node_Str"",boss.getFirstName().equals(""String_Node_Str""));
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    throw e;
  }
 finally {
    closeEntityManager(em);
  }
}"
65936,"/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        node.setNodeValue((String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING));
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}","/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(XMLField xmlField,Node parent,Object value,AbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          node.setNodeValue((String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING));
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(XMLConstants.SCHEMA_INSTANCE_URL,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}"
65937,"public void testDefaultNamespaceOverride() throws Exception {
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    JAXBContext ctx=JAXBContextFactory.createContext(new Class[]{Employee.class},null);
    StringWriter writer=new StringWriter();
    XMLStreamWriter streamWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);
    streamWriter.writeStartElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    streamWriter.writeDefaultNamespace(""String_Node_Str"");
    Marshaller marshaller=ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,new Boolean(true));
    marshaller.marshal(new JAXBElement(new QName(""String_Node_Str""),Employee.class,new Employee()),streamWriter);
    streamWriter.writeEndElement();
    streamWriter.writeEndDocument();
    streamWriter.flush();
    String xml=""String_Node_Str"";
    assertTrue(""String_Node_Str"" + writer.toString(),writer.toString().equals(xml));
  }
}","public void testDefaultNamespaceOverride() throws Exception {
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    JAXBContext ctx=JAXBContextFactory.createContext(new Class[]{Employee.class},null);
    StringWriter writer=new StringWriter();
    XMLStreamWriter streamWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);
    streamWriter.writeStartElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    streamWriter.writeDefaultNamespace(""String_Node_Str"");
    Marshaller marshaller=ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,new Boolean(true));
    marshaller.marshal(new JAXBElement(new QName(""String_Node_Str""),Employee.class,new Employee()),streamWriter);
    streamWriter.writeEndElement();
    streamWriter.writeEndDocument();
    streamWriter.flush();
    String xml=""String_Node_Str"";
    String xml2=""String_Node_Str"";
    String writerString=writer.toString();
    assertTrue(""String_Node_Str"" + writerString,writerString.equals(xml) || writerString.equals(xml2));
  }
}"
65938,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,(String)value);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters((String)value);
    }
  }
 else {
    QName schemaType;
    Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(value,xmlField,session);
    if (fieldValue == null) {
      return false;
    }
    schemaType=getSchemaType(xmlField,fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (stringValue != null) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      if (nextFragment.isAttribute()) {
        marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
        marshalRecord.closeStartElement();
      }
 else {
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
        marshalRecord.characters(stringValue);
      }
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65939,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65940,"private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"")) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}","private XPathFragment openGroupingElementsForQName(QName fieldValue,MarshalRecord marshalRecord){
  XPathFragment xPathFragment=null;
  ArrayList<XPathNode> groupingElements=marshalRecord.getGroupingElements();
  NamespaceResolver namespaceResolver=marshalRecord.getNamespaceResolver();
  if ((fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"")) && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
    for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
      XPathNode xPathNode=groupingElements.get(x);
      xPathFragment=xPathNode.getXPathFragment();
      if (x == (groupingElements.size() - 1) && namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
        String prefix=namespaceResolver.generatePrefix();
        String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
        XPathFragment newFragment=new XPathFragment(xPath);
        newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.openStartElement(newFragment,namespaceResolver);
        marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        xPathFragment=newFragment;
      }
 else {
        marshalRecord.openStartElement(xPathFragment,namespaceResolver);
        marshalRecord.predicateAttribute(xPathFragment,namespaceResolver);
        marshalRecord.closeStartElement();
      }
    }
    marshalRecord.setGroupingElement(null);
  }
  return xPathFragment;
}"
65941,"private int hasIndex(String xpathString){
  int index;
  int startindex=xpathString.lastIndexOf('[');
  if ((startindex != -1) && (xpathString.lastIndexOf(']') != -1)) {
    setContainsIndex(true);
    StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
    String element=st.nextToken();
    String indexString=st.nextToken();
    try {
      index=Integer.valueOf(indexString).intValue();
    }
 catch (    NumberFormatException e) {
      setShouldExecuteSelectNodes(true);
      index=-1;
    }
    shortName=element;
  }
 else {
    index=-1;
  }
  return index;
}","private int hasIndex(String xpathString){
  int index=-1;
  int startindex=xpathString.lastIndexOf('[');
  if ((startindex != -1) && (xpathString.lastIndexOf(']') != -1)) {
    StringTokenizer st=new StringTokenizer(xpathString,""String_Node_Str"");
    String element=st.nextToken();
    while (st.hasMoreTokens()) {
      String indexString=st.nextToken();
      try {
        index=Integer.valueOf(indexString).intValue();
        setContainsIndex(true);
      }
 catch (      NumberFormatException e) {
        StringTokenizer st2=new StringTokenizer(indexString,""String_Node_Str"");
        if (2 == st2.countTokens()) {
          XPathFragment xPathFragment=new XPathFragment(st2.nextToken());
          String value=st2.nextToken();
          value=value.substring(1,value.length() - 1);
          predicate=new XPathPredicate(xPathFragment,value);
        }
 else {
          setContainsIndex(true);
        }
        setShouldExecuteSelectNodes(true);
      }
    }
    shortName=element;
  }
 else {
    index=-1;
  }
  return index;
}"
65942,"public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    return ((nameIsText && xPathFragment.nameIsText()) || (localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (this.indexValue == xPathFragment.getIndexValue())&& (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}","public boolean equals(Object object){
  try {
    if (null == object) {
      return false;
    }
 else     if (this == object) {
      return true;
    }
    XPathFragment xPathFragment=(XPathFragment)object;
    if (null == predicate && null != xPathFragment.getPredicate()) {
      return false;
    }
    if (null != predicate && !predicate.equals(xPathFragment.getPredicate())) {
      return false;
    }
    return ((nameIsText && xPathFragment.nameIsText()) || (localName == xPathFragment.getLocalName()) || ((localName != null) && localName.equals(xPathFragment.getLocalName()))) && ((namespaceURI == xPathFragment.getNamespaceURI()) || ((namespaceURI != null) && namespaceURI.equals(xPathFragment.getNamespaceURI()))) && (this.indexValue == xPathFragment.getIndexValue())&& (nameIsText == xPathFragment.nameIsText());
  }
 catch (  ClassCastException e) {
    return false;
  }
}"
65943,"public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject){
  if (null == anXPathFragment) {
    return false;
  }
  marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  boolean hasValue=false;
  if (null != attributeChildren) {
    for (int x=0, size=attributeChildren.size(); x < size; x++) {
      XPathNode attributeNode=attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}","public boolean startElement(MarshalRecord marshalRecord,XPathFragment anXPathFragment,Object object,AbstractSession session,NamespaceResolver namespaceResolver,TreeObjectBuilder compositeObjectBuilder,Object compositeObject){
  if (null == anXPathFragment) {
    return false;
  }
  marshalRecord.openStartElement(anXPathFragment,namespaceResolver);
  boolean hasValue=false;
  marshalRecord.predicateAttribute(anXPathFragment,namespaceResolver);
  if (null != attributeChildren) {
    for (int x=0, size=attributeChildren.size(); x < size; x++) {
      XPathNode attributeNode=attributeChildren.get(x);
      hasValue=attributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
  }
  if (anyAttributeNode != null) {
    hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,null,ObjectMarshalContext.getInstance(),null) || hasValue;
  }
  if (null != compositeObjectBuilder) {
    hasValue=compositeObjectBuilder.marshalAttributes(marshalRecord,compositeObject,session) || hasValue;
  }
  marshalRecord.closeStartElement();
  return hasValue;
}"
65944,"private void initializeXPathFragment(XPathFragment xPathFragment){
  String localName=xPathFragment.getLocalName();
  if (localName != null && !localName.equals(XMLConstants.EMPTY_STRING)) {
    if (null == xPathFragment.getNamespaceURI()) {
      if (xPathFragment.hasNamespace()) {
        if (null == namespaceResolver) {
          throw XMLMarshalException.namespaceNotFound(xPathFragment.getShortName());
        }
 else {
          String uri=namespaceResolver.resolveNamespacePrefix(xPathFragment.getPrefix());
          if (null == uri && null != xPathFragment.getPrefix()) {
            throw XMLMarshalException.namespaceNotFound(xPathFragment.getShortName());
          }
          xPathFragment.setNamespaceURI(uri);
        }
      }
 else       if (!xPathFragment.isAttribute() && null != namespaceResolver) {
        xPathFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
      }
    }
  }
  XPathFragment nextXPathFragment=xPathFragment.getNextFragment();
  if (null != nextXPathFragment) {
    initializeXPathFragment(nextXPathFragment);
  }
}","private void initializeXPathFragment(XPathFragment xPathFragment){
  XPathPredicate predicate=xPathFragment.getPredicate();
  if (null != predicate) {
    initializeXPathFragment(predicate.getXPathFragment());
  }
  String localName=xPathFragment.getLocalName();
  if (localName != null && !localName.equals(XMLConstants.EMPTY_STRING)) {
    if (null == xPathFragment.getNamespaceURI()) {
      if (xPathFragment.hasNamespace()) {
        if (null == namespaceResolver) {
          throw XMLMarshalException.namespaceNotFound(xPathFragment.getShortName());
        }
 else {
          String uri=namespaceResolver.resolveNamespacePrefix(xPathFragment.getPrefix());
          if (null == uri && null != xPathFragment.getPrefix()) {
            throw XMLMarshalException.namespaceNotFound(xPathFragment.getShortName());
          }
          xPathFragment.setNamespaceURI(uri);
        }
      }
 else       if (!xPathFragment.isAttribute() && null != namespaceResolver) {
        xPathFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
      }
    }
  }
  XPathFragment nextXPathFragment=xPathFragment.getNextFragment();
  if (null != nextXPathFragment) {
    initializeXPathFragment(nextXPathFragment);
  }
}"
65945,"/** 
 * INTERNAL: Trigger that the grouping elements should be written.  This is normally done when something like a mapping has a non-null value that is marshalled.
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI for the namespace prefix held by the XPathFragment (if required).
 */
public XPathFragment openStartGroupingElements(NamespaceResolver namespaceResolver){
  if (null == groupingElements) {
    return null;
  }
  XPathFragment xPathFragment=null;
  for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
    XPathNode xPathNode=groupingElements.get(x);
    xPathFragment=xPathNode.getXPathFragment();
    openStartElement(xPathFragment,namespaceResolver);
    if (x != (groupingElementsSize - 1)) {
      closeStartElement();
    }
  }
  groupingElements=null;
  return xPathFragment;
}","/** 
 * INTERNAL: Trigger that the grouping elements should be written.  This is normally done when something like a mapping has a non-null value that is marshalled.
 * @param namespaceResolver The NamespaceResolver can be used to resolve thenamespace URI for the namespace prefix held by the XPathFragment (if required).
 */
public XPathFragment openStartGroupingElements(NamespaceResolver namespaceResolver){
  if (null == groupingElements) {
    return null;
  }
  XPathFragment xPathFragment=null;
  for (int x=0, groupingElementsSize=groupingElements.size(); x < groupingElementsSize; x++) {
    XPathNode xPathNode=groupingElements.get(x);
    xPathFragment=xPathNode.getXPathFragment();
    openStartElement(xPathFragment,namespaceResolver);
    predicateAttribute(xPathFragment,namespaceResolver);
    if (x != (groupingElementsSize - 1)) {
      closeStartElement();
    }
  }
  groupingElements=null;
  return xPathFragment;
}"
65946,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (getCurrentObject() == null) {
    initializeRecord(atts);
  }
  if ((null != xPathNode.getXPathFragment() && xPathNode.getXPathFragment().nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
      if (xPathNode.getParent() != null) {
        xPathNode=xPathNode.getParent();
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      isXsiNil=atts.getIndex(XMLConstants.SCHEMA_INSTANCE_URL,XMLConstants.SCHEMA_NIL_ATTRIBUTE) >= 0;
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        if (!nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      for (int i=0, size=atts.getLength(); i < size; i++) {
        String attNamespace=atts.getURI(i);
        String attLocalName=atts.getLocalName(i);
        String value=atts.getValue(i);
        NodeValue attributeNodeValue=null;
        if ((attLocalName == null) || (attLocalName.length() == 0)) {
          String qname=atts.getQName(i);
          if ((qname != null) && (qname.length() > 0)) {
            int idx=qname.indexOf(XMLConstants.COLON);
            if (idx > 0) {
              attLocalName=qname.substring(idx + 1,qname.length());
              String attPrefix=qname.substring(0,idx);
              if (attPrefix.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
 else {
              attLocalName=qname;
              if (attLocalName.equals(XMLConstants.XMLNS)) {
                attNamespace=XMLConstants.XMLNS_URL;
              }
            }
          }
        }
        if (this.selfRecords != null) {
          for (int j=0; j < selfRecords.size(); j++) {
            UnmarshalRecord nestedRecord=selfRecords.get(j);
            if (nestedRecord != null) {
              attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
              if (attributeNodeValue != null) {
                attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
              }
            }
          }
        }
        if (attributeNodeValue == null) {
          attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
          if (attributeNodeValue != null) {
            attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
          }
 else {
            if (xPathNode.getAnyAttributeNodeValue() != null) {
              xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
            }
          }
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
65947,"protected XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment positionalFragment=new XPathFragment();
      positionalFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      positionalFragment.setLocalName(xPathFragment.getLocalName());
      positionalFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(positionalFragment);
      if (null == resultNode) {
        resultNode=xPathNode.getAnyNode();
      }
    }
    return resultNode;
  }
  return null;
}","protected XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName,Attributes attributes){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment predicateFragment=new XPathFragment();
      predicateFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      predicateFragment.setLocalName(xPathFragment.getLocalName());
      predicateFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
      if (null == resultNode) {
        predicateFragment.setIndexValue(-1);
        for (int x=0, length=attributes.getLength(); x < length; x++) {
          XPathFragment conditionFragment=new XPathFragment();
          conditionFragment.setLocalName(attributes.getLocalName(x));
          conditionFragment.setNamespaceURI(attributes.getURI(x));
          conditionFragment.setAttribute(true);
          XPathPredicate condition=new XPathPredicate(conditionFragment,attributes.getValue(x));
          predicateFragment.setPredicate(condition);
          resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
          if (null != resultNode) {
            break;
          }
        }
        if (null == resultNode) {
          resultNode=xPathNode.getAnyNode();
        }
      }
    }
    return resultNode;
  }
  return null;
}"
65948,"/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  return (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)|| helper.isAnnotationPresent(elem,XmlPath.class)|| helper.isAnnotationPresent(elem,XmlPaths.class)|| helper.isAnnotationPresent(elem,XmlInverseReference.class)|| helper.isAnnotationPresent(elem,XmlReadOnly.class)|| helper.isAnnotationPresent(elem,XmlWriteOnly.class)|| helper.isAnnotationPresent(elem,XmlCDATA.class)|| helper.isAnnotationPresent(elem,XmlAccessMethods.class)|| helper.isAnnotationPresent(elem,XmlNullPolicy.class));
}","/** 
 * Returns true if the field or method passed in is annotated with JAXB annotations.
 */
private boolean hasJAXBAnnotations(JavaHasAnnotations elem){
  return (helper.isAnnotationPresent(elem,XmlElement.class) || helper.isAnnotationPresent(elem,XmlAttribute.class) || helper.isAnnotationPresent(elem,XmlAnyElement.class)|| helper.isAnnotationPresent(elem,XmlAnyAttribute.class)|| helper.isAnnotationPresent(elem,XmlValue.class)|| helper.isAnnotationPresent(elem,XmlElements.class)|| helper.isAnnotationPresent(elem,XmlElementRef.class)|| helper.isAnnotationPresent(elem,XmlElementRefs.class)|| helper.isAnnotationPresent(elem,XmlID.class)|| helper.isAnnotationPresent(elem,XmlSchemaType.class)|| helper.isAnnotationPresent(elem,XmlElementWrapper.class)|| helper.isAnnotationPresent(elem,XmlList.class)|| helper.isAnnotationPresent(elem,XmlMimeType.class)|| helper.isAnnotationPresent(elem,XmlIDREF.class)|| helper.isAnnotationPresent(elem,XmlPath.class)|| helper.isAnnotationPresent(elem,XmlPaths.class)|| helper.isAnnotationPresent(elem,XmlInverseReference.class)|| helper.isAnnotationPresent(elem,XmlReadOnly.class)|| helper.isAnnotationPresent(elem,XmlWriteOnly.class)|| helper.isAnnotationPresent(elem,XmlCDATA.class)|| helper.isAnnotationPresent(elem,XmlAccessMethods.class)|| helper.isAnnotationPresent(elem,XmlNullPolicy.class)|| helper.isAnnotationPresent(elem,XmlJavaTypeAdapter.class));
}"
65949,"public JavaClass getClass(String className){
  JavaClass cachedClass=this.javaModelClasses.get(className);
  if (cachedClass != null) {
    return cachedClass;
  }
  String componentName=className;
  boolean isArray=className.contains(""String_Node_Str"");
  if (isArray) {
    componentName=className.replace(""String_Node_Str"",""String_Node_Str"");
  }
  boolean isPrimitive=XMLConversionManager.getPrimitiveClass(componentName) != null;
  try {
    JavaClass jc=new XJCJavaClassImpl(jCodeModel._class(componentName),jCodeModel,dynamicClassLoader,isArray,isPrimitive);
    this.javaModelClasses.put(className,jc);
    return jc;
  }
 catch (  JClassAlreadyExistsException ex) {
    JavaClass jc=new XJCJavaClassImpl(jCodeModel._getClass(componentName),jCodeModel,dynamicClassLoader,isArray,isPrimitive);
    this.javaModelClasses.put(className,jc);
    return jc;
  }
}","public JavaClass getClass(String className){
  JavaClass cachedClass=this.javaModelClasses.get(className);
  if (cachedClass != null) {
    return cachedClass;
  }
  String componentName=className;
  boolean isArray=className.contains(""String_Node_Str"");
  if (isArray) {
    componentName=className.replace(""String_Node_Str"",""String_Node_Str"");
  }
  boolean isTyped=className.contains(""String_Node_Str"");
  if (isTyped) {
    componentName=componentName.substring(0,className.indexOf('<'));
  }
  boolean isPrimitive=XMLConversionManager.getPrimitiveClass(componentName) != null;
  try {
    JavaClass jc=new XJCJavaClassImpl(jCodeModel._class(componentName),jCodeModel,dynamicClassLoader,isArray,isPrimitive);
    this.javaModelClasses.put(className,jc);
    return jc;
  }
 catch (  JClassAlreadyExistsException ex) {
    JavaClass jc=new XJCJavaClassImpl(jCodeModel._getClass(componentName),jCodeModel,dynamicClassLoader,isArray,isPrimitive);
    this.javaModelClasses.put(className,jc);
    return jc;
  }
}"
65950,"public void setType(JavaClass cls){
  if (cls == null) {
    return;
  }
  if (type != null && type == cls) {
    return;
  }
  String clsName=cls.getRawName();
  if (isCollectionType(cls)) {
    if (cls.hasActualTypeArguments()) {
      ArrayList typeArgs=(ArrayList)cls.getActualTypeArguments();
      genericType=(JavaClass)typeArgs.get(0);
    }
 else {
      genericType=helper.getJavaClass(Object.class);
    }
    type=cls;
  }
 else   if (cls.isArray() && !clsName.equals(""String_Node_Str"") && !clsName.equals(""String_Node_Str"")) {
    type=cls;
    genericType=cls.getComponentType();
  }
 else {
    type=cls;
    genericType=null;
  }
  boolean isNewTypeMap=helper.getJavaClass(java.util.Map.class).isAssignableFrom(type);
  setIsMap(isNewTypeMap);
  if (isMap()) {
    Object[] types=type.getActualTypeArguments().toArray();
    if (types.length >= 2) {
      keyType=(JavaClass)types[0];
      valueType=(JavaClass)types[1];
    }
 else {
      keyType=helper.getJavaClass(Object.class);
      valueType=helper.getJavaClass(Object.class);
    }
  }
}","public void setType(JavaClass cls){
  if (cls == null) {
    return;
  }
  if (type != null && type == cls) {
    return;
  }
  String clsName=cls.getRawName();
  if (isCollectionType(cls)) {
    if (cls.hasActualTypeArguments()) {
      ArrayList typeArgs=(ArrayList)cls.getActualTypeArguments();
      if (typeArgs.size() > 0) {
        genericType=(JavaClass)typeArgs.get(0);
      }
 else {
        genericType=helper.getJavaClass(Object.class);
      }
    }
 else {
      genericType=helper.getJavaClass(Object.class);
    }
    type=cls;
  }
 else   if (cls.isArray() && !clsName.equals(""String_Node_Str"") && !clsName.equals(""String_Node_Str"")) {
    type=cls;
    genericType=cls.getComponentType();
  }
 else {
    type=cls;
    genericType=null;
  }
  boolean isNewTypeMap=helper.getJavaClass(java.util.Map.class).isAssignableFrom(type);
  setIsMap(isNewTypeMap);
  if (isMap()) {
    Object[] types=type.getActualTypeArguments().toArray();
    if (types.length >= 2) {
      keyType=(JavaClass)types[0];
      valueType=(JavaClass)types[1];
    }
 else {
      keyType=helper.getJavaClass(Object.class);
      valueType=helper.getJavaClass(Object.class);
    }
  }
}"
65951,"private String decapitalize(String javaName){
  char[] name=javaName.toCharArray();
  int i=0;
  while (i < name.length && Character.isUpperCase(name[i])) {
    i++;
  }
  if (i > 0) {
    name[0]=Character.toLowerCase(name[0]);
    for (int j=1; j < i - 1; j++) {
      name[j]=Character.toLowerCase(name[j]);
    }
    return new String(name);
  }
 else {
    return javaName;
  }
}","private String decapitalize(String javaName){
  char[] name=javaName.toCharArray();
  int i=0;
  while (i < name.length && (Character.isUpperCase(name[i]) || !Character.isLetter(name[i]))) {
    i++;
  }
  if (i > 0) {
    name[0]=Character.toLowerCase(name[0]);
    for (int j=1; j < i - 1; j++) {
      name[j]=Character.toLowerCase(name[j]);
    }
    return new String(name);
  }
 else {
    return javaName;
  }
}"
65952,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + XMLConstants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(XMLConstants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + XMLConstants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + XMLConstants.COLON)) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),atts.getValue(x));
    }
 else {
      String value=atts.getValue(x);
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value == null ? XMLConstants.EMPTY_STRING : value);
      if (XMLConstants.SCHEMA_INSTANCE_URL.equals(attributeNamespaceURI) && XMLConstants.SCHEMA_TYPE_ATTRIBUTE.equals(atts.getLocalName(x))) {
        int colonIndex=value.indexOf(XMLConstants.COLON);
        if (colonIndex > -1) {
          String prefix=value.substring(0,colonIndex);
          String uri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          if (uri == null || uri.length() == 0) {
            String theUri=owningRecord.resolveNamespacePrefix(prefix);
            if (theUri != null && theUri.length() > 0) {
              element.setAttributeNS(XMLConstants.XMLNS_URL,XMLConstants.XMLNS + XMLConstants.COLON + prefix,theUri);
            }
          }
        }
      }
    }
  }
}"
65953,"/** 
 * If a Schema was set on the unmarshaller then wrap the ContentHandler in a ValidatorHandler. 
 */
private void setContentHandler(XMLReader xmlReader,ContentHandler contentHandler){
  Schema schema=saxParserFactory.getSchema();
  if (null == schema) {
    xmlReader.setContentHandler(contentHandler);
  }
 else {
    ValidatorHandler validatorHandler=schema.newValidatorHandler();
    validatorHandler.setContentHandler(contentHandler);
    xmlReader.setContentHandler(validatorHandler);
  }
}","/** 
 * If a Schema was set on the unmarshaller then wrap the ContentHandler in a ValidatorHandler.
 */
private void setContentHandler(XMLReader xmlReader,ContentHandler contentHandler){
  Schema schema=null;
  try {
    schema=saxParserFactory.getSchema();
  }
 catch (  UnsupportedOperationException e) {
  }
  if (null == schema) {
    xmlReader.setContentHandler(contentHandler);
  }
 else {
    ValidatorHandler validatorHandler=schema.newValidatorHandler();
    validatorHandler.setContentHandler(contentHandler);
    xmlReader.setContentHandler(validatorHandler);
  }
}"
65954,"/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return BigDecimal.ZERO;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigDecimal(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigDecimal(sourceObject);
}","/** 
 * Build a valid instance of BigDecimal from the given sourceObject
 * @param sourceObject    Valid instance of String, BigInteger, any Number
 */
protected BigDecimal convertObjectToBigDecimal(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return null;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigDecimal(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigDecimal(sourceObject);
}"
65955,"/** 
 * Build a valid instance of BigInteger from the provided sourceObject.
 * @param sourceObject    Valid instance of String, BigDecimal, or any Number
 */
protected BigInteger convertObjectToBigInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return BigInteger.ZERO;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigInteger(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigInteger(sourceObject);
}","/** 
 * Build a valid instance of BigInteger from the provided sourceObject.
 * @param sourceObject    Valid instance of String, BigDecimal, or any Number
 */
protected BigInteger convertObjectToBigInteger(Object sourceObject) throws ConversionException {
  if (sourceObject instanceof String) {
    String sourceString=(String)sourceObject;
    if (sourceString.length() == 0) {
      return null;
    }
 else     if (sourceString.charAt(0) == PLUS) {
      return super.convertObjectToBigInteger(sourceString.substring(1));
    }
  }
  return super.convertObjectToBigInteger(sourceObject);
}"
65956,"public void testConvertEmptyStringTo_BigDecimal(){
  BigDecimal test=(BigDecimal)xmlConversionManager.convertObject(XMLConstants.EMPTY_STRING,BigDecimal.class);
  assertEquals(BigDecimal.ZERO,test);
}","public void testConvertEmptyStringTo_BigDecimal(){
  BigDecimal test=(BigDecimal)xmlConversionManager.convertObject(XMLConstants.EMPTY_STRING,BigDecimal.class);
  assertNull(test);
}"
65957,"public void testConvertEmptyStringTo_BigInteger(){
  BigInteger test=(BigInteger)xmlConversionManager.convertObject(XMLConstants.EMPTY_STRING,BigInteger.class);
  assertEquals(BigInteger.ZERO,test);
}","public void testConvertEmptyStringTo_BigInteger(){
  BigInteger test=(BigInteger)xmlConversionManager.convertObject(XMLConstants.EMPTY_STRING,BigInteger.class);
  assertNull(test);
}"
65958,"protected void endElementProcessText(UnmarshalRecord unmarshalRecord,Converter converter,XPathFragment xPathFragment,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (!XMLConstants.EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
    setOrAddAttributeValue(unmarshalRecord,value,xPathFragment,collection);
  }
}","protected void endElementProcessText(UnmarshalRecord unmarshalRecord,Converter converter,XPathFragment xPathFragment,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (!XMLConstants.EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      if (qname.equals(XMLConstants.QNAME_QNAME)) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).buildQNameFromString((String)value,unmarshalRecord);
      }
 else {
        Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
        if (theClass != null) {
          value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
        }
      }
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
    setOrAddAttributeValue(unmarshalRecord,value,xPathFragment,collection);
  }
}"
65959,"/** 
 * INTERNAL:
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  if (getSchemaType() != null) {
    if (XMLConstants.QNAME_QNAME.equals(getSchemaType())) {
      return buildQNameFromString((String)value,record);
    }
 else {
      Class fieldType=getType();
      if (fieldType == null) {
        fieldType=getJavaClass(getSchemaType());
      }
      return xmlConversionManager.convertObject(value,fieldType,getSchemaType());
    }
  }
  return value;
}","/** 
 * INTERNAL:
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  if (getSchemaType() != null) {
    if (XMLConstants.QNAME_QNAME.equals(getSchemaType())) {
      return xmlConversionManager.buildQNameFromString((String)value,record);
    }
 else {
      Class fieldType=getType();
      if (fieldType == null) {
        fieldType=getJavaClass(getSchemaType());
      }
      return xmlConversionManager.convertObject(value,fieldType,getSchemaType());
    }
  }
  return value;
}"
65960,"/** 
 * INTERNAL:
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  Object convertedValue=value;
  for (int i=0; i < schemaTypes.size(); i++) {
    QName nextQName=(QName)schemaTypes.get(i);
    try {
      if (nextQName != null) {
        if (XMLConstants.QNAME_QNAME.equals(nextQName)) {
          buildQNameFromString((String)value,record);
          break;
        }
 else {
          Class javaClass=getJavaClass(nextQName);
          convertedValue=xmlConversionManager.convertObject(value,javaClass,nextQName);
          break;
        }
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        throw ce;
      }
    }
  }
  return convertedValue;
}","/** 
 * INTERNAL:
 */
public Object convertValueBasedOnSchemaType(Object value,XMLConversionManager xmlConversionManager,XMLRecord record){
  Object convertedValue=value;
  for (int i=0; i < schemaTypes.size(); i++) {
    QName nextQName=(QName)schemaTypes.get(i);
    try {
      if (nextQName != null) {
        if (XMLConstants.QNAME_QNAME.equals(nextQName)) {
          xmlConversionManager.buildQNameFromString((String)value,record);
          break;
        }
 else {
          Class javaClass=getJavaClass(nextQName);
          convertedValue=xmlConversionManager.convertObject(value,javaClass,nextQName);
          break;
        }
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        throw ce;
      }
    }
  }
  return convertedValue;
}"
65961,"protected void endElementProcessText(UnmarshalRecord unmarshalRecord,Converter converter,XPathFragment xPathFragment,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  if (converter != null) {
    if (converter instanceof XMLConverter) {
      value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    }
 else {
      value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
    }
  }
  unmarshalRecord.resetStringBuffer();
  if (!XMLConstants.EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    setOrAddAttributeValue(unmarshalRecord,value,xPathFragment,collection);
  }
}","protected void endElementProcessText(UnmarshalRecord unmarshalRecord,Converter converter,XPathFragment xPathFragment,Object collection){
  Object value=unmarshalRecord.getStringBuffer().toString();
  unmarshalRecord.resetStringBuffer();
  if (!XMLConstants.EMPTY_STRING.equals(value)) {
    QName qname=unmarshalRecord.getTypeQName();
    if (qname != null) {
      Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qname);
      if (theClass != null) {
        value=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(value,theClass,qname);
      }
    }
    if (converter != null) {
      if (converter instanceof XMLConverter) {
        value=((XMLConverter)converter).convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      }
 else {
        value=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession());
      }
    }
    setOrAddAttributeValue(unmarshalRecord,value,xPathFragment,collection);
  }
}"
65962,"public DatabaseMapping generateMappingForReferenceProperty(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  boolean isCollection=isCollectionType(property) || property.getType().isArray();
  if ((property.isMixedContent() && isCollection) || property.isAny()) {
    return generateAnyCollectionMapping(property,descriptor,namespaceInfo,true);
  }
  DatabaseMapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    ((XMLChoiceCollectionMapping)mapping).setReuseContainer(true);
    JavaClass collectionType=property.getType();
    if (collectionType.isArray() || areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
      collectionType=jotArrayList;
    }
 else     if (areEquals(collectionType,Set.class)) {
      collectionType=jotHashSet;
    }
    ((XMLChoiceCollectionMapping)mapping).useCollectionClassName(collectionType.getRawName());
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((XMLChoiceCollectionMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((XMLChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((XMLChoiceObjectMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((XMLChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      ((XMLMapping)mapping).setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    JavaClass pType=element.getJavaType();
    boolean isBinaryType=(areEquals(pType,AnnotationsProcessor.JAVAX_ACTIVATION_DATAHANDLER) || areEquals(pType,byte[].class) || areEquals(pType,Image.class)|| areEquals(pType,Source.class)|| areEquals(pType,AnnotationsProcessor.JAVAX_MAIL_INTERNET_MIMEMULTIPART));
    boolean isText=!isBinaryType && !(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME));
    String xPath=""String_Node_Str"";
    if (property.isSetXmlElementWrapper()) {
      XmlElementWrapper wrapper=property.getXmlElementWrapper();
      String namespace=wrapper.getNamespace();
      if (namespace.equals(""String_Node_Str"")) {
        if (namespaceInfo.isElementFormQualified()) {
          namespace=namespaceInfo.getNamespace();
        }
 else {
          namespace=""String_Node_Str"";
        }
      }
      if (namespace.equals(""String_Node_Str"")) {
        xPath+=(wrapper.getName() + ""String_Node_Str"");
      }
 else {
        String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver(),null);
        xPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
      }
    }
    XMLField xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(element.getJavaType().getRawName()) == XMLConstants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    DatabaseMapping nestedMapping;
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((XMLCompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        ((XMLCompositeDirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByEmptyNode(false);
      }
      if (element.isList() && nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        XMLListConverter listConverter=new XMLListConverter();
        listConverter.setObjectClassName(element.getJavaType().getQualifiedName());
        ((XMLCompositeDirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
      }
    }
 else {
      XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((XMLCompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=helper.getClassForJavaClass(element.getJavaType());
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
        Converter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
        Converter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  return mapping;
}","public DatabaseMapping generateMappingForReferenceProperty(Property property,XMLDescriptor descriptor,NamespaceInfo namespaceInfo){
  boolean isCollection=isCollectionType(property) || property.getType().isArray();
  if ((property.isMixedContent() && isCollection) || property.isAny()) {
    return generateAnyCollectionMapping(property,descriptor,namespaceInfo,true);
  }
  DatabaseMapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    ((XMLChoiceCollectionMapping)mapping).setReuseContainer(true);
    JavaClass collectionType=property.getType();
    if (collectionType.isArray() || areEquals(collectionType,Collection.class) || areEquals(collectionType,List.class)) {
      collectionType=jotArrayList;
    }
 else     if (areEquals(collectionType,Set.class)) {
      collectionType=jotHashSet;
    }
    ((XMLChoiceCollectionMapping)mapping).useCollectionClassName(collectionType.getRawName());
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((XMLChoiceCollectionMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((XMLChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((XMLChoiceObjectMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((XMLChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  if (property.isSetReadOnly()) {
    mapping.setIsReadOnly(property.isReadOnly());
  }
  mapping.setAttributeName(property.getPropertyName());
  if (property.isMethodProperty()) {
    if (property.getGetMethodName() == null) {
      String paramTypeAsString=property.getType().getName();
      mapping.setAttributeAccessor(new JAXBSetMethodAttributeAccessor(paramTypeAsString,helper.getClassLoader()));
      mapping.setIsReadOnly(true);
      mapping.setSetMethodName(property.getSetMethodName());
    }
 else     if (property.getSetMethodName() == null) {
      mapping.setGetMethodName(property.getGetMethodName());
      ((XMLMapping)mapping).setIsWriteOnly(true);
    }
 else {
      mapping.setSetMethodName(property.getSetMethodName());
      mapping.setGetMethodName(property.getGetMethodName());
    }
  }
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    JavaClass pType=element.getJavaType();
    boolean isBinaryType=(areEquals(pType,AnnotationsProcessor.JAVAX_ACTIVATION_DATAHANDLER) || areEquals(pType,byte[].class) || areEquals(pType,Image.class)|| areEquals(pType,Source.class)|| areEquals(pType,AnnotationsProcessor.JAVAX_MAIL_INTERNET_MIMEMULTIPART));
    boolean isText=!isBinaryType && !(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME));
    String xPath=""String_Node_Str"";
    if (property.isSetXmlElementWrapper()) {
      XmlElementWrapper wrapper=property.getXmlElementWrapper();
      String namespace=wrapper.getNamespace();
      if (namespace.equals(""String_Node_Str"")) {
        if (namespaceInfo.isElementFormQualified()) {
          namespace=namespaceInfo.getNamespace();
        }
 else {
          namespace=""String_Node_Str"";
        }
      }
      if (namespace.equals(""String_Node_Str"")) {
        xPath+=(wrapper.getName() + ""String_Node_Str"");
      }
 else {
        String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver(),null);
        xPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
      }
    }
    XMLField xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(element.getJavaType().getRawName()) == XMLConstants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
    if (areEquals(pType,Object.class)) {
      xmlField.setIsTypedTextField(true);
      xmlField.setSchemaType(XMLConstants.ANY_TYPE_QNAME);
    }
    DatabaseMapping nestedMapping;
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((XMLCompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        ((XMLCompositeDirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByEmptyNode(false);
      }
      if (element.isList() && nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        XMLListConverter listConverter=new XMLListConverter();
        listConverter.setObjectClassName(element.getJavaType().getQualifiedName());
        ((XMLCompositeDirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
      }
    }
 else {
      XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,element.getJavaTypeName());
      nestedMapping=(DatabaseMapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((XMLCompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      }
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=helper.getClassForJavaClass(element.getJavaType());
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
        Converter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
        Converter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
        converter.setNestedConverter(originalConverter);
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  return mapping;
}"
65963,"protected void reportElementEvents(Element elem) throws SAXException {
  this.currentNode=elem;
  IndexedAttributeList attributes=buildAttributeList(elem);
  String qname;
  String lname=elem.getLocalName();
  if (lname == null) {
    lname=elem.getNodeName();
    qname=lname;
  }
 else {
    qname=getQName(elem);
  }
  contentHandler.startElement(elem.getNamespaceURI(),lname,qname,attributes);
  handleChildNodes(elem.getChildNodes());
  contentHandler.endElement(elem.getNamespaceURI(),lname,qname);
  endPrefixMappings(elem);
}","protected void reportElementEvents(Element elem) throws SAXException {
  this.currentNode=elem;
  IndexedAttributeList attributes=buildAttributeList(elem);
  String qname;
  String lname=elem.getLocalName();
  if (lname == null) {
    lname=elem.getNodeName();
    qname=lname;
    handlePrefixedAttribute(elem);
  }
 else {
    qname=getQName(elem);
  }
  contentHandler.startElement(elem.getNamespaceURI(),lname,qname,attributes);
  handleChildNodes(elem.getChildNodes());
  contentHandler.endElement(elem.getNamespaceURI(),lname,qname);
  endPrefixMappings(elem);
}"
65964,"/** 
 * Create a JAXBElement instance.  If the object is an instance of XMLRoot, we will use its field values to create the JAXBElement.  If the object is not an XMLRoot instance, we will have to determine the 'name' value.  This will be done using the object's descriptor default root element - any prefix will be resolved, and a QName created.
 * @param obj
 * @return
 */
private JAXBElement buildJAXBElementFromObject(Object obj,Class declaredClass){
  if (obj instanceof XMLRoot) {
    JAXBElement jaxbElement=createJAXBElementFromXMLRoot(((XMLRoot)obj),declaredClass);
    jaxbElement.setNil(((XMLRoot)obj).isNil());
    return jaxbElement;
  }
  if (obj instanceof JAXBElement) {
    return (JAXBElement)obj;
  }
  org.eclipse.persistence.sessions.Session sess=xmlUnmarshaller.getXMLContext().getSession(obj);
  XMLDescriptor desc=(XMLDescriptor)sess.getClassDescriptor(obj);
  String rootName=desc.getDefaultRootElement();
  if (rootName == null) {
    return createJAXBElement(new QName(""String_Node_Str""),obj.getClass(),obj);
  }
  String rootNamespaceUri=null;
  int idx=rootName.indexOf(""String_Node_Str"");
  if (idx != -1) {
    rootNamespaceUri=desc.getNamespaceResolver().resolveNamespacePrefix(rootName.substring(0,idx));
    rootName=rootName.substring(idx + 1);
  }
  QName qname;
  if (rootNamespaceUri == null) {
    qname=new QName(rootName);
  }
 else {
    qname=new QName(rootNamespaceUri,rootName);
  }
  return createJAXBElement(qname,obj.getClass(),obj);
}","/** 
 * Create a JAXBElement instance.  If the object is an instance of XMLRoot, we will use its field values to create the JAXBElement.  If the object is not an XMLRoot instance, we will have to determine the 'name' value.  This will be done using the object's descriptor default root element - any prefix will be resolved, and a QName created.
 * @param obj
 * @return
 */
private JAXBElement buildJAXBElementFromObject(Object obj,Class declaredClass){
  if (obj instanceof XMLRoot) {
    JAXBElement jaxbElement=createJAXBElementFromXMLRoot(((XMLRoot)obj),declaredClass);
    if (((XMLRoot)obj).isNil()) {
      jaxbElement.setNil(((XMLRoot)obj).isNil());
      jaxbElement.setValue(null);
    }
    return jaxbElement;
  }
  if (obj instanceof JAXBElement) {
    return (JAXBElement)obj;
  }
  org.eclipse.persistence.sessions.Session sess=xmlUnmarshaller.getXMLContext().getSession(obj);
  XMLDescriptor desc=(XMLDescriptor)sess.getClassDescriptor(obj);
  String rootName=desc.getDefaultRootElement();
  if (rootName == null) {
    return createJAXBElement(new QName(""String_Node_Str""),obj.getClass(),obj);
  }
  String rootNamespaceUri=null;
  int idx=rootName.indexOf(""String_Node_Str"");
  if (idx != -1) {
    rootNamespaceUri=desc.getNamespaceResolver().resolveNamespacePrefix(rootName.substring(0,idx));
    rootName=rootName.substring(idx + 1);
  }
  QName qname;
  if (rootNamespaceUri == null) {
    qname=new QName(rootName);
  }
 else {
    qname=new QName(rootNamespaceUri,rootName);
  }
  return createJAXBElement(qname,obj.getClass(),obj);
}"
65965,"/** 
 * PUBLIC: Return a new XMLDescriptor.
 */
public XMLDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(2);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=NonSynchronizedVector.newInstance(2);
  this.multipleTableForeignKeys=new HashMap(5);
  this.queryKeys=new HashMap(5);
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.shouldAlwaysRefreshCache=false;
  this.shouldOnlyRefreshCacheIfNewerVersion=false;
  this.shouldDisableCacheHits=false;
  this.identityMapSize=100;
  this.remoteIdentityMapSize=-1;
  this.identityMapClass=AbstractIdentityMap.getDefaultIdentityMapClass();
  this.remoteIdentityMapClass=null;
  this.descriptorType=NORMAL;
  this.shouldAlwaysRefreshCacheOnRemote=false;
  this.shouldDisableCacheHitsOnRemote=false;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.cacheIsolation=null;
  this.objectBuilder=new TreeObjectBuilder(this);
  this.cascadeLockingPolicies=NonSynchronizedVector.newInstance();
  this.shouldOrderMappings=false;
  this.descriptorIsAggregate();
}","/** 
 * PUBLIC: Return a new XMLDescriptor.
 */
public XMLDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(1);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=EMPTY_VECTOR;
  this.multipleTableForeignKeys=Collections.EMPTY_MAP;
  this.queryKeys=Collections.EMPTY_MAP;
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.shouldAlwaysRefreshCache=false;
  this.shouldOnlyRefreshCacheIfNewerVersion=false;
  this.shouldDisableCacheHits=false;
  this.identityMapSize=100;
  this.remoteIdentityMapSize=-1;
  this.identityMapClass=AbstractIdentityMap.getDefaultIdentityMapClass();
  this.remoteIdentityMapClass=null;
  this.descriptorType=NORMAL;
  this.shouldAlwaysRefreshCacheOnRemote=false;
  this.shouldDisableCacheHitsOnRemote=false;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.cacheIsolation=null;
  this.idValidation=null;
  this.derivesIdMappings=Collections.EMPTY_MAP;
  this.additionalWritableMapKeyFields=Collections.EMPTY_LIST;
  this.objectBuilder=new TreeObjectBuilder(this);
  this.cascadeLockingPolicies=null;
  this.shouldOrderMappings=false;
  this.descriptorIsAggregate();
}"
65966,"private XMLRoot wrapObjectInXMLRoot(JAXBElement wrapperElement,Object value){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=value;
  xmlroot.setObject(objectValue);
  QName qname=wrapperElement.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(wrapperElement.getDeclaredType());
  if (value.getClass() == ClassConstants.ABYTE || value.getClass() == ClassConstants.APBYTE || value.getClass().getCanonicalName().equals(""String_Node_Str"")) {
    xmlroot.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
  }
  return xmlroot;
}","private XMLRoot wrapObjectInXMLRoot(JAXBElement wrapperElement,Object value){
  XMLRoot xmlroot=new XMLRoot();
  Object objectValue=value;
  xmlroot.setObject(objectValue);
  QName qname=wrapperElement.getName();
  xmlroot.setLocalName(qname.getLocalPart());
  xmlroot.setNamespaceURI(qname.getNamespaceURI());
  xmlroot.setDeclaredType(wrapperElement.getDeclaredType());
  if (value != null) {
    if (value.getClass() == ClassConstants.ABYTE || value.getClass() == ClassConstants.APBYTE || value.getClass().getCanonicalName().equals(""String_Node_Str"")) {
      xmlroot.setSchemaType(XMLConstants.BASE_64_BINARY_QNAME);
    }
  }
  return xmlroot;
}"
65967,"private void setupNamespaceInformation(String xpathString){
  int nsindex=xpathString.indexOf(XMLConstants.COLON);
  if (nsindex != -1) {
    hasNamespace=true;
    localName=xpathString.substring(nsindex + 1);
    prefix=xpathString.substring(0,nsindex);
  }
 else {
    localName=xpathString;
  }
}","private void setupNamespaceInformation(String xpathString){
  int nsindex=xpathString.indexOf(XMLConstants.COLON);
  if (nsindex != -1) {
    hasNamespace=true;
    localName=xpathString.substring(nsindex + 1).intern();
    prefix=xpathString.substring(0,nsindex).intern();
  }
 else {
    localName=xpathString.intern();
  }
}"
65968,"public void setXPath(String xpathString){
  xpath=xpathString;
  shortName=xpathString;
  if (xpathString.length() > 0) {
    if ((xpath.indexOf('[') != -1) && (xpath.indexOf(']') == -1)) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpath.indexOf(""String_Node_Str"") != -1) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpathString.charAt(0) == '@') {
      hasAttribute=true;
      shortName=xpathString.substring(1);
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
    if (xpathString.charAt(0) == '/') {
      setShouldExecuteSelectNodes(true);
      shortName=xpathString.substring(xpathString.lastIndexOf('/') + 1);
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
  }
  if (xpathString.equals(XMLConstants.TEXT)) {
    nameIsText=true;
    shortName=xpathString;
    return;
  }
 else {
    nameIsText=false;
  }
  if (xpathString.equals(SELF_XPATH)) {
    isSelfFragment=true;
    shortName=xpathString;
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
  try {
    shortNameBytes=shortName.getBytes(XMLConstants.DEFAULT_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
  }
}","public void setXPath(String xpathString){
  xpath=xpathString;
  shortName=xpathString;
  if (xpathString.length() > 0) {
    if ((xpath.indexOf('[') != -1) && (xpath.indexOf(']') == -1)) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpath.indexOf(""String_Node_Str"") != -1) {
      setShouldExecuteSelectNodes(true);
      return;
    }
    if (xpathString.charAt(0) == '@') {
      hasAttribute=true;
      shortName=xpathString.substring(1).intern();
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
    if (xpathString.charAt(0) == '/') {
      setShouldExecuteSelectNodes(true);
      shortName=xpathString.substring(xpathString.lastIndexOf('/') + 1).intern();
      indexValue=hasIndex(xpathString);
      setupNamespaceInformation(shortName);
      return;
    }
  }
  if (xpathString.equals(XMLConstants.TEXT)) {
    nameIsText=true;
    shortName=xpathString.intern();
    return;
  }
 else {
    nameIsText=false;
  }
  if (xpathString.equals(SELF_XPATH)) {
    isSelfFragment=true;
    shortName=xpathString.intern();
    return;
  }
  indexValue=hasIndex(xpathString);
  setupNamespaceInformation(shortName);
  try {
    shortNameBytes=shortName.getBytes(XMLConstants.DEFAULT_XML_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
  }
}"
65969,"public void setUri(String uri){
  this.uri=uri;
}","public void setUri(String uri){
  if (null != uri) {
    uri=uri.intern();
  }
  this.uri=uri;
}"
65970,"/** 
 * INTERNAL: Assign a string as a unique name of this Property among Properties that belongs to a DataObject.
 * @param name    a string representing unique name of a property of a DataObject.
 */
public void setName(String name){
  propertyName=name;
}","/** 
 * INTERNAL: Assign a string as a unique name of this Property among Properties that belongs to a DataObject.
 * @param name    a string representing unique name of a property of a DataObject.
 */
public void setName(String name){
  if (null != name) {
    name=name.intern();
  }
  propertyName=name;
}"
65971,"protected SDOType(String uri,String name,SDOTypeHelper sdoTypeHelper,XMLDescriptor xmlDescriptor){
  this(sdoTypeHelper,xmlDescriptor);
  this.qName=new QName(uri,name);
}","protected SDOType(String uri,String name,SDOTypeHelper sdoTypeHelper,XMLDescriptor xmlDescriptor){
  this(sdoTypeHelper,xmlDescriptor);
  if (null != uri) {
    uri=uri.intern();
  }
  if (null != name) {
    name=name.intern();
  }
  this.qName=new QName(uri,name);
}"
65972,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    QName schemaType=getSchemaType(xmlField,value,session);
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeDirectCollectionMapping.hasValueConverter()) {
    if (xmlCompositeDirectCollectionMapping.getValueConverter() instanceof XMLConverter) {
      value=((XMLConverter)xmlCompositeDirectCollectionMapping.getValueConverter()).convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
    }
 else {
      value=xmlCompositeDirectCollectionMapping.getValueConverter().convertObjectValueToDataValue(value,session);
    }
  }
  XMLField xmlField=(XMLField)xmlCompositeDirectCollectionMapping.getField();
  if (null != value) {
    QName schemaType=getSchemaType(xmlField,value,session);
    boolean isElementOpen=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      QName fieldValue=(QName)value;
      if (fieldValue.getNamespaceURI() == null || fieldValue.getNamespaceURI().equals(""String_Node_Str"") && marshalRecord.getNamespaceResolver().getDefaultNamespaceURI() != null) {
        if (namespaceResolver.getDefaultNamespaceURI().equals(xPathFragment.getNamespaceURI()) && xPathFragment.getPrefix() == null) {
          String prefix=namespaceResolver.generatePrefix();
          String xPath=prefix + ""String_Node_Str"" + xPathFragment.getShortName();
          XPathFragment newFragment=new XPathFragment(xPath);
          newFragment.setNamespaceURI(namespaceResolver.getDefaultNamespaceURI());
          newFragment.setNextFragment(xPathFragment.getNextFragment());
          marshalRecord.openStartElement(newFragment,namespaceResolver);
          isElementOpen=true;
          marshalRecord.attribute(XMLConstants.XMLNS_URL,prefix,XMLConstants.XMLNS + ""String_Node_Str"" + prefix,namespaceResolver.getDefaultNamespaceURI());
          xPathFragment=newFragment;
        }
      }
    }
    if (!isElementOpen) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,value,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    XPathFragment nextFragment=xPathFragment.getNextFragment();
    if (nextFragment.isAttribute()) {
      marshalRecord.attribute(nextFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartElement();
    }
 else {
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartElement();
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
 else {
    if (xmlCompositeDirectCollectionMapping.getNullPolicy().getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
      XPathFragment nextFragment=xPathFragment.getNextFragment();
      xmlCompositeDirectCollectionMapping.getNullPolicy().directMarshal(nextFragment,marshalRecord,object,session,namespaceResolver);
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
65973,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlDirectMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,AbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=getSchemaType((XMLField)xmlDirectMapping.getField(),fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (XMLConstants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    String stringValue=getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager(),marshalRecord);
    if (xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValue);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlDirectMapping.isCDATA()) {
        marshalRecord.cdata(stringValue);
      }
 else {
        marshalRecord.characters(stringValue);
      }
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}"
65974,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    parentNode.appendChild(text);
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (namespaceDeclarations != null) {
    Iterator namespacePrefixes=namespaceDeclarations.keySet().iterator();
    String prefix;
    String uri;
    while (namespacePrefixes.hasNext()) {
      prefix=(String)namespacePrefixes.next();
      uri=(String)namespaceDeclarations.get(prefix);
      addNamespaceDeclaration(element,prefix,uri);
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + ""String_Node_Str"")) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    String value=atts.getValue(x);
    element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    parentNode.appendChild(text);
    stringBuffer.reset();
  }
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (namespaceDeclarations != null) {
    Iterator namespacePrefixes=namespaceDeclarations.keySet().iterator();
    String prefix;
    String uri;
    while (namespacePrefixes.hasNext()) {
      prefix=(String)namespacePrefixes.next();
      uri=(String)namespaceDeclarations.get(prefix);
      boolean prefixEmpty=prefix.length() == 0;
      String elemNamespaceURI=element.getNamespaceURI();
      boolean elementNamespaceNull=elemNamespaceURI == null;
      boolean elementNamespaceEmpty=elemNamespaceURI != null && elemNamespaceURI.length() == 0;
      boolean isRootElement=element.getParentNode().getNodeType() == Node.DOCUMENT_NODE;
      if (prefixEmpty && isRootElement && (elementNamespaceEmpty || elementNamespaceNull)) {
      }
 else {
        addNamespaceDeclaration(element,prefix,uri);
      }
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(XMLConstants.XMLNS + ""String_Node_Str"")) {
      attributeNamespaceURI=XMLConstants.XMLNS_URL;
    }
    String value=atts.getValue(x);
    element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value);
  }
}"
65975,"/** 
 * Build an Element based on a given Property.
 * @param property the Property used to build the Element
 * @param isAll true if the Element will be added to an All structure
 * @param schema the schema currently being built
 * @param typeInfo the TypeInfo that owns the given Property
 * @return
 */
private Element buildElement(Property property,boolean isAll,Schema schema,TypeInfo typeInfo){
  Element element=new Element();
  element.setMinOccurs(property.isRequired() ? Occurs.ONE : Occurs.ZERO);
  if (property.shouldSetNillable()) {
    element.setNillable(true);
  }
  if (property.isSetDefaultValue()) {
    element.setDefaultValue(property.getDefaultValue());
  }
  if (property.getMimeType() != null) {
    element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,property.getMimeType());
  }
  QName elementName=property.getSchemaName();
  JavaClass javaType=property.getActualType();
  element.setName(elementName.getLocalPart());
  String typeName=getTypeNameForElement(property,schema,javaType,element);
  if (property.getGenericType() != null) {
    if (property.isXmlList()) {
      SimpleType localSimpleType=new SimpleType();
      org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
      list.setItemType(typeName);
      localSimpleType.setList(list);
      element.setSimpleType(localSimpleType);
    }
 else {
      element.setMaxOccurs(Occurs.UNBOUNDED);
      element.setType(typeName);
    }
  }
 else   if (property.isMap()) {
    addMapToSchema(property,element,schema,typeInfo);
  }
 else {
    element.setType(typeName);
  }
  return element;
}","/** 
 * Build an Element based on a given Property.
 * @param property the Property used to build the Element
 * @param isAll true if the Element will be added to an All structure
 * @param schema the schema currently being built
 * @param typeInfo the TypeInfo that owns the given Property
 * @return
 */
private Element buildElement(Property property,boolean isAll,Schema schema,TypeInfo typeInfo){
  Element element=new Element();
  element.setMinOccurs(property.isRequired() ? Occurs.ONE : Occurs.ZERO);
  if (property.shouldSetNillable()) {
    element.setNillable(true);
  }
  if (property.isSetDefaultValue()) {
    element.setDefaultValue(property.getDefaultValue());
  }
  if (property.getMimeType() != null) {
    element.getAttributesMap().put(XMLConstants.EXPECTED_CONTENT_TYPES_QNAME,property.getMimeType());
  }
  QName elementName=property.getSchemaName();
  String elementNamespace=elementName.getNamespaceURI();
  String lookupNamespace=schema.getTargetNamespace();
  if (lookupNamespace == null) {
    lookupNamespace=EMPTY_STRING;
  }
  NamespaceInfo namespaceInfo=getNamespaceInfoForNamespace(lookupNamespace);
  boolean isElementFormQualified=false;
  if (namespaceInfo != null) {
    isElementFormQualified=namespaceInfo.isElementFormQualified();
  }
  if ((isElementFormQualified && !elementNamespace.equals(lookupNamespace)) || (!isElementFormQualified && !elementNamespace.equals(EMPTY_STRING))) {
    schema=this.getSchemaForNamespace(elementNamespace);
  }
  JavaClass javaType=property.getActualType();
  element.setName(elementName.getLocalPart());
  String typeName=getTypeNameForElement(property,schema,javaType,element);
  if (property.getGenericType() != null) {
    if (property.isXmlList()) {
      SimpleType localSimpleType=new SimpleType();
      org.eclipse.persistence.internal.oxm.schema.model.List list=new org.eclipse.persistence.internal.oxm.schema.model.List();
      list.setItemType(typeName);
      localSimpleType.setList(list);
      element.setSimpleType(localSimpleType);
    }
 else {
      element.setMaxOccurs(Occurs.UNBOUNDED);
      element.setType(typeName);
    }
  }
 else   if (property.isMap()) {
    addMapToSchema(property,element,schema,typeInfo);
  }
 else {
    element.setType(typeName);
  }
  return element;
}"
65976,"/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SDOPropertyEqualityTests.class);
  return suite;
}","/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(SDOPropertyEqualityTests.class);
  suite.addTestSuite(XmlElementPropertyTestCases.class);
  return suite;
}"
65977,"public void setInstanceProperty(Property property,Object value){
  getPropertyValues().put(property,value);
  if (SDOConstants.SDOXML_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.SDOXML_DATATYPE.equals(property.getName()) && value instanceof Type) {
    setType((Type)value);
  }
  if (SDOConstants.ORACLE_SDO_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.XML_SCHEMA_TYPE_NAME.equals(property.getName()) && value instanceof Type) {
    Type schemaType=(Type)value;
    QName schemaTypeQName=new QName(schemaType.getURI(),schemaType.getName());
    setXsdType(schemaTypeQName);
  }
}","public void setInstanceProperty(Property property,Object value){
  if (SDOConstants.XMLELEMENT_PROPERTY.equals(property)) {
    isElement=(Boolean)value;
    if (null != propertyValues) {
      propertyValues.put(SDOConstants.XMLELEMENT_PROPERTY,isElement);
    }
  }
 else {
    if (null == propertyValues) {
      if (null != isElement) {
        propertyValues=new HashMap<Property,Object>(2);
        propertyValues.put(SDOConstants.XMLELEMENT_PROPERTY,isElement);
      }
 else {
        propertyValues=new HashMap<Property,Object>(1);
      }
    }
    propertyValues.put(property,value);
    if (SDOConstants.SDOXML_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.SDOXML_DATATYPE.equals(property.getName()) && value instanceof Type) {
      setType((Type)value);
    }
    if (SDOConstants.ORACLE_SDO_URL.equals(((SDOProperty)property).getUri()) && SDOConstants.XML_SCHEMA_TYPE_NAME.equals(property.getName()) && value instanceof Type) {
      Type schemaType=(Type)value;
      QName schemaTypeQName=new QName(schemaType.getURI(),schemaType.getName());
      setXsdType(schemaTypeQName);
    }
  }
}"
65978,"public Object get(Property property){
  return getPropertyValues().get(property);
}","public Object get(Property property){
  if (SDOConstants.XMLELEMENT_PROPERTY.equals(property)) {
    return isElement;
  }
  if (null == propertyValues) {
    return null;
  }
  return propertyValues.get(property);
}"
65979,"/** 
 * INTERNAL:
 */
public Map getPropertyValues(){
  if (propertyValues == null) {
    propertyValues=new HashMap();
  }
  return propertyValues;
}","/** 
 * INTERNAL:
 */
public Map getPropertyValues(){
  if (propertyValues == null) {
    propertyValues=new HashMap<Property,Object>(1);
    if (null != isElement) {
      propertyValues.put(SDOConstants.XMLELEMENT_PROPERTY,isElement);
    }
  }
  return propertyValues;
}"
65980,"/** 
 * Indicate if a given SDOProperty instance is equal to this instance. Equality is determined based on name, uri, and type.  In addition, checking will be done to ensure that both properties are to be serialized in the same manner, ie. both to XML element or both to  XML attribute.
 * @param obj Object to compare to this SDOProperty instance
 * @return true if obj is equal to this SDOProperty instance, false if not 
 */
public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  SDOProperty prop;
  try {
    prop=(SDOProperty)obj;
  }
 catch (  ClassCastException ccx) {
    return false;
  }
  if (prop.getType() == null) {
    if (this.getType() != null) {
      return false;
    }
  }
 else   if (this.getType() == null || !this.getType().equals(prop.getType())) {
    return false;
  }
  if (prop.getName() == null) {
    if (this.getName() != null) {
      return false;
    }
  }
 else   if (this.getName() == null || !this.getName().equals(prop.getName())) {
    return false;
  }
  if (prop.getUri() == null) {
    if (this.getUri() != null) {
      return false;
    }
  }
 else   if (this.getUri() == null || !this.getUri().equals(prop.getUri())) {
    return false;
  }
  XSDHelper helper=aHelperContext.getXSDHelper();
  if (helper.isAttribute(this)) {
    if (helper.isElement(prop)) {
      return false;
    }
  }
 else   if (helper.isAttribute(prop)) {
    return false;
  }
  return true;
}","/** 
 * Indicate if a given SDOProperty instance is equal to this instance. Equality is determined based on name, uri, and type.  In addition, checking will be done to ensure that both properties are to be serialized in the same manner, ie. both to XML element or both to  XML attribute.
 * @param obj Object to compare to this SDOProperty instance
 * @return true if obj is equal to this SDOProperty instance, false if not 
 */
public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  SDOProperty prop;
  try {
    prop=(SDOProperty)obj;
  }
 catch (  ClassCastException ccx) {
    return false;
  }
  if (prop.getType() == null) {
    if (this.getType() != null) {
      return false;
    }
  }
 else   if (this.getType() == null || !this.getType().equals(prop.getType())) {
    return false;
  }
  if (prop.getName() == null) {
    if (this.getName() != null) {
      return false;
    }
  }
 else   if (this.getName() == null || !this.getName().equals(prop.getName())) {
    return false;
  }
  if (prop.getUri() == null) {
    if (this.getUri() != null) {
      return false;
    }
  }
 else   if (this.getUri() == null || !this.getUri().equals(prop.getUri())) {
    return false;
  }
  Boolean propIsElement=prop.isElement();
  if (null == isElement) {
    if (null != propIsElement) {
      return false;
    }
  }
 else {
    if (!isElement.equals(propIsElement)) {
      return false;
    }
  }
  return true;
}"
65981,"/** 
 * INTERNAL: Remove the open content property (property) from all 3 data structures. Add the property to the unset map. We restore this OC property in undoChanges
 * @param property
 */
public void removeOpenContentProperty(Property property){
  if (isLogging()) {
    getChangeSummary().setUnsetOCProperty(this,property);
  }
  _getOpenContentProperties().remove(property);
  _getOpenContentPropertiesAttributes().remove(property);
  getInstanceProperties().remove(property);
  for (int i=0, size=((SDOProperty)property).getAliasNames().size(); i < size; i++) {
    _getOpenContentAliasNamesMap().remove(((SDOProperty)property).getAliasNames().get(i));
  }
}","/** 
 * INTERNAL: Remove the open content property (property) from all 3 data structures. Add the property to the unset map. We restore this OC property in undoChanges
 * @param property
 */
public void removeOpenContentProperty(Property property){
  if (isLogging()) {
    getChangeSummary().setUnsetOCProperty(this,property);
  }
  _getOpenContentProperties().remove(property);
  _getOpenContentPropertiesAttributes().remove(property);
  getInstanceProperties().remove(property);
  if (((SDOProperty)property).hasAliasNames()) {
    for (int i=0, size=((SDOProperty)property).getAliasNames().size(); i < size; i++) {
      _getOpenContentAliasNamesMap().remove(((SDOProperty)property).getAliasNames().get(i));
    }
  }
}"
65982,"/** 
 * INTERNAL: Add the open content property into all 3 data structures. Remove the property from the unset map.
 * @param property
 */
public void addOpenContentProperty(Property property){
  List theList=null;
  if (aHelperContext.getXSDHelper().isAttribute(property)) {
    theList=_getOpenContentPropertiesAttributes();
  }
 else {
    theList=_getOpenContentProperties();
  }
  if (!theList.contains(property)) {
    if (isLogging()) {
      getChangeSummary().removeUnsetOCProperty(this,property);
    }
    theList.add(property);
    getInstanceProperties().add(property);
    for (int i=0, size=((SDOProperty)property).getAliasNames().size(); i < size; i++) {
      _getOpenContentAliasNamesMap().put((String)((SDOProperty)property).getAliasNames().get(i),property);
    }
  }
}","/** 
 * INTERNAL: Add the open content property into all 3 data structures. Remove the property from the unset map.
 * @param property
 */
public void addOpenContentProperty(Property property){
  List theList=null;
  if (aHelperContext.getXSDHelper().isAttribute(property)) {
    theList=_getOpenContentPropertiesAttributes();
  }
 else {
    theList=_getOpenContentProperties();
  }
  if (!theList.contains(property)) {
    if (isLogging()) {
      getChangeSummary().removeUnsetOCProperty(this,property);
    }
    theList.add(property);
    getInstanceProperties().add(property);
    if (((SDOProperty)property).hasAliasNames()) {
      for (int i=0, size=((SDOProperty)property).getAliasNames().size(); i < size; i++) {
        _getOpenContentAliasNamesMap().put((String)((SDOProperty)property).getAliasNames().get(i),property);
      }
    }
  }
}"
65983,"/** 
 * INTERNAL:
 * @param property
 */
public void addDeclaredProperty(SDOProperty property,int index){
  if (!getDeclaredPropertiesMap().containsKey(property.getName())) {
    int currentSize=getDeclaredProperties().size();
    int allSize=getProperties().size();
    int insertPlace=allSize - currentSize + index;
    for (int i=0; i < getSubTypes().size(); i++) {
      SDOType nextSubType=(SDOType)getSubTypes().get(i);
      nextSubType.updateIndices(insertPlace,property);
    }
    getDeclaredProperties().add(index,property);
    getProperties().add(insertPlace,property);
    property.setContainingType(this);
    getDeclaredPropertiesMap().put(property.getName(),property);
    for (int j=0; j < property.getAliasNames().size(); j++) {
      getDeclaredPropertiesMap().put(property.getAliasNames().get(j),property);
    }
    if ((property.getType() != null) && (property.getType().isChangeSummaryType())) {
      changeSummaryProperty=property;
    }
  }
}","/** 
 * INTERNAL:
 * @param property
 */
public void addDeclaredProperty(SDOProperty property,int index){
  if (!getDeclaredPropertiesMap().containsKey(property.getName())) {
    int currentSize=getDeclaredProperties().size();
    int allSize=getProperties().size();
    int insertPlace=allSize - currentSize + index;
    for (int i=0; i < getSubTypes().size(); i++) {
      SDOType nextSubType=(SDOType)getSubTypes().get(i);
      nextSubType.updateIndices(insertPlace,property);
    }
    getDeclaredProperties().add(index,property);
    getProperties().add(insertPlace,property);
    property.setContainingType(this);
    getDeclaredPropertiesMap().put(property.getName(),property);
    if (property.hasAliasNames()) {
      for (int j=0; j < property.getAliasNames().size(); j++) {
        getDeclaredPropertiesMap().put(property.getAliasNames().get(j),property);
      }
    }
    if ((property.getType() != null) && (property.getType().isChangeSummaryType())) {
      changeSummaryProperty=property;
    }
  }
}"
65984,"private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  SDOProperty sdoProperty=(SDOProperty)property;
  if (sdoProperty.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if ((sdoProperty.getAliasNames() != null) && (sdoProperty.getAliasNames().size() > 0)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoProperty.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=sdoProperty.getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoProperty.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,sdoProperty.getName());
  }
  if ((element && !sdoProperty.isContainment() && !sdoProperty.getType().isDataType()) || (!element && !sdoProperty.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=sdoProperty.getType().getURI();
    String value=sdoProperty.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (sdoProperty.getOpposite() != null) {
    String value=sdoProperty.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)sdoProperty.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(sdoProperty.getType());
  }
  if (dataType != null && !shouldSuppressDataType(sdoProperty,dataType)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}","private void addSimpleComponentAnnotations(SimpleComponent sc,Property property,boolean element){
  SDOProperty sdoProperty=(SDOProperty)property;
  if (sdoProperty.isReadOnly()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_READONLY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,""String_Node_Str"");
  }
  if (sdoProperty.hasAliasNames()) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String aliasNamesString=buildAliasNameString(sdoProperty.getAliasNames());
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_ALIASNAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,aliasNamesString);
  }
  String xsdLocalName=sdoProperty.getXsdLocalName();
  if ((xsdLocalName != null) && !(xsdLocalName.equals(sdoProperty.getName()))) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_NAME,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,sdoProperty.getName());
  }
  if ((element && !sdoProperty.isContainment() && !sdoProperty.getType().isDataType()) || (!element && !sdoProperty.getType().isDataType())) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    String uri=sdoProperty.getType().getURI();
    String value=sdoProperty.getType().getName();
    if (uri != null) {
      String typePrefix=getPrefixForURI(uri);
      if (typePrefix != null) {
        value=typePrefix + ""String_Node_Str"" + value;
      }
    }
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_PROPERTYTYPE,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  if (sdoProperty.getOpposite() != null) {
    String value=sdoProperty.getOpposite().getName();
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_OPPOSITEPROPERTY,sdoXmlPrefix);
    sc.getAttributesMap().put(qname,value);
  }
  Property xmlDataTypeProperty=aHelperContext.getTypeHelper().getOpenContentProperty(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE);
  Type dataType=(Type)sdoProperty.get(xmlDataTypeProperty);
  if (dataType == null) {
    dataType=getAutomaticDataTypeForType(sdoProperty.getType());
  }
  if (dataType != null && !shouldSuppressDataType(sdoProperty,dataType)) {
    String sdoXmlPrefix=getPrefixForURI(SDOConstants.SDOXML_URL);
    QName qname=new QName(SDOConstants.SDOXML_URL,SDOConstants.SDOXML_DATATYPE,sdoXmlPrefix);
    String dataTypeString=dataType.getName();
    if (dataType.getURI() != null) {
      String dataTypePrefix=getPrefixForURI(dataType.getURI());
      if (dataTypePrefix != null) {
        dataTypeString=dataTypePrefix + ""String_Node_Str"" + dataTypeString;
      }
    }
    sc.getAttributesMap().put(qname,dataTypeString);
  }
  if (element) {
    String mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY);
    if (mimeType != null) {
      String prefix=getPrefixForURI(SDOConstants.MIMETYPE_URL);
      QName qname=new QName(SDOConstants.XML_MIME_TYPE_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_QNAME.getLocalPart(),prefix);
      sc.getAttributesMap().put(qname,mimeType);
    }
 else {
      mimeType=(String)sdoProperty.get(SDOConstants.MIME_TYPE_PROPERTY_PROPERTY);
      if (mimeType != null) {
        String prefix=getPrefixForURI(SDOConstants.ORACLE_SDO_URL);
        QName qname=new QName(SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getNamespaceURI(),SDOConstants.XML_MIME_TYPE_PROPERTY_QNAME.getLocalPart(),prefix);
        sc.getAttributesMap().put(qname,mimeType);
      }
    }
  }
}"
65985,"private SDOProperty processRef(GlobalRef globalRef){
  boolean isElement=globalRef.isElement();
  SDOProperty p=null;
  SDOProperty refProp=getExistingGlobalProperty(globalRef.getUri(),globalRef.getLocalName(),isElement);
  if (refProp != null && refProp.isFinalized()) {
    p=(SDOProperty)globalRef.getProperty();
    p.setValueProperty(refProp.isValueProperty());
    p.setNullable(refProp.isNullable());
    p.setName(refProp.getName());
    p.setXsdLocalName(refProp.getXsdLocalName());
    p.setNamespaceQualified(refProp.isNamespaceQualified());
    p.setAliasNames(refProp.getAliasNames());
    p.setDefault(refProp.getDefault());
    p.setSubstitutable(refProp.isSubstitutable());
    p.setSubstitutableElements(refProp.getSubstitutableElements());
    if (p.getType() == null) {
      p.setType(refProp.getType());
      if (refProp.getType().isDataType()) {
        p.setContainment(false);
      }
    }
    p.setOpposite(refProp.getOpposite());
    p.setReadOnly(refProp.isReadOnly());
    p.setXsd(refProp.isXsd());
    p.setAppInfoElements(refProp.getAppInfoElements());
    int index=((SDOProperty)globalRef.getProperty()).getIndexInDeclaredProperties();
    p.buildMapping(globalRef.getUri(),index);
    p.setFinalized(true);
  }
 else {
    if (isImportProcessor) {
      p=new SDOProperty(aHelperContext);
      p.setGlobal(true);
      p.setUri(globalRef.getUri());
      p.setName(globalRef.getLocalName());
      QName qname=new QName(globalRef.getUri(),globalRef.getLocalName());
      if (isElement) {
        p.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
        getGeneratedGlobalElements().put(qname,p);
      }
 else {
        getGeneratedGlobalAttributes().put(qname,p);
      }
    }
 else {
      throw SDOException.referencedPropertyNotFound(globalRef.getUri(),globalRef.getLocalName());
    }
  }
  return p;
}","private SDOProperty processRef(GlobalRef globalRef){
  boolean isElement=globalRef.isElement();
  SDOProperty p=null;
  SDOProperty refProp=getExistingGlobalProperty(globalRef.getUri(),globalRef.getLocalName(),isElement);
  if (refProp != null && refProp.isFinalized()) {
    p=(SDOProperty)globalRef.getProperty();
    p.setValueProperty(refProp.isValueProperty());
    p.setNullable(refProp.isNullable());
    p.setName(refProp.getName());
    p.setXsdLocalName(refProp.getXsdLocalName());
    p.setNamespaceQualified(refProp.isNamespaceQualified());
    if (refProp.hasAliasNames()) {
      p.setAliasNames(refProp.getAliasNames());
    }
    p.setDefault(refProp.getDefault());
    p.setSubstitutable(refProp.isSubstitutable());
    p.setSubstitutableElements(refProp.getSubstitutableElements());
    if (p.getType() == null) {
      p.setType(refProp.getType());
      if (refProp.getType().isDataType()) {
        p.setContainment(false);
      }
    }
    p.setOpposite(refProp.getOpposite());
    p.setReadOnly(refProp.isReadOnly());
    p.setXsd(refProp.isXsd());
    p.setAppInfoElements(refProp.getAppInfoElements());
    int index=((SDOProperty)globalRef.getProperty()).getIndexInDeclaredProperties();
    p.buildMapping(globalRef.getUri(),index);
    p.setFinalized(true);
  }
 else {
    if (isImportProcessor) {
      p=new SDOProperty(aHelperContext);
      p.setGlobal(true);
      p.setUri(globalRef.getUri());
      p.setName(globalRef.getLocalName());
      QName qname=new QName(globalRef.getUri(),globalRef.getLocalName());
      if (isElement) {
        p.setInstanceProperty(SDOConstants.XMLELEMENT_PROPERTY,Boolean.TRUE);
        getGeneratedGlobalElements().put(qname,p);
      }
 else {
        getGeneratedGlobalAttributes().put(qname,p);
      }
    }
 else {
      throw SDOException.referencedPropertyNotFound(globalRef.getUri(),globalRef.getLocalName());
    }
  }
  return p;
}"
65986,"public void initWrapperTypes(){
  SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanWrapperImpl.class);
  SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteWrapperImpl.class);
  SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME},new Class[]{SDOWrapperType.BytesWrapperImpl.class,SDOWrapperType.Bytes_hexBunaryWrapperImpl.class});
  SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterWrapperImpl.class);
  SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME,SDOWrapperType.DateWrapperImpl.class);
  SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME,SDOWrapperType.DateTimeWrapperImpl.class);
  SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME,SDOWrapperType.DayWrapperImpl.class);
  SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME,SDOWrapperType.DecimalWrapperImpl.class);
  SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleWrapperImpl.class);
  SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME,SDOWrapperType.DurationWrapperImpl.class);
  SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatWrapperImpl.class);
  SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntWrapperImpl.class);
  SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME,SDOWrapperType.IntegerWrapperImpl.class);
  SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongWrapperImpl.class);
  SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME,SDOWrapperType.MonthWrapperImpl.class);
  SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME,SDOWrapperType.MonthDayWrapperImpl.class);
  SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME,SDOWrapperType.ObjectWrapperImpl.class);
  SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortWrapperImpl.class);
  SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringWrapperImpl.class);
  SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringsWrapperImpl.class);
  SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME,SDOWrapperType.TimeWrapperImpl.class);
  SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,new QName[]{XMLConstants.ANY_URI_QNAME,XMLConstants.QNAME_QNAME},new Class[]{SDOWrapperType.URIWrapperImpl.class,SDOWrapperType.URI_QNameWrapperImpl.class});
  SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME,SDOWrapperType.YearWrapperImpl.class);
  SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME,SDOWrapperType.YearMonthWrapperImpl.class);
  SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME,SDOWrapperType.YearMonthDayWrapperImpl.class);
  SDO_BOOLEANOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEANOBJECT,SDOConstants.BOOLEANOBJECT,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanObjectWrapperImpl.class);
  SDO_BYTEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTEOBJECT,SDOConstants.BYTEOBJECT,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteObjectWrapperImpl.class);
  SDO_CHARACTEROBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTEROBJECT,SDOConstants.CHARACTEROBJECT,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterObjectWrapperImpl.class);
  SDO_DOUBLEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLEOBJECT,SDOConstants.DOUBLEOBJECT,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleObjectWrapperImpl.class);
  SDO_FLOATOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOATOBJECT,SDOConstants.FLOATOBJECT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatObjectWrapperImpl.class);
  SDO_INTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTOBJECT,SDOConstants.INTOBJECT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntObjectWrapperImpl.class);
  SDO_LONGOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONGOBJECT,SDOConstants.LONGOBJECT,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongObjectWrapperImpl.class);
  SDO_SHORTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORTOBJECT,SDOConstants.SHORTOBJECT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortObjectWrapperImpl.class);
}","public void initWrapperTypes(){
  if (null == SDO_BOOLEAN_WRAPPER) {
    SDO_BOOLEAN_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEAN,SDOConstants.BOOLEAN,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanWrapperImpl.class);
    SDO_BYTE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTE,SDOConstants.BYTE,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteWrapperImpl.class);
    SDO_BYTES_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTES,SDOConstants.BYTES,this,new QName[]{XMLConstants.BASE_64_BINARY_QNAME,XMLConstants.HEX_BINARY_QNAME},new Class[]{SDOWrapperType.BytesWrapperImpl.class,SDOWrapperType.Bytes_hexBunaryWrapperImpl.class});
    SDO_CHARACTER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTER,SDOConstants.CHARACTER,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterWrapperImpl.class);
    SDO_DATE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATE,SDOConstants.DATE,this,XMLConstants.DATE_QNAME,SDOWrapperType.DateWrapperImpl.class);
    SDO_DATETIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DATETIME,SDOConstants.DATETIME,this,XMLConstants.DATE_TIME_QNAME,SDOWrapperType.DateTimeWrapperImpl.class);
    SDO_DAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DAY,SDOConstants.DAY,this,XMLConstants.G_DAY_QNAME,SDOWrapperType.DayWrapperImpl.class);
    SDO_DECIMAL_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DECIMAL,SDOConstants.DECIMAL,this,XMLConstants.DECIMAL_QNAME,SDOWrapperType.DecimalWrapperImpl.class);
    SDO_DOUBLE_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLE,SDOConstants.DOUBLE,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleWrapperImpl.class);
    SDO_DURATION_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DURATION,SDOConstants.DURATION,this,XMLConstants.DURATION_QNAME,SDOWrapperType.DurationWrapperImpl.class);
    SDO_FLOAT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOAT,SDOConstants.FLOAT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatWrapperImpl.class);
    SDO_INT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INT,SDOConstants.INT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntWrapperImpl.class);
    SDO_INTEGER_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTEGER,SDOConstants.INTEGER,this,XMLConstants.INTEGER_QNAME,SDOWrapperType.IntegerWrapperImpl.class);
    SDO_LONG_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONG,SDOConstants.LONG,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongWrapperImpl.class);
    SDO_MONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTH,SDOConstants.MONTH,this,XMLConstants.G_MONTH_QNAME,SDOWrapperType.MonthWrapperImpl.class);
    SDO_MONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_MONTHDAY,SDOConstants.MONTHDAY,this,XMLConstants.G_MONTH_DAY_QNAME,SDOWrapperType.MonthDayWrapperImpl.class);
    SDO_OBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_OBJECT,SDOConstants.OBJECT,this,XMLConstants.ANY_SIMPLE_TYPE_QNAME,SDOWrapperType.ObjectWrapperImpl.class);
    SDO_SHORT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORT,SDOConstants.SHORT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortWrapperImpl.class);
    SDO_STRING_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRING,SDOConstants.STRING,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringWrapperImpl.class);
    SDO_STRINGS_WRAPPER=new SDOWrapperType(SDOConstants.SDO_STRINGS,SDOConstants.STRINGS,this,XMLConstants.STRING_QNAME,SDOWrapperType.StringsWrapperImpl.class);
    SDO_TIME_WRAPPER=new SDOWrapperType(SDOConstants.SDO_TIME,SDOConstants.TIME,this,XMLConstants.TIME_QNAME,SDOWrapperType.TimeWrapperImpl.class);
    SDO_URI_WRAPPER=new SDOWrapperType(SDOConstants.SDO_URI,SDOConstants.URI,this,new QName[]{XMLConstants.ANY_URI_QNAME,XMLConstants.QNAME_QNAME},new Class[]{SDOWrapperType.URIWrapperImpl.class,SDOWrapperType.URI_QNameWrapperImpl.class});
    SDO_YEAR_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEAR,SDOConstants.YEAR,this,XMLConstants.G_YEAR_QNAME,SDOWrapperType.YearWrapperImpl.class);
    SDO_YEARMONTH_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTH,SDOConstants.YEARMONTH,this,XMLConstants.G_YEAR_MONTH_QNAME,SDOWrapperType.YearMonthWrapperImpl.class);
    SDO_YEARMONTHDAY_WRAPPER=new SDOWrapperType(SDOConstants.SDO_YEARMONTHDAY,SDOConstants.YEARMONTHDAY,this,XMLConstants.DATE_QNAME,SDOWrapperType.YearMonthDayWrapperImpl.class);
    SDO_BOOLEANOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BOOLEANOBJECT,SDOConstants.BOOLEANOBJECT,this,XMLConstants.BOOLEAN_QNAME,SDOWrapperType.BooleanObjectWrapperImpl.class);
    SDO_BYTEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_BYTEOBJECT,SDOConstants.BYTEOBJECT,this,XMLConstants.BYTE_QNAME,SDOWrapperType.ByteObjectWrapperImpl.class);
    SDO_CHARACTEROBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_CHARACTEROBJECT,SDOConstants.CHARACTEROBJECT,this,XMLConstants.STRING_QNAME,SDOWrapperType.CharacterObjectWrapperImpl.class);
    SDO_DOUBLEOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_DOUBLEOBJECT,SDOConstants.DOUBLEOBJECT,this,XMLConstants.DOUBLE_QNAME,SDOWrapperType.DoubleObjectWrapperImpl.class);
    SDO_FLOATOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_FLOATOBJECT,SDOConstants.FLOATOBJECT,this,XMLConstants.FLOAT_QNAME,SDOWrapperType.FloatObjectWrapperImpl.class);
    SDO_INTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_INTOBJECT,SDOConstants.INTOBJECT,this,XMLConstants.INT_QNAME,SDOWrapperType.IntObjectWrapperImpl.class);
    SDO_LONGOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_LONGOBJECT,SDOConstants.LONGOBJECT,this,XMLConstants.LONG_QNAME,SDOWrapperType.LongObjectWrapperImpl.class);
    SDO_SHORTOBJECT_WRAPPER=new SDOWrapperType(SDOConstants.SDO_SHORTOBJECT,SDOConstants.SHORTOBJECT,this,XMLConstants.SHORT_QNAME,SDOWrapperType.ShortObjectWrapperImpl.class);
  }
}"
65987,"/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}"
65988,"private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}","private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}"
65989,"private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}","private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (XMLConstants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
 else   if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}"
65990,"/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}","/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (XMLConstants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (XMLConstants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    String xmlFormat=xgc.toXMLFormat();
    if (trimGMonth() && xmlFormat.length() == 6) {
      xmlFormat=xmlFormat.substring(0,4);
    }
    return xmlFormat;
  }
  if (XMLConstants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (XMLConstants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (XMLConstants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}"
65991,"/** 
 * Return an XMLGregorianCalander created with a given date string
 * @param dateString
 * @return
 */
public XMLGregorianCalendar convertStringToXMLGregorianCalendar(String sourceString){
  XMLGregorianCalendar calToReturn=null;
  try {
    calToReturn=getDatatypeFactory().newXMLGregorianCalendar(sourceString);
  }
 catch (  IllegalArgumentException e1) {
    try {
      calToReturn=getDatatypeFactory().newXMLGregorianCalendar(sourceString + ""String_Node_Str"");
    }
 catch (    IllegalArgumentException e2) {
      throw e1;
    }
  }
  return calToReturn;
}","/** 
 * Return an XMLGregorianCalander created with a given date string
 * @param dateString
 * @return
 */
public XMLGregorianCalendar convertStringToXMLGregorianCalendar(String sourceString){
  XMLGregorianCalendar calToReturn=null;
  try {
    calToReturn=getDatatypeFactory().newXMLGregorianCalendar(sourceString);
  }
 catch (  IllegalArgumentException e1) {
    try {
      int length=sourceString.length();
      String retryString=null;
      if (length >= 6 && (sourceString.charAt(4) == '-') && (sourceString.charAt(5) == '-')) {
        retryString=new StringBuilder(sourceString.substring(0,4)).append(length > 6 ? sourceString.substring(6) : ""String_Node_Str"").toString();
      }
 else       if (length >= 4) {
        retryString=new StringBuilder(sourceString.substring(0,4)).append(""String_Node_Str"").append(length > 4 ? sourceString.substring(4) : ""String_Node_Str"").toString();
      }
      if (retryString != null) {
        calToReturn=getDatatypeFactory().newXMLGregorianCalendar(retryString);
      }
 else {
        throw e1;
      }
    }
 catch (    IllegalArgumentException e2) {
      throw e1;
    }
  }
  return calToReturn;
}"
65992,"public XMLConversionManager getXmlConversionManager(){
  return (XMLConversionManager)getXmlContext().getSession(0).getDatasourceLogin().getDatasourcePlatform().getConversionManager();
}","public XMLConversionManager getXmlConversionManager(){
  XMLConversionManager xcm=(XMLConversionManager)getXmlContext().getSession(0).getDatasourceLogin().getDatasourcePlatform().getConversionManager();
  xcm.setTrimGMonth(true);
  return xcm;
}"
65993,"protected java.sql.Date convertObjectToSQLDate(Object sourceObject,QName schemaTypeQName){
  if (sourceObject instanceof String) {
    Date date=convertStringToDate((String)sourceObject,schemaTypeQName);
    return new java.sql.Date((date.getTime() / 1000) * 1000);
  }
  return super.convertObjectToDate(sourceObject);
}","protected java.sql.Date convertObjectToSQLDate(Object sourceObject,QName schemaTypeQName){
  if (sourceObject instanceof String) {
    Date date=convertStringToDate((String)sourceObject,schemaTypeQName);
    return new java.sql.Date((date.getTime() / 1000) * 1000);
  }
  return convertObjectToDate(sourceObject);
}"
65994,"/** 
 * This is the preferred (and only) constructor.
 * @param name
 */
public MultipleMappingPerFieldTestCases(String name){
  super(name);
}","/** 
 * This is the preferred (and only) constructor.
 * @param name
 */
public MultipleMappingPerFieldTestCases(String name){
  super(name);
  calendar=new GregorianCalendar(YEAR,MONTH,DAY);
  calendar.clear(Calendar.ZONE_OFFSET);
}"
65995,"/** 
 * Create the control Object.
 */
private CustomQuoteRequest getControlObject(){
  CustomQuoteRequest ctrlObj=new CustomQuoteRequest();
  ctrlObj.requestId=""String_Node_Str"";
  ctrlObj.currencyPairCode=""String_Node_Str"";
  ctrlObj.date=CALENDAR;
  return ctrlObj;
}","/** 
 * Create the control Object.
 */
private CustomQuoteRequest getControlObject(){
  CustomQuoteRequest ctrlObj=new CustomQuoteRequest();
  ctrlObj.requestId=""String_Node_Str"";
  ctrlObj.currencyPairCode=""String_Node_Str"";
  ctrlObj.date=calendar;
  return ctrlObj;
}"
65996,"private String stringFromCalendar(Calendar sourceCalendar){
  if (!(sourceCalendar.isSet(Calendar.HOUR) || sourceCalendar.isSet(Calendar.MINUTE) || sourceCalendar.isSet(Calendar.SECOND)|| sourceCalendar.isSet(Calendar.MILLISECOND))) {
    return stringFromCalendar(sourceCalendar,XMLConstants.DATE_QNAME);
  }
 else   if (!(sourceCalendar.isSet(Calendar.YEAR) || sourceCalendar.isSet(Calendar.MONTH) || sourceCalendar.isSet(Calendar.DATE))) {
    return stringFromCalendar(sourceCalendar,XMLConstants.TIME_QNAME);
  }
 else {
    return stringFromDate(sourceCalendar.getTime());
  }
}","private String stringFromCalendar(Calendar sourceCalendar){
  if (!(sourceCalendar.isSet(Calendar.HOUR) || sourceCalendar.isSet(Calendar.MINUTE) || sourceCalendar.isSet(Calendar.SECOND)|| sourceCalendar.isSet(Calendar.MILLISECOND))) {
    return stringFromCalendar(sourceCalendar,XMLConstants.DATE_QNAME);
  }
 else   if (!(sourceCalendar.isSet(Calendar.YEAR) || sourceCalendar.isSet(Calendar.MONTH) || sourceCalendar.isSet(Calendar.DATE))) {
    return stringFromCalendar(sourceCalendar,XMLConstants.TIME_QNAME);
  }
 else {
    return stringFromCalendar(sourceCalendar,XMLConstants.DATE_TIME_QNAME);
  }
}"
65997,"private Calendar toCalendar(XMLGregorianCalendar xgc){
  TimeZone tz=null;
  if (xgc.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
    tz=getTimeZone();
  }
 else {
    tz=xgc.getTimeZone(xgc.getTimezone());
  }
  Calendar cal=Calendar.getInstance(tz,Locale.getDefault());
  cal.clear();
  BigInteger year=xgc.getEonAndYear();
  if (year != null) {
    cal.set(Calendar.ERA,year.signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD);
    cal.set(Calendar.YEAR,year.abs().intValue());
  }
  if (xgc.getDay() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.DAY_OF_MONTH,xgc.getDay());
  if (xgc.getMonth() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.MONTH,xgc.getMonth() - 1);
  if (xgc.getHour() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.HOUR_OF_DAY,xgc.getHour());
  if (xgc.getMinute() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.MINUTE,xgc.getMinute());
  if (xgc.getSecond() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.SECOND,xgc.getSecond());
  if (xgc.getFractionalSecond() != null)   cal.set(Calendar.MILLISECOND,xgc.getMillisecond());
  return cal;
}","private Calendar toCalendar(XMLGregorianCalendar xgc){
  TimeZone tz=null;
  if (xgc.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
    tz=getTimeZone();
  }
 else {
    tz=xgc.getTimeZone(xgc.getTimezone());
  }
  Calendar cal=Calendar.getInstance(tz,Locale.getDefault());
  cal.clear();
  if (xgc.getTimezone() != DatatypeConstants.FIELD_UNDEFINED) {
    cal.set(Calendar.ZONE_OFFSET,xgc.getTimezone() * 60000);
  }
  BigInteger year=xgc.getEonAndYear();
  if (year != null) {
    cal.set(Calendar.ERA,year.signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD);
    cal.set(Calendar.YEAR,year.abs().intValue());
  }
  if (xgc.getDay() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.DAY_OF_MONTH,xgc.getDay());
  if (xgc.getMonth() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.MONTH,xgc.getMonth() - 1);
  if (xgc.getHour() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.HOUR_OF_DAY,xgc.getHour());
  if (xgc.getMinute() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.MINUTE,xgc.getMinute());
  if (xgc.getSecond() != DatatypeConstants.FIELD_UNDEFINED)   cal.set(Calendar.SECOND,xgc.getSecond());
  if (xgc.getFractionalSecond() != null)   cal.set(Calendar.MILLISECOND,xgc.getMillisecond());
  return cal;
}"
65998,"public void testCalendarToString_default_dateTime_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}","public void testCalendarToString_default_dateTime_1ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_1MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}"
65999,"public void testCalendarToString_default_dateTime_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}","public void testCalendarToString_default_dateTime_10ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_10MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}"
66000,"public void testCalendarToString_default_dateTime_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}","public void testCalendarToString_default_dateTime_0ms(){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(CONTROL_DATE_TIME_0MS);
  calendar.clear(Calendar.ZONE_OFFSET);
  String control=""String_Node_Str"";
  String test=(String)xcm.convertObject(calendar,String.class);
  this.assertEquals(control,test);
}"
